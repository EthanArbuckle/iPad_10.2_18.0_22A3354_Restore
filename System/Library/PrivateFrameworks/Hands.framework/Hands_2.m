uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1, v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    *v0 = result;
  }
  return result;
}

{
  return MEMORY[0x24BEE1110]();
}

_QWORD *specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  _QWORD **v0;
  _QWORD *v1;
  _QWORD *result;

  v1 = *v0;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v1[2] + 1, 1, v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    *v0 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1, *v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    *v1 = result;
  }
  return result;
}

_QWORD *specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(_QWORD *result)
{
  _QWORD **v1;
  unint64_t v2;

  v2 = (*v1)[3];
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), (int64_t)result + 1, 1, *v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, a2, type metadata accessor for TrackingFAInternalFramePB);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *v3;
  *(_QWORD *)(v7 + 16) = a1 + 1;
  v8 = a3(0);
  return outlined init with take of Matrix2dPB(a2, v7+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int32 : Float]>, &demangling cache variable for type metadata for [Int32 : Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, CameraSource)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StatisticUtils.Location3DBucket>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PoseDnnOutputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PoseDnnOutputLayer, IONamedSlice));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PoseDnnInputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PoseDnnInputLayer, IONamedSlice));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PinchDnnOutputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PinchDnnOutputLayer, IONamedSlice));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PinchDnnInputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PinchDnnInputLayer, IONamedSlice));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RecoverScrollPinchData>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RecoverTapPinchData>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Data?]>, &demangling cache variable for type metadata for [Data?]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[SIMD2<Float>]>, &demangling cache variable for type metadata for [SIMD2<Float>]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpecItem>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MiddleDoubleTapSuppressor>, &demangling cache variable for type metadata for MiddleDoubleTapSuppressor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MiddleDoubleTapPostProcessingSuppressor>, &demangling cache variable for type metadata for MiddleDoubleTapPostProcessingSuppressor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PoseActionPipeline>, &demangling cache variable for type metadata for PoseActionPipeline);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingState>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GesturePipelineMapper.PipelineID>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CameraSource : [Float]]>, &demangling cache variable for type metadata for [CameraSource : [Float]]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MiddleDoubleTapSuppressorId>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StatisticUtils.CameraRegion>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 3);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 32])
          memmove(v12, a4 + 32, 3 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Float, Float, Float)>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 32])
          memmove(v12, a4 + 32, 12 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JointTransform>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Coordinate3D>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandyLoggerSinkProtocolNeo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpec>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 320);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[40 * v8 + 4])
          memmove(v12, a4 + 4, 320 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Double, SIMD3<Float>)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(EstimatedBoundingBox, EstimatedBoundingBox)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MonoHand>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EstimatedBoundingBox>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandApproachingMouthManager.HandApproachingMouthEvent>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchParameter>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SingleHandFrameFeatures>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 592);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[74 * v8 + 4])
          memmove(v12, a4 + 4, 592 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PinchRecoveryAnalyticsData>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 272);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[34 * v8 + 4])
          memmove(v12, a4 + 4, 272 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<Int8>?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PoseModelUtils.XCanonicalCropState>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 192);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 4])
          memmove(v12, a4 + 4, 192 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Frame>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, PoseImageCrop)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 192);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 4])
          memmove(v12, a4 + 4, 192 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImageData>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 192);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 4])
          memmove(v12, a4 + 4, 192 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectInteractionInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HoverDistance>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(TrackingPrediction, Bool)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Hungarian<Double>.Algorithm.Element>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(handID: UInt64, pipelineID: Int, needsReset: Bool)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandSkeleton.Joint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Hand>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PinchGestures.HandMovementDirection>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SSDDetectionModelOutputDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SSDDetectionModelInputDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CenterNetDetectionModelOutputDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CenterNetDetectionModelInputDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Hungarian<Double>.Algorithm.State>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ImageDataPB>, type metadata accessor for ImageDataPB);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MonoHandPB>, type metadata accessor for MonoHandPB);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CountByCameraSource>, type metadata accessor for CountByCameraSource);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RejectedHand>, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes>, type metadata accessor for DerivedHandAttributes);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandCursorEvent>, type metadata accessor for HandCursorEvent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingFAInternalFramePB>, type metadata accessor for TrackingFAInternalFramePB);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandsFAResultRowPB>, type metadata accessor for HandsFAResultRowPB);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LogMessage>, type metadata accessor for LogMessage);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
          memmove(v14, a4 + 4, 32 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 352);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[44 * v9 + 4])
          memmove(v13, a4 + 4, 352 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 95;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 7);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v9 + 4])
          memmove(v14, a4 + 4, v9 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = v3;
  v7 = a2 & 1;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v7);
  v10 = v9;
  result = swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    v25 = v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v4;
    v26 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v13 = v26;
    }
    v14 = (uint64_t *)(*(_QWORD *)(v13 + 56) + (v8 << 6));
    v15 = v14[2];
    v23 = *v14;
    v24 = v14[1];
    v17 = v14[3];
    v16 = v14[4];
    v19 = v14[5];
    v18 = v14[6];
    v20 = v14[7];
    specialized _NativeDictionary._delete(at:)(v8, v13);
    *v4 = v13;
    result = swift_bridgeObjectRelease();
    v22 = v23;
    v21 = v24;
    v10 = v25;
  }
  else
  {
    v22 = 0;
    v21 = 0;
    v15 = 0;
    v17 = 0;
    v16 = 0;
    v19 = 0;
    v18 = 0;
    v20 = 0;
  }
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v21;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 40) = v19;
  *(_QWORD *)(a3 + 48) = v18;
  *(_QWORD *)(a3 + 56) = v20;
  *(_BYTE *)(a3 + 64) = (v10 & 1) == 0;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _OWORD v13[12];

  v4 = v3;
  v7 = a2 & 1;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v7);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    *(_QWORD *)&v13[0] = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = *(_QWORD *)&v13[0];
    }
    memmove(a3, (const void *)(*(_QWORD *)(v11 + 56) + 192 * v8), 0xC0uLL);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return _s5Hands13PoseImageCropVSgWOi_(a3);
  }
  else
  {
    _s5Hands9ImageDataVSgWOi0_(v13);
    return outlined init with take of ImageData?((uint64_t)v13, (uint64_t)a3);
  }
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for Logger();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(_QWORD *)(v14 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Logger();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 192 * a1 + 32);
    v6 = 192 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 12 * a1 + 32);
    v6 = 12 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = v4 << 6;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 120 * a1 + 32);
    v6 = 120 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 80 * a1 + 32);
    v6 = 80 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 3 * a1 + 32);
    v6 = 3 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 272 * a1 + 32);
    v6 = 272 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 352 * a1 + 32);
    v6 = &__dst[352 * v4];
    if (v5 >= v6 || &v5[352 * v4] <= __dst)
    {
      memcpy(__dst, v5, 352 * v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 144 * a1 + 32);
    v6 = 144 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of PartialHandMultiCam?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 192 * a1 + 32;
    v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CameraSource, PoseImageCrop));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandyLoggerSinkProtocolNeo);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 320 * a1 + 32;
    v6 = a3 + 320 * v4;
    if (v5 >= v6 || v5 + 320 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 192 * a1 + 32;
    v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 592 * a1 + 32;
    v6 = a3 + 592 * v4;
    if (v5 >= v6 || v5 + 592 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPose?);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingPrediction, Bool));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in FAProtoBufImageDataPopulation.populate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in FAProtoBufImageDataPopulation.populate()(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

_QWORD *specialized Sequence.forEach(_:)(_QWORD *result, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  char v11;
  uint64_t v12;
  char v13;

  v3 = result[2];
  if (v3)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v7 = result;
      v8 = result[4];
      v9 = result[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      for (i = 0; ; i += 2)
      {
        --v5;
        --v3;
        swift_bridgeObjectRetain();
        v11 = *(_BYTE *)(a2 + i * 8 + 40);
        v12 = *(_QWORD *)(a2 + i * 8 + 32);
        v13 = v11;
        a3(v8, v9, &v12);
        swift_bridgeObjectRelease();
        if (!v3 || !v5)
          break;
        v8 = v7[i + 6];
        v9 = v7[i + 7];
      }
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  return partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1) & 1;
}

{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t Hands_trace_CBridge_3()
{
  return kdebug_trace();
}

uint64_t initializeBufferWithCopyOfBuffer for SequenceMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SequenceMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SequenceMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SequenceMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SequenceMetadata()
{
  return &type metadata for SequenceMetadata;
}

uint64_t type metadata accessor for FASequencePopulate()
{
  return objc_opt_self();
}

uint64_t method lookup function for FASequencePopulate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FASequencePopulate.populate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ReferenceHandsPopulation.populate(accordingTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for FAProtoBufReferenceHandsPopulation()
{
  return objc_opt_self();
}

uint64_t method lookup function for FAProtoBufReferenceHandsPopulation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FAProtoBufReferenceHandsPopulation.__allocating_init(protobufPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FAProtoBufReferenceHandsPopulation.populate(accordingTo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ImageDataPopulation.populate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for FAProtoBufImageDataPopulation()
{
  return objc_opt_self();
}

uint64_t method lookup function for FAProtoBufImageDataPopulation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FAProtoBufImageDataPopulation.__allocating_init(dataFiles:imageFiles:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of FAProtoBufImageDataPopulation.populate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of static FAProtoBufImageDataPopulation.getCameraIDFromPath(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_23D77C1C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D77C1E4()
{
  return swift_deallocObject();
}

Swift::Void __swiftcall TaxiPoseActionPipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(HandsKitConfig *);
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  PosePreprocessing.loadModelParams(_:)(a1);
  swift_retain();
  StereoPoseDetectorModel.reconfig(_:)(a1);
  swift_release();
  v8 = *(_QWORD *)(v1 + 32);
  PinchPipeline.loadModelParams(_:)(a1);
  v9 = *(void (**)(HandsKitConfig *))(**(_QWORD **)(v8 + 16) + 152);
  swift_retain();
  v9(a1);
  swift_release();
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(void **)(v10 + 16);
  swift_retain();
  objc_msgSend(v11, sel_resetAllBuffers);
  v12 = *(void **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = 0;
  swift_release();

  MiddleDoubleTapRecognition.reconfig(_:)(a1);
  v13 = type metadata accessor for HandDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  v14 = v2 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v7, v14);
  swift_endAccess();
  v15 = -[HandsKitConfig EnableCameraPairTransitionCorrection](a1, sel_EnableCameraPairTransitionCorrection);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__enableCameraPairTransitionCorrection) = v15;
}

Swift::Void __swiftcall TaxiPoseActionPipeline.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v7 = *(void **)(v6 + 16);
  swift_retain();
  objc_msgSend(v7, sel_resetAllBuffers);
  v8 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;
  swift_release();

  v9 = *(_QWORD *)(v1 + 40);
  swift_retain();
  DoubleTapStateMachine.reset()();
  swift_release();
  v10 = objc_msgSend(*(id *)(v9 + 48), sel_MiddleDoubleTapSuppressors);
  type metadata accessor for NSNumber();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  v12 = specialized Sequence.compactMap<A>(_:)(v11, v9);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v9 + 40) = v12;
  swift_bridgeObjectRelease();
  swift_retain();
  StereoPoseDetectorModel.reset()();
  swift_release();
  v13 = type metadata accessor for HandDescriptor();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  v14 = v1 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v5, v14);
  swift_endAccess();
}

uint64_t TaxiPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  __int32 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[456];
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _BYTE v151[456];

  v127 = a3;
  v6 = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v113 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v112 = (uint64_t)&v110 - v12;
  MEMORY[0x24BDAC7A8](v13, v14);
  v126 = (uint64_t)&v110 - v15;
  MEMORY[0x24BDAC7A8](v16, v17);
  v125 = (char *)&v110 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v122 = (uint64_t)&v110 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v123 = (uint64_t)&v110 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v25, v26);
  v118 = (uint64_t)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28, v29);
  v117 = (uint64_t)&v110 - v30;
  MEMORY[0x24BDAC7A8](v31, v32);
  v124 = (uint64_t)&v110 - v33;
  MEMORY[0x24BDAC7A8](v34, v35);
  v115 = (uint64_t)&v110 - v36;
  MEMORY[0x24BDAC7A8](v37, v38);
  v116 = (char *)&v110 - v39;
  MEMORY[0x24BDAC7A8](v40, v41);
  v114 = (uint64_t)&v110 - v42;
  MEMORY[0x24BDAC7A8](v43, v44);
  v119 = (uint64_t)&v110 - v45;
  MEMORY[0x24BDAC7A8](v46, v47);
  v136 = (uint64_t)&v110 - v48;
  MEMORY[0x24BDAC7A8](v49, v50);
  v52 = (char *)&v110 - v51;
  MEMORY[0x24BDAC7A8](v53, v54);
  v134 = (uint64_t)&v110 - v55;
  MEMORY[0x24BDAC7A8](v56, v57);
  v59 = (char *)&v110 - v58;
  memcpy(v151, (const void *)a2, sizeof(v151));
  v129 = *(_QWORD *)(a2 + 456);
  v60 = *(_OWORD *)(a2 + 512);
  v147 = *(_OWORD *)(a2 + 496);
  v148 = v60;
  v149 = *(_OWORD *)(a2 + 528);
  v150 = *(_QWORD *)(a2 + 544);
  v61 = *(_OWORD *)(a2 + 480);
  v145 = *(_OWORD *)(a2 + 464);
  v146 = v61;
  v62 = v3;
  v63 = v3 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__prevHand;
  v64 = a1;
  v131 = *(unsigned __int8 *)(a1 + 136);
  swift_beginAccess();
  v135 = v63;
  outlined init with copy of HandDescriptor?(v63, (uint64_t)v59);
  v65 = v7;
  v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v67 = v6;
  v128 = v66;
  if (v66((uint64_t)v59, 1, v6))
  {
    outlined destroy of HandDescriptor?((uint64_t)v59);
  }
  else
  {
    v68 = *((_QWORD *)v59 + 18);
    outlined destroy of HandDescriptor?((uint64_t)v59);
    if (v68 == *(_QWORD *)(v64 + 144))
      goto LABEL_5;
  }
  TaxiPoseActionPipeline.reset()();
LABEL_5:
  v69 = v135;
  if (*(_BYTE *)(v62 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__enableCameraPairTransitionCorrection) == 1)
  {
    v70 = v134;
    outlined init with copy of HandDescriptor(v64, v134);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v70, 0, 1, v6);
    outlined init with copy of HandDescriptor?(v69, (uint64_t)v52);
    v133 = specialized static CameraPairTransition.determineState(_:_:)(v70, (uint64_t)v52);
    outlined destroy of HandDescriptor?((uint64_t)v52);
    outlined destroy of HandDescriptor?(v70);
  }
  else
  {
    v133 = 0;
  }
  v132 = v62;
  v71 = *(_QWORD *)(*(_QWORD *)(v62 + 16) + 32);
  if (!v71)
  {
    __break(1u);
    goto LABEL_28;
  }
  v131 = (v131 & 1) == 0;
  LODWORD(v72) = *(unsigned __int8 *)(v71 + 320);
  v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
  v120(v136, 1, 1, v6);
  v121 = v64;
  v130 = v6;
  if ((v133 - 1) <= 1u)
  {
    v73 = v123;
    outlined init with copy of HandDescriptor(v64, v123);
    v74 = v119;
    outlined init with copy of HandDescriptor?(v69, v119);
    v75 = v128(v74, 1, v6);
    v76 = v129;
    if (v75 != 1)
    {
      v77 = v69;
      v110 = v72 & 1;
      v111 = v72;
      v79 = *(_QWORD *)(v74 + 200);
      v78 = *(_QWORD *)(v74 + 208);
      outlined copy of HandPose?(v79);
      outlined destroy of HandDescriptor(v74);
      outlined consume of HandPose?(*(_QWORD *)(v73 + 200));
      *(_QWORD *)(v73 + 200) = v79;
      *(_QWORD *)(v73 + 208) = v78;
      Hands_trace_CBridge_0();
      v80 = v132;
      v81 = v77;
      v82 = v134;
      outlined init with copy of HandDescriptor?(v81, v134);
      memcpy(v137, v151, sizeof(v137));
      v138 = v76;
      v141 = v147;
      v142 = v148;
      v143 = v149;
      v144 = v150;
      v139 = v145;
      v140 = v146;
      v83 = *(_QWORD *)(*(_QWORD *)(v80 + 16) + 72);
      swift_bridgeObjectRetain();
      v84 = v122;
      PosePreprocessing.run(forHand:withOlderHand:withHandsKitData:gtInjections:xCanonicalization:rotateCrops:)(v73, v82, (uint64_t)v137, v83, v110, 1, v122);
      swift_bridgeObjectRelease();
      outlined destroy of HandDescriptor?(v82);
      Hands_trace_CBridge_0();
      Hands_trace_CBridge_0();
      v85 = (uint64_t)v116;
      v86 = v120;
      v120((uint64_t)v116, 1, 1, v67);
      memcpy(v137, v151, sizeof(v137));
      v138 = v76;
      v141 = v147;
      v142 = v148;
      v143 = v149;
      v144 = v150;
      v139 = v145;
      v140 = v146;
      v69 = v135;
      v87 = v115;
      outlined init with copy of HandDescriptor?(v135, v115);
      swift_retain();
      v88 = v114;
      StereoPoseDetectorModel.run(forHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPrevHand:generateAlternatePose:)(v84, 0, v85, (uint64_t)v137, v87, 1, v114);
      swift_release();
      outlined destroy of HandDescriptor?(v87);
      outlined destroy of HandDescriptor?(v85);
      v72 = v136;
      outlined destroy of HandDescriptor?(v136);
      v86(v88, 0, 1, v130);
      outlined init with take of HandDescriptor?(v88, v72);
      Hands_trace_CBridge_0();
      outlined destroy of HandDescriptor(v122);
      outlined destroy of HandDescriptor(v123);
      v89 = (uint64_t)v125;
      LOBYTE(v72) = v111;
      goto LABEL_13;
    }
LABEL_28:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v89 = (uint64_t)v125;
  v76 = v129;
LABEL_13:
  Hands_trace_CBridge_0();
  v90 = v132;
  v91 = v134;
  outlined init with copy of HandDescriptor?(v69, v134);
  memcpy(v137, v151, sizeof(v137));
  v138 = v76;
  v141 = v147;
  v142 = v148;
  v143 = v149;
  v144 = v150;
  v139 = v145;
  v140 = v146;
  v92 = *(_QWORD *)(*(_QWORD *)(v90 + 16) + 72);
  swift_bridgeObjectRetain();
  PosePreprocessing.run(forHand:withOlderHand:withHandsKitData:gtInjections:xCanonicalization:rotateCrops:)(v121, v91, (uint64_t)v137, v92, v72 & 1, 1, v89);
  v93 = v135;
  swift_bridgeObjectRelease();
  outlined destroy of HandDescriptor?(v91);
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  memcpy(v137, v151, sizeof(v137));
  v138 = v76;
  v141 = v147;
  v142 = v148;
  v143 = v149;
  v144 = v150;
  v139 = v145;
  v140 = v146;
  v94 = v124;
  outlined init with copy of HandDescriptor?(v93, v124);
  swift_retain();
  v95 = v126;
  v96 = v89;
  StereoPoseDetectorModel.run(forHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPrevHand:generateAlternatePose:)(v89, v133, v136, (uint64_t)v137, v94, 0, v126);
  swift_release();
  outlined destroy of HandDescriptor?(v94);
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  v97 = v130;
  v98 = v95 + *(int *)(v130 + 100);
  v99 = *(_QWORD *)v98;
  if (*(_BYTE *)(v98 + 8) == 1)
  {
    if (v99 >= 3)
    {
LABEL_15:
      v100 = v117;
      outlined init with copy of HandDescriptor?(v93, v117);
      if (v128(v100, 1, v97) == 1)
      {
        outlined destroy of HandDescriptor(v96);
        outlined destroy of HandDescriptor?(v136);
        outlined destroy of HandDescriptor?(v100);
        v101 = v113;
        outlined init with copy of HandDescriptor(v95, v113);
        v102 = v127;
        outlined init with copy of HandDescriptor(v101, v127);
        *(_BYTE *)(v102 + 4) = 0;
        *(_BYTE *)(v102 + 137) = 0;
        outlined destroy of HandDescriptor(v101);
      }
      else
      {
        v106 = v112;
        outlined init with take of HandDescriptor(v100, v112);
        type metadata accessor for PinchHelper();
        static PinchHelper.copyActionResultToHand(from:to:)(v106, v95, v127);
        outlined destroy of HandDescriptor(v106);
        outlined destroy of HandDescriptor(v96);
        outlined destroy of HandDescriptor?(v136);
      }
      return outlined destroy of HandDescriptor(v95);
    }
  }
  else if (v99 == 3)
  {
    goto LABEL_15;
  }
  memcpy(v137, v151, sizeof(v137));
  v138 = v76;
  v141 = v147;
  v142 = v148;
  v143 = v149;
  v144 = v150;
  v139 = v145;
  v140 = v146;
  PinchPipeline.run(_:_:)(v95, (uint64_t)v137);
  Hands_trace_CBridge_0();
  outlined destroy of HandDescriptor(v96);
  outlined destroy of HandDescriptor?(v136);
  if (*(_QWORD *)(v95 + 16))
  {
    v103 = v127;
    v104 = v118;
    if (*(_BYTE *)(v95 + 128) == 1)
    {
      outlined init with copy of HandDescriptor(v95, v118);
      v105 = 0;
    }
    else
    {
      v105 = 1;
    }
  }
  else
  {
    v105 = 1;
    v103 = v127;
    v104 = v118;
  }
  v120(v104, v105, 1, v97);
  v108 = v104;
  v109 = v134;
  outlined init with take of HandDescriptor?(v108, v134);
  swift_beginAccess();
  outlined assign with take of HandDescriptor?(v109, v93);
  swift_endAccess();
  return outlined init with take of HandDescriptor(v95, v103);
}

uint64_t TaxiPoseActionPipeline.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__prevHand);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TaxiPoseActionPipeline()
{
  return type metadata accessor for TaxiPoseActionPipeline();
}

uint64_t type metadata accessor for TaxiPoseActionPipeline()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TaxiPoseActionPipeline;
  if (!type metadata singleton initialization cache for TaxiPoseActionPipeline)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TaxiPoseActionPipeline()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void protocol witness for PoseActionPipeline.reconfig(_:) in conformance TaxiPoseActionPipeline(HandsKitConfig *a1)
{
  TaxiPoseActionPipeline.reconfig(_:)(a1);
}

uint64_t protocol witness for PoseActionPipeline.run(forHand:withHandsKitData:ps_handle:) in conformance TaxiPoseActionPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TaxiPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)(a1, a2, a3);
}

_QWORD *specialized TaxiPoseActionPipeline.init(options:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  HandsKitConfig *v9;
  uint64_t v10;
  HandsKitConfig *v11;
  _QWORD *v12;
  uint64_t v13;
  HandsKitConfig *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = (char *)v1 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__prevHand;
  v5 = type metadata accessor for HandDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for PosePreprocessing();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_BYTE *)(v6 + 64) = 1;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  PosePreprocessing.loadModelParams(_:)(a1);
  v2[3] = v6;
  type metadata accessor for StereoPoseDetectorModel();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  v8 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = v8;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0xE000000000000000;
  v9 = a1;
  StereoPoseDetectorModel.reconfig(_:)(v9);

  v2[2] = v7;
  type metadata accessor for PinchModelInference();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v11 = v9;
  objc_msgSend(0, sel_resetAllBuffers);
  *(_QWORD *)(v10 + 24) = 0;

  type metadata accessor for PinchPipeline();
  swift_allocObject();
  v12 = specialized PinchPipeline.init(config:inference:)(v11, v10);

  swift_release();
  v2[4] = v12;
  type metadata accessor for HoverDistanceCalculator();
  v13 = swift_allocObject();
  type metadata accessor for MiddleDoubleTapRecognition();
  swift_allocObject();
  v14 = v11;
  v15 = specialized MiddleDoubleTapRecognition.init(_:_:)(v14, v13);

  swift_release();
  v2[5] = v15;
  v19 = xmmword_23D9A6CC0;
  v20 = 0;
  v21 = 0;
  v18[3] = MEMORY[0x24BEE0D00];
  v18[0] = 0xD00000000000002ALL;
  v18[1] = 0x800000023D9CB4E0;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000066, 0x800000023D9CB470, 24, (uint64_t *)&v19, (uint64_t)v18, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  v16 = -[HandsKitConfig EnableCameraPairTransitionCorrection](v14, sel_EnableCameraPairTransitionCorrection);
  *((_BYTE *)v2 + OBJC_IVAR____TtC5Hands22TaxiPoseActionPipeline__enableCameraPairTransitionCorrection) = v16;
  return v2;
}

uint64_t type metadata accessor for HoverDistanceCalculator()
{
  return objc_opt_self();
}

void specialized HoverDistanceCalculator.calculate(withJoint:onHand:atTime:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  unint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  double v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  double v22;
  long double v23;
  double v24;
  float v25;

  if (!*(_QWORD *)(a2 + 16))
  {
    v22 = 3.14159265;
    v14 = INFINITY;
    v24 = INFINITY;
    goto LABEL_10;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v8 < 5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = vsubq_f32(*(float32x4_t *)(v7 + 32 * a1 + 32), *(float32x4_t *)(v7 + 160));
  v10 = vmulq_f32(v9, v9);
  v11 = vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1));
  v12 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2);
  LODWORD(v13) = vaddq_f32(v12, v11).u32[0];
  v14 = sqrtf(v13);
  if (a1 != 14)
  {
    v24 = INFINITY;
    v22 = INFINITY;
    goto LABEL_10;
  }
  if (v8 >= 0x16)
  {
    *(float32x2_t *)v12.f32 = vsub_f32(*(float32x2_t *)(v7 + 704), *(float32x2_t *)(v7 + 32));
    v12.f32[2] = *(float *)(v7 + 712) - *(float *)(v7 + 40);
    v15 = (int32x4_t)vmulq_f32(v12, v12);
    v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
    v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
    v18 = vmulq_n_f32(v12, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    v19 = vrsqrte_f32((float32x2_t)LODWORD(v13));
    v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v19, v19)));
    v21 = vmulq_f32(v18, vmulq_n_f32(v9, vmul_f32(v20, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v20, v20))).f32[0]));
    v25 = v13;
    v22 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
    v23 = cos(v22) * 0.46875 + 0.345625;
    v24 = sqrt((v23 + cos(v22 + v22) * 0.185625) * v25);
LABEL_10:
    *(_QWORD *)a3 = a1;
    *(_BYTE *)(a3 + 8) = 0;
    *(double *)(a3 + 16) = a4;
    *(double *)(a3 + 24) = v14;
    *(double *)(a3 + 32) = v24;
    *(double *)(a3 + 40) = v22;
    return;
  }
LABEL_14:
  __break(1u);
}

Hands::HandsKitGTInjection_optional __swiftcall HandsKitGTInjection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  Hands::HandsKitGTInjection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of HandsKitGTInjection.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t HandsKitGTInjection.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D77D664 + 4 * byte_23D9AE7B0[*v0]))(0x64696C61766E69, 0xE700000000000000);
}

uint64_t sub_23D77D664()
{
  return 0x6F6973756C63636FLL;
}

uint64_t sub_23D77D680()
{
  return 0x746E6543646E6168;
}

uint64_t sub_23D77D69C()
{
  return 0x4864656B63617274;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance HandsKitGTInjection(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance HandsKitGTInjection()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D77D714()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandsKitGTInjection()
{
  __asm { BR              X10 }
}

uint64_t sub_23D77D7D0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance HandsKitGTInjection()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D77D884()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Hands::HandsKitGTInjection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance HandsKitGTInjection(Swift::String *a1)
{
  return HandsKitGTInjection.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HandsKitGTInjection()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D77D940 + 4 * byte_23D9AE7C0[*v0]))();
}

void sub_23D77D940(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6973756C63636FLL;
  a1[1] = 0xE90000000000006ELL;
}

void sub_23D77D960(_QWORD *a1@<X8>)
{
  *a1 = 0x746E6543646E6168;
  a1[1] = 0xEA00000000007265;
}

void sub_23D77D980(_QWORD *a1@<X8>)
{
  *a1 = 0x4864656B63617274;
  a1[1] = 0xEB00000000646E61;
}

uint64_t HandsKitPipeline.__allocating_init(options:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  HandsKitPipeline.init(options:)(a1);
  return v2;
}

uint64_t HandsKitPipeline.init(options:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  id v10;
  HandsKitConfig *v11;
  uint64_t v12;
  uint64_t v13;
  HandsKitConfig *v14;
  HandsKitConfig *v15;
  uint64_t v16;
  HandsKitConfig *v17;
  uint64_t v18;
  uint64_t v19;
  HandsKitConfig *v20;
  uint64_t v21;
  HandsKitConfig *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  HandsKitConfig *v29;
  uint64_t v30;
  id v31;
  HandsKitConfig *v32;
  HandsKitConfig *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjCClassFromMetadata;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v61;
  uint64_t result;
  uint64_t v63[5];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v2 = v1;
  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4, v5);
  *(_BYTE *)(v2 + 89) = 0;
  *(_QWORD *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 132) = 1038657310;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 144) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 152) = v6;
  *(_QWORD *)(v2 + 160) = v6;
  *(_QWORD *)(v2 + 168) = v6;
  *(_QWORD *)(v2 + 176) = 0;
  *(_BYTE *)(v2 + 184) = 1;
  *(_QWORD *)(v2 + 192) = v6;
  *(_QWORD *)(v2 + 200) = v6;
  *(_QWORD *)(v2 + 208) = v6;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *(_BYTE *)(v2 + 264) = 0;
  type metadata accessor for FrameManager();
  v7 = (_QWORD *)swift_allocObject();
  v8 = a1;
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 90, 0, v6);
  v7[2] = 90;
  v7[3] = v9;
  v7[4] = 0;
  swift_beginAccess();
  v7[3] = v6;
  v7[4] = 0;
  swift_bridgeObjectRelease();
  if (objc_msgSend(v8, sel_FrameRate) > 0x59)
  {
    static Frame.shared = xmmword_23D9AE990;
    qword_256CA57F0 = 2;
  }
  else
  {
    qword_256CA57F0 = 0;
    static Frame.shared = 1uLL;
  }

  *(_QWORD *)(v2 + 16) = v7;
  *(_BYTE *)(v2 + 89) = objc_msgSend(v8, sel_Passthrough);
  type metadata accessor for Detection2DPipeline();
  swift_allocObject();
  v10 = v8;
  *(_QWORD *)(v2 + 24) = Detection2DPipeline.init(options:)(v10);
  type metadata accessor for Tracking3D();
  swift_allocObject();
  v11 = (HandsKitConfig *)v10;
  v12 = specialized Tracking3D.init(options:)(v11);

  *(_QWORD *)(v2 + 32) = v12;
  type metadata accessor for Pose();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v6;
  type metadata accessor for PipelineMapper();
  swift_allocObject();
  v14 = v11;
  *(_QWORD *)(v13 + 24) = PipelineMapper.init()();
  *(_BYTE *)(v13 + 32) = 0;
  Pose.reconfig(_:)(v14);

  *(_QWORD *)(v2 + 40) = v13;
  type metadata accessor for OperationalEnvelopeProcess();
  swift_allocObject();
  v15 = v14;
  *(_QWORD *)(v2 + 48) = OperationalEnvelopeProcess.init(_:)(v15);
  *(_QWORD *)(v2 + 56) = specialized static GesturePipelineFactory.makeGesturePipeline(_:)(v15);
  type metadata accessor for OutOfEnvelopeFilter();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v6);
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v2 + 64) = v16;
  swift_allocObject();
  v17 = v15;
  v18 = PipelineMapper.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_23D9AE9A0;
  v20 = v17;
  v21 = specialized SceneSegmentationProcessing.__allocating_init(_:)(v20);

  *(_QWORD *)(v19 + 32) = v21;
  v22 = v20;
  v23 = specialized SceneSegmentationProcessing.__allocating_init(_:)(v22);

  *(_QWORD *)(v19 + 40) = v23;
  specialized Array._endMutation()();
  v24 = -[HandsKitConfig FrameRate](v22, sel_FrameRate);
  *(_QWORD *)&v64 = v6;
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v24, 0);
  specialized Array._endMutation()();

  type metadata accessor for SceneSegmentationNode();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v18;
  v25[3] = v19;
  v25[4] = v24;
  v25[5] = v6;
  v25[6] = 0;
  *(_QWORD *)(v2 + 72) = v25;
  v26 = *(_QWORD *)(v2 + 32);
  type metadata accessor for HandsKitPostProcessing();
  v27 = swift_allocObject();
  v28 = objc_allocWithZone((Class)HandsKitConfig);
  v29 = v22;
  swift_retain();
  *(_QWORD *)(v27 + 40) = objc_msgSend(v28, sel_init);
  type metadata accessor for PrewittDataLogger();
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 0;
  *(_QWORD *)(v27 + 48) = v30;
  *(_DWORD *)(v27 + 56) = 0x10000;
  *(_DWORD *)(v27 + 60) = 0;
  *(_BYTE *)(v27 + 64) = 0;
  *(_DWORD *)(v27 + 68) = 0;
  v31 = objc_allocWithZone((Class)type metadata accessor for Enrolment());
  v32 = v29;
  *(_QWORD *)(v27 + 16) = Enrolment.init(options:)(v32);
  type metadata accessor for PipelineStatistics();
  swift_allocObject();
  v33 = v32;
  v34 = specialized PipelineStatistics.init(options:)(v33);

  *(_QWORD *)(v27 + 24) = v34;
  *(_QWORD *)(v27 + 32) = v26;
  swift_retain();
  HandsKitPostProcessing.reconfig(_:)(v33);

  swift_release();
  *(_QWORD *)(v2 + 80) = v27;
  *(_BYTE *)(v2 + 88) = -[HandsKitConfig EnableEnrolment](v33, sel_EnableEnrolment);
  *(_BYTE *)(v2 + 264) = -[HandsKitConfig EnableObjectInteractionState](v33, sel_EnableObjectInteractionState);
  *(_QWORD *)(v2 + 96) = dispatch_semaphore_create(0);
  *(_QWORD *)(v2 + 112) = dispatch_semaphore_create(1);
  v35 = (void *)objc_opt_self();
  v36 = (void *)MEMORY[0x2426372E8](0x656E696C65706950, 0xEE0065756575715FLL);
  v37 = objc_msgSend(v35, sel_createHighPriorityQueueWithKey_, v36);

  *(_QWORD *)(v2 + 104) = v37;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = 0xD000000000000015;
  *((_QWORD *)&v64 + 1) = 0x800000023D9CB5B0;
  LODWORD(v63[0]) = 1;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39 = MEMORY[0x24BEE0D00];
  v66 = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 70, (uint64_t)&v64, (uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
  v66 = v39;
  *(_QWORD *)&v64 = 0xD000000000000018;
  *((_QWORD *)&v64 + 1) = 0x800000023D9CB5D0;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 74, (uint64_t)&v64, (uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
  v66 = v39;
  *(_QWORD *)&v64 = 0xD00000000000001DLL;
  *((_QWORD *)&v64 + 1) = 0x800000023D9CB5F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23D9A70A0;
  v41 = objc_msgSend((id)objc_opt_self(), sel_GetHandsKitVersionString);
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = v43;

  *(_QWORD *)(v40 + 56) = v39;
  *(_QWORD *)(v40 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v40 + 32) = v42;
  *(_QWORD *)(v40 + 40) = v44;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 77, (uint64_t)&v64, v40);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v46 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v47 = (void *)MEMORY[0x2426372E8](0xD000000000000012, 0x800000023D9CB610);
  v48 = (void *)MEMORY[0x2426372E8](0, 0xE000000000000000);
  v49 = objc_msgSend(v46, sel_pathForResource_ofType_, v47, v48);

  if (v49)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static String.Encoding.utf8.getter();
    v50 = String.init(contentsOfFile:encoding:)();
    v52 = v51;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v64 = 0xD000000000000016;
    *((_QWORD *)&v64 + 1) = 0x800000023D9CB650;
    v53._countAndFlagsBits = v50;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v66 = v39;
    v54 = MEMORY[0x24BEE4AF8];
    specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 81, (uint64_t)&v64, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
    v66 = v39;
    *(_QWORD *)&v64 = 0x3A736E6F6974704FLL;
    *((_QWORD *)&v64 + 1) = 0xEB00000000402520;
    v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_23D9A70A0;
    v56 = -[HandsKitConfig build](v33, sel_build);
    v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)(v55 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)(v55 + 64) = lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String : Any] and conformance [A : B], &demangling cache variable for type metadata for [String : Any], MEMORY[0x24BDCF848]);
    *(_QWORD *)(v55 + 32) = v57;
    specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 83, (uint64_t)&v64, v55);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
    v66 = v39;
    *(_QWORD *)&v64 = 0xD000000000000029;
    *((_QWORD *)&v64 + 1) = 0x800000023D9CB670;
    specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 84, (uint64_t)&v64, v54);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
    v64 = xmmword_23D9AB690;
    v65 = 0;
    v66 = 0;
    v58 = mach_absolute_time();
    v59 = type metadata accessor for HandsKitPipelineEvent(0);
    v63[3] = v59;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v63);
    UnknownStorage.init()();
    v61 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v59 + 32));
    *v61 = 0;
    v61[1] = 0;
    *boxed_opaque_existential_0 = v58;
    boxed_opaque_existential_0[1] = 1;
    *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
    boxed_opaque_existential_0[3] = 1;
    *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9CB540, 85, (uint64_t *)&v64, (uint64_t)v63, v54);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v63);
    return v2;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t HandsKitPipeline.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v4;
  uint64_t v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = xmmword_23D9AB690;
  v8 = 0;
  v9 = 0;
  v1 = mach_absolute_time();
  v2 = type metadata accessor for HandsKitPipelineEvent(0);
  v6[3] = v2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v6);
  UnknownStorage.init()();
  v4 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v2 + 32));
  *v4 = 0;
  v4[1] = 0;
  *boxed_opaque_existential_0 = v1;
  boxed_opaque_existential_0[1] = 2;
  *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
  boxed_opaque_existential_0[3] = 1;
  *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9CB540, 89, (uint64_t *)&v7, (uint64_t)v6, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ObjectInteractionResultsByHand?(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));

  return v0;
}

uint64_t HandsKitPipeline.__deallocating_deinit()
{
  HandsKitPipeline.deinit();
  return swift_deallocClassInstance();
}

uint64_t HandsKitPipeline.setInitialState(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[560];
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  outlined init with take of ImageData?(a1, (uint64_t)v8, &demangling cache variable for type metadata for HandsKitData?);
  v2 = *(_QWORD **)(v1 + 32);
  outlined init with take of ImageData?((uint64_t)v8, (uint64_t)v9, &demangling cache variable for type metadata for HandsKitData?);
  result = _s5Hands0A7KitDataVSgWOg(v9);
  if ((_DWORD)result != 1)
  {
    if (v9[1])
    {
      result = v10;
      if (v10)
      {
        v4 = v13;
        if (v13)
        {
          v5 = v12;
          v6 = v11;
          v2[4] = v9[2];
          v2[5] = result;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v7 = (_QWORD *)v2[6];
          swift_beginAccess();
          v7[2] = v6;
          v7[3] = v5;
          v7[4] = v4;
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall HandsKitPipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  HandsKitConfig *v6;
  uint64_t v7;
  HandsKitConfig *v8;
  HandsKitConfig *v9;
  uint64_t v10;
  uint64_t v11;
  HandsKitConfig *v12;
  uint64_t v13;
  HandsKitConfig *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v28;
  uint64_t v29[4];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 192) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 200) = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 208) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = v4;
  *(_DWORD *)(v1 + 132) = 1038657310;
  *(_QWORD *)(v1 + 152) = v4;
  *(_QWORD *)(v1 + 160) = v4;
  *(_QWORD *)(v1 + 168) = v4;
  *(_QWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 184) = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x24BEE0D00];
  v32 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v30 = 0xD000000000000023;
  *((_QWORD *)&v30 + 1) = 0x800000023D9CB700;
  specialized static HLog.I(file:function:line:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 54, (uint64_t)&v30, (uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
  Tracking3D.reconfigTracking(_:)(a1);
  Detection2DPipeline.reconfig(_:)(a1);
  Pose.reconfig(_:)(a1);
  HandsKitPostProcessing.reconfig(_:)(a1);
  *(_BYTE *)(v1 + 89) = -[HandsKitConfig Passthrough](a1, sel_Passthrough);
  *(_BYTE *)(v1 + 88) = -[HandsKitConfig EnableEnrolment](a1, sel_EnableEnrolment);
  type metadata accessor for OperationalEnvelopeProcess();
  swift_allocObject();
  v6 = a1;
  *(_QWORD *)(v1 + 48) = OperationalEnvelopeProcess.init(_:)(v6);
  swift_release();
  swift_retain();
  GesturePipeline.reconfig(_:)(v6);
  swift_release();
  type metadata accessor for OutOfEnvelopeFilter();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v2 + 64) = v7;
  v8 = v6;
  swift_release();
  *(_BYTE *)(v2 + 264) = -[HandsKitConfig EnableObjectInteractionState](v8, sel_EnableObjectInteractionState);
  type metadata accessor for PipelineMapper();
  swift_allocObject();
  v9 = v8;
  v10 = PipelineMapper.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9AE9A0;
  v12 = v9;
  v13 = specialized SceneSegmentationProcessing.__allocating_init(_:)(v12);

  *(_QWORD *)(v11 + 32) = v13;
  v14 = v12;
  v15 = specialized SceneSegmentationProcessing.__allocating_init(_:)(v14);

  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)&v30 = v11;
  specialized Array._endMutation()();
  v16 = v30;
  v17 = -[HandsKitConfig FrameRate](v14, sel_FrameRate);
  *(_QWORD *)&v30 = v4;
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v17, 0);
  specialized Array._endMutation()();

  v18 = v30;
  type metadata accessor for SceneSegmentationNode();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v10;
  v19[3] = v16;
  v19[4] = v17;
  v19[5] = v18;
  v19[6] = 0;
  *(_QWORD *)(v2 + 72) = v19;
  swift_release();
  v20 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  *(_QWORD *)(v20 + 24) = v4;
  *(_QWORD *)(v20 + 32) = 0;
  swift_bridgeObjectRelease();
  v21 = -[HandsKitConfig FrameRate](v14, sel_FrameRate);
  v22 = 3;
  if (v21 < 0x5A)
    v22 = 1;
  qword_256CA57F0 = 2 * (v21 > 0x59);
  static Frame.shared = (unint64_t)v22;
  *(_QWORD *)&v30 = 0x3A736E6F6974704FLL;
  *((_QWORD *)&v30 + 1) = 0xE900000000000020;
  v23 = -[HandsKitConfig build](v14, sel_build);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v24._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v5;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 117, (uint64_t)&v30, (uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
  v32 = v5;
  *(_QWORD *)&v30 = 0xD00000000000002ALL;
  *((_QWORD *)&v30 + 1) = 0x800000023D9CB730;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 118, (uint64_t)&v30, (uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
  v30 = xmmword_23D9AB690;
  v31 = 0;
  v32 = 0;
  v25 = mach_absolute_time();
  v26 = type metadata accessor for HandsKitPipelineEvent(0);
  v29[3] = v26;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v29);
  UnknownStorage.init()();
  v28 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v26 + 32));
  *v28 = 0;
  v28[1] = 0;
  *boxed_opaque_existential_0 = v25;
  boxed_opaque_existential_0[1] = 0;
  *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
  boxed_opaque_existential_0[3] = 1;
  *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9CB540, 119, (uint64_t *)&v30, (uint64_t)v29, (uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t HandsKitPipeline.run(withInput:completion:)(const void *a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  double v21;
  Float64 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t (*v46)(_QWORD *);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[70];
  _BYTE v55[128];
  _QWORD v56[2];
  int v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  _QWORD v70[72];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v52 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  MEMORY[0x24BDAC7A8](v11, v12);
  v49 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v70, a1, 0x228uLL);
  Hands_trace_CBridge();
  Hands_trace_CBridge();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  Hands_trace_CBridge();
  Hands_frame_boundary_trace_CBridge();
  if (*(_BYTE *)(v4 + 89) == 1)
  {
    OS_dispatch_semaphore.signal()();
    Hands_frame_boundary_trace_CBridge();
    memcpy(v54, v70, 0x228uLL);
    return a2(v54);
  }
  else
  {
    v46 = a2;
    v47 = a3;
    v20 = v70[42];
    CMTime.seconds.getter();
    v22 = v21;
    CMTime.seconds.getter();
    FrameManager.add(frameID:masterTimestamp:midExposureTimestamp:)(v20, v23, 0, (uint64_t)v54, v22);
    outlined init with take of ImageData?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for Frame?);
    outlined init with take of ImageData?((uint64_t)v55, (uint64_t)v56, &demangling cache variable for type metadata for Frame?);
    if (_s5Hands5FrameVSgWOg((uint64_t)v56) == 1)
    {
      memcpy(v54, v70, 0x228uLL);
      return v46(v54);
    }
    else
    {
      v24 = v56[1];
      v40 = v60;
      v25 = v59;
      v39 = v61;
      v38 = v62;
      v36 = v56[0];
      v37 = v63;
      v45 = v65;
      v43 = v67;
      v44 = v66;
      v42 = v68;
      v41 = v69;
      v26 = v8;
      v27 = v57;
      v28 = v58;
      v29 = swift_allocObject();
      memcpy((void *)(v29 + 16), v70, 0x228uLL);
      *(_QWORD *)(v29 + 352) = v36;
      *(_QWORD *)(v29 + 360) = v24;
      *(_DWORD *)(v29 + 368) = v27;
      *(_DWORD *)(v29 + 372) = v28;
      *(_QWORD *)(v29 + 376) = v25;
      *(_OWORD *)(v29 + 384) = v40;
      *(_QWORD *)(v29 + 400) = v39;
      *(_BYTE *)(v29 + 408) = v38;
      *(_QWORD *)(v29 + 412) = v37;
      *(_QWORD *)(v29 + 420) = v64;
      *(_OWORD *)(v29 + 428) = v45;
      *(_QWORD *)(v29 + 444) = v44;
      *(_QWORD *)(v29 + 452) = v43;
      *(_BYTE *)(v29 + 460) = v42;
      *(_QWORD *)(v29 + 464) = v41;
      outlined retain of HandsKitData(v70);
      CMTime.seconds.getter();
      *(_QWORD *)(v29 + 472) = v30;
      *(_QWORD *)&v45 = *(_QWORD *)(v4 + 104);
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = v29;
      v31[3] = v4;
      v32 = v47;
      v31[4] = v46;
      v31[5] = v32;
      v54[4] = partial apply for closure #1 in HandsKitPipeline.run(withInput:completion:);
      v54[5] = v31;
      v54[0] = MEMORY[0x24BDAC760];
      v54[1] = 1107296256;
      v54[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v54[3] = &block_descriptor_7;
      v33 = _Block_copy(v54);
      swift_retain();
      swift_retain();
      swift_retain();
      v34 = v49;
      static DispatchQoS.unspecified.getter();
      v53 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
      v35 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2426376F0](0, v34, v35, v33);
      _Block_release(v33);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v26);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
      swift_release();
      return swift_release();
    }
  }
}

_QWORD *closure #1 in HandsKitPipeline.run(withInput:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *))
{
  const void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  Swift::String v34;
  Swift::String v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[35];
  _OWORD __src[35];
  _QWORD v70[70];
  _BYTE v71[415];
  char v72;
  __int16 v73;
  char v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _OWORD __dst[36];

  v5 = (const void *)(a1 + 16);
  swift_beginAccess();
  memcpy(__dst, v5, 0x228uLL);
  v6 = *(_OWORD *)(a1 + 16);
  v77 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 64);
  v78 = *(_OWORD *)(a1 + 48);
  v61 = *((_QWORD *)&__dst[1] + 1);
  v62 = *(_QWORD *)&__dst[1];
  v53 = *((_QWORD *)&__dst[0] + 1);
  v8 = __dst[2];
  v64 = __dst[3];
  v65 = *(_QWORD *)&__dst[0];
  v54 = *((_QWORD *)&__dst[9] + 1);
  v55 = *(_QWORD *)&__dst[9];
  v56 = __dst[10];
  v9 = *((_QWORD *)&__dst[11] + 1);
  v57 = __dst[12];
  v58 = *((_QWORD *)&__dst[29] + 1);
  v59 = __dst[30];
  v46 = *((_QWORD *)&__dst[31] + 1);
  v47 = *(_QWORD *)&__dst[31];
  v44 = *((_QWORD *)&__dst[32] + 1);
  v45 = *(_QWORD *)&__dst[32];
  v42 = *(_QWORD *)&__dst[34];
  v43 = *(_QWORD *)&__dst[33];
  v50 = *((_QWORD *)&__dst[4] + 1);
  v60 = *(_QWORD *)&__dst[4];
  v10 = __dst[5];
  v79 = v7;
  v11 = DWORD1(__dst[5]);
  v51 = HIDWORD(__dst[5]);
  v52 = DWORD2(__dst[5]);
  v80 = *(_QWORD *)(a1 + 80);
  v75 = __dst[5];
  v73 = *(_WORD *)((char *)&__dst[5] + 1);
  v74 = BYTE3(__dst[5]);
  v72 = BYTE8(__dst[8]);
  v66 = *((_QWORD *)&__dst[6] + 1);
  v63 = *(_QWORD *)&__dst[6];
  v76 = v6;
  v39 = *((_QWORD *)&__dst[7] + 1);
  v40 = *(_QWORD *)&__dst[7];
  v12 = *(_QWORD *)&__dst[8];
  v13 = BYTE8(__dst[8]);
  memcpy(v71, (char *)&__dst[8] + 9, sizeof(v71));
  if (*(_BYTE *)(a2 + 88) == 1)
  {
    v37 = *(_BYTE *)(a2 + 128);
    v11 = *(_DWORD *)(a2 + 132);
    v51 = *(_DWORD *)(a2 + 140);
    v52 = *(_DWORD *)(a2 + 136);
    v38 = *((_QWORD *)&__dst[11] + 1);
    v14 = *(_QWORD *)(a2 + 144);
    v15 = *(_QWORD *)(a2 + 152);
    v16 = *(_QWORD *)(a2 + 160);
    v17 = *(_QWORD *)(a2 + 168);
    v48 = *(_QWORD *)(a2 + 176);
    v50 = *(_QWORD *)(a2 + 120);
    v13 = *(_BYTE *)(a2 + 184);
    outlined retain of HandsKitData(__dst);
    swift_bridgeObjectRetain();
    outlined copy of HandsKitDataInternal?(v53);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of ObjectInteractionResultsByHand?(v47, v46, v45, v44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v37;
    v75 = v37;
    v72 = v13;
    v63 = v14;
    v18 = v15;
    v9 = v38;
    v19 = v16;
    v20 = v17;
    v12 = v48;
  }
  else
  {
    outlined retain of HandsKitData(__dst);
    swift_bridgeObjectRetain();
    outlined copy of HandsKitDataInternal?(v53);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of ObjectInteractionResultsByHand?(v47, v46, v45, v44);
    swift_bridgeObjectRetain();
    v18 = v66;
    v20 = v39;
    v19 = v40;
  }
  LOBYTE(__src[5]) = v10;
  BYTE8(__src[8]) = v13;
  LODWORD(__src[11]) = __dst[11];
  *((_QWORD *)&__src[11] + 1) = v9;
  *(_QWORD *)&__src[24] = *(_QWORD *)&__dst[24];
  BYTE8(__src[24]) = BYTE8(__dst[24]);
  *(_QWORD *)((char *)&__src[24] + 12) = *(_QWORD *)((char *)&__dst[24] + 12);
  *(_QWORD *)((char *)&__src[25] + 4) = *(_QWORD *)((char *)&__dst[25] + 4);
  BYTE12(__src[27]) = BYTE12(__dst[27]);
  *(_OWORD *)((char *)&__src[25] + 12) = *(_OWORD *)((char *)&__dst[25] + 12);
  *(_OWORD *)((char *)&__src[26] + 12) = *(_OWORD *)((char *)&__dst[26] + 12);
  LOBYTE(__src[29]) = __dst[29];
  __src[13] = __dst[13];
  __src[14] = __dst[14];
  *(_QWORD *)&__src[0] = v65;
  *((_QWORD *)&__src[0] + 1) = v53;
  *(_QWORD *)&__src[1] = v62;
  *((_QWORD *)&__src[1] + 1) = v61;
  __src[2] = v8;
  __src[3] = v64;
  *(_QWORD *)&__src[4] = v60;
  *((_QWORD *)&__src[4] + 1) = v50;
  *(_QWORD *)((char *)&__src[5] + 4) = __PAIR64__(v52, v11);
  HIDWORD(__src[5]) = v51;
  *(_QWORD *)&__src[6] = v63;
  *((_QWORD *)&__src[6] + 1) = v18;
  *(_QWORD *)&__src[7] = v19;
  *((_QWORD *)&__src[7] + 1) = v20;
  v49 = v12;
  *(_QWORD *)&__src[8] = v12;
  *(_QWORD *)&__src[9] = v55;
  *((_QWORD *)&__src[9] + 1) = v54;
  __src[10] = v56;
  __src[12] = v57;
  __src[15] = __dst[15];
  __src[16] = __dst[16];
  __src[17] = __dst[17];
  __src[18] = __dst[18];
  __src[19] = __dst[19];
  __src[20] = __dst[20];
  __src[21] = __dst[21];
  __src[22] = __dst[22];
  __src[23] = __dst[23];
  __src[28] = __dst[28];
  *((_QWORD *)&__src[29] + 1) = v58;
  __src[30] = v59;
  *(_QWORD *)&__src[31] = v47;
  *((_QWORD *)&__src[31] + 1) = v46;
  *(_QWORD *)&__src[32] = v45;
  *((_QWORD *)&__src[32] + 1) = v44;
  *(_QWORD *)&__src[33] = v43;
  *((_QWORD *)&__src[33] + 1) = *((_QWORD *)&__dst[33] + 1);
  *(_QWORD *)&__src[34] = v42;
  v21 = v19;
  v22 = v20;
  v67 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__src);
  swift_bridgeObjectRelease();
  outlined consume of ObjectInteractionResultsByHand?(v47, v46, v45, v44);
  swift_bridgeObjectRelease();
  v23 = v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of HandsKitDataInternal?(v53);
  swift_bridgeObjectRelease();
  memcpy(v70, __src, 0x228uLL);
  HandsKitPipeline.runHandsKit(withInput:)((uint64_t)v70, v24);
  outlined release of HandsKitData(__src);
  memcpy(v70, v68, 0x228uLL);
  v25 = v21;
  if (*(_BYTE *)(a2 + 88) == 1)
  {
    v26 = v70[10];
    v27 = HIDWORD(v70[10]);
    v28 = v70[12];
    v29 = v70[13];
    v30 = v70[14];
    v31 = v70[15];
    v32 = v70[16];
    v33 = v70[17];
    *(_QWORD *)(a2 + 120) = v70[9];
    *(_BYTE *)(a2 + 128) = v26;
    *(_DWORD *)(a2 + 132) = v27;
    *(_QWORD *)(a2 + 136) = v70[11];
    *(_QWORD *)(a2 + 144) = v28;
    *(_QWORD *)(a2 + 152) = v29;
    *(_QWORD *)(a2 + 160) = v30;
    *(_QWORD *)(a2 + 168) = v31;
    *(_QWORD *)(a2 + 176) = v32;
    *(_BYTE *)(a2 + 184) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v21;
    v23 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v68[0] = 0;
    *((_QWORD *)&v68[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(86);
    v34._object = (void *)0x800000023D9CB960;
    v34._countAndFlagsBits = 0xD000000000000048;
    String.append(_:)(v34);
    Float.write<A>(to:)();
    v35._countAndFlagsBits = 0x737574617473202CLL;
    v35._object = (void *)0xEA00000000002020;
    String.append(_:)(v35);
    _print_unlocked<A, B>(_:_:)();
    *((_QWORD *)&v68[1] + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 152, (uint64_t)v68, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
  }
  OS_dispatch_semaphore.signal()();
  swift_beginAccess();
  Hands_frame_boundary_trace_CBridge();
  memcpy(v68, v70, 0x228uLL);
  a3(v68);
  outlined release of HandsKitData(v70);
  v68[2] = v78;
  v68[3] = v79;
  v68[0] = v76;
  v68[1] = v77;
  *(_QWORD *)&v68[4] = v80;
  *((_QWORD *)&v68[4] + 1) = v50;
  LOBYTE(v68[5]) = v75;
  *(_WORD *)((char *)&v68[5] + 1) = v73;
  BYTE3(v68[5]) = v74;
  *(_QWORD *)((char *)&v68[5] + 4) = __PAIR64__(v52, v11);
  HIDWORD(v68[5]) = v51;
  *(_QWORD *)&v68[6] = v63;
  *((_QWORD *)&v68[6] + 1) = v23;
  *(_QWORD *)&v68[7] = v25;
  *((_QWORD *)&v68[7] + 1) = v22;
  *(_QWORD *)&v68[8] = v49;
  BYTE8(v68[8]) = v72;
  memcpy((char *)&v68[8] + 9, v71, 0x19FuLL);
  return outlined release of HandsKitData(v68);
}

void *HandsKitPipeline.runHandsKit(withInput:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v21;
  _OWORD v22[2];
  uint64_t v23;
  float32x4_t v24[35];
  unint64_t v25[70];
  _BYTE v26[24];
  uint64_t v27;
  _OWORD v28[35];
  _QWORD __src[70];
  _QWORD v30[70];
  _OWORD v31[35];
  _QWORD v32[70];
  _QWORD __dst[70];
  _QWORD v34[70];
  _OWORD v35[14];

  MEMORY[0x24BDAC7A8](a1, a2);
  v3 = v2;
  v21 = v4;
  HandsKitPipeline.updateWithDetectionResults(_:)(v5, __src);
  memcpy(v34, __src, 0x228uLL);
  HandsKitPipeline.updateWithObjectInteractionInfo(_:)((uint64_t)v34, v30);
  memcpy(__dst, v30, 0x228uLL);
  Tracking3D.runSync(withInput:)((uint64_t)__dst, v6);
  memcpy(v28, v34, 0x228uLL);
  v7 = v2[5];
  v8 = *(_QWORD *)&v28[0];
  swift_retain();
  v9 = specialized PipelineMapper.findMapping(_:_:)(v8, 0);
  swift_bridgeObjectRetain_n();
  swift_release();
  swift_retain();
  outlined retain of HandsKitData(v28);
  v10 = swift_bridgeObjectRetain();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands14HandDescriptorVG_AHs5NeverOTg5054_s5Hands4PoseC7runSync9withInputAA0A7KitDataVAG_tFAA14eF8VAIXEfU_SDys6UInt64VSiGAF0J0CAF0dpQ0VTf1cn_nTf4nggg_n(v10, v9, v7, v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  *(_OWORD *)((char *)v31 + 8) = *(_OWORD *)((char *)v28 + 8);
  *(_OWORD *)((char *)&v31[1] + 8) = *(_OWORD *)((char *)&v28[1] + 8);
  *(_OWORD *)((char *)&v31[2] + 8) = *(_OWORD *)((char *)&v28[2] + 8);
  *(_OWORD *)((char *)&v31[3] + 8) = *(_OWORD *)((char *)&v28[3] + 8);
  *(_QWORD *)&v31[0] = v11;
  *((_QWORD *)&v31[4] + 1) = *((_QWORD *)&v28[4] + 1);
  LOBYTE(v31[5]) = v28[5];
  DWORD1(v31[5]) = DWORD1(v28[5]);
  *((_QWORD *)&v31[5] + 1) = *((_QWORD *)&v28[5] + 1);
  v31[6] = v28[6];
  v31[7] = v28[7];
  *(_QWORD *)&v31[8] = *(_QWORD *)&v28[8];
  BYTE8(v31[8]) = BYTE8(v28[8]);
  v31[9] = v28[9];
  v31[10] = v28[10];
  LODWORD(v31[11]) = v28[11];
  *((_QWORD *)&v31[11] + 1) = *((_QWORD *)&v28[11] + 1);
  v31[12] = v28[12];
  v31[13] = v28[13];
  v31[14] = v28[14];
  v31[15] = v28[15];
  v31[16] = v28[16];
  v31[17] = v28[17];
  v31[18] = v28[18];
  v31[19] = v28[19];
  v31[20] = v28[20];
  v31[21] = v28[21];
  v31[22] = v28[22];
  v31[23] = v28[23];
  *(_QWORD *)&v31[24] = *(_QWORD *)&v28[24];
  BYTE8(v31[24]) = BYTE8(v28[24]);
  *(_QWORD *)((char *)&v31[24] + 12) = *(_QWORD *)((char *)&v28[24] + 12);
  *(_QWORD *)((char *)&v31[25] + 4) = *(_QWORD *)((char *)&v28[25] + 4);
  *(_OWORD *)((char *)&v31[25] + 12) = *(_OWORD *)((char *)&v28[25] + 12);
  *(_OWORD *)((char *)&v31[26] + 12) = *(_OWORD *)((char *)&v28[26] + 12);
  BYTE12(v31[27]) = BYTE12(v28[27]);
  v31[28] = v28[28];
  LOBYTE(v31[29]) = v28[29];
  *(_OWORD *)((char *)&v31[29] + 8) = *(_OWORD *)((char *)&v28[29] + 8);
  *((_QWORD *)&v31[30] + 1) = *((_QWORD *)&v28[30] + 1);
  v31[31] = v28[31];
  v31[32] = v28[32];
  v31[33] = v28[33];
  *(_QWORD *)&v31[34] = *(_QWORD *)&v28[34];
  memcpy(v34, v31, 0x228uLL);
  Tracking3D.didGetPoseResults(_:)((uint64_t)v26, (uint64_t)v25);
  swift_retain();
  OperationalEnvelopeProcess.process(_:)((uint64_t)v25);
  swift_release();
  swift_retain();
  GesturePipeline.process(_:)((char *)v25);
  swift_release();
  swift_retain();
  OutOfEnvelopeFilter.process(_:)(v25);
  swift_release();
  memcpy(v32, v25, 0x228uLL);
  memcpy(__dst, v25, 0x228uLL);
  outlined retain of HandsKitData(v32);
  HandsKitPostProcessing.runSync(withInput:)(__dst, v34);
  outlined release of HandsKitData(v32);
  memcpy(__dst, v34, 0x228uLL);
  memcpy(v34, __dst, 0x228uLL);
  Detection2DPipeline.run(withInput:schedule:)(v34, v27, (uint64_t)v24);
  swift_bridgeObjectRelease();
  memcpy(v34, v24, 0x228uLL);
  v12 = v34[19];
  v3[24] = v34[18];
  v3[25] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3[26] = v34[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy(v24, __src, 0x228uLL);
  v13 = (float32x4_t *)HandsKitPipeline.updateWithSpatialSceneState(_:)((uint64_t)v24);
  memcpy(v24, v34, 0x228uLL);
  swift_retain();
  outlined retain of HandsKitData(v34);
  HandContainer.init(handsKitData:)(v24, v35);
  v24[10] = (float32x4_t)v35[10];
  v24[11] = (float32x4_t)v35[11];
  v24[12] = (float32x4_t)v35[12];
  v24[6] = (float32x4_t)v35[6];
  v24[7] = (float32x4_t)v35[7];
  v24[8] = (float32x4_t)v35[8];
  v24[9] = (float32x4_t)v35[9];
  v24[2] = (float32x4_t)v35[2];
  v24[3] = (float32x4_t)v35[3];
  v24[4] = (float32x4_t)v35[4];
  v24[5] = (float32x4_t)v35[5];
  v24[0] = (float32x4_t)v35[0];
  v24[1] = (float32x4_t)v35[1];
  SceneSegmentationNode.process(_:_:)(v13, v24, v22);
  swift_release();
  swift_release();
  outlined release of HandsKitData(__dst);
  outlined release of HandsKitData(v31);
  outlined release of HandsKitData(v28);
  outlined release of HandsKitData(v30);
  outlined release of HandsKitData(__src);
  outlined release of HandContainer((uint64_t)v35);
  outlined release of HandsKitData(v32);
  v14 = v23;
  v15 = v3[27];
  v16 = v3[28];
  v17 = v3[29];
  v18 = v3[30];
  v19 = v22[1];
  *(_OWORD *)(v3 + 27) = v22[0];
  *(_OWORD *)(v3 + 29) = v19;
  v3[31] = v14;
  outlined consume of ObjectInteractionResultsByHand?(v15, v16, v17, v18);
  return memcpy(v21, v34, 0x228uLL);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void *HandsKitPipeline.updateWithDetectionResults(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[5];
  uint64_t v48[2];
  uint64_t v49[8];
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[128];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v45 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(a1 + 48);
  v42 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 40);
  v3 = *(_BYTE *)(a1 + 80);
  v4 = *(_DWORD *)(a1 + 84);
  v6 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 128);
  v21 = *(_BYTE *)(a1 + 136);
  v35 = *(_QWORD *)(a1 + 160);
  v40 = *(_QWORD *)(a1 + 184);
  v46 = *(_QWORD *)(a1 + 192);
  v44 = *(_QWORD *)(a1 + 200);
  v38 = *(__n128 *)(a1 + 224);
  v39 = *(__n128 *)(a1 + 208);
  v36 = *(__n128 *)(a1 + 256);
  v37 = *(__n128 *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 396);
  v10 = *(_BYTE *)(a1 + 444);
  v11 = *(_QWORD *)(a1 + 448);
  v65 = *(_BYTE *)(a1 + 392);
  v66 = v9;
  v34 = *(_QWORD *)(a1 + 472);
  v31 = *(_QWORD *)(a1 + 480);
  v12 = *(_OWORD *)(a1 + 376);
  v63 = *(_OWORD *)(a1 + 360);
  v64 = v12;
  v67 = *(_QWORD *)(a1 + 404);
  v68 = *(_OWORD *)(a1 + 412);
  v69 = *(_OWORD *)(a1 + 428);
  v14 = *(_QWORD *)(a1 + 496);
  v13 = *(_QWORD *)(a1 + 504);
  v70 = v10;
  v15 = *(_QWORD *)(a1 + 512);
  v71 = v11;
  v16 = *(_QWORD *)(a1 + 520);
  v17 = *(double *)(a1 + 536);
  v61 = *(_OWORD *)(a1 + 336);
  v62 = *(_QWORD *)(a1 + 352);
  v18 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 528);
  _s5Hands5FrameVSgWOi_((uint64_t)&v61);
  outlined init with take of ImageData?((uint64_t)&v61, (uint64_t)v60, &demangling cache variable for type metadata for Frame?);
  v50 = v2;
  v51 = v3;
  v52 = v4;
  v53 = v18;
  v54 = v6;
  v55 = v5;
  v56 = v8;
  v57 = v7;
  v58 = v23;
  v59 = v21;
  v49[0] = v30;
  v49[1] = v29;
  v49[2] = v28;
  v49[3] = v27;
  v49[4] = v26;
  v49[5] = v43;
  v49[6] = v42;
  v49[7] = v25;
  v22 = v32[26];
  v24 = v32[24];
  v33 = v32[25];
  v48[0] = v24;
  v48[1] = v33;
  v47[0] = v14;
  v47[1] = v13;
  v47[2] = v15;
  v47[3] = v16;
  v47[4] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(v30);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of ObjectInteractionResultsByHand?(v14, v13, v15, v16);
  return HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)(v44, v40, v46, (uint64_t)v60, v45, &v50, v49, v22, a2, v39, v38, v37, v36, v17, v48, v35, v34, v31, v47,
           0);
}

void *HandsKitPipeline.updateWithObjectInteractionInfo(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[5];
  uint64_t v47[2];
  uint64_t v48[8];
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _BYTE v59[128];
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;

  v34 = *(_QWORD *)a1;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_DWORD *)(a1 + 84);
  v7 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_BYTE *)(a1 + 136);
  v44 = *(_QWORD *)(a1 + 144);
  v45 = *(_QWORD *)(a1 + 152);
  v35 = *(_QWORD *)(a1 + 168);
  v36 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 396);
  v64 = *(_BYTE *)(a1 + 392);
  v65 = v12;
  v41 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 200);
  v43 = *(_QWORD *)(a1 + 192);
  v14 = *(_OWORD *)(a1 + 376);
  v62 = *(_OWORD *)(a1 + 360);
  v63 = v14;
  v66 = *(_QWORD *)(a1 + 404);
  v67 = *(_OWORD *)(a1 + 412);
  v68 = *(_OWORD *)(a1 + 428);
  v39 = *(__n128 *)(a1 + 224);
  v40 = *(__n128 *)(a1 + 208);
  v37 = *(__n128 *)(a1 + 256);
  v38 = *(__n128 *)(a1 + 240);
  v69 = *(_BYTE *)(a1 + 444);
  v15 = *(_QWORD *)(a1 + 448);
  v16 = *(double *)(a1 + 536);
  v60 = *(_OWORD *)(a1 + 336);
  v61 = *(_QWORD *)(a1 + 352);
  v70 = v15;
  v17 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 472);
  v32 = *(_QWORD *)(a1 + 480);
  _s5Hands5FrameVSgWOi_((uint64_t)&v60);
  outlined init with take of ImageData?((uint64_t)&v60, (uint64_t)v59, &demangling cache variable for type metadata for Frame?);
  v49 = v3;
  v50 = v4;
  v51 = v5;
  v52 = v17;
  v53 = v7;
  v54 = v6;
  v55 = v8;
  v56 = v9;
  v57 = v10;
  v58 = v11;
  v48[0] = v31;
  v48[1] = v30;
  v48[2] = v29;
  v48[3] = v28;
  v48[4] = v27;
  v48[5] = v26;
  v48[6] = v25;
  v48[7] = v24;
  v47[0] = v44;
  v47[1] = v45;
  v22 = v2[28];
  v23 = v2[27];
  v20 = v2[30];
  v21 = v2[29];
  v18 = v2[31];
  v46[0] = v23;
  v46[1] = v22;
  v46[2] = v21;
  v46[3] = v20;
  v46[4] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(v31);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of ObjectInteractionResultsByHand?(v23, v22, v21, v20);
  return HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)(v13, v41, v43, (uint64_t)v59, v34, &v49, v48, v35, a2, v40, v39, v38, v37, v16, v47, v36, v33, v32, v46,
           0);
}

uint64_t HandsKitPipeline.updateWithSpatialSceneState(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t result;
  double v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[4];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[3];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[3];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int8x16_t v108[5];

  if (*(_BYTE *)(v1 + 264) != 1)
    return 0;
  v2 = *(_QWORD *)(a1 + 200);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v68 = *(_OWORD *)(a1 + 224);
  v70 = *(_OWORD *)(a1 + 208);
  v64 = *(_OWORD *)(a1 + 256);
  v66 = *(_OWORD *)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 336);
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(10, 1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = (__int128 *)(*(_QWORD *)(v2 + 56) + 192 * v4);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[3];
  v98[2] = v6[2];
  v99 = v9;
  v98[1] = v8;
  v10 = v6[4];
  v11 = v6[5];
  v12 = v6[7];
  v102 = v6[6];
  v103 = v12;
  v100 = v10;
  v101 = v11;
  v13 = v6[8];
  v14 = v6[9];
  v15 = v6[11];
  v106 = v6[10];
  v107 = v15;
  v104 = v13;
  v105 = v14;
  v98[0] = v7;
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  outlined retain of ImageData((uint64_t)v98);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(11, 1);
  if ((v17 & 1) == 0)
    goto LABEL_15;
  v18 = (__int128 *)(*(_QWORD *)(v2 + 56) + 192 * v16);
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[3];
  v88[2] = v18[2];
  v89 = v21;
  v88[1] = v20;
  v22 = v18[4];
  v23 = v18[5];
  v24 = v18[7];
  v92 = v18[6];
  v93 = v24;
  v90 = v22;
  v91 = v23;
  v25 = v18[8];
  v26 = v18[9];
  v27 = v18[11];
  v96 = v18[10];
  v97 = v27;
  v94 = v25;
  v95 = v26;
  v88[0] = v19;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_15;
  outlined retain of ImageData((uint64_t)v88);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(12, 1);
  if ((v29 & 1) == 0)
  {
    outlined release of ImageData((uint64_t)v88);
LABEL_15:
    outlined release of ImageData((uint64_t)v98);
    return 0;
  }
  v30 = (_OWORD *)(*(_QWORD *)(v2 + 56) + 192 * v28);
  v32 = v30[2];
  v31 = v30[3];
  v33 = v30[1];
  v78[0] = *v30;
  v78[1] = v33;
  v78[2] = v32;
  v79 = v31;
  v34 = v30[4];
  v35 = v30[5];
  v36 = v30[7];
  v82 = v30[6];
  v83 = v36;
  v80 = v34;
  v81 = v35;
  v37 = v30[8];
  v38 = v30[9];
  v39 = v30[11];
  v86 = v30[10];
  v87 = v39;
  v84 = v37;
  v85 = v38;
  outlined retain of ImageData((uint64_t)v78);
  CMTime.seconds.getter();
  v41 = v40;
  v42 = (_OWORD *)v100;
  swift_beginAccess();
  v62 = v42[5];
  v63 = v42[4];
  v61 = v42[6];
  swift_beginAccess();
  v59 = v42[13];
  v60 = v42[12];
  v57 = v42[15];
  v58 = v42[14];
  CMTime.seconds.getter();
  v44 = v43;
  swift_retain();
  CMTime.seconds.getter();
  *(_QWORD *)&v73 = v3;
  *((_QWORD *)&v73 + 1) = v44;
  v74 = v70;
  v75 = v68;
  v76 = v66;
  v77 = v64;
  SceneSegmentationNode.getWorldPoseTransform(timestamp:currentHeadPose:)((uint64_t)&v73, v108, v45, v46);
  swift_release();
  result = outlined init with take of ImageData?((uint64_t)v108, (uint64_t)&v73, &demangling cache variable for type metadata for simd_float4x4?);
  if ((v77 & 1) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v69 = v74;
  v71 = v73;
  v65 = v76;
  v67 = v75;
  swift_retain();
  CMTime.seconds.getter();
  v49 = SceneSegmentationNode.getClosestHandFrame(timestamp:)(v48);
  result = swift_release();
  if (!v49)
  {
    v72[3] = MEMORY[0x24BEE0D00];
    v72[0] = 0xD00000000000003ELL;
    v72[1] = 0x800000023D9CB760;
    specialized static HLog.I(file:function:line:_:_:)(0xD000000000000065, 0x800000023D9CB540, 227, (uint64_t)v72, MEMORY[0x24BEE4AF8]);
    outlined release of ImageData((uint64_t)v78);
    outlined release of ImageData((uint64_t)v88);
    outlined release of ImageData((uint64_t)v98);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v72);
    return 0;
  }
  if (!*((_QWORD *)&v89 + 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v50 = (void *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v51 = (void *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v52 = *((id *)&v89 + 1);
      v53 = v50;
      v54 = v51;
      CMTime.seconds.getter();
      v56 = v55;
      outlined release of ImageData((uint64_t)v98);
      outlined release of ImageData((uint64_t)v78);
      outlined release of ImageData((uint64_t)v88);
      type metadata accessor for SpatialSceneState();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v52;
      *(_QWORD *)(result + 24) = v53;
      *(_QWORD *)(result + 32) = v54;
      *(_QWORD *)(result + 48) = v3;
      *(_QWORD *)(result + 56) = v41;
      *(_OWORD *)(result + 64) = v63;
      *(_OWORD *)(result + 80) = v62;
      *(_OWORD *)(result + 96) = v61;
      *(_OWORD *)(result + 112) = v60;
      *(_OWORD *)(result + 128) = v59;
      *(_OWORD *)(result + 144) = v58;
      *(_OWORD *)(result + 160) = v57;
      *(_QWORD *)(result + 176) = v3;
      *(_QWORD *)(result + 184) = v56;
      *(_OWORD *)(result + 192) = v71;
      *(_OWORD *)(result + 208) = v69;
      *(_OWORD *)(result + 224) = v67;
      *(_OWORD *)(result + 240) = v65;
      *(_QWORD *)(result + 256) = v49;
      return result;
    }
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void *HandsKitPipeline.runSync(withInput:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *result;
  _QWORD v12[72];
  _BYTE v13[560];
  _BYTE v14[560];
  uint64_t v15[70];

  v5 = type metadata accessor for DispatchTime();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v15, a1, 0x228uLL);
  v10 = swift_allocObject();
  _s5Hands0A7KitDataVSgWOi0_(v13);
  outlined init with take of ImageData?((uint64_t)v13, v10 + 16, &demangling cache variable for type metadata for HandsKitData?);
  swift_retain();
  specialized HandsKitPipeline.run(withInput:completion:)(v15, v2, v10, v2);
  swift_release();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_beginAccess();
  outlined init with take of ImageData?(v10 + 16, (uint64_t)v14, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v14, (uint64_t)v15, &demangling cache variable for type metadata for HandsKitData?);
  result = (void *)_s5Hands0A7KitDataVSgWOg(v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of ImageData?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for HandsKitData?);
    outlined retain of HandsKitData(v12);
    swift_release();
    return memcpy(a2, v15, 0x228uLL);
  }
  return result;
}

Swift::Int closure #1 in HandsKitPipeline.runSync(withInput:)(void *__src, uint64_t a2)
{
  _QWORD __dst[70];
  _BYTE v6[560];
  _BYTE v7[560];

  memcpy(__dst, __src, 0x228uLL);
  a2 += 16;
  memcpy(v6, __src, 0x228uLL);
  _s5Hands13PoseImageCropVSgWOi_(v6);
  swift_beginAccess();
  outlined init with take of ImageData?(a2, (uint64_t)v7, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v6, a2, &demangling cache variable for type metadata for HandsKitData?);
  outlined retain of HandsKitData(__dst);
  outlined release of HandsKitData?((uint64_t)v7);
  return OS_dispatch_semaphore.signal()();
}

uint64_t protocol witness for HandsKitPipelineProtocol.run(withInput:completion:) in conformance HandsKitPipeline(const void *a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  return HandsKitPipeline.run(withInput:completion:)(a1, a2, a3);
}

uint64_t protocol witness for HandsKitPipelineProtocol.setInitialState(_:) in conformance HandsKitPipeline(uint64_t a1)
{
  return HandsKitPipeline.setInitialState(_:)(a1);
}

void protocol witness for HandsKitPipelineProtocol.reconfig(_:) in conformance HandsKitPipeline(HandsKitConfig *a1)
{
  HandsKitPipeline.reconfig(_:)(a1);
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x242637918](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x242638C74](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x242638C74](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x242638C74](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x242638C74](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _s5Hands0A7KitDataVSgWOg(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t Hands_frame_boundary_trace_CBridge()
{
  return kdebug_trace();
}

uint64_t sub_23D780CEC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 536))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in HandsKitPipeline.run(withInput:completion:)()
{
  uint64_t v0;

  return closure #1 in HandsKitPipeline.run(withInput:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_OWORD *))(v0 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x242638C74](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_23D780E28()
{
  _QWORD *v0;

  if (v0[2])
  {
    swift_bridgeObjectRelease();
    if (v0[3])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (v0[67])
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t specialized HandsKitPipeline.run(withInput:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  Float64 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[70];
  _QWORD v54[70];
  _BYTE v55[128];
  _BYTE v56[128];
  _QWORD v57[2];
  int v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  _QWORD v71[72];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8, v9);
  v50 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v48 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  MEMORY[0x24BDAC7A8](v11, v12);
  v47 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  memcpy(v71, a1, 0x228uLL);
  swift_retain();
  swift_retain();
  Hands_trace_CBridge();
  Hands_trace_CBridge();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  Hands_trace_CBridge();
  Hands_frame_boundary_trace_CBridge();
  if (*(_BYTE *)(a2 + 89) == 1)
  {
    OS_dispatch_semaphore.signal()();
    Hands_frame_boundary_trace_CBridge();
    v20 = a3 + 16;
    memcpy(v53, v71, 0x228uLL);
    _s5Hands13PoseImageCropVSgWOi_(v53);
  }
  else
  {
    v21 = v71[42];
    CMTime.seconds.getter();
    v23 = v22;
    CMTime.seconds.getter();
    FrameManager.add(frameID:masterTimestamp:midExposureTimestamp:)(v21, v24, 0, (uint64_t)v55, v23);
    outlined init with take of ImageData?((uint64_t)v55, (uint64_t)v56, &demangling cache variable for type metadata for Frame?);
    outlined init with take of ImageData?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for Frame?);
    if (_s5Hands5FrameVSgWOg((uint64_t)v57) != 1)
    {
      v25 = v57[1];
      v41 = v61;
      v26 = v60;
      v40 = v62;
      v39 = v63;
      v37 = v57[0];
      v38 = v64;
      v46 = v66;
      v44 = v68;
      v45 = v67;
      v43 = v69;
      v42 = v70;
      v27 = v58;
      v28 = v59;
      v29 = swift_allocObject();
      memcpy((void *)(v29 + 16), v71, 0x228uLL);
      *(_QWORD *)(v29 + 352) = v37;
      *(_QWORD *)(v29 + 360) = v25;
      *(_DWORD *)(v29 + 368) = v27;
      *(_DWORD *)(v29 + 372) = v28;
      *(_QWORD *)(v29 + 376) = v26;
      *(_OWORD *)(v29 + 384) = v41;
      *(_QWORD *)(v29 + 400) = v40;
      *(_BYTE *)(v29 + 408) = v39;
      *(_QWORD *)(v29 + 412) = v38;
      *(_QWORD *)(v29 + 420) = v65;
      *(_OWORD *)(v29 + 428) = v46;
      *(_QWORD *)(v29 + 444) = v45;
      *(_QWORD *)(v29 + 452) = v44;
      *(_BYTE *)(v29 + 460) = v43;
      *(_QWORD *)(v29 + 464) = v42;
      outlined retain of HandsKitData(v71);
      CMTime.seconds.getter();
      *(_QWORD *)(v29 + 472) = v30;
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = v29;
      v31[3] = a2;
      v31[4] = partial apply for closure #1 in HandsKitPipeline.runSync(withInput:);
      v31[5] = v19;
      v54[4] = closure #1 in HandsKitPipeline.run(withInput:completion:)partial apply;
      v54[5] = v31;
      v54[0] = MEMORY[0x24BDAC760];
      v54[1] = 1107296256;
      v54[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v54[3] = &block_descriptor_17;
      v32 = _Block_copy(v54);
      swift_retain();
      swift_retain();
      swift_retain();
      v33 = v47;
      static DispatchQoS.unspecified.getter();
      v53[0] = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
      v34 = v50;
      v35 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2426376F0](0, v33, v34, v32);
      _Block_release(v32);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
      swift_release();
      swift_release();
      return swift_release();
    }
    v20 = a3 + 16;
    memcpy(v53, v71, 0x228uLL);
    _s5Hands13PoseImageCropVSgWOi_(v53);
  }
  swift_beginAccess();
  outlined init with take of ImageData?(v20, (uint64_t)v54, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v53, v20, &demangling cache variable for type metadata for HandsKitData?);
  outlined retain of HandsKitData(v71);
  outlined release of HandsKitData?((uint64_t)v54);
  OS_dispatch_semaphore.signal()();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type HandsKitGTInjection and conformance HandsKitGTInjection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection;
  if (!lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitGTInjection, &type metadata for HandsKitGTInjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection;
  if (!lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitGTInjection, &type metadata for HandsKitGTInjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitGTInjection and conformance HandsKitGTInjection);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HandsKitGTInjection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D7814D8 + 4 * byte_23D9AE7C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D78150C + 4 * byte_23D9AE7C4[v4]))();
}

uint64_t sub_23D78150C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D781514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D78151CLL);
  return result;
}

uint64_t sub_23D781528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D781530);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D781534(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D78153C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HandsKitGTInjection()
{
  return &type metadata for HandsKitGTInjection;
}

uint64_t type metadata accessor for HandsKitPipeline()
{
  return objc_opt_self();
}

uint64_t method lookup function for HandsKitPipeline()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandsKitPipeline.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_23D78158C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in HandsKitPipeline.runSync(withInput:)(void *a1)
{
  uint64_t v1;

  return closure #1 in HandsKitPipeline.runSync(withInput:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined release of HandsKitData?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v18 = *(_OWORD *)(a1 + 480);
  v16 = *(_OWORD *)(a1 + 448);
  v17 = *(_OWORD *)(a1 + 464);
  v14 = *(_OWORD *)(a1 + 416);
  v15 = *(_OWORD *)(a1 + 432);
  v12 = *(_OWORD *)(a1 + 384);
  v13 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  v8 = *(_OWORD *)(a1 + 320);
  v9 = *(_OWORD *)(a1 + 336);
  v6 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 304);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined consume of HandsKitData?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t outlined consume of HandsKitData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;

  if (result)
  {
    swift_bridgeObjectRelease();
    outlined consume of HandsKitDataInternal?(a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of ObjectInteractionResultsByHand?(a63, a64, a65, a66);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined release of HandContainer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t HandyLoggerLogLevel.toOSLogLevel()(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
    case 1:
      result = static os_log_type_t.debug.getter();
      break;
    case 3:
    case 4:
      result = static os_log_type_t.error.getter();
      break;
    case 5:
      result = static os_log_type_t.fault.getter();
      break;
    default:
      result = static os_log_type_t.default.getter();
      break;
  }
  return result;
}

Hands::OSLogMessageFormat_optional __swiftcall OSLogMessageFormat.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  Hands::OSLogMessageFormat_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OSLogMessageFormat.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t OSLogMessageFormat.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7972616E6962;
  else
    return 1852797802;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OSLogMessageFormat(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OSLogMessageFormat()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OSLogMessageFormat()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OSLogMessageFormat()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Hands::OSLogMessageFormat_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OSLogMessageFormat(Swift::String *a1)
{
  return OSLogMessageFormat.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance OSLogMessageFormat(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1852797802;
  if (*v1)
    v2 = 0x7972616E6962;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

Hands::OSSinkConfig __swiftcall OSSinkConfig.init(overrideIsInternalBuild:logPbMessageFormat:)(Swift::Bool_optional overrideIsInternalBuild, Hands::OSLogMessageFormat logPbMessageFormat)
{
  Swift::Bool_optional *v2;
  char v3;
  Hands::OSSinkConfig result;

  v3 = *(_BYTE *)logPbMessageFormat;
  v2->value = overrideIsInternalBuild.value;
  v2[1].value = v3;
  result.overrideIsInternalBuild = overrideIsInternalBuild;
  return result;
}

uint64_t HandyLoggerOSSinkNeo.__allocating_init(config:)(unsigned __int8 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  HandyLoggerOSSinkNeo.init(config:)(a1);
  return v2;
}

uint64_t HandyLoggerOSSinkNeo.init(config:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t ObjCClassFromMetadata;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  int v23;
  char *v24;
  unsigned __int8 v25[2];
  char v26;
  uint64_t v27;

  v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v3, v4);
  v24 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6, v7);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v22 = a1[1];
  v23 = v13;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v1 + 48) = 1;
  type metadata accessor for HandyLoggerOSSinkNeo();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v16 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v17 = objc_msgSend(v16, sel_bundleIdentifier);

  if (v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0xE000000000000000;
  }
  *(_QWORD *)(v1 + 24) = v18;
  *(_QWORD *)(v1 + 32) = v20;
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x24BEE5758], v8);
  static DispatchQoS.unspecified.getter();
  v27 = v14;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v1 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v25[0] = v23;
  v25[1] = v22;
  static HandyLoggerOSSinkNeo.decideLogMessageFormat(_:)(v25, &v26);
  *(_BYTE *)(v1 + 48) = v26;
  return v1;
}

uint64_t type metadata accessor for HandyLoggerOSSinkNeo()
{
  return objc_opt_self();
}

unsigned __int8 *static HandyLoggerOSSinkNeo.decideLogMessageFormat(_:)@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  unsigned __int8 v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  id v7;
  char has_internal_ui;

  v3 = *result;
  v4 = result[1];
  if (v3 == 2)
  {
    type metadata accessor for HandyLoggerOSSinkNeo();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v6 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v7 = objc_msgSend(v6, sel_bundleIdentifier);

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    has_internal_ui = os_variant_has_internal_ui();
    result = (unsigned __int8 *)swift_release();
  }
  else
  {
    has_internal_ui = v3 & 1;
  }
  *a2 = has_internal_ui ^ 1 | v4;
  return result;
}

uint64_t HandyLoggerOSSinkNeo.getOrCreateLogger(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v31 - v13;
  v15 = v3 + 16;
  swift_beginAccess();
  v16 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v16 + 16))
  {
    v32 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v18 & 1) != 0)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v16 + 56);
      v21 = type metadata accessor for Logger();
      v31 = v15;
      v22 = a1;
      v23 = *(_QWORD *)(v21 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v14, v20 + *(_QWORD *)(v23 + 72) * v19, v21);
      v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
      a1 = v22;
      v24(v14, 0, 1, v21);
    }
    else
    {
      v21 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for Logger();
    v26 = *(_QWORD *)(v21 - 8);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v21);
    a3 = v32;
    if (v27 != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v32, v14, v21);
      goto LABEL_9;
    }
  }
  else
  {
    v25 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  outlined destroy of Coordinate3DPB?((uint64_t)v14, &demangling cache variable for type metadata for Logger?);
LABEL_9:
  v28 = type metadata accessor for Logger();
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v10, a3, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v10, 0, 1, v28);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v10, a1, a2);
  return swift_endAccess();
}

uint64_t HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  int v36;
  os_log_type_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[5];
  _QWORD v87[5];
  __int128 v88;
  char v89[8];

  v10 = v9;
  v80 = a8;
  v78 = a6;
  v74 = a3;
  LODWORD(v79) = a1;
  v69 = type metadata accessor for LogMessage(0);
  MEMORY[0x24BDAC7A8](v69, v14);
  v68 = (char **)((char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v72 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Google_Protobuf_Any();
  v73 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71, v19);
  v70 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v67 - v23;
  v25 = type metadata accessor for Logger();
  v75 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = *a2;
  v29 = a2[1];
  v30 = a2[2];
  v31 = a2[3];
  v81 = v10;
  v82 = v28;
  v83 = v29;
  v84 = v30;
  v85 = v31;
  v77 = (uint64_t)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v32;
  OS_dispatch_queue.sync<A>(execute:)();
  *(_QWORD *)&v88 = a4;
  *((_QWORD *)&v88 + 1) = a5;
  swift_bridgeObjectRetain();
  v33._countAndFlagsBits = 58;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v87[0] = v78;
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v78 = *((_QWORD *)&v88 + 1);
  v35 = v88;
  v36 = HandyLoggerLogLevel.toOSLogLevel()((int)v79);
  outlined init with copy of Any(v80, (uint64_t)v89);
  if (swift_dynamicCast())
  {
    v37 = v36;
    v38 = *((_QWORD *)&v88 + 1);
    v39 = v88;
    if (*(_QWORD *)(a9 + 16))
    {
      swift_bridgeObjectRetain();
      v39 = String.init(format:_:)();
      v41 = v40;
      swift_bridgeObjectRelease();
      v38 = v41;
    }
    v42 = v77;
    specialized static HandyLoggerOSSinkNeo.log(logger:privacy:level:with:message:)(v77, v74, v37, v35, v78, v39, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v42, v76);
  }
  else
  {
    v79 = 0;
    v43 = v72;
    LODWORD(v80) = v36;
    v67 = v24;
    v44 = v73;
    v45 = v71;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
    if (swift_dynamicCast())
    {
      outlined init with take of PinchCancellationModule(&v88, (uint64_t)v87);
      if (*(_BYTE *)(v10 + 48) == 1)
      {
        outlined init with copy of Detection2DComputePipelineProtocol((uint64_t)v87, (uint64_t)v86);
        defaultAnyTypeURLPrefix.getter();
        v46 = (uint64_t)v43;
        v47 = v79;
        Google_Protobuf_Any.init(message:partial:typePrefix:)();
        if (v47)
        {

          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v46, 1, 1, v45);
          outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Google_Protobuf_Any?);
          v61 = v77;
        }
        else
        {
          v48 = v44;
          v49 = v45;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v45);
          v79 = *(void (**)(_QWORD, _QWORD, _QWORD))(v44 + 32);
          v50 = v67;
          v79(v67, v46, v49);
          v51 = (uint64_t)v68;
          *v68 = 0;
          *(_QWORD *)(v51 + 8) = 0xE000000000000000;
          *(_DWORD *)(v51 + 16) = 0;
          *(_QWORD *)(v51 + 24) = 0;
          *(_QWORD *)(v51 + 32) = 0xE000000000000000;
          *(_QWORD *)(v51 + 40) = 0;
          *(_QWORD *)(v51 + 48) = 0xE000000000000000;
          v52 = v69;
          v53 = v51 + *(int *)(v69 + 32);
          v54 = type metadata accessor for LogMessage.OneOf_Content(0);
          v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56);
          v55(v53, 1, 1, v54);
          UnknownStorage.init()();
          v56 = v51 + *(int *)(v52 + 40);
          v57 = type metadata accessor for CMTimeProtobuf(0);
          v58 = v56;
          v59 = v50;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v58, 1, 1, v57);
          v60 = v70;
          (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v70, v59, v49);
          outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          v79(v53, v60, v49);
          swift_storeEnumTagMultiPayload();
          v55(v53, 0, 1, v54);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
          v63 = Message.serializedData(partial:)();
          v65 = v64;
          v66 = Data.base64EncodedString(options:)(0);
          outlined consume of Data._Representation(v63, v65);
          v61 = v77;
          specialized static HandyLoggerOSSinkNeo.log(logger:privacy:level:message:)(v77, 2 * (v74 == 2), (os_log_type_t)v80, v66._countAndFlagsBits, (unint64_t)v66._object);
          swift_bridgeObjectRelease();
          outlined destroy of LogMessage(v51);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v59, v49);
        }
      }
      else
      {
        v86[0] = v28;
        v86[1] = v29;
        v86[2] = v30;
        v86[3] = v31;
        v61 = v77;
        specialized static HandyLoggerOSSinkNeo.sinkProtobufMessageInJson(logger:level:logArea:privacy:messagePrefix:messageContent:)(v77, v80, (uint64_t)v86, v74, v35, v78, v87);
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v61, v76);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v76);
      swift_bridgeObjectRelease();
    }
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v89);
}

uint64_t closure #1 in HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v2 = LogArea.description.getter();
  HandyLoggerOSSinkNeo.getOrCreateLogger(_:)(v2, v3, a1);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1);
}

uint64_t HandyLoggerOSSinkNeo.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t HandyLoggerOSSinkNeo.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for HandyLoggerSinkProtocolNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:) in conformance HandyLoggerOSSinkNeo(int a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static HandyLoggerOSSinkNeo.log(logger:privacy:level:with:message:)(uint64_t a1, int a2, os_log_type_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *log;
  uint64_t v16;

  if (a2 == 2)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16 = v13;
      *(_DWORD *)v12 = 136380931;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2085;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v14 = "%{private}s %{sensitive}s";
      goto LABEL_9;
    }
  }
  else if (a2)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16 = v13;
      *(_DWORD *)v12 = 136380931;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2081;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v14 = "%{private}s %{private}s";
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16 = v13;
      *(_DWORD *)v12 = 136380931;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2082;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v14 = "%{private}s %{public}s";
LABEL_9:
      _os_log_impl(&dword_23D69E000, log, a3, v14, (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242638D4C](v13, -1, -1);
      MEMORY[0x242638D4C](v12, -1, -1);

      return;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

}

void specialized static HandyLoggerOSSinkNeo.log(logger:privacy:level:message:)(uint64_t a1, int a2, os_log_type_t a3, uint64_t a4, unint64_t a5)
{
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  NSObject *log;
  uint64_t v12;

  if (a2 == 2)
  {
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136642819;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v10 = "%{sensitive}s";
      goto LABEL_9;
    }
  }
  else if (a2)
  {
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136380675;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v10 = "%{private}s";
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, a3))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v10 = "%{public}s";
LABEL_9:
      _os_log_impl(&dword_23D69E000, log, a3, v10, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242638D4C](v9, -1, -1);
      MEMORY[0x242638D4C](v8, -1, -1);

      return;
    }
  }
  swift_bridgeObjectRelease_n();

}

uint64_t specialized static HandyLoggerOSSinkNeo.sinkProtobufMessageInJson(logger:level:logArea:privacy:messagePrefix:messageContent:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t DynamicType;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v29 = a5;
  v30 = a6;
  v27 = a2;
  v28 = a4;
  v9 = type metadata accessor for JSONEncodingOptions();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a7, a7[3]);
  DynamicType = swift_getDynamicType();
  v15 = a7[4];
  v31 = DynamicType;
  v32 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message.Type);
  v16 = String.init<A>(describing:)();
  v18 = v17;
  v19 = a7[3];
  v20 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v19);
  default argument 0 of Message.jsonString(options:)(v19, v20);
  v21 = Message.jsonString(options:)();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v31 = v16;
  v32 = v18;
  v24._countAndFlagsBits = 58;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v21;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  specialized static HandyLoggerOSSinkNeo.log(logger:privacy:level:with:message:)(a1, v28, (os_log_type_t)v27, v29, v30, v31, v32);
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of LogMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LogMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type OSLogMessageFormat and conformance OSLogMessageFormat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OSLogMessageFormat and conformance OSLogMessageFormat;
  if (!lazy protocol witness table cache variable for type OSLogMessageFormat and conformance OSLogMessageFormat)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OSLogMessageFormat, &type metadata for OSLogMessageFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OSLogMessageFormat and conformance OSLogMessageFormat);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OSLogMessageFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D78388C + 4 * byte_23D9AE9BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D7838C0 + 4 * byte_23D9AE9B6[v4]))();
}

uint64_t sub_23D7838C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7838C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7838D0);
  return result;
}

uint64_t sub_23D7838DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7838E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D7838E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7838F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSLogMessageFormat()
{
  return &type metadata for OSLogMessageFormat;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OSSinkConfig(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OSSinkConfig(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D7839F8 + 4 * byte_23D9AE9C5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_23D783A2C + 4 * byte_23D9AE9C0[v4]))();
}

uint64_t sub_23D783A2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_23D783A34(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x23D783A3CLL);
  return result;
}

uint64_t sub_23D783A48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x23D783A50);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_23D783A54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_23D783A5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSSinkConfig()
{
  return &type metadata for OSSinkConfig;
}

uint64_t method lookup function for HandyLoggerOSSinkNeo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandyLoggerOSSinkNeo.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of HandyLoggerOSSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of HandyLoggerOSSinkNeo.flush()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of HandyLoggerOSSinkNeo.clearLogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

__n128 HandContainer.init(handsKitData:)@<Q0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[36];

  v41 = a2;
  v40 = (uint64_t *)((char *)&v44[24] + 12);
  v3 = type metadata accessor for HandDescriptor();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v39 - v10;
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)v39 - v14;
  memcpy(v44, a1, 0x228uLL);
  v16 = *(_QWORD *)&v44[0];
  v17 = *(_QWORD *)(*(_QWORD *)&v44[0] + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v43 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v19 = *(unsigned __int8 *)(v4 + 80);
    v39[1] = v16;
    v42 = (v19 + 32) & ~v19;
    v20 = v16 + v42;
    v21 = *(_QWORD *)(v4 + 72);
    v18 = v43;
    do
    {
      outlined init with copy of HandDescriptor(v20, (uint64_t)v11);
      outlined init with copy of HandDescriptor((uint64_t)v11, (uint64_t)v7);
      HandDescriptor.init(hand:stripImageCrops:)((uint64_t)v7, 1, (uint64_t)v15);
      outlined destroy of HandDescriptor((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v43;
      }
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v18 = v43;
      }
      *(_QWORD *)(v18 + 16) = v23 + 1;
      outlined init with take of HandDescriptor((uint64_t)v15, v18 + v42 + v23 * v21);
      v20 += v21;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  v24 = v44[21];
  v25 = *((_QWORD *)&v44[22] + 1);
  v42 = *v40;
  v26 = v40[2];
  v28 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 8);
  v27 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v29 = *MEMORY[0x24BDC0D88];
  v30 = *(_QWORD *)&v44[22];
  v31 = v40[1];
  outlined release of HandsKitData(v44);
  v32 = *((_QWORD *)&v44[28] + 1);
  result = (__n128)v44[13];
  v34 = v44[14];
  v35 = v44[15];
  v36 = v44[16];
  v37 = v41;
  v38 = v42;
  *v41 = v18;
  *(_OWORD *)(v37 + 1) = v24;
  v37[3] = v30;
  v37[4] = v25;
  v37[5] = v29;
  v37[6] = v28;
  v37[7] = v27;
  *((_BYTE *)v37 + 64) = 0;
  *(_QWORD *)((char *)v37 + 68) = v38;
  *(_QWORD *)((char *)v37 + 76) = v31;
  *(_QWORD *)((char *)v37 + 84) = v26;
  *(_QWORD *)((char *)v37 + 92) = v29;
  *(_QWORD *)((char *)v37 + 100) = v28;
  *(_QWORD *)((char *)v37 + 108) = v27;
  *((_BYTE *)v37 + 116) = 0;
  v37[15] = 0;
  v37[16] = v32;
  *((__n128 *)v37 + 9) = result;
  *((_OWORD *)v37 + 10) = v34;
  *((_OWORD *)v37 + 11) = v35;
  *((_OWORD *)v37 + 12) = v36;
  return result;
}

uint64_t HandContainer.hands.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 HandContainer.frame.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 24);
  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 68);
  v5 = *(_BYTE *)(v1 + 116);
  v6 = *(_QWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 60) = v4;
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(v1 + 76);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(v1 + 84);
  result = *(__n128 *)(v1 + 100);
  *(__n128 *)(a1 + 92) = result;
  *(_BYTE *)(a1 + 108) = v5;
  *(_QWORD *)(a1 + 112) = v6;
  return result;
}

uint64_t HandContainer.signpostTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

__n128 HandContainer.worldPoseTransform.getter()
{
  __n128 *v0;

  return v0[9];
}

uint64_t initializeWithCopy for HandContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v3;
  v4 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v4;
  v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  v5 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(a1 + 92) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

__n128 __swift_memcpy208_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for HandContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v4 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v4;
  v5 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for HandContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandContainer()
{
  return &type metadata for HandContainer;
}

__n128 __swift_memcpy70_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ObjectInteractionInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 70))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 68);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 70) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 70) = 0;
    if (a2)
      *(_BYTE *)(result + 68) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectInteractionInfo()
{
  return &type metadata for ObjectInteractionInfo;
}

uint64_t type metadata accessor for PinchBreakFusion()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOs6UInt64VG_AF07CountByeF0Vs5NeverOTg5061_s5Hands18HandStatisticsDataV10toProtoBufAA0bC7LoggingVyFAA19hief15VAA0kL0O3key_s6G15V5valuet_tXEfU_Tf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD, uint64_t, _QWORD, __n128), uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;

  v42 = a3;
  v9 = a3(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)v35 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (!v14)
    return v15;
  v35[0] = a4;
  v35[1] = v5;
  v44 = MEMORY[0x24BEE4AF8];
  a4(0, v14, 0, v11);
  v15 = v44;
  result = a5(a1);
  v18 = result;
  v19 = 0;
  v20 = a1 + 64;
  v36 = a1 + 80;
  v37 = v14;
  v38 = v17;
  v39 = a1 + 64;
  while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(_BYTE *)(a1 + 32))
  {
    v23 = (unint64_t)v18 >> 6;
    if ((*(_QWORD *)(v20 + 8 * ((unint64_t)v18 >> 6)) & (1 << v18)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v17)
      goto LABEL_24;
    v43 = v19;
    v24 = *(_QWORD *)(a1 + 48) + 16 * v18;
    v25 = *(_QWORD *)v24;
    v26 = *(_BYTE *)(v24 + 8);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
    UnknownStorage.init()();
    *(_QWORD *)v13 = v25;
    v13[8] = v26;
    *((_QWORD *)v13 + 2) = v27;
    v44 = v15;
    v29 = *(_QWORD *)(v15 + 16);
    v28 = *(_QWORD *)(v15 + 24);
    if (v29 >= v28 >> 1)
    {
      ((void (*)(BOOL, unint64_t, uint64_t))v35[0])(v28 > 1, v29 + 1, 1);
      v15 = v44;
    }
    *(_QWORD *)(v15 + 16) = v29 + 1;
    result = outlined init with take of Matrix2dPB((uint64_t)v13, v15+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v29, v42);
    v21 = 1 << *(_BYTE *)(a1 + 32);
    if (v18 >= v21)
      goto LABEL_25;
    v20 = v39;
    v30 = *(_QWORD *)(v39 + 8 * v23);
    if ((v30 & (1 << v18)) == 0)
      goto LABEL_26;
    LODWORD(v17) = v38;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v38)
      goto LABEL_27;
    v31 = v30 & (-2 << (v18 & 0x3F));
    if (v31)
    {
      v21 = __clz(__rbit64(v31)) | v18 & 0xFFFFFFFFFFFFFFC0;
      v22 = v37;
    }
    else
    {
      v32 = v23 + 1;
      v33 = (unint64_t)(v21 + 63) >> 6;
      v22 = v37;
      if (v23 + 1 < v33)
      {
        v34 = *(_QWORD *)(v39 + 8 * v32);
        if (v34)
        {
LABEL_20:
          v21 = __clz(__rbit64(v34)) + (v32 << 6);
        }
        else
        {
          while (v33 - 2 != v23)
          {
            v34 = *(_QWORD *)(v36 + 8 * v23++);
            if (v34)
            {
              v32 = v23 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v19 = v43 + 1;
    v18 = v21;
    if (v43 + 1 == v22)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  int64_t v42;
  _OWORD v44[5];
  _BYTE v45[25];
  uint64_t v46;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v42 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    v12 = *(_QWORD *)(a1 + 48) + 16 * i;
    v13 = *(_QWORD *)v12;
    v14 = *(_BYTE *)(v12 + 8);
    v15 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 112 * i);
    v17 = v15[1];
    v16 = v15[2];
    v44[0] = *v15;
    v44[1] = v17;
    v44[2] = v16;
    v19 = v15[4];
    v18 = v15[5];
    v20 = v15[3];
    *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v15 + 89);
    v44[4] = v19;
    *(_OWORD *)v45 = v18;
    v44[3] = v20;
    outlined retain of DetectionResult((uint64_t)v44);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = *(_QWORD *)(a2 + 48);
    v22 = v46;
    *(_QWORD *)(a2 + 48) = 0x8000000000000000;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v28 = v23;
    if (*(_QWORD *)(v22 + 24) >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v22 = v46;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      v22 = v46;
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_39;
      v24 = v29;
    }
    *(_QWORD *)(a2 + 48) = v22;
    swift_bridgeObjectRelease();
    v31 = *(_QWORD **)(a2 + 48);
    if ((v28 & 1) == 0)
    {
      v31[(v24 >> 6) + 8] |= 1 << v24;
      v32 = v31[6] + 16 * v24;
      *(_QWORD *)v32 = v13;
      *(_BYTE *)(v32 + 8) = v14;
      *(_QWORD *)(v31[7] + 8 * v24) = 0;
      v33 = v31[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_36;
      v31[2] = v35;
    }
    v36 = v31[7];
    v37 = *(_QWORD *)(v36 + 8 * v24);
    v38 = __CFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_35;
    *(_QWORD *)(v36 + 8 * v24) = v39;
    outlined release of DetectionResult((uint64_t)v44);
    if (v5)
      goto LABEL_4;
LABEL_5:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_37;
    if (v9 >= v42)
      return swift_release();
    v10 = *(_QWORD *)(v41 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v42)
        return swift_release();
      v10 = *(_QWORD *)(v41 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v42)
          return swift_release();
        v10 = *(_QWORD *)(v41 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v42)
            return swift_release();
          v10 = *(_QWORD *)(v41 + 8 * v6);
          if (!v10)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v10 - 1) & v10;
  }
  v11 = v9 + 4;
  if (v11 >= v42)
    return swift_release();
  v10 = *(_QWORD *)(v41 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v42)
      return swift_release();
    v10 = *(_QWORD *)(v41 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall HandStatisticsData.sendCoreAnalytics()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[6];

  if (!*(_QWORD *)(v0 + 32))
    return;
  v1 = (void *)MEMORY[0x2426372E8](0xD00000000000001CLL, 0x800000023D9CBC30);
  v2 = swift_allocObject();
  v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v2 + 64) = v3;
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 96) = v4;
  *(_QWORD *)(v2 + 104) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 112) = 0x800000023D9CBC30;
  v20[4] = partial apply for closure #1 in HandStatisticsData.sendHandStatsAnalytics();
  v20[5] = v2;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v20[3] = &block_descriptor_8;
  v6 = _Block_copy(v20);
  outlined retain of HandStatisticsData(v0);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v6);

  HandStatisticsData.sendPoseCameraPairAnalytics()();
  v7 = *(_QWORD *)(v0 + 80);
  v20[0] = v7;
  v8 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = swift_bridgeObjectRetain_n();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v17 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_26;
      v18 = *(_QWORD *)(v8 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_26;
        v18 = *(_QWORD *)(v8 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 3;
          if (v17 + 3 >= v12)
            goto LABEL_26;
          v18 = *(_QWORD *)(v8 + 8 * v14);
          if (!v18)
          {
            v14 = v17 + 4;
            if (v17 + 4 >= v12)
              goto LABEL_26;
            v18 = *(_QWORD *)(v8 + 8 * v14);
            if (!v18)
              break;
          }
        }
      }
    }
LABEL_25:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    v13 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v16) + 496))(v13);
  }
  v19 = v17 + 5;
  if (v19 >= v12)
  {
LABEL_26:
    swift_release();
    outlined release of HandContainer((uint64_t)v20);
    return;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_29:
  __break(1u);
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease();
  if (v4)
    swift_bridgeObjectRelease();
  return v10;
}

unint64_t HandStatisticsData.aggregate(with:)(unint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(result + 32);
  v3 = v1[4];
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_21;
  }
  v6 = v1;
  v7 = (_QWORD *)result;
  v1[4] = v5;
  v8 = *(_QWORD *)(result + 40);
  v9 = v1[5];
  v4 = __CFADD__(v9, v8);
  v10 = v9 + v8;
  if (v4)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v1[5] = v10;
  v11 = v1[6];
  v12 = swift_bridgeObjectRetain();
  v6[6] = specialized Dictionary.merging(_:uniquingKeysWith:)(v12, v11);
  v13 = v6[7];
  v14 = swift_bridgeObjectRetain();
  v6[7] = specialized Dictionary.merging(_:uniquingKeysWith:)(v14, v13);
  v15 = v6[8];
  v16 = swift_bridgeObjectRetain();
  result = specialized Dictionary.merging(_:uniquingKeysWith:)(v16, v15, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  v6[8] = result;
  v17 = v6[10];
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v18 = v7[10];
  result = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v19 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * result);
  result = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v21 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v22 = *(void (**)(uint64_t))(*(_QWORD *)v20 + 464);
  swift_retain();
  v23 = swift_retain();
  v22(v23);
  swift_release();
  result = swift_release();
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = specialized __RawDictionaryStorage.find<A>(_:)(1u);
  if ((v24 & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * result);
  result = specialized __RawDictionaryStorage.find<A>(_:)(1u);
  if ((v26 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v27 = *(void (**)(uint64_t))(*(_QWORD *)v25 + 464);
  swift_retain();
  v28 = swift_retain();
  v27(v28);
  swift_release();
  result = swift_release();
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  if ((v29 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * result);
  result = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  if ((v31 & 1) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v32 = *(void (**)(uint64_t))(*(_QWORD *)v30 + 464);
  swift_retain();
  v33 = swift_retain();
  v32(v33);
  swift_release();
  result = swift_release();
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  result = specialized __RawDictionaryStorage.find<A>(_:)(3u);
  if ((v34 & 1) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * result);
  result = specialized __RawDictionaryStorage.find<A>(_:)(3u);
  if ((v36 & 1) != 0)
  {
    v37 = *(void (**)(uint64_t))(*(_QWORD *)v35 + 464);
    swift_retain();
    v38 = swift_retain();
    v37(v38);
    swift_release();
    swift_release();
    v40 = v7[1];
    v39 = v7[2];
    v41 = v7[3];
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    v6[1] = v40;
    v6[2] = v39;
    v6[3] = v41;
    return result;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t HandStatisticsData.toProtoBuf()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16[8];
  char v17[8];
  char v18[8];
  char v19[16];

  a1[2] = MEMORY[0x24BEE4AF8];
  type metadata accessor for HandStatisticsLogging(0);
  UnknownStorage.init()();
  v3 = swift_bridgeObjectRetain();
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOs6UInt64VG_AF07CountByeF0Vs5NeverOTg5061_s5Hands18HandStatisticsDataV10toProtoBufAA0bC7LoggingVyFAA19hief15VAA0kL0O3key_s6G15V5valuet_tXEfU_Tf1cn_nTm(v3, (uint64_t)v19, type metadata accessor for CountByCameraSource, (void (*)(_QWORD, uint64_t, _QWORD, __n128))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), specialized Dictionary.startIndex.getter);
  swift_bridgeObjectRelease();
  *a1 = v4;
  v5 = swift_bridgeObjectRetain();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOs6UInt64VG_AF07CountByeF0Vs5NeverOTg5061_s5Hands18HandStatisticsDataV10toProtoBufAA0bC7LoggingVyFAA19hief15VAA0kL0O3key_s6G15V5valuet_tXEfU_Tf1cn_nTm(v5, (uint64_t)v18, type metadata accessor for CountByCameraSource, (void (*)(_QWORD, uint64_t, _QWORD, __n128))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), specialized Dictionary.startIndex.getter);
  swift_bridgeObjectRelease();
  a1[1] = v6;
  v7 = swift_bridgeObjectRetain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOs6UInt64VG_AF07CountByeF0Vs5NeverOTg5061_s5Hands18HandStatisticsDataV10toProtoBufAA0bC7LoggingVyFAA19hief15VAA0kL0O3key_s6G15V5valuet_tXEfU_Tf1cn_nTm(v7, (uint64_t)v17, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (void (*)(_QWORD, uint64_t, _QWORD, __n128))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), specialized Dictionary.startIndex.getter);
  swift_bridgeObjectRelease();
  a1[3] = v8;
  v9 = v1[5];
  a1[5] = v1[4];
  a1[7] = v9;
  v10 = swift_bridgeObjectRetain();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOs6UInt64VG_AF07CountByeF0Vs5NeverOTg5061_s5Hands18HandStatisticsDataV10toProtoBufAA0bC7LoggingVyFAA19hief15VAA0kL0O3key_s6G15V5valuet_tXEfU_Tf1cn_nTm(v10, (uint64_t)v16, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (void (*)(_QWORD, uint64_t, _QWORD, __n128))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), specialized Dictionary.startIndex.getter);
  result = swift_bridgeObjectRelease();
  a1[4] = v11;
  v13 = v1[10];
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if ((v15 & 1) != 0)
      v14 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * result) + 20);
    else
      v14 = 0;
  }
  a1[6] = v14;
  return result;
}

void HandStatisticsData.handPrev.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[2];
  v9 = *(_QWORD *)(v8 + 16);
  if (v9 && *(_QWORD *)(v8 + 24) >= 2uLL)
  {
    v10 = v1[3];
    v11 = v10 - 1;
    if (__OFSUB__(v10, 1))
    {
      __break(1u);
    }
    else
    {
      v12 = v1[1];
      v13 = __OFADD__(v11, v12);
      v14 = v11 + v12;
      if (!v13)
      {
        if (v12)
        {
          if (v12 == -1 && v14 == 0x8000000000000000)
            goto LABEL_18;
          v15 = v14 % v12;
          if (v15 < v9)
          {
            outlined init with copy of (Int32, Matrix2dPB)(v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, (uint64_t)v7, &demangling cache variable for type metadata for DerivedHandAttributes?);
            v16 = type metadata accessor for DerivedHandAttributes(0);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v7, 1, v16) != 1)
            {
              outlined init with copy of HandDescriptor((uint64_t)v7, a1);
              outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for DerivedHandAttributes);
              v18 = type metadata accessor for HandDescriptor();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 0, 1, v18);
              return;
            }
            outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for DerivedHandAttributes?);
            goto LABEL_11;
          }
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
          return;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_11:
  v17 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 1, 1, v17);
}

NSNumber closure #1 in HandStatisticsData.sendHandStatsAnalytics()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  NSNumber result;
  float v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  result.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 48) = result;
  *(_QWORD *)(inited + 56) = 0xD000000000000015;
  *(_QWORD *)(inited + 64) = 0x800000023D9CBD00;
  v8 = (float)((float)*(unint64_t *)(a1 + 40) / (float)*(unint64_t *)(a1 + 32)) * 100.0;
  if ((~LODWORD(v8) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v8 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 < 9.2234e18)
  {
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    v9 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v14 = xmmword_23D9A8B80;
    v15 = 0;
    v16 = 0;
    v13[0] = a2;
    v13[1] = a3;
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    type metadata accessor for NSObject();
    v11 = MEMORY[0x24BEE0D00];
    v12._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13[3] = v11;
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000055, 0x800000023D9CBCA0, 160, (uint64_t *)&v14, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
    return (NSNumber)v9;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall HandStatisticsData.sendPoseCameraPairAnalytics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  Class isa;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  objc_class *v21;
  _QWORD v22[6];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    v9 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(4, 1);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      goto LABEL_4;
LABEL_9:
    v9 = 0;
    goto LABEL_14;
  }
  v6 = 0;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_9;
LABEL_4:
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(5, 1);
  if ((v8 & 1) == 0)
  {
    v9 = 0;
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3)
      goto LABEL_14;
LABEL_11:
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
    if ((v11 & 1) != 0)
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v10);
    else
      v3 = 0;
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v7);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
    goto LABEL_11;
LABEL_14:
  v12 = v3 - v6;
  if (v3 < v6)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23D9A74A0;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v12;
    *(_QWORD *)(v13 + 48) = v9;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v15 = (void *)MEMORY[0x2426372E8](0xD000000000000021, 0x800000023D9CBC50);
    v16 = swift_allocObject();
    v17 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v16 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v16 + 64) = v17;
    *(_OWORD *)(v16 + 80) = *(_OWORD *)(v1 + 64);
    v18 = *(_QWORD *)(v1 + 80);
    v19 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v16 + 32) = v19;
    *(_QWORD *)(v16 + 96) = v18;
    *(_QWORD *)(v16 + 104) = isa;
    *(_QWORD *)(v16 + 112) = 0xD000000000000021;
    *(_QWORD *)(v16 + 120) = 0x800000023D9CBC50;
    v22[4] = partial apply for closure #1 in HandStatisticsData.sendPoseCameraPairAnalytics();
    v22[5] = v16;
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 1107296256;
    v22[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v22[3] = &block_descriptor_6_0;
    v20 = _Block_copy(v22);
    outlined retain of HandStatisticsData(v1);
    v21 = isa;
    swift_release();
    AnalyticsSendExplodingEventLazy();
    _Block_release(v20);

  }
}

unint64_t closure #1 in HandStatisticsData.sendPoseCameraPairAnalytics()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  id v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000010;
  *(_QWORD *)(inited + 64) = 0x800000023D9CBC80;
  *(_QWORD *)(inited + 72) = a2;
  v8 = a2;
  v9 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v15 = xmmword_23D9A8B80;
  v16 = 0;
  v17 = 0;
  v14[0] = a3;
  v14[1] = a4;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  type metadata accessor for NSObject();
  v11 = MEMORY[0x24BEE0D00];
  v12._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14[3] = v11;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000055, 0x800000023D9CBCA0, 184, (uint64_t *)&v15, (uint64_t)v14, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return v9;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

void specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)()
{
  unint64_t v0;

  swift_bridgeObjectRelease();
  v0 = MEMORY[0x24BEE4AF8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v0);
  specialized Dictionary.init(dictionaryLiteral:)(v0);
  JUMPOUT(0x23D785C0CLL);
}

void sub_23D785C0C()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = type metadata accessor for PinchSignalStatistics();
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(v3 + 448))(v2 & 1, v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  v8 = v0[2];
  v9 = (v6 & 1) == 0;
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v11 = v6;
  if (v0[3] < v10)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10, isUniquelyReferenced_nonNull_native);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
    if ((v11 & 1) != (v13 & 1))
    {
LABEL_14:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x23D785DA8);
    }
    v7 = v12;
    if ((v11 & 1) == 0)
      goto LABEL_8;
LABEL_19:
    JUMPOUT(0x23D785BC4);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v6 & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    specialized _NativeDictionary.copy()();
    if ((v11 & 1) != 0)
      goto LABEL_19;
  }
LABEL_8:
  v0[(v7 >> 6) + 8] |= 1 << v7;
  *(_BYTE *)(v0[6] + v7) = v1;
  *(_QWORD *)(v0[7] + 8 * v7) = v4;
  v14 = v0[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (!v15)
  {
    v0[2] = v16;
    JUMPOUT(0x23D785BD8);
  }
  goto LABEL_13;
}

__n128 specialized HandStatisticsData.init(fromPrev:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v3 = MEMORY[0x24BEE4AF8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized Dictionary.init(dictionaryLiteral:)(v3);
  specialized Dictionary.init(dictionaryLiteral:)(v3);
  specialized Dictionary.init(dictionaryLiteral:)(v3);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v27 = v20;
  v28 = v21;
  v14 = a1[2];
  v15 = a1[1];
  v13 = a1[3];
  swift_bridgeObjectRetain();
  outlined release of CircularBuffer<DerivedHandAttributes?>((uint64_t)&v27);
  v4 = a1[10];
  v5 = *(_QWORD *)(v4 + 64);
  v17 = (_QWORD *)(v4 + 64);
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v18 = v4;
  swift_bridgeObjectRetain();
  outlined release of HandStatisticsData((uint64_t)a1);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  if ((v7 & v5) != 0)
  {
    v8 = __clz(__rbit64(v7 & v5));
    goto LABEL_18;
  }
  if ((unint64_t)(v6 + 63) >> 6 > 1)
  {
    v9 = v17[1];
    v10 = 1;
    if (v9)
      goto LABEL_17;
    v10 = 2;
    if ((unint64_t)(v6 + 63) >> 6 <= 2)
      goto LABEL_19;
    v9 = v17[2];
    if (v9)
      goto LABEL_17;
    v10 = 3;
    if ((unint64_t)(v6 + 63) >> 6 <= 3)
      goto LABEL_19;
    v9 = v17[3];
    if (v9)
    {
LABEL_17:
      v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_18:
      __asm { BR              X8 }
    }
    v11 = 4;
    if ((unint64_t)(v6 + 63) >> 6 > 4)
    {
      v9 = v17[4];
      if (v9)
      {
        v10 = 4;
        goto LABEL_17;
      }
      while (1)
      {
        v10 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          JUMPOUT(0x23D786194);
        }
        if (v10 >= (uint64_t)((unint64_t)(v6 + 63) >> 6))
          break;
        v9 = v17[v10];
        ++v11;
        if (v9)
          goto LABEL_17;
      }
    }
  }
LABEL_19:
  swift_release();
  *(_BYTE *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v23;
  result = v25;
  *(_OWORD *)(a2 + 48) = v24;
  *(__n128 *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 80) = v26;
  return result;
}

uint64_t outlined release of CircularBuffer<DerivedHandAttributes?>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23D7861DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

NSNumber partial apply for closure #1 in HandStatisticsData.sendHandStatsAnalytics()()
{
  uint64_t v0;

  return closure #1 in HandStatisticsData.sendHandStatsAnalytics()(v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_23D786254()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in HandStatisticsData.sendPoseCameraPairAnalytics()()
{
  uint64_t v0;

  return closure #1 in HandStatisticsData.sendPoseCameraPairAnalytics()(v0 + 16, *(void **)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t specialized HandStatisticsData.updateWith(handMaybe:data:detectionRan:masterCameraTimestamp:)(uint64_t a1, const void *a2, uint64_t a3, unint64_t a4, int64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t i;
  BOOL v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *);
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned int (*v131)(uint64_t, uint64_t, uint64_t);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _OWORD v143[35];
  _QWORD v144[70];

  v6 = v5;
  v139 = (char *)a4;
  v135 = a3;
  v136 = 0;
  v141 = (char *)a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v13 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133, v14);
  v16 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v134 = (uint64_t)&v130 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v140 = (uint64_t)&v130 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v132 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v130 - v28;
  v137 = type metadata accessor for HandDescriptor();
  v30 = *(_QWORD *)(v137 - 8);
  MEMORY[0x24BDAC7A8](v137, v31);
  v33 = (unint64_t)&v130 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v138 = (unsigned __int8 *)&v130 - v36;
  memcpy(v144, a2, 0x228uLL);
  if (*(_QWORD *)(v144[68] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(*v6);
    if ((v37 & 1) != 0)
    {
      v38 = *((_QWORD *)v6 + 9);
      v39 = swift_bridgeObjectRetain();
      v40 = v38;
      v41 = a5;
      v42 = v136;
      v43 = specialized Dictionary.merging(_:uniquingKeysWith:)(v39, v40, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
      v136 = v42;
      a5 = v41;
      *((_QWORD *)v6 + 9) = v43;
    }
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v141, (uint64_t)v29, &demangling cache variable for type metadata for HandDescriptor?);
  v131 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v131((uint64_t)v29, 1, v137) != 1)
  {
    outlined init with take of Matrix2dPB((uint64_t)v29, (uint64_t)v138, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v60 = *((_QWORD *)v6 + 4);
    v61 = __CFADD__(v60, 1);
    v62 = v60 + 1;
    if (v61)
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    v63 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 4) = v62;
    v64 = *((_QWORD *)v6 + 2);
    v65 = *((_QWORD *)v6 + 3);
    v130 = v6 + 8;
    specialized CircularBuffer.last.getter(v63, v64, v65, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v133) == 1)
    {
      v66 = type metadata accessor for DerivedHandAttributes(0);
      v67 = v134;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v134, 1, 1, v66);
      outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for DerivedHandAttributes??);
    }
    else
    {
      v67 = v134;
      outlined init with take of DerivedHandAttributes?((uint64_t)v12, v134);
    }
    outlined init with copy of HandDescriptor((uint64_t)v138, v33);
    memcpy(v143, v144, 0x228uLL);
    outlined retain of HandsKitData(v144);
    DerivedHandAttributes.init(prevHand:currentHand:data:timestamp:)(v67, (__n128 *)v33, v143, v135, (unint64_t)v139, a5, v140);
    v12 = (char *)*((_QWORD *)v6 + 10);
    v70 = *((_QWORD *)v12 + 8);
    v141 = v12 + 64;
    v71 = 1 << v12[32];
    v72 = -1;
    if (v71 < 64)
      v72 = ~(-1 << v71);
    v33 = v72 & v70;
    a5 = (unint64_t)(v71 + 63) >> 6;
    swift_bridgeObjectRetain();
    v73 = 0;
    v139 = v12;
    while (1)
    {
      while (v33)
      {
        v74 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        v75 = v74 | (v73 << 6);
        if (*((_QWORD *)v12 + 2))
          goto LABEL_58;
      }
      v50 = __OFADD__(v73++, 1);
      if (v50)
        goto LABEL_98;
      if (v73 >= a5)
        goto LABEL_64;
      v76 = *(_QWORD *)&v141[8 * v73];
      if (!v76)
      {
        v77 = v73 + 1;
        if (v73 + 1 >= a5)
          goto LABEL_64;
        v76 = *(_QWORD *)&v141[8 * v77];
        if (!v76)
        {
          v77 = v73 + 2;
          if (v73 + 2 >= a5)
            goto LABEL_64;
          v76 = *(_QWORD *)&v141[8 * v77];
          if (!v76)
          {
            v77 = v73 + 3;
            if (v73 + 3 >= a5)
              goto LABEL_64;
            v76 = *(_QWORD *)&v141[8 * v77];
            if (!v76)
            {
              v77 = v73 + 4;
              if (v73 + 4 >= a5)
                goto LABEL_64;
              v76 = *(_QWORD *)&v141[8 * v77];
              if (!v76)
              {
                v77 = v73 + 5;
                if (v73 + 5 >= a5)
                  goto LABEL_64;
                v76 = *(_QWORD *)&v141[8 * v77];
                if (!v76)
                {
                  while (1)
                  {
                    v73 = v77 + 1;
                    if (__OFADD__(v77, 1))
                      goto LABEL_106;
                    if (v73 >= a5)
                      break;
                    v76 = *(_QWORD *)&v141[8 * v73];
                    ++v77;
                    if (v76)
                      goto LABEL_57;
                  }
LABEL_64:
                  v88 = v131;
                  v87 = (uint64_t)v132;
                  swift_release();
                  v89 = *((_OWORD *)v6 + 3);
                  v143[2] = *((_OWORD *)v6 + 2);
                  v143[3] = v89;
                  v143[4] = *((_OWORD *)v6 + 4);
                  *(_QWORD *)&v143[5] = *((_QWORD *)v6 + 10);
                  v90 = *((_OWORD *)v6 + 1);
                  v143[0] = *(_OWORD *)v6;
                  v143[1] = v90;
                  outlined retain of HandStatisticsData((uint64_t)v143);
                  HandStatisticsData.handPrev.getter(v87);
                  outlined release of HandStatisticsData((uint64_t)v143);
                  if (v88(v87, 1, v137) == 1)
                  {
                    outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for HandDescriptor?);
                    goto LABEL_72;
                  }
                  v91 = *(_QWORD *)(v87 + 200);
                  outlined copy of HandPose?(v91);
                  outlined destroy of Matrix3x3PB(v87, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                  if (v91)
                  {
                    v92 = swift_bridgeObjectRetain();
                    outlined consume of HandPose?(v92);
                    v93 = *((_QWORD *)v138 + 25);
                    if (!v93)
                    {
                      swift_bridgeObjectRelease();
                      goto LABEL_72;
                    }
                    v94 = specialized static Array<A>.== infix(_:_:)(v93, v91);
                    swift_bridgeObjectRelease();
                    if ((v94 & 1) == 0)
                    {
                      v95 = *((_QWORD *)v6 + 5);
                      v61 = __CFADD__(v95, 1);
                      v96 = v95 + 1;
                      if (!v61)
                      {
                        *((_QWORD *)v6 + 5) = v96;
                        goto LABEL_72;
                      }
                      __break(1u);
LABEL_110:
                      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
LABEL_111:
                      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                      return result;
                    }
                  }
LABEL_72:
                  v97 = (uint64_t)v138;
                  v98 = swift_bridgeObjectRetain();
                  specialized Sequence.forEach(_:)(v98, (uint64_t)v6);
                  swift_bridgeObjectRelease();
                  v99 = *(_QWORD *)(v97 + 200);
                  if (v99)
                  {
                    v100 = *(_QWORD *)(v99 + 16);
                    if (v100)
                    {
                      swift_bridgeObjectRetain_n();
                      v141 = (char *)v99;
                      a5 = v99 + 40;
                      do
                      {
                        v12 = *(char **)(a5 - 8);
                        v30 = *(unsigned __int8 *)a5;
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v142 = *((_QWORD *)v6 + 7);
                        v102 = v142;
                        *((_QWORD *)v6 + 7) = 0x8000000000000000;
                        v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12, v30);
                        v104 = *(_QWORD *)(v102 + 16);
                        v105 = (v103 & 1) == 0;
                        v106 = v104 + v105;
                        if (__OFADD__(v104, v105))
                          goto LABEL_100;
                        v107 = v103;
                        if (*(_QWORD *)(v102 + 24) >= v106)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v102 = v142;
                          }
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v106, isUniquelyReferenced_nonNull_native);
                          v102 = v142;
                          v108 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12, v30);
                          if ((v107 & 1) != (v109 & 1))
                            goto LABEL_110;
                          v33 = v108;
                        }
                        *((_QWORD *)v6 + 7) = v102;
                        swift_bridgeObjectRelease();
                        v110 = (_QWORD *)*((_QWORD *)v6 + 7);
                        if ((v107 & 1) == 0)
                        {
                          v110[(v33 >> 6) + 8] |= 1 << v33;
                          v111 = v110[6] + 16 * v33;
                          *(_QWORD *)v111 = v12;
                          *(_BYTE *)(v111 + 8) = v30;
                          *(_QWORD *)(v110[7] + 8 * v33) = 0;
                          v112 = v110[2];
                          v50 = __OFADD__(v112, 1);
                          v113 = v112 + 1;
                          if (v50)
                            goto LABEL_102;
                          v110[2] = v113;
                        }
                        v114 = v110[7];
                        v115 = *(_QWORD *)(v114 + 8 * v33);
                        v61 = __CFADD__(v115, 1);
                        v116 = v115 + 1;
                        if (v61)
                          goto LABEL_101;
                        *(_QWORD *)(v114 + 8 * v33) = v116;
                        a5 += 16;
                        --v100;
                      }
                      while (v100);
                      swift_bridgeObjectRelease_n();
                    }
                  }
                  v117 = &v138[*(int *)(v137 + 100)];
                  a5 = *(_QWORD *)v117;
                  LOBYTE(v12) = v117[8];
                  v118 = swift_isUniquelyReferenced_nonNull_native();
                  v142 = *((_QWORD *)v6 + 8);
                  v119 = v142;
                  *((_QWORD *)v6 + 8) = 0x8000000000000000;
                  v30 = specialized __RawDictionaryStorage.find<A>(_:)(a5, (char)v12);
                  v121 = *(_QWORD *)(v119 + 16);
                  v122 = (v120 & 1) == 0;
                  v123 = v121 + v122;
                  if (!__OFADD__(v121, v122))
                  {
                    LOBYTE(v33) = v120;
                    if (*(_QWORD *)(v119 + 24) >= v123)
                    {
                      if ((v118 & 1) != 0)
                        goto LABEL_92;
                      goto LABEL_108;
                    }
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v123, v118);
                    v119 = v142;
                    v124 = specialized __RawDictionaryStorage.find<A>(_:)(a5, (char)v12);
                    if ((v33 & 1) == (v125 & 1))
                    {
                      v30 = v124;
                      goto LABEL_92;
                    }
                    goto LABEL_111;
                  }
LABEL_104:
                  __break(1u);
                  goto LABEL_105;
                }
              }
            }
          }
        }
        v73 = v77;
      }
LABEL_57:
      v33 = (v76 - 1) & v76;
      v75 = __clz(__rbit64(v76)) + (v73 << 6);
      if (*((_QWORD *)v12 + 2))
      {
LABEL_58:
        v78 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(*((_QWORD *)v12 + 6) + v75));
        if ((v79 & 1) != 0)
        {
          v80 = *(_QWORD *)(*((_QWORD *)v12 + 7) + 8 * v78);
          v81 = *((_QWORD *)v6 + 1);
          v82 = *((_QWORD *)v6 + 2);
          v30 = *((_QWORD *)v6 + 3);
          memcpy(v143, v144, 0x228uLL);
          v83 = v6;
          v84 = a5;
          v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v80 + 472);
          swift_retain();
          swift_bridgeObjectRetain();
          v86 = v81;
          v12 = v139;
          v85(v140, v86, v82, v30, v143);
          a5 = v84;
          v6 = v83;
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandDescriptor?);
  v44 = *((_QWORD *)v6 + 10);
  v45 = *(_QWORD *)(v44 + 64);
  v139 = (char *)(v44 + 64);
  v46 = 1 << *(_BYTE *)(v44 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v30 = v47 & v45;
  v140 = (unint64_t)(v46 + 63) >> 6;
  v141 = (char *)v44;
  v138 = v6 + 8;
  swift_bridgeObjectRetain();
  a5 = 0;
  if (!v30)
    goto LABEL_9;
LABEL_8:
  v48 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  for (i = v48 | (a5 << 6); ; i = __clz(__rbit64(v51)) + (a5 << 6))
  {
    v53 = *((_QWORD *)v6 + 10);
    if (!*(_QWORD *)(v53 + 16))
    {
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(*((_QWORD *)v141 + 6) + i));
    if ((v55 & 1) == 0)
      goto LABEL_97;
    v56 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54);
    v57 = type metadata accessor for DerivedHandAttributes(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v16, 1, 1, v57);
    v33 = *((_QWORD *)v6 + 1);
    v58 = *((_QWORD *)v6 + 2);
    v59 = *((_QWORD *)v6 + 3);
    memcpy(v143, v144, 0x228uLL);
    v12 = *(char **)(*(_QWORD *)v56 + 472);
    swift_retain();
    swift_bridgeObjectRetain();
    ((void (*)(char *, unint64_t, uint64_t, uint64_t, _OWORD *))v12)(v16, v33, v58, v59, v143);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for DerivedHandAttributes?);
    if (v30)
      goto LABEL_8;
LABEL_9:
    v50 = __OFADD__(a5++, 1);
    if (v50)
      goto LABEL_99;
    if (a5 >= v140)
    {
LABEL_35:
      swift_release();
      v68 = type metadata accessor for DerivedHandAttributes(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v16, 1, 1, v68);
      specialized CircularBuffer.add(_:)((uint64_t)v16);
      return outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for DerivedHandAttributes?);
    }
    v51 = *(_QWORD *)&v139[8 * a5];
    if (!v51)
      break;
LABEL_23:
    v30 = (v51 - 1) & v51;
  }
  v52 = a5 + 1;
  if (a5 + 1 >= v140)
    goto LABEL_35;
  v51 = *(_QWORD *)&v139[8 * v52];
  if (v51)
    goto LABEL_22;
  v52 = a5 + 2;
  if (a5 + 2 >= v140)
    goto LABEL_35;
  v51 = *(_QWORD *)&v139[8 * v52];
  if (v51)
    goto LABEL_22;
  v52 = a5 + 3;
  if (a5 + 3 >= v140)
    goto LABEL_35;
  v51 = *(_QWORD *)&v139[8 * v52];
  if (v51)
    goto LABEL_22;
  v52 = a5 + 4;
  if (a5 + 4 >= v140)
    goto LABEL_35;
  v51 = *(_QWORD *)&v139[8 * v52];
  if (v51)
    goto LABEL_22;
  v52 = a5 + 5;
  if (a5 + 5 >= v140)
    goto LABEL_35;
  v51 = *(_QWORD *)&v139[8 * v52];
  if (v51)
  {
LABEL_22:
    a5 = v52;
    goto LABEL_23;
  }
  while (1)
  {
    a5 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (a5 >= v140)
      goto LABEL_35;
    v51 = *(_QWORD *)&v139[8 * a5];
    ++v52;
    if (v51)
      goto LABEL_23;
  }
  while (1)
  {
    __break(1u);
LABEL_108:
    specialized _NativeDictionary.copy()();
    v119 = v142;
LABEL_92:
    *((_QWORD *)v6 + 8) = v119;
    swift_bridgeObjectRelease();
    v126 = (_QWORD *)*((_QWORD *)v6 + 8);
    swift_bridgeObjectRetain();
    if ((v33 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v30, a5, (char)v12, 0, v126);
    a5 = v126[7];
    swift_bridgeObjectRelease();
    v127 = *(_QWORD *)(a5 + 8 * v30);
    v61 = __CFADD__(v127, 1);
    v128 = v127 + 1;
    if (!v61)
      break;
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }
  *(_QWORD *)(a5 + 8 * v30) = v128;
  v129 = v140;
  specialized CircularBuffer.add(_:)(v140);
  outlined destroy of Coordinate3DPB?(v129, &demangling cache variable for type metadata for DerivedHandAttributes?);
  return outlined destroy of Matrix3x3PB((uint64_t)v138, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

uint64_t outlined init with take of DerivedHandAttributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for HandStatisticsData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HandStatisticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandStatisticsData(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for HandStatisticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandStatisticsData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandStatisticsData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandStatisticsData()
{
  return &type metadata for HandStatisticsData;
}

unint64_t lazy protocol witness table accessor for type HandStatisticsLogging and conformance HandStatisticsLogging()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging;
  if (!lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging)
  {
    v1 = type metadata accessor for HandStatisticsLogging(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandStatisticsLogging, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging);
  }
  return result;
}

uint64_t MatrixDouble2d.toProtoBuf()@<X0>(uint64_t a1@<X0>, char a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for Matrix2dPB.VectorPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a3 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for Matrix2dPB(0);
  result = UnknownStorage.init()();
  *(_BYTE *)(a3 + 8) = a2;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v18 = a3;
    v19 = v11;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v14 = 0;
    v11 = v19;
    do
    {
      v15 = *(_QWORD *)(a1 + 8 * v14 + 32);
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      *v10 = v15;
      v19 = v11;
      v17 = *(_QWORD *)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v11 = v19;
      }
      ++v14;
      *(_QWORD *)(v11 + 16) = v17 + 1;
      outlined init with take of Matrix2dPB.VectorPB((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17);
    }
    while (v13 != v14);
    result = swift_bridgeObjectRelease();
    a3 = v18;
  }
  *(_QWORD *)a3 = v11;
  return result;
}

Swift::Bool __swiftcall MatrixDouble2d.almostEqual(to:withThreshold:)(Hands::MatrixDouble2d to, Swift::Double withThreshold)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = 0;
  if (v4 != to.colNum || v3 != to.rowNum)
    return v5;
  if (v3 < 0)
    goto LABEL_26;
  if (v3)
  {
    if (v4 < 0)
    {
LABEL_27:
      __break(1u);
      return (Swift::Bool)to.data._rawValue;
    }
    v6 = 0;
    while (v6 != v3)
    {
      if (v4)
      {
        if (v6 >= *(_QWORD *)(v2 + 16))
          goto LABEL_24;
        if (v6 >= *((_QWORD *)to.data._rawValue + 2))
          goto LABEL_25;
        v7 = *(_QWORD *)(v2 + 32 + 8 * v6);
        v8 = (double *)(v7 + 32);
        v9 = *((_QWORD *)to.data._rawValue + v6 + 4);
        v10 = (double *)(v9 + 32);
        v11 = *(_QWORD *)(v7 + 16);
        v12 = *(_QWORD *)(v9 + 16);
        v13 = v4;
        while (v11)
        {
          if (!v12)
            goto LABEL_22;
          if (vabdd_f64(*v8, *v10) > withThreshold)
          {
            LOBYTE(to.data._rawValue) = 0;
            return (Swift::Bool)to.data._rawValue;
          }
          --v12;
          --v11;
          ++v8;
          ++v10;
          if (!--v13)
            goto LABEL_7;
        }
        __break(1u);
LABEL_22:
        __break(1u);
        break;
      }
LABEL_7:
      ++v6;
      v5 = 1;
      if (v6 == v3)
        return v5;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  LOBYTE(to.data._rawValue) = 1;
  return (Swift::Bool)to.data._rawValue;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance MatrixDouble2d@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return MatrixDouble2d.toProtoBuf()(*(_QWORD *)v1, *(_BYTE *)(v1 + 24), a1);
}

uint64_t outlined init with take of Matrix2dPB.VectorPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Matrix2dPB.VectorPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for MatrixDouble2d(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatrixDouble2d(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MatrixDouble2d(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for MatrixDouble2d()
{
  return &type metadata for MatrixDouble2d;
}

unint64_t lazy protocol witness table accessor for type Matrix2dPB and conformance Matrix2dPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB;
  if (!lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB)
  {
    v1 = type metadata accessor for Matrix2dPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for Matrix2dPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB);
  }
  return result;
}

Swift::Float __swiftcall HoverDistanceReductionCalculator.getHoverDistanceReduction(_:)(Swift::Float a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  Swift::Float result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;

  v2 = 0.0;
  if (*(_BYTE *)(v1 + 44) != 1)
    return v2;
  v3 = v1;
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 24))
  {
    specialized CircularBuffer.add(_:)(a1);
    swift_endAccess();
    v6 = *(_QWORD *)(v1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v3 + 32);
      v8 = *(_QWORD *)(v3 + 16);
      v9 = specialized static HoverDistanceReductionCalculator.findFirstMaxValueAndIndex(_:)(v8, v6, v7);
      v11 = v10;
      if (v9 < specialized static HoverDistanceReductionCalculator.findLastMinValueAndIndex(_:)(v8, v6, v7))
        return v11 - v12;
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t HoverDistanceReductionCalculator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HoverDistanceReductionCalculator()
{
  return objc_opt_self();
}

uint64_t specialized CircularBuffer.lastAddedElementPtr.getter(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  if (!(a2 >> 62))
  {
    if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      return 0;
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1;
LABEL_4:
    if (v5)
    {
      v6 = a3 - 1;
      if (__OFSUB__(a3, 1))
      {
        __break(1u);
      }
      else
      {
        v7 = __OFADD__(v6, v4);
        v8 = v6 + v4;
        if (!v7)
        {
          if (v4)
          {
            if (v4 != -1 || v8 != 0x8000000000000000)
              return v8 % v4;
            goto LABEL_20;
          }
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = _CocoaArrayWrapper.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5 < 0 || v10 < v5)
    {
      __break(1u);
      return 0;
    }
    goto LABEL_4;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized CircularBuffer.lastAddedElementPtr.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (!*(_QWORD *)(a2 + 16) || *(_QWORD *)(a2 + 24) <= 1uLL)
    return 0;
  v3 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = __OFADD__(v3, result);
  v5 = v3 + result;
  if (v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result != -1 || v5 != 0x8000000000000000)
    return v5 % result;
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized static HoverDistanceReductionCalculator.findFirstMaxValueAndIndex(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint64_t result;
  char v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return -1;
  v7 = *(_QWORD *)(a2 + 24);
  result = specialized CircularBuffer.lastAddedElementPtr.getter(a1, a2, a3);
  if (v7 < 2 || (v9 & 1) != 0)
    return -1;
  if (v3 == a1)
    v11 = a3;
  else
    v11 = 0;
  if (v11 >= v3)
  {
LABEL_18:
    __break(1u);
  }
  else
  {
    v12 = result;
    v13 = 0;
    result = -1;
    v14 = -INFINITY;
    while (!__OFADD__(v13, 1))
    {
      if (v14 < *(float *)(a2 + 32 + 4 * v11))
      {
        v14 = *(float *)(a2 + 32 + 4 * v11);
        result = v13;
      }
      if (v11 == v12)
        return result;
      v11 = (uint64_t)(v11 + 1) % (uint64_t)v3;
      ++v13;
      if (v11 >= v3)
        goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static HoverDistanceReductionCalculator.findLastMinValueAndIndex(_:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 && *(_QWORD *)(a2 + 24) >= 2uLL)
  {
    if (v3 == result)
      v4 = a3;
    else
      v4 = 0;
    v5 = a3 - 1;
    if (!__OFSUB__(a3, 1))
    {
      v6 = v5 + result;
      if (__OFADD__(v5, result))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (!result)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      if (result == -1 && v6 == 0x8000000000000000)
        goto LABEL_25;
      if (v4 >= v3)
      {
LABEL_20:
        __break(1u);
      }
      else
      {
        v7 = 0;
        v8 = v6 % result;
        result = -1;
        v9 = INFINITY;
        while (!__OFADD__(v7, 1))
        {
          if (*(float *)(a2 + 32 + 4 * v4) <= v9)
          {
            v9 = *(float *)(a2 + 32 + 4 * v4);
            result = v7;
          }
          if (v4 == v8)
            return result;
          v4 = (uint64_t)(v4 + 1) % (uint64_t)v3;
          ++v7;
          if (v4 >= v3)
            goto LABEL_20;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  return -1;
}

void *__swift_memcpy352_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

ValueMetadata *type metadata accessor for RecoverScrollPinchData()
{
  return &type metadata for RecoverScrollPinchData;
}

uint64_t getEnumTagSinglePayload for RecoverScrollPinchData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 352))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 1);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoverScrollPinchData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 352) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecoverTapPinchData()
{
  return &type metadata for RecoverTapPinchData;
}

id HandsGraphKeys.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsGraphKeys();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for HandsGraphKeys()
{
  return objc_opt_self();
}

Swift::Bool __swiftcall HandRejectionReason.hasTrackerTerminated()()
{
  uint64_t v0;
  _BOOL4 v1;
  Swift::String v2;
  _QWORD v4[4];

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    return (0xA4Cu >> *(_QWORD *)v0) & 1;
  }
  else
  {
    v4[0] = 0;
    v4[1] = 0xE000000000000000;
    v2._countAndFlagsBits = 0x6E676F6365726E55;
    v2._object = (void *)0xED00002064657A69;
    String.append(_:)(v2);
    _print_unlocked<A, B>(_:_:)();
    v4[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000054, 0x800000023D9CBD90, 84, (uint64_t)v4, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
    LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t static HandPinchEvent.generateObjectInteractionStateEvent(hand:pinchFrameFeatures:timestamp:pinchSuppressionEvent:start:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W5>, char a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int16 v113;
  int v114;

  v104 = a5;
  v90 = a3;
  v91 = a4;
  v93 = a1;
  v10 = a2 + 488;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v95 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v94 = (uint64_t)&v89 - v16;
  v17 = type metadata accessor for CMTimeProtobuf(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v19);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HandEventCommon(0);
  v92 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = *(_QWORD *)(a2 + 400);
  v26 = *(_DWORD *)(a2 + 444);
  v99 = *(_QWORD *)(a2 + 480);
  LODWORD(v24) = *(unsigned __int8 *)(a2 + 488);
  v97 = v26;
  v98 = v24;
  v101 = *(_QWORD *)(a2 + 496);
  v100 = *(unsigned __int8 *)(v10 + 16);
  v103 = *(_QWORD *)(a2 + 512);
  v102 = *(unsigned __int8 *)(v10 + 32);
  UnknownStorage.init()();
  v27 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a7 + v27) = static HandPinchEvent._StorageClass.defaultInstance;
  if ((a6 & 1) != 0)
    v28 = 1;
  else
    v28 = 2;
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  *((_QWORD *)v25 + 2) = 0;
  v25[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v29 = (uint64_t)&v25[*(int *)(v22 + 32)];
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v30(v29, 1, 1, v17);
  UnknownStorage.init()();
  *(_QWORD *)v21 = v90;
  *((_DWORD *)v21 + 2) = v91;
  outlined destroy of Coordinate3DPB?(v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v21, v29, type metadata accessor for CMTimeProtobuf);
  v30(v29, 0, 1, v17);
  v31 = v93;
  *((_QWORD *)v25 + 2) = *(_QWORD *)(v93 + 144);
  v25[24] = *(_BYTE *)(v31 + 136);
  *(_QWORD *)v25 = v28;
  v25[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v32 = swift_retain();
    v33 = specialized HandPinchEvent._StorageClass.init(copying:)(v32);
    swift_release();
    *(_QWORD *)(a7 + v27) = v33;
    swift_release();
  }
  v34 = *(_QWORD *)(a7 + v27);
  v35 = v94;
  outlined init with take of Matrix2dPB((uint64_t)v25, v94, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56))(v35, 0, 1, v22);
  v36 = v95;
  outlined init with take of HandEventCommon?(v35, v95);
  v37 = v34
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v36, v37);
  swift_endAccess();
  swift_release();
  v38 = v96;
  if (*(_QWORD *)(v31 + 16))
  {
    v39 = *(_OWORD *)(v31 + 24);
    v40 = *(_OWORD *)(v31 + 40);
    v41 = *(_OWORD *)(v31 + 56);
    v42 = *(_OWORD *)(v31 + 72);
    v43 = *(_OWORD *)(v31 + 88);
    v44 = *(_OWORD *)(v31 + 104);
    v46 = *(_QWORD *)(v31 + 120);
    v45 = *(_QWORD *)(v31 + 128);
    v105 = *(_QWORD *)(v31 + 16);
    v106 = v39;
    v107 = v40;
    v108 = v41;
    v109 = v42;
    v110 = v43;
    v111 = v44;
    v112 = v46;
    v113 = v45 & 0x101;
    v114 = HIDWORD(v45);
    HandPose.getHoverDistanceVector()();
    v48 = vmulq_f32(v47, v47);
    v49 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      v51 = specialized HandPinchEvent._StorageClass.init(copying:)(v50);
      swift_release();
      *(_QWORD *)(a7 + v27) = v51;
      swift_release();
    }
    v52 = (float *)(*(_QWORD *)(a7 + v27)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    swift_beginAccess();
    *v52 = v49;
  }
  if ((*(_BYTE *)(v31 + 280) & 1) == 0)
  {
    v53 = *(_DWORD *)(v31 + 276);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v54 = swift_retain();
      v55 = specialized HandPinchEvent._StorageClass.init(copying:)(v54);
      swift_release();
      *(_QWORD *)(a7 + v27) = v55;
      swift_release();
    }
    v56 = (_DWORD *)(*(_QWORD *)(a7 + v27)
                   + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
    swift_beginAccess();
    *v56 = v53;
  }
  if ((*(_BYTE *)(v31 + 236) & 1) == 0)
  {
    v57 = *(_DWORD *)(v31 + 232);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v58 = swift_retain();
      v59 = specialized HandPinchEvent._StorageClass.init(copying:)(v58);
      swift_release();
      *(_QWORD *)(a7 + v27) = v59;
      swift_release();
    }
    v60 = (_DWORD *)(*(_QWORD *)(a7 + v27)
                   + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
    swift_beginAccess();
    *v60 = v57;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v61 = swift_retain();
    v62 = specialized HandPinchEvent._StorageClass.init(copying:)(v61);
    swift_release();
    *(_QWORD *)(a7 + v27) = v62;
    swift_release();
  }
  v63 = (_QWORD *)(*(_QWORD *)(a7 + v27)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  swift_beginAccess();
  *v63 = v38;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v64 = swift_retain();
    v65 = specialized HandPinchEvent._StorageClass.init(copying:)(v64);
    swift_release();
    *(_QWORD *)(a7 + v27) = v65;
    swift_release();
  }
  v66 = *(_QWORD *)(a7 + v27)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  swift_beginAccess();
  *(_DWORD *)v66 = v97;
  *(_BYTE *)(v66 + 4) = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v67 = swift_retain();
    v68 = specialized HandPinchEvent._StorageClass.init(copying:)(v67);
    swift_release();
    *(_QWORD *)(a7 + v27) = v68;
    swift_release();
  }
  v69 = *(_QWORD *)(a7 + v27)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason;
  swift_beginAccess();
  *(_QWORD *)v69 = v99;
  *(_WORD *)(v69 + 8) = v98;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v70 = swift_retain();
    v71 = specialized HandPinchEvent._StorageClass.init(copying:)(v70);
    swift_release();
    *(_QWORD *)(a7 + v27) = v71;
    swift_release();
  }
  v72 = *(_QWORD *)(a7 + v27)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  swift_beginAccess();
  *(_QWORD *)v72 = v101;
  *(_WORD *)(v72 + 8) = v100;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v73 = swift_retain();
    v74 = specialized HandPinchEvent._StorageClass.init(copying:)(v73);
    swift_release();
    *(_QWORD *)(a7 + v27) = v74;
    swift_release();
  }
  v75 = *(_QWORD *)(a7 + v27)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  swift_beginAccess();
  *(_QWORD *)v75 = v103;
  *(_BYTE *)(v75 + 8) = v102;
  *(_BYTE *)(v75 + 9) = 0;
  v76 = *(unsigned __int8 *)(v31 + 4);
  if (v76 == 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v77 = swift_retain();
      v78 = specialized HandPinchEvent._StorageClass.init(copying:)(v77);
      swift_release();
      *(_QWORD *)(a7 + v27) = v78;
      swift_release();
    }
    v79 = (_BYTE *)(*(_QWORD *)(a7 + v27)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v79 = 0;
  }
  else
  {
    v80 = v76 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v81 = swift_retain();
      v82 = specialized HandPinchEvent._StorageClass.init(copying:)(v81);
      swift_release();
      *(_QWORD *)(a7 + v27) = v82;
      swift_release();
    }
    v83 = (_BYTE *)(*(_QWORD *)(a7 + v27)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v83 = v80;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v84 = swift_retain();
    v85 = specialized HandPinchEvent._StorageClass.init(copying:)(v84);
    swift_release();
    *(_QWORD *)(a7 + v27) = v85;
    swift_release();
  }
  if ((v104 & 1) != 0)
    v86 = 5;
  else
    v86 = 6;
  v87 = *(_QWORD *)(a7 + v27)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
  result = swift_beginAccess();
  *(_QWORD *)v87 = v86;
  *(_BYTE *)(v87 + 8) = 1;
  return result;
}

uint64_t static HandPinchEvent.generatePinchEvent(hand:timestamp:occlusionMin:occlusionMax:uncertainty:pinchPostprocess:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  int v105;

  v94 = a6;
  v90 = a4;
  v91 = a5;
  v84 = a2;
  v85 = a3;
  v87 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v89 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v14);
  v88 = (uint64_t)&v83 - v15;
  v16 = type metadata accessor for CMTimeProtobuf(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for HandEventCommon(0);
  v86 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a7;
  v26 = a7[1];
  v27 = *((unsigned __int8 *)a7 + 8);
  v93 = *((_QWORD *)a7 + 2);
  v92 = *((unsigned __int8 *)a7 + 24);
  UnknownStorage.init()();
  v28 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a8 + v28) = static HandPinchEvent._StorageClass.defaultInstance;
  v95 = v27;
  if (v27)
    v29 = 1;
  else
    v29 = 2;
  v83 = v29;
  *(_QWORD *)v24 = 0;
  v24[8] = 1;
  *((_QWORD *)v24 + 2) = 0;
  v24[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v30 = (uint64_t)&v24[*(int *)(v21 + 32)];
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v31(v30, 1, 1, v16);
  UnknownStorage.init()();
  *(_QWORD *)v20 = v84;
  *((_DWORD *)v20 + 2) = v85;
  outlined destroy of Coordinate3DPB?(v30, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v20, v30, type metadata accessor for CMTimeProtobuf);
  v31(v30, 0, 1, v16);
  v32 = v87;
  *((_QWORD *)v24 + 2) = *(_QWORD *)(v87 + 144);
  v24[24] = *(_BYTE *)(v32 + 136);
  *(_QWORD *)v24 = v83;
  v24[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v33 = swift_retain();
    v34 = specialized HandPinchEvent._StorageClass.init(copying:)(v33);
    swift_release();
    *(_QWORD *)(a8 + v28) = v34;
    swift_release();
  }
  v35 = *(_QWORD *)(a8 + v28);
  v36 = (uint64_t)v24;
  v37 = v88;
  outlined init with take of Matrix2dPB(v36, v88, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56))(v37, 0, 1, v21);
  v38 = v89;
  outlined init with take of HandEventCommon?(v37, v89);
  v39 = v35
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v38, v39);
  swift_endAccess();
  swift_release();
  v40 = v95;
  v41 = v94;
  if (*(_QWORD *)(v32 + 16))
  {
    v42 = *(_OWORD *)(v32 + 24);
    v43 = *(_OWORD *)(v32 + 40);
    v44 = *(_OWORD *)(v32 + 56);
    v45 = *(_OWORD *)(v32 + 72);
    v46 = *(_OWORD *)(v32 + 88);
    v47 = *(_OWORD *)(v32 + 104);
    v49 = *(_QWORD *)(v32 + 120);
    v48 = *(_QWORD *)(v32 + 128);
    v96 = *(_QWORD *)(v32 + 16);
    v97 = v42;
    v98 = v43;
    v99 = v44;
    v100 = v45;
    v101 = v46;
    v102 = v47;
    v103 = v49;
    v104 = v48 & 0x101;
    v105 = HIDWORD(v48);
    HandPose.getHoverDistanceVector()();
    v51 = vmulq_f32(v50, v50);
    v52 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v53 = swift_retain();
      v54 = specialized HandPinchEvent._StorageClass.init(copying:)(v53);
      swift_release();
      *(_QWORD *)(a8 + v28) = v54;
      swift_release();
    }
    v55 = (float *)(*(_QWORD *)(a8 + v28)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    swift_beginAccess();
    *v55 = v52;
  }
  v56 = v90;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v57 = swift_retain();
    v58 = specialized HandPinchEvent._StorageClass.init(copying:)(v57);
    swift_release();
    *(_QWORD *)(a8 + v28) = v58;
    swift_release();
  }
  v59 = (_QWORD *)(*(_QWORD *)(a8 + v28)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin);
  swift_beginAccess();
  *v59 = v56;
  swift_bridgeObjectRelease();
  v60 = v91;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v61 = swift_retain();
    v62 = specialized HandPinchEvent._StorageClass.init(copying:)(v61);
    swift_release();
    *(_QWORD *)(a8 + v28) = v62;
    swift_release();
  }
  v63 = (_QWORD *)(*(_QWORD *)(a8 + v28)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  swift_beginAccess();
  *v63 = v60;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v64 = swift_retain();
    v65 = specialized HandPinchEvent._StorageClass.init(copying:)(v64);
    swift_release();
    *(_QWORD *)(a8 + v28) = v65;
    swift_release();
  }
  v66 = (_QWORD *)(*(_QWORD *)(a8 + v28)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty);
  swift_beginAccess();
  *v66 = v41;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v67 = swift_retain();
    v68 = specialized HandPinchEvent._StorageClass.init(copying:)(v67);
    swift_release();
    *(_QWORD *)(a8 + v28) = v68;
    swift_release();
  }
  v69 = *(_QWORD *)(a8 + v28)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
  swift_beginAccess();
  *(_QWORD *)v69 = v93;
  *(_WORD *)(v69 + 8) = v92;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v70 = swift_retain();
    v71 = specialized HandPinchEvent._StorageClass.init(copying:)(v70);
    swift_release();
    *(_QWORD *)(a8 + v28) = v71;
    swift_release();
  }
  v72 = (_DWORD *)(*(_QWORD *)(a8 + v28)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
  swift_beginAccess();
  *v72 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v73 = swift_retain();
    v74 = specialized HandPinchEvent._StorageClass.init(copying:)(v73);
    swift_release();
    *(_QWORD *)(a8 + v28) = v74;
    swift_release();
  }
  v75 = (_DWORD *)(*(_QWORD *)(a8 + v28)
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
  swift_beginAccess();
  *v75 = v25;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v76 = swift_retain();
    v77 = specialized HandPinchEvent._StorageClass.init(copying:)(v76);
    swift_release();
    *(_QWORD *)(a8 + v28) = v77;
    swift_release();
  }
  v78 = (_BYTE *)(*(_QWORD *)(a8 + v28)
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
  swift_beginAccess();
  *v78 = v40;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v79 = swift_retain();
    v80 = specialized HandPinchEvent._StorageClass.init(copying:)(v79);
    swift_release();
    *(_QWORD *)(a8 + v28) = v80;
    swift_release();
  }
  v81 = *(_QWORD *)(a8 + v28)
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
  result = swift_beginAccess();
  *(_QWORD *)v81 = 0;
  *(_BYTE *)(v81 + 8) = 1;
  return result;
}

uint64_t static HandPinchEvent.generateRepetitiveInteractionPinchEvent(hand:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  int v67;

  v54 = a3;
  v53 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v57 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v56 = (uint64_t)&v53 - v11;
  v12 = type metadata accessor for CMTimeProtobuf(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HandEventCommon(0);
  v55 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v21 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a4 + v21) = static HandPinchEvent._StorageClass.defaultInstance;
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *((_QWORD *)v20 + 2) = 0;
  v20[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v22 = (uint64_t)&v20[*(int *)(v17 + 32)];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v23(v22, 1, 1, v12);
  UnknownStorage.init()();
  *(_QWORD *)v16 = v53;
  *((_DWORD *)v16 + 2) = v54;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v16, v22, type metadata accessor for CMTimeProtobuf);
  v23(v22, 0, 1, v12);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(a1 + 144);
  v20[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v20 = 1;
  v20[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    v25 = specialized HandPinchEvent._StorageClass.init(copying:)(v24);
    swift_release();
    *(_QWORD *)(a4 + v21) = v25;
    swift_release();
  }
  v26 = *(_QWORD *)(a4 + v21);
  v27 = v56;
  outlined init with take of Matrix2dPB((uint64_t)v20, v56, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v27, 0, 1, v17);
  v28 = v57;
  outlined init with take of HandEventCommon?(v27, v57);
  v29 = v26
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v28, v29);
  swift_endAccess();
  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
  {
    v31 = *(_OWORD *)(a1 + 24);
    v32 = *(_OWORD *)(a1 + 40);
    v33 = *(_OWORD *)(a1 + 56);
    v34 = *(_OWORD *)(a1 + 72);
    v35 = *(_OWORD *)(a1 + 88);
    v36 = *(_OWORD *)(a1 + 104);
    v38 = *(_QWORD *)(a1 + 120);
    v37 = *(_QWORD *)(a1 + 128);
    v58 = *(_QWORD *)(a1 + 16);
    v59 = v31;
    v60 = v32;
    v61 = v33;
    v62 = v34;
    v63 = v35;
    v64 = v36;
    v65 = v38;
    v66 = v37 & 0x101;
    v67 = HIDWORD(v37);
    HandPose.getHoverDistanceVector()();
    v40 = vmulq_f32(v39, v39);
    v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v42 = swift_retain();
      v43 = specialized HandPinchEvent._StorageClass.init(copying:)(v42);
      swift_release();
      *(_QWORD *)(a4 + v21) = v43;
      swift_release();
    }
    v44 = (float *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    result = swift_beginAccess();
    *v44 = v41;
  }
  v45 = *(unsigned __int8 *)(a1 + 4);
  if (v45 == 2)
  {
    __break(1u);
  }
  else
  {
    v46 = v45 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v47 = swift_retain();
      v48 = specialized HandPinchEvent._StorageClass.init(copying:)(v47);
      swift_release();
      *(_QWORD *)(a4 + v21) = v48;
      swift_release();
    }
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v49 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      v51 = specialized HandPinchEvent._StorageClass.init(copying:)(v50);
      swift_release();
      *(_QWORD *)(a4 + v21) = v51;
      swift_release();
    }
    v52 = *(_QWORD *)(a4 + v21)
        + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
    result = swift_beginAccess();
    *(_QWORD *)v52 = 1;
    *(_BYTE *)(v52 + 8) = 1;
  }
  return result;
}

uint64_t static HandPinchEvent.generatePinchCancellationEvent(hand:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  int v67;

  v54 = a3;
  v53 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v57 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v56 = (uint64_t)&v53 - v11;
  v12 = type metadata accessor for CMTimeProtobuf(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HandEventCommon(0);
  v55 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v21 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a4 + v21) = static HandPinchEvent._StorageClass.defaultInstance;
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *((_QWORD *)v20 + 2) = 0;
  v20[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v22 = (uint64_t)&v20[*(int *)(v17 + 32)];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v23(v22, 1, 1, v12);
  UnknownStorage.init()();
  *(_QWORD *)v16 = v53;
  *((_DWORD *)v16 + 2) = v54;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v16, v22, type metadata accessor for CMTimeProtobuf);
  v23(v22, 0, 1, v12);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(a1 + 144);
  v20[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v20 = 1;
  v20[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    v25 = specialized HandPinchEvent._StorageClass.init(copying:)(v24);
    swift_release();
    *(_QWORD *)(a4 + v21) = v25;
    swift_release();
  }
  v26 = *(_QWORD *)(a4 + v21);
  v27 = v56;
  outlined init with take of Matrix2dPB((uint64_t)v20, v56, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v27, 0, 1, v17);
  v28 = v57;
  outlined init with take of HandEventCommon?(v27, v57);
  v29 = v26
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v28, v29);
  swift_endAccess();
  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
  {
    v31 = *(_OWORD *)(a1 + 24);
    v32 = *(_OWORD *)(a1 + 40);
    v33 = *(_OWORD *)(a1 + 56);
    v34 = *(_OWORD *)(a1 + 72);
    v35 = *(_OWORD *)(a1 + 88);
    v36 = *(_OWORD *)(a1 + 104);
    v38 = *(_QWORD *)(a1 + 120);
    v37 = *(_QWORD *)(a1 + 128);
    v58 = *(_QWORD *)(a1 + 16);
    v59 = v31;
    v60 = v32;
    v61 = v33;
    v62 = v34;
    v63 = v35;
    v64 = v36;
    v65 = v38;
    v66 = v37 & 0x101;
    v67 = HIDWORD(v37);
    HandPose.getHoverDistanceVector()();
    v40 = vmulq_f32(v39, v39);
    v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v42 = swift_retain();
      v43 = specialized HandPinchEvent._StorageClass.init(copying:)(v42);
      swift_release();
      *(_QWORD *)(a4 + v21) = v43;
      swift_release();
    }
    v44 = (float *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    result = swift_beginAccess();
    *v44 = v41;
  }
  v45 = *(unsigned __int8 *)(a1 + 4);
  if (v45 == 2)
  {
    __break(1u);
  }
  else
  {
    v46 = v45 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v47 = swift_retain();
      v48 = specialized HandPinchEvent._StorageClass.init(copying:)(v47);
      swift_release();
      *(_QWORD *)(a4 + v21) = v48;
      swift_release();
    }
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v49 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      v51 = specialized HandPinchEvent._StorageClass.init(copying:)(v50);
      swift_release();
      *(_QWORD *)(a4 + v21) = v51;
      swift_release();
    }
    v52 = *(_QWORD *)(a4 + v21)
        + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
    result = swift_beginAccess();
    *(_QWORD *)v52 = 2;
    *(_BYTE *)(v52 + 8) = 1;
  }
  return result;
}

uint64_t static HandPinchEvent.generateDoublePinchRecoveryEvent(hand:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  int v67;

  v54 = a3;
  v53 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v57 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v56 = (uint64_t)&v53 - v11;
  v12 = type metadata accessor for CMTimeProtobuf(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HandEventCommon(0);
  v55 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v21 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a4 + v21) = static HandPinchEvent._StorageClass.defaultInstance;
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *((_QWORD *)v20 + 2) = 0;
  v20[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v22 = (uint64_t)&v20[*(int *)(v17 + 32)];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v23(v22, 1, 1, v12);
  UnknownStorage.init()();
  *(_QWORD *)v16 = v53;
  *((_DWORD *)v16 + 2) = v54;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v16, v22, type metadata accessor for CMTimeProtobuf);
  v23(v22, 0, 1, v12);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(a1 + 144);
  v20[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v20 = 1;
  v20[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    v25 = specialized HandPinchEvent._StorageClass.init(copying:)(v24);
    swift_release();
    *(_QWORD *)(a4 + v21) = v25;
    swift_release();
  }
  v26 = *(_QWORD *)(a4 + v21);
  v27 = v56;
  outlined init with take of Matrix2dPB((uint64_t)v20, v56, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v27, 0, 1, v17);
  v28 = v57;
  outlined init with take of HandEventCommon?(v27, v57);
  v29 = v26
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v28, v29);
  swift_endAccess();
  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
  {
    v31 = *(_OWORD *)(a1 + 24);
    v32 = *(_OWORD *)(a1 + 40);
    v33 = *(_OWORD *)(a1 + 56);
    v34 = *(_OWORD *)(a1 + 72);
    v35 = *(_OWORD *)(a1 + 88);
    v36 = *(_OWORD *)(a1 + 104);
    v38 = *(_QWORD *)(a1 + 120);
    v37 = *(_QWORD *)(a1 + 128);
    v58 = *(_QWORD *)(a1 + 16);
    v59 = v31;
    v60 = v32;
    v61 = v33;
    v62 = v34;
    v63 = v35;
    v64 = v36;
    v65 = v38;
    v66 = v37 & 0x101;
    v67 = HIDWORD(v37);
    HandPose.getHoverDistanceVector()();
    v40 = vmulq_f32(v39, v39);
    v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v42 = swift_retain();
      v43 = specialized HandPinchEvent._StorageClass.init(copying:)(v42);
      swift_release();
      *(_QWORD *)(a4 + v21) = v43;
      swift_release();
    }
    v44 = (float *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    result = swift_beginAccess();
    *v44 = v41;
  }
  v45 = *(unsigned __int8 *)(a1 + 4);
  if (v45 == 2)
  {
    __break(1u);
  }
  else
  {
    v46 = v45 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v47 = swift_retain();
      v48 = specialized HandPinchEvent._StorageClass.init(copying:)(v47);
      swift_release();
      *(_QWORD *)(a4 + v21) = v48;
      swift_release();
    }
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v49 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      v51 = specialized HandPinchEvent._StorageClass.init(copying:)(v50);
      swift_release();
      *(_QWORD *)(a4 + v21) = v51;
      swift_release();
    }
    v52 = *(_QWORD *)(a4 + v21)
        + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
    result = swift_beginAccess();
    *(_QWORD *)v52 = 4;
    *(_BYTE *)(v52 + 8) = 1;
  }
  return result;
}

uint64_t static HandPinchEvent.generateSelectionRecoveryInBreakEvent(hand:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int16 v74;
  int v75;

  v62 = a3;
  v61 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v65 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v64 = (uint64_t)&v61 - v11;
  v12 = type metadata accessor for CMTimeProtobuf(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HandEventCommon(0);
  v63 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v21 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a4 + v21) = static HandPinchEvent._StorageClass.defaultInstance;
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *((_QWORD *)v20 + 2) = 0;
  v20[24] = 0;
  swift_retain();
  UnknownStorage.init()();
  v22 = (uint64_t)&v20[*(int *)(v17 + 32)];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v23(v22, 1, 1, v12);
  UnknownStorage.init()();
  *(_QWORD *)v16 = v61;
  *((_DWORD *)v16 + 2) = v62;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v16, v22, type metadata accessor for CMTimeProtobuf);
  v23(v22, 0, 1, v12);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(a1 + 144);
  v20[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v20 = 1;
  v20[8] = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    v25 = specialized HandPinchEvent._StorageClass.init(copying:)(v24);
    swift_release();
    *(_QWORD *)(a4 + v21) = v25;
    swift_release();
  }
  v26 = *(_QWORD *)(a4 + v21);
  v27 = v64;
  outlined init with take of Matrix2dPB((uint64_t)v20, v64, type metadata accessor for HandEventCommon);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v27, 0, 1, v17);
  v28 = v65;
  outlined init with take of HandEventCommon?(v27, v65);
  v29 = v26
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HandEventCommon?(v28, v29);
  swift_endAccess();
  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
  {
    v31 = *(_OWORD *)(a1 + 24);
    v32 = *(_OWORD *)(a1 + 40);
    v33 = *(_OWORD *)(a1 + 56);
    v34 = *(_OWORD *)(a1 + 72);
    v35 = *(_OWORD *)(a1 + 88);
    v36 = *(_OWORD *)(a1 + 104);
    v38 = *(_QWORD *)(a1 + 120);
    v37 = *(_QWORD *)(a1 + 128);
    v66 = *(_QWORD *)(a1 + 16);
    v67 = v31;
    v68 = v32;
    v69 = v33;
    v70 = v34;
    v71 = v35;
    v72 = v36;
    v73 = v38;
    v74 = v37 & 0x101;
    v75 = HIDWORD(v37);
    HandPose.getHoverDistanceVector()();
    v40 = vmulq_f32(v39, v39);
    v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v42 = swift_retain();
      v43 = specialized HandPinchEvent._StorageClass.init(copying:)(v42);
      swift_release();
      *(_QWORD *)(a4 + v21) = v43;
      swift_release();
    }
    v44 = (float *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    result = swift_beginAccess();
    *v44 = v41;
  }
  if ((*(_BYTE *)(a1 + 280) & 1) == 0)
  {
    v45 = *(_DWORD *)(a1 + 276);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v46 = swift_retain();
      v47 = specialized HandPinchEvent._StorageClass.init(copying:)(v46);
      swift_release();
      *(_QWORD *)(a4 + v21) = v47;
      swift_release();
    }
    v48 = (_DWORD *)(*(_QWORD *)(a4 + v21)
                   + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
    result = swift_beginAccess();
    *v48 = v45;
  }
  if ((*(_BYTE *)(a1 + 236) & 1) == 0)
  {
    v49 = *(_DWORD *)(a1 + 232);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      v51 = specialized HandPinchEvent._StorageClass.init(copying:)(v50);
      swift_release();
      *(_QWORD *)(a4 + v21) = v51;
      swift_release();
    }
    v52 = (_DWORD *)(*(_QWORD *)(a4 + v21)
                   + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
    result = swift_beginAccess();
    *v52 = v49;
  }
  v53 = *(unsigned __int8 *)(a1 + 4);
  if (v53 == 2)
  {
    __break(1u);
  }
  else
  {
    v54 = v53 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v55 = swift_retain();
      v56 = specialized HandPinchEvent._StorageClass.init(copying:)(v55);
      swift_release();
      *(_QWORD *)(a4 + v21) = v56;
      swift_release();
    }
    v57 = (_BYTE *)(*(_QWORD *)(a4 + v21)
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    *v57 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandPinchEvent._StorageClass(0);
      swift_allocObject();
      v58 = swift_retain();
      v59 = specialized HandPinchEvent._StorageClass.init(copying:)(v58);
      swift_release();
      *(_QWORD *)(a4 + v21) = v59;
      swift_release();
    }
    v60 = *(_QWORD *)(a4 + v21)
        + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
    result = swift_beginAccess();
    *(_QWORD *)v60 = 3;
    *(_BYTE *)(v60 + 8) = 1;
  }
  return result;
}

uint64_t static HandCameraTransitionEvent.generateTransitionEvent(hand:timestamp:prevCams:curCams:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v30 = a5;
  v27 = a2;
  v28 = a3;
  v8 = type metadata accessor for CMTimeProtobuf(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HandEventCommon(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BEE4AF8];
  *a6 = MEMORY[0x24BEE4AF8];
  a6[1] = v18;
  v19 = type metadata accessor for HandCameraTransitionEvent(0);
  UnknownStorage.init()();
  v20 = (uint64_t)a6 + *(int *)(v19 + 28);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v21(v20, 1, 1, v13);
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  *((_QWORD *)v17 + 2) = 0;
  v17[24] = 0;
  UnknownStorage.init()();
  v22 = (uint64_t)&v17[*(int *)(v13 + 32)];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v23(v22, 1, 1, v8);
  UnknownStorage.init()();
  *(_QWORD *)v12 = v27;
  *((_DWORD *)v12 + 2) = v28;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v12, v22, type metadata accessor for CMTimeProtobuf);
  v23(v22, 0, 1, v8);
  *((_QWORD *)v17 + 2) = *(_QWORD *)(a1 + 144);
  v17[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  outlined destroy of Coordinate3DPB?(v20, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v17, v20, type metadata accessor for HandEventCommon);
  v21(v20, 0, 1, v13);
  v24 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a6 = v24;
  v25 = v30;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a6[1] = v25;
  return result;
}

uint64_t static HandCursorEvent.generateEvent(hand:timestamp:middleHover:middleDoubleTapState:doubleTapDetected:activeSuppressors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>, float a8@<S0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  v32 = a6;
  v30 = a5;
  v31 = a4;
  v28 = a2;
  v29 = a3;
  v11 = type metadata accessor for CMTimeProtobuf(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for HandEventCommon(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 4) = 0;
  *(_QWORD *)(a7 + 16) = MEMORY[0x24BEE4AF8];
  v21 = type metadata accessor for HandCursorEvent(0);
  UnknownStorage.init()();
  v22 = a7 + *(int *)(v21 + 36);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v23(v22, 1, 1, v16);
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *((_QWORD *)v20 + 2) = 0;
  v20[24] = 0;
  UnknownStorage.init()();
  v24 = (uint64_t)&v20[*(int *)(v16 + 32)];
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v25(v24, 1, 1, v11);
  UnknownStorage.init()();
  *(_QWORD *)v15 = v28;
  *((_DWORD *)v15 + 2) = v29;
  outlined destroy of Coordinate3DPB?(v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v15, v24, type metadata accessor for CMTimeProtobuf);
  v25(v24, 0, 1, v11);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(a1 + 144);
  v20[24] = *(_BYTE *)(a1 + 136);
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v20, v22, type metadata accessor for HandEventCommon);
  v23(v22, 0, 1, v16);
  *(_BYTE *)a7 = v30;
  *(float *)(a7 + 4) = a8;
  *(_DWORD *)(a7 + 8) = v31;
  v26 = v32;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a7 + 16) = v26;
  return result;
}

uint64_t outlined init with take of HandEventCommon?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of HandEventCommon?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of HandsKitPipelineProtocol.run(withInput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of HandsKitPipelineProtocol.setInitialState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of HandsKitPipelineProtocol.reconfig(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t closure #1 in static PinchPreprocessing.createNormalizedPoseFeatureVectorWithRefTransform(input:modelParams:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  __int32 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  float32x4_t v30;
  __int32 v31;
  simd_float4 v32;
  simd_float4 v33;
  uint64_t v34;
  simd_float4 v35;
  simd_float4 v36;
  __int128 v37;
  uint64_t v38;
  simd_float4x4 v39;

  if (result)
  {
    v6 = result;
    v39 = __invert_f4(*(simd_float4x4 *)(a3 + 48));
    v35 = v39.columns[1];
    v36 = v39.columns[0];
    v32 = v39.columns[3];
    v33 = v39.columns[2];
    specialized static HandsKitUtils.extractLegacyJoints(_:)(*(_QWORD *)(a3 + 8));
    v8 = v7;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v38 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      v11 = v38;
      v12 = *(_QWORD *)(v38 + 16);
      v13 = 48;
      v15 = (float32x4_t)v35;
      v14 = (float32x4_t)v36;
      v17 = (float32x4_t)v32;
      v16 = (float32x4_t)v33;
      do
      {
        v18 = *(float32x4_t *)(v8 + v13);
        v19 = *(_QWORD *)(v38 + 24);
        if (v12 >= v19 >> 1)
        {
          v30 = *(float32x4_t *)(v8 + v13);
          v31 = v10;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v12 + 1, 1);
          v18 = v30;
          v10 = v31;
          v17 = (float32x4_t)v32;
          v16 = (float32x4_t)v33;
          v15 = (float32x4_t)v35;
          v14 = (float32x4_t)v36;
        }
        v20 = vaddq_f32(v17, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v18.f32[0]), v15, *(float32x2_t *)v18.f32, 1), v16, v18, 2));
        v20.i32[3] = v10;
        *(_QWORD *)(v38 + 16) = v12 + 1;
        *(float32x4_t *)(v38 + 16 * v12 + 32) = v20;
        v13 += 32;
        ++v12;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v38 + 16);
      if (!v21)
        goto LABEL_18;
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
      v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v21)
      {
LABEL_18:
        swift_bridgeObjectRelease();
        return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_createGeometricPoseFeatureForPR_, v6);
      }
    }
    result = swift_bridgeObjectRetain();
    v22 = 0;
    v34 = v6;
    v23 = (_DWORD *)(v6 + 8);
    while (1)
    {
      v24 = *(_OWORD *)(v11 + 16 * v22 + 32);
      *((_QWORD *)v23 - 1) = v24;
      if (v22 == 0x2AAAAAAAAAAAAAAALL)
        break;
      v37 = v24;
      *v23 = DWORD2(v24);
      v25 = *a4;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v25;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1, (char *)v25);
        v25 = result;
        *a4 = result;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      v28 = v37;
      if (v27 >= v26 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, (char *)v25);
        v28 = v37;
        v25 = result;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      v29 = v25 + 12 * v27;
      *(_QWORD *)(v29 + 32) = v28;
      ++v22;
      *(_DWORD *)(v29 + 40) = DWORD2(v28);
      *a4 = v25;
      v23 += 3;
      if (v21 == v22)
      {
        swift_bridgeObjectRelease();
        v6 = v34;
        goto LABEL_18;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for PinchPreprocessing()
{
  return objc_opt_self();
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Data.InlineSlice.ensureUniqueReference()();
  v6 = *a1;
  v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v9 = v8;
  v10 = __DataStorage._offset.getter();
  v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = v7 - v6;
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  closure #1 in static PinchPreprocessing.createNormalizedPoseFeatureVectorWithRefTransform(input:modelParams:)(v9 + v11, v9 + v11 + v14, a2, a3);
  outlined release of HandPose(a2);
}

uint64_t specialized static PinchPreprocessing.createNormalizedPoseFeatureVectorWithRefTransform(input:modelParams:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 120);
    v1 = *(_QWORD *)(a1 + 128);
    v4 = *(_OWORD *)(a1 + 80);
    v3 = *(_OWORD *)(a1 + 96);
    v6 = *(_OWORD *)(a1 + 48);
    v5 = *(_OWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 112);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = v8;
    v18 = v7;
    v19 = v6;
    v20 = v5;
    v21 = v4;
    v22 = v3;
    v23 = v9;
    v24 = v2;
    v25 = v1 & 0x101;
    v26 = HIDWORD(v1);
    v12 = MEMORY[0x24BEE4AF8];
    type metadata accessor for __DataStorage();
    swift_allocObject();
    *(_QWORD *)&v13 = 0x10000000000;
    *((_QWORD *)&v13 + 1) = __DataStorage.init(length:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v13, (uint64_t)&v16, &v12);
    v10 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    *((_QWORD *)&v18 + 1) = MEMORY[0x24BEE0D00];
    v16 = 0xD000000000000017;
    v17 = 0x800000023D9CBE90;
    type metadata accessor for HandyLoggerNeo();
    v13 = xmmword_23D9A9550;
    v14 = 0;
    v15 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v13, 0xD000000000000077, 0x800000023D9CBE10, 35, (uint64_t)&v16, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v16);
    return 0;
  }
  return v10;
}

_QWORD *specialized static PinchPreprocessing.generateInferenceInput(_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;

  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 116));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (unint64_t *)(v10 + 40);
    while (1)
    {
      v13 = *v12;
      v12 += 2;
      if (v13 >> 60 == 15)
        break;
      if (!--v11)
        goto LABEL_5;
    }
    lazy protocol witness table accessor for type PinchPipelineError and conformance PinchPipelineError();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
  }
  else
  {
LABEL_5:
    type metadata accessor for PinchModelInput();
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = a2;
    v5[3] = a3;
    v5[4] = v10;
    v5[5] = a4;
    v5[6] = a5;
    outlined copy of Data._Representation(a2, a3);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(a4, a5);
  }
  return v5;
}

uint64_t type metadata accessor for SceneSegmentationProcessingUtils()
{
  return objc_opt_self();
}

int8x8_t specialized static SceneSegmentationProcessingUtils.deviceCoordsToMetricDepthCoordinate(_:_:_:)(uint64_t a1, float32x4_t a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, simd_float4 a6)
{
  int32x2_t v7;
  int32x4_t v8;
  simd_float4x4 v15;
  simd_float4x4 v16;

  v15.columns[0] = a3;
  v15.columns[1] = a4;
  v15.columns[2] = a5;
  v15.columns[3] = a6;
  v16 = __invert_f4(v15);
  v7.i32[0] = 0;
  v8 = vzip1q_s32((int32x4_t)v16.columns[0], (int32x4_t)v16.columns[2]);
  v16.columns[0] = (simd_float4)vzip2q_s32((int32x4_t)v16.columns[0], (int32x4_t)v16.columns[2]);
  v16.columns[2] = (simd_float4)vzip1q_s32((int32x4_t)v16.columns[1], (int32x4_t)v16.columns[3]);
  v16.columns[1] = (simd_float4)vzip2q_s32((int32x4_t)v16.columns[1], (int32x4_t)v16.columns[3]);
  v16.columns[0] = (simd_float4)vaddq_f32((float32x4_t)vzip2q_s32((int32x4_t)v16.columns[0], (int32x4_t)v16.columns[1]), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v8, (int32x4_t)v16.columns[2]), a2.f32[0]), (float32x4_t)vzip2q_s32(v8, (int32x4_t)v16.columns[2]), *(float32x2_t *)a2.f32, 1), (float32x4_t)vzip1q_s32((int32x4_t)v16.columns[0], (int32x4_t)v16.columns[1]), a2, 2));
  *(int32x2_t *)v16.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)(a1 + 48), 0);
  *(float32x2_t *)v16.columns[0].f32 = vadd_f32(*(float32x2_t *)(a1 + 40), vdiv_f32(vdiv_f32(*(float32x2_t *)v16.columns[0].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)v16.columns[0], 2)), *(float32x2_t *)v16.columns[1].f32));
  v16.columns[1].i32[0] = (~v16.columns[0].i32[0] | ~v16.columns[0].i32[1]) & 0x7F800000;
  __asm { FMOV            V2.2S, #-1.0 }
  return vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v16.columns[1].f32, v7), 0), *(int8x8_t *)v16.columns[2].f32, *(int8x8_t *)v16.columns[0].f32);
}

void specialized static SceneSegmentationProcessingUtils.get3DPointsDepth(_:_:_:top:bottom:left:right:)(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  int v33;
  uint64_t v35;
  unint64_t v36;
  float __A;
  uint64_t v38;

  v8 = a7;
  v10 = a5;
  v38 = *MEMORY[0x24BDAC8D0];
  if (a5 < 0)
  {
    v10 = *(_QWORD *)a1;
    if ((a7 & 0x8000000000000000) == 0)
      goto LABEL_3;
  }
  else if ((a7 & 0x8000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(a1 + 8);
LABEL_3:
  __A = 1000000.0;
  v15 = v8 - a6;
  if (__OFSUB__(v8, a6))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v16 = v10 - a4;
  if (__OFSUB__(v10, a4))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v17 = v15 * v16;
  if ((unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v7 = *a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2), 0, v7);
  *a3 = v7;
  vDSP_vfill(&__A, (float *)v7 + 8, 1, v17);
  if (v10 < a4)
    goto LABEL_62;
  if (v10 == a4)
    return;
  if (v8 >= a6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
LABEL_13:
  v18 = *(float *)(a1 + 52);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = a4;
  do
  {
    if (v20 >= v10)
      goto LABEL_51;
    v21 = roundf(v18 * (float)v20);
    if ((~LODWORD(v21) & 0x7F800000) == 0)
      goto LABEL_52;
    if (v21 <= -9.2234e18)
      goto LABEL_53;
    if (v21 >= 9.2234e18)
      goto LABEL_54;
    v22 = (uint64_t)v21 * v19;
    if ((unsigned __int128)((uint64_t)v21 * (__int128)v19) >> 64 != v22 >> 63)
      goto LABEL_55;
    v23 = v20 - a4;
    if (__OFSUB__(v20, a4))
      goto LABEL_56;
    v24 = v23 * v15;
    if ((unsigned __int128)(v23 * (__int128)v15) >> 64 != (v23 * v15) >> 63)
      goto LABEL_57;
    if (v8 != a6)
    {
      if (v8 > a6)
      {
        v25 = *(float *)(a1 + 56);
        v26 = a6;
        while (1)
        {
          v27 = roundf(v25 * (float)v26);
          if ((~LODWORD(v27) & 0x7F800000) == 0)
            break;
          if (v27 <= -9.2234e18)
            goto LABEL_44;
          if (v27 >= 9.2234e18)
            goto LABEL_45;
          if (__OFADD__((uint64_t)v27, v22))
            goto LABEL_46;
          _H3 = *(_WORD *)(a2 + 2 * ((uint64_t)v27 + v22));
          __asm { FCVT            S3, H3 }
          v33 = (_S3 >> 23);
          if (v33 != 255 && (v33 | _S3 & 0x7FFFFF) != 0)
          {
            v35 = v26 - a6;
            if (__OFSUB__(v26, a6))
              goto LABEL_47;
            _VF = __OFADD__(v24, v35);
            v36 = v24 + v35;
            if (_VF)
              goto LABEL_48;
            if ((v36 & 0x8000000000000000) != 0)
              goto LABEL_49;
            if (v36 >= *((_QWORD *)v7 + 2))
              goto LABEL_50;
            *(_DWORD *)&v7[4 * v36 + 32] = _S3;
          }
          if (v8 == ++v26)
            goto LABEL_14;
        }
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
      }
      __break(1u);
      goto LABEL_59;
    }
LABEL_14:
    ++v20;
  }
  while (v20 != v10);
  *a3 = v7;
}

uint64_t specialized static SceneSegmentationProcessingUtils.simd_float4x4_as_float_array(_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  __n128 v15;
  __n128 v20;
  uint64_t v21;

  v21 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0);
  v5 = a1;
  v4 = a2;
  v7 = a3;
  v6 = a4;
  v8 = 0;
  result = v21;
  while (1)
  {
    v10 = v8 >> 2;
    v11 = v7;
    if (v8 >> 2 != 2)
    {
      v11 = v4;
      if (v10 != 1)
      {
        v11 = v5;
        if (v10)
        {
          v11 = v6;
          if ((v8 & 0x7FFFFFFFFFFFFFFCLL) != 0xC)
            break;
        }
      }
    }
    v21 = result;
    v13 = *(_QWORD *)(result + 16);
    v12 = *(_QWORD *)(result + 24);
    if (v13 >= v12 >> 1)
    {
      v15 = v11;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v11 = v15;
      v5 = a1;
      v4 = a2;
      v7 = a3;
      v6 = a4;
      result = v21;
    }
    v20 = v11;
    v14 = *(_DWORD *)((unint64_t)&v20 | (4 * (v8 & 3)));
    *(_QWORD *)(result + 16) = v13 + 1;
    *(_DWORD *)(result + 4 * v13 + 32) = v14;
    if (++v8 == 16)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized static SceneSegmentationProcessingUtils.calculateDistance(xCoord:yCoord:zCoord:targetPoint:distances:tempBuffer:usingSquaredDistance:)(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, char **a5, char a6, __n128 a7)
{
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  vDSP_Length v11;
  char *v12;
  char *v13;
  char *v14;
  vDSP_Length v15;
  char *v16;
  char *v17;
  vDSP_Length v18;
  char *v19;
  char *v20;
  uint64_t result;
  char *v22;
  char v23;
  float __B;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *a4;
  if (v11 == *((_QWORD *)*a4 + 2))
  {
    v8 = a5;
    v9 = a3;
    v10 = a2;
    v7 = a1;
    v23 = a6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
LABEL_3:
  __B = -a7.n128_f32[0];
  vDSP_vsadd((const float *)(v7 + 32), 1, &__B, (float *)v12 + 8, 1, v11);
  swift_bridgeObjectRetain();
  v13 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2), 0, v12);
  vDSP_vsq((const float *)v12 + 8, 1, (float *)v13 + 8, 1, v11);
  swift_bridgeObjectRelease();
  v14 = *v8;
  v15 = *((_QWORD *)*v8 + 2);
  if (*(_QWORD *)(v10 + 16) == v15)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    __break(1u);
  }
  v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
LABEL_7:
  __B = -a7.n128_f32[1];
  vDSP_vsadd((const float *)(v10 + 32), 1, &__B, (float *)v14 + 8, 1, v15);
  swift_bridgeObjectRetain();
  v16 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2), 0, v14);
  vDSP_vsq((const float *)v14 + 8, 1, (float *)v16 + 8, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2), 0, v13);
  vDSP_vadd((const float *)v16 + 8, 1, (const float *)v13 + 8, 1, (float *)v17 + 8, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v16 + 2);
  if (*(_QWORD *)(v9 + 16) == v18)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    __break(1u);
  }
  v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
LABEL_13:
  __B = -a7.n128_f32[2];
  vDSP_vsadd((const float *)(v9 + 32), 1, &__B, (float *)v16 + 8, 1, v18);
  swift_bridgeObjectRetain();
  v19 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2), 0, v16);
  *v8 = v19;
  vDSP_vsq((const float *)v16 + 8, 1, (float *)v19 + 8, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v17;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2), 0, v17);
  *a4 = v20;
  vDSP_vadd((const float *)v19 + 8, 1, (const float *)v17 + 8, 1, (float *)v20 + 8, 1, v11);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    if (v11 >> 31)
      __break(1u);
    v27 = v11;
    swift_bridgeObjectRetain();
    v22 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2), 0, v20);
    *a4 = v22;
    swift_bridgeObjectRetain();
    vvsqrtf((float *)v22 + 8, (const float *)v20 + 8, &v27);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static SceneSegmentationProcessingUtils.calculateMinDistances_nonAMX(points:targetPoints:minDistances:tempBuffer:squaredDistances:usingSquaredDistance:)(uint64_t result, __n128 *a2, char **a3, char **a4, char **a5, char a6)
{
  int64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  BOOL v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char **v61;
  char *v62;
  char *v63;
  __n128 *v64;
  char *v65;
  __n128 *v66;
  char v67;
  char **v69;
  uint64_t v70;
  int v72;
  uint64_t v73;

  v70 = result;
  v6 = *(_QWORD *)(result + 16);
  if (!v6)
    return result;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    v13 = __OFADD__(v11, 4);
    v11 += 4;
    if (v13)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    ++v10;
  }
  while (v11 < v6);
  v73 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
    goto LABEL_124;
  v66 = a2;
  v67 = a6;
  v69 = a3;
  v14 = v73;
  if (!v12)
  {
    v16 = 0;
LABEL_47:
    while (1)
    {
      v35 = __OFADD__(v16, 4);
      if (v16 >= v6)
        goto LABEL_113;
      v36 = *(_DWORD *)(v70 + 32 + 4 * v16);
      v73 = v14;
      v38 = *(_QWORD *)(v14 + 16);
      v37 = *(_QWORD *)(v14 + 24);
      if (v38 >= v37 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v14 = v73;
      }
      *(_QWORD *)(v14 + 16) = v38 + 1;
      *(_DWORD *)(v14 + 4 * v38 + 32) = v36;
      v39 = (uint64_t)(v16 + 4) >= v6 || v35;
      v16 += 4;
      if ((v39 & 1) != 0)
      {
LABEL_19:
        if ((unint64_t)v6 >= 2)
        {
          v21 = 0;
          v22 = 1;
          while (1)
          {
            v23 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_120;
            v13 = __OFADD__(v22, 4);
            v22 += 4;
            if (v13)
              v22 = 0x7FFFFFFFFFFFFFFFLL;
            ++v21;
            if (v22 >= v6)
              goto LABEL_27;
          }
        }
        v23 = 0;
LABEL_27:
        v73 = MEMORY[0x24BEE4AF8];
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
        if ((v23 & 0x8000000000000000) == 0)
        {
          v24 = v73;
          if (v23)
          {
            v25 = 1;
            while (v25 < v6)
            {
              v26 = v25 + 4;
              if (__OFADD__(v25, 4))
                v27 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v27 = v25 + 4;
              if (v25 < 0)
                goto LABEL_117;
              v28 = *(_DWORD *)(v70 + 32 + 4 * v25);
              v73 = v24;
              v30 = *(_QWORD *)(v24 + 16);
              v29 = *(_QWORD *)(v24 + 24);
              if (v30 >= v29 >> 1)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
                v24 = v73;
              }
              *(_QWORD *)(v24 + 16) = v30 + 1;
              *(_DWORD *)(v24 + 4 * v30 + 32) = v28;
              v25 = v27;
              if (!--v23)
              {
                if (v27 < v6)
                  goto LABEL_60;
                goto LABEL_39;
              }
            }
            goto LABEL_116;
          }
          if ((unint64_t)v6 > 1)
          {
            v26 = 1;
LABEL_60:
            while (1)
            {
              v40 = __OFADD__(v26, 4);
              if (v26 >= v6)
                goto LABEL_121;
              v41 = *(_DWORD *)(v70 + 32 + 4 * v26);
              v73 = v24;
              v43 = *(_QWORD *)(v24 + 16);
              v42 = *(_QWORD *)(v24 + 24);
              if (v43 >= v42 >> 1)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
                v24 = v73;
              }
              *(_QWORD *)(v24 + 16) = v43 + 1;
              *(_DWORD *)(v24 + 4 * v43 + 32) = v41;
              v44 = (uint64_t)(v26 + 4) >= v6 || v40;
              v26 += 4;
              if ((v44 & 1) != 0)
              {
LABEL_39:
                if ((unint64_t)v6 < 3)
                  break;
                v31 = 0;
                v32 = 2;
                while (1)
                {
                  v33 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_123;
                  v13 = __OFADD__(v32, 4);
                  v32 += 4;
                  if (v13)
                    v32 = 0x7FFFFFFFFFFFFFFFLL;
                  ++v31;
                  if (v32 >= v6)
                  {
                    v34 = 1;
                    goto LABEL_72;
                  }
                }
              }
            }
          }
          v34 = 0;
          v33 = 0;
LABEL_72:
          v73 = MEMORY[0x24BEE4AF8];
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
          if (v33 < 0)
            goto LABEL_126;
          v45 = v73;
          if (v33)
          {
            v46 = 2;
            while (v46 < v6)
            {
              v47 = v46 + 4;
              if (__OFADD__(v46, 4))
                v48 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v48 = v46 + 4;
              if (v46 < 0)
                goto LABEL_119;
              v49 = *(_DWORD *)(v70 + 32 + 4 * v46);
              v73 = v45;
              v51 = *(_QWORD *)(v45 + 16);
              v50 = *(_QWORD *)(v45 + 24);
              if (v51 >= v50 >> 1)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
                v45 = v73;
              }
              *(_QWORD *)(v45 + 16) = v51 + 1;
              *(_DWORD *)(v45 + 4 * v51 + 32) = v49;
              v46 = v48;
              if (!--v33)
              {
                if (v48 < v6)
                  goto LABEL_87;
                goto LABEL_97;
              }
            }
            goto LABEL_118;
          }
          if ((v34 & 1) != 0)
          {
            v47 = 2;
LABEL_87:
            do
            {
              v52 = __OFADD__(v47, 4);
              if (v47 >= v6)
                goto LABEL_122;
              v53 = *(_DWORD *)(v70 + 32 + 4 * v47);
              v73 = v45;
              v55 = *(_QWORD *)(v45 + 16);
              v54 = *(_QWORD *)(v45 + 24);
              if (v55 >= v54 >> 1)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
                v45 = v73;
              }
              *(_QWORD *)(v45 + 16) = v55 + 1;
              *(_DWORD *)(v45 + 4 * v55 + 32) = v53;
              v56 = (uint64_t)(v47 + 4) >= v6 || v52;
              v47 += 4;
            }
            while ((v56 & 1) == 0);
          }
LABEL_97:
          v57 = v66[1].n128_u64[0];
          if (v57)
          {
            specialized static SceneSegmentationProcessingUtils.calculateDistance(xCoord:yCoord:zCoord:targetPoint:distances:tempBuffer:usingSquaredDistance:)(v14, v24, v45, a5, a4, 1, v66[2]);
            swift_bridgeObjectRelease();
            v58 = *a5;
            swift_bridgeObjectRetain();
            v59 = v57 - 1;
            if (v59)
            {
              v64 = v66 + 3;
              v60 = v58;
              do
              {
                specialized static SceneSegmentationProcessingUtils.calculateDistance(xCoord:yCoord:zCoord:targetPoint:distances:tempBuffer:usingSquaredDistance:)(v14, v24, v45, a5, a4, 1, *v64);
                v65 = *a5;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v58 + 2), 0, v58);
                vDSP_vmin((const float *)v58 + 8, 1, (const float *)v65 + 8, 1, (float *)v60 + 8, 1, (unint64_t)v6 >> 2);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                ++v64;
                v58 = v60;
                --v59;
              }
              while (v59);
            }
            else
            {
              v60 = v58;
            }
            swift_release();
            swift_release();
            result = swift_release();
            v61 = v69;
            *v69 = v60;
            if ((v67 & 1) != 0)
              return result;
          }
          else
          {
            swift_release();
            swift_release();
            result = swift_release();
            v61 = a3;
            if ((v67 & 1) != 0)
              return result;
          }
          if ((unint64_t)v6 >> 33)
            goto LABEL_127;
          v62 = *v61;
          v72 = (unint64_t)v6 >> 2;
          swift_bridgeObjectRetain();
          v63 = v62;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v62 + 2), 0, v62);
          *v61 = v63;
          swift_bridgeObjectRetain();
          vvsqrtf((float *)v63 + 8, (const float *)v62 + 8, &v72);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_125;
      }
    }
  }
  v15 = 0;
  while (v15 < v6)
  {
    v16 = v15 + 4;
    if (__OFADD__(v15, 4))
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v15 + 4;
    if (v15 < 0)
      goto LABEL_115;
    v18 = *(_DWORD *)(v70 + 32 + 4 * v15);
    v73 = v14;
    v20 = *(_QWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    if (v20 >= v19 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v14 = v73;
    }
    *(_QWORD *)(v14 + 16) = v20 + 1;
    *(_DWORD *)(v14 + 4 * v20 + 32) = v18;
    v15 = v17;
    if (!--v10)
    {
      if (v17 < v6)
        goto LABEL_47;
      goto LABEL_19;
    }
  }
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
  return result;
}

void StaticHandCalculator.update(_:)(uint64_t *a1)
{
  __n128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[414];

  if (*a1)
  {
    v1 = (__n128 *)a1[31];
    v2 = a1[44];
    v17 = *a1;
    v18 = *(_OWORD *)(a1 + 1);
    v19 = *(_OWORD *)(a1 + 3);
    v20 = *(_OWORD *)(a1 + 5);
    v21 = *(_OWORD *)(a1 + 7);
    v22 = *(_OWORD *)(a1 + 9);
    v23 = *(_OWORD *)(a1 + 11);
    v24 = *(_OWORD *)(a1 + 13);
    v3 = *(_OWORD *)(a1 + 15);
    v4 = *(_OWORD *)(a1 + 17);
    v5 = *(_OWORD *)(a1 + 19);
    v28 = *(_OWORD *)(a1 + 21);
    v27 = v5;
    v26 = v4;
    v25 = v3;
    v6 = *(_OWORD *)(a1 + 23);
    v7 = *(_OWORD *)(a1 + 25);
    v8 = a1[29];
    v9 = a1[30];
    v31 = *(_OWORD *)(a1 + 27);
    v30 = v7;
    v29 = v6;
    v32 = v8;
    v33 = v9;
    v34 = v1;
    v10 = *((_OWORD *)a1 + 17);
    v35 = *((_OWORD *)a1 + 16);
    v36 = v10;
    v11 = *((_OWORD *)a1 + 19);
    v37 = *((_OWORD *)a1 + 18);
    v38 = v11;
    v12 = *((_OWORD *)a1 + 21);
    v39 = *((_OWORD *)a1 + 20);
    v40 = v12;
    v41 = v2;
    memcpy(v42, a1 + 45, sizeof(v42));
    specialized static PinchGestureHelper.getPalmNormalFromPinchFrameFeatures(_:)((uint64_t)&v17);
    v15 = v13;
    swift_beginAccess();
    specialized CircularBuffer.add(_:)(v15);
    swift_endAccess();
    if (v9)
    {
      if (v1[1].n128_u64[0] < 7)
      {
        __break(1u);
        return;
      }
      v14 = v1[15];
    }
    else
    {
      v14 = 0uLL;
    }
    v16 = v14;
    swift_beginAccess();
    specialized CircularBuffer.add(_:)(v16);
    swift_endAccess();
    StaticHandCalculator.updateRotation()();
    StaticHandCalculator.updateTranslation()();
  }
}

Swift::Void __swiftcall StaticHandCalculator.updateRotation()()
{
  float32x4_t *v0;
  uint64_t v1;
  unint64_t v2;
  float32x4_t *v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  int32x2_t v12;
  unint64_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;

  swift_beginAccess();
  v2 = v0[2].u64[1];
  v1 = v0[3].i64[0];
  v3 = v0 + 4;
  v4 = v0[3].u64[1];
  swift_beginAccess();
  v5 = &v0[6].f32[1];
  swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
  {
LABEL_14:
    specialized CircularBuffer.lastAddedElementPtr.getter(v2, v1, v4);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v1 + 24);
  v8 = specialized CircularBuffer.lastAddedElementPtr.getter(v2, v1, v4);
  if (v7 < 2)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  v10 = v8;
  v11 = v9;
  swift_bridgeObjectRetain();
  if ((v11 & 1) != 0)
  {
LABEL_16:
    v23 = 0uLL;
    v16 = 0.0;
LABEL_17:
    *v3 = v23;
    *v5 = v16;
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
    return;
  }
  if (v6 == v2)
    v13 = v4;
  else
    v13 = 0;
  if ((v13 & 0x8000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    *(float *)v12.i32 = (float)(uint64_t)v2;
    v4 = v1 + 32;
    v14 = (float32x2_t)vdup_lane_s32(v12, 0);
    v15.i64[0] = 0;
    v15.i32[2] = 0;
    v16 = 0.0;
    if (v13 < v2)
    {
      while (1)
      {
        v17 = *(float32x4_t *)(v4 + 16 * v13);
        *(float32x2_t *)v18.f32 = vadd_f32(*(float32x2_t *)v15.f32, vdiv_f32(*(float32x2_t *)v17.f32, v14));
        v18.f32[2] = v15.f32[2] + (float)(COERCE_FLOAT(*(_QWORD *)(v4 + 16 * v13 + 8)) / (float)(uint64_t)v2);
        v18.i32[3] = 0;
        v24 = v18;
        v19 = vmulq_f32(v17, *v3);
        v20 = vmulq_f32(v17, v17);
        v21 = vmulq_f32(*v3, *v3);
        v22 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]/ (float)((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* sqrtf(v21.f32[2] + vaddv_f32(*(float32x2_t *)v21.f32)))+ 0.000001));
        if (v16 < v22)
          v16 = v22;
        if (v13 == v10)
          break;
        v13 = (v13 + 1) % v2;
        v15 = v24;
        if (v13 >= v2)
          goto LABEL_13;
      }
      v23 = v24;
      goto LABEL_17;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __break(1u);
}

Swift::Void __swiftcall StaticHandCalculator.updateTranslation()()
{
  float32x4_t *v0;
  uint64_t v1;
  uint64_t v2;
  float32x4_t *v3;
  unint64_t v4;
  float *f32;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  int32x2_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;

  swift_beginAccess();
  v2 = v0[1].i64[0];
  v1 = v0[1].i64[1];
  v3 = v0 + 5;
  v4 = v0[2].u64[0];
  swift_beginAccess();
  f32 = v0[6].f32;
  swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + 24);
    if (v6 == v2)
      v8 = v4;
    else
      v8 = 0;
    if (v7 <= 1)
      v9 = 0;
    else
      v9 = v8;
    v10 = v7 <= 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = specialized CircularBuffer.lastAddedElementPtr.getter(v2, v1, v4);
  v14 = 0uLL;
  v15 = 0.0;
  if (v6 && !v10 && (v12 & 1) == 0)
  {
    if (v9 >= v6)
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      *(float *)v13.i32 = (float)v6;
      v16 = v1 + 32;
      v17 = (float32x2_t)vdup_lane_s32(v13, 0);
      while (1)
      {
        v18 = *(float32x4_t *)(v16 + 16 * v9);
        *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vdiv_f32(*(float32x2_t *)v18.f32, v17));
        v14.f32[2] = v14.f32[2] + (float)(COERCE_FLOAT(*(_QWORD *)(v16 + 16 * v9 + 8)) / *(float *)v13.i32);
        v14.i32[3] = 0;
        v19 = vsubq_f32(v18, *v3);
        v20 = vmulq_f32(v19, v19);
        v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
        if (v15 < v21)
          v15 = v21;
        if (v9 == v11)
          break;
        v9 = (uint64_t)(v9 + 1) % v6;
        if (v9 >= v6)
          goto LABEL_19;
      }
    }
  }
  *v3 = v14;
  *f32 = v15;
  swift_endAccess();
  swift_endAccess();
}

Swift::Bool __swiftcall StaticHandCalculator.isStaticPalm()()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) != *(_QWORD *)(v0 + 40))
    return 0;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) != *(_QWORD *)(v0 + 16))
    return 0;
  swift_beginAccess();
  if (*(float *)(v0 + 96) >= *(float *)(v0 + 104))
    return 0;
  swift_beginAccess();
  return *(float *)(v0 + 100) < *(float *)(v0 + 108);
}

uint64_t StaticHandCalculator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StaticHandCalculator()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for StaticHandCalculator.ThresholdConfig()
{
  return &type metadata for StaticHandCalculator.ThresholdConfig;
}

uint64_t specialized StaticHandCalculator.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v3 = (int)objc_msgSend(a1, sel_OisStaticHandBufferLength);
  result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(MEMORY[0x24BEE4AF8], v3, 0);
  if (v5)
  {
    *(_QWORD *)(v1 + 16) = result;
    *(_QWORD *)(v1 + 24) = v5;
    *(_QWORD *)(v1 + 32) = v6;
    result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(MEMORY[0x24BEE4AF8], v3, 0);
    if (v7)
    {
      *(_QWORD *)(v1 + 40) = result;
      *(_QWORD *)(v1 + 48) = v7;
      *(_QWORD *)(v1 + 56) = v8;
      *(_OWORD *)(v1 + 64) = 0u;
      *(_OWORD *)(v1 + 80) = 0u;
      *(_QWORD *)(v1 + 96) = 0;
      objc_msgSend(a1, sel_OisStaticHandMaxMovement);
      v10 = v9;
      objc_msgSend(a1, sel_OisStaticHandMaxAngle);
      *(_DWORD *)(v1 + 104) = v10;
      *(_DWORD *)(v1 + 108) = v11;
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id VideoDataStructs.PixelBufferData.pixelBuf.getter()
{
  id *v0;

  return *v0;
}

__n128 VideoDataStructs.PixelBufferData.imageMetadata.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_BYTE *)(v1 + 112);
  v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 48) = v5;
  result = *(__n128 *)(v1 + 72);
  v7 = *(_OWORD *)(v1 + 88);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 96) = v2;
  *(_BYTE *)(a1 + 104) = v3;
  return result;
}

uint64_t VideoDataStructs.PixelBufferData.displayTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 116);
}

uint64_t VideoDataStructs.PixelBufferData.frameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t VideoDataStructs.PixelBufferData.originalTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 156);
}

uint64_t VideoDataStructs.PixelBufferData.init(pixelBuf:displayTimestamp:imageMetadata:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a5;
  v7 = a5[1];
  v8 = a5[2];
  v9 = a5[3];
  v10 = *((_QWORD *)a5 + 8);
  v11 = *((_QWORD *)a5 + 9);
  v12 = *((_QWORD *)a5 + 10);
  v13 = *((_QWORD *)a5 + 11);
  v14 = *((_QWORD *)a5 + 12);
  v15 = *((_BYTE *)a5 + 104);
  if ((v15 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v16 = *((_QWORD *)a5 + 10);
    v17 = *((_QWORD *)a5 + 11);
    v18 = *((_QWORD *)a5 + 12);
    v19 = *((_QWORD *)a5 + 9);
  }
  *(_QWORD *)a6 = result;
  *(_OWORD *)(a6 + 8) = v6;
  *(_OWORD *)(a6 + 24) = v7;
  *(_OWORD *)(a6 + 40) = v8;
  *(_OWORD *)(a6 + 56) = v9;
  *(_QWORD *)(a6 + 72) = v10;
  *(_QWORD *)(a6 + 80) = v11;
  *(_QWORD *)(a6 + 88) = v12;
  *(_QWORD *)(a6 + 96) = v13;
  *(_QWORD *)(a6 + 104) = v14;
  *(_BYTE *)(a6 + 112) = v15;
  *(_QWORD *)(a6 + 116) = a2;
  *(_QWORD *)(a6 + 124) = a3;
  *(_QWORD *)(a6 + 132) = a4;
  *(_QWORD *)(a6 + 144) = v19;
  *(_BYTE *)(a6 + 152) = v15;
  *(_QWORD *)(a6 + 156) = v16;
  *(_QWORD *)(a6 + 164) = v17;
  *(_QWORD *)(a6 + 172) = v18;
  *(_BYTE *)(a6 + 180) = v15;
  return result;
}

void destroy for VideoDataStructs.PixelBufferData(id *a1)
{

}

uint64_t initializeWithCopy for VideoDataStructs.PixelBufferData(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 116) = v4;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.PixelBufferData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_OWORD *)(a2 + 8);
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 8) = v7;
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 132);
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 156) = v13;
  return a1;
}

__n128 __swift_memcpy181_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 173) = *(_QWORD *)((char *)a2 + 173);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for VideoDataStructs.PixelBufferData(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.PixelBufferData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 181))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.PixelBufferData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 180) = 0;
    *(_DWORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 181) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 181) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.PixelBufferData()
{
  return &type metadata for VideoDataStructs.PixelBufferData;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_s5Int32V_AF10Matrix2dPBVts5NeverOTg5048_s5Hands12TrackingInfoV10toProtoBufAA0bC2PBVyFs5h6V_AA08i8G0VtAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v62 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  v3 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62, v4);
  v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int32, Matrix2dPB));
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v60 = (_DWORD *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v45 = v1;
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v12 = v64;
    result = specialized Dictionary.startIndex.getter(a1);
    v15 = 0;
    v16 = a1 + 64;
    v17 = *(_BYTE *)(a1 + 32);
    v52 = a1 + 80;
    v61 = xmmword_23D9A7050;
    v46 = a1;
    v47 = v10;
    v48 = v14;
    v49 = a1 + 64;
    while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << v17)
    {
      if ((*(_QWORD *)(v16 + 8 * (result >> 6)) & (1 << result)) == 0)
        goto LABEL_44;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
        goto LABEL_45;
      v20 = *(_QWORD *)(a1 + 48) + 16 * result;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * result);
      if ((*(_BYTE *)(v20 + 8) & 1) == 0)
      {
        if (v21 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_46;
        if (v21 > 0x7FFFFFFF)
          goto LABEL_47;
      }
      v55 = 1 << result;
      v56 = result >> 6;
      v58 = result;
      v59 = v12;
      v54 = v15;
      *v60 = v21;
      v23 = *(_QWORD *)(v22 + 16);
      v57 = v22;
      if (v23)
      {
        v24 = v11;
        v25 = (uint64_t *)(v22 + 32);
        swift_bridgeObjectRetain();
        do
        {
          v26 = *v25;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = v61;
          *(_QWORD *)(v27 + 32) = v26;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          v29 = v24[2];
          v28 = v24[3];
          if (v29 >= v28 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v24);
          v24[2] = v29 + 1;
          v24[v29 + 4] = v27;
          ++v25;
          --v23;
        }
        while (v23);
      }
      else
      {
        swift_bridgeObjectRetain();
        v24 = v11;
      }
      v30 = (char *)v60 + *(int *)(v51 + 48);
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      *(_QWORD *)v30 = MEMORY[0x24BEE4AF8];
      type metadata accessor for Matrix2dPB(0);
      UnknownStorage.init()();
      v30[8] = 1;
      v31 = v24[2];
      if (v31)
      {
        v53 = v30;
        v63 = v11;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
        v32 = 0;
        v33 = v63;
        do
        {
          v34 = v24[v32 + 4];
          swift_bridgeObjectRetain();
          UnknownStorage.init()();
          *v6 = v34;
          v63 = v33;
          v36 = v33[2];
          v35 = v33[3];
          if (v36 >= v35 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v33 = v63;
          }
          ++v32;
          v33[2] = v36 + 1;
          outlined init with take of Matrix2dPB((uint64_t)v6, (uint64_t)v33+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v36, type metadata accessor for Matrix2dPB.FloatVectorPB);
        }
        while (v31 != v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        a1 = v46;
        v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v30 = v53;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = v11;
      }
      *((_QWORD *)v30 + 2) = v33;
      v12 = v59;
      v64 = v59;
      v38 = *(_QWORD *)(v59 + 16);
      v37 = *(_QWORD *)(v59 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v12 = v64;
      }
      *(_QWORD *)(v12 + 16) = v38 + 1;
      result = outlined init with take of ImageData?((uint64_t)v60, v12+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v38, &demangling cache variable for type metadata for (Int32, Matrix2dPB));
      v17 = *(_BYTE *)(a1 + 32);
      v18 = 1 << v17;
      if (v58 >= 1 << v17)
        goto LABEL_48;
      v16 = v49;
      v39 = v56;
      v40 = *(_QWORD *)(v49 + 8 * v56);
      if ((v40 & v55) == 0)
        goto LABEL_49;
      LODWORD(v14) = v48;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v48)
        goto LABEL_50;
      v41 = v40 & (-2 << (v58 & 0x3F));
      if (v41)
      {
        v18 = __clz(__rbit64(v41)) | v58 & 0xFFFFFFFFFFFFFFC0;
        v19 = v47;
      }
      else
      {
        v42 = v56 + 1;
        v43 = (v18 + 63) >> 6;
        v19 = v47;
        if (v56 + 1 < v43)
        {
          v44 = *(_QWORD *)(v49 + 8 * v42);
          if (v44)
          {
LABEL_39:
            v18 = __clz(__rbit64(v44)) + (v42 << 6);
          }
          else
          {
            while (v43 - 2 != v39)
            {
              v44 = *(_QWORD *)(v52 + 8 * v39++);
              if (v44)
              {
                v42 = v39 + 1;
                goto LABEL_39;
              }
            }
          }
        }
      }
      v15 = v54 + 1;
      result = v18;
      if (v54 + 1 == v19)
        return v12;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t TrackingInfo.init(protoBuf:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  int *v56;
  int *v57;
  int *v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  uint64_t v64;
  int *v65;
  unsigned __int8 *v66;
  uint64_t *v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  _DWORD *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int64_t v89;
  int32x2_t v90;
  uint64_t v91;
  char v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  int v106;
  char *v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t, uint64_t);
  int v118;
  __int128 v119;
  int *v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  char **v124;
  char *v125;
  int *v126;
  int v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  char v131;
  __int128 v132;
  __int128 v133;
  int *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t result;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  _QWORD *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  _DWORD *v180;
  __int128 v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  __int128 v185;
  _OWORD v186[20];
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  char v210;
  unsigned int v211;
  unsigned int v212;
  __int128 v213;
  __int128 v214;
  int v215;
  unsigned __int8 v216;
  char *v217;
  int v218;
  __int128 v219;
  __int128 v220;
  int v221;
  uint64_t v222;
  char v223;
  int v224;
  char v225;
  unsigned __int8 v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  unint64_t v236;
  __int128 v237;
  unint64_t v238;
  __int128 v239;
  uint64_t v240;

  v163 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  v161 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v7);
  v156 = (uint64_t)&v148 - v8;
  v9 = type metadata accessor for Coordinate3DPB(0);
  v164 = *(_QWORD *)(v9 - 8);
  v165 = v9;
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v162 = (uint64_t *)((char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11, v13);
  v157 = (char *)&v148 - v14;
  v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
  v16 = MEMORY[0x24BDAC7A8](v183, v15);
  v182 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  *(_QWORD *)&v181 = (char *)&v148 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v180 = (_DWORD *)((char *)&v148 - v23);
  MEMORY[0x24BDAC7A8](v22, v24);
  v179 = (char *)&v148 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingPredictionPB?);
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for TrackingPredictionPB(0);
  *(_QWORD *)&v185 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (char *)&v148 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingBuffersPB?);
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for TrackingBuffersPB(0);
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38, v40);
  v42 = (uint64_t *)((char *)&v148 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v175 = *(int *)(type metadata accessor for TrackingInfoPB(0) + 20);
  v176 = a1;
  v43 = *(_QWORD *)(a1 + v175);
  v44 = v43
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v44, (uint64_t)v37, &demangling cache variable for type metadata for TrackingBuffersPB?);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
  v46 = MEMORY[0x24BEE4AF8];
  if (v45 == 1)
  {
    *v42 = MEMORY[0x24BEE4AF8];
    v42[1] = v46;
    v42[2] = v46;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for TrackingBuffersPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v37, (uint64_t)v42, type metadata accessor for TrackingBuffersPB);
  }
  specialized TrackingBuffers.init(protoBuf:)(v42, (unint64_t *)&v233);
  v47 = v233;
  v158 = v235;
  v159 = v234;
  v239 = v233;
  v240 = v234;
  v237 = v235;
  v48 = v43
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  v172 = v236;
  v173 = *((_QWORD *)&v235 + 1);
  v238 = v236;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v48, (uint64_t)v29, &demangling cache variable for type metadata for TrackingPredictionPB?);
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v185 + 48))(v29, 1, v30);
  v160 = *((_QWORD *)&v47 + 1);
  v174 = v47;
  if (v49 == 1)
  {
    *(_QWORD *)v33 = v46;
    outlined retain of (String, espresso_buffer_t)((uint64_t)&v239);
    outlined retain of (String, espresso_buffer_t)((uint64_t)&v237);
    UnknownStorage.init()();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(&v33[*(int *)(v30 + 24)], 1, 1, v165);
    v50 = &v33[*(int *)(v30 + 28)];
    v51 = type metadata accessor for FeatureVectorPerFramePB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for TrackingPredictionPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v29, (uint64_t)v33, type metadata accessor for TrackingPredictionPB);
    outlined retain of (String, espresso_buffer_t)((uint64_t)&v239);
    outlined retain of (String, espresso_buffer_t)((uint64_t)&v237);
  }
  v52 = v182;
  v53 = v183;
  v54 = (int *)v181;
  TrackingPrediction.init(protoBuf:)((uint64_t)v33, &v187);
  v170 = v187.n128_u64[0];
  v171 = v189;
  v169 = v188;
  v154 = v190;
  v155 = v187.n128_u64[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v176 + v175);
  swift_beginAccess();
  v168 = *(_QWORD *)(v55 + 16);
  v56 = (int *)(v55
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  swift_beginAccess();
  v167.n128_u64[1] = *v56;
  v57 = (int *)(v55
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  swift_beginAccess();
  v167.n128_u64[0] = *v57;
  v58 = (int *)(v55
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  swift_beginAccess();
  v59 = *v58;
  v60 = (unsigned __int8 *)(v55
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  swift_beginAccess();
  v152 = *v60;
  v232 = v152;
  v61 = (unsigned __int8 *)(v55
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  swift_beginAccess();
  v151 = *v61;
  v231 = v151;
  v62 = (unsigned __int8 *)(v55
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  swift_beginAccess();
  v150 = *v62;
  v230 = v150;
  v63 = (uint64_t *)(v55
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  swift_beginAccess();
  v64 = *v63;
  v65 = (int *)(v55
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  v153 = v64;
  swift_bridgeObjectRetain_n();
  swift_beginAccess();
  v166 = *v65;
  v66 = (unsigned __int8 *)(v55
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  swift_beginAccess();
  v149 = *v66;
  v229 = v149;
  v67 = (uint64_t *)(v55
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  swift_beginAccess();
  v68 = *v67;
  v69 = *(_QWORD *)(*v67 + 16);
  v70 = MEMORY[0x24BEE4AF8];
  if (v69)
  {
    *(_QWORD *)&v186[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69, 0);
    v71 = specialized Dictionary.startIndex.getter(v68);
    v73 = v72;
    v75 = v74 & 1;
    v177 = v68 + 64;
    v184 = v69 - 1;
    v178 = v68;
    while (1)
    {
      v76 = v179;
      v77 = (uint64_t)&v179[*(int *)(v53 + 48)];
      *(_QWORD *)&v185 = v73;
      v78 = specialized Dictionary.subscript.getter(v77, v71, v73, v75 & 1, v68);
      *v76 = v78;
      v79 = (uint64_t)v180;
      *v180 = v78;
      outlined init with copy of TrackingUpdateDataPB(v77, v79 + *(int *)(v53 + 48), type metadata accessor for Matrix2dPB);
      outlined init with take of ImageData?(v79, (uint64_t)v54, &demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
      outlined destroy of Coordinate3DPB?((uint64_t)v76, &demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
      v80 = *(int *)(v53 + 48);
      v81 = (uint64_t)v52 + v80;
      v82 = (uint64_t)v54 + v80;
      v83 = *v54;
      *v52 = v83;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v54 + v80, (uint64_t)v52 + v80, type metadata accessor for Matrix2dPB);
      outlined destroy of Matrix3x3PB(v81, type metadata accessor for Matrix2dPB);
      CameraSource.init(rawValue:)(v83, (uint64_t)&v187);
      if ((v187.n128_u8[9] & 1) != 0)
        break;
      v84 = v187.n128_u64[0];
      v225 = v187.n128_u8[8] & 1;
      v85 = (_QWORD *)((char *)v52 + *(int *)(v53 + 48));
      outlined init with copy of TrackingUpdateDataPB(v82, (uint64_t)v85, type metadata accessor for Matrix2dPB);
      v86 = specialized Matrix2d.init(protoBuf:)(v85);
      v91 = Matrix2d.toSimdFloat2List()(v86, v88, v89, v87 & 1, v90);
      swift_bridgeObjectRelease();
      outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
      v92 = v225;
      v70 = *(_QWORD *)&v186[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1);
        v70 = *(_QWORD *)&v186[0];
      }
      v93 = v185;
      v95 = *(_QWORD *)(v70 + 16);
      v94 = *(_QWORD *)(v70 + 24);
      if (v95 >= v94 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
        v93 = v185;
        v70 = *(_QWORD *)&v186[0];
      }
      *(_QWORD *)(v70 + 16) = v95 + 1;
      v96 = v70 + 24 * v95;
      *(_QWORD *)(v96 + 32) = v84;
      *(_BYTE *)(v96 + 40) = v92;
      *(_QWORD *)(v96 + 48) = v91;
      v68 = v178;
      if (v71 < 0 || v71 >= -(-1 << *(_BYTE *)(v178 + 32)))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        break;
      }
      if (((*(_QWORD *)(v177 + (((unint64_t)v71 >> 3) & 0xFFFFFFFFFFFFF8)) >> v71) & 1) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(v178 + 36) != v93)
        goto LABEL_33;
      v97 = _HashTable.occupiedBucket(after:)();
      if (!v184)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      v71 = v97;
      v75 = 0;
      v73 = *(unsigned int *)(v68 + 36);
      --v184;
      v52 = v182;
      v53 = v183;
      v54 = (int *)v181;
    }
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_21:
    v98 = (uint64_t)v161;
    if (*(_QWORD *)(v70 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [SIMD2<Float>]>);
      v99 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v99 = MEMORY[0x24BEE4B00];
    }
    v100 = (uint64_t)v157;
    v187.n128_u64[0] = v99;
    v101 = swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v101, 1, &v187);
    swift_bridgeObjectRelease();
    v184 = v187.n128_u64[0];
    v102 = *(_QWORD *)(v176 + v175);
    v103 = (int *)(v102
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
    swift_beginAccess();
    v104 = *v103;
    v105 = (char *)(v102
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
    swift_beginAccess();
    v106 = *v105;
    v228 = *v105;
    v107 = (char *)(v102
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
    swift_beginAccess();
    v108 = *v107;
    v227 = *v107;
    v109 = (unsigned int *)(v102
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
    swift_beginAccess();
    v110 = *v109;
    v111 = (unsigned int *)(v102
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
    swift_beginAccess();
    v112 = *v111;
    v113 = v102
         + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
    swift_beginAccess();
    v114 = v113;
    v115 = v156;
    outlined init with copy of (Int32, Matrix2dPB)(v114, v156, &demangling cache variable for type metadata for Coordinate3DPB?);
    v116 = v165;
    v117 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48);
    v118 = v117(v115, 1, v165);
    v183 = v104;
    if (v118 == 1)
    {
      *(_QWORD *)v100 = 0;
      *(_DWORD *)(v100 + 8) = 0;
      swift_retain();
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v115, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v115, v100, type metadata accessor for Coordinate3DPB);
      swift_retain();
    }
    *(_QWORD *)&v119 = *(_QWORD *)v100;
    v185 = v119;
    LODWORD(v119) = *(_DWORD *)(v100 + 8);
    v181 = v119;
    outlined destroy of Matrix3x3PB(v100, type metadata accessor for Coordinate3DPB);
    v120 = (int *)(v102
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
    swift_beginAccess();
    v121 = *v120;
    v122 = (unsigned __int8 *)(v102
                             + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
    swift_beginAccess();
    v226 = *v122;
    v123 = v226;
    v124 = (char **)(v102
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
    swift_beginAccess();
    v125 = *v124;
    v126 = (int *)(v102
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
    swift_beginAccess();
    v127 = *v126;
    v128 = v102
         + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
    swift_beginAccess();
    outlined init with copy of (Int32, Matrix2dPB)(v128, v98, &demangling cache variable for type metadata for Coordinate3DPB?);
    v129 = v117(v98, 1, v116);
    LODWORD(v180) = v106;
    LODWORD(v179) = v108;
    v182 = v125;
    LODWORD(v178) = v123;
    v130 = v162;
    if (v129 == 1)
    {
      *v162 = 0;
      *((_DWORD *)v130 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v98, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v98, (uint64_t)v162, type metadata accessor for Coordinate3DPB);
    }
    v131 = v152;
    *(_QWORD *)&v132 = v185;
    *((_QWORD *)&v132 + 1) = v181;
    v185 = v132;
    *(_QWORD *)&v133 = *v130;
    *((_QWORD *)&v133 + 1) = *((unsigned int *)v130 + 2);
    v181 = v133;
    outlined destroy of Matrix3x3PB((uint64_t)v130, type metadata accessor for Coordinate3DPB);
    v134 = (int *)(v102
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
    swift_beginAccess();
    v135 = *v134;
    v136 = v102
         + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection;
    swift_beginAccess();
    v177 = *(_QWORD *)v136;
    v137 = v177;
    LODWORD(v175) = *(unsigned __int8 *)(v136 + 8);
    v138 = (int *)(v102
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
    swift_beginAccess();
    v139 = *v138;
    outlined destroy of Matrix3x3PB(v176, type metadata accessor for TrackingInfoPB);
    v186[0] = v167;
    *(_QWORD *)&v186[1] = v168;
    DWORD2(v186[1]) = v59;
    BYTE12(v186[1]) = v131;
    v140 = v154;
    v141 = v155;
    *(_QWORD *)&v186[2] = v170;
    *((_QWORD *)&v186[2] + 1) = v155;
    *(_QWORD *)&v186[3] = v169;
    *((_QWORD *)&v186[3] + 1) = v171;
    *(_QWORD *)&v186[4] = v154;
    *((_QWORD *)&v186[4] + 1) = v174;
    v142 = v159;
    v143 = v160;
    *(_QWORD *)&v186[5] = v160;
    *((_QWORD *)&v186[5] + 1) = v159;
    v144 = v158;
    *(_QWORD *)&v186[6] = v158;
    *((_QWORD *)&v186[6] + 1) = v173;
    v186[7] = v172;
    LOBYTE(v186[8]) = v151;
    BYTE1(v186[8]) = v150;
    *((_QWORD *)&v186[8] + 1) = v166;
    v145 = v153;
    *(_QWORD *)&v186[9] = v153;
    BYTE8(v186[9]) = v149;
    v146 = v184;
    *(_QWORD *)&v186[10] = v184;
    *((_QWORD *)&v186[10] + 1) = v183;
    LOBYTE(v186[11]) = (_BYTE)v180;
    BYTE1(v186[11]) = (_BYTE)v179;
    *(_QWORD *)((char *)&v186[11] + 4) = __PAIR64__(v112, v110);
    v186[12] = v185;
    v186[13] = v185;
    LODWORD(v186[14]) = v121;
    BYTE4(v186[14]) = v178;
    *((_QWORD *)&v186[14] + 1) = v182;
    v186[16] = v181;
    v186[17] = v181;
    LODWORD(v186[15]) = v127;
    LODWORD(v186[18]) = v135;
    *((_QWORD *)&v186[18] + 1) = v137;
    LOBYTE(v137) = v175;
    LOBYTE(v186[19]) = v175;
    DWORD1(v186[19]) = v139;
    outlined retain of (TrackingInfo, Int)((uint64_t)v186);
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of CircularBuffer<DerivedHandAttributes?>((uint64_t)&v239);
    outlined release of CircularBuffer<DerivedHandAttributes?>((uint64_t)&v237);
    swift_bridgeObjectRelease();
    memcpy(v163, v186, 0x138uLL);
    v187 = v167;
    v188 = v168;
    LODWORD(v189) = v59;
    BYTE4(v189) = v232;
    v190 = v170;
    v191 = v141;
    v192 = v169;
    v193 = v171;
    v194 = v140;
    v195 = v174;
    v196 = v143;
    v197 = v142;
    v198 = v144;
    v199 = v173;
    v200 = v172;
    v201 = 0;
    v202 = v231;
    v203 = v230;
    v204 = v166;
    v205 = v145;
    v206 = v229;
    v207 = v146;
    v208 = v183;
    v209 = v228;
    v210 = v227;
    v211 = v110;
    v212 = v112;
    v213 = v185;
    v214 = v185;
    v215 = v121;
    v216 = v226;
    v217 = v182;
    v219 = v181;
    v220 = v181;
    v218 = v127;
    v221 = v135;
    v222 = v177;
    v223 = v137;
    v224 = v139;
    return outlined release of TrackingInfo((uint64_t)&v187);
  }
  return result;
}

uint64_t TrackingInfo.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t result;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  __int128 v180;
  char *v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  char *v185;
  int v186;
  uint64_t v187;
  char *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211[26];
  __int128 v212;
  __int128 v213;
  __int128 v214;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v204 = (char *)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v203 = (char *)&v171 - v8;
  v202 = type metadata accessor for Coordinate3DPB(0);
  v182 = *(_QWORD *)(v202 - 8);
  MEMORY[0x24BDAC7A8](v202, v9);
  v188 = (char *)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v185 = (char *)&v171 - v13;
  MEMORY[0x24BDAC7A8](v14, v15);
  v181 = (char *)&v171 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingBuffersPB?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v198 = (uint64_t)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = (char *)&v171 - v22;
  v24 = type metadata accessor for TrackingBuffersPB(0);
  v195 = *(_QWORD *)(v24 - 8);
  v196 = v24;
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = (uint64_t *)((char *)&v171 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingPredictionPB?);
  MEMORY[0x24BDAC7A8](v28, v29);
  v177 = (uint64_t)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v32);
  v34 = (char *)&v171 - v33;
  v35 = type metadata accessor for TrackingPredictionPB(0);
  v175 = *(_QWORD *)(v35 - 8);
  v176 = v35;
  MEMORY[0x24BDAC7A8](v35, v36);
  v194 = (char *)&v171 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)v1;
  v39 = *(_QWORD *)(v1 + 8);
  v40 = *(_QWORD *)(v1 + 16);
  v41 = *(_DWORD *)(v1 + 24);
  v192 = *(unsigned __int8 *)(v1 + 28);
  v42 = *(_QWORD *)(v1 + 32);
  v43 = *(_QWORD *)(v1 + 40);
  v173 = *(_QWORD *)(v1 + 48);
  v174 = v42;
  v171 = *(_QWORD *)(v1 + 56);
  v172 = v43;
  v193 = *(_QWORD *)(v1 + 64);
  v44 = *(_OWORD *)(v1 + 88);
  v212 = *(_OWORD *)(v1 + 72);
  v213 = v44;
  v214 = *(_OWORD *)(v1 + 104);
  v197 = *(unsigned __int8 *)(v1 + 128);
  v199 = *(unsigned __int8 *)(v1 + 129);
  v45 = *(_QWORD *)(v1 + 136);
  v200 = *(_QWORD *)(v1 + 144);
  v201 = v45;
  v189 = *(unsigned __int8 *)(v1 + 152);
  v46 = *(_QWORD *)(v1 + 168);
  v190 = *(_QWORD *)(v1 + 160);
  v191 = v46;
  LODWORD(v46) = *(unsigned __int8 *)(v1 + 177);
  v178 = *(unsigned __int8 *)(v1 + 176);
  v179 = v46;
  v48 = *(_DWORD *)(v1 + 180);
  v47 = *(_DWORD *)(v1 + 184);
  v180 = *(_OWORD *)(v1 + 208);
  v49 = *(_DWORD *)(v1 + 224);
  v183 = *(unsigned __int8 *)(v1 + 228);
  v184 = *(_QWORD *)(v1 + 232);
  v50 = *(_DWORD *)(v1 + 240);
  v205 = *(_OWORD *)(v1 + 272);
  v51 = *(_DWORD *)(v1 + 288);
  v187 = *(_QWORD *)(v1 + 296);
  v186 = *(unsigned __int8 *)(v1 + 304);
  v52 = *(_DWORD *)(v1 + 308);
  UnknownStorage.init()();
  v53 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TrackingInfoPB(0) + 20));
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *v53 = static TrackingInfoPB._StorageClass.defaultInstance;
  if (v38 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_74;
  }
  if (v38 > 0x7FFFFFFF)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v54 = swift_retain();
    v55 = specialized TrackingInfoPB._StorageClass.init(copying:)(v54);
    swift_release();
    *v53 = v55;
    swift_release();
  }
  v56 = (_DWORD *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  swift_beginAccess();
  *v56 = v38;
  if (v39 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_75;
  if (v39 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v57 = swift_retain();
    v58 = specialized TrackingInfoPB._StorageClass.init(copying:)(v57);
    swift_release();
    *v53 = v58;
    swift_release();
  }
  v59 = (_DWORD *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  swift_beginAccess();
  *v59 = v39;
  v60 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v61 = swift_retain();
    v62 = specialized TrackingInfoPB._StorageClass.init(copying:)(v61);
    swift_release();
    *v53 = v62;
    swift_release();
  }
  v63 = *v53;
  swift_beginAccess();
  *(_QWORD *)(v63 + 16) = v40;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v65 = (uint64_t)v204;
  v66 = v194;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v67 = swift_retain();
    v68 = specialized TrackingInfoPB._StorageClass.init(copying:)(v67);
    swift_release();
    *v53 = v68;
    swift_release();
  }
  v69 = (_DWORD *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  swift_beginAccess();
  *v69 = v41;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v70 = swift_retain();
    v71 = specialized TrackingInfoPB._StorageClass.init(copying:)(v70);
    swift_release();
    *v53 = v71;
    swift_release();
  }
  v72 = (_BYTE *)(*v53
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  swift_beginAccess();
  *v72 = v192;
  if (v193)
  {
    v206 = v174;
    v207 = v172;
    v208 = v173;
    v209 = v171;
    v210 = v193;
    TrackingPrediction.toProtoBuf()(v66);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for TrackingInfoPB._StorageClass(0);
      swift_allocObject();
      v73 = swift_retain();
      v74 = specialized TrackingInfoPB._StorageClass.init(copying:)(v73);
      swift_release();
      *v53 = v74;
      swift_release();
    }
    v75 = *v53;
    outlined init with take of Matrix2dPB((uint64_t)v66, (uint64_t)v34, type metadata accessor for TrackingPredictionPB);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v34, 0, 1, v176);
    v76 = v177;
    outlined init with take of ImageData?((uint64_t)v34, v177, &demangling cache variable for type metadata for TrackingPredictionPB?);
    v77 = v75
        + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v76, v77, &demangling cache variable for type metadata for TrackingPredictionPB?);
    swift_endAccess();
    swift_release();
  }
  TrackingBuffers.toProtoBuf()(v60);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v78 = swift_retain();
    v79 = specialized TrackingInfoPB._StorageClass.init(copying:)(v78);
    swift_release();
    *v53 = v79;
    swift_release();
  }
  v80 = *v53;
  outlined init with take of Matrix2dPB((uint64_t)v60, (uint64_t)v23, type metadata accessor for TrackingBuffersPB);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v23, 0, 1, v196);
  v81 = v198;
  outlined init with take of ImageData?((uint64_t)v23, v198, &demangling cache variable for type metadata for TrackingBuffersPB?);
  v82 = v80
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v81, v82, &demangling cache variable for type metadata for TrackingBuffersPB?);
  swift_endAccess();
  swift_release();
  v83 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v202;
  v85 = v200;
  if ((v83 & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v86 = swift_retain();
    v87 = specialized TrackingInfoPB._StorageClass.init(copying:)(v86);
    swift_release();
    *v53 = v87;
    swift_release();
  }
  v88 = (_BYTE *)(*v53
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  swift_beginAccess();
  *v88 = v197;
  v89 = swift_isUniquelyReferenced_nonNull_native();
  v90 = (uint64_t)v203;
  v91 = v201;
  if ((v89 & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v92 = swift_retain();
    v93 = specialized TrackingInfoPB._StorageClass.init(copying:)(v92);
    swift_release();
    *v53 = v93;
    swift_release();
  }
  v94 = (_BYTE *)(*v53
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  swift_beginAccess();
  *v94 = v199;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v95 = swift_retain();
    v96 = specialized TrackingInfoPB._StorageClass.init(copying:)(v95);
    swift_release();
    *v53 = v96;
    swift_release();
  }
  v97 = (_QWORD *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  swift_beginAccess();
  *v97 = v85;
  swift_bridgeObjectRelease();
  if (v91 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_77;
  if (v91 > 0x7FFFFFFF)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v98 = swift_retain();
    v99 = specialized TrackingInfoPB._StorageClass.init(copying:)(v98);
    swift_release();
    *v53 = v99;
    swift_release();
  }
  v100 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  swift_beginAccess();
  *v100 = v91;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v101 = swift_retain();
    v102 = specialized TrackingInfoPB._StorageClass.init(copying:)(v101);
    swift_release();
    *v53 = v102;
    swift_release();
  }
  v103 = (_BYTE *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  swift_beginAccess();
  *v103 = v189;
  v104 = swift_bridgeObjectRetain();
  v105 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_s5Int32V_AF10Matrix2dPBVts5NeverOTg5048_s5Hands12TrackingInfoV10toProtoBufAA0bC2PBVyFs5h6V_AA08i8G0VtAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(v104);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v105 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Matrix2dPB>);
    v106 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v106 = MEMORY[0x24BEE4B00];
  }
  v211[0] = v106;
  v107 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v107, 1, v211);
  swift_bridgeObjectRelease();
  v108 = v211[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v109 = swift_retain();
    v110 = specialized TrackingInfoPB._StorageClass.init(copying:)(v109);
    swift_release();
    *v53 = v110;
    swift_release();
  }
  v111 = (uint64_t *)(*v53
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  swift_beginAccess();
  *v111 = v108;
  swift_bridgeObjectRelease();
  v112 = v191;
  if (v191 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_79;
  if (v191 > 0x7FFFFFFF)
  {
LABEL_80:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v113 = swift_retain();
    v114 = specialized TrackingInfoPB._StorageClass.init(copying:)(v113);
    swift_release();
    *v53 = v114;
    swift_release();
  }
  v115 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
  swift_beginAccess();
  *v115 = v112;
  v116 = swift_isUniquelyReferenced_nonNull_native();
  v117 = (uint64_t)v181;
  if ((v116 & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v118 = swift_retain();
    v119 = specialized TrackingInfoPB._StorageClass.init(copying:)(v118);
    swift_release();
    *v53 = v119;
    swift_release();
  }
  v120 = (_BYTE *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
  swift_beginAccess();
  *v120 = v178;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v121 = swift_retain();
    v122 = specialized TrackingInfoPB._StorageClass.init(copying:)(v121);
    swift_release();
    *v53 = v122;
    swift_release();
  }
  v123 = (_BYTE *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
  swift_beginAccess();
  *v123 = v179;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v124 = swift_retain();
    v125 = specialized TrackingInfoPB._StorageClass.init(copying:)(v124);
    swift_release();
    *v53 = v125;
    swift_release();
  }
  v126 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
  swift_beginAccess();
  *v126 = v48;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v127 = swift_retain();
    v128 = specialized TrackingInfoPB._StorageClass.init(copying:)(v127);
    swift_release();
    *v53 = v128;
    swift_release();
  }
  v129 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
  swift_beginAccess();
  *v129 = v47;
  UnknownStorage.init()();
  v130 = DWORD2(v180);
  *(_QWORD *)v117 = v180;
  *(_DWORD *)(v117 + 8) = v130;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v131 = swift_retain();
    v132 = specialized TrackingInfoPB._StorageClass.init(copying:)(v131);
    swift_release();
    *v53 = v132;
    swift_release();
  }
  v133 = *v53;
  outlined init with take of Matrix2dPB(v117, v90, type metadata accessor for Coordinate3DPB);
  v134 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v182 + 56);
  v134(v90, 0, 1, v84);
  outlined init with take of ImageData?(v90, v65, &demangling cache variable for type metadata for Coordinate3DPB?);
  v135 = v133
       + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v65, v135, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v136 = swift_retain();
    v137 = specialized TrackingInfoPB._StorageClass.init(copying:)(v136);
    swift_release();
    *v53 = v137;
    swift_release();
  }
  v138 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
  swift_beginAccess();
  *v138 = v49;
  v139 = swift_isUniquelyReferenced_nonNull_native();
  v140 = (uint64_t)v185;
  if ((v139 & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v141 = swift_retain();
    v142 = specialized TrackingInfoPB._StorageClass.init(copying:)(v141);
    swift_release();
    *v53 = v142;
    swift_release();
  }
  v143 = (_BYTE *)(*v53
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
  swift_beginAccess();
  *v143 = v183;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v144 = swift_retain();
    v145 = specialized TrackingInfoPB._StorageClass.init(copying:)(v144);
    swift_release();
    *v53 = v145;
    swift_release();
  }
  v146 = (_QWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
  swift_beginAccess();
  *v146 = v184;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v147 = swift_retain();
    v148 = specialized TrackingInfoPB._StorageClass.init(copying:)(v147);
    swift_release();
    *v53 = v148;
    swift_release();
  }
  v149 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
  swift_beginAccess();
  *v149 = v50;
  UnknownStorage.init()();
  v150 = DWORD2(v205);
  *(_QWORD *)v140 = v205;
  *(_DWORD *)(v140 + 8) = v150;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v151 = swift_retain();
    v152 = specialized TrackingInfoPB._StorageClass.init(copying:)(v151);
    swift_release();
    *v53 = v152;
    swift_release();
  }
  v153 = DWORD2(v205);
  v154 = *v53;
  outlined init with take of Matrix2dPB(v140, v90, type metadata accessor for Coordinate3DPB);
  v134(v90, 0, 1, v84);
  outlined init with take of ImageData?(v90, v65, &demangling cache variable for type metadata for Coordinate3DPB?);
  v155 = v154 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v65, v155, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v156 = swift_retain();
    v157 = specialized TrackingInfoPB._StorageClass.init(copying:)(v156);
    swift_release();
    *v53 = v157;
    swift_release();
  }
  v158 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
  swift_beginAccess();
  *v158 = v51;
  v159 = (uint64_t)v188;
  UnknownStorage.init()();
  *(_QWORD *)v159 = v205;
  *(_DWORD *)(v159 + 8) = v153;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v160 = swift_retain();
    v161 = specialized TrackingInfoPB._StorageClass.init(copying:)(v160);
    swift_release();
    *v53 = v161;
    swift_release();
  }
  v162 = *v53;
  outlined init with take of Matrix2dPB(v159, v90, type metadata accessor for Coordinate3DPB);
  v134(v90, 0, 1, v84);
  outlined init with take of ImageData?(v90, v65, &demangling cache variable for type metadata for Coordinate3DPB?);
  v163 = v162 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v65, v163, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v164 = swift_retain();
    v165 = specialized TrackingInfoPB._StorageClass.init(copying:)(v164);
    swift_release();
    *v53 = v165;
    swift_release();
  }
  v166 = *v53
       + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection;
  swift_beginAccess();
  *(_QWORD *)v166 = v187;
  *(_BYTE *)(v166 + 8) = v186;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v167 = swift_retain();
    v168 = specialized TrackingInfoPB._StorageClass.init(copying:)(v167);
    swift_release();
    *v53 = v168;
    swift_release();
  }
  v169 = (_DWORD *)(*v53
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
  result = swift_beginAccess();
  *v169 = v52;
  return result;
}

uint64_t TrackingInfo.almostEqual(to:withThreshold:)(uint64_t *a1, double a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  float v42;
  float v43;
  char v44;
  int v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  void *v63;
  uint64_t v64;
  float v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 *v81;
  uint64_t result;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  Swift::String v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  Swift::String v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  Swift::String v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  Swift::String v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  Swift::String v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  Swift::String v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  Swift::String v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int64_t v152;
  int64_t v153;
  unint64_t v154;
  unint64_t v155;
  int64_t v156;
  unint64_t v157;
  int64_t v158;
  float32x2_t *v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  float32x2_t v165;
  float32x2_t *v166;
  float32x2_t v167;
  float32x2_t v168;
  uint64_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  uint64_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  Swift::String v177;
  Swift::String v178;
  Swift::String v179;
  Swift::String v180;
  Swift::String v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD v218[7];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *((float *)a1 + 6);
  v8 = *((unsigned __int8 *)a1 + 28);
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v208 = a1[7];
  v12 = a1[8];
  v13 = *(_OWORD *)(a1 + 11);
  v218[0] = *(_OWORD *)(a1 + 9);
  v218[1] = v13;
  v218[2] = *(_OWORD *)(a1 + 13);
  v14 = *((unsigned __int8 *)a1 + 128);
  v15 = *((unsigned __int8 *)a1 + 129);
  v16 = a1[17];
  v17 = a1[18];
  v18 = *((unsigned __int8 *)a1 + 152);
  v19 = a1[20];
  v20 = a1[21];
  v21 = *((unsigned __int8 *)a1 + 176);
  v22 = *((unsigned __int8 *)a1 + 177);
  v24 = *((float *)a1 + 45);
  v23 = *((float *)a1 + 46);
  v25 = *((unsigned __int8 *)a1 + 228);
  v26 = a1[29];
  v27 = *((float *)a1 + 60);
  v29 = *v2;
  v28 = v2[1];
  v30 = v2[2];
  v31 = *((float *)v2 + 6);
  v32 = *((unsigned __int8 *)v2 + 28);
  v33 = v2[4];
  v34 = v2[5];
  v35 = v2[6];
  v36 = v2[7];
  v37 = v2[8];
  v38 = *(_OWORD *)(v2 + 11);
  v218[3] = *(_OWORD *)(v2 + 9);
  v218[4] = v38;
  v218[5] = *(_OWORD *)(v2 + 13);
  if (v30 != v6)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    v49 = v6;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000011;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CBFF0;
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 32;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v217 = v49;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 181;
    goto LABEL_25;
  }
  if (v28 != v5)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD00000000000001CLL;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC010;
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 32;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    v217 = v5;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 185;
    goto LABEL_25;
  }
  v207 = v6;
  if (v29 != v4)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    v56 = v4;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0x676E696B63617254;
    *((_QWORD *)&v209 + 1) = 0xE900000000000020;
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._countAndFlagsBits = 0xD000000000000021;
    v58._object = (void *)0x800000023D9CC030;
    String.append(_:)(v58);
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v60._countAndFlagsBits = 8236;
    v60._object = (void *)0xE200000000000000;
    String.append(_:)(v60);
    v217 = v56;
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 190;
    goto LABEL_25;
  }
  v205 = v11;
  v206 = v12;
  v39 = v9;
  v203 = v14;
  v204 = v32;
  v40 = v8;
  v191 = v21;
  v184 = v26;
  v185 = v19;
  v201 = v15;
  v202 = *((unsigned __int8 *)v2 + 128);
  v200 = *((unsigned __int8 *)v2 + 129);
  v198 = v2[17];
  v199 = v16;
  v196 = v2[18];
  v197 = v17;
  v194 = *((unsigned __int8 *)v2 + 152);
  v195 = v18;
  v41 = v2[20];
  v192 = v2[21];
  v193 = v20;
  v189 = v22;
  v190 = *((unsigned __int8 *)v2 + 176);
  v187 = v25;
  v188 = *((unsigned __int8 *)v2 + 177);
  v42 = *((float *)v2 + 45);
  v43 = *((float *)v2 + 46);
  v186 = *((unsigned __int8 *)v2 + 228);
  v183 = v2[29];
  v182 = *((float *)v2 + 60);
  if ((TrackingBuffers.almostEqual(to:withThreshold:)((uint64_t *)v218, a2) & 1) == 0)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000023;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC060;
    v217 = v207;
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 195;
    goto LABEL_25;
  }
  if (v37)
  {
    if (v206)
    {
      *(_QWORD *)&v213 = v33;
      *((_QWORD *)&v213 + 1) = v34;
      v214 = v35;
      v215 = v36;
      v216 = v37;
      *(_QWORD *)&v209 = v39;
      *((_QWORD *)&v209 + 1) = v10;
      v210 = v205;
      v211 = v208;
      v212 = v206;
      v44 = TrackingPrediction.almostEqual(to:withThreshold:)((uint64_t)&v209, a2);
      v45 = v40;
      if ((v44 & 1) == 0)
      {
        v213 = xmmword_23D9A8970;
        v214 = 0;
        v215 = 0;
        *(_QWORD *)&v209 = 0;
        *((_QWORD *)&v209 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v209 = 0xD000000000000027;
        *((_QWORD *)&v209 + 1) = 0x800000023D9CC290;
        v217 = v207;
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v211 = MEMORY[0x24BEE0D00];
        v47 = MEMORY[0x24BEE4AF8];
        v48 = 200;
LABEL_25:
        specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9CBF80, v48, (uint64_t *)&v213, (uint64_t)&v209, v47);
        v81 = &v209;
        goto LABEL_26;
      }
      goto LABEL_15;
    }
    v63 = (void *)0xE500000000000000;
    v64 = 0x65736C6166;
LABEL_18:
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000027;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC290;
    v217 = v207;
    v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v74);
    swift_bridgeObjectRelease();
    v75._countAndFlagsBits = 8250;
    v75._object = (void *)0xE200000000000000;
    String.append(_:)(v75);
    v76._countAndFlagsBits = v64;
    v76._object = v63;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v77._countAndFlagsBits = 8236;
    v77._object = (void *)0xE200000000000000;
    String.append(_:)(v77);
    if (v206)
      v78 = 0x65736C6166;
    else
      v78 = 1702195828;
    if (v206)
      v79 = 0xE500000000000000;
    else
      v79 = 0xE400000000000000;
    v80 = v79;
    String.append(_:)(*(Swift::String *)&v78);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 204;
    goto LABEL_25;
  }
  v45 = v40;
  if (v206)
  {
    v63 = (void *)0xE400000000000000;
    v64 = 1702195828;
    goto LABEL_18;
  }
LABEL_15:
  v65 = a2;
  if (vabds_f32(v31, v7) > v65)
  {
    *(_QWORD *)&v213 = 0;
    *((_QWORD *)&v213 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v66._countAndFlagsBits = 0x676E696B63617254;
    v66._object = (void *)0xE900000000000020;
    String.append(_:)(v66);
    *(_QWORD *)&v209 = v207;
    v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 0xD000000000000016;
    v68._object = (void *)0x800000023D9CC090;
    String.append(_:)(v68);
    Float.write<A>(to:)();
    v69._countAndFlagsBits = 8236;
    v69._object = (void *)0xE200000000000000;
    String.append(_:)(v69);
    Float.write<A>(to:)();
    v215 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v209 = xmmword_23D9A8970;
    v210 = 0;
    v211 = 0;
    v70 = MEMORY[0x24BEE4AF8];
    v71 = 1;
    v72 = 2;
    v73 = 209;
LABEL_42:
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(v71, v72, (uint64_t *)&v209, 0xD000000000000061, 0x800000023D9CBF80, v73, (uint64_t)&v213, v70);
    v81 = &v213;
LABEL_26:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v81);
    return 0;
  }
  if (v45 != v204)
  {
    *(_QWORD *)&v213 = 0;
    *((_QWORD *)&v213 + 1) = 0xE000000000000000;
    v83 = v45;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v213 = 0xD000000000000014;
    *((_QWORD *)&v213 + 1) = 0x800000023D9CC0B0;
    if (v204)
      v84 = 1702195828;
    else
      v84 = 0x65736C6166;
    if (v204)
      v85 = 0xE400000000000000;
    else
      v85 = 0xE500000000000000;
    v86 = v85;
    String.append(_:)(*(Swift::String *)&v84);
    swift_bridgeObjectRelease();
    v87._countAndFlagsBits = 32;
    v87._object = (void *)0xE100000000000000;
    String.append(_:)(v87);
    if (v83)
      v88 = 1702195828;
    else
      v88 = 0x65736C6166;
    if (v83)
      v89 = 0xE400000000000000;
    else
      v89 = 0xE500000000000000;
    v90 = v89;
    String.append(_:)(*(Swift::String *)&v88);
    swift_bridgeObjectRelease();
    v215 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v209 = xmmword_23D9A8970;
    v210 = 0;
    v211 = 0;
    v70 = MEMORY[0x24BEE4AF8];
    v71 = 4;
    v72 = 1;
    v73 = 213;
    goto LABEL_42;
  }
  if (v203 != v202)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000014;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC0D0;
    if (v202)
      v91 = 1702195828;
    else
      v91 = 0x65736C6166;
    if (v202)
      v92 = 0xE400000000000000;
    else
      v92 = 0xE500000000000000;
    v93 = v92;
    String.append(_:)(*(Swift::String *)&v91);
    swift_bridgeObjectRelease();
    v94._countAndFlagsBits = 32;
    v94._object = (void *)0xE100000000000000;
    String.append(_:)(v94);
    if (v203)
      v95 = 1702195828;
    else
      v95 = 0x65736C6166;
    if (v203)
      v96 = 0xE400000000000000;
    else
      v96 = 0xE500000000000000;
    v97 = v96;
    String.append(_:)(*(Swift::String *)&v95);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 217;
    goto LABEL_25;
  }
  if (v201 != v200)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD00000000000001DLL;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC0F0;
    if (v200)
      v98 = 1702195828;
    else
      v98 = 0x65736C6166;
    if (v200)
      v99 = 0xE400000000000000;
    else
      v99 = 0xE500000000000000;
    v100 = v99;
    String.append(_:)(*(Swift::String *)&v98);
    swift_bridgeObjectRelease();
    v101._countAndFlagsBits = 32;
    v101._object = (void *)0xE100000000000000;
    String.append(_:)(v101);
    if (v201)
      v102 = 1702195828;
    else
      v102 = 0x65736C6166;
    if (v201)
      v103 = 0xE400000000000000;
    else
      v103 = 0xE500000000000000;
    v104 = v103;
    String.append(_:)(*(Swift::String *)&v102);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 221;
    goto LABEL_25;
  }
  if (v198 != v199)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000029;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC110;
    v217 = v198;
    v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    v113._countAndFlagsBits = 32;
    v113._object = (void *)0xE100000000000000;
    String.append(_:)(v113);
    v217 = v199;
    v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 225;
    goto LABEL_25;
  }
  if ((specialized static Array<A>.== infix(_:_:)(v196, v197) & 1) == 0)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000015;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC140;
    v115 = swift_bridgeObjectRetain();
    v116._countAndFlagsBits = MEMORY[0x2426374F8](v115, &type metadata for CameraSource);
    String.append(_:)(v116);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v117._countAndFlagsBits = 32;
    v117._object = (void *)0xE100000000000000;
    String.append(_:)(v117);
    v118 = swift_bridgeObjectRetain();
    v119._countAndFlagsBits = MEMORY[0x2426374F8](v118, &type metadata for CameraSource);
    String.append(_:)(v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 229;
    goto LABEL_25;
  }
  if (v195 != v194)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000013;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC160;
    if (v194)
      v105 = 1702195828;
    else
      v105 = 0x65736C6166;
    if (v194)
      v106 = 0xE400000000000000;
    else
      v106 = 0xE500000000000000;
    v107 = v106;
    String.append(_:)(*(Swift::String *)&v105);
    swift_bridgeObjectRelease();
    v108._countAndFlagsBits = 32;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    if (v195)
      v109 = 1702195828;
    else
      v109 = 0x65736C6166;
    if (v195)
      v110 = 0xE400000000000000;
    else
      v110 = 0xE500000000000000;
    v111 = v110;
    String.append(_:)(*(Swift::String *)&v109);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 233;
    goto LABEL_25;
  }
  if (v192 != v193)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000027;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC180;
    v217 = v192;
    v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    v128._countAndFlagsBits = 32;
    v128._object = (void *)0xE100000000000000;
    String.append(_:)(v128);
    v217 = v193;
    v129._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v129);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 238;
    goto LABEL_25;
  }
  if (v191 != v190)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000019;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC1B0;
    if (v190)
      v120 = 1702195828;
    else
      v120 = 0x65736C6166;
    if (v190)
      v121 = 0xE400000000000000;
    else
      v121 = 0xE500000000000000;
    v122 = v121;
    String.append(_:)(*(Swift::String *)&v120);
    swift_bridgeObjectRelease();
    v123._countAndFlagsBits = 32;
    v123._object = (void *)0xE100000000000000;
    String.append(_:)(v123);
    if (v191)
      v124 = 1702195828;
    else
      v124 = 0x65736C6166;
    if (v191)
      v125 = 0xE400000000000000;
    else
      v125 = 0xE500000000000000;
    v126 = v125;
    String.append(_:)(*(Swift::String *)&v124);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 242;
    goto LABEL_25;
  }
  if (v189 != v188)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD000000000000014;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC1D0;
    if (v188)
      v130 = 1702195828;
    else
      v130 = 0x65736C6166;
    if (v188)
      v131 = 0xE400000000000000;
    else
      v131 = 0xE500000000000000;
    v132 = v131;
    String.append(_:)(*(Swift::String *)&v130);
    swift_bridgeObjectRelease();
    v133._countAndFlagsBits = 32;
    v133._object = (void *)0xE100000000000000;
    String.append(_:)(v133);
    if (v189)
      v134 = 1702195828;
    else
      v134 = 0x65736C6166;
    if (v189)
      v135 = 0xE400000000000000;
    else
      v135 = 0xE500000000000000;
    v136 = v135;
    String.append(_:)(*(Swift::String *)&v134);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 246;
    goto LABEL_25;
  }
  if (v42 != v24)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v144._countAndFlagsBits = 0xD000000000000017;
    v144._object = (void *)0x800000023D9CC1F0;
    String.append(_:)(v144);
    Float.write<A>(to:)();
    v145._countAndFlagsBits = 32;
    v145._object = (void *)0xE100000000000000;
    String.append(_:)(v145);
    Float.write<A>(to:)();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 250;
    goto LABEL_25;
  }
  if (v43 != v23)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v146._countAndFlagsBits = 0xD00000000000001BLL;
    v146._object = (void *)0x800000023D9CC210;
    String.append(_:)(v146);
    Float.write<A>(to:)();
    v147._countAndFlagsBits = 32;
    v147._object = (void *)0xE100000000000000;
    String.append(_:)(v147);
    Float.write<A>(to:)();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 254;
    goto LABEL_25;
  }
  if (v187 != v186)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD00000000000001CLL;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC230;
    if (v186)
      v137 = 1702195828;
    else
      v137 = 0x65736C6166;
    if (v186)
      v138 = 0xE400000000000000;
    else
      v138 = 0xE500000000000000;
    v139 = v138;
    String.append(_:)(*(Swift::String *)&v137);
    swift_bridgeObjectRelease();
    v140._countAndFlagsBits = 32;
    v140._object = (void *)0xE100000000000000;
    String.append(_:)(v140);
    if (v187)
      v141 = 1702195828;
    else
      v141 = 0x65736C6166;
    if (v187)
      v142 = 0xE400000000000000;
    else
      v142 = 0xE500000000000000;
    v143 = v142;
    String.append(_:)(*(Swift::String *)&v141);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 258;
    goto LABEL_25;
  }
  if (v183 != v184)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209 = 0xD00000000000001CLL;
    *((_QWORD *)&v209 + 1) = 0x800000023D9CC250;
    v217 = v183;
    v177._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v177);
    swift_bridgeObjectRelease();
    v178._countAndFlagsBits = 32;
    v178._object = (void *)0xE100000000000000;
    String.append(_:)(v178);
    v217 = v184;
    v179._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v179);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 262;
    goto LABEL_25;
  }
  if (v182 != v27)
  {
    v213 = xmmword_23D9A8970;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v209 = 0;
    *((_QWORD *)&v209 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v180._countAndFlagsBits = 0xD000000000000019;
    v180._object = (void *)0x800000023D9CC270;
    String.append(_:)(v180);
    Float.write<A>(to:)();
    v181._countAndFlagsBits = 32;
    v181._object = (void *)0xE100000000000000;
    String.append(_:)(v181);
    Float.write<A>(to:)();
    v211 = MEMORY[0x24BEE0D00];
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 266;
    goto LABEL_25;
  }
  v148 = v41 + 64;
  v149 = 1 << *(_BYTE *)(v41 + 32);
  v150 = -1;
  if (v149 < 64)
    v150 = ~(-1 << v149);
  v151 = v150 & *(_QWORD *)(v41 + 64);
  v152 = (unint64_t)(v149 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v153 = 0;
  while (1)
  {
    if (v151)
    {
      v154 = __clz(__rbit64(v151));
      v151 &= v151 - 1;
      v155 = v154 | (v153 << 6);
      goto LABEL_159;
    }
    v156 = v153 + 1;
    if (__OFADD__(v153, 1))
    {
      __break(1u);
      goto LABEL_174;
    }
    if (v156 >= v152)
      goto LABEL_172;
    v157 = *(_QWORD *)(v148 + 8 * v156);
    ++v153;
    if (!v157)
    {
      v153 = v156 + 1;
      if (v156 + 1 >= v152)
        goto LABEL_172;
      v157 = *(_QWORD *)(v148 + 8 * v153);
      if (!v157)
      {
        v153 = v156 + 2;
        if (v156 + 2 >= v152)
          goto LABEL_172;
        v157 = *(_QWORD *)(v148 + 8 * v153);
        if (!v157)
          break;
      }
    }
LABEL_158:
    v151 = (v157 - 1) & v157;
    v155 = __clz(__rbit64(v157)) + (v153 << 6);
LABEL_159:
    if (!*(_QWORD *)(v185 + 16))
      goto LABEL_169;
    v159 = *(float32x2_t **)(*(_QWORD *)(v41 + 56) + 8 * v155);
    v160 = *(_QWORD *)(v41 + 48) + 16 * v155;
    v161 = *(_BYTE *)(v160 + 8);
    v162 = *(_QWORD *)v160;
    swift_bridgeObjectRetain();
    v163 = specialized __RawDictionaryStorage.find<A>(_:)(v162, v161);
    if ((v164 & 1) == 0)
    {
LABEL_168:
      swift_bridgeObjectRelease();
LABEL_169:
      swift_release();
      return 0;
    }
    v165 = v159[2];
    if (v165)
    {
      v166 = *(float32x2_t **)(*(_QWORD *)(v185 + 56) + 8 * v163);
      v167 = v166[2];
      if (v167)
      {
        v168 = vsub_f32(v159[4], v166[4]);
        if (sqrtf(vaddv_f32(vmul_f32(v168, v168))) >= a2)
          goto LABEL_168;
        v169 = *(_QWORD *)&v167 - 1;
        v170 = v166 + 5;
        v171 = v159 + 5;
        v172 = *(_QWORD *)&v165 - 1;
        while (v172 && v169)
        {
          v173 = *v171++;
          v174 = v173;
          v175 = *v170++;
          v176 = vsub_f32(v174, v175);
          --v169;
          --v172;
          if (sqrtf(vaddv_f32(vmul_f32(v176, v176))) >= a2)
            goto LABEL_168;
        }
      }
    }
    result = swift_bridgeObjectRelease();
  }
  v158 = v156 + 3;
  if (v158 >= v152)
  {
LABEL_172:
    swift_release();
    return 1;
  }
  v157 = *(_QWORD *)(v148 + 8 * v158);
  if (v157)
  {
    v153 = v158;
    goto LABEL_158;
  }
  while (1)
  {
    v153 = v158 + 1;
    if (__OFADD__(v158, 1))
      break;
    if (v153 >= v152)
      goto LABEL_172;
    v157 = *(_QWORD *)(v148 + 8 * v153);
    ++v158;
    if (v157)
      goto LABEL_158;
  }
LABEL_174:
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrackingInfo(uint64_t a1, uint64_t *a2)
{
  return TrackingInfo.almostEqual(to:withThreshold:)(a2, 0.00001) & 1;
}

uint64_t TrackingInfos.init(protoBuf:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE v27[320];
  uint64_t v28;

  v4 = type metadata accessor for TrackingInfoPB(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v10);
  v12 = (char *)&v23 - v11;
  v13 = *a1;
  v14 = a1[1];
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v24 = *a1;
    v25 = a1;
    v26 = a2;
    v28 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v16 = *(unsigned __int8 *)(v5 + 80);
    v23 = v14;
    v17 = v14 + ((v16 + 32) & ~v16);
    v18 = *(_QWORD *)(v5 + 72);
    v19 = v28;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v17, (uint64_t)v12, type metadata accessor for TrackingInfoPB);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v12, (uint64_t)v9, type metadata accessor for TrackingInfoPB);
      TrackingInfo.init(protoBuf:)((uint64_t)v9, v27);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for TrackingInfoPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v28;
      }
      v21 = *(_QWORD *)(v19 + 16);
      v20 = *(_QWORD *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v19 = v28;
      }
      *(_QWORD *)(v19 + 16) = v21 + 1;
      memcpy((void *)(v19 + 320 * v21 + 32), v27, 0x138uLL);
      v17 += v18;
      --v15;
    }
    while (v15);
    a1 = v25;
    a2 = v26;
    v13 = v24;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for TrackingInfosPB);
  result = swift_bridgeObjectRelease();
  *a2 = v13;
  a2[1] = v19;
  return result;
}

uint64_t TrackingInfos.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[312];
  uint64_t v19;

  v3 = type metadata accessor for TrackingInfoPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  type metadata accessor for TrackingInfosPB(0);
  result = UnknownStorage.init()();
  *a1 = v8;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v17 = a1;
    v19 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = 32;
    v12 = v19;
    do
    {
      memcpy(v18, (const void *)(v9 + v13), sizeof(v18));
      TrackingInfo.toProtoBuf()((uint64_t)v7);
      v19 = v12;
      v15 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v12 = v19;
      }
      *(_QWORD *)(v12 + 16) = v15 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v7, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, type metadata accessor for TrackingInfoPB);
      v13 += 320;
      --v11;
    }
    while (v11);
    result = swift_bridgeObjectRelease();
    a1 = v17;
  }
  a1[1] = v12;
  return result;
}

uint64_t specialized static TrackingInfos.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  const void *v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[288];
  __int128 v19;
  uint64_t v20;
  _BYTE v21[288];
  _BYTE __dst[288];
  __int128 v23;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 != *(_QWORD *)(v3 + 16))
    return 0;
  if (v4)
  {
    v5 = v2 + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (__int128 *)(v3 + 32);
    v8 = (const void *)(v3 + 56);
    v9 = (_QWORD *)(v3 + 376);
    while (2)
    {
      v10 = (__int128 *)(v5 + 320 * v6);
      v11 = *((_QWORD *)v10 + 2);
      ++v6;
      v23 = *v7;
      v12 = *(_QWORD *)(v3 + 48);
      memcpy(__dst, v8, sizeof(__dst));
      v13 = 1;
      while (v12 != v11)
      {
        if (v4 == v13)
          goto LABEL_15;
        v23 = *(_OWORD *)(v9 - 3);
        v12 = *(v9 - 1);
        result = (uint64_t)memcpy(__dst, v9, sizeof(__dst));
        v9 += 40;
        if (__OFADD__(v13++, 1))
        {
          __break(1u);
          return result;
        }
      }
      v19 = *v10;
      v20 = v11;
      memcpy(v21, (char *)v10 + 24, sizeof(v21));
      v16 = v23;
      v17 = v11;
      memcpy(v18, __dst, sizeof(v18));
      if ((TrackingInfo.almostEqual(to:withThreshold:)((uint64_t *)&v16, 0.00001) & 1) == 0)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v6 != v4)
      {
        v7 = (__int128 *)(v3 + 32);
        v5 = v2 + 32;
        v9 = (_QWORD *)(v3 + 376);
        v8 = (const void *)(v3 + 56);
        if (v6 < *(_QWORD *)(v2 + 16))
          continue;
        __break(1u);
        return 0;
      }
      break;
    }
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in TrackingInfos()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
}

_QWORD *initializeBufferWithCopyOfBuffer for TrackingInfos(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TrackingInfos(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TrackingInfos(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TrackingInfos()
{
  return &type metadata for TrackingInfos;
}

uint64_t destroy for TrackingInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingInfo(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v6;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v7 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v7;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_QWORD *)(a1 + 180) = *(_QWORD *)(a2 + 180);
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v9 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v9;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  v10 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v10;
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  v4 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v4;
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  return a1;
}

void *__swift_memcpy312_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for TrackingInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  swift_release();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_QWORD *)(a1 + 180) = *(_QWORD *)(a2 + 180);
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v9 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v9;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 312))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 312) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 312) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingInfo()
{
  return &type metadata for TrackingInfo;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in TrackingInfo()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
}

uint64_t static HandsUtils.project(calibration:point3d:)(double *a1, int8x16_t a2)
{
  char v3;
  double v4;
  int8x16_t v5;
  int8x16_t v7[3];

  v3 = *(_BYTE *)a1;
  v4 = a1[1];
  v5 = *(int8x16_t *)(a1 + 4);
  v7[0] = *(int8x16_t *)(a1 + 2);
  v7[1] = v5;
  v7[2] = *(int8x16_t *)(a1 + 6);
  if ((v3 & 1) != 0)
    return specialized static KannalaCamera.project(imageSize:intrinsics:distortion:point3d:)(v7, *(float32x2_t *)&v4, a1[8], a2);
  else
    return specialized static RectilinearCamera.project(imageSize:intrinsics:point3d:)((uint64_t)v7, v4, (__n128)a2);
}

uint64_t HandsUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HandsUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized static RectilinearCamera.project(imageSize:intrinsics:point3d:)(uint64_t a1, double a2, __n128 a3)
{
  __int128 v3;
  uint64_t v4;

  if (a3.n128_f32[2] >= 0.0)
    return 0;
  v3 = *(_OWORD *)(a1 + 32);
  *(float *)&v4 = (float)(*(float *)&v3 - (float)((float)(a3.n128_f32[0] / a3.n128_f32[2]) * *(float *)a1))
                / *(float *)&a2;
  if (*(float *)&v4 < 0.0 || *(float *)&v4 >= *(float *)&a2)
    return 0;
  *((float *)&v4 + 1) = (float)(*((float *)&v3 + 1)
                              + (float)((float)(a3.n128_f32[1] / a3.n128_f32[2]) * *(float *)(a1 + 20)))
                      / *((float *)&a2 + 1);
  if (*((float *)&v4 + 1) >= *((float *)&a2 + 1) || *((float *)&v4 + 1) < 0.0)
    return 0;
  else
    return v4;
}

uint64_t specialized static KannalaCamera.project(imageSize:intrinsics:distortion:point3d:)(int8x16_t *a1, float32x2_t a2, double a3, int8x16_t a4)
{
  int8x16_t v5;
  float32x2_t v6;
  uint64_t result;
  int8x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a1[1];
  v10 = a1[2];
  v5 = *a1;
  v11 = 0;
  a4.i32[1] = vnegq_f32((float32x4_t)vextq_s8(a4, v9, 4uLL)).u32[0];
  objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, 1, &v11, *(double *)a4.i64, *(double *)v5.i64, *(double *)v9.i64, *(double *)v10.i64, a3, *(double *)&a2);
  result = 0;
  if (v11 == 1 && v6.f32[0] >= 0.0)
  {
    v8 = (int8x8_t)vcgt_f32(a2, v6);
    if ((v8.i8[0] & 1) != 0)
    {
      if ((v6.f32[1] < 0.0) | vmvn_s8(v8).i8[4] & 1)
        return 0;
      else
        return (uint64_t)v6;
    }
  }
  return result;
}

uint64_t type metadata accessor for RectilinearCamera()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for KannalaCamera()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HandsUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for HandsUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12HandPresenceV8CategoryOSfG_AHs5NeverOTg5010_s5Hands12ef2V8g31OSfACIgyyr_AE3key_Sf5valuetACs5H100OIegnrzr_TR055_s5Hands0A6FADataV15appendPoseFrameyyAA0A7KitDataVFAA12bc4VAH8D11O_SftXEfU2_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = type metadata accessor for HandPresence(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (!v7)
    return v8;
  v34 = v6;
  v29[1] = v1;
  v37 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v8 = v37;
  result = specialized Dictionary.startIndex.getter(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v30 = a1 + 80;
  v31 = v7;
  v32 = v10;
  v33 = a1 + 64;
  v14 = (uint64_t)v34;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_24;
    v18 = *(_QWORD *)(a1 + 48) + 16 * v11;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    v21 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v11);
    UnknownStorage.init()();
    *(_QWORD *)v14 = v19;
    *(_BYTE *)(v14 + 8) = v20;
    *(_DWORD *)(v14 + 12) = v21;
    v37 = v8;
    v23 = *(_QWORD *)(v8 + 16);
    v22 = *(_QWORD *)(v8 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v8 = v37;
    }
    *(_QWORD *)(v8 + 16) = v23 + 1;
    result = outlined init with take of Matrix2dPB(v14, v8+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v23, type metadata accessor for HandPresence);
    v15 = 1 << *(_BYTE *)(a1 + 32);
    if (v11 >= v15)
      goto LABEL_25;
    v13 = v33;
    v24 = *(_QWORD *)(v33 + 8 * v17);
    if ((v24 & (1 << v11)) == 0)
      goto LABEL_26;
    LODWORD(v10) = v32;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v32)
      goto LABEL_27;
    v25 = v24 & (-2 << (v11 & 0x3F));
    if (v25)
    {
      v15 = __clz(__rbit64(v25)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v16 = v31;
    }
    else
    {
      v26 = v17 + 1;
      v27 = (unint64_t)(v15 + 63) >> 6;
      v16 = v31;
      if (v17 + 1 < v27)
      {
        v28 = *(_QWORD *)(v33 + 8 * v26);
        if (v28)
        {
LABEL_20:
          v15 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v17)
          {
            v28 = *(_QWORD *)(v30 + 8 * v17++);
            if (v28)
            {
              v26 = v17 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v12;
    v11 = v15;
    if (v12 == v16)
      return v8;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for faMetrics()
{
  uint64_t result;

  type metadata accessor for FAMetrics();
  result = swift_initStaticObject();
  faMetrics = result;
  return result;
}

uint64_t Orientation3DPB.init(hand:gtHand:joint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v8;
  float v9;
  float v10;
  double v11;
  uint64_t result;

  *(_QWORD *)(a4 + 16) = 0;
  type metadata accessor for Orientation3DPB(0);
  UnknownStorage.init()();
  if (one-time initialization token for faMetrics != -1)
    swift_once();
  specialized FAMetrics.getJointRotationError(hand:gtHand:joint:axis:)(a1, a2, a3);
  *(double *)a4 = (float)((float)(v8 * 180.0) / 3.1416);
  specialized FAMetrics.getJointRotationError(hand:gtHand:joint:axis:)(a1, a2, a3);
  *(double *)(a4 + 8) = (float)((float)(v9 * 180.0) / 3.1416);
  specialized FAMetrics.getJointRotationError(hand:gtHand:joint:axis:)(a1, a2, a3);
  v11 = (float)((float)(v10 * 180.0) / 3.1416);
  outlined destroy of Matrix3x3PB(a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  result = outlined destroy of Matrix3x3PB(a1, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  *(double *)(a4 + 16) = v11;
  return result;
}

void Orientation3DPB.init(pose:joint:)(uint64_t *a1@<X0>, unint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  float32x4_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  v5 = *a1;
  type metadata accessor for Orientation3DPB(0);
  UnknownStorage.init()();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v5 + 16) > a2)
  {
    v6 = (__n128 *)(v5 + 144 * a2);
    v9 = v6[4];
    v10 = v6[3];
    v8 = v6[5];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(double *)v7.i64 = simd_float4x4.eulerAngles.getter(v10, v9, v8);
    *a3 = vcvtq_f64_f32(vdiv_f32(vmul_f32(*(float32x2_t *)v7.f32, (float32x2_t)vdup_n_s32(0x43340000u)), (float32x2_t)vdup_n_s32(0x40490FDAu)));
    a3[1].f64[0] = (float)(vmuls_lane_f32(180.0, v7, 2) / 3.1416);
    return;
  }
  __break(1u);
}

uint64_t PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t (*v90)(_QWORD *, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  float v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float v138;
  float v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _DWORD *v148;
  int v149;
  int v150;
  uint64_t v151;
  float64x2_t *v152;
  unint64_t v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  float64x2_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int (*v213)(_QWORD *, uint64_t, uint64_t);
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float64x2_t *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  float32x4_t v240;
  float32x4_t v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  float v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  unsigned int (*v260)(uint64_t, uint64_t, uint64_t);
  _QWORD *v261;
  float v262;
  float v263;
  double v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int (*v270)(_QWORD *, uint64_t, uint64_t);
  uint64_t v271;
  float v272;
  float v273;
  double v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int (*v279)(uint64_t, uint64_t, uint64_t);
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  float v285;
  float v286;
  double v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  float *v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  _QWORD *v305;
  float32x4_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  __int128 v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  float64x2_t *v332;
  float32x4_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t (*v339)(_QWORD *, uint64_t);
  uint64_t v340[90];
  _BYTE v341[552];

  v335 = a3;
  v336 = a2;
  v6 = type metadata accessor for TransformMatrixPB(0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v329 = (uint64_t)&v291 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Orientation3DPB(0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v299 = (uint64_t)&v291 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v332 = (float64x2_t *)((char *)&v291 - v14);
  v330 = type metadata accessor for Coordinate3DPB(0);
  MEMORY[0x24BDAC7A8](v330, v15);
  v331 = (char *)&v291 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v302 = (char *)&v291 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = (char *)&v291 - v22;
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = (char *)&v291 - v26;
  MEMORY[0x24BDAC7A8](v28, v29);
  v308 = (uint64_t)&v291 - v30;
  MEMORY[0x24BDAC7A8](v31, v32);
  v34 = (char *)&v291 - v33;
  MEMORY[0x24BDAC7A8](v35, v36);
  v309 = (uint64_t)&v291 - v37;
  MEMORY[0x24BDAC7A8](v38, v39);
  v304 = (char *)&v291 - v40;
  MEMORY[0x24BDAC7A8](v41, v42);
  v310 = (unint64_t *)((char *)&v291 - v43);
  MEMORY[0x24BDAC7A8](v44, v45);
  v303 = (char *)&v291 - v46;
  MEMORY[0x24BDAC7A8](v47, v48);
  v311 = (uint64_t)&v291 - v49;
  MEMORY[0x24BDAC7A8](v50, v51);
  v306.i64[0] = (uint64_t)&v291 - v52;
  MEMORY[0x24BDAC7A8](v53, v54);
  v307 = (unint64_t *)((char *)&v291 - v55);
  MEMORY[0x24BDAC7A8](v56, v57);
  v313 = (char *)&v291 - v58;
  MEMORY[0x24BDAC7A8](v59, v60);
  v327 = (uint64_t)&v291 - v61;
  MEMORY[0x24BDAC7A8](v62, v63);
  v312 = (uint64_t)&v291 - v64;
  MEMORY[0x24BDAC7A8](v65, v66);
  v328 = (uint64_t)&v291 - v67;
  MEMORY[0x24BDAC7A8](v68, v69);
  *(_QWORD *)&v314 = (char *)&v291 - v70;
  MEMORY[0x24BDAC7A8](v71, v72);
  v325 = (uint64_t)&v291 - v73;
  MEMORY[0x24BDAC7A8](v74, v75);
  v326 = (unint64_t)&v291 - v76;
  MEMORY[0x24BDAC7A8](v77, v78);
  v80 = (unint64_t *)((char *)&v291 - v79);
  MEMORY[0x24BDAC7A8](v81, v82);
  v84 = (unint64_t *)((char *)&v291 - v83);
  MEMORY[0x24BDAC7A8](v85, v86);
  v88 = (unint64_t *)((char *)&v291 - v87);
  memcpy(v341, a4, sizeof(v341));
  v337 = a1;
  outlined init with copy of (Int32, Matrix2dPB)(a1, (uint64_t)v88, &demangling cache variable for type metadata for HandDescriptor?);
  v89 = type metadata accessor for HandDescriptor();
  v90 = *(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 48);
  v338 = v89;
  v91 = v90(v88, 1);
  v339 = v90;
  v300 = v27;
  v301 = v23;
  v305 = v34;
  if (v91 == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v88, &demangling cache variable for type metadata for HandDescriptor?);
    v333.i32[0] = 0;
  }
  else
  {
    v93 = v88[2];
    v92 = v88[3];
    v94 = v88[4];
    v95 = v88[5];
    v96 = v88[6];
    v97 = v88[7];
    v98 = v88[8];
    v99 = v88[9];
    v100 = v88[10];
    v317 = v88[11];
    v318 = v100;
    v333.i64[0] = v92;
    v323 = v95;
    v324 = v94;
    v321 = v97;
    v322 = v96;
    v319 = v99;
    v320 = v98;
    outlined copy of HandPose?(v93);
    outlined destroy of Matrix3x3PB((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v93)
    {
      outlined consume of HandPose?(v93);
      v333.i32[0] = 1;
    }
    else
    {
      v333.i32[0] = 0;
    }
    v90 = v339;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v336, (uint64_t)v84, &demangling cache variable for type metadata for HandDescriptor?);
  if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v90)(v84, 1, v338) == 1)
  {
    result = outlined destroy of Coordinate3DPB?((uint64_t)v84, &demangling cache variable for type metadata for HandDescriptor?);
    goto LABEL_13;
  }
  v103 = v84[2];
  v102 = v84[3];
  v104 = v84[4];
  v105 = v84[5];
  v106 = v84[6];
  v107 = v84[7];
  v108 = v84[8];
  v109 = v84[9];
  v317 = v84[10];
  v323 = v104;
  v324 = v102;
  v321 = v106;
  v322 = v105;
  v319 = v108;
  v320 = v107;
  v318 = v109;
  outlined copy of HandPose?(v103);
  result = outlined destroy of Matrix3x3PB((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (!v103)
  {
LABEL_13:
    v110 = v334;
    v111 = v335;
    if ((v335 & 0x8000000000000000) == 0)
    {
      v113 = v338;
      v112 = (double *)v339;
      if ((v333.i8[0] & 1) == 0)
        return result;
      v114 = 0;
      goto LABEL_16;
    }
LABEL_110:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined consume of HandPose?(v103);
  v110 = v334;
  v111 = v335;
  if ((v335 & 0x8000000000000000) != 0)
    goto LABEL_110;
  v113 = v338;
  v112 = (double *)v339;
  if (!v333.i32[0])
    goto LABEL_32;
  v114 = 1;
LABEL_16:
  outlined init with copy of (Int32, Matrix2dPB)(v337, (uint64_t)v80, &demangling cache variable for type metadata for HandDescriptor?);
  if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v112)(v80, 1, v113) == 1)
  {
    __break(1u);
    goto LABEL_89;
  }
  v116 = v80[2];
  v115 = v80[3];
  v118 = v80[4];
  v117 = v80[5];
  v119 = v80[6];
  v120 = v80[7];
  v121 = v80[8];
  v122 = v80[9];
  v123 = v80[10];
  v124 = v80[11];
  v125 = v80[12];
  v126 = v80[13];
  v127 = v80[14];
  v128 = v80[15];
  v316 = v80[16];
  v296 = v128;
  v297 = v127;
  v317 = v126;
  v298 = v125;
  v318 = v124;
  v319 = v123;
  v323 = v119;
  v324 = v117;
  v321 = v121;
  v322 = v120;
  v320 = v122;
  outlined copy of HandPose?(v116);
  outlined destroy of Matrix3x3PB((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (!v116)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v129 = v326;
  if (*(_QWORD *)(v115 + 16) <= v111)
  {
    __break(1u);
  }
  else
  {
    v315 = v118;
    v118 = v115 + 32 * v111;
    v295 = *(_OWORD *)(v118 + 48);
    if (one-time initialization token for faMetrics == -1)
      goto LABEL_20;
  }
  swift_once();
LABEL_20:
  outlined init with copy of (Int32, Matrix2dPB)(v337, v129, &demangling cache variable for type metadata for HandDescriptor?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v112)(v129, 1, v113) == 1)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v340[1] = 0;
  v340[0] = 0;
  specialized FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)(v129, v111, 0, v340);
  v131 = v130;
  outlined destroy of Matrix3x3PB(v129, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v132 = v131;
  v133 = *(int *)(type metadata accessor for PosePerJointDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v134 = swift_retain();
    v135 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v134);
    v113 = v338;
    swift_release();
    *(_QWORD *)(v110 + v133) = v135;
    swift_release();
  }
  v136 = *(_QWORD *)(v110 + v133);
  swift_beginAccess();
  *(double *)(v136 + 112) = v132;
  *(_BYTE *)(v136 + 120) = 0;
  v137 = v325;
  outlined init with copy of (Int32, Matrix2dPB)(v337, v325, &demangling cache variable for type metadata for HandDescriptor?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v339)(v137, 1, v113) == 1)
    goto LABEL_91;
  v340[1] = 0;
  v340[0] = 0;
  specialized FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)(v137, v111, 1uLL, v340);
  v139 = v138;
  outlined destroy of Matrix3x3PB(v137, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v140 = v139;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v113 = *(_QWORD *)(v110 + v133);
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v141 = swift_retain();
    v142 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v141);
    swift_release();
    *(_QWORD *)(v110 + v133) = v142;
    swift_release();
  }
  v112 = *(double **)(v110 + v133);
  swift_beginAccess();
  v112[16] = v140;
  *((_BYTE *)v112 + 136) = 0;
  if (*(_QWORD *)(v116 + 16) <= v111)
  {
    __break(1u);
    goto LABEL_82;
  }
  v325 = v115;
  LODWORD(v326) = v114;
  v291 = HIDWORD(v316);
  v292 = v116 + 32;
  v293 = (float *)(v116 + 32 + 144 * v111);
  v294 = v116;
  v143 = v293[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v144 = swift_retain();
    v145 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v144);
    swift_release();
    *(_QWORD *)(v110 + v133) = v145;
    swift_release();
  }
  v146 = *(_QWORD *)(v110 + v133);
  swift_beginAccess();
  *(double *)(v146 + 144) = v143;
  *(_BYTE *)(v146 + 152) = 0;
  v147 = v331;
  v148 = v331 + 8;
  UnknownStorage.init()();
  v149 = DWORD2(v295);
  *v147 = v295;
  *v148 = v149;
  PosePerJointDataPB.dtPose3D.setter((uint64_t)v147);
  v295 = *(_OWORD *)(v118 + 32);
  UnknownStorage.init()();
  v150 = DWORD2(v295);
  *v147 = v295;
  *v148 = v150;
  PosePerJointDataPB.dtPose3DFiltered.setter((uint64_t)v147);
  v151 = v294;
  v340[0] = v294;
  v340[1] = v325;
  v340[3] = v324;
  v340[2] = v315;
  v340[5] = v322;
  v340[4] = v323;
  v340[7] = v320;
  v340[6] = v321;
  v340[9] = v318;
  v340[8] = v319;
  v340[11] = v317;
  v340[10] = v298;
  v340[13] = v296;
  v340[12] = v297;
  *(_QWORD *)&v295 = v133;
  LOWORD(v340[14]) = v316 & 0x101;
  HIDWORD(v340[14]) = v291;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v152 = v332;
  v153 = v335;
  Orientation3DPB.init(pose:joint:)(v340, v335, v332);
  PosePerJointDataPB.dtEuler.setter((uint64_t)v152);
  v154 = v329;
  TransformMatrixPB.init(simd4x4float:)(v329, *(int8x16_t *)(v292 + 144 * v153 + 80), *(int8x16_t *)(v292 + 144 * v153 + 96), *(__n128 *)(v292 + 144 * v153 + 112), *(__n128 *)(v292 + 144 * v153 + 128));
  PosePerJointDataPB.dtRawTransform.setter(v154);
  v155 = *v293;
  v156 = v295;
  outlined consume of HandPose?(v151);
  v157 = v155;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v158 = swift_retain();
    v159 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v158);
    swift_release();
    *(_QWORD *)(v110 + v156) = v159;
    swift_release();
  }
  v160 = *(_QWORD *)(v110 + v156)
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence;
  result = swift_beginAccess();
  *(double *)v160 = v157;
  *(_BYTE *)(v160 + 8) = 0;
  v113 = v338;
  v112 = (double *)v339;
  v111 = v335;
  if ((_DWORD)v326)
  {
LABEL_32:
    v161 = (_QWORD *)v314;
    outlined init with copy of (Int32, Matrix2dPB)(v336, v314, &demangling cache variable for type metadata for HandDescriptor?);
    if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v112)(v161, 1, v113) != 1)
    {
      v162 = v161[2];
      v115 = v161[3];
      v164 = v161[4];
      v163 = v161[5];
      v165 = v161[6];
      v166 = v161[7];
      v167 = v161[8];
      v168 = v161[9];
      v169 = v161[10];
      v170 = v161[11];
      v171 = v161[12];
      v172 = v161[13];
      v173 = v161[14];
      v174 = v161[15];
      v326 = v161[16];
      v298 = v174;
      v315 = v173;
      v316 = v172;
      v319 = v171;
      v320 = v170;
      v321 = v169;
      v324 = v165;
      v325 = v163;
      v114 = v166;
      v322 = v168;
      v323 = v167;
      outlined copy of HandPose?(v162);
      outlined destroy of Matrix3x3PB((uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v133 = (uint64_t)v313;
      v317 = v162;
      if (v162)
      {
        if (*(_QWORD *)(v115 + 16) > v111)
        {
          v318 = v164;
          v314 = *(_OWORD *)(v115 + 32 * v111 + 48);
          if (one-time initialization token for faMetrics == -1)
            goto LABEL_36;
          goto LABEL_83;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        swift_once();
LABEL_36:
        v175 = v328;
        outlined init with copy of (Int32, Matrix2dPB)(v336, v328, &demangling cache variable for type metadata for HandDescriptor?);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v112)(v175, 1, v113) != 1)
        {
          v176 = v312;
          outlined init with copy of (Int32, Matrix2dPB)(v337, v312, &demangling cache variable for type metadata for HandDescriptor?);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v112)(v176, 1, v113) == 1)
          {
            outlined destroy of Coordinate3DPB?(v176, &demangling cache variable for type metadata for HandDescriptor?);
            v177 = 0;
            v178 = 0;
          }
          else
          {
            v177 = *(_QWORD *)(v176 + 200);
            v178 = *(_QWORD *)(v176 + 208);
            outlined copy of HandPose?(v177);
            outlined destroy of Matrix3x3PB(v176, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          }
          v340[0] = v177;
          v340[1] = v178;
          v179 = v328;
          specialized FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)(v328, v111, 0, v340);
          v181 = v180;
          outlined consume of HandPose?(v177);
          outlined destroy of Matrix3x3PB(v179, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v182 = v181;
          v312 = type metadata accessor for PosePerJointDataPB(0);
          v183 = *(int *)(v312 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for PosePerJointDataPB._StorageClass(0);
            swift_allocObject();
            v184 = swift_retain();
            v185 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v184);
            swift_release();
            *(_QWORD *)(v110 + v183) = v185;
            swift_release();
          }
          v186 = *(_QWORD *)(v110 + v183);
          swift_beginAccess();
          *(double *)(v186 + 80) = v182;
          *(_BYTE *)(v186 + 88) = 0;
          v187 = v327;
          outlined init with copy of (Int32, Matrix2dPB)(v336, v327, &demangling cache variable for type metadata for HandDescriptor?);
          v188 = v187;
          v189 = v338;
          v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v339;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v339)(v188, 1, v338) != 1)
          {
            v328 = HIDWORD(v326);
            outlined init with copy of (Int32, Matrix2dPB)(v337, v133, &demangling cache variable for type metadata for HandDescriptor?);
            v191 = v190(v133, 1, v189);
            v192 = v317;
            if (v191 == 1)
            {
              outlined destroy of Coordinate3DPB?(v133, &demangling cache variable for type metadata for HandDescriptor?);
              v193 = 0;
              v194 = 0;
            }
            else
            {
              v193 = *(_QWORD *)(v133 + 200);
              v194 = *(_QWORD *)(v133 + 208);
              outlined copy of HandPose?(v193);
              outlined destroy of Matrix3x3PB(v133, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            }
            v340[0] = v193;
            v340[1] = v194;
            v195 = v327;
            specialized FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)(v327, v111, 1uLL, v340);
            v197 = v196;
            outlined consume of HandPose?(v193);
            outlined destroy of Matrix3x3PB(v195, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            v198 = v197;
            v199 = v334;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for PosePerJointDataPB._StorageClass(0);
              swift_allocObject();
              v200 = swift_retain();
              v201 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v200);
              swift_release();
              *(_QWORD *)(v199 + v183) = v201;
              swift_release();
            }
            v202 = *(_QWORD *)(v199 + v183);
            swift_beginAccess();
            *(double *)(v202 + 96) = v198;
            *(_BYTE *)(v202 + 104) = 0;
            v203 = (uint64_t)v331;
            UnknownStorage.init()();
            v204 = DWORD2(v314);
            *(_QWORD *)v203 = v314;
            *(_DWORD *)(v203 + 8) = v204;
            PosePerJointDataPB.gtPose3D.setter(v203);
            v340[0] = v192;
            v340[1] = v115;
            v340[3] = v325;
            v340[2] = v318;
            v340[5] = v114;
            v331 = (char *)v114;
            v205 = v192;
            v340[4] = v324;
            v340[7] = v322;
            v340[6] = v323;
            v340[9] = v320;
            v340[8] = v321;
            v206 = (_QWORD *)v316;
            v340[11] = v316;
            v340[10] = v319;
            v207 = v298;
            v340[13] = v298;
            v340[12] = v315;
            v208 = v326;
            LOWORD(v340[14]) = v326 & 0x101;
            HIDWORD(v340[14]) = v328;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v209 = v332;
            v210 = v335;
            Orientation3DPB.init(pose:joint:)(v340, v335, v332);
            PosePerJointDataPB.gtEuler.setter((uint64_t)v209);
            if (*(_QWORD *)(v205 + 16) <= v210)
            {
              __break(1u);
              goto LABEL_85;
            }
            v211 = v205 + 144 * v210;
            v212 = v329;
            TransformMatrixPB.init(simd4x4float:)(v329, *(int8x16_t *)(v211 + 48), *(int8x16_t *)(v211 + 64), *(__n128 *)(v211 + 80), *(__n128 *)(v211 + 96));
            outlined consume of HandPose?(v205);
            result = PosePerJointDataPB.gtTransform.setter(v212);
            v214 = v338;
            v213 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v339;
            if ((v333.i8[0] & 1) == 0)
              return result;
            v215 = v307;
            outlined init with copy of (Int32, Matrix2dPB)(v337, (uint64_t)v307, &demangling cache variable for type metadata for HandDescriptor?);
            if (v213(v215, 1, v214) != 1)
            {
              v216 = v215[2];
              v207 = v215[3];
              v217 = v215[4];
              v218 = v215[5];
              v219 = v215[6];
              v220 = v215[7];
              v221 = v215[8];
              v222 = (float64x2_t *)v215[9];
              v223 = (char *)v215[10];
              v224 = v215[11];
              v225 = v215[12];
              v226 = v215[13];
              v227 = v215[14];
              v228 = (char *)v215[15];
              v325 = v215[16];
              v326 = (unint64_t)v228;
              v327 = v227;
              v328 = v226;
              v329 = v225;
              v330 = v224;
              v331 = v223;
              v332 = v222;
              v333.i64[0] = v221;
              outlined copy of HandPose?(v216);
              outlined destroy of Matrix3x3PB((uint64_t)v215, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
              v229 = (_QWORD *)v306.i64[0];
              if (v216)
              {
                v321 = v220;
                v322 = v219;
                v323 = v218;
                v324 = v217;
                outlined init with copy of (Int32, Matrix2dPB)(v336, v306.i64[0], &demangling cache variable for type metadata for HandDescriptor?);
                if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v339)(v229, 1, v214) != 1)
                {
                  v205 = v229[2];
                  v230 = v229[3];
                  v231 = v229[4];
                  v232 = v229[5];
                  v233 = v229[6];
                  v234 = v229[7];
                  v235 = v229[8];
                  v236 = v229[9];
                  v237 = v229[10];
                  v238 = (char *)v229[11];
                  v208 = v229[13];
                  v206 = (_QWORD *)v229[14];
                  v199 = v229[15];
                  v307 = (_QWORD *)v229[12];
                  v313 = v238;
                  *(_QWORD *)&v314 = v237;
                  v319 = v232;
                  v320 = v231;
                  v317 = v234;
                  v318 = v233;
                  v315 = v236;
                  v316 = v235;
                  outlined copy of HandPose?(v205);
                  outlined destroy of Matrix3x3PB((uint64_t)v229, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                  if (v205)
                  {
                    v239 = v335;
                    if (*(_QWORD *)(v207 + 16) > v335)
                    {
                      v306 = *(float32x4_t *)(v207 + 32 * v335 + 48);
                      outlined consume of HandPose?(v216);
                      if (*(_QWORD *)(v230 + 16) > v239)
                      {
                        v333 = *(float32x4_t *)(v230 + 32 * v239 + 48);
                        outlined consume of HandPose?(v205);
                        v240 = vsubq_f32(v306, v333);
                        v241 = vmulq_f32(v240, v240);
                        v242 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v241, 2), vaddq_f32(v241, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.f32, 1))).f32[0]);
                        v207 = *(int *)(v312 + 20);
                        v205 = v334;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          type metadata accessor for PosePerJointDataPB._StorageClass(0);
                          swift_allocObject();
                          v243 = swift_retain();
                          v244 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v243);
                          swift_release();
                          *(_QWORD *)(v205 + v207) = v244;
                          swift_release();
                        }
                        v245 = *(_QWORD *)(v205 + v207);
                        swift_beginAccess();
                        *(double *)(v245 + 16) = v242;
                        *(_BYTE *)(v245 + 24) = 0;
                        v199 = (uint64_t)v304;
                        v206 = v305;
                        v208 = (uint64_t)v303;
                        if (one-time initialization token for faMetrics == -1)
                        {
LABEL_59:
                          memcpy(v340, v341, 0x228uLL);
                          v246 = v311;
                          outlined init with copy of (Int32, Matrix2dPB)(v337, v311, &demangling cache variable for type metadata for HandDescriptor?);
                          v247 = v246;
                          v249 = v338;
                          v248 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v339;
                          v250 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v339)(v247, 1, v338);
                          v251 = v335;
                          if (v250 != 1)
                          {
                            outlined init with copy of (Int32, Matrix2dPB)(v336, v208, &demangling cache variable for type metadata for HandDescriptor?);
                            if (v248(v208, 1, v249) != 1)
                            {
                              v252 = v311;
                              v253 = specialized FAMetrics.getJoint2GTNoneRigidDeltaCamera0(handsData:pipelineHand:gtHand:jointIndex:)(v340, v311, v208, v251);
                              outlined destroy of Matrix3x3PB(v208, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                              outlined destroy of Matrix3x3PB(v252, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                              v254 = v253;
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                              {
                                type metadata accessor for PosePerJointDataPB._StorageClass(0);
                                swift_allocObject();
                                v255 = swift_retain();
                                v256 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v255);
                                v249 = v338;
                                swift_release();
                                *(_QWORD *)(v205 + v207) = v256;
                                swift_release();
                              }
                              v257 = *(_QWORD *)(v205 + v207);
                              swift_beginAccess();
                              *(double *)(v257 + 32) = v254;
                              *(_BYTE *)(v257 + 40) = 0;
                              v258 = v310;
                              outlined init with copy of (Int32, Matrix2dPB)(v337, (uint64_t)v310, &demangling cache variable for type metadata for HandDescriptor?);
                              v259 = v258;
                              v260 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v339;
                              if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v339)(v259, 1, v249) != 1)
                              {
                                outlined init with copy of (Int32, Matrix2dPB)(v336, v199, &demangling cache variable for type metadata for HandDescriptor?);
                                if (v260(v199, 1, v249) != 1)
                                {
                                  memcpy(v340, v341, 0x228uLL);
                                  v261 = v310;
                                  specialized FAMetrics.getXYError(hand:gtHand:joint:from:)(v310, v199, v251, (uint64_t)v340);
                                  v263 = v262;
                                  outlined destroy of Matrix3x3PB(v199, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                  outlined destroy of Matrix3x3PB((uint64_t)v261, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                  v264 = v263;
                                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                  {
                                    type metadata accessor for PosePerJointDataPB._StorageClass(0);
                                    swift_allocObject();
                                    v265 = swift_retain();
                                    v266 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v265);
                                    v249 = v338;
                                    swift_release();
                                    *(_QWORD *)(v205 + v207) = v266;
                                    swift_release();
                                  }
                                  v267 = *(_QWORD *)(v205 + v207);
                                  swift_beginAccess();
                                  *(double *)(v267 + 48) = v264;
                                  *(_BYTE *)(v267 + 56) = 0;
                                  v268 = v309;
                                  outlined init with copy of (Int32, Matrix2dPB)(v337, v309, &demangling cache variable for type metadata for HandDescriptor?);
                                  v269 = v268;
                                  v270 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v339;
                                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v339)(v269, 1, v249) != 1)
                                  {
                                    outlined init with copy of (Int32, Matrix2dPB)(v336, (uint64_t)v206, &demangling cache variable for type metadata for HandDescriptor?);
                                    if (v270(v206, 1, v249) != 1)
                                    {
                                      memcpy(v340, v341, 0x228uLL);
                                      v271 = v309;
                                      specialized FAMetrics.get3DDepthError(hand:gtHand:joint:from:)(v309, v206, v251, (uint64_t)v340);
                                      v273 = v272;
                                      outlined destroy of Matrix3x3PB((uint64_t)v206, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                      outlined destroy of Matrix3x3PB(v271, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                      v274 = v273;
                                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                      {
                                        type metadata accessor for PosePerJointDataPB._StorageClass(0);
                                        swift_allocObject();
                                        v275 = swift_retain();
                                        v276 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v275);
                                        v249 = v338;
                                        swift_release();
                                        *(_QWORD *)(v205 + v207) = v276;
                                        swift_release();
                                      }
                                      v277 = *(_QWORD *)(v205 + v207);
                                      swift_beginAccess();
                                      *(double *)(v277 + 64) = v274;
                                      *(_BYTE *)(v277 + 72) = 0;
                                      v278 = v308;
                                      outlined init with copy of (Int32, Matrix2dPB)(v337, v308, &demangling cache variable for type metadata for HandDescriptor?);
                                      v279 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v339;
                                      v280 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v339)(v278, 1, v249);
                                      v281 = (uint64_t)v301;
                                      v282 = (uint64_t)v302;
                                      v283 = (uint64_t)v300;
                                      if (v280 != 1)
                                      {
                                        outlined init with copy of (Int32, Matrix2dPB)(v336, (uint64_t)v300, &demangling cache variable for type metadata for HandDescriptor?);
                                        if (v279(v283, 1, v249) != 1)
                                        {
                                          v284 = v299;
                                          Orientation3DPB.init(hand:gtHand:joint:)(v308, v283, v251, v299);
                                          PosePerJointDataPB.jointRotationError.setter(v284);
                                          outlined init with copy of (Int32, Matrix2dPB)(v337, v281, &demangling cache variable for type metadata for HandDescriptor?);
                                          if (v279(v281, 1, v249) != 1)
                                          {
                                            outlined init with copy of (Int32, Matrix2dPB)(v336, v282, &demangling cache variable for type metadata for HandDescriptor?);
                                            if (v279(v282, 1, v249) != 1)
                                            {
                                              specialized FAMetrics.getJointQuaternionAngleError(hand:gtHand:joint:)(v281, v282, v251);
                                              v286 = v285;
                                              outlined destroy of Matrix3x3PB(v282, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                              outlined destroy of Matrix3x3PB(v281, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
                                              v287 = (float)((float)(v286 * 180.0) / 3.1416);
                                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                              {
                                                type metadata accessor for PosePerJointDataPB._StorageClass(0);
                                                swift_allocObject();
                                                v288 = swift_retain();
                                                v289 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v288);
                                                swift_release();
                                                *(_QWORD *)(v205 + v207) = v289;
                                                swift_release();
                                              }
                                              v290 = *(_QWORD *)(v205 + v207)
                                                   + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError;
                                              result = swift_beginAccess();
                                              *(double *)v290 = v287;
                                              *(_BYTE *)(v290 + 8) = 0;
                                              return result;
                                            }
                                            goto LABEL_109;
                                          }
LABEL_108:
                                          __break(1u);
LABEL_109:
                                          __break(1u);
                                          goto LABEL_110;
                                        }
LABEL_107:
                                        __break(1u);
                                        goto LABEL_108;
                                      }
LABEL_106:
                                      __break(1u);
                                      goto LABEL_107;
                                    }
LABEL_105:
                                    __break(1u);
                                    goto LABEL_106;
                                  }
LABEL_104:
                                  __break(1u);
                                  goto LABEL_105;
                                }
LABEL_103:
                                __break(1u);
                                goto LABEL_104;
                              }
LABEL_102:
                              __break(1u);
                              goto LABEL_103;
                            }
LABEL_101:
                            __break(1u);
                            goto LABEL_102;
                          }
LABEL_100:
                          __break(1u);
                          goto LABEL_101;
                        }
LABEL_87:
                        swift_once();
                        goto LABEL_59;
                      }
LABEL_86:
                      __break(1u);
                      goto LABEL_87;
                    }
LABEL_85:
                    __break(1u);
                    goto LABEL_86;
                  }
LABEL_99:
                  __break(1u);
                  goto LABEL_100;
                }
LABEL_98:
                __break(1u);
                goto LABEL_99;
              }
LABEL_97:
              __break(1u);
              goto LABEL_98;
            }
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  return result;
}

uint64_t HandsFAResultRowPB.setValuesForAllJoints(hand:gtHand:data:)(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  const void *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned int (*v465)(uint64_t, uint64_t, uint64_t);
  uint64_t v466;
  _BYTE v467[560];

  v464 = a2;
  v466 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v463 = (uint64_t)&v408 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v461 = (uint64_t)&v408 - v9;
  MEMORY[0x24BDAC7A8](v10, v11);
  v459 = (uint64_t)&v408 - v12;
  MEMORY[0x24BDAC7A8](v13, v14);
  v457 = (uint64_t)&v408 - v15;
  MEMORY[0x24BDAC7A8](v16, v17);
  v455 = (uint64_t)&v408 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v453 = (uint64_t)&v408 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v451 = (uint64_t)&v408 - v24;
  MEMORY[0x24BDAC7A8](v25, v26);
  v449 = (uint64_t)&v408 - v27;
  MEMORY[0x24BDAC7A8](v28, v29);
  v447 = (uint64_t)&v408 - v30;
  MEMORY[0x24BDAC7A8](v31, v32);
  v445 = (uint64_t)&v408 - v33;
  MEMORY[0x24BDAC7A8](v34, v35);
  v443 = (uint64_t)&v408 - v36;
  MEMORY[0x24BDAC7A8](v37, v38);
  v441 = (uint64_t)&v408 - v39;
  MEMORY[0x24BDAC7A8](v40, v41);
  v439 = (uint64_t)&v408 - v42;
  MEMORY[0x24BDAC7A8](v43, v44);
  v437 = (uint64_t)&v408 - v45;
  MEMORY[0x24BDAC7A8](v46, v47);
  v435 = (uint64_t)&v408 - v48;
  MEMORY[0x24BDAC7A8](v49, v50);
  v433 = (uint64_t)&v408 - v51;
  MEMORY[0x24BDAC7A8](v52, v53);
  v431 = (uint64_t)&v408 - v54;
  MEMORY[0x24BDAC7A8](v55, v56);
  v429 = (uint64_t)&v408 - v57;
  MEMORY[0x24BDAC7A8](v58, v59);
  v427 = (uint64_t)&v408 - v60;
  MEMORY[0x24BDAC7A8](v61, v62);
  v425 = (uint64_t)&v408 - v63;
  MEMORY[0x24BDAC7A8](v64, v65);
  v423 = (uint64_t)&v408 - v66;
  MEMORY[0x24BDAC7A8](v67, v68);
  v421 = (uint64_t)&v408 - v69;
  MEMORY[0x24BDAC7A8](v70, v71);
  v419 = (uint64_t)&v408 - v72;
  MEMORY[0x24BDAC7A8](v73, v74);
  v417 = (uint64_t)&v408 - v75;
  MEMORY[0x24BDAC7A8](v76, v77);
  v415 = (uint64_t)&v408 - v78;
  MEMORY[0x24BDAC7A8](v79, v80);
  v413 = (uint64_t)&v408 - v81;
  MEMORY[0x24BDAC7A8](v82, v83);
  v410 = (uint64_t)&v408 - v84;
  MEMORY[0x24BDAC7A8](v85, v86);
  v88 = (char *)&v408 - v87;
  MEMORY[0x24BDAC7A8](v89, v90);
  v92 = (char *)&v408 - v91;
  v408 = type metadata accessor for PosePerJointDataPB(0);
  v93 = *(_QWORD *)(v408 - 8);
  MEMORY[0x24BDAC7A8](v408, v94);
  v462 = (uint64_t)&v408 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v96, v97);
  v460 = (uint64_t)&v408 - v98;
  MEMORY[0x24BDAC7A8](v99, v100);
  v458 = (uint64_t)&v408 - v101;
  MEMORY[0x24BDAC7A8](v102, v103);
  v456 = (uint64_t)&v408 - v104;
  MEMORY[0x24BDAC7A8](v105, v106);
  v454 = (uint64_t)&v408 - v107;
  MEMORY[0x24BDAC7A8](v108, v109);
  v452 = (uint64_t)&v408 - v110;
  MEMORY[0x24BDAC7A8](v111, v112);
  v450 = (uint64_t)&v408 - v113;
  MEMORY[0x24BDAC7A8](v114, v115);
  v448 = (uint64_t)&v408 - v116;
  MEMORY[0x24BDAC7A8](v117, v118);
  v446 = (uint64_t)&v408 - v119;
  MEMORY[0x24BDAC7A8](v120, v121);
  v444 = (uint64_t)&v408 - v122;
  MEMORY[0x24BDAC7A8](v123, v124);
  v442 = (uint64_t)&v408 - v125;
  MEMORY[0x24BDAC7A8](v126, v127);
  v440 = (uint64_t)&v408 - v128;
  MEMORY[0x24BDAC7A8](v129, v130);
  v438 = (uint64_t)&v408 - v131;
  MEMORY[0x24BDAC7A8](v132, v133);
  v436 = (uint64_t)&v408 - v134;
  MEMORY[0x24BDAC7A8](v135, v136);
  v434 = (uint64_t)&v408 - v137;
  MEMORY[0x24BDAC7A8](v138, v139);
  v432 = (uint64_t)&v408 - v140;
  MEMORY[0x24BDAC7A8](v141, v142);
  v430 = (uint64_t)&v408 - v143;
  MEMORY[0x24BDAC7A8](v144, v145);
  v428 = (uint64_t)&v408 - v146;
  MEMORY[0x24BDAC7A8](v147, v148);
  v426 = (uint64_t)&v408 - v149;
  MEMORY[0x24BDAC7A8](v150, v151);
  v424 = (uint64_t)&v408 - v152;
  MEMORY[0x24BDAC7A8](v153, v154);
  v422 = (uint64_t)&v408 - v155;
  MEMORY[0x24BDAC7A8](v156, v157);
  v420 = (uint64_t)&v408 - v158;
  MEMORY[0x24BDAC7A8](v159, v160);
  v418 = (uint64_t)&v408 - v161;
  MEMORY[0x24BDAC7A8](v162, v163);
  v416 = (uint64_t)&v408 - v164;
  MEMORY[0x24BDAC7A8](v165, v166);
  v414 = (uint64_t)&v408 - v167;
  MEMORY[0x24BDAC7A8](v168, v169);
  v409 = (uint64_t)&v408 - v170;
  MEMORY[0x24BDAC7A8](v171, v172);
  v174 = (char *)&v408 - v173;
  v175 = type metadata accessor for PoseJointsDataPB(0);
  MEMORY[0x24BDAC7A8](v175, v176);
  v412 = (uint64_t)&v408 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v178, v179);
  v181 = (char *)&v408 - v180;
  v182 = a3;
  memcpy(v467, a3, 0x228uLL);
  UnknownStorage.init()();
  v183 = *(int *)(v175 + 20);
  v411 = v181;
  v184 = (uint64_t *)&v181[v183];
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  v185 = static PoseJointsDataPB._StorageClass.defaultInstance;
  *v184 = static PoseJointsDataPB._StorageClass.defaultInstance;
  v186 = v185 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v186, (uint64_t)v92, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v187 = v93;
  v188 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  v189 = v408;
  v465 = v188;
  if (v188((uint64_t)v92, 1, v408) == 1)
  {
    swift_retain();
    UnknownStorage.init()();
    v190 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v174[v190] = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v92, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v92, (uint64_t)v174, type metadata accessor for PosePerJointDataPB);
    swift_retain();
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v464, 0, v182);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v191 = swift_retain();
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v191);
    swift_release();
  }
  v192 = *v184;
  outlined init with take of Matrix2dPB((uint64_t)v174, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v187 + 56);
  v193(v88, 0, 1, v189);
  v194 = v410;
  outlined init with take of ImageData?((uint64_t)v88, v410, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v195 = v192 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v195, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v196 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  v197 = v196;
  v198 = v413;
  outlined init with copy of (Int32, Matrix2dPB)(v197, v413, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v198, 1, v189) == 1)
  {
    v199 = v409;
    UnknownStorage.init()();
    v200 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v199 + v200) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v413, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v199 = v409;
    outlined init with take of Matrix2dPB(v198, v409, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v464, 1uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v201 = swift_retain();
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v201);
    swift_release();
  }
  v202 = *v184;
  outlined init with take of Matrix2dPB(v199, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v203 = v202 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v203, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v204 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  v205 = v204;
  v206 = v415;
  outlined init with copy of (Int32, Matrix2dPB)(v205, v415, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v206, 1, v189) == 1)
  {
    v207 = v414;
    UnknownStorage.init()();
    v208 = *(int *)(v189 + 20);
    v209 = v464;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v207 + v208) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v415, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v207 = v414;
    outlined init with take of Matrix2dPB(v206, v414, type metadata accessor for PosePerJointDataPB);
    v209 = v464;
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 2uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v210 = swift_retain();
    v207 = v414;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v210);
    swift_release();
  }
  v211 = *v184;
  outlined init with take of Matrix2dPB(v207, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v212 = v211 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v212, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v213 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  v214 = v213;
  v215 = v417;
  outlined init with copy of (Int32, Matrix2dPB)(v214, v417, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v215, 1, v189) == 1)
  {
    v216 = v416;
    UnknownStorage.init()();
    v217 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v216 + v217) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v417, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v216 = v416;
    outlined init with take of Matrix2dPB(v215, v416, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 3uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v218 = swift_retain();
    v216 = v416;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v218);
    swift_release();
  }
  v219 = *v184;
  outlined init with take of Matrix2dPB(v216, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v220 = v219 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v220, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v221 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  v222 = v221;
  v223 = v419;
  outlined init with copy of (Int32, Matrix2dPB)(v222, v419, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v223, 1, v189) == 1)
  {
    v224 = v418;
    UnknownStorage.init()();
    v225 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v224 + v225) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v419, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v224 = v418;
    outlined init with take of Matrix2dPB(v223, v418, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 4uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v226 = swift_retain();
    v224 = v418;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v226);
    swift_release();
  }
  v227 = *v184;
  outlined init with take of Matrix2dPB(v224, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v228 = v227 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v228, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v229 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  v230 = v229;
  v231 = v421;
  outlined init with copy of (Int32, Matrix2dPB)(v230, v421, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v231, 1, v189) == 1)
  {
    v232 = v420;
    UnknownStorage.init()();
    v233 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v232 + v233) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v421, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v232 = v420;
    outlined init with take of Matrix2dPB(v231, v420, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 5uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v234 = swift_retain();
    v232 = v420;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v234);
    swift_release();
  }
  v235 = *v184;
  outlined init with take of Matrix2dPB(v232, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v236 = v235 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v236, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v237 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  v238 = v237;
  v239 = v423;
  outlined init with copy of (Int32, Matrix2dPB)(v238, v423, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v239, 1, v189) == 1)
  {
    v240 = v422;
    UnknownStorage.init()();
    v241 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v240 + v241) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v423, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v240 = v422;
    outlined init with take of Matrix2dPB(v239, v422, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 6uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v242 = swift_retain();
    v240 = v422;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v242);
    swift_release();
  }
  v243 = *v184;
  outlined init with take of Matrix2dPB(v240, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v244 = v243 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v244, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v245 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  v246 = v245;
  v247 = v425;
  outlined init with copy of (Int32, Matrix2dPB)(v246, v425, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v247, 1, v189) == 1)
  {
    v248 = v424;
    UnknownStorage.init()();
    v249 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v248 + v249) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v425, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v248 = v424;
    outlined init with take of Matrix2dPB(v247, v424, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 7uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v250 = swift_retain();
    v248 = v424;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v250);
    swift_release();
  }
  v251 = *v184;
  outlined init with take of Matrix2dPB(v248, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v252 = v251 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v252, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v253 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  v254 = v253;
  v255 = v427;
  outlined init with copy of (Int32, Matrix2dPB)(v254, v427, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v255, 1, v189) == 1)
  {
    v256 = v426;
    UnknownStorage.init()();
    v257 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v256 + v257) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v427, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v256 = v426;
    outlined init with take of Matrix2dPB(v255, v426, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 8uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v258 = swift_retain();
    v256 = v426;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v258);
    swift_release();
  }
  v259 = *v184;
  outlined init with take of Matrix2dPB(v256, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v260 = v259 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v260, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v261 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  v262 = v261;
  v263 = v429;
  outlined init with copy of (Int32, Matrix2dPB)(v262, v429, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v263, 1, v189) == 1)
  {
    v264 = v428;
    UnknownStorage.init()();
    v265 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v264 + v265) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v429, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v264 = v428;
    outlined init with take of Matrix2dPB(v263, v428, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 9uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v266 = swift_retain();
    v264 = v428;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v266);
    swift_release();
  }
  v267 = *v184;
  outlined init with take of Matrix2dPB(v264, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v268 = v267 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v268, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v269 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  v270 = v269;
  v271 = v431;
  outlined init with copy of (Int32, Matrix2dPB)(v270, v431, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v271, 1, v189) == 1)
  {
    v272 = v430;
    UnknownStorage.init()();
    v273 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v272 + v273) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v431, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v272 = v430;
    outlined init with take of Matrix2dPB(v271, v430, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xAuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v274 = swift_retain();
    v272 = v430;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v274);
    swift_release();
  }
  v275 = *v184;
  outlined init with take of Matrix2dPB(v272, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v276 = v275 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v276, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v277 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  v278 = v277;
  v279 = v433;
  outlined init with copy of (Int32, Matrix2dPB)(v278, v433, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v279, 1, v189) == 1)
  {
    v280 = v432;
    UnknownStorage.init()();
    v281 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v280 + v281) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v433, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v280 = v432;
    outlined init with take of Matrix2dPB(v279, v432, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xBuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v282 = swift_retain();
    v280 = v432;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v282);
    swift_release();
  }
  v283 = *v184;
  outlined init with take of Matrix2dPB(v280, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v284 = v283 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v284, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v285 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  v286 = v285;
  v287 = v435;
  outlined init with copy of (Int32, Matrix2dPB)(v286, v435, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v287, 1, v189) == 1)
  {
    v288 = v434;
    UnknownStorage.init()();
    v289 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v288 + v289) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v435, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v288 = v434;
    outlined init with take of Matrix2dPB(v287, v434, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xCuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v290 = swift_retain();
    v288 = v434;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v290);
    swift_release();
  }
  v291 = *v184;
  outlined init with take of Matrix2dPB(v288, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v292 = v291 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v292, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v293 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  v294 = v293;
  v295 = v437;
  outlined init with copy of (Int32, Matrix2dPB)(v294, v437, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v295, 1, v189) == 1)
  {
    v296 = v436;
    UnknownStorage.init()();
    v297 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v296 + v297) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v437, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v296 = v436;
    outlined init with take of Matrix2dPB(v295, v436, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xDuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v298 = swift_retain();
    v296 = v436;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v298);
    swift_release();
  }
  v299 = *v184;
  outlined init with take of Matrix2dPB(v296, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v300 = v299 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v300, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v301 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  v302 = v301;
  v303 = v439;
  outlined init with copy of (Int32, Matrix2dPB)(v302, v439, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v303, 1, v189) == 1)
  {
    v304 = v438;
    UnknownStorage.init()();
    v305 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v304 + v305) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v439, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v304 = v438;
    outlined init with take of Matrix2dPB(v303, v438, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xEuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v306 = swift_retain();
    v304 = v438;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v306);
    swift_release();
  }
  v307 = *v184;
  outlined init with take of Matrix2dPB(v304, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v308 = v307 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v308, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v309 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  v310 = v309;
  v311 = v441;
  outlined init with copy of (Int32, Matrix2dPB)(v310, v441, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v311, 1, v189) == 1)
  {
    v312 = v440;
    UnknownStorage.init()();
    v313 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v312 + v313) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v441, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v312 = v440;
    outlined init with take of Matrix2dPB(v311, v440, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0xFuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v314 = swift_retain();
    v312 = v440;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v314);
    swift_release();
  }
  v315 = *v184;
  outlined init with take of Matrix2dPB(v312, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v316 = v315 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v316, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v317 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  v318 = v317;
  v319 = v443;
  outlined init with copy of (Int32, Matrix2dPB)(v318, v443, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v319, 1, v189) == 1)
  {
    v320 = v442;
    UnknownStorage.init()();
    v321 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v320 + v321) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v443, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v320 = v442;
    outlined init with take of Matrix2dPB(v319, v442, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x10uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v322 = swift_retain();
    v320 = v442;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v322);
    swift_release();
  }
  v323 = *v184;
  outlined init with take of Matrix2dPB(v320, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v324 = v323 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v324, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v325 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  v326 = v325;
  v327 = v445;
  outlined init with copy of (Int32, Matrix2dPB)(v326, v445, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v327, 1, v189) == 1)
  {
    v328 = v444;
    UnknownStorage.init()();
    v329 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v328 + v329) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v445, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v328 = v444;
    outlined init with take of Matrix2dPB(v327, v444, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x11uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v330 = swift_retain();
    v328 = v444;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v330);
    swift_release();
  }
  v331 = *v184;
  outlined init with take of Matrix2dPB(v328, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v332 = v331 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v332, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v333 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  v334 = v333;
  v335 = v447;
  outlined init with copy of (Int32, Matrix2dPB)(v334, v447, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v335, 1, v189) == 1)
  {
    v336 = v446;
    UnknownStorage.init()();
    v337 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v336 + v337) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v447, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v336 = v446;
    outlined init with take of Matrix2dPB(v335, v446, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x12uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v338 = swift_retain();
    v336 = v446;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v338);
    swift_release();
  }
  v339 = *v184;
  outlined init with take of Matrix2dPB(v336, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v340 = v339 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v340, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v341 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  v342 = v341;
  v343 = v449;
  outlined init with copy of (Int32, Matrix2dPB)(v342, v449, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v343, 1, v189) == 1)
  {
    v344 = v448;
    UnknownStorage.init()();
    v345 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v344 + v345) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v449, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v344 = v448;
    outlined init with take of Matrix2dPB(v343, v448, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x13uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v346 = swift_retain();
    v344 = v448;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v346);
    swift_release();
  }
  v347 = *v184;
  outlined init with take of Matrix2dPB(v344, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v348 = v347 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v348, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v349 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  v350 = v349;
  v351 = v451;
  outlined init with copy of (Int32, Matrix2dPB)(v350, v451, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v351, 1, v189) == 1)
  {
    v352 = v450;
    UnknownStorage.init()();
    v353 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v352 + v353) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v451, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v352 = v450;
    outlined init with take of Matrix2dPB(v351, v450, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x14uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v354 = swift_retain();
    v352 = v450;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v354);
    swift_release();
  }
  v355 = *v184;
  outlined init with take of Matrix2dPB(v352, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v356 = v355 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v356, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v357 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  v358 = v357;
  v359 = v453;
  outlined init with copy of (Int32, Matrix2dPB)(v358, v453, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v359, 1, v189) == 1)
  {
    v360 = v452;
    UnknownStorage.init()();
    v361 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v360 + v361) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v453, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v360 = v452;
    outlined init with take of Matrix2dPB(v359, v452, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x15uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v362 = swift_retain();
    v360 = v452;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v362);
    swift_release();
  }
  v363 = *v184;
  outlined init with take of Matrix2dPB(v360, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v364 = v363 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v364, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v365 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  v366 = v365;
  v367 = v455;
  outlined init with copy of (Int32, Matrix2dPB)(v366, v455, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v367, 1, v189) == 1)
  {
    v368 = v454;
    UnknownStorage.init()();
    v369 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v368 + v369) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v455, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v368 = v454;
    outlined init with take of Matrix2dPB(v367, v454, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x16uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v370 = swift_retain();
    v368 = v454;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v370);
    swift_release();
  }
  v371 = *v184;
  outlined init with take of Matrix2dPB(v368, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v372 = v371 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v372, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v373 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  v374 = v373;
  v375 = v457;
  outlined init with copy of (Int32, Matrix2dPB)(v374, v457, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v375, 1, v189) == 1)
  {
    v376 = v456;
    UnknownStorage.init()();
    v377 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v376 + v377) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v457, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v376 = v456;
    outlined init with take of Matrix2dPB(v375, v456, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x17uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v378 = swift_retain();
    v376 = v456;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v378);
    swift_release();
  }
  v379 = *v184;
  outlined init with take of Matrix2dPB(v376, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v380 = v379 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v380, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v381 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  v382 = v381;
  v383 = v459;
  outlined init with copy of (Int32, Matrix2dPB)(v382, v459, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v383, 1, v189) == 1)
  {
    v384 = v458;
    UnknownStorage.init()();
    v385 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v384 + v385) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v459, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v384 = v458;
    outlined init with take of Matrix2dPB(v383, v458, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x18uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v386 = swift_retain();
    v384 = v458;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v386);
    swift_release();
  }
  v387 = *v184;
  outlined init with take of Matrix2dPB(v384, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v388 = v387 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v388, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v389 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  v390 = v389;
  v391 = v461;
  outlined init with copy of (Int32, Matrix2dPB)(v390, v461, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v391, 1, v189) == 1)
  {
    v392 = v460;
    UnknownStorage.init()();
    v393 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v392 + v393) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v461, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v392 = v460;
    outlined init with take of Matrix2dPB(v391, v460, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x19uLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v394 = swift_retain();
    v392 = v460;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v394);
    swift_release();
  }
  v395 = *v184;
  outlined init with take of Matrix2dPB(v392, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v396 = v395 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v396, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v397 = *v184 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  v398 = v397;
  v399 = v463;
  outlined init with copy of (Int32, Matrix2dPB)(v398, v463, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v465(v399, 1, v189) == 1)
  {
    v400 = v462;
    UnknownStorage.init()();
    v401 = *(int *)(v189 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v400 + v401) = static PosePerJointDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v463, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v400 = v462;
    outlined init with take of Matrix2dPB(v399, v462, type metadata accessor for PosePerJointDataPB);
  }
  PosePerJointDataPB.setValues(hand:gtHand:jointID:data:)(v466, v209, 0x1AuLL, v467);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v402 = swift_retain();
    v400 = v462;
    *v184 = PoseJointsDataPB._StorageClass.init(copying:)(v402);
    swift_release();
  }
  v403 = *v184;
  outlined init with take of Matrix2dPB(v400, (uint64_t)v88, type metadata accessor for PosePerJointDataPB);
  v193(v88, 0, 1, v189);
  outlined init with take of ImageData?((uint64_t)v88, v194, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v404 = v403 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v194, v404, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  swift_release();
  v406 = (uint64_t)v411;
  v405 = v412;
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v411, v412, type metadata accessor for PoseJointsDataPB);
  HandsFAResultRowPB.joints.setter(v405);
  return outlined destroy of Matrix3x3PB(v406, type metadata accessor for PoseJointsDataPB);
}

uint64_t ObjectInteractionFADataPB.setValues(oihClass:oihData:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];

  v4 = *(_QWORD *)result;
  if ((*(_BYTE *)(result + 8) & 1) == 0)
  {
    if (v4 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v4 <= 0x7FFFFFFF)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_4:
  v5 = (int *)type metadata accessor for ObjectInteractionFADataPB(0);
  v6 = v2 + v5[6];
  *(_DWORD *)v6 = v4;
  *(_BYTE *)(v6 + 4) = 0;
  result = outlined init with take of ImageData?(a2, (uint64_t)v22, &demangling cache variable for type metadata for ObjectInteractionData?);
  v7 = v22[0];
  if (!v22[0])
    return result;
  v8 = *(_QWORD *)(v22[0] + 16);
  if (!v8)
    goto LABEL_21;
  v10 = (_QWORD *)v22[1];
  v9 = v22[2];
  v11 = v22[4];
  v12 = v2 + v5[7];
  *(double *)v12 = *(float *)(v22[0] + 32);
  *(_BYTE *)(v12 + 8) = 0;
  if (v8 == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = *(float *)(v7 + 36);
  v14 = v2 + v5[8];
  *(double *)v14 = v13;
  *(_BYTE *)(v14 + 8) = 0;
  v15 = v10[2];
  if (!v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v16 = v10[4];
  if (v16 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v16 > 0x7FFFFFFF)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v2 + v5[9];
  *(_DWORD *)v17 = v16;
  *(_BYTE *)(v17 + 4) = 0;
  if (v15 < 2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v18 = v10[5];
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v2 + v5[10];
  *(_DWORD *)v19 = v18;
  *(_BYTE *)(v19 + 4) = 0;
  v20 = *(_QWORD *)(v9 + 16);
  if (!v20)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(_BYTE *)(v2 + v5[11]) = *(_BYTE *)(v9 + 32);
  if (v20 == 1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *(_BYTE *)(v2 + v5[12]) = *(_BYTE *)(v9 + 33);
  v21 = *(_QWORD *)(v11 + 16);
  if (!v21)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_BYTE *)(v2 + v5[13]) = *(_BYTE *)(v11 + 32);
  if (v21 == 1)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  *(_BYTE *)(v2 + v5[14]) = *(_BYTE *)(v11 + 33);
  return result;
}

uint64_t HandsFAData.init(seqID:outputDir:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = (int *)type metadata accessor for HandsFAData();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + v8[6]) = MEMORY[0x24BEE4AF8];
  type metadata accessor for HandsFAResultTablePB(0);
  UnknownStorage.init()();
  v10 = (_QWORD *)(a4 + v8[7]);
  v10[2] = v9;
  type metadata accessor for TrackingFAInternalDataPB(0);
  UnknownStorage.init()();
  v11 = v8[8];
  type metadata accessor for FAMetrics();
  *(_QWORD *)(a4 + v11) = swift_allocObject();
  v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a4, a3, v12);
  v13 = (_QWORD *)(a4 + v8[5]);
  *v13 = a1;
  v13[1] = a2;
  *v10 = a1;
  v10[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for HandsFAData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandsFAData;
  if (!type metadata singleton initialization cache for HandsFAData)
    return swift_getSingletonMetadata();
  return result;
}

void HandsFAData.appendPoseFrame(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  __int16 v261;
  __int16 v262;
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int (*v336)(uint64_t, uint64_t, uint64_t);
  _QWORD *v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int64_t v369;
  uint64_t v370;
  uint64_t v371;
  char v372;
  uint64_t v373;
  char v374;
  __int128 v375;
  uint64_t v376;
  __int128 v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  char v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  uint64_t (*v414)();
  unsigned int (*v415)(uint64_t, uint64_t, uint64_t);
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  __int128 v421;
  uint64_t v422;
  char v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t (*v428)();
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  char v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int (*v440)(uint64_t, uint64_t, int *);
  int *v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  char v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  _BYTE *v449;
  float v450;
  char v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  float v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  _BYTE *v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  _BYTE *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int8x8_t v479;
  uint64_t v480;
  uint64_t v481;
  int8x8_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  float v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  char v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unsigned int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int *v574;
  char *v575;
  char v576;
  uint64_t v577;
  int v578;
  __int128 v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  char *v606;
  uint64_t v607;
  char v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int8x8_t *v612;
  uint64_t v613;
  int8x8_t v614;
  int8x8_t v615;
  uint64_t v616;
  char *v617;
  int8x8_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int8x8_t *v627;
  int8x8_t v628;
  int8x8_t v629;
  uint64_t v630;
  char *v631;
  int8x8_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  float32x4_t v653;
  uint64_t v654;
  uint64_t v655;
  float32x4_t v656;
  double v657;
  uint64_t v658;
  uint64_t v659;
  char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t *v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  uint64_t *v690;
  uint64_t v691;
  uint64_t v692;
  _BYTE *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  char v697;
  uint64_t *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  _BYTE *v705;
  uint64_t v706;
  _QWORD *v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  float32x4_t v719;
  uint64_t *v720;
  uint64_t v721;
  uint64_t v722;
  float32x4_t v723;
  double v724;
  uint64_t v725;
  _OWORD *v726;
  _OWORD *v727;
  _WORD *v728;
  _WORD *v729;
  _OWORD *v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  _OWORD *v735;
  __int128 v736;
  _QWORD *v737;
  __int128 v738;
  _OWORD *v739;
  __int128 v740;
  __int128 v741;
  float v742;
  float v743;
  char v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  _OWORD *v751;
  _OWORD *v752;
  _WORD *v753;
  _WORD *v754;
  _OWORD *v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  _OWORD *v761;
  __int128 v762;
  _QWORD *v763;
  __int128 v764;
  _OWORD *v765;
  __int128 v766;
  __int128 v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  char *v772;
  uint64_t v773;
  char v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  int *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unsigned int (*v787)(uint64_t, uint64_t, int *);
  uint64_t v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t *v800;
  uint64_t *v801;
  char v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t *v814;
  double v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t *v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  _OWORD *v825;
  _OWORD *v826;
  _WORD *v827;
  _WORD *v828;
  _OWORD *v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  _OWORD *v834;
  __int128 v835;
  _QWORD *v836;
  __int128 v837;
  _OWORD *v838;
  __int128 v839;
  __int128 v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  _DWORD *v844;
  uint64_t v845;
  int64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  void (*v854)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t *v863;
  unint64_t v864;
  char v865;
  uint64_t v866;
  unint64_t v867;
  unint64_t v868;
  uint64_t v869;
  const double *v870;
  float32x2_t v871;
  const double *v872;
  float32x4_t v873;
  float32x2_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  char *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  char *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  char *v909;
  uint64_t v910;
  char *v911;
  char *v912;
  uint64_t v913;
  char *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  char *v920;
  uint64_t v921;
  uint64_t *v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  _BYTE *v926;
  char *v927;
  char *v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  char *v934;
  char *v935;
  char *v936;
  _QWORD *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  float32x4_t v942;
  uint64_t v943;
  unint64_t v944;
  float32x4_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  char *v963;
  char *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  char *v969;
  char *v970;
  char *v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  char *v976;
  uint64_t *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t *v985;
  _QWORD *v986;
  uint64_t v987;
  uint64_t v988;
  char *v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  char *v998;
  uint64_t v999;
  uint64_t v1000;
  _OWORD *v1001;
  _OWORD *v1002;
  char *v1003;
  char *v1004;
  _OWORD *v1005;
  char *v1006;
  char *v1007;
  _QWORD *v1008;
  uint64_t v1009;
  int v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unsigned int v1015;
  unsigned int v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  unsigned int v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  char *v1032;
  _QWORD *v1033;
  unsigned int (*v1034)(uint64_t, uint64_t, int *);
  uint64_t v1035;
  void (*v1036)(uint64_t, _QWORD, uint64_t, int *);
  int v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  _QWORD *v1043;
  unsigned int v1044;
  uint64_t v1045;
  int32x4_t v1046;
  int8x16_t v1047;
  int32x4_t v1048;
  int32x4_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  char *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int *v1064;
  uint64_t *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  _QWORD *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  char *v1075;
  uint64_t v1076;
  unsigned int (*v1077)(uint64_t, uint64_t, uint64_t);
  uint64_t v1078;
  _QWORD v1079[111];
  uint64_t v1080;
  char v1081;
  _OWORD v1082[105];
  _QWORD v1083[7];
  _OWORD v1084[3];
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  uint64_t v1088;
  __int128 v1089;
  __int128 v1090;
  __int16 v1091;
  char v1092;
  __int16 v1093;
  char v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  uint64_t v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  uint64_t v1107;

  MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v5 = (uint64_t *)((char *)v3 + 396);
  v1069 = type metadata accessor for HandDescriptorPB(0);
  v1068 = *(_QWORD *)(v1069 - 8);
  MEMORY[0x24BDAC7A8](v1069, v6);
  v1067 = (uint64_t)&v878 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1066 = type metadata accessor for RejectedHand();
  v915 = *(_QWORD *)(v1066 - 8);
  MEMORY[0x24BDAC7A8](v1066, v8);
  v914 = (char *)&v878 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v913 = type metadata accessor for RejectedHandPB(0);
  MEMORY[0x24BDAC7A8](v913, v10);
  v1071 = (uint64_t *)((char *)&v878 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v954 = type metadata accessor for TrackingFAInternalFramePB(0);
  MEMORY[0x24BDAC7A8](v954, v12);
  v1000 = (uint64_t)&v878 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v1035 = (uint64_t)&v878 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v919 = (uint64_t)&v878 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v918 = (uint64_t)&v878 - v22;
  MEMORY[0x24BDAC7A8](v23, v24);
  v917 = (uint64_t)&v878 - v25;
  v916 = type metadata accessor for PartialHandMultiCam(0);
  v978 = *(_QWORD *)(v916 - 8);
  MEMORY[0x24BDAC7A8](v916, v26);
  v977 = (uint64_t *)((char *)&v878 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v28, v29);
  v880 = (uint64_t)&v878 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v32);
  v879 = (uint64_t)&v878 - v33;
  MEMORY[0x24BDAC7A8](v34, v35);
  v970 = (char *)&v878 - v36;
  v951 = type metadata accessor for HomePinchInternalPB(0);
  v950 = *(_QWORD *)(v951 - 8);
  MEMORY[0x24BDAC7A8](v951, v37);
  v878 = (uint64_t)&v878 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39, v40);
  v920 = (char *)&v878 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v42, v43);
  v908 = (uint64_t)&v878 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45, v46);
  v907 = (uint64_t)&v878 - v47;
  v48 = type metadata accessor for PinchInfoPB(0);
  v905 = *(_QWORD *)(v48 - 8);
  v906 = v48;
  MEMORY[0x24BDAC7A8](v48, v49);
  v937 = (uint64_t *)((char *)&v878 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v51, v52);
  v894 = (uint64_t)&v878 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54, v55);
  v893 = (uint64_t)&v878 - v56;
  MEMORY[0x24BDAC7A8](v57, v58);
  v936 = (char *)&v878 - v59;
  v961 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v960 = *(_QWORD *)(v961 - 8);
  MEMORY[0x24BDAC7A8](v961, v60);
  v892 = (uint64_t)&v878 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v62, v63);
  v891 = (uint64_t)&v878 - v64;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v65, v66);
  v890 = (uint64_t)&v878 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v68, v69);
  v889 = (uint64_t)&v878 - v70;
  MEMORY[0x24BDAC7A8](v71, v72);
  v969 = (char *)&v878 - v73;
  v959 = type metadata accessor for UnsureInternalPB(0);
  v958 = *(_QWORD *)(v959 - 8);
  MEMORY[0x24BDAC7A8](v959, v74);
  v971 = (char *)&v878 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v76, v77);
  v888 = (uint64_t)&v878 - v78;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v79, v80);
  v887 = (uint64_t)&v878 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v82, v83);
  v886 = (uint64_t)&v878 - v84;
  MEMORY[0x24BDAC7A8](v85, v86);
  v935 = (char *)&v878 - v87;
  v957 = type metadata accessor for ActionInternalPB(0);
  v956 = *(_QWORD *)(v957 - 8);
  MEMORY[0x24BDAC7A8](v957, v88);
  v885 = (uint64_t)&v878 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v90, v91);
  v934 = (char *)&v878 - v92;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v93, v94);
  v884 = (uint64_t)&v878 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v96, v97);
  v883 = (uint64_t)&v878 - v98;
  v99 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v881 = *(_QWORD *)(v99 - 8);
  v882 = v99;
  MEMORY[0x24BDAC7A8](v99, v100);
  v903 = (uint64_t)&v878 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v102, v103);
  v902 = (uint64_t)&v878 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v105, v106);
  v901 = (uint64_t)&v878 - v107;
  v108 = type metadata accessor for PinchInternalDataPB();
  v899 = *(_QWORD *)(v108 - 8);
  v900 = v108;
  MEMORY[0x24BDAC7A8](v108, v109);
  v910 = (uint64_t)&v878 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v111, v112);
  v968 = (uint64_t)&v878 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v114, v115);
  v967 = (uint64_t)&v878 - v116;
  v966 = type metadata accessor for Coordinate3DPB(0);
  v965 = *(_QWORD *)(v966 - 8);
  MEMORY[0x24BDAC7A8](v966, v117);
  v912 = (char *)&v878 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v119, v120);
  v911 = (char *)&v878 - v121;
  MEMORY[0x24BDAC7A8](v122, v123);
  v933 = (uint64_t)&v878 - v124;
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v125, v126);
  v898 = (uint64_t)&v878 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v128, v129);
  v897 = (uint64_t)&v878 - v130;
  v932 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v896 = *(_QWORD *)(v932 - 8);
  MEMORY[0x24BDAC7A8](v932, v131);
  v895 = (char *)&v878 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v133, v134);
  v976 = (char *)&v878 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v136, v137);
  v922 = (uint64_t *)((char *)&v878 - v138);
  MEMORY[0x24BDAC7A8](v139, v140);
  v931 = (uint64_t)&v878 - v141;
  MEMORY[0x24BDAC7A8](v142, v143);
  v955 = (char *)&v878 - v144;
  MEMORY[0x24BDAC7A8](v145, v146);
  v930 = (uint64_t)&v878 - v147;
  MEMORY[0x24BDAC7A8](v148, v149);
  v151 = (char *)&v878 - v150;
  MEMORY[0x24BDAC7A8](v152, v153);
  v929 = (uint64_t)&v878 - v154;
  MEMORY[0x24BDAC7A8](v155, v156);
  v928 = (char *)&v878 - v157;
  v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v158, v159);
  v1074 = (uint64_t)&v878 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for DetectionSpecItemPB(0);
  v1070 = *(_QWORD *)(v161 - 8);
  MEMORY[0x24BDAC7A8](v161, v162);
  v998 = (char *)&v878 - ((v163 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v164, v165);
  v997 = (uint64_t)&v878 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v167, v168);
  v996 = (uint64_t)&v878 - v169;
  v995 = type metadata accessor for Matrix2dPB(0);
  v994 = *(_QWORD *)(v995 - 8);
  MEMORY[0x24BDAC7A8](v995, v170);
  v1072 = (uint64_t)&v878 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v172, v173);
  v993 = (uint64_t)&v878 - v174;
  v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v175, v176);
  v992 = (uint64_t)&v878 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v178, v179);
  v991 = (uint64_t)&v878 - v180;
  MEMORY[0x24BDAC7A8](v181, v182);
  v1056 = (uint64_t)&v878 - v183;
  MEMORY[0x24BDAC7A8](v184, v185);
  v1055 = (uint64_t)&v878 - v186;
  v1054 = type metadata accessor for CMTimeProtobuf(0);
  v990 = *(_QWORD *)(v1054 - 8);
  MEMORY[0x24BDAC7A8](v1054, v187);
  v1033 = (uint64_t *)((char *)&v878 - ((v188 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v189, v190);
  v986 = (uint64_t *)((char *)&v878 - v191);
  MEMORY[0x24BDAC7A8](v192, v193);
  v989 = (char *)&v878 - v194;
  v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  MEMORY[0x24BDAC7A8](v195, v196);
  v925 = (uint64_t)&v878 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v198, v199);
  v1042 = (uint64_t)&v878 - v200;
  MEMORY[0x24BDAC7A8](v201, v202);
  v1041 = (uint64_t)&v878 - v203;
  v1051 = type metadata accessor for ObjectInteractionFADataPB(0);
  v1031 = *(_QWORD *)(v1051 - 8);
  MEMORY[0x24BDAC7A8](v1051, v204);
  v924 = (uint64_t)&v878 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v206, v207);
  v921 = (uint64_t)&v878 - v208;
  MEMORY[0x24BDAC7A8](v209, v210);
  v1032 = (char *)&v878 - v211;
  v988 = type metadata accessor for HandsFAResultRowPB(0);
  v980 = *(_QWORD *)(v988 - 8);
  MEMORY[0x24BDAC7A8](v988, v212);
  v1039 = (uint64_t)&v878 - ((v213 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v214, v215);
  v1062 = (uint64_t)&v878 - v216;
  v1064 = (int *)type metadata accessor for HandDescriptor();
  v1058 = *((_QWORD *)v1064 - 1);
  MEMORY[0x24BDAC7A8](v1064, v217);
  v949 = (uint64_t)&v878 - ((v218 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v219, v220);
  v975 = (uint64_t)&v878 - v221;
  MEMORY[0x24BDAC7A8](v222, v223);
  v1043 = (uint64_t *)((char *)&v878 - v224);
  MEMORY[0x24BDAC7A8](v225, v226);
  v228 = (char *)&v878 - v227;
  MEMORY[0x24BDAC7A8](v229, v230);
  v964 = (char *)&v878 - v231;
  MEMORY[0x24BDAC7A8](v232, v233);
  v963 = (char *)&v878 - v234;
  v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v235, v236);
  v923 = (uint64_t)&v878 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v238, v239);
  v979 = (uint64_t)&v878 - v240;
  MEMORY[0x24BDAC7A8](v241, v242);
  v909 = (char *)&v878 - v243;
  MEMORY[0x24BDAC7A8](v244, v245);
  v1075 = (char *)&v878 - v246;
  MEMORY[0x24BDAC7A8](v247, v248);
  v981 = (uint64_t)&v878 - v249;
  MEMORY[0x24BDAC7A8](v250, v251);
  v1061 = (uint64_t)&v878 - v252;
  MEMORY[0x24BDAC7A8](v253, v254);
  v1063 = (uint64_t)&v878 - v255;
  v256 = *v4;
  v1073 = v4[1];
  v1029 = v4[2];
  v1028 = v4[3];
  v1027 = v4[4];
  v1026 = v4[5];
  v1025 = v4[6];
  v1024 = v4[7];
  v1050 = v4[8];
  v1104 = *(_OWORD *)(v4 + 13);
  v1105 = *(_OWORD *)(v4 + 15);
  v1106 = *(_OWORD *)(v4 + 17);
  v257 = v4[20];
  v1107 = v4[19];
  v1102 = *(_OWORD *)(v4 + 9);
  v1103 = *(_OWORD *)(v4 + 11);
  v1101 = v4[25];
  v1100 = *(_OWORD *)(v4 + 23);
  v1099 = *(_OWORD *)(v4 + 21);
  v1049 = *((int32x4_t *)v4 + 13);
  v1048 = *((int32x4_t *)v4 + 14);
  v1047 = *((int8x16_t *)v4 + 15);
  v1046 = *((int32x4_t *)v4 + 16);
  v258 = *((_OWORD *)v4 + 19);
  v1098 = *((_OWORD *)v4 + 20);
  v1097 = v258;
  v259 = *((_OWORD *)v4 + 17);
  v1096 = *((_OWORD *)v4 + 18);
  v1095 = v259;
  v260 = v4[42];
  v1045 = v4[43];
  v1044 = *((_DWORD *)v4 + 88);
  v1023 = *((_DWORD *)v4 + 89);
  v1022 = v4[45];
  v1021 = v4[46];
  v1020 = v4[47];
  v1019 = v4[48];
  v1018 = *((unsigned __int8 *)v4 + 392);
  v261 = *(_WORD *)((char *)v4 + 393);
  v1094 = *((_BYTE *)v4 + 395);
  v1093 = v261;
  v1017 = *v5;
  v1016 = *((_DWORD *)v4 + 101);
  v1015 = *((_DWORD *)v4 + 102);
  v1014 = v5[2];
  v1013 = v5[3];
  v1012 = v5[4];
  v1011 = v5[5];
  v1010 = *((unsigned __int8 *)v4 + 444);
  v262 = *(_WORD *)((char *)v4 + 445);
  v1092 = *((_BYTE *)v4 + 447);
  v1091 = v262;
  v1009 = v4[56];
  v263 = *(_OWORD *)(v4 + 57);
  v1090 = *(_OWORD *)(v4 + 59);
  v1089 = v263;
  v264 = v4[61];
  v265 = *((_OWORD *)v4 + 31);
  v266 = *((_OWORD *)v4 + 32);
  v267 = *((_OWORD *)v4 + 33);
  v1088 = v4[68];
  v1087 = v267;
  v1086 = v266;
  v1085 = v265;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
  v268 = swift_allocObject();
  *(_OWORD *)(v268 + 16) = xmmword_23D9A7050;
  v999 = v268;
  *(_WORD *)(v268 + 32) = 1;
  v987 = v268 + 32;
  v269 = type metadata accessor for HandsFAData();
  v1053 = v260;
  v270 = v260 >> 31;
  if (v260 >> 31)
    goto LABEL_280;
  v271 = 0;
  v1030 = 0;
  v1008 = (_QWORD *)((char *)&v1082[24] + 12);
  v272 = *(int *)(v269 + 20);
  v273 = *(int *)(v269 + 24);
  v953 = v269;
  v1038 = v273;
  v985 = (uint64_t *)(v2 + v272);
  v952 = v2 + 16;
  v984 = *(_QWORD *)(v256 + 16);
  v1059 = v228;
  v926 = v228 + 268;
  v927 = v151;
  v904 = v151 + 160;
  v274 = *(_QWORD *)(v257 + 16);
  v1007 = (char *)&v1082[4] + 8;
  v1006 = (char *)&v1082[10] + 8;
  v1076 = v264;
  v275 = *(_QWORD *)(v264 + 16);
  v1005 = &v1082[17];
  v1004 = (char *)&v1082[24] + 9;
  v1003 = (char *)&v1082[27] + 13;
  v1002 = (_OWORD *)((char *)&v1082[28] + 8);
  v1001 = &v1082[31];
  v982 = v275;
  v962 = v275 - 1;
  v1040 = v2;
  v276 = (int *)v1051;
  v277 = v256;
  v1060 = v256;
  v1057 = v257;
  v983 = v274;
  while (1)
  {
    if (v270 >= *(_QWORD *)(v999 + 16))
      goto LABEL_272;
    v278 = *(unsigned __int8 *)(v987 + v270);
    v279 = v984;
    v1037 = v271;
    if (v984)
    {
      v280 = v1058;
      v281 = v277 + ((*(unsigned __int8 *)(v1058 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1058 + 80));
      swift_bridgeObjectRetain();
      v282 = *(_QWORD *)(v280 + 72);
      v283 = (uint64_t)v963;
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v281, v283, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v278 == *(unsigned __int8 *)(v283 + 136))
          break;
        outlined destroy of Matrix3x3PB(v283, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v281 += v282;
        if (!--v279)
          goto LABEL_12;
      }
      v287 = v1063;
      outlined init with take of Matrix2dPB(v283, v1063, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v284 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v1058 + 56);
      v285 = v287;
      v286 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_12:
      v284 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v1058 + 56);
      v285 = v1063;
      v286 = 1;
    }
    v288 = v1064;
    v284(v285, v286, 1, v1064);
    swift_bridgeObjectRelease();
    v289 = v983;
    if (v983)
    {
      v290 = v1058;
      v291 = v1057 + ((*(unsigned __int8 *)(v1058 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1058 + 80));
      swift_bridgeObjectRetain();
      v292 = *(_QWORD *)(v290 + 72);
      v293 = v289;
      v294 = (uint64_t)v964;
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v291, v294, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v278 == *(unsigned __int8 *)(v294 + 136))
          break;
        outlined destroy of Matrix3x3PB(v294, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v291 += v292;
        if (!--v293)
        {
          v295 = 1;
          goto LABEL_21;
        }
      }
      outlined init with take of Matrix2dPB(v294, v1061, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v295 = 0;
LABEL_21:
      v296 = (uint64_t)v1032;
      v288 = v1064;
    }
    else
    {
      swift_bridgeObjectRetain();
      v295 = 1;
      v296 = (uint64_t)v1032;
    }
    v284(v1061, v295, 1, v288);
    swift_bridgeObjectRelease();
    v297 = v1062;
    UnknownStorage.init()();
    v298 = *(int *)(v988 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    v299 = (uint64_t *)(v297 + v298);
    *(_QWORD *)(v297 + v298) = static HandsFAResultRowPB._StorageClass.defaultInstance;
    v301 = *v985;
    v300 = v985[1];
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v302 = swift_retain();
      v303 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v302);
      v296 = (uint64_t)v1032;
      swift_release();
      *v299 = v303;
      swift_release();
    }
    v304 = *v299;
    swift_beginAccess();
    *(_QWORD *)(v304 + 16) = v301;
    *(_QWORD *)(v304 + 24) = v300;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v305 = swift_retain();
      v306 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v305);
      swift_release();
      *v299 = v306;
      swift_release();
    }
    v307 = *v299;
    swift_beginAccess();
    *(_DWORD *)(v307 + 32) = v1053;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v309 = v1054;
    v310 = (uint64_t)v989;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v311 = swift_retain();
      v312 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v311);
      swift_release();
      *v299 = v312;
      swift_release();
    }
    v313 = *v299;
    swift_beginAccess();
    *(_QWORD *)(v313 + 40) = 0;
    *(_BYTE *)(v313 + 48) = 1;
    UnknownStorage.init()();
    v314 = v296 + v276[5];
    *(_DWORD *)v314 = 0;
    *(_BYTE *)(v314 + 4) = 1;
    v315 = v296 + v276[6];
    *(_DWORD *)v315 = 0;
    *(_BYTE *)(v315 + 4) = 1;
    v316 = v296 + v276[7];
    *(_QWORD *)v316 = 0;
    *(_BYTE *)(v316 + 8) = 1;
    v317 = v296 + v276[8];
    *(_QWORD *)v317 = 0;
    *(_BYTE *)(v317 + 8) = 1;
    v318 = v296 + v276[9];
    *(_DWORD *)v318 = 0;
    *(_BYTE *)(v318 + 4) = 1;
    v319 = v296 + v276[10];
    *(_DWORD *)v319 = 0;
    *(_BYTE *)(v319 + 4) = 1;
    *(_BYTE *)(v296 + v276[11]) = 2;
    *(_BYTE *)(v296 + v276[12]) = 2;
    *(_BYTE *)(v296 + v276[13]) = 2;
    *(_BYTE *)(v296 + v276[14]) = 2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v320 = swift_retain();
      v321 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v320);
      swift_release();
      *v299 = v321;
      swift_release();
    }
    v322 = *v299;
    v323 = v1041;
    outlined init with take of Matrix2dPB(v296, v1041, type metadata accessor for ObjectInteractionFADataPB);
    v1036 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v1031 + 56);
    v1036(v323, 0, 1, v276);
    v324 = v1042;
    outlined init with take of ImageData?(v323, v1042, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    v325 = v322
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v324, v325, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    swift_endAccess();
    swift_release();
    *(_QWORD *)v310 = 0;
    *(_DWORD *)(v310 + 8) = 0;
    UnknownStorage.init()();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v326 = swift_retain();
      v327 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v326);
      swift_release();
      *v299 = v327;
      swift_release();
    }
    v328 = *v299;
    v329 = v1055;
    outlined init with take of Matrix2dPB(v310, v1055, type metadata accessor for CMTimeProtobuf);
    v330 = v990;
    v1078 = *(_QWORD *)(v990 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1078)(v329, 0, 1, v309);
    v331 = v1056;
    outlined init with take of ImageData?(v329, v1056, &demangling cache variable for type metadata for CMTimeProtobuf?);
    v332 = v328
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v331, v332, &demangling cache variable for type metadata for CMTimeProtobuf?);
    swift_endAccess();
    swift_release();
    v1065 = v299;
    v333 = *v299
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
    swift_beginAccess();
    v334 = v333;
    v335 = v991;
    outlined init with copy of (Int32, Matrix2dPB)(v334, v991, &demangling cache variable for type metadata for CMTimeProtobuf?);
    v336 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v330 + 48);
    if (v336(v335, 1, v309) == 1)
    {
      v337 = v986;
      *v986 = 0;
      *((_DWORD *)v337 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v335, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      v337 = v986;
      outlined init with take of Matrix2dPB(v335, (uint64_t)v986, type metadata accessor for CMTimeProtobuf);
    }
    *v337 = v1045;
    v338 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v339 = swift_retain();
      v340 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v339);
      swift_release();
      *v338 = v340;
      swift_release();
    }
    v341 = *v338;
    v342 = v1055;
    outlined init with take of Matrix2dPB((uint64_t)v337, v1055, type metadata accessor for CMTimeProtobuf);
    v343 = v1054;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1078)(v342, 0, 1, v1054);
    v344 = v1056;
    outlined init with take of ImageData?(v342, v1056, &demangling cache variable for type metadata for CMTimeProtobuf?);
    v345 = v341
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v344, v345, &demangling cache variable for type metadata for CMTimeProtobuf?);
    swift_endAccess();
    swift_release();
    v346 = *v338
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
    swift_beginAccess();
    v347 = v346;
    v348 = v992;
    outlined init with copy of (Int32, Matrix2dPB)(v347, v992, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v336(v348, 1, v343) == 1)
    {
      v349 = v1033;
      *v1033 = 0;
      *((_DWORD *)v349 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v348, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      v349 = v1033;
      outlined init with take of Matrix2dPB(v348, (uint64_t)v1033, type metadata accessor for CMTimeProtobuf);
    }
    v350 = (uint64_t)v1075;
    *((_DWORD *)v349 + 2) = v1044;
    v351 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v352 = swift_retain();
      v353 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v352);
      v349 = v1033;
      swift_release();
      *v351 = v353;
      swift_release();
    }
    v354 = *v351;
    v355 = (uint64_t)v349;
    v356 = v1055;
    outlined init with take of Matrix2dPB(v355, v1055, type metadata accessor for CMTimeProtobuf);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1078)(v356, 0, 1, v1054);
    v357 = v1056;
    outlined init with take of ImageData?(v356, v1056, &demangling cache variable for type metadata for CMTimeProtobuf?);
    v358 = v354
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v357, v358, &demangling cache variable for type metadata for CMTimeProtobuf?);
    swift_endAccess();
    swift_release();
    v359 = specialized Matrix2d.init(simd4x4float:)(v1049, v1048, v1047, v1046);
    v361 = v993;
    Matrix2d.toProtoBuf()(v359, v360 & 1, v993);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v362 = swift_retain();
      v363 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v362);
      swift_release();
      *v351 = v363;
      swift_release();
    }
    v364 = *v351;
    v365 = v996;
    outlined init with take of Matrix2dPB(v361, v996, type metadata accessor for Matrix2dPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v994 + 56))(v365, 0, 1, v995);
    v366 = v997;
    outlined init with take of ImageData?(v365, v997, &demangling cache variable for type metadata for Matrix2dPB?);
    v367 = v364
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v366, v367, &demangling cache variable for type metadata for Matrix2dPB?);
    swift_endAccess();
    swift_release();
    v368 = (uint64_t)v998;
    if (v1073)
    {
      v369 = *(_QWORD *)(v1073 + 16);
      v370 = MEMORY[0x24BEE4AF8];
      if (v369)
      {
        v1080 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v369, 0);
        v371 = 0;
        v370 = v1080;
        do
        {
          v372 = *(_BYTE *)(v1073 + v371 + 40);
          v373 = *(_QWORD *)(v1073 + v371 + 48);
          v374 = *(_BYTE *)(v1073 + v371 + 56);
          v375 = *(_OWORD *)(v1073 + v371 + 64);
          v376 = *(_QWORD *)(v1073 + v371 + 80);
          v377 = *(_OWORD *)(v1073 + v371 + 96);
          v378 = *(_QWORD *)(v1073 + v371 + 112);
          v379 = *(_QWORD *)(v1073 + v371 + 128);
          v380 = *(_DWORD *)(v1073 + v371 + 136);
          v381 = *(_BYTE *)(v1073 + v371 + 140);
          v382 = *(_QWORD *)(v1073 + v371 + 144);
          *(_QWORD *)&v1082[0] = *(_QWORD *)(v1073 + v371 + 32);
          BYTE8(v1082[0]) = v372;
          *(_QWORD *)&v1082[1] = v373;
          BYTE8(v1082[1]) = v374;
          v1082[2] = v375;
          v1082[4] = v377;
          *(_QWORD *)&v1082[3] = v376;
          *(_QWORD *)&v1082[5] = v378;
          *((_QWORD *)&v1082[5] + 1) = *(_QWORD *)(v1073 + v371 + 120);
          *(_QWORD *)&v1082[6] = v379;
          DWORD2(v1082[6]) = v380;
          BYTE12(v1082[6]) = v381;
          *(_QWORD *)&v1082[7] = v382;
          DetectionSpecItem.toProtoBuf()(v368);
          v1080 = v370;
          v384 = *(_QWORD *)(v370 + 16);
          v383 = *(_QWORD *)(v370 + 24);
          if (v384 >= v383 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v383 > 1, v384 + 1, 1);
            v370 = v1080;
          }
          *(_QWORD *)(v370 + 16) = v384 + 1;
          outlined init with take of Matrix2dPB(v368, v370+ ((*(unsigned __int8 *)(v1070 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1070 + 80))+ *(_QWORD *)(v1070 + 72) * v384, type metadata accessor for DetectionSpecItemPB);
          v371 += 128;
          --v369;
        }
        while (v369);
        swift_bridgeObjectRelease();
        v350 = (uint64_t)v1075;
      }
      v385 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v386 = swift_retain();
        v387 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v386);
        swift_release();
        *v385 = v387;
        swift_release();
      }
      v388 = (_QWORD *)(*v385
                      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs);
      swift_beginAccess();
      *v388 = v370;
      swift_bridgeObjectRelease();
    }
    v389 = v1062;
    if (v982)
    {
      swift_bridgeObjectRetain();
      v390 = 32;
      v391 = v962;
      v392 = v1065;
      while (1)
      {
        v393 = *(_OWORD *)(v1076 + v390);
        v394 = *(_OWORD *)(v1076 + v390 + 16);
        v395 = *(_OWORD *)(v1076 + v390 + 48);
        v1082[2] = *(_OWORD *)(v1076 + v390 + 32);
        v1082[3] = v395;
        v1082[0] = v393;
        v1082[1] = v394;
        v396 = *(_OWORD *)(v1076 + v390 + 64);
        v397 = *(_OWORD *)(v1076 + v390 + 80);
        v398 = *(_OWORD *)(v1076 + v390 + 112);
        v1082[6] = *(_OWORD *)(v1076 + v390 + 96);
        v1082[7] = v398;
        v1082[4] = v396;
        v1082[5] = v397;
        v399 = *(_OWORD *)(v1076 + v390 + 128);
        v400 = *(_OWORD *)(v1076 + v390 + 144);
        v401 = *(_OWORD *)(v1076 + v390 + 176);
        v1082[10] = *(_OWORD *)(v1076 + v390 + 160);
        v1082[11] = v401;
        v1082[8] = v399;
        v1082[9] = v400;
        v402 = DWORD2(v1082[4]);
        v1077 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v390;
        v1078 = v391;
        if (LOBYTE(v1082[5]) != 1)
        {
          if (*((uint64_t *)&v1082[4] + 1) < (uint64_t)0xFFFFFFFF80000000)
          {
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
            goto LABEL_274;
          }
          if (*((uint64_t *)&v1082[4] + 1) > 0x7FFFFFFF)
            goto LABEL_271;
        }
        v403 = *(_QWORD *)&v1082[4];
        swift_beginAccess();
        *(_QWORD *)(v403 + 128) = 0;
        outlined retain of ImageData((uint64_t)v1082);
        swift_retain();
        swift_bridgeObjectRelease();
        v404 = v1074;
        ImageCalibrationData.toProtoBuf()(v1074);
        v405 = type metadata accessor for ImageCalibrationDataPB(0);
        v406 = *(_QWORD *)(v405 - 8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v406 + 56))(v404, 0, 1, v405);
        v407 = v392;
        v408 = (uint64_t *)(*v392
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        swift_beginAccess();
        v1080 = *v408;
        swift_bridgeObjectRetain();
        specialized Dictionary.subscript.setter(v404, v402);
        v409 = v1080;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for HandsFAResultRowPB._StorageClass(0);
          swift_allocObject();
          v410 = swift_retain();
          v411 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v410);
          swift_release();
          *v392 = v411;
          swift_release();
        }
        v412 = (_QWORD *)(*v392
                        + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        swift_beginAccess();
        *v412 = v409;
        swift_bridgeObjectRelease();
        v413 = (_QWORD *)(*v392
                        + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        swift_beginAccess();
        v1079[0] = *v413;
        swift_bridgeObjectRetain();
        v414 = specialized Dictionary.subscript.modify(&v1080, v402);
        v415 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v406 + 48);
        if (v415(v416, 1, v405))
        {
          ((void (*)(uint64_t *, _QWORD))v414)(&v1080, 0);
          v417 = v1079[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for HandsFAResultRowPB._StorageClass(0);
            swift_allocObject();
            v418 = swift_retain();
            v419 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v418);
            swift_release();
            *v392 = v419;
            swift_release();
          }
          v420 = (_QWORD *)(*v392
                          + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        }
        else
        {
          swift_beginAccess();
          v421 = *(_OWORD *)(v403 + 80);
          v1084[0] = *(_OWORD *)(v403 + 64);
          v1084[1] = v421;
          v1084[2] = *(_OWORD *)(v403 + 96);
          v422 = specialized Matrix2d.init(simd3x3float:)((uint64_t)v1084);
          v424 = v1072;
          Matrix2d.toProtoBuf()(v422, v423 & 1, v1072);
          swift_bridgeObjectRelease();
          ImageCalibrationDataPB.intrinsics.setter(v424);
          ((void (*)(uint64_t *, _QWORD))v414)(&v1080, 0);
          v417 = v1079[0];
          v392 = v407;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for HandsFAResultRowPB._StorageClass(0);
            swift_allocObject();
            v425 = swift_retain();
            v426 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v425);
            swift_release();
            *v407 = v426;
            swift_release();
          }
          v420 = (_QWORD *)(*v407
                          + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        }
        swift_beginAccess();
        *v420 = v417;
        swift_bridgeObjectRelease();
        v427 = (_QWORD *)(*v392
                        + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        swift_beginAccess();
        v1079[0] = *v427;
        swift_bridgeObjectRetain();
        v428 = specialized Dictionary.subscript.modify(&v1080, v402);
        if (v415(v429, 1, v405))
        {
          ((void (*)(uint64_t *, _QWORD))v428)(&v1080, 0);
          v430 = v1079[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for HandsFAResultRowPB._StorageClass(0);
            swift_allocObject();
            v431 = swift_retain();
            v432 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v431);
            swift_release();
            *v392 = v432;
            swift_release();
          }
          v433 = (_QWORD *)(*v392
                          + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        }
        else
        {
          swift_beginAccess();
          v434 = specialized Matrix2d.init(simd4x4float:)(*(int32x4_t *)(v403 + 192), *(int32x4_t *)(v403 + 208), *(int8x16_t *)(v403 + 224), *(int32x4_t *)(v403 + 240));
          v436 = v1072;
          Matrix2d.toProtoBuf()(v434, v435 & 1, v1072);
          swift_bridgeObjectRelease();
          ImageCalibrationDataPB.extrinsics.setter(v436);
          ((void (*)(uint64_t *, _QWORD))v428)(&v1080, 0);
          v430 = v1079[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for HandsFAResultRowPB._StorageClass(0);
            swift_allocObject();
            v437 = swift_retain();
            v438 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v437);
            swift_release();
            *v392 = v438;
            swift_release();
          }
          v433 = (_QWORD *)(*v392
                          + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
        }
        swift_beginAccess();
        *v433 = v430;
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of ImageData((uint64_t)v1082);
        v350 = (uint64_t)v1075;
        if (!v1078)
        {
          swift_bridgeObjectRelease();
          v389 = v1062;
          break;
        }
        v391 = v1078 - 1;
        v390 = (uint64_t)v1077 + 192;
      }
    }
    v439 = v981;
    outlined init with copy of (Int32, Matrix2dPB)(v1063, v981, &demangling cache variable for type metadata for HandDescriptor?);
    v440 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v1058 + 48);
    v441 = v1064;
    v442 = v440(v439, 1, v1064);
    v443 = v1040;
    if (v442 == 1)
    {
      outlined destroy of Coordinate3DPB?(v439, &demangling cache variable for type metadata for HandDescriptor?);
      goto LABEL_201;
    }
    v1034 = v440;
    v444 = (uint64_t)v1059;
    outlined init with take of Matrix2dPB(v439, (uint64_t)v1059, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v445 = *(_BYTE *)(v444 + 136);
    v446 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v447 = swift_retain();
      v448 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v447);
      swift_release();
      *v446 = v448;
      swift_release();
    }
    v449 = (_BYTE *)(*v446
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
    swift_beginAccess();
    *v449 = v445;
    v450 = *(float *)(v444 + 8);
    v451 = swift_isUniquelyReferenced_nonNull_native();
    v452 = v932;
    v453 = (uint64_t)v928;
    if ((v451 & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v454 = swift_retain();
      v455 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v454);
      swift_release();
      *v446 = v455;
      swift_release();
    }
    v456 = *v446
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
    swift_beginAccess();
    *(double *)v456 = v450;
    *(_BYTE *)(v456 + 8) = 0;
    v457 = *(float *)v444;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v458 = swift_retain();
      v459 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v458);
      swift_release();
      *v446 = v459;
      swift_release();
    }
    v460 = *v446
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
    swift_beginAccess();
    *(double *)v460 = v457 / 0.3918;
    *(_BYTE *)(v460 + 8) = 0;
    v461 = *(unsigned __int8 *)(v444 + 4);
    if (v461 != 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v462 = swift_retain();
        v463 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v462);
        swift_release();
        *v446 = v463;
        swift_release();
      }
      v464 = (_BYTE *)(*v446
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
      swift_beginAccess();
      *v464 = v461 & 1;
    }
    v465 = *(unsigned __int8 *)(v444 + 138);
    if (v465 != 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v466 = swift_retain();
        v467 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v466);
        swift_release();
        *v446 = v467;
        swift_release();
      }
      v468 = (_BYTE *)(*v446
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
      swift_beginAccess();
      *v468 = v465 & 1;
    }
    v1078 = v444 + v1064[24];
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v453, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v469 = type metadata accessor for HandDescriptorInternal();
    v1077 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v469 - 8) + 48);
    if (v1077(v453, 1, v469) == 1)
    {
      outlined destroy of Coordinate3DPB?(v453, &demangling cache variable for type metadata for HandDescriptorInternal?);
    }
    else
    {
      v471 = *(_QWORD *)(v453 + 144);
      v470 = *(_QWORD *)(v453 + 152);
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB(v453, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      if (v470)
      {
        v472 = v895;
        UnknownStorage.init()();
        *v472 = v471;
        v472[1] = v470;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for HandsFAResultRowPB._StorageClass(0);
          swift_allocObject();
          v473 = swift_retain();
          v474 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v473);
          swift_release();
          *v446 = v474;
          swift_release();
        }
        v475 = *v446;
        v476 = v897;
        outlined init with take of Matrix2dPB((uint64_t)v472, v897, type metadata accessor for MiddleDoubleTapInternalPB);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v896 + 56))(v476, 0, 1, v452);
        v477 = v898;
        outlined init with take of ImageData?(v476, v898, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
        v478 = v475
             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
        swift_beginAccess();
        swift_retain();
        outlined assign with take of HomePinchInternalPB?(v477, v478, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
        swift_endAccess();
        swift_release();
      }
    }
    if ((*(_BYTE *)(v444 + 192) & 1) == 0)
    {
      v479 = *(int8x8_t *)(v444 + 176);
      v480 = v966;
      v481 = v933;
      v482 = *(int8x8_t *)(v444 + 184);
      UnknownStorage.init()();
      *(_DWORD *)v481 = v479.i32[0];
      *(int8x8_t *)(v481 + 4) = vext_s8(v479, v482, 4uLL);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v483 = swift_retain();
        v484 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v483);
        swift_release();
        *v446 = v484;
        swift_release();
      }
      v485 = *v446;
      v486 = v967;
      outlined init with take of Matrix2dPB(v933, v967, type metadata accessor for Coordinate3DPB);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v965 + 56))(v486, 0, 1, v480);
      v487 = v968;
      outlined init with take of ImageData?(v486, v968, &demangling cache variable for type metadata for Coordinate3DPB?);
      v488 = v485
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
      swift_beginAccess();
      swift_retain();
      outlined assign with take of HomePinchInternalPB?(v487, v488, &demangling cache variable for type metadata for Coordinate3DPB?);
      swift_endAccess();
      swift_release();
    }
    if ((*v926 & 1) == 0)
    {
      v489 = *(float *)(v444 + 264);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v490 = swift_retain();
        v491 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v490);
        swift_release();
        *v446 = v491;
        swift_release();
      }
      v492 = *v446
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
      swift_beginAccess();
      *(double *)v492 = v489;
      *(_BYTE *)(v492 + 8) = 0;
    }
    v493 = v444 + v1064[27];
    if ((*(_BYTE *)(v493 + 8) & 1) == 0)
    {
      v494 = *(_QWORD *)v493;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v495 = swift_retain();
        v496 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v495);
        swift_release();
        *v446 = v496;
        swift_release();
      }
      v497 = *v446
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
      swift_beginAccess();
      *(_QWORD *)v497 = v494;
      *(_BYTE *)(v497 + 8) = 0;
    }
    v498 = v929;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v929, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v1052 = v469;
    if (v1077(v498, 1, v469) == 1)
    {
      outlined destroy of Coordinate3DPB?(v498, &demangling cache variable for type metadata for HandDescriptorInternal?);
    }
    else
    {
      v499 = *(_QWORD *)(v498 + 16);
      v500 = *(_QWORD *)(v498 + 24);
      v501 = *(_QWORD *)(v498 + 32);
      v502 = *(_QWORD *)(v498 + 40);
      v504 = *(_QWORD *)(v498 + 48);
      v503 = *(_QWORD *)(v498 + 56);
      v505 = *(_QWORD *)(v498 + 64);
      v506 = *(_QWORD *)(v498 + 72);
      v507 = *(_QWORD *)(v498 + 80);
      v508 = *(_QWORD *)(v498 + 88);
      v509 = *(_QWORD *)(v498 + 96);
      v510 = *(_QWORD *)(v498 + 104);
      v511 = *(_QWORD *)(v498 + 112);
      v512 = *(_QWORD *)(v498 + 120);
      v945.i32[0] = *(_DWORD *)(v498 + 128);
      v946 = v511;
      v947 = v510;
      v948 = v509;
      v972 = v508;
      v973 = v507;
      v974 = v501;
      v513 = v502;
      v514 = v503;
      v515 = v505;
      v516 = v506;
      outlined copy of PinchInternalData?(v499, v500, v501, v502, v504);
      outlined destroy of Matrix3x3PB(v498, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      if (v504)
      {
        v944 = v513;
        LOBYTE(v1080) = v513 & 1;
        LOBYTE(v1079[0]) = v512 & 1;
        *(_QWORD *)&v1082[0] = v499;
        WORD4(v1082[0]) = v500 & 0x101;
        *(_QWORD *)&v1082[1] = v974;
        BYTE8(v1082[1]) = v513 & 1;
        *(_QWORD *)&v1082[2] = v504;
        v943 = v514;
        *((_QWORD *)&v1082[2] + 1) = v514;
        v941 = v504;
        v942.i64[0] = v515;
        *(_QWORD *)&v1082[3] = v515;
        *((_QWORD *)&v1082[3] + 1) = v516;
        v939 = v500;
        v940 = v499;
        *(_QWORD *)&v1082[4] = v973;
        DWORD2(v1082[4]) = v972;
        *(_QWORD *)&v1082[5] = v948;
        *((_QWORD *)&v1082[5] + 1) = v947;
        *(_QWORD *)&v1082[6] = v946;
        BYTE8(v1082[6]) = v512 & 1;
        HIDWORD(v1082[6]) = HIDWORD(v512);
        LODWORD(v1082[7]) = v945.i32[0];
        PinchInternalData.toProtoBuf()(v910);
        outlined consume of PinchInternalData?(v940, v939, v974, v944, v941);
        v517 = v1065;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for HandsFAResultRowPB._StorageClass(0);
          swift_allocObject();
          v518 = swift_retain();
          v519 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v518);
          swift_release();
          *v517 = v519;
          swift_release();
        }
        v520 = *v517;
        v521 = v901;
        outlined init with take of Matrix2dPB(v910, v901, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v899 + 56))(v521, 0, 1, v900);
        v522 = v902;
        outlined init with take of ImageData?(v521, v902, &demangling cache variable for type metadata for PinchInternalDataPB?);
        v523 = v520
             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
        swift_beginAccess();
        swift_retain();
        outlined assign with take of HomePinchInternalPB?(v522, v523, &demangling cache variable for type metadata for PinchInternalDataPB?);
        swift_endAccess();
        swift_release();
      }
    }
    v524 = (uint64_t)v927;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, (uint64_t)v927, &demangling cache variable for type metadata for HandDescriptorInternal?);
    if (v1077(v524, 1, v1052) == 1)
    {
      outlined destroy of Coordinate3DPB?(v524, &demangling cache variable for type metadata for HandDescriptorInternal?);
      v526 = (uint64_t)v935;
      v525 = (uint64_t)v936;
      v527 = (uint64_t)v969;
      v528 = (uint64_t)v971;
      v529 = (uint64_t)v934;
    }
    else
    {
      outlined init with take of ImageData?((uint64_t)v904, (uint64_t)&v1080, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
      outlined destroy of Matrix3x3PB(v524, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      outlined init with take of ImageData?((uint64_t)&v1080, (uint64_t)v1082, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
      v530 = _s5Hands34RecoverRepetitivePinchInternalDataVSgWOg((uint64_t)v1082);
      v526 = (uint64_t)v935;
      v525 = (uint64_t)v936;
      v527 = (uint64_t)v969;
      v528 = (uint64_t)v971;
      v529 = (uint64_t)v934;
      v531 = (uint64_t)v955;
      if (v530 == 1)
        goto LABEL_127;
      memcpy(v1079, v1082, 0x373uLL);
      v532 = v903;
      RecoverRepetitivePinchInternalData.toProtoBuf()(v903);
      v533 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v534 = swift_retain();
        v535 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v534);
        v532 = v903;
        swift_release();
        *v533 = v535;
        swift_release();
      }
      v536 = *v533;
      v537 = v532;
      v538 = v883;
      outlined init with take of Matrix2dPB(v537, v883, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v881 + 56))(v538, 0, 1, v882);
      v539 = v884;
      outlined init with take of ImageData?(v538, v884, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
      v540 = v536
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
      swift_beginAccess();
      swift_retain();
      outlined assign with take of HomePinchInternalPB?(v539, v540, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
      swift_endAccess();
      swift_release();
      v527 = (uint64_t)v969;
      v528 = (uint64_t)v971;
    }
    v531 = (uint64_t)v955;
LABEL_127:
    v541 = v930;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v930, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v542 = v1052;
    if (v1077(v541, 1, v1052) == 1)
    {
      outlined destroy of Coordinate3DPB?(v541, &demangling cache variable for type metadata for HandDescriptorInternal?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v956 + 56))(v526, 1, 1, v957);
LABEL_130:
      outlined destroy of Coordinate3DPB?(v526, &demangling cache variable for type metadata for ActionInternalPB?);
      v543 = v1052;
      goto LABEL_134;
    }
    outlined init with copy of (Int32, Matrix2dPB)(v541 + *(int *)(v542 + 40), v526, &demangling cache variable for type metadata for ActionInternalPB?);
    outlined destroy of Matrix3x3PB(v541, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v956 + 48))(v526, 1, v957) == 1)
      goto LABEL_130;
    outlined init with take of Matrix2dPB(v526, v529, type metadata accessor for ActionInternalPB);
    v544 = v885;
    outlined init with copy of TrackingUpdateDataPB(v529, v885, type metadata accessor for ActionInternalPB);
    v545 = v1065;
    v546 = swift_isUniquelyReferenced_nonNull_native();
    v543 = v1052;
    if ((v546 & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v547 = swift_retain();
      v548 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v547);
      swift_release();
      *v545 = v548;
      swift_release();
    }
    v549 = *v545;
    v550 = v886;
    outlined init with take of Matrix2dPB(v544, v886, type metadata accessor for ActionInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v956 + 56))(v550, 0, 1, v957);
    v551 = v887;
    outlined init with take of ImageData?(v550, v887, &demangling cache variable for type metadata for ActionInternalPB?);
    v552 = v549
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v551, v552, &demangling cache variable for type metadata for ActionInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v529, type metadata accessor for ActionInternalPB);
    v527 = (uint64_t)v969;
    v528 = (uint64_t)v971;
LABEL_134:
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v531, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v553 = v1077(v531, 1, v543);
    v554 = (uint64_t)v976;
    if (v553 == 1)
    {
      outlined destroy of Coordinate3DPB?(v531, &demangling cache variable for type metadata for HandDescriptorInternal?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v958 + 56))(v527, 1, 1, v959);
LABEL_137:
      outlined destroy of Coordinate3DPB?(v527, &demangling cache variable for type metadata for UnsureInternalPB?);
      goto LABEL_141;
    }
    outlined init with copy of (Int32, Matrix2dPB)(v531 + *(int *)(v543 + 44), v527, &demangling cache variable for type metadata for UnsureInternalPB?);
    outlined destroy of Matrix3x3PB(v531, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v958 + 48))(v527, 1, v959) == 1)
      goto LABEL_137;
    v555 = v888;
    outlined init with take of Matrix2dPB(v527, v888, type metadata accessor for UnsureInternalPB);
    outlined init with copy of TrackingUpdateDataPB(v555, v528, type metadata accessor for UnsureInternalPB);
    v556 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v557 = swift_retain();
      v558 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v557);
      v528 = (uint64_t)v971;
      swift_release();
      *v556 = v558;
      swift_release();
    }
    v559 = *v556;
    v560 = v528;
    v561 = v889;
    outlined init with take of Matrix2dPB(v560, v889, type metadata accessor for UnsureInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v958 + 56))(v561, 0, 1, v959);
    v562 = v890;
    outlined init with take of ImageData?(v561, v890, &demangling cache variable for type metadata for UnsureInternalPB?);
    v563 = v559
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v562, v563, &demangling cache variable for type metadata for UnsureInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v555, type metadata accessor for UnsureInternalPB);
    v554 = (uint64_t)v976;
LABEL_141:
    v564 = v931;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v931, &demangling cache variable for type metadata for HandDescriptorInternal?);
    if (v1077(v564, 1, v543) == 1)
    {
      outlined destroy of Coordinate3DPB?(v564, &demangling cache variable for type metadata for HandDescriptorInternal?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v960 + 56))(v525, 1, 1, v961);
LABEL_144:
      outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      goto LABEL_148;
    }
    outlined init with copy of (Int32, Matrix2dPB)(v564 + *(int *)(v543 + 48), v525, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    outlined destroy of Matrix3x3PB(v564, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v960 + 48))(v525, 1, v961) == 1)
      goto LABEL_144;
    v565 = v891;
    outlined init with take of Matrix2dPB(v525, v891, type metadata accessor for ObjectInteractionStateInternalPB);
    v566 = v892;
    outlined init with copy of TrackingUpdateDataPB(v565, v892, type metadata accessor for ObjectInteractionStateInternalPB);
    v567 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v568 = swift_retain();
      v569 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v568);
      swift_release();
      *v567 = v569;
      swift_release();
    }
    v570 = *v567;
    v571 = v893;
    outlined init with take of Matrix2dPB(v566, v893, type metadata accessor for ObjectInteractionStateInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v960 + 56))(v571, 0, 1, v961);
    v572 = v894;
    outlined init with take of ImageData?(v571, v894, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    v573 = v570
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v572, v573, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v565, type metadata accessor for ObjectInteractionStateInternalPB);
LABEL_148:
    v574 = v1064;
    v575 = &v1059[v1064[28]];
    if ((v575[49] & 1) == 0)
    {
      v576 = v575[48];
      v577 = *((_QWORD *)v575 + 5);
      v578 = *((_DWORD *)v575 + 8);
      v579 = *((_OWORD *)v575 + 1);
      v1082[0] = *(_OWORD *)v575;
      v1082[1] = v579;
      LOBYTE(v1082[2]) = v578 & 1;
      *((_QWORD *)&v1082[2] + 1) = v577;
      LOBYTE(v1082[3]) = v576 & 1;
      PinchInfo.toProtoBuf()(v937);
      v580 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v581 = swift_retain();
        v582 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v581);
        swift_release();
        *v580 = v582;
        swift_release();
      }
      v583 = *v580;
      v584 = v907;
      outlined init with take of Matrix2dPB((uint64_t)v937, v907, type metadata accessor for PinchInfoPB);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v905 + 56))(v584, 0, 1, v906);
      v585 = v908;
      outlined init with take of ImageData?(v584, v908, &demangling cache variable for type metadata for PinchInfoPB?);
      v586 = v583
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
      swift_beginAccess();
      swift_retain();
      outlined assign with take of HomePinchInternalPB?(v585, v586, &demangling cache variable for type metadata for PinchInfoPB?);
      swift_endAccess();
      swift_release();
      v574 = v1064;
    }
    v587 = v1059;
    v588 = *((_QWORD *)v1059 + 25);
    if (v588)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, *((_QWORD *)v1059 + 25));
      v589 = *(_QWORD *)(v588 + 32);
      if ((*(_BYTE *)(v588 + 40) & 1) == 0)
      {
        if (v589 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_275;
        if (v589 > 0x7FFFFFFF)
          goto LABEL_276;
      }
      outlined copy of HandPose?(v588);
      v590 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v591 = swift_retain();
        v592 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v591);
        swift_release();
        *v590 = v592;
        swift_release();
      }
      v593 = *v590
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
      swift_beginAccess();
      *(_DWORD *)v593 = v589;
      *(_BYTE *)(v593 + 4) = 0;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v588);
      v594 = *(_QWORD *)(v588 + 48);
      LOBYTE(v593) = *(_BYTE *)(v588 + 56);
      outlined consume of HandPose?(v588);
      if ((v593 & 1) == 0)
      {
        if (v594 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_277;
        if (v594 > 0x7FFFFFFF)
          goto LABEL_278;
      }
      v595 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v596 = swift_retain();
        v597 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v596);
        swift_release();
        *v595 = v597;
        swift_release();
      }
      v598 = *v595
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
      swift_beginAccess();
      *(_DWORD *)v598 = v594;
      *(_BYTE *)(v598 + 4) = 0;
      v574 = v1064;
      v587 = v1059;
    }
    v599 = swift_bridgeObjectRetain();
    v600 = v1030;
    v601 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12HandPresenceV8CategoryOSfG_AHs5NeverOTg5010_s5Hands12ef2V8g31OSfACIgyyr_AE3key_Sf5valuetACs5H100OIegnrzr_TR055_s5Hands0A6FADataV15appendPoseFrameyyAA0A7KitDataVFAA12bc4VAH8D11O_SftXEfU2_Tf3nnnpf_nTf1cn_n(v599);
    v1030 = v600;
    swift_bridgeObjectRelease();
    v602 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v603 = swift_retain();
      v604 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v603);
      swift_release();
      *v602 = v604;
      swift_release();
    }
    v605 = (uint64_t *)(*v602
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore);
    swift_beginAccess();
    *v605 = v601;
    swift_bridgeObjectRelease();
    v606 = (char *)v587 + v574[25];
    v607 = *(_QWORD *)v606;
    v608 = v606[8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v609 = swift_retain();
      v610 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v609);
      swift_release();
      *v602 = v610;
      swift_release();
    }
    v611 = *v602
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
    swift_beginAccess();
    *(_QWORD *)v611 = v607;
    *(_BYTE *)(v611 + 8) = v608;
    *(_BYTE *)(v611 + 9) = 0;
    v612 = (int8x8_t *)((char *)v587 + v574[19]);
    v613 = (uint64_t)v970;
    if ((v612[2].i8[0] & 1) == 0)
    {
      v614 = *v612;
      v615 = *v612;
      v616 = v966;
      v617 = v911;
      v618 = v612[1];
      UnknownStorage.init()();
      *(_DWORD *)v617 = v614.i32[0];
      *(int8x8_t *)(v617 + 4) = vext_s8(v615, v618, 4uLL);
      v619 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v620 = swift_retain();
        v621 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v620);
        v617 = v911;
        swift_release();
        *v619 = v621;
        swift_release();
      }
      v622 = *v619;
      v623 = (uint64_t)v617;
      v624 = v967;
      outlined init with take of Matrix2dPB(v623, v967, type metadata accessor for Coordinate3DPB);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v965 + 56))(v624, 0, 1, v616);
      v625 = v968;
      outlined init with take of ImageData?(v624, v968, &demangling cache variable for type metadata for Coordinate3DPB?);
      v626 = v622
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
      swift_beginAccess();
      swift_retain();
      outlined assign with take of HomePinchInternalPB?(v625, v626, &demangling cache variable for type metadata for Coordinate3DPB?);
      swift_endAccess();
      swift_release();
      v574 = v1064;
      v587 = v1059;
    }
    v627 = (int8x8_t *)((char *)v587 + v574[20]);
    if ((v627[2].i8[0] & 1) == 0)
    {
      v628 = *v627;
      v629 = *v627;
      v630 = v966;
      v631 = v912;
      v632 = v627[1];
      UnknownStorage.init()();
      *(_DWORD *)v631 = v628.i32[0];
      *(int8x8_t *)(v631 + 4) = vext_s8(v629, v632, 4uLL);
      v633 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v634 = swift_retain();
        v635 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v634);
        v631 = v912;
        swift_release();
        *v633 = v635;
        swift_release();
      }
      v636 = *v633;
      v637 = (uint64_t)v631;
      v638 = v967;
      outlined init with take of Matrix2dPB(v637, v967, type metadata accessor for Coordinate3DPB);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v965 + 56))(v638, 0, 1, v630);
      v639 = v968;
      outlined init with take of ImageData?(v638, v968, &demangling cache variable for type metadata for Coordinate3DPB?);
      v640 = v636
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
      swift_beginAccess();
      swift_retain();
      outlined assign with take of HomePinchInternalPB?(v639, v640, &demangling cache variable for type metadata for Coordinate3DPB?);
      swift_endAccess();
      swift_release();
      v574 = v1064;
      v587 = v1059;
    }
    v641 = v587[2];
    v642 = v1065;
    if (v641)
    {
      v643 = v587[3];
      v974 = v587[4];
      v972 = v587[5];
      v644 = v587[7];
      v948 = v587[6];
      v645 = v587[9];
      v973 = v587[8];
      v646 = v587[11];
      v947 = v587[10];
      v647 = v587[13];
      v946 = v587[12];
      v945.i64[0] = v587[15];
      v944 = v587[16];
      v942.i64[0] = HIDWORD(v944);
      v943 = v587[14];
      v648 = v641;
      swift_bridgeObjectRetain();
      v649 = v643;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v650 = swift_retain();
        v651 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v650);
        swift_release();
        *v642 = v651;
        swift_release();
      }
      v652 = *v642;
      swift_beginAccess();
      *(_QWORD *)(v652 + 40) = 2;
      *(_BYTE *)(v652 + 48) = 1;
      v938 = v649;
      v939 = v648;
      *(_QWORD *)&v1082[0] = v648;
      *((_QWORD *)&v1082[0] + 1) = v649;
      *((_QWORD *)&v1082[1] + 1) = v972;
      *(_QWORD *)&v1082[1] = v974;
      v940 = v645;
      v941 = v644;
      *((_QWORD *)&v1082[2] + 1) = v644;
      *(_QWORD *)&v1082[2] = v948;
      *((_QWORD *)&v1082[3] + 1) = v645;
      *(_QWORD *)&v1082[3] = v973;
      *((_QWORD *)&v1082[4] + 1) = v646;
      *(_QWORD *)&v1082[4] = v947;
      *((_QWORD *)&v1082[5] + 1) = v647;
      *(_QWORD *)&v1082[5] = v946;
      *((_QWORD *)&v1082[6] + 1) = v945.i64[0];
      *(_QWORD *)&v1082[6] = v943;
      LOWORD(v1082[7]) = v944 & 0x101;
      DWORD1(v1082[7]) = v942.i32[0];
      HandPose.getHoverDistanceVector()();
      v942 = v653;
      outlined consume of HandPose?(v939);
      v642 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v654 = swift_retain();
        v655 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v654);
        swift_release();
        *v642 = v655;
        swift_release();
      }
      v656 = vmulq_f32(v942, v942);
      v657 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v656, 2), vaddq_f32(v656, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v656.f32, 1))).f32[0]);
      v658 = *v642
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
      swift_beginAccess();
      *(double *)v658 = v657;
      *(_BYTE *)(v658 + 8) = 0;
      v613 = (uint64_t)v970;
      v574 = v1064;
      v587 = v1059;
      v543 = v1052;
      v554 = (uint64_t)v976;
    }
    v659 = v574[31];
    v660 = (char *)v587 + v574[30];
    v661 = *(_QWORD *)v660;
    LOBYTE(v660) = v660[8];
    v1080 = v661;
    v1081 = (char)v660;
    outlined init with take of ImageData?((uint64_t)v587 + v659, (uint64_t)v1083, &demangling cache variable for type metadata for ObjectInteractionData?);
    outlined retain of ObjectInteractionData?(v1083, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ObjectInteractionData?);
    v662 = v921;
    HandsFAResultRowPB.objectInteractionData.getter(v921);
    ObjectInteractionFADataPB.setValues(oihClass:oihData:)((uint64_t)&v1080, (uint64_t)v1083);
    outlined retain of ObjectInteractionData?(v1083, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ObjectInteractionData?);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v663 = swift_retain();
      v664 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v663);
      swift_release();
      *v642 = v664;
      swift_release();
    }
    v665 = *v642;
    v666 = v1041;
    outlined init with take of Matrix2dPB(v662, v1041, type metadata accessor for ObjectInteractionFADataPB);
    v1036(v666, 0, 1, (int *)v1051);
    v667 = v1042;
    outlined init with take of ImageData?(v666, v1042, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    v668 = v665
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v667, v668, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    swift_endAccess();
    swift_release();
    v669 = v922;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, (uint64_t)v922, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v670 = v1077((uint64_t)v669, 1, v543);
    v350 = (uint64_t)v1075;
    v443 = v1040;
    if (v670 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v669, &demangling cache variable for type metadata for HandDescriptorInternal?);
    }
    else
    {
      v671 = *v669;
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB((uint64_t)v669, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      v672 = v1030;
      v673 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_AF9CropBoxPBVs5NeverOTg5061_s5Hands22HandDescriptorInternalV10toProtoBufAA0bcD2PBVyFAA07hi7H0VAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(v671);
      v1030 = v672;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v674 = swift_retain();
        v675 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v674);
        swift_release();
        *v642 = v675;
        swift_release();
      }
      v676 = (unint64_t *)(*v642
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox);
      swift_beginAccess();
      *v676 = v673;
      swift_bridgeObjectRelease();
    }
    v677 = (uint64_t)v920;
    outlined init with copy of (Int32, Matrix2dPB)(v1078, v554, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v678 = v1052;
    v679 = v1077(v554, 1, v1052);
    v441 = v1064;
    if (v679 == 1)
    {
      outlined destroy of Coordinate3DPB?(v554, &demangling cache variable for type metadata for HandDescriptorInternal?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v950 + 56))(v613, 1, 1, v951);
    }
    else
    {
      outlined init with copy of (Int32, Matrix2dPB)(v554 + *(int *)(v678 + 52), v613, &demangling cache variable for type metadata for HomePinchInternalPB?);
      outlined destroy of Matrix3x3PB(v554, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v950 + 48))(v613, 1, v951) != 1)
      {
        outlined init with take of Matrix2dPB(v613, v677, type metadata accessor for HomePinchInternalPB);
        v680 = v878;
        outlined init with copy of TrackingUpdateDataPB(v677, v878, type metadata accessor for HomePinchInternalPB);
        v681 = v1065;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for HandsFAResultRowPB._StorageClass(0);
          swift_allocObject();
          v682 = swift_retain();
          v683 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v682);
          swift_release();
          *v681 = v683;
          swift_release();
        }
        v684 = *v681;
        v685 = v879;
        outlined init with take of Matrix2dPB(v680, v879, type metadata accessor for HomePinchInternalPB);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v950 + 56))(v685, 0, 1, v951);
        v686 = v880;
        outlined init with take of ImageData?(v685, v880, &demangling cache variable for type metadata for HomePinchInternalPB?);
        v687 = v684
             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
        swift_beginAccess();
        swift_retain();
        outlined assign with take of HomePinchInternalPB?(v686, v687, &demangling cache variable for type metadata for HomePinchInternalPB?);
        swift_endAccess();
        swift_release();
        outlined destroy of Matrix3x3PB(v677, type metadata accessor for HomePinchInternalPB);
        v441 = v1064;
        goto LABEL_196;
      }
    }
    outlined destroy of Coordinate3DPB?(v613, &demangling cache variable for type metadata for HomePinchInternalPB?);
LABEL_196:
    v688 = (uint64_t)v1059;
    v689 = v1059[5];
    v440 = v1034;
    if (v689 != 2)
    {
      v690 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v691 = swift_retain();
        v692 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v691);
        swift_release();
        *v690 = v692;
        swift_release();
      }
      v693 = (_BYTE *)(*v690
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
      swift_beginAccess();
      *v693 = v689 & 1;
      v441 = v1064;
      v688 = (uint64_t)v1059;
    }
    outlined destroy of Matrix3x3PB(v688, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v389 = v1062;
LABEL_201:
    outlined init with copy of (Int32, Matrix2dPB)(v1061, v350, &demangling cache variable for type metadata for HandDescriptor?);
    if (v440(v350, 1, v441) == 1)
    {
      outlined destroy of Coordinate3DPB?(v350, &demangling cache variable for type metadata for HandDescriptor?);
      v694 = v1050;
      goto LABEL_237;
    }
    v695 = v350;
    v696 = (uint64_t)v1043;
    outlined init with take of Matrix2dPB(v695, (uint64_t)v1043, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v697 = *(_BYTE *)(v696 + 136);
    v698 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v699 = swift_retain();
      v700 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v699);
      swift_release();
      *v698 = v700;
      swift_release();
    }
    v701 = *v698;
    swift_beginAccess();
    *(_BYTE *)(v701 + 49) = v697;
    v702 = *(unsigned __int8 *)(v696 + 4);
    if (v702 != 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v703 = swift_retain();
        v704 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v703);
        swift_release();
        *v698 = v704;
        swift_release();
      }
      v705 = (_BYTE *)(*v698
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
      swift_beginAccess();
      *v705 = v702;
      v696 = (uint64_t)v1043;
    }
    v706 = *(_QWORD *)(v696 + 16);
    v707 = (_QWORD *)v696;
    v694 = v1050;
    if (v706)
    {
      v1034 = v440;
      v708 = v707[3];
      v1078 = v707[4];
      v709 = v707[5];
      v1052 = v707[6];
      v710 = v707[7];
      v1077 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v707[8];
      v711 = v707[9];
      v974 = v707[10];
      v973 = v707[11];
      v972 = v707[12];
      v948 = v707[15];
      v947 = v707[16];
      v945.i64[0] = HIDWORD(v947);
      v712 = v707;
      v713 = v708;
      v714 = v712[13];
      v946 = v712[14];
      v715 = v706;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v716 = swift_retain();
        v717 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v716);
        swift_release();
        *v698 = v717;
        swift_release();
      }
      v718 = *v698;
      swift_beginAccess();
      *(_QWORD *)(v718 + 40) = 1;
      *(_BYTE *)(v718 + 48) = 1;
      v940 = v715;
      v941 = v713;
      *(_QWORD *)&v1082[0] = v715;
      *((_QWORD *)&v1082[0] + 1) = v713;
      v944 = v709;
      *((_QWORD *)&v1082[1] + 1) = v709;
      *(_QWORD *)&v1082[1] = v1078;
      v943 = v710;
      *((_QWORD *)&v1082[2] + 1) = v710;
      *(_QWORD *)&v1082[2] = v1052;
      v942.i64[0] = v711;
      *((_QWORD *)&v1082[3] + 1) = v711;
      *(_QWORD *)&v1082[3] = v1077;
      *((_QWORD *)&v1082[4] + 1) = v973;
      *(_QWORD *)&v1082[4] = v974;
      *((_QWORD *)&v1082[5] + 1) = v714;
      *(_QWORD *)&v1082[5] = v972;
      *((_QWORD *)&v1082[6] + 1) = v948;
      *(_QWORD *)&v1082[6] = v946;
      LOWORD(v1082[7]) = v947 & 0x101;
      DWORD1(v1082[7]) = v945.i32[0];
      HandPose.getHoverDistanceVector()();
      v945 = v719;
      outlined consume of HandPose?(v940);
      v720 = v1065;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v721 = swift_retain();
        v722 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v721);
        swift_release();
        *v720 = v722;
        swift_release();
      }
      v723 = vmulq_f32(v945, v945);
      v724 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v723, 2), vaddq_f32(v723, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v723.f32, 1))).f32[0]);
      v725 = *v720;
      swift_beginAccess();
      *(double *)(v725 + 88) = v724;
      *(_BYTE *)(v725 + 96) = 0;
      v726 = v1007;
      *((_QWORD *)v1007 + 10) = v1107;
      v727 = v1006;
      *((_QWORD *)v1006 + 4) = v1101;
      v728 = v1004;
      v1004[2] = v1094;
      *v728 = v1093;
      v729 = v1003;
      v1003[2] = v1092;
      *v729 = v1091;
      v730 = v1001;
      *((_QWORD *)v1001 + 6) = v1088;
      *(_QWORD *)&v1082[0] = v1060;
      *((_QWORD *)&v1082[0] + 1) = v1073;
      *(_QWORD *)&v1082[1] = v1029;
      *((_QWORD *)&v1082[1] + 1) = v1028;
      *(_QWORD *)&v1082[2] = v1027;
      *((_QWORD *)&v1082[2] + 1) = v1026;
      *(_QWORD *)&v1082[3] = v1025;
      *((_QWORD *)&v1082[3] + 1) = v1024;
      v731 = v1105;
      v726[2] = v1104;
      v726[3] = v731;
      v726[4] = v1106;
      v732 = v1103;
      *v726 = v1102;
      v726[1] = v732;
      v694 = v1050;
      *(_QWORD *)&v1082[4] = v1050;
      *(_QWORD *)&v1082[10] = v1057;
      v733 = v1100;
      *v727 = v1099;
      v727[1] = v733;
      v1082[13] = v1049;
      v1082[14] = v1048;
      v1082[15] = v1047;
      v1082[16] = v1046;
      v734 = v1096;
      v735 = v1005;
      *v1005 = v1095;
      v735[1] = v734;
      v736 = v1098;
      v735[2] = v1097;
      v735[3] = v736;
      *(_QWORD *)&v1082[21] = v1053;
      *((_QWORD *)&v1082[21] + 1) = v1045;
      *(_QWORD *)&v1082[22] = __PAIR64__(v1023, v1044);
      *((_QWORD *)&v1082[22] + 1) = v1022;
      *(_QWORD *)&v1082[23] = v1021;
      *((_QWORD *)&v1082[23] + 1) = v1020;
      *(_QWORD *)&v1082[24] = v1019;
      BYTE8(v1082[24]) = v1018;
      v737 = v1008;
      *v1008 = v1017;
      *(_QWORD *)((char *)&v1082[25] + 4) = __PAIR64__(v1015, v1016);
      v737[2] = v1014;
      v737[3] = v1013;
      v737[4] = v1012;
      v737[5] = v1011;
      BYTE12(v1082[27]) = v1010;
      v738 = v1090;
      v739 = v1002;
      *v1002 = v1089;
      v739[1] = v738;
      *(_QWORD *)&v1082[28] = v1009;
      *((_QWORD *)&v1082[30] + 1) = v1076;
      v740 = v1085;
      v741 = v1087;
      v730[1] = v1086;
      v730[2] = v741;
      *v730 = v740;
      v707 = v1043;
      specialized FAMetrics.getGtCameraDistance(_:from:)((uint64_t)v1043, (uint64_t)v1082);
      v743 = v742;
      v744 = swift_isUniquelyReferenced_nonNull_native();
      v745 = (uint64_t)v909;
      if ((v744 & 1) == 0)
      {
        type metadata accessor for HandsFAResultRowPB._StorageClass(0);
        swift_allocObject();
        v746 = swift_retain();
        v747 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v746);
        swift_release();
        *v720 = v747;
        swift_release();
      }
      v748 = *v720;
      swift_beginAccess();
      *(double *)(v748 + 64) = v743;
      *(_BYTE *)(v748 + 72) = 0;
      outlined init with copy of (Int32, Matrix2dPB)(v1063, v745, &demangling cache variable for type metadata for HandDescriptor?);
      v440 = v1034;
      if (v1034(v745, 1, v1064) == 1)
      {
        outlined destroy of Coordinate3DPB?(v745, &demangling cache variable for type metadata for HandDescriptor?);
        v698 = v1065;
      }
      else
      {
        v749 = *(_QWORD *)(v745 + 200);
        outlined copy of HandPose?(v749);
        outlined destroy of Matrix3x3PB(v745, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v698 = v1065;
        if (v749)
        {
          v750 = swift_bridgeObjectRetain();
          outlined consume of HandPose?(v750);
          v751 = v1007;
          *((_QWORD *)v1007 + 10) = v1107;
          v752 = v1006;
          *((_QWORD *)v1006 + 4) = v1101;
          v753 = v1004;
          v1004[2] = v1094;
          *v753 = v1093;
          v754 = v1003;
          v1003[2] = v1092;
          *v754 = v1091;
          v755 = v1001;
          *((_QWORD *)v1001 + 6) = v1088;
          *(_QWORD *)&v1082[0] = v1060;
          *((_QWORD *)&v1082[0] + 1) = v1073;
          *(_QWORD *)&v1082[1] = v1029;
          *((_QWORD *)&v1082[1] + 1) = v1028;
          *(_QWORD *)&v1082[2] = v1027;
          *((_QWORD *)&v1082[2] + 1) = v1026;
          *(_QWORD *)&v1082[3] = v1025;
          *((_QWORD *)&v1082[3] + 1) = v1024;
          v756 = v1105;
          v751[2] = v1104;
          v751[3] = v756;
          v751[4] = v1106;
          v757 = v1103;
          *v751 = v1102;
          v751[1] = v757;
          *(_QWORD *)&v1082[4] = v694;
          *(_QWORD *)&v1082[10] = v1057;
          v758 = v1100;
          *v752 = v1099;
          v752[1] = v758;
          v1082[13] = v1049;
          v1082[14] = v1048;
          v1082[15] = v1047;
          v1082[16] = v1046;
          v759 = v1095;
          v760 = v1098;
          v761 = v1005;
          v1005[2] = v1097;
          v761[3] = v760;
          v762 = v1096;
          *v761 = v759;
          v761[1] = v762;
          *(_QWORD *)&v1082[21] = v1053;
          *((_QWORD *)&v1082[21] + 1) = v1045;
          *(_QWORD *)&v1082[22] = __PAIR64__(v1023, v1044);
          *((_QWORD *)&v1082[22] + 1) = v1022;
          *(_QWORD *)&v1082[23] = v1021;
          *((_QWORD *)&v1082[23] + 1) = v1020;
          *(_QWORD *)&v1082[24] = v1019;
          BYTE8(v1082[24]) = v1018;
          v763 = v1008;
          *v1008 = v1017;
          *(_QWORD *)((char *)&v1082[25] + 4) = __PAIR64__(v1015, v1016);
          v763[2] = v1014;
          v763[3] = v1013;
          v763[4] = v1012;
          v763[5] = v1011;
          BYTE12(v1082[27]) = v1010;
          v764 = v1090;
          v765 = v1002;
          *v1002 = v1089;
          v765[1] = v764;
          *(_QWORD *)&v1082[28] = v1009;
          *((_QWORD *)&v1082[30] + 1) = v1076;
          v766 = v1085;
          v767 = v1087;
          v755[1] = v1086;
          v755[2] = v767;
          *v755 = v766;
          v768 = specialized FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)((uint64_t)v707, (uint64_t)v1082, v749);
          swift_bridgeObjectRelease();
          if (v768 >> 31)
            goto LABEL_279;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for HandsFAResultRowPB._StorageClass(0);
            swift_allocObject();
            v769 = swift_retain();
            v770 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v769);
            swift_release();
            *v698 = v770;
            swift_release();
          }
          v771 = *v698;
          swift_beginAccess();
          *(_DWORD *)(v771 + 76) = v768;
          *(_BYTE *)(v771 + 80) = 0;
        }
      }
    }
    v772 = (char *)v707 + v1064[30];
    v773 = *(_QWORD *)v772;
    v774 = v772[8];
    v775 = *v698
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
    swift_beginAccess();
    v776 = v775;
    v777 = v925;
    outlined init with copy of (Int32, Matrix2dPB)(v776, v925, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    v778 = (int *)v1051;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1031 + 48))(v777, 1, v1051) != 1)
      break;
    v779 = v924;
    UnknownStorage.init()();
    v780 = v779 + v778[5];
    *(_DWORD *)v780 = 0;
    *(_BYTE *)(v780 + 4) = 1;
    v781 = v779 + v778[6];
    *(_DWORD *)v781 = 0;
    *(_BYTE *)(v781 + 4) = 1;
    v782 = v779 + v778[7];
    *(_QWORD *)v782 = 0;
    *(_BYTE *)(v782 + 8) = 1;
    v783 = v779 + v778[8];
    *(_QWORD *)v783 = 0;
    *(_BYTE *)(v783 + 8) = 1;
    v784 = v779 + v778[9];
    *(_DWORD *)v784 = 0;
    *(_BYTE *)(v784 + 4) = 1;
    v785 = v779 + v778[10];
    *(_DWORD *)v785 = 0;
    *(_BYTE *)(v785 + 4) = 1;
    *(_BYTE *)(v779 + v778[11]) = 2;
    *(_BYTE *)(v779 + v778[12]) = 2;
    *(_BYTE *)(v779 + v778[13]) = 2;
    *(_BYTE *)(v779 + v778[14]) = 2;
    v786 = v779;
    v694 = v1050;
    outlined destroy of Coordinate3DPB?(v777, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    if ((v774 & 1) == 0)
      goto LABEL_227;
LABEL_229:
    v787 = v440;
    v788 = v1051;
    v789 = v786 + *(int *)(v1051 + 20);
    *(_DWORD *)v789 = v773;
    *(_BYTE *)(v789 + 4) = 0;
    v790 = v1065;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v791 = swift_retain();
      v792 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v791);
      swift_release();
      *v790 = v792;
      swift_release();
    }
    v793 = *v790;
    v794 = v1041;
    outlined init with take of Matrix2dPB(v786, v1041, type metadata accessor for ObjectInteractionFADataPB);
    v1036(v794, 0, 1, (int *)v788);
    v795 = v1042;
    outlined init with take of ImageData?(v794, v1042, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    v796 = v793
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v795, v796, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
    swift_endAccess();
    swift_release();
    v797 = v917;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v1043 + v1064[36], v917, &demangling cache variable for type metadata for PartialHandMultiCam?);
    v798 = v916;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v978 + 48))(v797, 1, v916) == 1)
    {
      v799 = specialized static Array._allocateUninitialized(_:)(0);
      v800 = v977;
      *v977 = v799;
      v800[1] = specialized static Array._allocateUninitialized(_:)(0);
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v797, &demangling cache variable for type metadata for PartialHandMultiCam?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v797, (uint64_t)v977, type metadata accessor for PartialHandMultiCam);
    }
    v440 = v787;
    v801 = v1065;
    v802 = swift_isUniquelyReferenced_nonNull_native();
    v443 = v1040;
    if ((v802 & 1) == 0)
    {
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v803 = swift_retain();
      v804 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v803);
      swift_release();
      *v801 = v804;
      swift_release();
    }
    v805 = *v801;
    v806 = v918;
    outlined init with take of Matrix2dPB((uint64_t)v977, v918, type metadata accessor for PartialHandMultiCam);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v978 + 56))(v806, 0, 1, v798);
    v807 = v919;
    outlined init with take of ImageData?(v806, v919, &demangling cache variable for type metadata for PartialHandMultiCam?);
    v808 = v805
         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v807, v808, &demangling cache variable for type metadata for PartialHandMultiCam?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB((uint64_t)v1043, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v389 = v1062;
    v441 = v1064;
LABEL_237:
    v809 = v979;
    outlined init with copy of (Int32, Matrix2dPB)(v1063, v979, &demangling cache variable for type metadata for HandDescriptor?);
    if (v440(v809, 1, v441) != 1)
    {
      v810 = v809;
      v811 = v975;
      outlined init with take of Matrix2dPB(v810, v975, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v812 = v923;
      outlined init with copy of (Int32, Matrix2dPB)(v1061, v923, &demangling cache variable for type metadata for HandDescriptor?);
      if (v440(v812, 1, v441) == 1)
      {
        outlined destroy of Matrix3x3PB(v811, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Coordinate3DPB?(v812, &demangling cache variable for type metadata for HandDescriptor?);
LABEL_251:
        v694 = v1050;
        goto LABEL_252;
      }
      v813 = v949;
      outlined init with take of Matrix2dPB(v812, v949, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if ((*(_BYTE *)(v811 + 192) & 1) != 0 || (*(_BYTE *)(v813 + 192) & 1) != 0)
      {
        v814 = v1065;
        v815 = 0.0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_245;
      }
      else
      {
        v870 = (const double *)(v813 + 184);
        v871 = *(float32x2_t *)(v813 + 176);
        v872 = (const double *)(v975 + 184);
        v873 = (float32x4_t)vld1q_dup_f64(v872);
        v874 = *(float32x2_t *)(v975 + 176);
        v875 = (float32x4_t)vld1q_dup_f64(v870);
        *(float32x2_t *)v876.f32 = vsub_f32(v874, v871);
        v876.i64[1] = vsubq_f32(v873, v875).u32[2];
        v877 = vmulq_f32(v876, v876);
        v815 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v877, 2), vaddq_f32(v877, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v877.f32, 1))).f32[0]);
        v814 = v1065;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_245:
          v818 = *v814;
          swift_beginAccess();
          *(double *)(v818 + 120) = v815;
          *(_BYTE *)(v818 + 128) = 0;
          v819 = v975;
          v820 = v949;
          if (*(_QWORD *)(v975 + 16) && *(_QWORD *)(v949 + 16))
          {
            v821 = v1065;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for HandsFAResultRowPB._StorageClass(0);
              swift_allocObject();
              v822 = swift_retain();
              v823 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v822);
              swift_release();
              *v821 = v823;
              swift_release();
            }
            v824 = *v821;
            swift_beginAccess();
            *(_QWORD *)(v824 + 40) = 3;
            *(_BYTE *)(v824 + 48) = 1;
            v820 = v949;
            v819 = v975;
          }
          outlined destroy of Matrix3x3PB(v820, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          outlined destroy of Matrix3x3PB(v819, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          goto LABEL_251;
        }
      }
      type metadata accessor for HandsFAResultRowPB._StorageClass(0);
      swift_allocObject();
      v816 = swift_retain();
      v817 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v816);
      swift_release();
      *v814 = v817;
      swift_release();
      goto LABEL_245;
    }
    outlined destroy of Coordinate3DPB?(v809, &demangling cache variable for type metadata for HandDescriptor?);
LABEL_252:
    v825 = v1007;
    *((_QWORD *)v1007 + 10) = v1107;
    v826 = v1006;
    *((_QWORD *)v1006 + 4) = v1101;
    v827 = v1004;
    v1004[2] = v1094;
    *v827 = v1093;
    v828 = v1003;
    v1003[2] = v1092;
    *v828 = v1091;
    v829 = v1001;
    *((_QWORD *)v1001 + 6) = v1088;
    *(_QWORD *)&v1082[0] = v1060;
    *((_QWORD *)&v1082[0] + 1) = v1073;
    *(_QWORD *)&v1082[1] = v1029;
    *((_QWORD *)&v1082[1] + 1) = v1028;
    *(_QWORD *)&v1082[2] = v1027;
    *((_QWORD *)&v1082[2] + 1) = v1026;
    *(_QWORD *)&v1082[3] = v1025;
    *((_QWORD *)&v1082[3] + 1) = v1024;
    v830 = v1105;
    v825[2] = v1104;
    v825[3] = v830;
    v825[4] = v1106;
    v831 = v1103;
    *v825 = v1102;
    v825[1] = v831;
    *(_QWORD *)&v1082[4] = v694;
    *(_QWORD *)&v1082[10] = v1057;
    v832 = v1100;
    *v826 = v1099;
    v826[1] = v832;
    v1082[13] = v1049;
    v1082[14] = v1048;
    v1082[15] = v1047;
    v1082[16] = v1046;
    v833 = v1096;
    v834 = v1005;
    *v1005 = v1095;
    v834[1] = v833;
    v835 = v1098;
    v834[2] = v1097;
    v834[3] = v835;
    *(_QWORD *)&v1082[21] = v1053;
    *((_QWORD *)&v1082[21] + 1) = v1045;
    *(_QWORD *)&v1082[22] = __PAIR64__(v1023, v1044);
    *((_QWORD *)&v1082[22] + 1) = v1022;
    *(_QWORD *)&v1082[23] = v1021;
    *((_QWORD *)&v1082[23] + 1) = v1020;
    *(_QWORD *)&v1082[24] = v1019;
    BYTE8(v1082[24]) = v1018;
    v836 = v1008;
    *v1008 = v1017;
    *(_QWORD *)((char *)&v1082[25] + 4) = __PAIR64__(v1015, v1016);
    v836[2] = v1014;
    v836[3] = v1013;
    v836[4] = v1012;
    v836[5] = v1011;
    BYTE12(v1082[27]) = v1010;
    v837 = v1090;
    v838 = v1002;
    *v1002 = v1089;
    v838[1] = v837;
    *(_QWORD *)&v1082[28] = v1009;
    *((_QWORD *)&v1082[30] + 1) = v1076;
    v839 = v1085;
    v840 = v1087;
    v829[1] = v1086;
    v829[2] = v840;
    *v829 = v839;
    HandsFAResultRowPB.setValuesForAllJoints(hand:gtHand:data:)(v1063, v1061, v1082);
    outlined init with copy of TrackingUpdateDataPB(v389, v1039, type metadata accessor for HandsFAResultRowPB);
    v841 = *(_QWORD *)(v443 + v1038);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v841 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v841 + 16) + 1, 1, v841);
    v843 = *(_QWORD *)(v841 + 16);
    v842 = *(_QWORD *)(v841 + 24);
    if (v843 >= v842 >> 1)
      v841 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v842 > 1, v843 + 1, 1, v841);
    *(_QWORD *)(v841 + 16) = v843 + 1;
    outlined init with take of Matrix2dPB(v1039, v841+ ((*(unsigned __int8 *)(v980 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v980 + 80))+ *(_QWORD *)(v980 + 72) * v843, type metadata accessor for HandsFAResultRowPB);
    *(_QWORD *)(v443 + v1038) = v841;
    if (v1073)
    {
      v844 = (_DWORD *)v1035;
      v845 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v1035 + 8) = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      *v844 = v1053;
      v846 = *(_QWORD *)(v694 + 16);
      v847 = (uint64_t)v1071;
      if (v846)
      {
        *(_QWORD *)&v1082[0] = v845;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v846, 0);
        v848 = (uint64_t)v914;
        v849 = v694 + ((*(unsigned __int8 *)(v915 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v915 + 80));
        v1078 = *(_QWORD *)(v915 + 72);
        v850 = v913;
        do
        {
          outlined init with copy of TrackingUpdateDataPB(v849, v848, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
          *(_QWORD *)v847 = 0;
          *(_BYTE *)(v847 + 8) = 1;
          UnknownStorage.init()();
          v851 = v847 + *(int *)(v850 + 24);
          v852 = type metadata accessor for BasicHandDescriptorPB(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v852 - 8) + 56))(v851, 1, 1, v852);
          v853 = v847 + *(int *)(v850 + 28);
          v854 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1068 + 56);
          v855 = v1069;
          v854(v853, 1, 1, v1069);
          v856 = v1067;
          HandDescriptor.toProtoBuf()(v1067);
          outlined destroy of Coordinate3DPB?(v853, &demangling cache variable for type metadata for HandDescriptorPB?);
          outlined init with take of Matrix2dPB(v856, v853, type metadata accessor for HandDescriptorPB);
          v854(v853, 0, 1, v855);
          v847 = (uint64_t)v1071;
          v857 = v848 + *(int *)(v1066 + 20);
          v858 = *(_QWORD *)v857;
          LOBYTE(v857) = *(_BYTE *)(v857 + 8);
          *v1071 = v858;
          *(_BYTE *)(v847 + 8) = v857;
          outlined destroy of Matrix3x3PB(v848, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v859 = *(_QWORD *)(*(_QWORD *)&v1082[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v859);
          v860 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v859, v847);
          _s5Hands13PoseImageCropVSgWOi_(v860);
          v849 += v1078;
          --v846;
        }
        while (v846);
        swift_bridgeObjectRelease();
        v861 = *(_QWORD *)&v1082[0];
      }
      else
      {
        v861 = v845;
      }
      v862 = v1035;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v862 + 8) = v861;
      outlined init with copy of TrackingUpdateDataPB(v862, v1000, type metadata accessor for TrackingFAInternalFramePB);
      v863 = (unint64_t *)(v952 + *(int *)(v953 + 28));
      v864 = *v863;
      v865 = swift_isUniquelyReferenced_nonNull_native();
      *v863 = v864;
      v276 = (int *)v1051;
      v866 = v1062;
      if ((v865 & 1) == 0)
      {
        v864 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v864 + 16) + 1, 1, v864);
        *v863 = v864;
      }
      v868 = *(_QWORD *)(v864 + 16);
      v867 = *(_QWORD *)(v864 + 24);
      if (v868 >= v867 >> 1)
        *v863 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v867 > 1, v868 + 1, 1, v864);
      v869 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v868, v1000);
      _s5Hands13PoseImageCropVSgWOi_(v869);
      outlined destroy of Matrix3x3PB(v866, type metadata accessor for HandsFAResultRowPB);
      outlined destroy of Coordinate3DPB?(v1061, &demangling cache variable for type metadata for HandDescriptor?);
      outlined destroy of Coordinate3DPB?(v1063, &demangling cache variable for type metadata for HandDescriptor?);
      outlined destroy of Matrix3x3PB(v1035, type metadata accessor for TrackingFAInternalFramePB);
    }
    else
    {
      outlined destroy of Matrix3x3PB(v1062, type metadata accessor for HandsFAResultRowPB);
      outlined destroy of Coordinate3DPB?(v1061, &demangling cache variable for type metadata for HandDescriptor?);
      outlined destroy of Coordinate3DPB?(v1063, &demangling cache variable for type metadata for HandDescriptor?);
      v276 = (int *)v1051;
    }
    v271 = 1;
    v270 = 1;
    v277 = v1060;
    if ((v1037 & 1) != 0)
    {
      swift_setDeallocating();
      swift_deallocClassInstance();
      return;
    }
  }
  v786 = v924;
  outlined init with take of Matrix2dPB(v777, v924, type metadata accessor for ObjectInteractionFADataPB);
  if ((v774 & 1) != 0)
    goto LABEL_229;
LABEL_227:
  if (v773 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_273;
  if (v773 <= 0x7FFFFFFF)
    goto LABEL_229;
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  __break(1u);
LABEL_277:
  __break(1u);
LABEL_278:
  __break(1u);
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
}

Swift::Void __swiftcall HandsFAData.saveToFile()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(_QWORD);
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  Swift::String v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  _QWORD v70[2];
  char *v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  unsigned int v82;
  void (*v83)(char *, _QWORD, uint64_t);
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD v90[2];
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v1 = v0;
  v94 = *MEMORY[0x24BDAC8D0];
  v86 = type metadata accessor for String.Encoding();
  v78 = *(_QWORD **)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86, v2);
  v74 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v77 = (char *)v70 - v6;
  v7 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87, v13);
  v73 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v79 = (char *)v70 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)v70 - v20;
  v22 = type metadata accessor for JSONEncodingOptions();
  v88 = *(_QWORD *)(v22 - 8);
  v89 = v22;
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONEncodingOptions.init()();
  JSONEncodingOptions.preserveProtoFieldNames.setter();
  v26 = type metadata accessor for HandsFAData();
  v27 = (uint64_t *)(v0 + *(int *)(v26 + 20));
  v28 = *v27;
  v29 = v27[1];
  v81 = v27;
  v91 = v28;
  v92 = v29;
  v30 = *(void (**)(_QWORD))(v8 + 104);
  v82 = *MEMORY[0x24BDCD7A0];
  v83 = (void (*)(char *, _QWORD, uint64_t))v30;
  v30(v11);
  v31 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v84 = v31;
  URL.appending<A>(path:directoryHint:)();
  v32 = *(void (**)(char *, uint64_t))(v8 + 8);
  v80 = v11;
  v85 = v7;
  v32(v11, v7);
  swift_bridgeObjectRelease();
  v33 = URL.path.getter();
  v35 = v34;
  v36 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v37 = (void *)MEMORY[0x2426372E8](v33, v35);
  swift_bridgeObjectRelease();
  v91 = 0;
  LODWORD(v35) = objc_msgSend(v36, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v37, 1, 0, &v91);

  v38 = (id)v91;
  if ((_DWORD)v35)
  {
    v72 = v32;
    v76 = v21;
    v75 = v12;
    type metadata accessor for HandsFAResultTablePB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
    v39 = v38;
    v40 = Message.jsonString(options:)();
    v44 = v43;
    v71 = v25;
    v70[1] = v26;
    v70[0] = v1;
    v91 = 0;
    v92 = 0xE000000000000000;
    v45 = v40;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v91 = 47;
    v92 = 0xE100000000000000;
    v46 = *v81;
    v47 = (void *)v81[1];
    swift_bridgeObjectRetain();
    v48._countAndFlagsBits = v46;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x61665F65736F705FLL;
    v49._object = (void *)0xED00006E6F736A2ELL;
    String.append(_:)(v49);
    v50 = v80;
    v51 = v85;
    v83(v80, v82, v85);
    v52 = v79;
    URL.appending<A>(path:directoryHint:)();
    v72(v50, v51);
    swift_bridgeObjectRelease();
    v91 = v45;
    v92 = v44;
    v53 = v77;
    static String.Encoding.utf8.getter();
    StringProtocol.write(to:atomically:encoding:)();
    v54 = v53;
    v55 = (void (*)(char *, uint64_t))v78[1];
    v55(v54, v86);
    swift_bridgeObjectRelease();
    type metadata accessor for TrackingFAInternalDataPB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
    v56 = v71;
    v57 = Message.jsonString(options:)();
    v59 = v58;
    v91 = 0;
    v92 = 0xE000000000000000;
    v78 = (_QWORD *)v57;
    _StringGuts.grow(_:)(19);
    v61 = *v81;
    v60 = v81[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v91 = v61;
    v92 = v60;
    v62._object = (void *)0x800000023D9CC3E0;
    v62._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v62);
    v63 = v59;
    v64 = v80;
    v65 = v85;
    v83(v80, v82, v85);
    v66 = v73;
    URL.appending<A>(path:directoryHint:)();
    v72(v64, v65);
    swift_bridgeObjectRelease();
    v91 = (unint64_t)v78;
    v92 = v63;
    v67 = v74;
    static String.Encoding.utf8.getter();
    StringProtocol.write(to:atomically:encoding:)();
    v55(v67, v86);
    v68 = *(void (**)(char *, uint64_t))(v75 + 8);
    v69 = v87;
    v68(v66, v87);
    v68(v52, v69);
    v68(v76, v69);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v89);
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = (id)v91;
    v42 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v87);
    v93 = MEMORY[0x24BEE0D00];
    v91 = 0xD000000000000018;
    v92 = 0x800000023D9CC3C0;
    type metadata accessor for HandyLoggerNeo();
    memset(v90, 0, sizeof(v90));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v90, 0xD00000000000004ELL, 0x800000023D9CC370, 351, (uint64_t)&v91, MEMORY[0x24BEE4AF8]);

    (*(void (**)(char *, uint64_t))(v88 + 8))(v25, v89);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v91);
  }
}

uint64_t loadGTData(from:to:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  _OWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  __int128 v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;

  v192 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v191 = (uint64_t)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v190 = (char *)&v161 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v195 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PoseSpecPB(0);
  v188 = *(_QWORD *)(v14 - 8);
  v189 = v14;
  MEMORY[0x24BDAC7A8](v14, v15);
  v187 = (uint64_t *)((char *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for JointTransformPB(0);
  v168 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v199 = (char *)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = (char *)&v161 - v22;
  v24 = type metadata accessor for HandPosePB(0);
  v185 = *(_QWORD *)(v24 - 8);
  v186 = v24;
  MEMORY[0x24BDAC7A8](v24, v25);
  v167 = (uint64_t *)((char *)&v161 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v27, v28);
  v166 = (uint64_t)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30, v31);
  v184 = (uint64_t)&v161 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v183 = (char *)&v161 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for HandDescriptor();
  v193 = *(_QWORD *)(v182 - 8);
  MEMORY[0x24BDAC7A8](v182, v36);
  v181 = (char *)&v161 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38, v39);
  v197 = (uint64_t)&v161 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v41, v42);
  v180 = (uint64_t)&v161 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44, v45);
  v179 = (uint64_t)&v161 - v46;
  MEMORY[0x24BDAC7A8](v47, v48);
  v178 = (uint64_t)&v161 - v49;
  v50 = type metadata accessor for Coordinate3DPB(0);
  v176 = *(_QWORD *)(v50 - 8);
  v177 = v50;
  MEMORY[0x24BDAC7A8](v50, v51);
  v175 = (uint64_t *)((char *)&v161 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v53, v54);
  v174 = (char *)&v161 - v55;
  MEMORY[0x24BDAC7A8](v56, v57);
  v194 = (char *)&v161 - v58;
  v173 = type metadata accessor for HandGTDescriptorPB(0);
  v59 = *(_QWORD *)(v173 - 8);
  MEMORY[0x24BDAC7A8](v173, v60);
  v62 = (char *)&v161 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v63, v64);
  v65 = type metadata accessor for FrameLabelPB(0);
  MEMORY[0x24BDAC7A8](v65, v66);
  v68 = (char *)&v161 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v211 = 0;
  v209 = 0u;
  v210 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
  Message.init(serializedData:extensions:partial:options:)();
  v198 = v62;
  v69 = *((_QWORD *)v68 + 1);
  v171 = *(_QWORD *)(v69 + 16);
  v172 = v59;
  if (!v171)
    return outlined destroy of Matrix3x3PB((uint64_t)v68, type metadata accessor for FrameLabelPB);
  v162 = v68;
  v70 = v172;
  v169 = v69 + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
  v164 = (_QWORD *)(v197 + 88);
  result = swift_bridgeObjectRetain();
  v72 = 0;
  v163 = xmmword_23D9A3E10;
  v73 = (uint64_t)v194;
  v170 = v69;
  while (v72 < *(_QWORD *)(v69 + 16))
  {
    v74 = *(_QWORD *)(v70 + 72);
    v196 = v72;
    v75 = (uint64_t)v198;
    outlined init with copy of TrackingUpdateDataPB(v169 + v74 * v72, (uint64_t)v198, type metadata accessor for HandGTDescriptorPB);
    v200 = *(int *)(v173 + 20);
    v76 = *(_QWORD *)(v75 + v200)
        + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
    swift_beginAccess();
    v77 = v76;
    v78 = v178;
    outlined init with copy of (Int32, Matrix2dPB)(v77, v178, &demangling cache variable for type metadata for Coordinate3DPB?);
    v79 = v177;
    v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
    if (v80(v78, 1, v177) == 1)
    {
      *(_QWORD *)v73 = 0;
      *(_DWORD *)(v73 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v78, v73, type metadata accessor for Coordinate3DPB);
    }
    v82 = (uint64_t)v174;
    LODWORD(v81) = *(_DWORD *)v73;
    v208 = v81;
    outlined destroy of Matrix3x3PB(v73, type metadata accessor for Coordinate3DPB);
    v83 = (uint64_t)v198;
    v84 = *(_QWORD *)&v198[v200]
        + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
    swift_beginAccess();
    v85 = v84;
    v86 = v179;
    outlined init with copy of (Int32, Matrix2dPB)(v85, v179, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v80(v86, 1, v79) == 1)
    {
      *(_QWORD *)v82 = 0;
      *(_DWORD *)(v82 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v86, v82, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v87) = *(_DWORD *)(v82 + 4);
    v207 = v87;
    outlined destroy of Matrix3x3PB(v82, type metadata accessor for Coordinate3DPB);
    v88 = *(_QWORD *)(v83 + v200)
        + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
    swift_beginAccess();
    v89 = v88;
    v90 = v180;
    outlined init with copy of (Int32, Matrix2dPB)(v89, v180, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v80(v90, 1, v79) == 1)
    {
      v91 = v175;
      *v175 = 0;
      *((_DWORD *)v91 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v90, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v91 = v175;
      outlined init with take of Matrix2dPB(v90, (uint64_t)v175, type metadata accessor for Coordinate3DPB);
    }
    *(_QWORD *)&v92 = __PAIR64__(v207, v208);
    *((_QWORD *)&v92 + 1) = *((unsigned int *)v91 + 2);
    v208 = v92;
    outlined destroy of Matrix3x3PB((uint64_t)v91, type metadata accessor for Coordinate3DPB);
    v93 = v200;
    v94 = *(_QWORD *)(v83 + v200);
    swift_beginAccess();
    if (*(_BYTE *)(v94 + 20))
      v95 = 0;
    else
      v95 = *(unsigned int *)(v94 + 16);
    v96 = (unsigned __int8 *)(v94
                            + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
    swift_beginAccess();
    v97 = v83;
    v98 = *v96;
    v209 = v208;
    v210 = v208;
    v99 = type metadata accessor for HandDescriptorInternal();
    v100 = (uint64_t)v183;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v183, 1, 1, v99);
    v101 = v197;
    HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)(v95, v98, (uint64_t)&v209, v100, v197, 0.0);
    v102 = v94
         + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
    swift_beginAccess();
    v103 = v184;
    outlined init with copy of (Int32, Matrix2dPB)(v102, v184, &demangling cache variable for type metadata for HandPosePB?);
    v104 = v186;
    v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v185 + 48);
    LODWORD(v102) = v105(v103, 1, v186);
    outlined destroy of Coordinate3DPB?(v103, &demangling cache variable for type metadata for HandPosePB?);
    v106 = (uint64_t)v195;
    if ((_DWORD)v102 != 1)
    {
      v107 = *(_QWORD *)(v97 + v93)
           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
      swift_beginAccess();
      v108 = v166;
      outlined init with copy of (Int32, Matrix2dPB)(v107, v166, &demangling cache variable for type metadata for HandPosePB?);
      if (v105(v108, 1, v104) == 1)
      {
        v109 = v167;
        *v167 = MEMORY[0x24BEE4AF8];
        *((_DWORD *)v109 + 2) = 0;
        UnknownStorage.init()();
        v110 = (char *)v109 + *(int *)(v104 + 28);
        v111 = type metadata accessor for Matrix2dPB(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v110, 1, 1, v111);
        outlined destroy of Coordinate3DPB?(v108, &demangling cache variable for type metadata for HandPosePB?);
      }
      else
      {
        v109 = v167;
        outlined init with take of Matrix2dPB(v108, (uint64_t)v167, type metadata accessor for HandPosePB);
      }
      v112 = v168;
      v113 = *v109;
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB((uint64_t)v109, type metadata accessor for HandPosePB);
      v114 = *(_QWORD *)(v113 + 16);
      if (v114)
      {
        v218 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
        v115 = *(unsigned __int8 *)(v112 + 80);
        v165 = v113;
        v116 = v113 + ((v115 + 32) & ~v115);
        v117 = *(_QWORD *)(v112 + 72);
        v118 = v218;
        v119 = (uint64_t)v199;
        do
        {
          outlined init with copy of TrackingUpdateDataPB(v116, (uint64_t)v23, type metadata accessor for JointTransformPB);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v23, v119, type metadata accessor for JointTransformPB);
          JointTransform.init(protoBuf:)(v119, &v209);
          outlined destroy of Matrix3x3PB((uint64_t)v23, type metadata accessor for JointTransformPB);
          v120 = v209;
          v207 = v211;
          v208 = v210;
          v205 = v213;
          v206 = v212;
          v203 = v215;
          v204 = v214;
          v201 = v217;
          v202 = v216;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v118 + 16) + 1, 1);
            v119 = (uint64_t)v199;
            v118 = v218;
          }
          v122 = *(_QWORD *)(v118 + 16);
          v121 = *(_QWORD *)(v118 + 24);
          if (v122 >= v121 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v121 > 1, v122 + 1, 1);
            v119 = (uint64_t)v199;
            v118 = v218;
          }
          *(_QWORD *)(v118 + 16) = v122 + 1;
          v123 = (_OWORD *)(v118 + 144 * v122);
          v123[2] = v120;
          v124 = v207;
          v123[3] = v208;
          v123[4] = v124;
          v125 = v205;
          v123[5] = v206;
          v123[6] = v125;
          v126 = v203;
          v123[7] = v204;
          v123[8] = v126;
          v127 = v201;
          v123[9] = v202;
          v123[10] = v127;
          v116 += v117;
          --v114;
        }
        while (v114);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v118 = MEMORY[0x24BEE4AF8];
      }
      v128 = (uint64_t)v198;
      v129 = v200;
      v130 = (unsigned __int8 *)(*(_QWORD *)&v198[v200]
                               + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
      swift_beginAccess();
      v131 = *v130;
      v132 = swift_bridgeObjectRetain();
      v133 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v132);
      swift_bridgeObjectRelease();
      type metadata accessor for HandsKitUtils();
      v134 = swift_bridgeObjectRetain();
      static HandsKitUtils.calculatePalmCenter(_:)(v134, &v209);
      swift_bridgeObjectRelease();
      v208 = v209;
      v135 = *((_QWORD *)&v210 + 1);
      v136 = v210;
      if (v131)
        v137 = 257;
      else
        v137 = 1;
      v101 = v197;
      outlined consume of HandPose?(*(_QWORD *)(v197 + 16));
      *(_QWORD *)(v101 + 16) = v118;
      *(_QWORD *)(v101 + 24) = v133;
      v93 = v129;
      *(_OWORD *)(v101 + 32) = v208;
      *(_QWORD *)(v101 + 48) = v136;
      *(_QWORD *)(v101 + 56) = v135;
      v138 = v163;
      *(_OWORD *)(v101 + 64) = v163;
      *(_QWORD *)(v101 + 80) = 0x3F80000000000000;
      v139 = v164;
      *v164 = 0;
      v139[1] = 0;
      *(_OWORD *)(v101 + 104) = v138;
      *(_QWORD *)(v101 + 120) = 0x3F80000000000000;
      *(_QWORD *)(v101 + 128) = v137;
      v106 = (uint64_t)v195;
      v97 = v128;
    }
    v140 = *(_QWORD *)(v97 + v93);
    v141 = (_BYTE *)(v140
                   + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
    swift_beginAccess();
    *(_BYTE *)(v101 + 4) = *v141 & 1;
    v142 = v140
         + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
    swift_beginAccess();
    outlined init with copy of (Int32, Matrix2dPB)(v142, v106, &demangling cache variable for type metadata for PoseSpecPB?);
    v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v188 + 48))(v106, 1, v189);
    v144 = (uint64_t)v181;
    v145 = v187;
    if (v143 == 1)
    {
      v146 = MEMORY[0x24BEE4AF8];
      *v187 = MEMORY[0x24BEE4AF8];
      v145[1] = 0;
      *((_BYTE *)v145 + 16) = 1;
      v145[3] = v146;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v106, &demangling cache variable for type metadata for PoseSpecPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v106, (uint64_t)v187, type metadata accessor for PoseSpecPB);
    }
    v73 = (uint64_t)v194;
    v147 = v190;
    PoseSpec.init(protoBuf:)(v145, &v209);
    v148 = v209;
    outlined consume of HandPose?(*(_QWORD *)(v101 + 200));
    *(_OWORD *)(v101 + 200) = v148;
    v149 = *(_QWORD *)&v198[v200]
         + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
    swift_beginAccess();
    v150 = v191;
    outlined init with copy of (Int32, Matrix2dPB)(v149, v191, &demangling cache variable for type metadata for PartialHandMultiCam?);
    v151 = type metadata accessor for PartialHandMultiCam(0);
    v152 = *(_QWORD *)(v151 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151) == 1)
    {
      v153 = MEMORY[0x24BEE4AF8];
      *v147 = MEMORY[0x24BEE4AF8];
      v147[1] = v153;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v150, &demangling cache variable for type metadata for PartialHandMultiCam?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v150, (uint64_t)v147, type metadata accessor for PartialHandMultiCam);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v147, 0, 1, v151);
    outlined assign with take of HomePinchInternalPB?((uint64_t)v147, v101 + *(int *)(v182 + 144), &demangling cache variable for type metadata for PartialHandMultiCam?);
    outlined init with copy of TrackingUpdateDataPB(v101, v144, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v154 = v192;
    v155 = *(_QWORD *)(v192 + 160);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v155 + 16) + 1, 1, v155);
    v157 = *(_QWORD *)(v155 + 16);
    v156 = *(_QWORD *)(v155 + 24);
    v158 = v193;
    if (v157 >= v156 >> 1)
    {
      v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1, v157 + 1, 1, v155);
      v158 = v193;
      v155 = v160;
    }
    v159 = v196 + 1;
    *(_QWORD *)(v155 + 16) = v157 + 1;
    outlined init with take of Matrix2dPB(v144, v155+ ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80))+ *(_QWORD *)(v158 + 72) * v157, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    *(_QWORD *)(v154 + 160) = v155;
    outlined destroy of Matrix3x3PB((uint64_t)v198, type metadata accessor for HandGTDescriptorPB);
    result = outlined destroy of Matrix3x3PB(v197, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v72 = v159;
    v70 = v172;
    v69 = v170;
    if (v159 == v171)
    {
      swift_bridgeObjectRelease();
      v68 = v162;
      return outlined destroy of Matrix3x3PB((uint64_t)v68, type metadata accessor for FrameLabelPB);
    }
  }
  __break(1u);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandsFAData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v15 = *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
    v16 = &v13[v15];
    v17 = &v14[v15];
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
    v20 = a3[7];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (char *)a2 + v20;
    v23 = *(uint64_t *)((char *)a2 + v20 + 8);
    *v21 = *(uint64_t *)((char *)a2 + v20);
    v21[1] = v23;
    v21[2] = *(uint64_t *)((char *)a2 + v20 + 16);
    v24 = *(int *)(type metadata accessor for TrackingFAInternalDataPB(0) + 24);
    v25 = (char *)v21 + v24;
    v26 = &v22[v24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v25, v26, v18);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for HandsFAData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for TrackingFAInternalDataPB(0);
  v8(v9 + *(int *)(v10 + 24), v7);
  return swift_release();
}

uint64_t initializeWithCopy for HandsFAData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v14 = *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a2 + v19 + 8);
  *v20 = *(_QWORD *)(a2 + v19);
  v20[1] = v22;
  v20[2] = *(_QWORD *)(a2 + v19 + 16);
  v23 = *(int *)(type metadata accessor for TrackingFAInternalDataPB(0) + 24);
  v24 = (char *)v20 + v23;
  v25 = v21 + v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18((uint64_t)v24, v25, v17);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HandsFAData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
  v14 = (char *)(v11 + v13);
  v15 = v12 + v13;
  v16 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  v18 = a3[7];
  v19 = (char *)(a1 + v18);
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)(a2 + v18);
  *((_QWORD *)v19 + 1) = *(_QWORD *)(a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v19 + 2) = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for TrackingFAInternalDataPB(0);
  v17(&v19[*(int *)(v21 + 24)], v20 + *(int *)(v21 + 24), v16);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for HandsFAData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v10 = *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
  v11 = v8 + v10;
  v12 = v9 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_OWORD *)v16 = *(_OWORD *)(a2 + v15);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + v15 + 16);
  v18 = type metadata accessor for TrackingFAInternalDataPB(0);
  v14(v16 + *(int *)(v18 + 24), v17 + *(int *)(v18 + 24), v13);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for HandsFAData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease();
  v15 = *(int *)(type metadata accessor for HandsFAResultTablePB(0) + 20);
  v16 = (char *)(v13 + v15);
  v17 = v14 + v15;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40);
  v19(v16, v17, v18);
  v20 = a3[7];
  v21 = (char *)(a1 + v20);
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  *((_QWORD *)v21 + 2) = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease();
  v24 = type metadata accessor for TrackingFAInternalDataPB(0);
  v19(&v21[*(int *)(v24 + 24)], v22 + *(int *)(v24 + 24), v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandsFAData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D79EBF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for HandsFAResultTablePB(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = type metadata accessor for TrackingFAInternalDataPB(0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[7];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsFAData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D79ECD0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for HandsFAResultTablePB(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for TrackingFAInternalDataPB(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for HandsFAData()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for HandsFAResultTablePB(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for TrackingFAInternalDataPB(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t outlined copy of ObjectInteractionData?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *outlined retain of ObjectInteractionData?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t outlined consume of ObjectInteractionData?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata completion function for ResourceWrapper()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ResourceWrapper.WrappedStruct.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  ResourceWrapper.WrappedStruct.init()();
  return v0;
}

uint64_t *ResourceWrapper.WrappedStruct.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v12;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3, v5);
  v8 = (char *)&v12 - v7;
  v9 = (uint64_t)v0 + *(_QWORD *)(v1 + 96);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 56);
  v10(v9, 1, 1, v2, v6);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v10)(v8, 1, 1, v2);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v9, v8, v3);
  swift_endAccess();
  return v0;
}

uint64_t ResourceWrapper.WrappedStruct.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

id ResourceWrapper.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60);
  v3 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x50);
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  type metadata accessor for ResourceWrapper.WrappedStruct(0, v3, v3, v5);
  v6 = swift_allocObject();
  v7 = v0;
  ResourceWrapper.WrappedStruct.init()();
  *(_QWORD *)((char *)v7 + *(_QWORD *)((*v1 & *v7) + 0x58)) = v6;

  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for ResourceWrapper(0, v3, v8, v9);
  return objc_msgSendSuper2(&v11, sel_init);
}

id @objc ResourceWrapper.init()()
{
  return ResourceWrapper.init()();
}

id ResourceWrapper.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for ResourceWrapper(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), a3, a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc ResourceWrapper.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  swift_release();
  v3 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x60);
  type metadata accessor for Optional();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t type metadata accessor for ResourceWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResourceWrapper);
}

uint64_t type metadata completion function for ResourceWrapper.WrappedStruct()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ResourceWrapper.WrappedStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResourceWrapper.WrappedStruct);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242638C08](a1, v6, a5);
}

Swift::Void __swiftcall Pose.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  _UNKNOWN **v15;
  _QWORD **v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  HandsKitConfig *v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  HandsKitConfig *v27;
  uint64_t v28;
  HandsKitConfig *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  HandsKitConfig *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  HandsKitConfig *v37;
  uint64_t v38;
  _UNKNOWN **v39;
  HandsKitConfig *v40;
  HandsKitConfig *v41;
  _QWORD *v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v53 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = MEMORY[0x24BEE4B08];
  swift_retain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v7 + 24) = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t *)&v56, 0);
  specialized Set._Variant.insert(_:)((uint64_t *)&v56, 1);
  swift_endAccess();
  swift_release();
  v8 = *(unsigned __int8 *)(v1 + 32);
  v9 = &selRef_downScaleIntrinsics_;
  if (-[HandsKitConfig PosePipelineType](a1, sel_PosePipelineType))
  {
    if (v8 == (-[HandsKitConfig PosePipelineType](a1, sel_PosePipelineType) != 3))
      goto LABEL_8;
LABEL_5:
    v10 = v2 + 16;
    swift_beginAccess();
    v11 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v11 + 16) == 2)
    {
      outlined init with copy of Detection2DComputePipelineProtocol(v11 + 32, (uint64_t)&v58);
      v12 = v60;
      v13 = v61;
      __swift_project_boxed_opaque_existential_1(&v58, v60);
      ((void (*)(HandsKitConfig *, uint64_t, _UNKNOWN **))v13[3])(a1, v12, v13);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v58);
      if (*(_QWORD *)(*(_QWORD *)v10 + 16) < 2uLL)
      {
        __break(1u);
      }
      else
      {
        outlined init with copy of Detection2DComputePipelineProtocol(*(_QWORD *)v10 + 72, (uint64_t)&v58);
        v14 = v60;
        v15 = v61;
        __swift_project_boxed_opaque_existential_1(&v58, v60);
        ((void (*)(HandsKitConfig *, uint64_t, _UNKNOWN **))v15[3])(a1, v14, v15);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v58);
      }
      return;
    }
    goto LABEL_8;
  }
  if ((v8 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v16 = (_QWORD **)(v2 + 16);
  swift_beginAccess();
  v48 = v2;
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v17 = 0;
  v52 = &v59;
  v51 = xmmword_23D9A6CC0;
  v50 = 0x800000023D9CC520;
  v49 = 0x800000023D9CC4B0;
  do
  {
    LODWORD(v18) = v17;
    v19 = objc_msgSend(a1, v9[19]);
    switch(v19)
    {
      case 1u:
        v36 = type metadata accessor for TaxiPoseActionPipeline();
        swift_allocObject();
        v37 = a1;
        v38 = (uint64_t)specialized TaxiPoseActionPipeline.init(options:)(v37);

        v39 = &protocol witness table for TaxiPoseActionPipeline;
        break;
      case 2u:
        v36 = type metadata accessor for MonoPosePipeline();
        swift_allocObject();
        v40 = a1;
        v38 = (uint64_t)specialized MonoPosePipeline.init(options:)(v40);

        v39 = &protocol witness table for MonoPosePipeline;
        break;
      case 3u:
        v54 = type metadata accessor for HybridPoseActionPipeline();
        v20 = swift_allocObject();
        v55 = v18;
        v18 = v20;
        *(_BYTE *)(v20 + 32) = 1;
        v58 = v51;
        v21 = v52;
        *v52 = 0;
        v21[1] = 0;
        v57 = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v56 = 0xD00000000000002CLL;
        *((_QWORD *)&v56 + 1) = v50;
        v22 = a1;
        specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000068, v49, 46, (uint64_t *)&v58, (uint64_t)&v56, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v56);
        type metadata accessor for HybridPoseActionPipeline.State();
        v23 = swift_allocObject() + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand;
        v24 = type metadata accessor for HandDescriptor();
        v25 = v9;
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
        v26(v23, 1, 1, v24);
        v27 = v22;
        v28 = specialized UberPoseActionPipeline.State.init(_:)(v27);

        v29 = a1;
        v30 = v53;
        v26((uint64_t)v53, 1, 1, v24);
        v9 = v25;
        v31 = v28 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand;
        swift_beginAccess();
        v32 = (uint64_t)v30;
        a1 = v29;
        outlined assign with take of HandDescriptor?(v32, v31);
        swift_endAccess();
        type metadata accessor for UberPoseActionPipeline();
        swift_allocObject();
        v33 = v27;
        swift_retain();
        v34 = specialized UberPoseActionPipeline.init(options:state:isPoseOnly:)(v33, v28, 0);

        swift_release();
        *(_QWORD *)(v18 + 16) = v34;
        swift_allocObject();
        v35 = specialized UberPoseActionPipeline.init(options:state:isPoseOnly:)(v33, v28, 1);
        swift_release();
        *(_QWORD *)(v18 + 24) = v35;

        v60 = v54;
        v61 = &protocol witness table for HybridPoseActionPipeline;
        *(_QWORD *)&v58 = v18;
        LOBYTE(v18) = v55;
        goto LABEL_17;
      default:
        v36 = type metadata accessor for UberPoseActionPipeline();
        swift_allocObject();
        v41 = a1;
        v38 = specialized UberPoseActionPipeline.init(options:state:isPoseOnly:)(v41, 0, 0);

        v39 = &protocol witness table for UberPoseActionPipeline;
        break;
    }
    v60 = v36;
    v61 = v39;
    *(_QWORD *)&v58 = v38;
LABEL_17:
    outlined init with copy of Detection2DComputePipelineProtocol((uint64_t)&v58, (uint64_t)&v56);
    swift_beginAccess();
    v42 = *v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v16 = v42;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      *v16 = v42;
    }
    v45 = v42[2];
    v44 = v42[3];
    if (v45 >= v44 >> 1)
    {
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v42);
      *v16 = v42;
    }
    v42[2] = v45 + 1;
    outlined init with take of PinchCancellationModule(&v56, (uint64_t)&v42[5 * v45 + 4]);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v58);
    v17 = 1;
  }
  while ((v18 & 1) == 0);
  if (objc_msgSend(a1, v9[19]))
    v46 = objc_msgSend(a1, v9[19]) == 3;
  else
    v46 = 1;
  *(_BYTE *)(v48 + 32) = v46;
}

uint64_t Pose.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Pose()
{
  return objc_opt_self();
}

uint64_t MakeBreakSourceAction.predict(_:)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v15[5];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v28[26];

  v4 = type metadata accessor for ActionInternalPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[34];
  v9 = a1[92];
  v10 = a1[134];
  v11 = a1[135];
  v16 = 0;
  v17 = 256;
  v18 = 0;
  v19 = 256;
  v20 = 0;
  v21 = 256;
  v22 = 0;
  v23 = 256;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v26 = 2;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  *v7 = 0;
  UnknownStorage.init()();
  if (v11 < (float)(1.0 - v9))
  {
    v20 = 1;
    v21 = 1;
    if ((float)(1.0 - v8) <= v11)
      *v7 = 1;
  }
  if (v10 < v9)
  {
    v16 = 1;
    v17 = 1;
  }
  v15[3] = v4;
  v15[4] = lazy protocol witness table accessor for type ActionInternalPB and conformance ActionInternalPB(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  outlined init with take of ActionInternalPB((uint64_t)v7, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of PinchInternalDataType?((uint64_t)v15, (uint64_t)v24);
  outlined init with copy of UnitResult((uint64_t)&v16, a2);
  return outlined destroy of UnitResult((uint64_t)&v16);
}

uint64_t type metadata accessor for MakeBreakSourceAction()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in ActionInternalPB()
{
  return lazy protocol witness table accessor for type ActionInternalPB and conformance ActionInternalPB(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
}

uint64_t protocol witness for PinchAlgorithmUnit.predict(_:) in conformance MakeBreakSourceAction@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  return MakeBreakSourceAction.predict(_:)(a1, a2);
}

uint64_t protocol witness for PinchInternalDataType.save(into:) in conformance ActionInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = a1 + *(int *)(v5 + 40);
    outlined destroy of ActionInternalPB?(v7);
    outlined init with copy of ActionInternalPB(v2, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v7, 0, 1, a2);
  }
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance ActionInternalPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActionInternalPB(v1, a1);
}

uint64_t instantiation function for generic protocol witness table for ActionInternalPB(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type ActionInternalPB and conformance ActionInternalPB(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined destroy of ActionInternalPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ActionInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ActionInternalPB and conformance ActionInternalPB(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ActionInternalPB(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ActionInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UnitResult(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UnitResult(a2, a1);
  return a2;
}

uint64_t ManipulatingObjectSuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v4 = 33;
  while (1)
  {
    v5 = v4 - 31;
    if (__OFADD__(v4 - 32, 1))
      break;
    result = *(unsigned __int8 *)(v2 + v4);
    if ((result & 1) == 0)
    {
      ++v4;
      if (v5 != v3)
        continue;
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ManipulatingObjectSuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ManipulatingObjectSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance ManipulatingObjectSuppressor(char a1, uint64_t a2)
{
  return specialized ManipulatingObjectSuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2);
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance ManipulatingObjectSuppressor()
{
  return ManipulatingObjectSuppressor.shouldSuppress(basedOn:)() & 1;
}

uint64_t specialized ManipulatingObjectSuppressor.update(inProgress:withHand:withData:atTime:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char **v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;

  if ((a1 & 1) != 0)
  {
    result = type metadata accessor for HandDescriptor();
    v5 = (_QWORD *)(a2 + *(int *)(result + 124));
    if (*v5)
    {
      v6 = v5[2];
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        v8 = *(_BYTE *)(v7 + v6 + 31);
      else
        v8 = 0;
      v9 = (char **)(v2 + 32);
      swift_beginAccess();
      v10 = *(char **)(v2 + 32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v2 + 32) = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        *v9 = v10;
      }
      v13 = *((_QWORD *)v10 + 2);
      v12 = *((_QWORD *)v10 + 3);
      if (v13 >= v12 >> 1)
      {
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v10);
        *v9 = v10;
      }
      *((_QWORD *)v10 + 2) = v13 + 1;
      v10[v13 + 32] = v8;
      return swift_endAccess();
    }
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)(v2 + 32) = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL SIMD3<>.almostEqual(to:withThreshold:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float32x4_t v3;
  float v4;

  v3 = vsubq_f32(a3, a1);
  v4 = a2;
  if (fabsf(v3.f32[0]) > v4)
    return 0;
  if (fabsf(v3.f32[1]) <= v4)
    return fabsf(v3.f32[2]) <= v4;
  return 0;
}

BOOL SIMD4<>.almostEqual(to:withThreshold:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float32x4_t v3;
  float v4;

  v3 = vsubq_f32(a3, a1);
  v4 = a2;
  if (fabsf(v3.f32[0]) > v4)
    return 0;
  if (fabsf(v3.f32[1]) > v4)
    return 0;
  if (fabsf(v3.f32[2]) <= v4)
    return fabsf(v3.f32[3]) <= v4;
  return 0;
}

__n128 PinchAcceptorDuringTouchForScroll.processAtPotentialMake(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __n128 v10;
  __n128 result;
  __n128 v12;
  _OWORD v13[8];
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[7];
  __int128 v20;
  _BYTE v21[590];

  v3 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v3;
  v14 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v6;
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)v19 = *(_DWORD *)(a1 + 161);
  *(_DWORD *)&v19[3] = *(_DWORD *)(a1 + 164);
  v9 = *(_BYTE *)(a1 + 160);
  memcpy(v21, (const void *)(a1 + 184), sizeof(v21));
  swift_beginAccess();
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  PichAcceptorWithMakeCandidate.resetPinchBuffer()();
  *(_BYTE *)(v1 + 80) = 1;
  v10.n128_u64[0] = *(_QWORD *)(a1 + 136);
  v12 = v10;
  v15 = v10.n128_u64[0];
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v20 = *(_OWORD *)(a1 + 168);
  PinchCandidateProcessor.assignMakeFrameCandidate(_:)((uint64_t)v13);
  *(_BYTE *)(v1 + 49) = 1;
  result = v12;
  *(_DWORD *)(v1 + 128) = v12.n128_u32[0];
  return result;
}

uint64_t PinchAcceptorDuringTouchForScroll.processAtPotentialTouchFrame(_:)(__int128 *a1)
{
  uint64_t v1;
  float v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[7];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[590];

  v3 = *((float *)a1 + 34);
  v4 = *((_DWORD *)a1 + 35);
  v5 = *((_QWORD *)a1 + 18);
  v6 = *((_QWORD *)a1 + 19);
  v7 = *((_BYTE *)a1 + 160);
  v9 = *((_QWORD *)a1 + 21);
  v8 = *((_QWORD *)a1 + 22);
  result = swift_beginAccess();
  v11 = *(_QWORD *)(v1 + 72);
  v12 = __CFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    if (v13 >= 0x3E8)
      v13 = 1000;
    *(_QWORD *)(v1 + 72) = v13;
    v14 = a1[7];
    v28 = a1[6];
    v29 = v14;
    v30 = *((_QWORD *)a1 + 16);
    v15 = a1[3];
    v24 = a1[2];
    v25 = v15;
    v16 = a1[5];
    v26 = a1[4];
    v27 = v16;
    v17 = a1[1];
    v22 = *a1;
    v23 = v17;
    v31 = v3;
    v32 = v4;
    v33 = v5;
    v34 = v6;
    v35 = v7;
    *(_DWORD *)v36 = *(_DWORD *)((char *)a1 + 161);
    *(_DWORD *)&v36[3] = *((_DWORD *)a1 + 41);
    v37 = v9;
    v38 = v8;
    memcpy(v39, (char *)a1 + 184, sizeof(v39));
    PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)((uint64_t *)&v22);
    *(float *)(v1 + 128) = (float)(v3
                                 + (float)(*(float *)(v1 + 128) * (float)((float)*(unint64_t *)(v1 + 72) + -1.0)))
                         / (float)*(unint64_t *)(v1 + 72);
    v18 = a1[7];
    v28 = a1[6];
    v29 = v18;
    v30 = *((_QWORD *)a1 + 16);
    v19 = a1[3];
    v24 = a1[2];
    v25 = v19;
    v20 = a1[5];
    v26 = a1[4];
    v27 = v20;
    v21 = a1[1];
    v22 = *a1;
    v23 = v21;
    v31 = v3;
    v32 = v4;
    v33 = v5;
    v34 = v6;
    v35 = v7;
    *(_DWORD *)v36 = *(_DWORD *)((char *)a1 + 161);
    *(_DWORD *)&v36[3] = *((_DWORD *)a1 + 41);
    v37 = v9;
    v38 = v8;
    memcpy(v39, (char *)a1 + 184, sizeof(v39));
    result = PinchAcceptorDuringTouchForScroll.checkScrollRecoveryConditionsDuringTouch(_:)((uint64_t)&v22);
    if (result == 14)
      *(_WORD *)(v1 + 33) = 257;
  }
  return result;
}

uint64_t PinchAcceptorDuringTouchForScroll.checkScrollRecoveryConditionsDuringTouch(_:)(uint64_t a1)
{
  uint64_t v1;
  float v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  float *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  v2 = *(float *)(a1 + 536);
  v3 = *(_QWORD *)(v1 + 144);
  if (v3)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v1 + 72) < v3)
      return 10;
  }
  if (*(float *)(v1 + 128) < v2)
    return 8;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_OWORD *)(v5 + 16 * v6 + 16);
  }
  else
  {
    *(_QWORD *)&v7 = 0;
    DWORD2(v7) = 0;
  }
  v8 = *(float32x2_t **)(v1 + 56);
  v9 = v8[12];
  *(float32x2_t *)v10.f32 = vsub_f32(*(float32x2_t *)&v7, v9);
  LODWORD(v7) = v8[13].i32[0];
  v10.f32[2] = *((float *)&v7 + 2) - *(float *)&v7;
  v10.i32[3] = 0;
  v11 = vmulq_f32(v10, v10);
  v12 = vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1));
  v13 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v12).f32[0]);
  if (v13 < *(float *)(v1 + 136))
    return 11;
  v14 = v6 - 1;
  if (v6 == 1)
    return 14;
  if (v6)
  {
    v15 = (float *)(v5 + 56);
    while (v14)
    {
      v12.i64[0] = *((_QWORD *)v15 - 1);
      *(float32x2_t *)v16.f32 = vsub_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)(v15 - 6));
      v16.f32[2] = *v15 - *(v15 - 4);
      v16.i32[3] = 0;
      v17 = vmulq_f32(v16, v16);
      v18 = vmulq_f32(v10, v16);
      *(float32x2_t *)v12.f32 = vsub_f32(*(float32x2_t *)v12.f32, v9);
      v12.f32[2] = *v15 - *(float *)&v7;
      v19 = vmulq_f32(v12, v12);
      v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
      v12.f32[0] = sqrtf(v12.f32[0]);
      if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]/ (float)((float)(v13* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]))+ 0.000001)) < 0.7&& v12.f32[0] > 0.015)
      {
        return 12;
      }
      v15 += 4;
      if (!--v14)
        return 14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PinchAcceptorDuringTouchForScroll.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorDuringTouchForScroll()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PinchAcceptorDuringTouchForScroll.ThresholdConfig()
{
  return &type metadata for PinchAcceptorDuringTouchForScroll.ThresholdConfig;
}

uint64_t IndexFingerProximitySuppressor.update(inProgress:withHand:withData:atTime:)(char a1, uint64_t a2, double a3)
{
  unint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char **v12;
  char *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _BYTE v19[24];
  uint64_t v20;

  if ((a1 & 1) != 0)
  {
    specialized HoverDistanceCalculator.calculate(withJoint:onHand:atTime:)(v3[4], a2, (uint64_t)v19, a3);
    v5 = v3 + 6;
    swift_beginAccess();
    v6 = (_QWORD *)v3[6];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[6] = (unint64_t)v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      *v5 = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      *v5 = v6;
    }
    v10 = v20;
    v6[2] = v9 + 1;
    v6[v9 + 4] = v10;
    swift_endAccess();
    v11 = *(_BYTE *)(a2 + 4) & 1;
    v12 = (char **)(v3 + 5);
    swift_beginAccess();
    v13 = (char *)v3[5];
    v14 = swift_isUniquelyReferenced_nonNull_native();
    v3[5] = (unint64_t)v13;
    if ((v14 & 1) == 0)
    {
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      *v12 = v13;
    }
    v16 = *((_QWORD *)v13 + 2);
    v15 = *((_QWORD *)v13 + 3);
    if (v16 >= v15 >> 1)
    {
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v13);
      *v12 = v13;
    }
    *((_QWORD *)v13 + 2) = v16 + 1;
    v13[v16 + 32] = v11;
    return swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    v18 = MEMORY[0x24BEE4AF8];
    v3[6] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v3[5] = v18;
    return swift_bridgeObjectRelease();
  }
}

uint64_t IndexFingerProximitySuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_9;
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    return 1;
  if (v3 == 1)
  {
LABEL_9:
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    {
      swift_retain();
      v6 = swift_bridgeObjectRetain();
      v7 = specialized _ArrayProtocol.filter(_:)(v6, v0);
      swift_bridgeObjectRelease();
      swift_release();
      v8 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      return (double)v8 / (double)*(uint64_t *)(*(_QWORD *)(v0 + 48) + 16) > 0.25;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = 33;
    while (1)
    {
      v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1))
        break;
      if ((*(_BYTE *)(v2 + v4) & 1) != 0)
        return 1;
      ++v4;
      if (v5 == v3)
        goto LABEL_9;
    }
    __break(1u);
  }
  return result;
}

uint64_t IndexFingerProximitySuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IndexFingerProximitySuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.reset() in conformance IndexFingerProximitySuppressor()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 48) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance IndexFingerProximitySuppressor(char a1, uint64_t a2, double a3)
{
  return IndexFingerProximitySuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2, a3);
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance IndexFingerProximitySuppressor()
{
  return IndexFingerProximitySuppressor.shouldSuppress(basedOn:)() & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  v8 = v3;
  while (1)
  {
    if (v4 == v8)
      return v6;
    if (v7 == v8)
      break;
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
      goto LABEL_17;
    v3 = v8 + 1;
    v9 = *(double *)(v5 + 8 * v8++);
    if (v9 < *(double *)(a2 + 56))
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v6 + 16) = v11 + 1;
      *(double *)(v6 + 8 * v11 + 32) = v9;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  v8 = v3;
  while (1)
  {
    if (v4 == v8)
      return v6;
    if (v7 == v8)
      break;
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
      goto LABEL_17;
    v3 = v8 + 1;
    v9 = *(double *)(v5 + 8 * v8++);
    if (v9 < *(double *)(a2 + 48))
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v6 + 16) = v11 + 1;
      *(double *)(v6 + 8 * v11 + 32) = v9;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD __dst[40];
  uint64_t v18;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v5 = result + 32;
  v6 = a2 + 56;
  v7 = MEMORY[0x24BEE4AF8];
  do
  {
    if (v4 <= v2)
      v8 = v2;
    else
      v8 = v4;
    while (1)
    {
      if (v4 == v8)
      {
        __break(1u);
        return result;
      }
      memcpy(__dst, (const void *)(v5 + 320 * v4++), 0x138uLL);
      if (!*(_QWORD *)(a2 + 16))
        break;
      v9 = __dst[2];
      result = static Hasher._hash(seed:_:)();
      v10 = -1 << *(_BYTE *)(a2 + 32);
      v11 = result & ~v10;
      if (((*(_QWORD *)(v6 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      v12 = *(_QWORD *)(a2 + 48);
      if (*(_QWORD *)(v12 + 8 * v11) != v9)
      {
        v13 = ~v10;
        do
        {
          v11 = (v11 + 1) & v13;
          if (((*(_QWORD *)(v6 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            goto LABEL_15;
        }
        while (*(_QWORD *)(v12 + 8 * v11) != v9);
      }
      if (v4 == v2)
        return v7;
    }
LABEL_15:
    outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v7 = v18;
    }
    v16 = *(_QWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v7 = v18;
    }
    *(_QWORD *)(v7 + 16) = v16 + 1;
    result = (uint64_t)memcpy((void *)(v7 + 320 * v16 + 32), __dst, 0x138uLL);
  }
  while (v4 != v2);
  return v7;
}

{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
  v31 = result + 32;
  do
  {
    v32 = v6;
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    v8 = (__int128 *)(v5 + 192 * v4);
    for (i = v4; ; ++i)
    {
      if (v7 == i)
      {
        __break(1u);
        return result;
      }
      v10 = v8[9];
      v41 = v8[8];
      v42 = v10;
      v11 = v8[11];
      v43 = v8[10];
      v44 = v11;
      v12 = v8[5];
      v37 = v8[4];
      v38 = v12;
      v13 = v8[7];
      v39 = v8[6];
      v40 = v13;
      v14 = v8[1];
      v33 = *v8;
      v34 = v14;
      v15 = v8[3];
      v35 = v8[2];
      v36 = v15;
      v4 = i + 1;
      v16 = *((_QWORD *)&v37 + 1);
      v17 = v38;
      v18 = *(_QWORD *)(a2 + 40);
      outlined retain of ImageData((uint64_t)&v33);
      if ((specialized Set.contains(_:)(v16, v17, v18) & 1) != 0)
        break;
      result = outlined release of ImageData((uint64_t)&v33);
      v8 += 12;
      if (v2 == v4)
        return v32;
    }
    v6 = v32;
    result = swift_isUniquelyReferenced_nonNull_native();
    v45 = v32;
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
      v6 = v45;
    }
    v20 = *(_QWORD *)(v6 + 16);
    v19 = *(_QWORD *)(v6 + 24);
    if (v20 >= v19 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v6 = v45;
    }
    *(_QWORD *)(v6 + 16) = v20 + 1;
    v21 = (_OWORD *)(v6 + 192 * v20);
    v22 = v33;
    v23 = v34;
    v24 = v36;
    v21[4] = v35;
    v21[5] = v24;
    v21[2] = v22;
    v21[3] = v23;
    v25 = v37;
    v26 = v38;
    v27 = v40;
    v21[8] = v39;
    v21[9] = v27;
    v21[6] = v25;
    v21[7] = v26;
    v28 = v41;
    v29 = v42;
    v30 = v44;
    v21[12] = v43;
    v21[13] = v30;
    v21[10] = v28;
    v21[11] = v29;
    v5 = v31;
  }
  while (v2 - 1 != i);
  return v6;
}

uint64_t RingFingerProximitySuppressor.update(inProgress:withHand:withData:atTime:)(char a1, uint64_t a2, double a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;

  if ((a1 & 1) != 0)
  {
    specialized HoverDistanceCalculator.calculate(withJoint:onHand:atTime:)(*(_QWORD *)(v3 + 32), a2, (uint64_t)v11, a3);
    v4 = (_QWORD *)(v3 + 40);
    swift_beginAccess();
    v5 = *(_QWORD **)(v3 + 40);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 40) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      *v4 = v5;
    }
    v8 = v5[2];
    v7 = v5[3];
    if (v8 >= v7 >> 1)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
      *v4 = v5;
    }
    v9 = v12;
    v5[2] = v8 + 1;
    v5[v8 + 4] = v9;
    return swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 40) = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
}

BOOL RingFingerProximitySuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
    return 0;
  swift_retain();
  v1 = swift_bridgeObjectRetain();
  v2 = specialized _ArrayProtocol.filter(_:)(v1, v0);
  swift_bridgeObjectRelease();
  swift_release();
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  return (double)v3 / (double)*(uint64_t *)(*(_QWORD *)(v0 + 40) + 16) > 0.5;
}

uint64_t RingFingerProximitySuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RingFingerProximitySuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.reset() in conformance RingFingerProximitySuppressor()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = MEMORY[0x24BEE4AF8];
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance RingFingerProximitySuppressor(char a1, uint64_t a2, double a3)
{
  return RingFingerProximitySuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2, a3);
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance RingFingerProximitySuppressor()
{
  return RingFingerProximitySuppressor.shouldSuppress(basedOn:)();
}

uint64_t IntentionBreakScoreCalculator.init(modelName:enable:allowInternalModel:outputIndex:)(uint64_t a1, void *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  unint64_t *v23;
  unint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  unint64_t **v28;

  v6 = v5;
  *(_QWORD *)(v6 + 24) = 0;
  v28 = (unint64_t **)(v6 + 24);
  *(_BYTE *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 72) = 1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 96) = 1;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v12 + 16) = 81;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_DWORD *)(v12 + 352) = 0;
  v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v13 + 16) = 81;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 304) = 0u;
  *(_OWORD *)(v13 + 320) = 0u;
  *(_OWORD *)(v13 + 336) = 0u;
  *(_DWORD *)(v13 + 352) = 0;
  v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v14 + 16) = 81;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_OWORD *)(v14 + 256) = 0u;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_OWORD *)(v14 + 320) = 0u;
  *(_OWORD *)(v14 + 336) = 0u;
  *(_DWORD *)(v14 + 352) = 0;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 120) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 128) = v12;
  *(_QWORD *)(v6 + 136) = v13;
  *(_QWORD *)(v6 + 144) = v14;
  *(_QWORD *)(v6 + 152) = &outlined read-only object #0 of IntentionBreakScoreCalculator.init(modelName:enable:allowInternalModel:outputIndex:);
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  *(_DWORD *)(v6 + 184) = -1082130432;
  *(_BYTE *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 32) = a5;
  if ((a3 & 1) == 0)
    goto LABEL_5;
  type metadata accessor for PinchCancellationModel();
  swift_allocObject();
  *(_QWORD *)(v6 + 24) = PinchCancellationModel.init(_:_:)(a1, a2, a4 & 1);
  swift_release();
  v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v16 + 16) = 81;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = 0u;
  *(_OWORD *)(v16 + 256) = 0u;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 288) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 336) = 0u;
  *(_DWORD *)(v16 + 352) = 0;
  v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v17 + 16) = 81;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(_OWORD *)(v17 + 224) = 0u;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 288) = 0u;
  *(_OWORD *)(v17 + 304) = 0u;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_DWORD *)(v17 + 352) = 0;
  v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v18 + 16) = 81;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + 272) = 0u;
  *(_OWORD *)(v18 + 288) = 0u;
  *(_OWORD *)(v18 + 304) = 0u;
  *(_OWORD *)(v18 + 320) = 0u;
  *(_OWORD *)(v18 + 336) = 0u;
  *(_DWORD *)(v18 + 352) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 120) = v15;
  *(_QWORD *)(v6 + 128) = v16;
  *(_QWORD *)(v6 + 136) = v17;
  *(_QWORD *)(v6 + 144) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(CMTime *)(v6 + 160) = CMTime.init(seconds:preferredTimescale:)(0.0, 1);
  v19 = *(unint64_t **)(v6 + 24);
  if (v19)
  {
    v20 = v19[12];
    swift_retain();
    v21.i32[0] = 0;
    v19[13] = specialized Array.init(repeating:count:)(v20, v21);
    swift_bridgeObjectRelease();
    v22.i32[0] = 0;
    v19[14] = specialized Array.init(repeating:count:)(v19[12], v22);
    swift_release();
    swift_bridgeObjectRelease();
    v23 = *v28;
    if (*v28)
    {
      v24 = v23[12];
      swift_retain();
      v25.i32[0] = 0;
      v23[15] = specialized Array.init(repeating:count:)(v24, v25);
      swift_bridgeObjectRelease();
      v26.i32[0] = 0;
      v23[16] = specialized Array.init(repeating:count:)(v23[12], v26);
      swift_release();
LABEL_5:
      swift_bridgeObjectRelease();
    }
  }
  return v6;
}

uint64_t IntentionBreakScoreCalculator.getScore(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  int32x2_t v31;
  int32x2_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  float v37;
  _OWORD v38[7];
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v45[7];
  __int128 v46;
  uint64_t v47;
  char v48;
  _BYTE v49[343];
  float v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[3];

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    if (*(_QWORD *)result)
    {
      v2 = v1;
      if (*(_QWORD *)(v1 + 24))
      {
        v3 = *(_OWORD *)(result + 16);
        v4 = *(_OWORD *)(result + 32);
        v5 = *(_OWORD *)(result + 48);
        v6 = *(_OWORD *)(result + 64);
        v7 = *(_OWORD *)(result + 80);
        v8 = *(_OWORD *)(result + 96);
        v9 = *(_QWORD *)(result + 112);
        v10 = *(_QWORD *)(result + 136);
        v11 = *(_QWORD *)(result + 144);
        v12 = *(_QWORD *)(result + 152);
        v13 = *(_BYTE *)(result + 160);
        v14 = *(_OWORD *)(result + 168);
        v15 = *(_QWORD *)(result + 184);
        v16 = *(_BYTE *)(result + 192);
        v17 = *(float *)(result + 536);
        v18 = result + 540;
        v19 = *(_QWORD *)(result + 560);
        v20 = *(_DWORD *)(result + 568);
        v21 = *(_DWORD *)(result + 572);
        v22 = *(_QWORD *)(result + 576);
        v23 = (__int128 *)(result + 584);
        v38[0] = *(_OWORD *)result;
        v38[1] = v3;
        v38[2] = v4;
        v38[3] = v5;
        v38[4] = v6;
        v38[5] = v7;
        v38[6] = v8;
        v39 = v9;
        v40 = *(_OWORD *)(result + 120);
        v37 = *(float *)&v10;
        v41 = v10;
        v42 = v11;
        v43 = v12;
        v44 = v13;
        *(_DWORD *)v45 = *(_DWORD *)(result + 161);
        *(_DWORD *)&v45[3] = *(_DWORD *)(result + 164);
        v46 = v14;
        v47 = v15;
        v48 = v16;
        memcpy(v49, (const void *)(result + 193), sizeof(v49));
        v50 = v17;
        v51 = *(_OWORD *)v18;
        v52 = *(_DWORD *)(v18 + 16);
        v53 = v19;
        v54 = v20;
        v55 = v21;
        v56 = v22;
        v24 = v23[9];
        v65 = v23[8];
        v66 = v24;
        v67[0] = v23[10];
        *(_OWORD *)((char *)v67 + 14) = *(__int128 *)((char *)v23 + 174);
        v25 = v23[5];
        v61 = v23[4];
        v62 = v25;
        v26 = v23[7];
        v63 = v23[6];
        v64 = v26;
        v27 = v23[1];
        v57 = *v23;
        v58 = v27;
        v28 = v23[3];
        v59 = v23[2];
        v60 = v28;
        swift_retain();
        IntentionBreakScoreCalculator.updateAllFeatures(_:)((uint64_t)v38);
        *(_QWORD *)(v2 + 160) = v19;
        *(_DWORD *)(v2 + 168) = v20;
        *(_DWORD *)(v2 + 172) = v21;
        *(_QWORD *)(v2 + 176) = v22;
        if ((v16 & 1) == 0 && v17 < v37)
        {
          v29 = *(unint64_t **)(v2 + 24);
          if (v29)
          {
            v30 = v29[12];
            swift_retain();
            v31.i32[0] = 0;
            v29[13] = specialized Array.init(repeating:count:)(v30, v31);
            swift_bridgeObjectRelease();
            v32.i32[0] = 0;
            v29[14] = specialized Array.init(repeating:count:)(v29[12], v32);
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        swift_beginAccess();
        v33 = *(_QWORD **)(v2 + 120);
        v34 = *(_QWORD *)(v2 + 144);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35 = PinchCancellationModel.predict(_:_:)(v33, v34);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(v2 + 32);
        if ((v36 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v36 < v35[2])
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t IntentionBreakScoreCalculator.updateAllFeatures(_:)(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[3];
  if (v3)
  {
    v4 = (float *)result;
    swift_retain();
    IntentionBreakScoreCalculator.updatePrev3DJointVector()();
    IntentionBreakScoreCalculator.update3DJointVector(_:)((uint64_t)v4);
    v5 = *(_QWORD *)(v3 + 64);
    swift_bridgeObjectRetain();
    v6 = IntentionBreakScoreCalculator.getFeatureVector(_:_:)(v4, v5);
    swift_bridgeObjectRelease();
    if (v2)
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v1[15] = v6;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v3 + 72);
      swift_bridgeObjectRetain();
      v8 = IntentionBreakScoreCalculator.getFeatureVector(_:_:)(v4, v7);
      swift_bridgeObjectRelease();
      swift_release();
      v1[18] = v8;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t IntentionBreakScoreCalculator.computeVelocityVector(_:)(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3)
{
  uint64_t v3;
  CMTimeValue v7;
  CMTimeScale v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CMTime time;

  v7 = *(_QWORD *)(v3 + 160);
  v8 = *(_DWORD *)(v3 + 168);
  v9 = *(_DWORD *)(v3 + 172);
  v10 = *(_QWORD *)(v3 + 176);
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = a1;
    *(_QWORD *)&time.timescale = a2;
    time.epoch = a3;
    CMTimeGetSeconds(&time);
    time.value = v7;
    time.timescale = v8;
    time.flags = v9;
    time.epoch = v10;
    CMTimeGetSeconds(&time);
  }
  v11 = swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 128);
  v13 = *(_QWORD *)(v3 + 136);
  MEMORY[0x24BDAC7A8](v11, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg5021_sS3fIgyyd_Sf_SftSfs5F11OIegnrzr_TRS3fIgyyd_Tf1cn_nTf4ng_n(v12, v13, (float (*)(uint64_t, float, float))partial apply for closure #1 in IntentionBreakScoreCalculator.computeVelocityVector(_:));
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Void __swiftcall IntentionBreakScoreCalculator.updatePrev3DJointVector()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v9 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v4 = v9;
    v6 = *(_QWORD *)(v9 + 16);
    do
    {
      v7 = *(_DWORD *)(v2 + 4 * v5 + 32);
      v8 = *(_QWORD *)(v9 + 24);
      if (v6 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v6 + 1, 1);
      ++v5;
      *(_QWORD *)(v9 + 16) = v6 + 1;
      *(_DWORD *)(v9 + 4 * v6++ + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v1 + 136) = v4;
  swift_bridgeObjectRelease();
}

uint64_t IntentionBreakScoreCalculator.update3DJointVector(_:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_QWORD *)(result + 240))
  {
    v2 = 0;
    v3 = 0;
    v4 = *(_QWORD *)(result + 248);
    v5 = (__int128 *)(v4 + 48);
    while (v3 < *(_QWORD *)(v4 + 16))
    {
      v9 = *v5;
      swift_beginAccess();
      v6 = *(_QWORD *)(v1 + 128);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 128) = v6;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        v6 = result;
        *(_QWORD *)(v1 + 128) = result;
      }
      if (v2 >= *(_QWORD *)(v6 + 16))
        goto LABEL_15;
      *(_DWORD *)(v6 + 4 * v2 + 32) = v9;
      swift_endAccess();
      v10 = *v5;
      swift_beginAccess();
      v7 = *(_QWORD *)(v1 + 128);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 128) = v7;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        v7 = result;
        *(_QWORD *)(v1 + 128) = result;
      }
      if (v2 + 1 >= *(_QWORD *)(v7 + 16))
        goto LABEL_15;
      *(_DWORD *)(v7 + 4 * v2 + 36) = DWORD1(v10);
      swift_endAccess();
      v11 = *v5;
      swift_beginAccess();
      v8 = *(_QWORD *)(v1 + 128);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 128) = v8;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
        v8 = result;
        *(_QWORD *)(v1 + 128) = result;
      }
      if (v2 + 2 >= *(_QWORD *)(v8 + 16))
      {
LABEL_15:
        __break(1u);
        break;
      }
      *(_DWORD *)(v8 + 4 * v2 + 40) = DWORD2(v11);
      result = swift_endAccess();
      v2 += 3;
      v5 += 2;
      ++v3;
      if (v2 == 81)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t IntentionBreakScoreCalculator.getFeatureVector(_:_:)(float *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v4 = v3;
  v5 = v2;
  v6 = *(_QWORD *)a1;
  v7 = a1[30];
  v54 = *((unsigned __int8 *)a1 + 124);
  v8 = *((_QWORD *)a1 + 16);
  v10 = *((_DWORD *)a1 + 34);
  v9 = *((_DWORD *)a1 + 35);
  v55 = *((_QWORD *)a1 + 18);
  v11 = *((_DWORD *)a1 + 90);
  v12 = IntentionBreakScoreCalculator.computeVelocityVector(_:)(*((_QWORD *)a1 + 70), *((_QWORD *)a1 + 71), *((_QWORD *)a1 + 72));
  v13 = *(_QWORD *)(v12 + 16);
  v53 = v12;
  if (v13)
  {
    v14 = v12;
    v57 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v15 = v57;
    v16 = (float *)(v14 + 32);
    v17 = *(_QWORD *)(v57 + 16);
    do
    {
      v18 = *v16;
      v58 = v15;
      v19 = *(_QWORD *)(v15 + 24);
      if (v17 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v17 + 1, 1);
        v15 = v58;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      *(float *)(v15 + 4 * v17 + 32) = v18 * 100.0;
      ++v16;
      ++v17;
      --v13;
    }
    while (v13);
    v52 = v15;
    v4 = v3;
  }
  else
  {
    v52 = MEMORY[0x24BEE4AF8];
  }
  swift_beginAccess();
  v20 = *(_QWORD *)(v2 + 128);
  v21 = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRetain();
  v22 = v21;
  v23 = v4;
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg583_s5Hands18PinchGestureHelperC32computeJointPositionInWristCoordySaySfGAEFZSfSiXEfU_SaySfGTf1cn_nTf4ng_n(0, v22, v20);
  v25 = v4;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v5 + 152);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28 + 0x4000000000000000 < 0)
    goto LABEL_56;
  v26.i32[0] = 0;
  v29 = specialized Array.init(repeating:count:)(2 * v28, v26);
  v30 = *(_QWORD *)(v27 + 16);
  if (!v30)
  {
LABEL_37:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A74B0;
    v45 = 0xD000000000000011;
    *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 40) = 0x800000023D9CC870;
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    *(_QWORD *)(inited + 48) = v24;
    *(_QWORD *)(inited + 72) = v46;
    strcpy((char *)(inited + 80), "joint_velocity");
    *(_BYTE *)(inited + 95) = -18;
    *(_QWORD *)(inited + 96) = v53;
    *(_QWORD *)(inited + 120) = v46;
    *(_QWORD *)(inited + 128) = 0xD000000000000015;
    *(_QWORD *)(inited + 136) = 0x800000023D9CC890;
    *(_QWORD *)(inited + 144) = v52;
    *(_QWORD *)(inited + 168) = v46;
    *(_QWORD *)(inited + 176) = 0x61725F65726F6373;
    *(_QWORD *)(inited + 184) = 0xE900000000000077;
    v47 = MEMORY[0x24BEE14E8];
    *(_DWORD *)(inited + 192) = v10;
    *(_QWORD *)(inited + 216) = v47;
    *(_QWORD *)(inited + 224) = 0xD000000000000011;
    *(_QWORD *)(inited + 232) = 0x800000023D9C3CF0;
    *(_DWORD *)(inited + 240) = v11;
    *(_QWORD *)(inited + 264) = v47;
    strcpy((char *)(inited + 272), "score_aheads");
    *(_QWORD *)(inited + 312) = v46;
    *(_QWORD *)(inited + 320) = 0xD000000000000010;
    *(_BYTE *)(inited + 285) = 0;
    *(_WORD *)(inited + 286) = -5120;
    *(_QWORD *)(inited + 288) = v55;
    *(_QWORD *)(inited + 328) = 0x800000023D9C7A80;
    *(_DWORD *)(inited + 336) = v9;
    *(_QWORD *)(inited + 360) = v47;
    *(_QWORD *)(inited + 368) = 0xD000000000000011;
    *(_QWORD *)(inited + 376) = 0x800000023D9CADC0;
    if (v54)
      v48 = 0.0;
    else
      v48 = v7;
    *(float *)(inited + 384) = v48;
    *(_QWORD *)(inited + 408) = v47;
    *(_QWORD *)(inited + 416) = 0xD000000000000015;
    *(_QWORD *)(inited + 456) = v46;
    *(_QWORD *)(inited + 424) = 0x800000023D9CC8B0;
    *(_QWORD *)(inited + 432) = v29;
    swift_bridgeObjectRetain();
    v49 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v50 = specialized Sequence.compactMap<A>(_:)(a2, v49);
    if (!v25)
    {
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v50);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v45;
  }
  v51 = v24;
  result = swift_bridgeObjectRetain();
  v32 = 0;
  v33 = 0x4000000000000000;
  while (1)
  {
    if (!v8)
      goto LABEL_11;
    if (!v6)
      goto LABEL_58;
    v34 = *(_QWORD *)(v27 + 8 * v33 + 32);
    if ((v34 & 0x8000000000000000) != 0)
      break;
    if (v34 >= *(_QWORD *)(v6 + 16))
      goto LABEL_44;
    if (v33 < 0)
      goto LABEL_45;
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_46;
    v35 = *(_QWORD *)(v6 + 32 + 144 * v34 + 8);
    v36 = *(_QWORD *)(v8 + 32);
    if ((*(_BYTE *)(v8 + 40) & 1) == 0)
    {
      if (v36 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_47;
      if (v36 > 0x7FFFFFFF)
        goto LABEL_48;
    }
    if (!*(_QWORD *)(v35 + 16))
      goto LABEL_49;
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
    if ((v38 & 1) == 0)
      goto LABEL_50;
    v39 = *(_DWORD *)(*(_QWORD *)(v35 + 56) + 4 * v37);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_35;
    }
    else
    {
      v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
      if ((v32 & 0x8000000000000000) != 0)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        swift_bridgeObjectRelease();
        v24 = v51;
        v25 = v23;
        goto LABEL_37;
      }
    }
    if (v32 >= *(_QWORD *)(v29 + 16))
      goto LABEL_51;
    *(_DWORD *)(v29 + 4 * v32 + 32) = v39;
    if (*(_QWORD *)(v8 + 16) < 2uLL)
      goto LABEL_52;
    v40 = *(_QWORD *)(v8 + 48);
    if ((*(_BYTE *)(v8 + 56) & 1) == 0)
    {
      if (v40 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_53;
      if (v40 > 0x7FFFFFFF)
        goto LABEL_54;
    }
    if (!*(_QWORD *)(v35 + 16))
      goto LABEL_57;
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
    if ((v42 & 1) == 0)
      goto LABEL_57;
    v43 = *(_DWORD *)(*(_QWORD *)(v35 + 56) + 4 * v41);
    result = swift_bridgeObjectRelease();
    if (v32 + 1 >= *(_QWORD *)(v29 + 16))
      goto LABEL_55;
    *(_DWORD *)(v29 + 4 * v32 + 36) = v43;
LABEL_11:
    ++v33;
    v32 += 2;
    if (!--v30)
      goto LABEL_36;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = swift_bridgeObjectRelease();
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t closure #1 in static IntentionBreakScoreCalculator.featureSelection(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _BYTE *v9;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  if (!*(_QWORD *)(a2 + 16))
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_8;
  }
  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v8 & 1) == 0)
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v14);
    lazy protocol witness table accessor for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError();
    swift_allocError();
    *v9 = 1;
    return swift_willThrow();
  }
  outlined init with take of Any(&v14, v16);
  outlined init with copy of Any((uint64_t)v16, (uint64_t)&v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    *a3 = v17;
  }
  else if (swift_dynamicCast())
  {
    v11 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_23D9A70A0;
    *(_DWORD *)(v12 + 32) = v11;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    *a3 = v12;
  }
  else
  {
    lazy protocol witness table accessor for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError();
    swift_allocError();
    *v13 = 0;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v14);
}

uint64_t IntentionBreakScoreCalculator.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IntentionBreakScoreCalculator()
{
  return objc_opt_self();
}

_QWORD *initializeWithCopy for IntentionBreakScoreCalculator.InputFeatures(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IntentionBreakScoreCalculator.InputFeatures(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for IntentionBreakScoreCalculator.InputFeatures(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IntentionBreakScoreCalculator.InputFeatures(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IntentionBreakScoreCalculator.InputFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IntentionBreakScoreCalculator.InputFeatures()
{
  return &type metadata for IntentionBreakScoreCalculator.InputFeatures;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_DWORD *)(v3 + 4 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Float)>);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 17;
        v14 = v13 >> 4;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 4);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        v17 = 16 * v16;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[v17 / 8 + 4])
            memmove(v11 + 4, v2 + 4, v17);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + v17);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v2 = v11;
      }
      v19 = __OFSUB__(v4--, 1);
      if (v19)
        break;
      *v6 = v5;
      *((_DWORD *)v6 + 2) = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v4 = 0;
LABEL_23:
  v20 = v2[3];
  if (v20 < 2)
    return (uint64_t)v2;
  v21 = v20 >> 1;
  v19 = __OFSUB__(v21, v4);
  v22 = v21 - v4;
  if (!v19)
  {
    v2[2] = v22;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = (_DWORD *)(MEMORY[0x24BEE4AF8] + 32);
LABEL_3:
  v9 = *(_QWORD *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v10)
        {
          v8 = *(_QWORD *)(v10 + 16);
          if (v8)
            break;
        }
        ++v5;
        v11 = *(_QWORD *)(a1 + 16);
        if (v5 == v11)
          goto LABEL_27;
        if (v5 >= v11)
          goto LABEL_31;
      }
      v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        v13 = *(_DWORD *)(v10 + 4 * v12 + 32);
        if (!v4)
        {
          v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_34;
          v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          v17 = (_QWORD *)swift_allocObject();
          v18 = _swift_stdlib_malloc_size(v17);
          v19 = v18 - 32;
          if (v18 < 32)
            v19 = v18 - 29;
          v20 = v19 >> 2;
          v17[2] = v16;
          v17[3] = 2 * (v19 >> 2);
          v21 = (unint64_t)(v17 + 4);
          v22 = v6[3] >> 1;
          if (v6[2])
          {
            v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 4 * v22)
            {
              v24 = v19 >> 2;
              memmove(v17 + 4, v23, 4 * v22);
              v20 = v24;
            }
            v6[2] = 0;
          }
          v7 = (_DWORD *)(v21 + 4 * v22);
          v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          result = swift_release();
          v6 = v17;
        }
        v25 = __OFSUB__(v4--, 1);
        if (v25)
          goto LABEL_33;
        ++v12;
        *v7++ = v13;
        v8 = *(_QWORD *)(v10 + 16);
        if (v12 == v8)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v26 = v6[3];
  if (v26 < 2)
    return (uint64_t)v6;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v4);
  v28 = v27 - v4;
  if (!v25)
  {
    v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg583_s5Hands18PinchGestureHelperC32computeJointPositionInWristCoordySaySfGAEFZSfSiXEfU_SaySfGTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_21;
  v4 = result;
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v15 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v4 || v3 < 0)
      goto LABEL_22;
    v7 = a3 + 32;
    result = v15;
    v8 = *(_QWORD *)(a3 + 16);
    if ((uint64_t)v8 <= v4)
      v9 = v4;
    else
      v9 = *(_QWORD *)(a3 + 16);
    v10 = v4;
    while (a2 != v10)
    {
      if (v4 < 0)
        goto LABEL_18;
      if (v9 == v10)
        goto LABEL_19;
      if (v10 % 3 >= v8)
        goto LABEL_20;
      v11 = *(float *)(v7 + 4 * v10);
      v12 = *(float *)(v7 - 12 * (v10 / 3) + 4 * v10);
      v16 = result;
      v14 = *(_QWORD *)(result + 16);
      v13 = *(_QWORD *)(result + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        result = v16;
      }
      *(_QWORD *)(result + 16) = v14 + 1;
      *(float *)(result + 4 * v14 + 32) = v11 - v12;
      if (a2 == ++v10)
        return result;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError;
  if (!lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollBreakNetworkInputError, &type metadata for ScrollBreakNetworkInputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError;
  if (!lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollBreakNetworkInputError, &type metadata for ScrollBreakNetworkInputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError);
  }
  return result;
}

float partial apply for closure #1 in IntentionBreakScoreCalculator.computeVelocityVector(_:)(float a1, float a2)
{
  uint64_t v2;

  return (float)(a1 - a2) / *(float *)(v2 + 16);
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg5021_sS3fIgyyd_Sf_SftSfs5F11OIegnrzr_TRS3fIgyyd_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, float (*a3)(uint64_t, float, float))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v27 = v6;
  v29 = a2;
  v30 = a1;
  v28 = v5;
  v26 = v7;
  if (v7)
  {
    v8 = v5;
    v9 = (float *)(a1 + 32);
    v10 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v12 = v6;
    v13 = v8;
    while (v13)
    {
      if (!v12)
        goto LABEL_26;
      v14 = a3(v11, *v9, *v10);
      v16 = *(_QWORD *)(v33 + 16);
      v15 = *(_QWORD *)(v33 + 24);
      if (v16 >= v15 >> 1)
        v11 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      --v12;
      *(_QWORD *)(v33 + 16) = v16 + 1;
      *(float *)(v33 + 4 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v9;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v17 = 0;
    if (v26 <= v27)
      v18 = v27;
    else
      v18 = v26;
    v31 = v18 - v26;
    v19 = v28 - v26;
    v20 = 4 * v26 + 32;
    v21 = v30 + v20;
    v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17)
        goto LABEL_24;
      if (v31 == v17)
        goto LABEL_28;
      v23 = a3(v11, *(float *)(v21 + 4 * v17), *(float *)(v22 + 4 * v17));
      v25 = *(_QWORD *)(v33 + 16);
      v24 = *(_QWORD *)(v33 + 24);
      if (v25 >= v24 >> 1)
        v11 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v33 + 16) = v25 + 1;
      *(float *)(v33 + 4 * v25 + 32) = v23;
      if (v19 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t specialized CircularBuffer.last.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 16);
  if (!v5 || *(_QWORD *)(a2 + 24) < 2uLL)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a4;
    v10 = 1;
    return v8(v9, v10, 1, v7);
  }
  v11 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = __OFADD__(v11, result);
  v13 = v11 + result;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result == -1 && v13 == 0x8000000000000000)
    goto LABEL_16;
  v14 = v13 % result;
  if (v13 % result < v5)
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
    v16 = *(_QWORD *)(v15 - 8);
    outlined init with copy of DerivedHandAttributes?(a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v14, a4);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v9 = a4;
    v10 = 0;
    v7 = v15;
    return v8(v9, v10, 1, v7);
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

int64_t specialized CircularBuffer.last.getter(int64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 24) < 2uLL)
  {
    v3 = 0;
LABEL_4:
    v4 = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  v5 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v6 = __OFADD__(v5, result);
  v7 = v5 + result;
  if (v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result == -1 && v7 == 0x8000000000000000)
    goto LABEL_17;
  v8 = v7 % result;
  if (v7 % result < v3)
  {
    v4 = 0;
    v3 = *(unsigned int *)(a2 + 4 * v8 + 32);
    return v3 | ((unint64_t)v4 << 32);
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized CircularBuffer.last.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3 || *(_QWORD *)(a2 + 24) < 2uLL)
    return 0;
  v4 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = __OFADD__(v4, result);
  v6 = v4 + result;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result == -1 && v6 == 0x8000000000000000)
    goto LABEL_15;
  v7 = v6 % result;
  if (v7 < v3)
    return *(_QWORD *)(a2 + 16 * v7 + 32);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchEventType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PinchEventType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t (*PinchSignalStatistics.pinchAttributes.modify())()
{
  swift_beginAccess();
  return static CameraModel.allCases.modify;
}

uint64_t PinchSignalStatistics.__allocating_init(fromPrev:)(uint64_t a1)
{
  swift_allocObject();
  return PinchSignalStatistics.init(fromPrev:)(a1);
}

uint64_t PinchSignalStatistics.init(fromPrev:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  Swift::String v9;
  _OWORD v11[41];
  _QWORD v12[82];
  _BYTE v13[656];

  v3 = v1 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
  _s5Hands22PinchStatisticsStructsC0B9AttributeVSgWOi0_(v13);
  outlined init with take of ImageData?((uint64_t)v13, v3, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  v4 = specialized SignalStatistics.init(fromPrev:)(a1);
  type metadata accessor for PinchSignalStatistics();
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    v6 = v5 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
    swift_beginAccess();
    outlined init with take of ImageData?(v6, (uint64_t)v11, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v11);
    swift_release();
    v7 = v4 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
    swift_beginAccess();
    outlined init with take of ImageData?(v7, (uint64_t)v12, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    v8 = v11;
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(25);
    v9._object = (void *)0x800000023D9CC9A0;
    v9._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v9);
    type metadata accessor for SignalStatistics(0);
    _print_unlocked<A, B>(_:_:)();
    v12[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v11, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v11, 0xD000000000000063, 0x800000023D9CC930, 55, (uint64_t)v12, MEMORY[0x24BEE4AF8]);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
    v7 = v4 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
    swift_beginAccess();
    outlined init with take of ImageData?(v7, (uint64_t)v12, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    v8 = v13;
  }
  outlined init with take of ImageData?((uint64_t)v8, v7, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined release of HandContainer((uint64_t)v12);
  return v4;
}

uint64_t PinchSignalStatistics.__allocating_init(is_left:signal:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[656];
  _BYTE v7[656];

  v2 = swift_allocObject() + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
  _s5Hands22PinchStatisticsStructsC0B9AttributeVSgWOi0_(v6);
  outlined init with take of ImageData?((uint64_t)v6, v2, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  v3 = SignalStatistics.init(is_left:signal:)(a1, 0);
  v4 = v3 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
  swift_beginAccess();
  outlined init with take of ImageData?(v4, (uint64_t)v7, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v6, v4, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined release of HandContainer((uint64_t)v7);
  return v3;
}

uint64_t PinchSignalStatistics.isSignalActiveFor(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;

  v2 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v9);
  v10 = type metadata accessor for DerivedHandAttributes(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0;
  }
  else
  {
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for DerivedHandAttributes);
    v12 = v5[4];
    outlined destroy of Matrix3x3PB((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v12 == 2)
      return 0;
    else
      return v12 & 1;
  }
}

uint64_t PinchSignalStatistics.onSignalStart(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v18[70];
  _BYTE v19[656];
  _BYTE v20[656];

  v11 = type metadata accessor for DerivedHandAttributes(0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  memcpy(v18, a5, 0x228uLL);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v14, type metadata accessor for DerivedHandAttributes);
  memcpy(v20, v18, 0x228uLL);
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(v18);
  PinchStatisticsStructs.PinchAttribute.init(_:_:_:)((uint64_t)v14, a2, a3, a4, v20, (uint64_t)v19);
  _s5Hands13PoseImageCropVSgWOi_(v19);
  v15 = v5 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
  swift_beginAccess();
  outlined init with take of ImageData?(v15, (uint64_t)v20, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v19, v15, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  return outlined release of HandContainer((uint64_t)v20);
}

uint64_t PinchSignalStatistics.onSignalLasting(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[552];
  uint64_t v24;
  _BYTE v25[552];
  _BYTE v26[656];
  uint64_t v27[83];

  v21 = a4;
  v22 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v25, a5, sizeof(v25));
  v17 = PinchSignalStatistics.pinchAttributes.modify();
  outlined init with take of ImageData?(v18, (uint64_t)v26, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v26, (uint64_t)v27, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  if (_s5Hands0A7KitDataVSgWOg(v27) != 1)
  {
    specialized CircularBuffer.last.getter(a2, a3, v21, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      v19 = type metadata accessor for DerivedHandAttributes(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
      outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for DerivedHandAttributes??);
    }
    else
    {
      outlined init with take of ImageData?((uint64_t)v11, (uint64_t)v16, &demangling cache variable for type metadata for DerivedHandAttributes?);
    }
    memcpy(v23, v25, sizeof(v23));
    PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(v22, (uint64_t)v16);
    outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for DerivedHandAttributes?);
  }
  return ((uint64_t (*)(uint64_t *, _QWORD))v17)(&v24, 0);
}

Swift::OpaquePointer_optional __swiftcall PinchSignalStatistics.constructPinchEventDictionary(type:)(Hands::PinchEventType type)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  Swift::Bool v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  NSNumber v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE *v22;
  int v23;
  Class v24;
  char v25;
  uint64_t v26;
  Class v27;
  char v28;
  uint64_t v29;
  Class v30;
  char v31;
  uint64_t v32;
  Class v33;
  char v34;
  uint64_t v35;
  Class v36;
  char v37;
  uint64_t v38;
  Class v39;
  char v40;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  Class v43;
  char v44;
  Class v45;
  char v46;
  _BYTE v47[656];
  _BYTE v48[656];
  _BYTE v49[656];
  _BYTE v50[656];
  _BYTE v51[656];
  _BYTE v52[656];
  uint64_t v53[82];
  _QWORD v54[69];
  char v55;
  _BYTE v56[656];
  _BYTE v57[656];
  _BYTE v58[656];
  uint64_t v59[82];
  uint64_t v60[68];
  char v61;
  _BYTE v62[656];
  uint64_t v63[82];
  _BYTE v64[680];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[2];
  int v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  int v74;
  char v75;
  int v76;
  char v77;
  int v78;
  char v79;
  unsigned __int16 v80;
  unsigned __int8 v81;
  unsigned __int16 v82;
  unsigned __int8 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  Swift::OpaquePointer_optional result;

  ((void (*)(_QWORD))MEMORY[0x24BDAC7A8])(type);
  v2 = v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration;
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 72) & 1) != 0
    || (v3 = *(double *)(v2 + 64),
        v4 = v1 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes,
        swift_beginAccess(),
        outlined init with take of ImageData?(v4, (uint64_t)&v65, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?), outlined init with take of ImageData?((uint64_t)&v65, (uint64_t)v68, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?), _s5Hands0A7KitDataVSgWOg(v68) == 1)|| (v77 & 1) != 0|| !v76|| (v75 & 1) != 0|| !v74|| (v79 & 1) != 0|| !v78|| (v72 & 1) != 0|| (v73 & 1) != 0|| (v71 & 1) != 0|| !v69|| (v89 & 1) != 0
    || (v90 & 1) != 0
    || (v91 & 1) != 0
    || (v92 & 1) != 0
    || (v88 & 1) != 0)
  {
    v70 = MEMORY[0x24BEE0D00];
    v68[0] = 0xD00000000000003CLL;
    v68[1] = 0x800000023D9CC9C0;
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8B80;
    v67 = 0;
    v66 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v65, 0xD000000000000063, 0x800000023D9CC930, 99, (uint64_t)v68, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
    v6 = 0;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9AF260;
  *(_QWORD *)(v8 + 32) = 0x7466656C5F7369;
  *(_QWORD *)(v8 + 40) = 0xE700000000000000;
  outlined init with take of ImageData?((uint64_t)&v65, (uint64_t)v64, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v64);
  *(NSNumber *)(v8 + 48) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(v8 + 56), "duration_secs");
  *(_WORD *)(v8 + 70) = -4864;
  *(_QWORD *)(v8 + 72) = MEMORY[0x2426375B8](v3);
  strcpy((char *)(v8 + 80), "camera_pair_id");
  *(_BYTE *)(v8 + 95) = -18;
  *(NSNumber *)(v8 + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 104) = 0xD000000000000013;
  *(_QWORD *)(v8 + 112) = 0x800000023D9CCA00;
  v9 = v80 | (v81 << 16);
  v10 = v82 | (v83 << 16);
  v11 = specialized static StatisticUtils.CameraRegion.allCases.getter();
  specialized Collection<>.firstIndex(of:)(v9, (uint64_t)v11);
  swift_bridgeObjectRelease();
  *(NSNumber *)(v8 + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 128) = 0xD000000000000013;
  *(_QWORD *)(v8 + 136) = 0x800000023D9CCA20;
  v12 = specialized static StatisticUtils.CameraRegion.allCases.getter();
  specialized Collection<>.firstIndex(of:)(v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  v13.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v8 + 144) = v13;
  *(_QWORD *)(v8 + 152) = 0xD000000000000014;
  *(_QWORD *)(v8 + 160) = 0x800000023D9CCA40;
  v14 = v84;
  v15 = v85;
  v16 = v86;
  v17 = v87;
  v21 = specialized static StatisticUtils.Location3DBucket.allCases.getter((uint64_t)v13.super.super.isa, v18, v19, v20);
  specialized Collection<>.firstIndex(of:)(v14, v15, v16, v17, (uint64_t)v21);
  swift_bridgeObjectRelease();
  *(NSNumber *)(v8 + 168) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 176) = 0xD000000000000012;
  *(_QWORD *)(v8 + 184) = 0x800000023D9CCA60;
  *(NSNumber *)(v8 + 192) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 200) = 0xD000000000000017;
  *(_QWORD *)(v8 + 208) = 0x800000023D9CCA80;
  *(NSNumber *)(v8 + 216) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 224) = 0xD000000000000010;
  *(_QWORD *)(v8 + 232) = 0x800000023D9CCAA0;
  *(NSNumber *)(v8 + 240) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 248) = 0xD000000000000015;
  *(_QWORD *)(v8 + 256) = 0x800000023D9CCAC0;
  *(NSNumber *)(v8 + 264) = Float._bridgeToObjectiveC()();
  strcpy((char *)(v8 + 272), "unsure_score");
  *(_BYTE *)(v8 + 285) = 0;
  *(_WORD *)(v8 + 286) = -5120;
  *(NSNumber *)(v8 + 288) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 296) = 0xD000000000000011;
  *(_QWORD *)(v8 + 304) = 0x800000023D9CCAE0;
  *(NSNumber *)(v8 + 312) = Float._bridgeToObjectiveC()();
  strcpy((char *)(v8 + 320), "hover_distance");
  *(_BYTE *)(v8 + 335) = -18;
  *(NSNumber *)(v8 + 336) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 344) = 0xD000000000000013;
  *(_QWORD *)(v8 + 352) = 0x800000023D9CCB00;
  *(NSNumber *)(v8 + 360) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 368) = 0xD000000000000019;
  *(_QWORD *)(v8 + 376) = 0x800000023D9CCB20;
  *(NSNumber *)(v8 + 384) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 392) = 0xD00000000000001ALL;
  *(_QWORD *)(v8 + 400) = 0x800000023D9CCB40;
  *(NSNumber *)(v8 + 408) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 416) = 0x65645F68636E6970;
  *(_QWORD *)(v8 + 424) = 0xEF6E6F6974636574;
  *(NSNumber *)(v8 + 432) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 440) = 0xD000000000000010;
  *(_QWORD *)(v8 + 448) = 0x800000023D9CCB60;
  *(NSNumber *)(v8 + 456) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 464) = 0xD000000000000010;
  *(_QWORD *)(v8 + 472) = 0x800000023D9CCB80;
  *(NSNumber *)(v8 + 480) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 488) = 0x6461725F646E6168;
  *(_QWORD *)(v8 + 496) = 0xEB00000000737569;
  *(NSNumber *)(v8 + 504) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 512) = 0xD000000000000025;
  *(_QWORD *)(v8 + 520) = 0x800000023D9CCBA0;
  *(NSNumber *)(v8 + 528) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 536) = 0xD00000000000002CLL;
  *(_QWORD *)(v8 + 544) = 0x800000023D9CCBD0;
  *(NSNumber *)(v8 + 552) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 560) = 0xD000000000000020;
  *(_QWORD *)(v8 + 568) = 0x800000023D9CCC00;
  *(NSNumber *)(v8 + 576) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 584) = 0xD000000000000021;
  *(_QWORD *)(v8 + 592) = 0x800000023D9CCC30;
  *(NSNumber *)(v8 + 600) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 608) = 0xD000000000000018;
  *(_QWORD *)(v8 + 616) = 0x800000023D9CCC60;
  *(NSNumber *)(v8 + 624) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 632) = 0xD000000000000018;
  *(_QWORD *)(v8 + 640) = 0x800000023D9CCC80;
  *(NSNumber *)(v8 + 648) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 656) = 0xD000000000000018;
  *(_QWORD *)(v8 + 664) = 0x800000023D9CCCA0;
  *(NSNumber *)(v8 + 672) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(v8 + 680) = 0xD000000000000018;
  *(_QWORD *)(v8 + 688) = 0x800000023D9CCCC0;
  *(NSNumber *)(v8 + 696) = Float._bridgeToObjectiveC()();
  outlined release of HandContainer((uint64_t)&v65);
  v6 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  outlined init with take of ImageData?(v4, (uint64_t)v62, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v62, (uint64_t)v60, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  if (_s5Hands0A7KitDataVSgWOg(v63) != 1)
  {
    if ((v61 & 1) != 0)
    {
      outlined init with take of ImageData?((uint64_t)v60, (uint64_t)v58, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined init with take of ImageData?((uint64_t)v62, (uint64_t)v59, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v59);
      v22 = v58;
LABEL_29:
      outlined release of HandContainer((uint64_t)v22);
      goto LABEL_30;
    }
    outlined init with take of ImageData?((uint64_t)v60, (uint64_t)v56, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined init with take of ImageData?((uint64_t)v62, (uint64_t)v57, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v57);
    outlined release of HandContainer((uint64_t)v56);
    outlined init with take of ImageData?(v4, (uint64_t)v58, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined init with take of ImageData?((uint64_t)v58, (uint64_t)v54, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined init with take of ImageData?((uint64_t)v58, (uint64_t)v59, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    if (_s5Hands0A7KitDataVSgWOg(v59) != 1)
    {
      if ((v55 & 1) != 0)
      {
        outlined init with take of ImageData?((uint64_t)v54, (uint64_t)v52, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
        outlined init with take of ImageData?((uint64_t)v58, (uint64_t)v53, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
        outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v53);
        v22 = v52;
        goto LABEL_29;
      }
      outlined init with take of ImageData?((uint64_t)v54, (uint64_t)v50, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined init with take of ImageData?((uint64_t)v58, (uint64_t)v51, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v51);
      outlined release of HandContainer((uint64_t)v50);
      outlined init with take of ImageData?(v4, (uint64_t)v52, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined init with take of ImageData?((uint64_t)v52, (uint64_t)v49, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      outlined init with take of ImageData?((uint64_t)v52, (uint64_t)v53, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
      if (_s5Hands0A7KitDataVSgWOg(v53) != 1)
      {
        if ((v49[560] & 1) == 0)
        {
          outlined init with take of ImageData?((uint64_t)v49, (uint64_t)v47, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
          outlined init with take of ImageData?((uint64_t)v52, (uint64_t)v48, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
          outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v48);
          outlined release of HandContainer((uint64_t)v47);
          isa = Float._bridgeToObjectiveC()().super.super.isa;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, 0xD00000000000001DLL, 0x800000023D9CCCE0, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          v43 = Float._bridgeToObjectiveC()().super.super.isa;
          v44 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v43, 0xD00000000000001ALL, 0x800000023D9CCD00, v44);
          swift_bridgeObjectRelease();
          v45 = Float._bridgeToObjectiveC()().super.super.isa;
          v46 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v45, 0xD000000000000021, 0x800000023D9CCD20, v46);
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        outlined init with take of ImageData?((uint64_t)v49, (uint64_t)v47, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
        outlined init with take of ImageData?((uint64_t)v52, (uint64_t)v48, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
        outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v48);
        v22 = v47;
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  outlined init with take of ImageData?(v4, (uint64_t)v59, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v59, (uint64_t)v58, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v59, (uint64_t)v60, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  if (_s5Hands0A7KitDataVSgWOg(v60) != 1)
  {
    outlined init with take of ImageData?((uint64_t)v59, (uint64_t)v56, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    v23 = v58[616];
    outlined init with take of ImageData?((uint64_t)v58, (uint64_t)v57, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)v56);
    outlined release of HandContainer((uint64_t)v57);
    if (v23 != 1)
    {
      v24 = Int64._bridgeToObjectiveC()().super.super.isa;
      v25 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v6;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v24, 0x5F74746977657270, 0xEF746E6572727563, v25);
      v26 = v54[0];
      swift_bridgeObjectRelease();
      v27 = Int64._bridgeToObjectiveC()().super.super.isa;
      v28 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v26;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, 0xD000000000000013, 0x800000023D9CCD50, v28);
      v29 = v54[0];
      swift_bridgeObjectRelease();
      v30 = Int64._bridgeToObjectiveC()().super.super.isa;
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v29;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v30, 0x61726576615F4541, 0xEF4D41434D5F6567, v31);
      v32 = v54[0];
      swift_bridgeObjectRelease();
      v33 = Int64._bridgeToObjectiveC()().super.super.isa;
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v32;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v33, 0x61726576615F4541, 0xEF4D4143445F6567, v34);
      v35 = v54[0];
      swift_bridgeObjectRelease();
      v36 = Int64._bridgeToObjectiveC()().super.super.isa;
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v35;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v36, 0xD000000000000019, 0x800000023D9CCD70, v37);
      v38 = v54[0];
      swift_bridgeObjectRelease();
      v39 = Int64._bridgeToObjectiveC()().super.super.isa;
      v40 = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = v38;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v39, 0xD00000000000001BLL, 0x800000023D9CCD90, v40);
      v6 = v54[0];
      swift_bridgeObjectRelease();
    }
  }
LABEL_19:
  v7 = (void *)v6;
  result.value._rawValue = v7;
  result.is_nil = v5;
  return result;
}

uint64_t PinchSignalStatistics.onSignalEnd(_:_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _BYTE *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE v18[656];
  _QWORD v19[83];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v7 = MEMORY[0x24BDAC7A8](v3, v6);
  v8 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (static PipelineStatistics.enableCoreAnalytics == 1)
  {
    v9 = (void *)MEMORY[0x2426372E8](0xD00000000000001DLL, 0x800000023D9CC910, v7);
    outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)&v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v11 = (v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject();
    outlined init with take of ImageData?((uint64_t)v8, v12 + v10, &demangling cache variable for type metadata for DerivedHandAttributes?);
    *(_QWORD *)(v12 + v11) = v1;
    v13 = (_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));
    *v13 = 0xD00000000000001DLL;
    v13[1] = 0x800000023D9CC910;
    v19[4] = partial apply for closure #1 in PinchSignalStatistics.onSignalEnd(_:_:_:);
    v19[5] = v12;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v19[3] = &block_descriptor_9;
    v14 = _Block_copy(v19);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v14);

  }
  _s5Hands22PinchStatisticsStructsC0B9AttributeVSgWOi0_(v18);
  v15 = v1 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes;
  swift_beginAccess();
  outlined init with take of ImageData?(v15, (uint64_t)v19, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined init with take of ImageData?((uint64_t)v18, v15, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  return outlined release of HandContainer((uint64_t)v19);
}

unint64_t closure #1 in PinchSignalStatistics.onSignalEnd(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  Hands::PinchEventType v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v7 = type metadata accessor for DerivedHandAttributes(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a1, 1, v7) == 1)
    v8 = Hands_PinchEventType_PinchBreakByHandDisappear;
  else
    v8 = Hands_PinchEventType_PinchBreakByRelease;
  v9 = (unint64_t)PinchSignalStatistics.constructPinchEventDictionary(type:)(v8);
  v14 = xmmword_23D9A8B80;
  v15 = 0;
  v16 = 0;
  v13[0] = a3;
  v13[1] = a4;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]?);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v13[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000063, 0x800000023D9CC930, 171, (uint64_t *)&v14, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  return v9;
}

uint64_t PinchSignalStatistics.__ivar_destroyer()
{
  uint64_t v0;
  _BYTE v2[656];

  outlined init with take of ImageData?(v0 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes, (uint64_t)v2, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  return outlined release of HandContainer((uint64_t)v2);
}

uint64_t PinchSignalStatistics.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[656];

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart, &demangling cache variable for type metadata for HandDescriptor?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ImageData?(v0 + OBJC_IVAR____TtC5Hands21PinchSignalStatistics_pinchAttributes, (uint64_t)v2, &demangling cache variable for type metadata for PinchStatisticsStructs.PinchAttribute?);
  outlined release of HandContainer((uint64_t)v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PinchSignalStatistics()
{
  return type metadata accessor for PinchSignalStatistics();
}

uint64_t type metadata accessor for PinchSignalStatistics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PinchSignalStatistics;
  if (!type metadata singleton initialization cache for PinchSignalStatistics)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PinchSignalStatistics()
{
  return swift_updateClassMetadata2();
}

void _s5Hands22PinchStatisticsStructsC0B9AttributeVSgWOi0_(void *a1)
{
  bzero(a1, 0x289uLL);
}

uint64_t sub_23D7A4A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                 - 8);
  v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  v3 = type metadata accessor for DerivedHandAttributes(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    if (*(_QWORD *)(v2 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v2 + 200))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v4 = (int *)type metadata accessor for HandDescriptor();
    v5 = v2 + v4[17];
    v6 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    {
      v7 = type metadata accessor for UnknownStorage();
      v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v8(v5, v7);
      v9 = v5 + *(int *)(v6 + 20);
      v10 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        swift_bridgeObjectRelease();
        v8(v9 + *(int *)(v10 + 20), v7);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v2 + v4[24];
    v12 = (int *)type metadata accessor for HandDescriptorInternal();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12))
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v11 + 48))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v11 + v12[10];
      v14 = type metadata accessor for ActionInternalPB(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        v15 = v13 + *(int *)(v14 + 20);
        v16 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      }
      v17 = v11 + v12[11];
      v18 = type metadata accessor for UnsureInternalPB(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
      {
        v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
        swift_release();
      }
      v20 = v11 + v12[12];
      v21 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
      {
        v22 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
        swift_release();
      }
      v23 = v11 + v12[13];
      v24 = type metadata accessor for HomePinchInternalPB(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
      {
        v25 = v23 + *(int *)(v24 + 20);
        v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v2 + v4[31]))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v2 + v4[35] + 144))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v27 = v2 + v4[36];
    v28 = type metadata accessor for PartialHandMultiCam(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v27 + *(int *)(v28 + 24);
      v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in PinchSignalStatistics.onSignalEnd(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in PinchSignalStatistics.onSignalEnd(_:_:_:)(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t outlined retain of PinchStatisticsStructs.PinchAttribute?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchEventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23D7A507C + 4 * byte_23D9AF275[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23D7A50B0 + 4 * byte_23D9AF270[v4]))();
}

uint64_t sub_23D7A50B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7A50B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7A50C0);
  return result;
}

uint64_t sub_23D7A50CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7A50D4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23D7A50D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7A50E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchEventType()
{
  return &type metadata for PinchEventType;
}

unint64_t lazy protocol witness table accessor for type PinchEventType and conformance PinchEventType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchEventType and conformance PinchEventType;
  if (!lazy protocol witness table cache variable for type PinchEventType and conformance PinchEventType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchEventType, &type metadata for PinchEventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchEventType and conformance PinchEventType);
  }
  return result;
}

unint64_t specialized PinchEventType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xB)
    return 11;
  return result;
}

uint64_t TrackingDataBlobPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v47 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v46 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v45 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  v21 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  v23 = type metadata accessor for TrackingInfosPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  v25 = type metadata accessor for TrackingIntermediateDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  v27 = type metadata accessor for SchedulingDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = v1 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state;
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  v29 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  v44 = v1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  v30 = type metadata accessor for DetectionSpecPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v31, (uint64_t)v19, &demangling cache variable for type metadata for HandsKitDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v19, v20, &demangling cache variable for type metadata for HandsKitDataPB?);
  swift_endAccess();
  v32 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v15, &demangling cache variable for type metadata for TrackingInfosPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v15, v22, &demangling cache variable for type metadata for TrackingInfosPB?);
  swift_endAccess();
  v33 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  swift_beginAccess();
  v34 = v45;
  outlined init with copy of (Int32, Matrix2dPB)(v33, v45, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v34, v24, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  swift_endAccess();
  v35 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  swift_beginAccess();
  v36 = v46;
  outlined init with copy of (Int32, Matrix2dPB)(v35, v46, &demangling cache variable for type metadata for SchedulingDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v36, v26, &demangling cache variable for type metadata for SchedulingDataPB?);
  swift_endAccess();
  v37 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state);
  swift_beginAccess();
  v38 = *v37;
  LOBYTE(v37) = *((_BYTE *)v37 + 8);
  swift_beginAccess();
  *(_QWORD *)v28 = v38;
  *(_BYTE *)(v28 + 8) = (_BYTE)v37;
  v39 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  swift_beginAccess();
  v40 = v47;
  outlined init with copy of (Int32, Matrix2dPB)(v39, v47, &demangling cache variable for type metadata for DetectionSpecPB?);
  swift_release();
  v41 = v44;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v40, v41, &demangling cache variable for type metadata for DetectionSpecPB?);
  swift_endAccess();
  return v1;
}

uint64_t TrackingDataBlobPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData, &demangling cache variable for type metadata for HandsKitDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec, &demangling cache variable for type metadata for DetectionSpecPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TrackingDataBlobPB._StorageClass()
{
  return type metadata accessor for TrackingDataBlobPB._StorageClass(0);
}

uint64_t type metadata accessor for TrackingDataBlobPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingDataBlobPB._StorageClass);
}

void type metadata completion function for TrackingDataBlobPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandsKitDataPB?, (void (*)(uint64_t))type metadata accessor for HandsKitDataPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingInfosPB?, (void (*)(uint64_t))type metadata accessor for TrackingInfosPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingIntermediateDataPB?, (void (*)(uint64_t))type metadata accessor for TrackingIntermediateDataPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for SchedulingDataPB?, (void (*)(uint64_t))type metadata accessor for SchedulingDataPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for DetectionSpecPB?, (void (*)(uint64_t))type metadata accessor for DetectionSpecPB);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t TrackingDataBlobPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for TrackingDataBlobPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingDataBlobPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = TrackingDataBlobPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in TrackingDataBlobPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in TrackingDataBlobPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t *v17;
  void *v18;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
          v16 = type metadata accessor for HandsKitDataPB;
          v17 = &lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB;
          v18 = &protocol conformance descriptor for HandsKitDataPB;
          goto LABEL_5;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
          v16 = type metadata accessor for TrackingInfosPB;
          v17 = (uint64_t *)&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB;
          v18 = &protocol conformance descriptor for TrackingInfosPB;
          goto LABEL_5;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
          v16 = type metadata accessor for TrackingIntermediateDataPB;
          v17 = &lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB;
          v18 = &protocol conformance descriptor for TrackingIntermediateDataPB;
          goto LABEL_5;
        case 4:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
          v16 = type metadata accessor for SchedulingDataPB;
          v17 = &lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB;
          v18 = &protocol conformance descriptor for SchedulingDataPB;
          goto LABEL_5;
        case 5:
          closure #5 in closure #1 in TrackingDataBlobPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
          v16 = type metadata accessor for DetectionSpecPB;
          v17 = (uint64_t *)&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB;
          v18 = &protocol conformance descriptor for DetectionSpecPB;
LABEL_5:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, (unint64_t *)v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in closure #1 in TrackingDataBlobPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type TrackingState and conformance TrackingState();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for TrackingDataBlobPB(0);
  v7 = swift_retain();
  closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = closure #1 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    closure #2 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #3 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #4 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v10 = a1 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state;
    swift_beginAccess();
    if (!specialized == infix<A>(_:_:)(*(_QWORD *)v10, *(_BYTE *)(v10 + 8), 0, 1))
    {
      lazy protocol witness table accessor for type TrackingState and conformance TrackingState();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return closure #5 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandsKitDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandsKitDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandsKitDataPB);
}

uint64_t closure #2 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingInfosPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TrackingInfosPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingInfosPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingInfosPB);
}

uint64_t closure #3 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingIntermediateDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingIntermediateDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingIntermediateDataPB);
}

uint64_t closure #4 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SchedulingDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for SchedulingDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for SchedulingDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for SchedulingDataPB);
}

uint64_t closure #5 in closure #1 in TrackingDataBlobPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetectionSpecPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for DetectionSpecPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DetectionSpecPB);
}

BOOL closure #1 in static TrackingDataBlobPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);
  _QWORD *v92;
  int v93;
  _QWORD *v94;
  char v95;
  uint64_t v96;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v157 = a2;
  v3 = type metadata accessor for DetectionSpecPB(0);
  v130 = *(_QWORD *)(v3 - 8);
  v131 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v127 = (uint64_t)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DetectionSpecPB?, DetectionSpecPB?));
  MEMORY[0x24BDAC7A8](v129, v6);
  v132 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v128 = (uint64_t)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v147 = (uint64_t)&v127 - v13;
  v14 = type metadata accessor for SchedulingDataPB(0);
  v137 = *(_QWORD *)(v14 - 8);
  v138 = v14;
  MEMORY[0x24BDAC7A8](v14, v15);
  v133 = (uint64_t)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SchedulingDataPB?, SchedulingDataPB?));
  MEMORY[0x24BDAC7A8](v136, v17);
  v139 = (uint64_t)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v134 = (uint64_t)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v151 = (uint64_t)&v127 - v24;
  v25 = type metadata accessor for TrackingIntermediateDataPB(0);
  v142 = *(_QWORD *)(v25 - 8);
  v143 = v25;
  MEMORY[0x24BDAC7A8](v25, v26);
  v135 = (uint64_t)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingIntermediateDataPB?, TrackingIntermediateDataPB?));
  MEMORY[0x24BDAC7A8](v141, v28);
  v146 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v140 = (uint64_t)&v127 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v154 = (uint64_t)&v127 - v35;
  v152 = type metadata accessor for TrackingInfosPB(0);
  v150 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152, v36);
  v144 = (uint64_t *)((char *)&v127 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingInfosPB?, TrackingInfosPB?));
  MEMORY[0x24BDAC7A8](v149, v38);
  v153 = (uint64_t)&v127 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  MEMORY[0x24BDAC7A8](v40, v41);
  v145 = (uint64_t *)((char *)&v127 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v43, v44);
  v155 = (uint64_t)&v127 - v45;
  v46 = type metadata accessor for HandsKitDataPB(0);
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46, v48);
  v148 = (uint64_t)&v127 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandsKitDataPB?, HandsKitDataPB?));
  MEMORY[0x24BDAC7A8](v50, v51);
  v53 = (char *)&v127 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v54, v55);
  v156 = (uint64_t)&v127 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57, v58);
  v60 = (char *)&v127 - v59;
  v61 = a1;
  v62 = a1
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v62, (uint64_t)v60, &demangling cache variable for type metadata for HandsKitDataPB?);
  v63 = v157;
  v64 = v157
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  swift_beginAccess();
  v65 = (uint64_t)&v53[*(int *)(v50 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v60, (uint64_t)v53, &demangling cache variable for type metadata for HandsKitDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v64, v65, &demangling cache variable for type metadata for HandsKitDataPB?);
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v66((uint64_t)v53, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v60, &demangling cache variable for type metadata for HandsKitDataPB?);
    v67 = v61;
    if (v66(v65, 1, v46) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for HandsKitDataPB?);
      goto LABEL_8;
    }
LABEL_6:
    v69 = &demangling cache variable for type metadata for (HandsKitDataPB?, HandsKitDataPB?);
    v70 = (uint64_t)v53;
LABEL_26:
    outlined destroy of Coordinate3DPB?(v70, v69);
    goto LABEL_27;
  }
  v68 = v61;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v53, v156, &demangling cache variable for type metadata for HandsKitDataPB?);
  if (v66(v65, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v60, &demangling cache variable for type metadata for HandsKitDataPB?);
    outlined destroy of Matrix3x3PB(v156, type metadata accessor for HandsKitDataPB);
    goto LABEL_6;
  }
  v71 = v148;
  outlined init with take of Matrix2dPB(v65, v148, type metadata accessor for HandsKitDataPB);
  swift_retain();
  swift_retain();
  v72 = v156;
  v73 = static HandsKitDataPB.== infix(_:_:)(v156, v71);
  outlined destroy of Matrix3x3PB(v71, type metadata accessor for HandsKitDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v60, &demangling cache variable for type metadata for HandsKitDataPB?);
  v67 = v68;
  outlined destroy of Matrix3x3PB(v72, type metadata accessor for HandsKitDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for HandsKitDataPB?);
  if ((v73 & 1) == 0)
  {
LABEL_27:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_8:
  v74 = v67
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  swift_beginAccess();
  v75 = v155;
  outlined init with copy of (Int32, Matrix2dPB)(v74, v155, &demangling cache variable for type metadata for TrackingInfosPB?);
  v76 = v63
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  swift_beginAccess();
  v77 = v153;
  v78 = v153 + *(int *)(v149 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v75, v153, &demangling cache variable for type metadata for TrackingInfosPB?);
  v79 = v77;
  outlined init with copy of (Int32, Matrix2dPB)(v76, v78, &demangling cache variable for type metadata for TrackingInfosPB?);
  v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
  v81 = v152;
  if (v80(v79, 1, v152) == 1)
  {
    outlined destroy of Coordinate3DPB?(v75, &demangling cache variable for type metadata for TrackingInfosPB?);
    v82 = v80(v78, 1, v81);
    v83 = (uint64_t)v146;
    v84 = v147;
    v85 = v151;
    v86 = v154;
    if (v82 == 1)
    {
      outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for TrackingInfosPB?);
      goto LABEL_11;
    }
LABEL_16:
    v69 = &demangling cache variable for type metadata for (TrackingInfosPB?, TrackingInfosPB?);
LABEL_17:
    v70 = v79;
    goto LABEL_26;
  }
  v92 = v145;
  outlined init with copy of (Int32, Matrix2dPB)(v79, (uint64_t)v145, &demangling cache variable for type metadata for TrackingInfosPB?);
  v93 = v80(v78, 1, v81);
  v85 = v151;
  v86 = v154;
  if (v93 == 1)
  {
    outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v92, type metadata accessor for TrackingInfosPB);
    goto LABEL_16;
  }
  v94 = v144;
  outlined init with take of Matrix2dPB(v78, (uint64_t)v144, type metadata accessor for TrackingInfosPB);
  if (*v92 != *v94 || (specialized static Array<A>.== infix(_:_:)(v92[1], v94[1]) & 1) == 0)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v94, type metadata accessor for TrackingInfosPB);
    outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v92, type metadata accessor for TrackingInfosPB);
    v70 = v79;
    v69 = &demangling cache variable for type metadata for TrackingInfosPB?;
    goto LABEL_26;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v144, type metadata accessor for TrackingInfosPB);
  outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v92, type metadata accessor for TrackingInfosPB);
  outlined destroy of Coordinate3DPB?(v153, &demangling cache variable for type metadata for TrackingInfosPB?);
  v83 = (uint64_t)v146;
  v84 = v147;
  if ((v95 & 1) == 0)
    goto LABEL_27;
LABEL_11:
  v87 = v67
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v87, v86, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  v88 = v63
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  swift_beginAccess();
  v89 = v83 + *(int *)(v141 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v86, v83, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v88, v89, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  v90 = v143;
  v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  if (v91(v83, 1, v143) == 1)
  {
    outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
    if (v91(v89, 1, v90) == 1)
    {
      outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
      goto LABEL_31;
    }
LABEL_25:
    v69 = &demangling cache variable for type metadata for (TrackingIntermediateDataPB?, TrackingIntermediateDataPB?);
    v70 = v83;
    goto LABEL_26;
  }
  v96 = v140;
  outlined init with copy of (Int32, Matrix2dPB)(v83, v140, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  if (v91(v89, 1, v90) == 1)
  {
    outlined destroy of Coordinate3DPB?(v154, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
    outlined destroy of Matrix3x3PB(v96, type metadata accessor for TrackingIntermediateDataPB);
    goto LABEL_25;
  }
  v98 = v135;
  outlined init with take of Matrix2dPB(v89, v135, type metadata accessor for TrackingIntermediateDataPB);
  v99 = specialized static TrackingIntermediateDataPB.== infix(_:_:)(v96, v98);
  outlined destroy of Matrix3x3PB(v98, type metadata accessor for TrackingIntermediateDataPB);
  outlined destroy of Coordinate3DPB?(v154, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  outlined destroy of Matrix3x3PB(v96, type metadata accessor for TrackingIntermediateDataPB);
  outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for TrackingIntermediateDataPB?);
  if ((v99 & 1) == 0)
    goto LABEL_27;
LABEL_31:
  v100 = v67
       + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v100, v85, &demangling cache variable for type metadata for SchedulingDataPB?);
  v101 = v63
       + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  swift_beginAccess();
  v102 = v85;
  v103 = v139;
  v104 = v139 + *(int *)(v136 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v102, v139, &demangling cache variable for type metadata for SchedulingDataPB?);
  v105 = v101;
  v79 = v103;
  outlined init with copy of (Int32, Matrix2dPB)(v105, v104, &demangling cache variable for type metadata for SchedulingDataPB?);
  v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
  v107 = v103;
  v108 = v138;
  if (v106(v107, 1, v138) == 1)
  {
    outlined destroy of Coordinate3DPB?(v102, &demangling cache variable for type metadata for SchedulingDataPB?);
    if (v106(v104, 1, v108) == 1)
    {
      outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for SchedulingDataPB?);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  v109 = v134;
  outlined init with copy of (Int32, Matrix2dPB)(v79, v134, &demangling cache variable for type metadata for SchedulingDataPB?);
  if (v106(v104, 1, v108) == 1)
  {
    outlined destroy of Coordinate3DPB?(v151, &demangling cache variable for type metadata for SchedulingDataPB?);
    outlined destroy of Matrix3x3PB(v109, type metadata accessor for SchedulingDataPB);
LABEL_36:
    v69 = &demangling cache variable for type metadata for (SchedulingDataPB?, SchedulingDataPB?);
    goto LABEL_17;
  }
  v110 = v133;
  outlined init with take of Matrix2dPB(v104, v133, type metadata accessor for SchedulingDataPB);
  v111 = static SchedulingDataPB.== infix(_:_:)(v109, v110);
  outlined destroy of Matrix3x3PB(v110, type metadata accessor for SchedulingDataPB);
  outlined destroy of Coordinate3DPB?(v151, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined destroy of Matrix3x3PB(v109, type metadata accessor for SchedulingDataPB);
  outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for SchedulingDataPB?);
  if ((v111 & 1) == 0)
    goto LABEL_27;
LABEL_38:
  v112 = v67 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state;
  swift_beginAccess();
  v113 = *(_QWORD *)v112;
  LOBYTE(v112) = *(_BYTE *)(v112 + 8);
  v114 = v63 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state;
  swift_beginAccess();
  if (!specialized == infix<A>(_:_:)(v113, v112, *(_QWORD *)v114, *(_BYTE *)(v114 + 8)))
    goto LABEL_27;
  v115 = v67
       + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v115, v84, &demangling cache variable for type metadata for DetectionSpecPB?);
  v116 = v63
       + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  swift_beginAccess();
  v117 = v132;
  v118 = v132 + *(int *)(v129 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v84, v132, &demangling cache variable for type metadata for DetectionSpecPB?);
  v119 = v116;
  v120 = v117;
  outlined init with copy of (Int32, Matrix2dPB)(v119, v118, &demangling cache variable for type metadata for DetectionSpecPB?);
  v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
  v122 = v117;
  v123 = v131;
  if (v121(v122, 1, v131) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v84, &demangling cache variable for type metadata for DetectionSpecPB?);
    if (v121(v118, 1, v123) == 1)
    {
      outlined destroy of Coordinate3DPB?(v120, &demangling cache variable for type metadata for DetectionSpecPB?);
      return 1;
    }
    goto LABEL_44;
  }
  v124 = v128;
  outlined init with copy of (Int32, Matrix2dPB)(v120, v128, &demangling cache variable for type metadata for DetectionSpecPB?);
  if (v121(v118, 1, v123) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v147, &demangling cache variable for type metadata for DetectionSpecPB?);
    outlined destroy of Matrix3x3PB(v124, type metadata accessor for DetectionSpecPB);
LABEL_44:
    outlined destroy of Coordinate3DPB?(v120, &demangling cache variable for type metadata for (DetectionSpecPB?, DetectionSpecPB?));
    return 0;
  }
  v125 = v127;
  outlined init with take of Matrix2dPB(v118, v127, type metadata accessor for DetectionSpecPB);
  v126 = static DetectionSpecPB.== infix(_:_:)(v124, v125);
  swift_release();
  swift_release();
  outlined destroy of Matrix3x3PB(v125, type metadata accessor for DetectionSpecPB);
  outlined destroy of Coordinate3DPB?(v147, &demangling cache variable for type metadata for DetectionSpecPB?);
  outlined destroy of Matrix3x3PB(v124, type metadata accessor for DetectionSpecPB);
  outlined destroy of Coordinate3DPB?(v120, &demangling cache variable for type metadata for DetectionSpecPB?);
  return (v126 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance TrackingDataBlobPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static TrackingDataBlobPB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingDataBlobPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingDataBlobPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingDataBlobPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingDataBlobPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingDataBlobPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingDataBlobPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingDataBlobPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingDataBlobPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingDataBlobPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingDataBlobPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  return Message.hash(into:)();
}

uint64_t TrackingModuleIOPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in TrackingModuleIOPB.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in TrackingModuleIOPB.decodeMessage<A>(decoder:)();
        break;
      case 1:
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in TrackingModuleIOPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TrackingModuleIOPB(0);
  type metadata accessor for TrackingDataBlobPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in TrackingModuleIOPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TrackingModuleIOPB(0);
  type metadata accessor for TrackingDataBlobPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t TrackingModuleIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in TrackingModuleIOPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in TrackingModuleIOPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      type metadata accessor for TrackingModuleIOPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in TrackingModuleIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingDataBlobPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackingModuleIOPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingDataBlobPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingDataBlobPB);
}

uint64_t closure #2 in TrackingModuleIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingDataBlobPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackingModuleIOPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingDataBlobPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingDataBlobPB);
}

uint64_t protocol witness for Message.init() in conformance TrackingModuleIOPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for TrackingDataBlobPB(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v7)((char *)a2 + *(int *)(a1 + 28), 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingModuleIOPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingModuleIOPB()
{
  return TrackingModuleIOPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingModuleIOPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingModuleIOPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingModuleIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingModuleIOPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingModuleIOPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingModuleIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingModuleIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
  return Message.hash(into:)();
}

uint64_t TrackingModuleTestBundlePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 4)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type TrackingState and conformance TrackingState();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for TrackingModuleIOPB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t TrackingModuleTestBundlePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (specialized == infix<A>(_:_:)(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), 0, 1)
    || (lazy protocol witness table accessor for type TrackingState and conformance TrackingState(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
        || (type metadata accessor for TrackingModuleIOPB(0),
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for TrackingModuleTestBundlePB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingModuleTestBundlePB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingModuleTestBundlePB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingModuleTestBundlePB()
{
  return TrackingModuleTestBundlePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingModuleTestBundlePB()
{
  return TrackingModuleTestBundlePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingModuleTestBundlePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingModuleTestBundlePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingModuleTestBundlePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingModuleTestBundlePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingModuleTestBundlePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
  return Message.hash(into:)();
}

uint64_t SequenceFrameDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in SequenceFrameDataPB.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in SequenceFrameDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt32();
  type metadata accessor for TrackingModuleIOPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t SequenceFrameDataPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for ProtobufInt32(),
          type metadata accessor for TrackingModuleIOPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB), lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
    {
      type metadata accessor for SequenceFrameDataPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance SequenceFrameDataPB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance SequenceFrameDataPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance SequenceFrameDataPB()
{
  return SequenceFrameDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance SequenceFrameDataPB()
{
  return SequenceFrameDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance SequenceFrameDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance SequenceFrameDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static SequenceFrameDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SequenceFrameDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SequenceFrameDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
  return Message.hash(into:)();
}

uint64_t TrackingSequenceTestDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for SequenceFrameDataPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TrackingSequenceTestDataPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for SequenceFrameDataPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for TrackingSequenceTestDataPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingSequenceTestDataPB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingSequenceTestDataPB()
{
  return TrackingSequenceTestDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingSequenceTestDataPB()
{
  return TrackingSequenceTestDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingSequenceTestDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingSequenceTestDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingSequenceTestDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingSequenceTestDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingSequenceTestDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TrackingSequenceTestDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
}

uint64_t type metadata accessor for TrackingSequenceTestDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingSequenceTestDataPB);
}

uint64_t base witness table accessor for Message in TrackingSequenceTestDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
}

uint64_t base witness table accessor for Hashable in TrackingSequenceTestDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingSequenceTestDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingSequenceTestDataPB and conformance TrackingSequenceTestDataPB, type metadata accessor for TrackingSequenceTestDataPB, (uint64_t)&protocol conformance descriptor for TrackingSequenceTestDataPB);
}

uint64_t base witness table accessor for Equatable in SequenceFrameDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
}

uint64_t type metadata accessor for SequenceFrameDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SequenceFrameDataPB);
}

uint64_t base witness table accessor for Message in SequenceFrameDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
}

uint64_t base witness table accessor for Hashable in SequenceFrameDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SequenceFrameDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceFrameDataPB and conformance SequenceFrameDataPB, type metadata accessor for SequenceFrameDataPB, (uint64_t)&protocol conformance descriptor for SequenceFrameDataPB);
}

uint64_t base witness table accessor for Equatable in TrackingModuleTestBundlePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
}

uint64_t type metadata accessor for TrackingModuleTestBundlePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingModuleTestBundlePB);
}

uint64_t base witness table accessor for Message in TrackingModuleTestBundlePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
}

uint64_t base witness table accessor for Hashable in TrackingModuleTestBundlePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingModuleTestBundlePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleTestBundlePB and conformance TrackingModuleTestBundlePB, type metadata accessor for TrackingModuleTestBundlePB, (uint64_t)&protocol conformance descriptor for TrackingModuleTestBundlePB);
}

uint64_t base witness table accessor for Equatable in TrackingModuleIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
}

uint64_t type metadata accessor for TrackingModuleIOPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingModuleIOPB);
}

uint64_t base witness table accessor for Message in TrackingModuleIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
}

uint64_t base witness table accessor for Hashable in TrackingModuleIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingModuleIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingModuleIOPB and conformance TrackingModuleIOPB, type metadata accessor for TrackingModuleIOPB, (uint64_t)&protocol conformance descriptor for TrackingModuleIOPB);
}

uint64_t base witness table accessor for Equatable in TrackingDataBlobPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
}

uint64_t type metadata accessor for TrackingDataBlobPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingDataBlobPB);
}

uint64_t base witness table accessor for Message in TrackingDataBlobPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
}

uint64_t base witness table accessor for Hashable in TrackingDataBlobPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingDataBlobPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingDataBlobPB and conformance TrackingDataBlobPB, type metadata accessor for TrackingDataBlobPB, (uint64_t)&protocol conformance descriptor for TrackingDataBlobPB);
}

unint64_t lazy protocol witness table accessor for type TrackingState and conformance TrackingState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingState and conformance TrackingState;
  if (!lazy protocol witness table cache variable for type TrackingState and conformance TrackingState)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingState, &type metadata for TrackingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingState and conformance TrackingState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingState and conformance TrackingState;
  if (!lazy protocol witness table cache variable for type TrackingState and conformance TrackingState)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingState, &type metadata for TrackingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingState and conformance TrackingState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingState and conformance TrackingState;
  if (!lazy protocol witness table cache variable for type TrackingState and conformance TrackingState)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingState, &type metadata for TrackingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingState and conformance TrackingState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingState and conformance TrackingState;
  if (!lazy protocol witness table cache variable for type TrackingState and conformance TrackingState)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingState, &type metadata for TrackingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingState and conformance TrackingState);
  }
  return result;
}

uint64_t specialized static TrackingSequenceTestDataPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      v15 = type metadata accessor for TrackingSequenceTestDataPB(0);
      v16 = (char *)a1 + *(int *)(v15 + 24);
      v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v17(v12, v16, v4);
      v17(v8, &a2[*(int *)(v15 + 24)], v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v12, v4);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static TrackingModuleTestBundlePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  if (!specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8)))
    goto LABEL_9;
  v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0)
    {
      v15 = type metadata accessor for TrackingModuleTestBundlePB(0);
      v16 = a1 + *(int *)(v15 + 28);
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v17(v12, v16, v4);
      v17(v8, a2 + *(int *)(v15 + 28), v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v12, v4);
      return v14 & 1;
    }
LABEL_9:
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static SequenceFrameDataPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  if (*a1 == *(_QWORD *)a2
    && (specialized static Dictionary<>.== infix(_:_:)(a1[1], *((_QWORD *)a2 + 1)), (v13 & 1) != 0))
  {
    v14 = type metadata accessor for SequenceFrameDataPB(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, &a2[*(int *)(v14 + 24)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static TrackingModuleIOPB.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v4 = type metadata accessor for UnknownStorage();
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v80 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v71 - v9;
  v11 = type metadata accessor for TrackingDataBlobPB(0);
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingDataBlobPB?, TrackingDataBlobPB?));
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v71 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
  MEMORY[0x24BDAC7A8](v23, v24);
  MEMORY[0x24BDAC7A8](v25, v26);
  MEMORY[0x24BDAC7A8](v27, v28);
  MEMORY[0x24BDAC7A8](v29, v30);
  MEMORY[0x24BDAC7A8]((char *)&v71 - v31, v32);
  v34 = (char *)&v71 - v33;
  MEMORY[0x24BDAC7A8](v35, v36);
  v42 = (char *)&v71 - v41;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_16;
  v76 = v37;
  v77 = v40;
  v78 = v39;
  v79 = v14;
  v71 = v10;
  v72 = v38;
  v74 = v18;
  v43 = type metadata accessor for TrackingModuleIOPB(0);
  v44 = *(int *)(v43 + 24);
  v75 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a1[v44], (uint64_t)v42, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  v45 = *(int *)(v43 + 24);
  v73 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a2[v45], (uint64_t)v34, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  v46 = (uint64_t)&v22[*(int *)(v15 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v42, (uint64_t)v22, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v34, v46, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  v47 = v84;
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  if (v48((uint64_t)v22, 1, v84) != 1)
  {
    v49 = v76;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v22, v76, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    v50 = v48(v46, 1, v47);
    v51 = (uint64_t)v79;
    if (v50 != 1)
    {
      outlined init with take of Matrix2dPB(v46, (uint64_t)v79, type metadata accessor for TrackingDataBlobPB);
      LODWORD(v83) = specialized static TrackingDataBlobPB.== infix(_:_:)(v49, v51);
      outlined destroy of Matrix3x3PB(v51, type metadata accessor for TrackingDataBlobPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v34, &demangling cache variable for type metadata for TrackingDataBlobPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for TrackingDataBlobPB?);
      outlined destroy of Matrix3x3PB(v49, type metadata accessor for TrackingDataBlobPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for TrackingDataBlobPB?);
      if ((v83 & 1) == 0)
        goto LABEL_16;
      goto LABEL_9;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v34, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    outlined destroy of Matrix3x3PB(v49, type metadata accessor for TrackingDataBlobPB);
LABEL_7:
    v52 = (uint64_t)v22;
LABEL_15:
    outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for (TrackingDataBlobPB?, TrackingDataBlobPB?));
    goto LABEL_16;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v34, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if (v48(v46, 1, v47) != 1)
    goto LABEL_7;
  outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for TrackingDataBlobPB?);
LABEL_9:
  v53 = v75;
  v54 = v78;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v75[*(int *)(v43 + 28)], v78, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  v84 = v43;
  v55 = v73;
  v56 = v77;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v73[*(int *)(v43 + 28)], v77, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  v57 = (uint64_t)v74;
  v58 = (uint64_t)&v74[*(int *)(v15 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v54, (uint64_t)v74, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v56, v58, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if (v48(v57, 1, v47) == 1)
  {
    outlined destroy of Coordinate3DPB?(v56, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    if (v48(v58, 1, v47) == 1)
    {
      outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for TrackingDataBlobPB?);
LABEL_19:
      v64 = v84;
      v66 = v81;
      v65 = v82;
      v67 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      v68 = v71;
      v67(v71, &v53[*(int *)(v84 + 20)], v82);
      v69 = v80;
      v67(v80, &v55[*(int *)(v64 + 20)], v65);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70 = *(void (**)(char *, uint64_t))(v66 + 8);
      v70(v69, v65);
      v70(v68, v65);
      return v60 & 1;
    }
    goto LABEL_14;
  }
  v59 = v72;
  outlined init with copy of (Int32, Matrix2dPB)(v57, v72, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if (v48(v58, 1, v47) == 1)
  {
    outlined destroy of Coordinate3DPB?(v77, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for TrackingDataBlobPB?);
    outlined destroy of Matrix3x3PB(v59, type metadata accessor for TrackingDataBlobPB);
LABEL_14:
    v52 = v57;
    goto LABEL_15;
  }
  v62 = (uint64_t)v79;
  outlined init with take of Matrix2dPB(v58, (uint64_t)v79, type metadata accessor for TrackingDataBlobPB);
  v63 = specialized static TrackingDataBlobPB.== infix(_:_:)(v59, v62);
  outlined destroy of Matrix3x3PB(v62, type metadata accessor for TrackingDataBlobPB);
  outlined destroy of Coordinate3DPB?(v77, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  outlined destroy of Matrix3x3PB(v59, type metadata accessor for TrackingDataBlobPB);
  outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for TrackingDataBlobPB?);
  if ((v63 & 1) != 0)
    goto LABEL_19;
LABEL_16:
  v60 = 0;
  return v60 & 1;
}

uint64_t specialized static TrackingDataBlobPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for TrackingDataBlobPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static TrackingDataBlobPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingModuleIOPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for TrackingDataBlobPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v10);
      *(_QWORD *)&v13[*(int *)(v15 + 20)] = *(_QWORD *)&v14[*(int *)(v15 + 20)];
      v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      swift_retain();
      v20(v13, 0, 1, v15);
    }
    v21 = a3[7];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    if (v17(v23, 1, v15))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v11(v22, v23, v10);
      *(_QWORD *)&v22[*(int *)(v15 + 20)] = *(_QWORD *)&v23[*(int *)(v15 + 20)];
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      swift_retain();
      v25(v22, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for TrackingModuleIOPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for TrackingDataBlobPB(0);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    v6(v7, v5);
    swift_release();
  }
  v10 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v10, v5);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for TrackingModuleIOPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for TrackingDataBlobPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
    v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
    swift_retain();
    v18(v12, 0, 1, v14);
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  if (v16(v21, 1, v14))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v10(v20, v21, v9);
    *(_QWORD *)&v20[*(int *)(v14 + 20)] = *(_QWORD *)&v21[*(int *)(v14 + 20)];
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
    swift_retain();
    v23(v20, 0, 1, v14);
  }
  return a1;
}

char *assignWithCopy for TrackingModuleIOPB(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;

  *(_QWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD *)(v9 - 8);
  v28 = *(void (**)(char *, char *, uint64_t))(v29 + 24);
  v28(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TrackingDataBlobPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v11, v12, v9);
      *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
      v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
      swift_retain();
      v18(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingDataBlobPB);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v28(v11, v12, v9);
  *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
  swift_retain();
  swift_release();
LABEL_7:
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = (char *)a2 + v20;
  v23 = v15(&a1[v20], 1, v13);
  v24 = v15(v22, 1, v13);
  if (!v23)
  {
    if (!v24)
    {
      v28(v21, v22, v9);
      *(_QWORD *)&v21[*(int *)(v13 + 20)] = *(_QWORD *)&v22[*(int *)(v13 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for TrackingDataBlobPB);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v21, v22, v9);
  *(_QWORD *)&v21[*(int *)(v13 + 20)] = *(_QWORD *)&v22[*(int *)(v13 + 20)];
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  swift_retain();
  v25(v21, 0, 1, v13);
  return a1;
}

_QWORD *initializeWithTake for TrackingModuleIOPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for TrackingDataBlobPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  if (v16(v20, 1, v14))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v10(v19, v20, v9);
    *(_QWORD *)&v19[*(int *)(v14 + 20)] = *(_QWORD *)&v20[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  return a1;
}

char *assignWithTake for TrackingModuleIOPB(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;

  *(_QWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v9 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v27 + 40);
  v26(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TrackingDataBlobPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v11, v12, v9);
      *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingDataBlobPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v26(v11, v12, v9);
  *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
  swift_release();
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  v22 = v15(&a1[v19], 1, v13);
  v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      v26(v20, v21, v9);
      *(_QWORD *)&v20[*(int *)(v13 + 20)] = *(_QWORD *)&v21[*(int *)(v13 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for TrackingDataBlobPB);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v20, v21, v9);
  *(_QWORD *)&v20[*(int *)(v13 + 20)] = *(_QWORD *)&v21[*(int *)(v13 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingModuleIOPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AAB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TrackingModuleIOPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AAC1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingDataBlobPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for TrackingModuleIOPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingDataBlobPB?, (void (*)(uint64_t))type metadata accessor for TrackingDataBlobPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for TrackingModuleTestBundlePB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for TrackingModuleTestBundlePB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for TrackingModuleTestBundlePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for TrackingModuleTestBundlePB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for TrackingModuleTestBundlePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for TrackingModuleTestBundlePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingModuleTestBundlePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingModuleTestBundlePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB120(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TrackingModuleTestBundlePB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SequenceFrameDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

_QWORD *initializeWithCopy for SequenceFrameDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for SequenceFrameDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for SequenceFrameDataPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SequenceFrameDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceFrameDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SequenceFrameDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB48C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for SequenceFrameDataPB()
{
  return type metadata completion function for TrackingFAInternalDataPB();
}

uint64_t getEnumTagSinglePayload for TrackingSequenceTestDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TrackingSequenceTestDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB52C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TrackingSequenceTestDataPB()
{
  return type metadata completion function for TrackingFAInternalDataPB();
}

uint64_t getEnumTagSinglePayload for TrackingDataBlobPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingDataBlobPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7AB640(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void *__swift_memcpy266_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x10AuLL);
}

uint64_t getEnumTagSinglePayload for PinchRecoveryAnalyticsData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 266))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 1);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchRecoveryAnalyticsData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 264) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 266) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 266) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchRecoveryAnalyticsData()
{
  return &type metadata for PinchRecoveryAnalyticsData;
}

unint64_t lazy protocol witness table accessor for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB;
  if (!lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB)
  {
    v1 = type metadata accessor for PinchRecoveryAnalyticsDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB);
  }
  return result;
}

double PinchRecoveryAnalyticsData.init(protoBuf:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  CMTimeValue value;
  CMTimeEpoch epoch;
  CMTimeValue v25;
  uint64_t v26;
  CMTimeEpoch v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  CMTime v51;
  CMTime v52;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v9);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for CMTimeProtobuf(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)&v31 - v19;
  v21 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  outlined init with copy of CMTimeProtobuf?((uint64_t)a1 + *(int *)(v21 + 28), (uint64_t)v11);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v22(v11, 1, v12) == 1)
  {
    *(_QWORD *)v20 = 0;
    *((_DWORD *)v20 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of CMTimeProtobuf?((uint64_t)v11);
  }
  else
  {
    outlined init with take of CMTimeProtobuf((uint64_t)v11, (uint64_t)v20);
  }
  v51 = CMTime.init(value:timescale:)(*(_QWORD *)v20, *((_DWORD *)v20 + 2));
  value = v51.value;
  v31 = *(_QWORD *)&v51.timescale;
  epoch = v51.epoch;
  outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for CMTimeProtobuf);
  outlined init with copy of CMTimeProtobuf?((uint64_t)a1 + *(int *)(v21 + 32), (uint64_t)v8);
  if (v22(v8, 1, v12) == 1)
  {
    *(_QWORD *)v17 = 0;
    *((_DWORD *)v17 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of CMTimeProtobuf?((uint64_t)v8);
  }
  else
  {
    outlined init with take of CMTimeProtobuf((uint64_t)v8, (uint64_t)v17);
  }
  v52 = CMTime.init(value:timescale:)(*(_QWORD *)v17, *((_DWORD *)v17 + 2));
  v25 = v52.value;
  v26 = *(_QWORD *)&v52.timescale;
  v27 = v52.epoch;
  outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for CMTimeProtobuf);
  v28 = *a1;
  v29 = a1[1];
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v46 = 1;
  v45 = 1;
  v44 = 1;
  v43 = 1;
  v42 = 1;
  v41 = 1;
  v40 = 1;
  v39 = 1;
  v38 = 1;
  v37 = 1;
  v36 = 1;
  v35 = 1;
  v34 = 1;
  v33 = 1;
  v32 = 1;
  *(_WORD *)a2 = 523;
  *(_QWORD *)(a2 + 4) = value;
  *(_QWORD *)(a2 + 12) = v31;
  *(_QWORD *)(a2 + 20) = epoch;
  *(_BYTE *)(a2 + 28) = v50;
  *(_QWORD *)(a2 + 32) = v25;
  *(_QWORD *)(a2 + 40) = v26;
  *(_QWORD *)(a2 + 48) = v27;
  *(_BYTE *)(a2 + 56) = v49;
  *(_QWORD *)(a2 + 64) = v28;
  *(_BYTE *)(a2 + 72) = v48;
  *(_QWORD *)(a2 + 80) = v29;
  *(_BYTE *)(a2 + 88) = v47;
  *(_DWORD *)(a2 + 92) = 0;
  *(_BYTE *)(a2 + 96) = v46;
  *(_DWORD *)(a2 + 100) = 0;
  *(_BYTE *)(a2 + 104) = v45;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = v44;
  *(_DWORD *)(a2 + 124) = 0;
  *(_BYTE *)(a2 + 128) = v43;
  *(_DWORD *)(a2 + 132) = 0;
  *(_BYTE *)(a2 + 136) = v42;
  *(_DWORD *)(a2 + 140) = 0;
  *(_BYTE *)(a2 + 144) = v41;
  *(_DWORD *)(a2 + 148) = 0;
  *(_BYTE *)(a2 + 152) = v40;
  *(_DWORD *)(a2 + 156) = 0;
  *(_BYTE *)(a2 + 160) = v39;
  *(_BYTE *)(a2 + 161) = 3;
  result = 0.0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_BYTE *)(a2 + 216) = v38;
  *(_DWORD *)(a2 + 220) = 0;
  *(_BYTE *)(a2 + 224) = v37;
  *(_DWORD *)(a2 + 228) = 0;
  *(_BYTE *)(a2 + 232) = v36;
  *(_DWORD *)(a2 + 236) = 0;
  *(_BYTE *)(a2 + 240) = v35;
  *(_DWORD *)(a2 + 244) = 0;
  *(_BYTE *)(a2 + 248) = v34;
  *(_DWORD *)(a2 + 252) = 0;
  *(_BYTE *)(a2 + 256) = v33;
  *(_DWORD *)(a2 + 260) = 0;
  *(_BYTE *)(a2 + 264) = v32;
  *(_BYTE *)(a2 + 265) = 6;
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance PinchRecoveryAnalyticsData@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 88);
  v7 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v10)((char *)a1 + *(int *)(v7 + 32), 1, 1, v9);
  if ((v4 & 1) == 0)
    *a1 = v3;
  if ((v6 & 1) == 0)
    a1[1] = v5;
  return result;
}

uint64_t SpatialSceneState.HandFrame.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpatialSceneState.HandFrame.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id *SpatialSceneState.deinit()
{
  id *v0;

  swift_release();
  return v0;
}

uint64_t SpatialSceneState.__deallocating_deinit()
{
  id *v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SpatialSceneState()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpatialSceneState()
{
  return swift_lookUpClassMethod();
}

__n128 __swift_memcpy128_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialSceneState.Calibration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpatialSceneState.Calibration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpatialSceneState.Calibration()
{
  return &type metadata for SpatialSceneState.Calibration;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialSceneState.HeadPose(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpatialSceneState.HeadPose(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpatialSceneState.HeadPose()
{
  return &type metadata for SpatialSceneState.HeadPose;
}

uint64_t type metadata accessor for SpatialSceneState.HandFrame()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpatialSceneState.HandFrame()
{
  return swift_lookUpClassMethod();
}

void DetectionUtils.ImagePreprocessor.scaleAndPadLuma(srcPixelBuffer:dstWidth:dstHeight:)(__CVBuffer *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v3;
  int64_t Width;
  int64_t Height;
  __CVBuffer *v9;
  uint64_t v10;
  OpaqueVTPixelTransferSession *v11;
  float v12;
  float v13;
  int64_t v14;
  int64_t v15;
  const __CFString *v16;
  OpaqueVTPixelTransferSession *v17;
  CFDictionaryRef DictionaryRepresentation;
  const __CFString *v19;
  OpaqueVTPixelTransferSession *v20;
  CFDictionaryRef v21;
  CGRect v22;
  CGRect v23;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (!*(_QWORD *)(v3 + 16))
  {
    type metadata accessor for PixelBufferPoolManager();
    swift_allocObject();
    *(_QWORD *)(v3 + 16) = PixelBufferPoolManager.init(pixelFormat:)(1278226488);
    swift_release();
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_28;
  }
  swift_retain();
  v9 = PixelBufferPoolManager.getPixelBuffer(width:height:)(a2, a3);
  swift_release();
  if (!v10)
  {
    swift_retain();
    v11 = specialized PixelTransferSessionManager.getSession()();
    swift_release();
    if ((float)((float)Width / (float)Height) >= (float)((float)a2 / (float)a3))
    {
      if ((unsigned __int128)(a2 * (__int128)Height) >> 64 == (a2 * Height) >> 63)
      {
        v13 = (float)(a2 * Height) / (float)Width;
        if ((~LODWORD(v13) & 0x7F800000) != 0)
        {
          if (v13 > -9.2234e18)
          {
            if (v13 < 9.2234e18)
            {
              a3 = (uint64_t)v13;
LABEL_17:
              v14 = CVPixelBufferGetWidth(a1);
              v15 = CVPixelBufferGetHeight(a1);
              CVPixelBufferLockBaseAddress(a1, 1uLL);
              CVPixelBufferLockBaseAddress(v9, 0);
              v16 = (const __CFString *)*MEMORY[0x24BDF9688];
              if (*MEMORY[0x24BDF9688])
              {
                v17 = v11;
                v22.origin.x = 0.0;
                v22.origin.y = 0.0;
                v22.size.width = (double)v14;
                v22.size.height = (double)v15;
                DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v22);
                VTSessionSetProperty(v17, v16, DictionaryRepresentation);

                v19 = (const __CFString *)*MEMORY[0x24BDF9650];
                if (*MEMORY[0x24BDF9650])
                {
                  v20 = v17;
                  v23.origin.x = 0.0;
                  v23.origin.y = 0.0;
                  v23.size.width = (double)a2;
                  v23.size.height = (double)a3;
                  v21 = CGRectCreateDictionaryRepresentation(v23);
                  VTSessionSetProperty(v20, v19, v21);

                  VTPixelTransferSessionTransferImage(v20, a1, v9);
                  CVPixelBufferUnlockBaseAddress(v9, 0);
                  CVPixelBufferUnlockBaseAddress(a1, 1uLL);

                  return;
                }
                goto LABEL_30;
              }
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
              return;
            }
            goto LABEL_27;
          }
          goto LABEL_25;
        }
        goto LABEL_23;
      }
    }
    else
    {
      if ((unsigned __int128)(a3 * (__int128)Width) >> 64 == (a3 * Width) >> 63)
      {
        v12 = (float)(a3 * Width) / (float)Height;
        if ((~LODWORD(v12) & 0x7F800000) != 0)
        {
          if (v12 > -9.2234e18)
          {
            if (v12 < 9.2234e18)
            {
              a2 = (uint64_t)v12;
              goto LABEL_17;
            }
            goto LABEL_26;
          }
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
}

uint64_t DetectionUtils.ImagePreprocessor.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DetectionUtils.ImagePreprocessor()
{
  return objc_opt_self();
}

uint64_t PixelTransferSessionManager.__deallocating_deinit()
{
  uint64_t v0;
  void **v1;
  OpaqueVTPixelTransferSession *v2;
  void *v3;
  void *v4;

  v1 = (void **)(v0 + 16);
  swift_beginAccess();
  v2 = *(OpaqueVTPixelTransferSession **)(v0 + 16);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    v3 = *v1;
    *v1 = 0;

    v4 = *v1;
  }
  else
  {
    v4 = 0;
  }

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PixelTransferSessionManager()
{
  return objc_opt_self();
}

VTPixelTransferSessionRef specialized PixelTransferSessionManager.getSession()()
{
  uint64_t v0;
  VTPixelTransferSessionRef *v1;
  VTPixelTransferSessionRef result;
  const __CFAllocator *v3;
  _QWORD *v4;

  v1 = (VTPixelTransferSessionRef *)(v0 + 16);
  swift_beginAccess();
  result = *(VTPixelTransferSessionRef *)(v0 + 16);
  if (!result)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    swift_beginAccess();
    LODWORD(v3) = VTPixelTransferSessionCreate(v3, v1);
    swift_endAccess();
    result = *v1;
    if ((_DWORD)v3)
    {
      *v1 = 0;

      lazy protocol witness table accessor for type PixelTransferSessionManagerError and conformance PixelTransferSessionManagerError();
      swift_allocError();
      *v4 = 0xD000000000000027;
      v4[1] = 0x800000023D9CD080;
      return (VTPixelTransferSessionRef)swift_willThrow();
    }
    else if (!result)
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PixelTransferSessionManagerError and conformance PixelTransferSessionManagerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PixelTransferSessionManagerError and conformance PixelTransferSessionManagerError;
  if (!lazy protocol witness table cache variable for type PixelTransferSessionManagerError and conformance PixelTransferSessionManagerError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PixelTransferSessionManagerError, &type metadata for PixelTransferSessionManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PixelTransferSessionManagerError and conformance PixelTransferSessionManagerError);
  }
  return result;
}

ValueMetadata *type metadata accessor for PixelTransferSessionManagerError()
{
  return &type metadata for PixelTransferSessionManagerError;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SSDDetectionModelInputDefinition@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SSDDetectionModelInputDefinition, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SSDDetectionModelInputDefinition(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SSDDetectionModelInputDefinition;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SSDDetectionModelOutputDefinition(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance SSDDetectionModelOutputDefinition()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SSDDetectionModelOutputDefinition()
{
  __asm { BR              X10 }
}

uint64_t sub_23D7AC464()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SSDDetectionModelOutputDefinition(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SSDDetectionModelOutputDefinition@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SSDDetectionModelOutputDefinition.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SSDDetectionModelOutputDefinition()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D7AC544 + 4 * byte_23D9AFD04[*v0]))();
}

void sub_23D7AC544(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "nms_depth_uvo");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_23D7AC56C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "nms_keypoints");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_23D7AC594(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000023D9C3D50;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SSDDetectionModelOutputDefinition(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SSDDetectionModelOutputDefinition;
}

Swift::Bool __swiftcall SSDDetectionModelParams.hasDepthOutput()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain_n();
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t SSDDetectionModelParams.__allocating_init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  swift_allocObject();
  return SSDDetectionModelParams.init(modelName:modelPath:options:configJson:)(a1, a2, a3, a4, a5, a6);
}

uint64_t SSDDetectionModelParams.init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;
  char *v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::Int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  char *v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  char v49;
  void *v50;
  unint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  char v65;
  unint64_t v66;
  char v67;
  char v68;
  unint64_t v69;
  char v70;
  char v71;
  unint64_t v72;
  char v73;
  char v74;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v82[4];
  uint64_t v83;
  unint64_t v84;

  v7 = v6;
  v12 = a2;
  *(_DWORD *)(v6 + 208) = 1278226488;
  v82[0] = a1;
  v82[1] = a2;
  v83 = 0x776F6C6672617473;
  v84 = 0xE800000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  v13 = StringProtocol.contains<A>(_:)();
  v14 = 0xEC0000005F786F62;
  if ((v13 & 1) == 0)
    v14 = 0xE800000000000000;
  *(_QWORD *)(v6 + 216) = 0x5F7374657366666FLL;
  *(_QWORD *)(v6 + 224) = v14;
  if (*(_QWORD *)(a6 + 16)
    && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x737475706E69, 0xE600000000000000), (v16 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v15, (uint64_t)v82),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        (swift_dynamicCast() & 1) != 0))
  {
    v79 = v12;
    v17 = v83;
    v18 = *(_QWORD *)(v83 + 16);
    if (v18)
    {
      v77 = a4;
      v19 = a5;
      swift_bridgeObjectRetain();
      v20 = (void **)(v17 + 40);
      v21 = (char *)MEMORY[0x24BEE4AF8];
      do
      {
        v22 = (uint64_t)*(v20 - 1);
        v23 = *v20;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = v22;
        v24._object = v23;
        v25 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #4 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:), v24);
        swift_bridgeObjectRelease();
        if (!v25)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
          v27 = *((_QWORD *)v21 + 2);
          v26 = *((_QWORD *)v21 + 3);
          v28 = v27 + 1;
          if (v27 >= v26 >> 1)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v21);
          *((_QWORD *)v21 + 2) = v28;
        }
        v20 += 2;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease_n();
      a5 = v19;
      a4 = v77;
      v12 = v79;
    }
    else
    {
      swift_bridgeObjectRelease();
      v21 = (char *)MEMORY[0x24BEE4AF8];
      v12 = v79;
    }
  }
  else
  {
    v21 = (char *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v7 + 128) = v21;
  if (*(_QWORD *)(a6 + 16)
    && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x7374757074756FLL, 0xE700000000000000), (v30 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v29, (uint64_t)v82),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        (swift_dynamicCast() & 1) != 0))
  {
    v80 = v12;
    v31 = v83;
    v32 = *(_QWORD *)(v83 + 16);
    if (v32)
    {
      v78 = a4;
      v76 = a5;
      swift_bridgeObjectRetain();
      v33 = (void **)(v31 + 40);
      v34 = (char *)MEMORY[0x24BEE4AF8];
      do
      {
        v35 = (uint64_t)*(v33 - 1);
        v36 = *v33;
        swift_bridgeObjectRetain();
        v37._countAndFlagsBits = v35;
        v37._object = v36;
        v38 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #5 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:), v37);
        swift_bridgeObjectRelease();
        if (v38 <= 3)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
          v40 = *((_QWORD *)v34 + 2);
          v39 = *((_QWORD *)v34 + 3);
          if (v40 >= v39 >> 1)
            v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v34);
          *((_QWORD *)v34 + 2) = v40 + 1;
          v34[v40 + 32] = v38;
        }
        v33 += 2;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease_n();
      a5 = v76;
      a4 = v78;
      v12 = v80;
    }
    else
    {
      swift_bridgeObjectRelease();
      v34 = (char *)MEMORY[0x24BEE4AF8];
      v12 = v80;
    }
  }
  else
  {
    v34 = (char *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v7 + 136) = v34;
  if (*(_QWORD *)(a6 + 16)
    && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(0x5F73726F68636E61, 0xE900000000000078), (v42 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v41, (uint64_t)v82),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]),
        (swift_dynamicCast() & 1) != 0))
  {
    v43 = (void *)v83;
  }
  else
  {
    v43 = &outlined read-only object #0 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:);
  }
  *(_QWORD *)(v7 + 144) = v43;
  if (*(_QWORD *)(a6 + 16)
    && (v44 = specialized __RawDictionaryStorage.find<A>(_:)(0x5F73726F68636E61, 0xE900000000000079), (v45 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v44, (uint64_t)v82);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    v46 = a1;
    if ((swift_dynamicCast() & 1) != 0)
      v47 = (void *)v83;
    else
      v47 = &outlined read-only object #1 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:);
  }
  else
  {
    v47 = &outlined read-only object #1 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:);
    v46 = a1;
  }
  *(_QWORD *)(v7 + 152) = v47;
  if (*(_QWORD *)(a6 + 16)
    && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656C616373, 0xE600000000000000), (v49 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v48, (uint64_t)v82),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]),
        (swift_dynamicCast() & 1) != 0))
  {
    v50 = (void *)v83;
  }
  else
  {
    v50 = &outlined read-only object #2 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:);
  }
  *(_QWORD *)(v7 + 160) = v50;
  if (*(_QWORD *)(a6 + 16)
    && (v51 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656469727473, 0xE700000000000000), (v52 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v51, (uint64_t)v82),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]),
        (swift_dynamicCast() & 1) != 0))
  {
    v53 = (void *)v83;
  }
  else
  {
    v53 = &outlined read-only object #3 of SSDDetectionModelParams.init(modelName:modelPath:options:configJson:);
  }
  *(_QWORD *)(v7 + 168) = v53;
  v54 = 0x3FB999999999999ALL;
  v55 = 0x3FB999999999999ALL;
  if (*(_QWORD *)(a6 + 16))
  {
    v56 = specialized __RawDictionaryStorage.find<A>(_:)(0x666E6F635F6E696DLL, 0xEE0065636E656469);
    v55 = 0x3FB999999999999ALL;
    if ((v57 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v56, (uint64_t)v82);
      if (swift_dynamicCast())
        v55 = v83;
      else
        v55 = 0x3FB999999999999ALL;
    }
  }
  *(_QWORD *)(v7 + 176) = v55;
  if (*(_QWORD *)(a6 + 16))
  {
    v58 = specialized __RawDictionaryStorage.find<A>(_:)(0x657268745F736D6ELL, 0xED0000646C6F6873);
    if ((v59 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v58, (uint64_t)v82);
      if (swift_dynamicCast())
        v54 = v83;
    }
  }
  *(_QWORD *)(v7 + 184) = v54;
  v60 = 0x3FE999999999999ALL;
  if (*(_QWORD *)(a6 + 16))
  {
    v61 = specialized __RawDictionaryStorage.find<A>(_:)(0x65775F65726F6373, 0xEC00000074686769);
    if ((v62 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v61, (uint64_t)v82);
      if (swift_dynamicCast())
        v60 = v83;
    }
  }
  *(_QWORD *)(v7 + 192) = v60;
  *(_QWORD *)(v7 + 200) = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 16);
  if (*(_QWORD *)(a6 + 16)
    && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(0x736D6E5F6465656ELL, 0xE800000000000000), (v64 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v63, (uint64_t)v82), swift_dynamicCast()))
  {
    v65 = v83;
  }
  else
  {
    v65 = 1;
  }
  *(_BYTE *)(v7 + 232) = v65;
  if (*(_QWORD *)(a6 + 16)
    && (v66 = specialized __RawDictionaryStorage.find<A>(_:)(0x666F735F6465656ELL, 0xED000078616D5F74), (v67 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v66, (uint64_t)v82), swift_dynamicCast()))
  {
    v68 = v83;
  }
  else
  {
    v68 = 1;
  }
  *(_BYTE *)(v7 + 233) = v68;
  if (*(_QWORD *)(a6 + 16)
    && (v69 = specialized __RawDictionaryStorage.find<A>(_:)(0x6769735F6465656ELL, 0xEC00000064696F6DLL), (v70 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v69, (uint64_t)v82), swift_dynamicCast()))
  {
    v71 = v83;
  }
  else
  {
    v71 = 1;
  }
  *(_BYTE *)(v7 + 234) = v71;
  if (*(_QWORD *)(a6 + 16)
    && (v72 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x800000023D9CD190), (v73 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v72, (uint64_t)v82), swift_dynamicCast()))
  {
    v74 = v83;
  }
  else
  {
    v74 = 1;
  }
  *(_BYTE *)(v7 + 235) = v74;
  swift_release();
  return BaseDetectionModelParams.init(modelName:modelPath:options:configJson:)(v46, v12, a3, a4, a5, a6);
}

uint64_t SSDDetectionModelParams.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SSDDetectionModelParams.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SSDDetectionModelParams.__deallocating_deinit()
{
  SSDDetectionModelParams.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SSDDetectionModelParams()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for SSDDetectionModelOutputDefinition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D7AD218 + 4 * byte_23D9AFD11[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D7AD24C + 4 * byte_23D9AFD0C[v4]))();
}

uint64_t sub_23D7AD24C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7AD254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7AD25CLL);
  return result;
}

uint64_t sub_23D7AD268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7AD270);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D7AD274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7AD27C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SSDDetectionModelOutputDefinition()
{
  return &type metadata for SSDDetectionModelOutputDefinition;
}

uint64_t storeEnumTagSinglePayload for SSDDetectionModelInputDefinition(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23D7AD2D8 + 4 * byte_23D9AFD16[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23D7AD2F8 + 4 * byte_23D9AFD1B[v4]))();
}

_BYTE *sub_23D7AD2D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23D7AD2F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D7AD300(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D7AD308(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D7AD310(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D7AD318(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SSDDetectionModelInputDefinition()
{
  return &type metadata for SSDDetectionModelInputDefinition;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SSDDetectionModelInputDefinition()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [SSDDetectionModelInputDefinition] and conformance [A], &demangling cache variable for type metadata for [SSDDetectionModelInputDefinition]);
}

unint64_t lazy protocol witness table accessor for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelInputDefinition, &type metadata for SSDDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelInputDefinition, &type metadata for SSDDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelInputDefinition, &type metadata for SSDDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelInputDefinition and conformance SSDDetectionModelInputDefinition);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SSDDetectionModelOutputDefinition()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [SSDDetectionModelOutputDefinition] and conformance [A], &demangling cache variable for type metadata for [SSDDetectionModelOutputDefinition]);
}

unint64_t lazy protocol witness table accessor for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelOutputDefinition, &type metadata for SSDDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelOutputDefinition, &type metadata for SSDDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelOutputDefinition, &type metadata for SSDDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelOutputDefinition and conformance SSDDetectionModelOutputDefinition);
  }
  return result;
}

unint64_t specialized SSDDetectionModelOutputDefinition.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SSDDetectionModelOutputDefinition.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t ImageToGreyConverter.luminanceFromCbCr(image:)(__CVBuffer *a1)
{
  uint64_t v1;
  size_t Width;
  size_t Height;
  __CVBuffer *v5;
  uint64_t v6;
  void *BaseAddressOfPlane;
  const void *v8;
  void *BaseAddress;
  void *v10;
  size_t DataSize;
  Swift::String v12;
  uint64_t v13;
  char v14;
  Swift::String v15;
  uint64_t result;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (!*(_QWORD *)(v1 + 16))
  {
    type metadata accessor for PixelBufferPoolManager();
    swift_allocObject();
    *(_QWORD *)(v1 + 16) = PixelBufferPoolManager.init(pixelFormat:)(1278226488);
    swift_release();
    if (!*(_QWORD *)(v1 + 16))
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  swift_retain();
  v5 = PixelBufferPoolManager.getPixelBuffer(width:height:)(Width, Height);
  swift_release();
  if (v6)
    return (uint64_t)v5;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(v5, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (!BaseAddressOfPlane)
  {
    _StringGuts.grow(_:)(42);
    v12._countAndFlagsBits = 0xD000000000000028;
    v12._object = (void *)0x800000023D9CD1E0;
    String.append(_:)(v12);
    type metadata accessor for CVBufferRef(0);
    _print_unlocked<A, B>(_:_:)();
    lazy protocol witness table accessor for type ImageToGreyConverterError and conformance ImageToGreyConverterError();
    swift_allocError();
    v14 = 0;
    *(_QWORD *)v13 = 0;
LABEL_10:
    *(_QWORD *)(v13 + 8) = 0xE000000000000000;
    *(_BYTE *)(v13 + 16) = v14;
    swift_willThrow();
    CVPixelBufferUnlockBaseAddress(v5, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);

    return (uint64_t)v5;
  }
  v8 = BaseAddressOfPlane;
  BaseAddress = CVPixelBufferGetBaseAddress(v5);
  if (!BaseAddress)
  {
    _StringGuts.grow(_:)(33);
    v15._object = (void *)0x800000023D9CD210;
    v15._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v15);
    type metadata accessor for CVBufferRef(0);
    _print_unlocked<A, B>(_:_:)();
    lazy protocol witness table accessor for type ImageToGreyConverterError and conformance ImageToGreyConverterError();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    v14 = 2;
    goto LABEL_10;
  }
  v10 = BaseAddress;
  DataSize = CVPixelBufferGetDataSize(v5);
  if ((DataSize & 0x8000000000000000) == 0)
  {
    memmove(v10, v8, DataSize);
    CVPixelBufferUnlockBaseAddress(v5, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return (uint64_t)v5;
  }
LABEL_13:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ImageToGreyConverter.luminanceFromColor(image:)(__CVBuffer *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *Width;
  size_t Height;
  VTPixelTransferSessionRef v6;
  OpaqueVTPixelTransferSession *v7;
  uint64_t result;
  CVBufferRef v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  Width = (void *)CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (!*(_QWORD *)(v1 + 16))
  {
    type metadata accessor for PixelBufferPoolManager();
    swift_allocObject();
    *(_QWORD *)(v1 + 16) = PixelBufferPoolManager.init(pixelFormat:)(1278226488);
    swift_release();
  }
  swift_retain();
  v6 = specialized PixelTransferSessionManager.getSession()();
  if (v2)
    goto LABEL_7;
  v7 = v6;
  result = swift_release();
  if (*(_QWORD *)(v1 + 16))
  {
    swift_retain();
    v9 = PixelBufferPoolManager.getPixelBuffer(width:height:)((Swift::Int)Width, Height);
    if (!v10)
    {
      Width = v9;
      swift_release();
      if (VTPixelTransferSessionTransferImage(v7, a1, (CVPixelBufferRef)Width))
      {
        _StringGuts.grow(_:)(33);
        v11._object = (void *)0x800000023D9CD230;
        v11._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v11);
        type metadata accessor for CVBufferRef(0);
        _print_unlocked<A, B>(_:_:)();
        v12._countAndFlagsBits = 0x79657267206F7420;
        v12._object = (void *)0xED0000656C616373;
        String.append(_:)(v12);
        lazy protocol witness table accessor for type ImageToGreyConverterError and conformance ImageToGreyConverterError();
        swift_allocError();
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0xE000000000000000;
        *(_BYTE *)(v13 + 16) = 1;
        swift_willThrow();

      }
      else
      {

      }
      return (uint64_t)Width;
    }

LABEL_7:
    swift_release();
    return (uint64_t)Width;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ImageToGreyConverter()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ImageToGreyConverterError and conformance ImageToGreyConverterError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageToGreyConverterError and conformance ImageToGreyConverterError;
  if (!lazy protocol witness table cache variable for type ImageToGreyConverterError and conformance ImageToGreyConverterError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ImageToGreyConverterError, &type metadata for ImageToGreyConverterError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageToGreyConverterError and conformance ImageToGreyConverterError);
  }
  return result;
}

uint64_t outlined copy of ImageToGreyConverterError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for ImageToGreyConverterError(uint64_t a1)
{
  return outlined consume of ImageToGreyConverterError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of ImageToGreyConverterError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ImageToGreyConverterError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ImageToGreyConverterError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageToGreyConverterError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ImageToGreyConverterError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ImageToGreyConverterError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ImageToGreyConverterError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ImageToGreyConverterError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageToGreyConverterError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageToGreyConverterError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ImageToGreyConverterError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ImageToGreyConverterError()
{
  return &type metadata for ImageToGreyConverterError;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_s5Int32V_AF10Matrix2dPBVts5NeverOTg5055_s5Hands18TrackingUpdateDataV10toProtoBufAA0bcD2PBVyFs5h6V_AA08i8H0VtAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v62 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  v3 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62, v4);
  v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int32, Matrix2dPB));
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v60 = (_DWORD *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v45 = v1;
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v12 = v64;
    result = specialized Dictionary.startIndex.getter(a1);
    v15 = 0;
    v16 = a1 + 64;
    v17 = *(_BYTE *)(a1 + 32);
    v52 = a1 + 80;
    v61 = xmmword_23D9A7050;
    v46 = a1;
    v47 = v10;
    v48 = v14;
    v49 = a1 + 64;
    while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << v17)
    {
      if ((*(_QWORD *)(v16 + 8 * (result >> 6)) & (1 << result)) == 0)
        goto LABEL_44;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
        goto LABEL_45;
      v20 = *(_QWORD *)(a1 + 48) + 16 * result;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * result);
      if ((*(_BYTE *)(v20 + 8) & 1) == 0)
      {
        if (v21 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_46;
        if (v21 > 0x7FFFFFFF)
          goto LABEL_47;
      }
      v55 = 1 << result;
      v56 = result >> 6;
      v58 = result;
      v59 = v12;
      v54 = v15;
      *v60 = v21;
      v23 = *(_QWORD *)(v22 + 16);
      v57 = v22;
      if (v23)
      {
        v24 = v11;
        v25 = (uint64_t *)(v22 + 32);
        swift_bridgeObjectRetain();
        do
        {
          v26 = *v25;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = v61;
          *(_QWORD *)(v27 + 32) = v26;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          v29 = v24[2];
          v28 = v24[3];
          if (v29 >= v28 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v24);
          v24[2] = v29 + 1;
          v24[v29 + 4] = v27;
          ++v25;
          --v23;
        }
        while (v23);
      }
      else
      {
        swift_bridgeObjectRetain();
        v24 = v11;
      }
      v30 = (char *)v60 + *(int *)(v51 + 48);
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      *(_QWORD *)v30 = MEMORY[0x24BEE4AF8];
      type metadata accessor for Matrix2dPB(0);
      UnknownStorage.init()();
      v30[8] = 1;
      v31 = v24[2];
      if (v31)
      {
        v53 = v30;
        v63 = v11;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
        v32 = 0;
        v33 = v63;
        do
        {
          v34 = v24[v32 + 4];
          swift_bridgeObjectRetain();
          UnknownStorage.init()();
          *v6 = v34;
          v63 = v33;
          v36 = v33[2];
          v35 = v33[3];
          if (v36 >= v35 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v33 = v63;
          }
          ++v32;
          v33[2] = v36 + 1;
          outlined init with take of Matrix2dPB((uint64_t)v6, (uint64_t)v33+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v36, type metadata accessor for Matrix2dPB.FloatVectorPB);
        }
        while (v31 != v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        a1 = v46;
        v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v30 = v53;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = v11;
      }
      *((_QWORD *)v30 + 2) = v33;
      v12 = v59;
      v64 = v59;
      v38 = *(_QWORD *)(v59 + 16);
      v37 = *(_QWORD *)(v59 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v12 = v64;
      }
      *(_QWORD *)(v12 + 16) = v38 + 1;
      result = outlined init with take of (Int32, Matrix2dPB)((uint64_t)v60, v12+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v38);
      v17 = *(_BYTE *)(a1 + 32);
      v18 = 1 << v17;
      if (v58 >= 1 << v17)
        goto LABEL_48;
      v16 = v49;
      v39 = v56;
      v40 = *(_QWORD *)(v49 + 8 * v56);
      if ((v40 & v55) == 0)
        goto LABEL_49;
      LODWORD(v14) = v48;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v48)
        goto LABEL_50;
      v41 = v40 & (-2 << (v58 & 0x3F));
      if (v41)
      {
        v18 = __clz(__rbit64(v41)) | v58 & 0xFFFFFFFFFFFFFFC0;
        v19 = v47;
      }
      else
      {
        v42 = v56 + 1;
        v43 = (v18 + 63) >> 6;
        v19 = v47;
        if (v56 + 1 < v43)
        {
          v44 = *(_QWORD *)(v49 + 8 * v42);
          if (v44)
          {
LABEL_39:
            v18 = __clz(__rbit64(v44)) + (v42 << 6);
          }
          else
          {
            while (v43 - 2 != v39)
            {
              v44 = *(_QWORD *)(v52 + 8 * v39++);
              if (v44)
              {
                v42 = v39 + 1;
                goto LABEL_39;
              }
            }
          }
        }
      }
      v15 = v54 + 1;
      result = v18;
      if (v54 + 1 == v19)
        return v12;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t TrackingUpdateData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int8x8_t v8;
  char v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int8x8_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v3 = type metadata accessor for Coordinate3DPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int8x8_t *)(v1 + 16);
  v28 = *(int8x8_t *)(v1 + 24);
  v9 = *(_BYTE *)(v1 + 32);
  v10 = *(unsigned __int8 *)(v1 + 33);
  v11 = *(_DWORD *)(v1 + 36);
  v31 = *(unsigned __int8 *)(v1 + 40);
  v32 = v10;
  LODWORD(v6) = *(unsigned __int8 *)(v1 + 48);
  v29 = *(_DWORD *)(v1 + 44);
  v30 = v6;
  v12 = *(unsigned __int8 *)(v1 + 64);
  v34 = *(unsigned __int8 *)(v1 + 65);
  v35 = v12;
  v33 = *(unsigned __int8 *)(v1 + 66);
  v13 = *(_QWORD *)(v1 + 68);
  v36 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v14;
  updated = type metadata accessor for TrackingUpdateDataPB(0);
  UnknownStorage.init()();
  v16 = a1 + *(int *)(updated + 68);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v17(v16, 1, 1, v3);
  v18 = a1 + *(int *)(updated + 72);
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  if ((v9 & 1) == 0)
  {
    v19 = v28;
    UnknownStorage.init()();
    *(_DWORD *)v7 = v8.i32[0];
    *(int8x8_t *)(v7 + 4) = vext_s8(v8, v19, 4uLL);
    outlined destroy of Coordinate3DPB?(v16);
    outlined init with take of Matrix2dPB((uint64_t)v7, v16, type metadata accessor for Coordinate3DPB);
    v17(v16, 0, 1, v3);
  }
  *(_BYTE *)(a1 + 33) = v32;
  *(_DWORD *)a1 = v11;
  *(_BYTE *)(a1 + 8) = v31;
  if ((v30 & 1) == 0)
  {
    *(_DWORD *)v18 = v29;
    *(_BYTE *)(v18 + 4) = 0;
  }
  v20 = swift_bridgeObjectRetain();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_s5Int32V_AF10Matrix2dPBVts5NeverOTg5055_s5Hands18TrackingUpdateDataV10toProtoBufAA0bcD2PBVyFs5h6V_AA08i8H0VtAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(v20);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v21 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Matrix2dPB>);
    v22 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v22 = MEMORY[0x24BEE4B00];
  }
  v37 = v22;
  v23 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v23, 1, &v37);
  swift_bridgeObjectRelease();
  v24 = v37;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v24;
  *(_BYTE *)(a1 + 32) = v35;
  *(_BYTE *)(a1 + 34) = v34;
  *(_BYTE *)(a1 + 35) = v33;
  *(_QWORD *)(a1 + 36) = v13;
  v25 = v36;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v25;
  return result;
}

uint64_t specialized static TrackingUpdateData.== infix(_:_:)(float *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  float32x2_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  float32x2_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t *v44;
  uint64_t v45;
  float32x2_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int64_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  result = 0;
  if (vabds_f32(a1[9], *(float *)(a2 + 36)) > 0.00000011921
    || ((*((unsigned __int8 *)a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) != 0)
  {
    return result;
  }
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 7);
  v8 = *((unsigned __int8 *)a1 + 64);
  v9 = *((unsigned __int8 *)a1 + 65);
  v10 = *((unsigned __int8 *)a1 + 66);
  v12 = a1[17];
  v11 = a1[18];
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = *(unsigned __int8 *)(a2 + 64);
  v19 = *(unsigned __int8 *)(a2 + 65);
  v20 = *(unsigned __int8 *)(a2 + 66);
  v22 = *(float *)(a2 + 68);
  v21 = *(float *)(a2 + 72);
  if (((_BYTE)a1[12] & 1) != 0)
  {
    result = 0;
    if (!*(_BYTE *)(a2 + 48))
      return result;
  }
  else
  {
    result = 0;
    if ((*(_BYTE *)(a2 + 48) & 1) != 0 || vabds_f32(a1[11], *(float *)(a2 + 44)) > 0.00000001)
      return result;
  }
  if (((*((unsigned __int8 *)a1 + 33) ^ *(unsigned __int8 *)(a2 + 33)) & 1) != 0)
    return result;
  if (((_BYTE)a1[8] & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      return 0;
    v55 = *(_QWORD *)a1;
    v56 = v4;
    v57 = v5;
    v58 = v6;
    v52.i64[0] = v13;
    v52.i64[1] = v14;
    v53 = v15;
    v54 = v16;
    if (!Coordinate3D.almostEqual(to:withThreshold:)(&v52, 0.00001))
      return 0;
  }
  if (*(_QWORD *)(v7 + 16) != *(_QWORD *)(v17 + 16))
    return 0;
  v47 = v20;
  v48 = v9;
  v49 = v10;
  v50 = v7 + 64;
  v23 = 1 << *(_BYTE *)(v7 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v7 + 64);
  v51 = (unint64_t)(v23 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v28 = v27 | (v26 << 6);
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_46;
      goto LABEL_36;
    }
    v29 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      return result;
    }
    if (v29 >= v51)
      goto LABEL_49;
    v30 = *(_QWORD *)(v50 + 8 * v29);
    ++v26;
    if (!v30)
    {
      v26 = v29 + 1;
      if (v29 + 1 >= v51)
        goto LABEL_49;
      v30 = *(_QWORD *)(v50 + 8 * v26);
      if (!v30)
      {
        v26 = v29 + 2;
        if (v29 + 2 >= v51)
          goto LABEL_49;
        v30 = *(_QWORD *)(v50 + 8 * v26);
        if (!v30)
          break;
      }
    }
LABEL_35:
    v25 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_46;
LABEL_36:
    v32 = *(float32x2_t **)(*(_QWORD *)(v7 + 56) + 8 * v28);
    v33 = *(_QWORD *)(v7 + 48) + 16 * v28;
    v34 = *(_BYTE *)(v33 + 8);
    v35 = *(_QWORD *)v33;
    swift_bridgeObjectRetain();
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_46:
      swift_release();
      return 0;
    }
    v38 = v32[2];
    if (v38)
    {
      v39 = *(float32x2_t **)(*(_QWORD *)(v17 + 56) + 8 * v36);
      v40 = v39[2];
      if (v40)
      {
        v41 = vsub_f32(v32[4], v39[4]);
        if (sqrtf(vaddv_f32(vmul_f32(v41, v41))) >= 0.0000001)
        {
LABEL_44:
          swift_release();
          swift_bridgeObjectRelease();
          return 0;
        }
        v42 = 0;
        v43 = *(_QWORD *)&v40 - 1;
        v44 = v39 + 5;
        v45 = *(_QWORD *)&v38 - 1;
        while (v45 != v42 && v43 != v42)
        {
          v46 = vsub_f32(v32[v42 + 5], v44[v42]);
          ++v42;
          if (sqrtf(vaddv_f32(vmul_f32(v46, v46))) >= 0.0000001)
            goto LABEL_44;
        }
      }
    }
    result = swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v51)
  {
    v30 = *(_QWORD *)(v50 + 8 * v31);
    if (!v30)
    {
      while (1)
      {
        v26 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_55;
        if (v26 >= v51)
          goto LABEL_49;
        v30 = *(_QWORD *)(v50 + 8 * v26);
        ++v31;
        if (v30)
          goto LABEL_35;
      }
    }
    v26 = v31;
    goto LABEL_35;
  }
LABEL_49:
  swift_release();
  result = 0;
  if (v8 == v18 && ((v48 ^ v19) & 1) == 0 && ((v49 ^ v47) & 1) == 0 && (float)(v12 - v22) <= 0.00001)
    return (float)(v11 - v21) <= 0.00001;
  return result;
}

uint64_t outlined init with copy of (Int32, Matrix2dPB)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int32, Matrix2dPB));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Matrix2dPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of (Int32, Matrix2dPB)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int32, Matrix2dPB));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for TrackingUpdateData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingUpdateData(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingUpdateData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = *((_DWORD *)a2 + 11);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_DWORD *)(a1 + 44) = v6;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  *(_BYTE *)(a1 + 66) = *((_BYTE *)a2 + 66);
  *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for TrackingUpdateData(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingUpdateData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingUpdateData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingUpdateData()
{
  return &type metadata for TrackingUpdateData;
}

unint64_t lazy protocol witness table accessor for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB()
{
  unint64_t result;
  uint64_t updated;

  result = lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB;
  if (!lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB)
  {
    updated = type metadata accessor for TrackingUpdateDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingUpdateDataPB, updated);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB);
  }
  return result;
}

uint64_t destroy for CameraPairTransition(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CameraPairTransition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_QWORD *)(a2 + 144);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v8;
    *(_QWORD *)(a1 + 152) = v9;
    v10 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v10;
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    v12 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v12;
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v13;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v14 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v14;
    v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
  }
  v16 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v16;
  return a1;
}

uint64_t assignWithCopy for CameraPairTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v5 = (__int128 *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 144);
  v6 = (_OWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 144) = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_BYTE *)(a1 + 256) = *((_BYTE *)v5 + 112);
      *(_BYTE *)(a1 + 257) = *((_BYTE *)v5 + 113);
      *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    }
    else
    {
      outlined destroy of HandPose(a1 + 144);
      v11 = v5[3];
      v13 = *v5;
      v12 = v5[1];
      *(_OWORD *)(a1 + 176) = v5[2];
      *(_OWORD *)(a1 + 192) = v11;
      *v6 = v13;
      *(_OWORD *)(a1 + 160) = v12;
      v15 = v5[5];
      v14 = v5[6];
      v16 = v5[4];
      *(_QWORD *)(a1 + 256) = *((_QWORD *)v5 + 14);
      *(_OWORD *)(a1 + 224) = v15;
      *(_OWORD *)(a1 + 240) = v14;
      *(_OWORD *)(a1 + 208) = v16;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v7;
    v8 = *(_OWORD *)(a2 + 192);
    v9 = *(_OWORD *)(a2 + 208);
    v10 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v10;
    *(_OWORD *)(a1 + 192) = v8;
    *(_OWORD *)(a1 + 208) = v9;
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v5;
    v18 = *(_OWORD *)(a2 + 160);
    v19 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v19;
    *v6 = v17;
    *(_OWORD *)(a1 + 160) = v18;
    v20 = *(_OWORD *)(a2 + 208);
    v21 = *(_OWORD *)(a2 + 224);
    v22 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v21;
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 208) = v20;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

void *__swift_memcpy280_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for CameraPairTransition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = a1 + 144;
  v10 = a2 + 144;
  v9 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(a1 + 144))
    goto LABEL_5;
  if (!v9)
  {
    outlined destroy of HandPose(v8);
LABEL_5:
    v15 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v8 + 80) = v15;
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v10 + 96);
    *(_QWORD *)(v8 + 112) = *(_QWORD *)(v10 + 112);
    v16 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v10;
    *(_OWORD *)(v8 + 16) = v16;
    v17 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v8 + 48) = v17;
    goto LABEL_6;
  }
  v11 = (_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 144) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  v14 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v14;
  *(_BYTE *)(a1 + 256) = *v11;
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
LABEL_6:
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraPairTransition(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 280))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 144);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraPairTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 0;
    if (a2)
      *(_QWORD *)(result + 144) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPairTransition()
{
  return &type metadata for CameraPairTransition;
}

uint64_t CameraPairTransition.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  float *v35;
  int *v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53[4];
  int v54;
  __int128 v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  simd_float4x4_optional v59;
  _OWORD v60[4];
  char v61;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52.i64[0] = type metadata accessor for Matrix2dPB(0);
  v8 = *(_QWORD *)(v52.i64[0] - 8);
  MEMORY[0x24BDAC7A8](v52.i64[0], v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v14 = MEMORY[0x24BDAC7A8](v12, v13);
  v50.i64[0] = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v45 - v17;
  v19 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v49.i64[0] = (uint64_t)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v26 = (char *)&v45 - v25;
  v27 = *(int *)(type metadata accessor for CameraPairTransitionPB(0) + 28);
  v51.i64[0] = a1;
  *(_QWORD *)&v48 = a1 + v27;
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v27, (uint64_t)v18, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v28(v18, 1, v19) == 1)
  {
    *(_DWORD *)v26 = 0;
    UnknownStorage.init()();
    v29 = v52.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(&v26[*(int *)(v19 + 24)], 1, 1, v52.i64[0]);
    outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    v30 = v29;
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v18, (uint64_t)v26, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
    v30 = v52.i64[0];
  }
  v31 = v8;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v26[*(int *)(v19 + 24)], (uint64_t)v7, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v30) == 1)
  {
    v32 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)v11 = MEMORY[0x24BEE4AF8];
    v11[8] = 0;
    *((_QWORD *)v11 + 2) = v32;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v7, (uint64_t)v11, type metadata accessor for Matrix2dPB);
  }
  outlined destroy of Matrix3x3PB((uint64_t)v26, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  specialized Matrix2d.init(protoBuf:)(v11);
  Matrix2d.toSimd4x4Float()(&v59);
  swift_bridgeObjectRelease();
  result = outlined init with take of simd_float4x4?((uint64_t)&v59, (uint64_t)v60);
  if ((v61 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v52 = (float32x4_t)v60[0];
    v46 = (float32x4_t)v60[2];
    v47 = (float32x4_t)v60[1];
    v45 = (float32x4_t)v60[3];
    v34 = v50.i64[0];
    outlined init with copy of (Int32, Matrix2dPB)(v48, v50.i64[0], &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    if (v28((char *)v34, 1, v19) == 1)
    {
      v35 = (float *)v49.i64[0];
      *(_DWORD *)v49.i64[0] = 0;
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))((char *)v35 + *(int *)(v19 + 24), 1, 1, v30);
      outlined destroy of Coordinate3DPB?(v34, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    }
    else
    {
      v35 = (float *)v49.i64[0];
      outlined init with take of Matrix2dPB(v34, v49.i64[0], type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
    }
    v36 = (int *)v51.i64[0];
    v37 = *v35;
    outlined destroy of Matrix3x3PB((uint64_t)v35, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
    specialized static CameraPairTransition.scaleTransform(_:)(v53, v52, v47, v46, v45, v37);
    v51 = v53[1];
    v52 = v53[0];
    v49 = v53[3];
    v50 = v53[2];
    v38 = v54;
    v47 = v56;
    v48 = v55;
    v45 = v58;
    v46 = v57;
    v39 = *v36;
    v40 = v36[1];
    result = outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for CameraPairTransitionPB);
    v41 = v51;
    *(float32x4_t *)a2 = v52;
    *(float32x4_t *)(a2 + 16) = v41;
    v42 = v49;
    *(float32x4_t *)(a2 + 32) = v50;
    *(float32x4_t *)(a2 + 48) = v42;
    *(_DWORD *)(a2 + 64) = v38;
    v43 = v47;
    *(_OWORD *)(a2 + 80) = v48;
    *(float32x4_t *)(a2 + 96) = v43;
    v44 = v45;
    *(float32x4_t *)(a2 + 112) = v46;
    *(float32x4_t *)(a2 + 128) = v44;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = v39;
    *(_QWORD *)(a2 + 272) = v40;
  }
  return result;
}

uint64_t CameraPairTransition.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int32x4_t v26;
  int8x16_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t result;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v57 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v53 = (char *)&v47 - v8;
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v16);
  v55 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v47 - v20;
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (_DWORD *)((char *)&v47 - v24);
  v26 = *(int32x4_t *)v1;
  v51 = *(int32x4_t *)(v1 + 16);
  v52 = v26;
  v27 = *(int8x16_t *)(v1 + 32);
  v49 = *(int32x4_t *)(v1 + 48);
  v50 = v27;
  v28 = *(_DWORD *)(v1 + 64);
  v56 = *(_QWORD *)(v1 + 264);
  v47 = *(_QWORD *)(v1 + 272);
  *a1 = 0;
  v29 = type metadata accessor for CameraPairTransitionPB(0);
  UnknownStorage.init()();
  v30 = *(int *)(v29 + 28);
  v48 = a1;
  v31 = (uint64_t)a1 + v30;
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v32(v31, 1, 1, v14);
  *v25 = 0;
  UnknownStorage.init()();
  v33 = (char *)v25 + *(int *)(v14 + 24);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v54 = v9;
  v34(v33, 1, 1, v9);
  outlined destroy of Coordinate3DPB?(v31, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v35 = (uint64_t)v25;
  v36 = (uint64_t)v13;
  outlined init with take of Matrix2dPB(v35, v31, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  v32(v31, 0, 1, v14);
  v37 = specialized Matrix2d.init(simd4x4float:)(v52, v51, v50, v49);
  Matrix2d.toProtoBuf()(v37, v38 & 1, (uint64_t)v13);
  v39 = (uint64_t)v53;
  swift_bridgeObjectRelease();
  outlined init with copy of (Int32, Matrix2dPB)(v31, v39, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v40(v39, 1, v14) == 1)
  {
    *(_DWORD *)v21 = 0;
    UnknownStorage.init()();
    v41 = v54;
    v34(&v21[*(int *)(v14 + 24)], 1, 1, v54);
    outlined destroy of Coordinate3DPB?(v39, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v39, (uint64_t)v21, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
    v41 = v54;
  }
  v42 = (uint64_t)&v21[*(int *)(v14 + 24)];
  outlined destroy of Coordinate3DPB?(v42, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB(v36, v42, type metadata accessor for Matrix2dPB);
  v34((char *)v42, 0, 1, v41);
  outlined destroy of Coordinate3DPB?(v31, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  outlined init with take of Matrix2dPB((uint64_t)v21, v31, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  v32(v31, 0, 1, v14);
  v43 = v57;
  outlined init with copy of (Int32, Matrix2dPB)(v31, v57, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  if (v40(v43, 1, v14) == 1)
  {
    v44 = v55;
    *(_DWORD *)v55 = 0;
    UnknownStorage.init()();
    v34(&v44[*(int *)(v14 + 24)], 1, 1, v41);
    outlined destroy of Coordinate3DPB?(v43, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  }
  else
  {
    v44 = v55;
    outlined init with take of Matrix2dPB(v43, (uint64_t)v55, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  }
  *(_DWORD *)v44 = v28;
  outlined destroy of Coordinate3DPB?(v31, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  outlined init with take of Matrix2dPB((uint64_t)v44, v31, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v32)(v31, 0, 1, v14);
  if (v56 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v56 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v46 = v48;
  *v48 = v56;
  if (v47 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v47 <= 0x7FFFFFFF)
  {
    v46[1] = v47;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

float32x4_t CameraPairTransition.getCurrentTransformation()(double a1, double a2, double a3, double a4, double a5, double a6, __n128 a7)
{
  uint64_t v7;
  float32x4_t result;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  simd_quatf v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  simd_quatf v22;
  simd_float4x4 v23;

  result = *(float32x4_t *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 264);
  if (v9 >= 1)
  {
    v10 = *(_QWORD *)(v7 + 272);
    if (v10 < v9)
    {
      if (!v10)
        return *(float32x4_t *)MEMORY[0x24BDAEE00];
      v23 = *(simd_float4x4 *)v7;
      a7.n128_f32[0] = (float)v10 / (float)v9;
      v22 = (simd_quatf)a7;
      v20 = (float32x4_t)v23.columns[3];
      v21 = (float)(*(float *)(v7 + 64) * a7.n128_f32[0]) + (float)(1.0 - a7.n128_f32[0]);
      *(double *)v11.i64 = simd_quaternion(*(simd_float4x4 *)v7);
      v12 = v22;
      simd_slerp(v11, v12, v13);
      *(double *)v14.i64 = MEMORY[0x2426376C0]();
      result = vmulq_n_f32(v14, v21);
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(result), (int8x16_t)vcgezq_f32(result)))) & 0x80000000) != 0)
        return *(float32x4_t *)MEMORY[0x24BDAEE00];
      v17 = vmulq_n_f32(v15, v21);
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v17), (int8x16_t)vcgezq_f32(v17)))) & 0x80000000) != 0)
        return *(float32x4_t *)MEMORY[0x24BDAEE00];
      v18 = vmulq_n_f32(v16, v21);
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v18), (int8x16_t)vcgezq_f32(v18)))) & 0x80000000) != 0)
        return *(float32x4_t *)MEMORY[0x24BDAEE00];
      *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v20.f32, v22.vector.f32[0]);
      v19.i64[1] = __PAIR64__(1.0, COERCE_UNSIGNED_INT(vmuls_lane_f32(v22.vector.f32[0], v20, 2)));
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v19), (int8x16_t)vcgezq_f32(v19)))) & 0x80000000) != 0)
        return *(float32x4_t *)MEMORY[0x24BDAEE00];
    }
  }
  return result;
}

uint64_t specialized static CameraPairTransition.determineState(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v34;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v34 - v10;
  outlined init with copy of (Int32, Matrix2dPB)(a1, (uint64_t)&v34 - v10, &demangling cache variable for type metadata for HandDescriptor?);
  v12 = type metadata accessor for HandDescriptor();
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  if (v13(v11, 1, v12) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for HandDescriptor?);
    return 0;
  }
  v14 = *((_QWORD *)v11 + 25);
  outlined copy of HandPose?(v14);
  outlined destroy of Matrix3x3PB((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (!v14)
    return 0;
  v15 = swift_bridgeObjectRetain();
  outlined consume of HandPose?(v15);
  outlined init with copy of (Int32, Matrix2dPB)(a2, (uint64_t)v7, &demangling cache variable for type metadata for HandDescriptor?);
  if (v13(v7, 1, v12) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for HandDescriptor?);
    return 0;
  }
  v16 = *((_QWORD *)v7 + 25);
  outlined copy of HandPose?(v16);
  outlined destroy of Matrix3x3PB((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (!v16)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = swift_bridgeObjectRetain();
  outlined consume of HandPose?(v17);
  if (*(_QWORD *)(v14 + 16) != 2 || *(_QWORD *)(v16 + 16) != 2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v18 = *(_QWORD *)(v16 + 32);
  v19 = v18 < 0x40;
  v20 = 1;
  v21 = 1 << v18;
  if (((*(_BYTE *)(v16 + 40) | v19) & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = *(_QWORD *)(v16 + 48);
  v24 = *(_BYTE *)(v16 + 56);
  swift_bridgeObjectRelease();
  if (v24 & 1 | (v23 < 0x40))
    v25 = 1 << v23;
  else
    v25 = 0;
  v26 = *(_QWORD *)(v14 + 16);
  if (!v26)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v14 + 32);
  v28 = v27 < 0x40;
  v29 = 1 << v27;
  if (((*(_BYTE *)(v14 + 40) | v28) & 1) != 0)
    v20 = v29;
  else
    v20 = 0;
  if (v26 < 2)
    goto LABEL_46;
  v16 = v25 | v22;
  v30 = *(_QWORD *)(v14 + 48);
  v31 = *(_BYTE *)(v14 + 56);
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0 || v30 >= -64 && v30 < 65 && (v30 & 0x8000000000000000) == 0 && (unint64_t)v30 < 0x40)
    v20 |= 1 << v30;
LABEL_28:
  if (v16 == v20)
    return 0;
  if (v16 != 12)
  {
    if (v20 != 12)
      return 3;
    goto LABEL_35;
  }
  if (v20 == 12)
  {
LABEL_35:
    if (v16 == 40 || v16 == 20)
      return 2;
    else
      return 3;
  }
  result = 1;
  if (v20 != 20 && v20 != 40)
    return 3;
  return result;
}

void specialized static CameraPairTransition.scaleTransform(_:)(float32x4_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float a6@<S4>)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;

  if ((vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a2), (int8x16_t)vcgezq_f32(a2)))) & 0x80000000) != 0
    || (vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0x80000000) != 0
    || (vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a4), (int8x16_t)vcgezq_f32(a4)))) & 0x80000000) != 0
    || (vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a5), (int8x16_t)vcgezq_f32(a5)))) & 0x80000000) != 0
    || (~LODWORD(a6) & 0x7F800000) == 0 && (LODWORD(a6) & 0x7FFFFF) != 0)
  {
    a2 = *(float32x4_t *)MEMORY[0x24BDAEE00];
    a3 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16);
    a4 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32);
    a5 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48);
    a6 = 1.0;
    v6 = *(float32x4_t *)MEMORY[0x24BDAEE00];
    v7 = a3;
    v8 = a4;
  }
  else
  {
    v6 = vmulq_n_f32(a2, a6);
    v7 = vmulq_n_f32(a3, a6);
    v8 = vmulq_n_f32(a4, a6);
  }
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4].f32[0] = a6;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = a5;
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  unsigned __int32 v11;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;

  v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

void simd_slerp(float32x4_t a1, simd_quatf a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;
  int8x16_t v5;

  v3 = vmulq_f32(a1, (float32x4_t)xmmword_23D9A3E90);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  v5 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0);
  _simd_slerp_internal((float32x4_t)vbslq_s8(v5, (int8x16_t)vnegq_f32(a1), (int8x16_t)a1), a2, *(float *)v5.i32);
}

void _simd_slerp_internal(float32x4_t a1, simd_quatf a2, float a3)
{
  float v3;
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v3 = a2.vector.f32[0];
  v5 = 1.0 - a2.vector.f32[0];
  v6 = vsubq_f32((float32x4_t)xmmword_23D9A3E90, a1);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, (float32x4_t)xmmword_23D9A3E90);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * v3;
  if (v12 != 0.0)
    sinf(v12);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23D7B071C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

id ConfigNames.mono_pipeline(_:)(id *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;

  v1 = *a1;
  objc_msgSend(*a1, sel_setPosePipelineType_, 2);
  v2 = (void *)MEMORY[0x2426372E8](0x6C6174654DLL, 0xE500000000000000);
  objc_msgSend(v1, sel_setPoseCropMode_, v2);

  objc_msgSend(v1, sel_setEnable640Mode_, 0);
  objc_msgSend(v1, sel_setUseBinned640Streams_, 0);
  objc_msgSend(v1, sel_setUseUnwarpedFrameForPose_, 0);
  v3 = (void *)MEMORY[0x2426372E8](0xD00000000000001CLL, 0x800000023D9CD290);
  objc_msgSend(v1, sel_setMonoPoseModel_, v3);

  v4 = (void *)MEMORY[0x2426372E8](0xD000000000000023, 0x800000023D9CD2B0);
  objc_msgSend(v1, sel_setMonoPinchModel_, v4);

  v5 = (void *)MEMORY[0x2426372E8](0xD00000000000002CLL, 0x800000023D9CD2E0);
  objc_msgSend(v1, sel_setMonoDetectionModel_, v5);

  v6 = (void *)MEMORY[0x2426372E8](0x6F72687473736170, 0xEB00000000686775);
  objc_msgSend(v1, sel_setMonoThumbIndexTapModel_, v6);

  objc_msgSend(v1, sel_setThsFroceFovContinuity_, 0);
  objc_msgSend(v1, sel_setUseMonoActionModel_, 1);
  LODWORD(v7) = 5.0;
  objc_msgSend(v1, sel_setFilterDetectedHandsByDistanceThresh_, v7);
  objc_msgSend(v1, sel_setSchedulerInterval_, 2);
  objc_msgSend(v1, sel_setSchedulerIntervalOneHand_, 2);
  objc_msgSend(v1, sel_setSchedulerIntervalZeroHand_, 1);
  v8 = (void *)MEMORY[0x2426372E8](0x43636972656E6547, 0xED00006172656D61);
  objc_msgSend(v1, sel_setInputImageStreams_, v8);

  v9 = (void *)MEMORY[0x2426372E8](0x43636972656E6547, 0xED00006172656D61);
  objc_msgSend(v1, sel_setDetectionInputImageStreams_, v9);

  objc_msgSend(v1, sel_setEnableObjectInteractionState_, 0);
  objc_msgSend(v1, sel_setEnablePinchCancellation_, 0);
  objc_msgSend(v1, sel_setEnablePinchBreak_, 0);
  return objc_msgSend(v1, sel_setEnableGracefulFailureHandOutOfFOV_, 0);
}

void __swiftcall ConfigNames.createConfig(config:)(HandsKitConfig *__return_ptr retstr, HandsKitConfig_optional *config)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v3 = *v2;
  if (!config)
    objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  __asm { BR              X9 }
}

void *sub_23D7B0B4C()
{
  void *v0;
  void *v1;
  id v2;

  v2 = v1;
  objc_msgSend(v0, sel_setPassthrough_, 1);
  return v0;
}

uint64_t static ConfigNames.getValidConfigs()()
{
  uint64_t v0;
  char *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = 11;
  v7 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 11, 0);
  v1 = &byte_250E349D8;
  do
  {
    ++v1;
    _print_unlocked<A, B>(_:_:)();
    v3 = *(_QWORD *)(v7 + 16);
    v2 = *(_QWORD *)(v7 + 24);
    if (v3 >= v2 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
    *(_QWORD *)(v7 + 16) = v3 + 1;
    v4 = v7 + 16 * v3;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    --v0;
  }
  while (v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v5 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v5;
}

void *static ConfigNames.allCases.getter()
{
  return &outlined read-only object #0 of static ConfigNames.allCases.getter;
}

Hands::ConfigNames_optional __swiftcall ConfigNames.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  Hands::ConfigNames_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConfigNames.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 11;
  if (v5 < 0xB)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ConfigNames.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D7B1144 + 4 * byte_23D9B010B[*v0]))(0x7268745F73736170, 0xEC0000006867756FLL);
}

unint64_t sub_23D7B1144()
{
  return 0xD000000000000013;
}

unint64_t sub_23D7B11DC()
{
  return 0xD000000000000014;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ConfigNames(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConfigNames()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConfigNames(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConfigNames()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Hands::ConfigNames_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConfigNames(Swift::String *a1)
{
  return ConfigNames.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConfigNames@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ConfigNames.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ConfigNames(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ConfigNames.allCases.getter;
}

void static HandsKitConfigGenerator.GenerateConfig(name:config:)(uint64_t a1, void *a2, HandsKitConfig_optional *a3)
{
  Swift::String v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  ConfigNames.init(rawValue:)(v6);
  if (v7 != 11)
    ConfigNames.createConfig(config:)((HandsKitConfig *)v7, a3);
}

id HandsKitConfigGenerator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HandsKitConfigGenerator.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsKitConfigGenerator();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HandsKitConfigGenerator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsKitConfigGenerator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for HandsKitConfigGenerator()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ConfigNames and conformance ConfigNames()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfigNames and conformance ConfigNames;
  if (!lazy protocol witness table cache variable for type ConfigNames and conformance ConfigNames)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ConfigNames, &type metadata for ConfigNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfigNames and conformance ConfigNames);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ConfigNames()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [ConfigNames] and conformance [A], &demangling cache variable for type metadata for [ConfigNames], MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for ConfigNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23D7B15B8 + 4 * byte_23D9B011B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23D7B15EC + 4 * byte_23D9B0116[v4]))();
}

uint64_t sub_23D7B15EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7B15F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7B15FCLL);
  return result;
}

uint64_t sub_23D7B1608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7B1610);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23D7B1614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7B161C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigNames()
{
  return &type metadata for ConfigNames;
}

uint64_t method lookup function for HandsKitConfigGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static HandsKitConfigGenerator.GenerateConfig(name:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t VideoDataStructs.VideoFrame.displayTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VideoDataStructs.VideoFrame.frameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t VideoDataStructs.VideoFrame.userEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[624];

  outlined init with take of VideoDataStructs.UserEventData?(v1 + 32, (uint64_t)v4);
  outlined init with take of VideoDataStructs.UserEventData?((uint64_t)v4, a1);
  return outlined retain of VideoDataStructs.UserEventData?((uint64_t)v4);
}

uint64_t outlined init with take of VideoDataStructs.UserEventData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoDataStructs.UserEventData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of VideoDataStructs.UserEventData?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v18 = *(_OWORD *)(a1 + 480);
  v16 = *(_OWORD *)(a1 + 448);
  v17 = *(_OWORD *)(a1 + 464);
  v14 = *(_OWORD *)(a1 + 416);
  v15 = *(_OWORD *)(a1 + 432);
  v12 = *(_OWORD *)(a1 + 384);
  v13 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  v8 = *(_OWORD *)(a1 + 320);
  v9 = *(_OWORD *)(a1 + 336);
  v6 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 304);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined copy of VideoDataStructs.UserEventData?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t outlined copy of VideoDataStructs.UserEventData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    outlined copy of HandsKitDataInternal?(a4);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of ObjectInteractionResultsByHand?(a65, a66, a67, a68);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t VideoDataStructs.VideoFrame.images.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 VideoDataStructs.VideoFrame.worldTransform.getter()
{
  __n128 *v0;

  return v0[41];
}

uint64_t VideoDataStructs.VideoFrame.managedAssetData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_BYTE *)(v1 + 728);
  v3 = *(_DWORD *)(v1 + 732);
  v4 = *(_QWORD *)(v1 + 744);
  v5 = *(_QWORD *)(v1 + 752);
  v6 = *(_QWORD *)(v1 + 760);
  v7 = *(_QWORD *)(v1 + 768);
  v8 = *(_QWORD *)(v1 + 776);
  v9 = *(_BYTE *)(v1 + 784);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 720);
  *(_BYTE *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 736);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void *VideoDataStructs.VideoFrame.init(displayTime:frameID:userEvent:images:worldTransform:managedAssetData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, void *a8@<X8>, __n128 a9@<Q0>, __n128 a10@<Q1>, __n128 a11@<Q2>, __n128 a12@<Q3>)
{
  unsigned int v14;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v31[624];
  _OWORD __src[50];

  v14 = a2;
  v16 = HIDWORD(a2);
  outlined init with take of VideoDataStructs.UserEventData?(a5, (uint64_t)v31);
  v17 = *a7;
  v18 = *((_BYTE *)a7 + 8);
  v19 = *((_DWORD *)a7 + 3);
  v20 = a7[7];
  v21 = *((_BYTE *)a7 + 64);
  *(_QWORD *)&__src[0] = a1;
  *((_QWORD *)&__src[0] + 1) = __PAIR64__(v16, v14);
  *(_QWORD *)&__src[1] = a3;
  *((_QWORD *)&__src[1] + 1) = a4;
  outlined init with take of VideoDataStructs.UserEventData?((uint64_t)v31, (uint64_t)&__src[2]);
  *((_QWORD *)&__src[40] + 1) = a6;
  __src[41] = a9;
  __src[42] = a10;
  __src[43] = a11;
  __src[44] = a12;
  *(_QWORD *)&__src[45] = v17;
  BYTE8(__src[45]) = v18;
  HIDWORD(__src[45]) = v19;
  *(_QWORD *)&__src[46] = a7[2];
  v22 = *(_OWORD *)(a7 + 5);
  *(_OWORD *)((char *)&__src[46] + 8) = *(_OWORD *)(a7 + 3);
  *(_OWORD *)((char *)&__src[47] + 8) = v22;
  *((_QWORD *)&__src[48] + 1) = v20;
  LOBYTE(__src[49]) = v21;
  return memcpy(a8, __src, 0x311uLL);
}

uint64_t VideoDataStructs.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VideoDataStructs.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VideoDataStructs()
{
  return objc_opt_self();
}

uint64_t method lookup function for VideoDataStructs()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for VideoDataStructs.VideoFrame(_QWORD *a1)
{
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    if (a1[7])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (a1[71])
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VideoDataStructs.VideoFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    v7 = (_OWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    swift_bridgeObjectRetain();
    if (v6)
    {
      v8 = *(_QWORD *)(a2 + 64);
      v9 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v8;
      *(_QWORD *)(a1 + 72) = v9;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      v10 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *v7;
      *(_OWORD *)(a1 + 72) = v11;
      v12 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v12;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v13;
    v14 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v14;
    v15 = *(_QWORD *)(a2 + 168);
    v16 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 168) = v15;
    *(_QWORD *)(a1 + 176) = v16;
    v17 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v17;
    v18 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v18;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    v19 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v20 = *(_OWORD *)(a2 + 256);
    v21 = *(_OWORD *)(a2 + 272);
    v22 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v22;
    *(_OWORD *)(a1 + 256) = v20;
    *(_OWORD *)(a1 + 272) = v21;
    v23 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v23;
    v24 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v24;
    v25 = *(_OWORD *)(a2 + 384);
    v26 = *(_OWORD *)(a2 + 400);
    v27 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v27;
    *(_OWORD *)(a1 + 384) = v25;
    *(_OWORD *)(a1 + 400) = v26;
    v28 = *(_OWORD *)(a2 + 448);
    v29 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v29;
    *(_OWORD *)(a1 + 448) = v28;
    v30 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v30;
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    v31 = (_OWORD *)(a1 + 544);
    v32 = (_OWORD *)(a2 + 544);
    v33 = *(_QWORD *)(a2 + 568);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *v31 = *v32;
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = v33;
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v34 = *(_OWORD *)(a2 + 560);
      *v31 = *v32;
      *(_OWORD *)(a1 + 560) = v34;
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    }
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    v35 = *(_OWORD *)(a2 + 616);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *(_OWORD *)(a1 + 616) = v35;
    *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x268uLL);
  }
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  v36 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v36;
  v37 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v37;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.VideoFrame(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = (void *)(a1 + 32);
  v5 = (const void *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      v7 = (_QWORD *)(a1 + 444);
      v8 = (_QWORD *)(a2 + 444);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v9 = (_OWORD *)(a1 + 56);
      v11 = (__int128 *)(a2 + 56);
      v10 = *(_QWORD *)(a2 + 56);
      if (*(_QWORD *)(a1 + 56))
      {
        if (v10)
        {
          *(_QWORD *)(a1 + 56) = v10;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of HandsKitDataInternal(a1 + 56);
          v14 = *(_OWORD *)(a2 + 104);
          v16 = *v11;
          v15 = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 104) = v14;
          *v9 = v16;
          *(_OWORD *)(a1 + 72) = v15;
        }
      }
      else if (v10)
      {
        *(_QWORD *)(a1 + 56) = v10;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v39 = *v11;
        v40 = *(_OWORD *)(a2 + 72);
        v41 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v41;
        *v9 = v39;
        *(_OWORD *)(a1 + 72) = v40;
      }
      v42 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v42;
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v43 = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v43;
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
      *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      v44 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 425) = *(_OWORD *)(a2 + 425);
      *(_OWORD *)(a1 + 416) = v44;
      *v7 = *v8;
      *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
      *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 460) = *(_QWORD *)(a2 + 460);
      v45 = *(_OWORD *)(a2 + 468);
      *(_OWORD *)(a1 + 477) = *(_OWORD *)(a2 + 477);
      *(_OWORD *)(a1 + 468) = v45;
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v46 = (_OWORD *)(a1 + 544);
      v47 = (_OWORD *)(a2 + 544);
      v48 = *(_QWORD *)(a2 + 568);
      if (*(_QWORD *)(a1 + 568))
      {
        if (v48)
        {
          *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
          *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
          *(_DWORD *)(a1 + 556) = *(_DWORD *)(a2 + 556);
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          swift_retain();
          swift_release();
        }
        else
        {
          outlined destroy of ObjectInteractionResultsByHand(a1 + 544);
          v50 = *(_QWORD *)(a2 + 576);
          v51 = *(_OWORD *)(a2 + 560);
          *v46 = *v47;
          *(_OWORD *)(a1 + 560) = v51;
          *(_QWORD *)(a1 + 576) = v50;
        }
      }
      else
      {
        v49 = *v47;
        if (v48)
        {
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
          *v46 = v49;
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          v52 = *(_OWORD *)(a2 + 560);
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          *v46 = v49;
          *(_OWORD *)(a1 + 560) = v52;
        }
      }
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
      *(_DWORD *)(a1 + 612) = *(_DWORD *)(a2 + 612);
      *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
      *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
      *(_DWORD *)(a1 + 636) = *(_DWORD *)(a2 + 636);
      *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
      goto LABEL_28;
    }
    outlined destroy of VideoDataStructs.UserEventData(a1 + 32);
LABEL_10:
    memcpy(v4, v5, 0x268uLL);
    goto LABEL_28;
  }
  if (!v6)
    goto LABEL_10;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v13 = (__int128 *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v13;
    v18 = *(_OWORD *)(a2 + 72);
    v19 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v19;
    *(_OWORD *)(a1 + 56) = v17;
    *(_OWORD *)(a1 + 72) = v18;
  }
  v20 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v20;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v22 = *(_OWORD *)(a2 + 256);
  v23 = *(_OWORD *)(a2 + 272);
  v24 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 320);
  v26 = *(_OWORD *)(a2 + 336);
  v27 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v26;
  v29 = *(_OWORD *)(a2 + 464);
  v28 = *(_OWORD *)(a2 + 480);
  v30 = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 464) = v29;
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 448) = v30;
  v31 = *(_OWORD *)(a2 + 384);
  v32 = *(_OWORD *)(a2 + 400);
  v33 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v33;
  *(_OWORD *)(a1 + 384) = v31;
  *(_OWORD *)(a1 + 400) = v32;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v34 = (_OWORD *)(a1 + 544);
  v56 = *(_QWORD *)(a2 + 568);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v35 = *(_OWORD *)(a2 + 544);
  if (v56)
  {
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *v34 = v35;
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *v34 = v35;
    *(_OWORD *)(a1 + 560) = v36;
  }
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  v37 = *(_OWORD *)(a2 + 600);
  v38 = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = v38;
  *(_OWORD *)(a1 + 600) = v37;
  swift_bridgeObjectRetain();
LABEL_28:
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  v53 = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 720) = v53;
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
  *(_DWORD *)(a1 + 736) = *(_DWORD *)(a2 + 736);
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(a2 + 740);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(_QWORD *)(a1 + 776) = v54;
  return a1;
}

uint64_t outlined destroy of VideoDataStructs.UserEventData(uint64_t a1)
{
  destroy for VideoDataStructs.UserEventData(a1);
  return a1;
}

void *__swift_memcpy785_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x311uLL);
}

uint64_t assignWithTake for VideoDataStructs.VideoFrame(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = (void *)(a1 + 32);
  v5 = (const void *)(a2 + 32);
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      v7 = (_QWORD *)(a2 + 444);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      if (*(_QWORD *)(a1 + 56))
      {
        if (v8)
        {
          *(_QWORD *)(a1 + 56) = v8;
          swift_bridgeObjectRelease();
          v9 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          *(_QWORD *)(a1 + 72) = v9;
          swift_bridgeObjectRelease();
          *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        outlined destroy of HandsKitDataInternal(a1 + 56);
      }
      v10 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v10;
      v11 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v11;
LABEL_10:
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      v12 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v12;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRelease();
      v13 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v13;
      v14 = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = v14;
      v15 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = v15;
      v16 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = v16;
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 425) = *(_OWORD *)(a2 + 425);
      *(_QWORD *)(a1 + 444) = *v7;
      *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
      *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 460) = *(_QWORD *)(a2 + 460);
      *(_OWORD *)(a1 + 477) = *(_OWORD *)(a2 + 477);
      *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 468);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_release();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      swift_release();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 568))
      {
        v17 = *(_QWORD *)(a2 + 568);
        if (v17)
        {
          *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
          *(_QWORD *)(a1 + 568) = v17;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          swift_release();
LABEL_15:
          *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
          *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
          *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
          *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
          *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
          *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
          goto LABEL_16;
        }
        outlined destroy of ObjectInteractionResultsByHand(a1 + 544);
      }
      v18 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 560) = v18;
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      goto LABEL_15;
    }
    outlined destroy of VideoDataStructs.UserEventData((uint64_t)v4);
  }
  memcpy(v4, v5, 0x268uLL);
LABEL_16:
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  swift_bridgeObjectRelease();
  v19 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v19;
  v20 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v20;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.VideoFrame(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 785))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 648);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.VideoFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 776) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 784) = 0;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 785) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 648) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 785) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.VideoFrame()
{
  return &type metadata for VideoDataStructs.VideoFrame;
}

void PinchAcceptor.preProcess(_:)()
{
  uint64_t v0;

  *(_WORD *)(v0 + 33) = 0;
}

uint64_t PinchAcceptor.postProcess(_:_:)(void *__src, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[784];

  memcpy(v5, __src, 0x306uLL);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 280))(v5);
  if ((a2 & 1) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)v2 + 288))();
  return result;
}

uint64_t PinchAcceptor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptor()
{
  return objc_opt_self();
}

uint64_t PinchAcceptorAcceptAllMake.process(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(result + 192);
  if (*(float *)(result + 536) >= *(float *)(result + 372))
  {
    if (!*(_BYTE *)(result + 192))
      return result;
LABEL_5:
    *(_BYTE *)(v1 + 34) = 1;
    return result;
  }
  *(_WORD *)(v1 + 33) = 257;
  if (v2)
    goto LABEL_5;
  return result;
}

uint64_t type metadata accessor for PinchAcceptorAcceptAllMake()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for PinchAcceptorOutput(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchAcceptorOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchAcceptorOutput()
{
  return &type metadata for PinchAcceptorOutput;
}

uint64_t OutputPortInfo.init(_:_:_:_:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t component_size;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t size;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t data_ptr;
  uint64_t v37;
  _QWORD v39[4];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v9 = PortInfo.init()();
  String.utf8CString.getter();
  swift_beginAccess();
  swift_retain();
  v10 = e5rt_execution_stream_operation_retain_output_port();
  swift_endAccess();
  swift_release();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v10);
  if (!v5)
  {
    swift_beginAccess();
    v11 = e5rt_io_port_retain_tensor_desc();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v11);
    if (!*(_QWORD *)(v9 + 24))
    {
      swift_bridgeObjectRelease();
      swift_release();
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v18 = 0xD000000000000023;
      v18[1] = 0x800000023D9CD470;
      swift_willThrow();
LABEL_9:
      swift_release();
      return v9;
    }
    v43 = 0;
    v13 = e5rt_tensor_desc_alloc_buffer_object();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v13);
    v14 = e5rt_io_port_bind_buffer_object();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v14);
    swift_beginAccess();
    *(_QWORD *)(v9 + 32) = 0;
    if (specialized static PortInfo.getTensorComponentType(_:)() == 4)
    {
      *(_QWORD *)&v40 = 0;
      v39[0] = 0;
      v15 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v15);
      component_size = e5rt_tensor_desc_dtype_get_component_size();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(component_size);
      v17 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v17);
    }
    *(_BYTE *)(v9 + 72) = 0;
    if (specialized static PortInfo.getTensorComponentType(_:)() == 4)
    {
      *(_QWORD *)&v40 = 0;
      v39[0] = 0;
      v19 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v19);
      v20 = e5rt_tensor_desc_dtype_get_component_size();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v20);
      v21 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v21);
    }
    *(_BYTE *)(v9 + 73) = 0;
    if (specialized static PortInfo.getTensorComponentType(_:)() == 1)
    {
      *(_QWORD *)&v40 = 0;
      v39[0] = 0;
      v22 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v22);
      v23 = e5rt_tensor_desc_dtype_get_component_size();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v23);
      v24 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v24);
    }
    *(_BYTE *)(v9 + 74) = 0;
    if (!specialized static PortInfo.getTensorComponentType(_:)())
    {
      *(_QWORD *)&v40 = 0;
      v39[0] = 0;
      v29 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v29);
      v30 = e5rt_tensor_desc_dtype_get_component_size();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v30);
      v31 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v31);
    }
    *(_BYTE *)(v9 + 75) = 0;
    v25 = specialized static PortInfo.getPackedFP32TensorDescriptor(_:)();
    swift_beginAccess();
    *(_QWORD *)(v9 + 48) = v25;
    swift_beginAccess();
    size = e5rt_tensor_desc_get_size();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(size);
    if ((a4 & 1) != 0)
    {
      *(_BYTE *)(v9 + 72) = 1;
      v27 = (void *)0xE400000000000000;
      v28 = 1702195828;
    }
    else
    {
      if (*(_BYTE *)(v9 + 72) != 1)
      {
        swift_bridgeObjectRelease();
        v39[0] = 0;
        v37 = e5rt_tensor_desc_alloc_buffer_object();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v37);
        v35 = 0;
        goto LABEL_21;
      }
      v28 = 0x65736C6166;
      v27 = (void *)0xE500000000000000;
    }
    v40 = xmmword_23D9AB750;
    v41 = 0;
    v42 = 0;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v39[0] = 0xD000000000000016;
    v39[1] = 0x800000023D9CD4A0;
    v32._countAndFlagsBits = a1;
    v32._object = a2;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._object = (void *)0x800000023D9CD4C0;
    v33._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v33);
    v34._countAndFlagsBits = v28;
    v34._object = v27;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v39[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005BLL, 0x800000023D9CD4E0, 47, (uint64_t *)&v40, (uint64_t)v39, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
    v35 = v43;
LABEL_21:
    swift_beginAccess();
    *(_QWORD *)(v9 + 40) = v35;
    swift_beginAccess();
    data_ptr = e5rt_buffer_object_get_data_ptr();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(data_ptr);
    if ((a5 & 0x100000000) == 0)
      *(_DWORD *)(v9 + 76) = a5;
    *(_BYTE *)(v9 + 80) = 1;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  return v9;
}

_QWORD *OutputPortInfo.deinit()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = (_QWORD *)(v0 + 40);
  if (!v1)
  {
    swift_beginAccess();
    if (!*v2)
      return PortInfo.deinit();
    swift_beginAccess();
LABEL_10:
    swift_beginAccess();
    v5 = e5rt_buffer_object_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v5);
    return PortInfo.deinit();
  }
  swift_beginAccess();
  if (*v2)
    v3 = v1 == *v2;
  else
    v3 = 0;
  if (v3)
    goto LABEL_10;
  swift_beginAccess();
  v4 = e5rt_buffer_object_release();
  swift_endAccess();
  specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v4);
  if (*v2)
    goto LABEL_10;
  return PortInfo.deinit();
}

uint64_t OutputPortInfo.__deallocating_deinit()
{
  OutputPortInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OutputPortInfo()
{
  return objc_opt_self();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OutputPortInfo.dequantizeLayers()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  const char *v3;

  if ((*(_BYTE *)(v0 + 72) & 1) == 0)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v0 + 24))
    {
      if (*(_BYTE *)(v0 + 73) == 1)
      {
        swift_beginAccess();
        swift_beginAccess();
        swift_beginAccess();
        v1 = e5rt_tensor_utils_cast_from_fp16_to_fp32();
LABEL_11:
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v1);
        return;
      }
      if (*(_BYTE *)(v0 + 74) == 1)
      {
        swift_beginAccess();
        swift_beginAccess();
        swift_beginAccess();
        v1 = e5rt_tensor_utils_dequantize_from_s8_to_fp32();
        goto LABEL_11;
      }
      if (*(_BYTE *)(v0 + 75) == 1)
      {
        swift_beginAccess();
        swift_beginAccess();
        swift_beginAccess();
        v1 = e5rt_tensor_utils_dequantize_from_u8_to_fp32();
        goto LABEL_11;
      }
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v2 = 0xD000000000000024;
      v3 = "Unexpected Output tensor description";
    }
    else
    {
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v2 = 0xD000000000000020;
      v3 = "Failed to get tensor description";
    }
    v2[1] = (unint64_t)(v3 - 32) | 0x8000000000000000;
    swift_willThrow();
  }
}

uint64_t destroy for ObjectInteractionData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ObjectInteractionData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ObjectInteractionData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ObjectInteractionData(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ObjectInteractionData()
{
  return &type metadata for ObjectInteractionData;
}

unint64_t lazy protocol witness table accessor for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB;
  if (!lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB)
  {
    v1 = type metadata accessor for ObjectInteractionDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB);
  }
  return result;
}

uint64_t ObjectInteractionData.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t *v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  type metadata accessor for ObjectInteractionDataPB(0);
  UnknownStorage.init()();
  v4 = *v1;
  v38 = v1[1];
  v5 = v38;
  v39 = v4;
  *a1 = v4;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v39);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v38);
    v37 = v7;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v9 = v7;
    v10 = (int64_t *)(v5 + 32);
    while (1)
    {
      v12 = *v10++;
      v11 = v12;
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v11 > 0x7FFFFFFF)
        goto LABEL_30;
      v37 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      if (v14 >= v13 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v9 = v37;
      }
      *(_QWORD *)(v9 + 16) = v14 + 1;
      *(_DWORD *)(v9 + 4 * v14 + 32) = v11;
      if (!--v6)
      {
        outlined release of HandContainer((uint64_t)&v38);
        v7 = MEMORY[0x24BEE4AF8];
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v15 = v2[2];
  v36 = v2[3];
  v16 = v36;
  v37 = v15;
  a1[1] = v9;
  a1[2] = v15;
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v37);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v36);
    v35 = v7;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = v7;
    v19 = (int64_t *)(v16 + 32);
    while (1)
    {
      v21 = *v19++;
      v20 = v21;
      if (v21 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v20 > 0x7FFFFFFF)
        goto LABEL_32;
      v35 = v18;
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v18 = v35;
      }
      *(_QWORD *)(v18 + 16) = v23 + 1;
      *(_DWORD *)(v18 + 4 * v23 + 32) = v20;
      if (!--v17)
      {
        outlined release of HandContainer((uint64_t)&v36);
        v7 = MEMORY[0x24BEE4AF8];
        goto LABEL_19;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x24BEE4AF8];
LABEL_19:
  v24 = v2[4];
  v34 = v2[5];
  v35 = v24;
  a1[4] = v34;
  a1[5] = v24;
  a1[3] = v18;
  v25 = v2[6];
  v33 = v25;
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v35);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v34);
    outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v33);
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    v27 = v7;
    v28 = (int64_t *)(v25 + 32);
    while (1)
    {
      v30 = *v28++;
      v29 = v30;
      if (v30 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v29 > 0x7FFFFFFF)
        goto LABEL_34;
      v32 = *(_QWORD *)(v7 + 16);
      v31 = *(_QWORD *)(v7 + 24);
      if (v32 >= v31 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      *(_QWORD *)(v7 + 16) = v32 + 1;
      *(_DWORD *)(v7 + 4 * v32 + 32) = v29;
      if (!--v26)
      {
        result = outlined release of HandContainer((uint64_t)&v33);
        goto LABEL_28;
      }
    }
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v35);
  result = outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v34);
  v27 = MEMORY[0x24BEE4AF8];
LABEL_28:
  a1[6] = v27;
  return result;
}

unint64_t specialized Dictionary.subscript.getter(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    goto LABEL_5;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1);
  if ((v6 & 1) == 0)
  {
    v3 = 0;
LABEL_5:
    v7 = 1;
    return v3 | ((unint64_t)v7 << 32);
  }
  v7 = 0;
  v3 = *(unsigned int *)(*(_QWORD *)(a3 + 56) + 4 * v5);
  return v3 | ((unint64_t)v7 << 32);
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(a2 + 56) + 96 * v5;
    v8 = *(_BYTE *)(v7 + 32);
    v9 = *(_BYTE *)(v7 + 33);
    v10 = *(_DWORD *)(v7 + 36);
    v11 = *(_BYTE *)(v7 + 40);
    v12 = *(_DWORD *)(v7 + 44);
    v13 = *(_BYTE *)(v7 + 48);
    v14 = *(_QWORD *)(v7 + 56);
    v15 = *(_BYTE *)(v7 + 64);
    v16 = *(_BYTE *)(v7 + 65);
    v17 = *(_BYTE *)(v7 + 66);
    v18 = *(_QWORD *)(v7 + 80);
    v19 = *(_QWORD *)(v7 + 88);
    v20 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_OWORD *)(a3 + 16) = v20;
    *(_BYTE *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 33) = v9;
    *(_DWORD *)(a3 + 36) = v10;
    *(_BYTE *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 44) = v12;
    *(_BYTE *)(a3 + 48) = v13;
    *(_QWORD *)(a3 + 56) = v14;
    *(_BYTE *)(a3 + 64) = v15;
    *(_BYTE *)(a3 + 65) = v16;
    *(_BYTE *)(a3 + 66) = v17;
    *(_QWORD *)(a3 + 68) = *(_QWORD *)(v7 + 68);
    *(_QWORD *)(a3 + 80) = v18;
    *(_QWORD *)(a3 + 88) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, char a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1), (v3 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return 0;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return 0;
}

uint64_t static HandsKitUtils.calculatePalmCenter(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float v17;
  _WORD v18[12];
  uint64_t v19;

  if (*(_QWORD *)(result + 16) > 0x19uLL)
  {
    v8 = *(float32x4_t *)(result + 32);
    v7 = *(float32x4_t *)(result + 48);
    v10 = *(float32x4_t *)(result + 224);
    v9 = *(float32x4_t *)(result + 240);
    v12 = *(float32x4_t *)(result + 384);
    v11 = *(float32x4_t *)(result + 400);
    v13 = (float32x2_t)vdup_n_s32(0x3E124925u);
    v15 = *(float32x4_t *)(result + 544);
    v14 = *(float32x4_t *)(result + 560);
    v16 = (float32x2_t)vdup_n_s32(0x3E924925u);
    v17 = (float)(vmuls_lane_f32(0.14286, v7, 2) + vmuls_lane_f32(0.28571, v9, 2)) + vmuls_lane_f32(0.28571, v11, 2);
    *(float32x2_t *)&v6 = vadd_f32(vadd_f32(vadd_f32(vmul_f32(*(float32x2_t *)v7.f32, v13), vmul_f32(*(float32x2_t *)v9.f32, v16)), vmul_f32(*(float32x2_t *)v11.f32, v16)), vmul_f32(*(float32x2_t *)v14.f32, v16));
    *((float *)&v6 + 2) = v17 + vmuls_lane_f32(0.28571, v14, 2);
    HIDWORD(v6) = 0;
    v9.f32[0] = (float)(vmuls_lane_f32(0.14286, v8, 2) + vmuls_lane_f32(0.28571, v10, 2))
              + vmuls_lane_f32(0.28571, v12, 2);
    *(float32x2_t *)&v5 = vadd_f32(vadd_f32(vadd_f32(vmul_f32(*(float32x2_t *)v8.f32, v13), vmul_f32(*(float32x2_t *)v10.f32, v16)), vmul_f32(*(float32x2_t *)v12.f32, v16)), vmul_f32(*(float32x2_t *)v15.f32, v16));
    *((float *)&v5 + 2) = v9.f32[0] + vmuls_lane_f32(0.28571, v15, 2);
    HIDWORD(v5) = 0;
  }
  else
  {
    v3 = MEMORY[0x24BEE0D00];
    v19 = MEMORY[0x24BEE0D00];
    strcpy((char *)v18, "HandsKitUtils");
    v18[7] = -4864;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
    *(_QWORD *)(v4 + 56) = v3;
    *(_QWORD *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v4 + 32) = 0xD000000000000014;
    *(_QWORD *)(v4 + 40) = 0x800000023D9CD720;
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004ELL, 0x800000023D9CD5C0, 114, (uint64_t)v18, v4);
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
    v5 = 0uLL;
    v6 = 0uLL;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

void one-time initialization function for _mapping()
{
  static HandsKitUtils._mapping = (uint64_t)&outlined read-only object #0 of one-time initialization function for _mapping;
}

void one-time initialization function for _boneNames()
{
  static HandsKitUtils._boneNames = (uint64_t)&outlined read-only object #0 of one-time initialization function for _boneNames;
}

void one-time initialization function for _boneNamesMapping()
{
  static HandsKitUtils._boneNamesMapping = (uint64_t)&outlined read-only object #0 of one-time initialization function for _boneNamesMapping;
}

unint64_t static HandsKitUtils.directRegression(toArvinoMapping:)(unint64_t result)
{
  unint64_t v1;

  if (result > 0x14)
    return 0;
  v1 = result;
  if (one-time initialization token for _mapping != -1)
    result = swift_once();
  if (*(_QWORD *)(static HandsKitUtils._mapping + 16) > v1)
    return *(_QWORD *)(static HandsKitUtils._mapping + 8 * v1 + 32);
  __break(1u);
  return result;
}

void static HandsKitUtils.referenceTransform(_:_:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  id v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  id v27;
  int v28;
  unint64_t v29;
  char v30;
  id v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  id v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  id v42;
  unint64_t v43;
  char v44;
  id v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  CMTimeValue value;
  id v54;
  void *v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  CMTimeValue v61;
  id v62;
  void *v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  CMTimeValue v77;
  uint64_t v78;
  uint64_t v79;
  id *v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  __int128 v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  __int128 v111;
  __int128 v112;
  unsigned int v113;
  CMTime v114;
  uint64_t v115;
  char v116;
  _BYTE v117[15];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  id v127[2];
  __int128 v128;
  __int128 v129;
  CMTime v130;

  v127[0] = a2;
  v127[1] = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_35;
  v8 = v127[0];
  strcpy((char *)v127, "Extrinsics");
  BYTE3(v127[1]) = 0;
  HIDWORD(v127[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (v8[2] && (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v10 & 1) != 0))
  {
    outlined init with copy of Any(v8[7] + 32 * v9, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    outlined destroy of Any?((uint64_t)&v128);
    goto LABEL_35;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v11 = v127[0];
  strcpy((char *)v127, "RotationMatrix");
  HIBYTE(v127[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (v11[2] && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v13 & 1) != 0))
  {
    outlined init with copy of Any(v11[7] + 32 * v12, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
  {
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_33;
  v14 = (unint64_t)v127[0];
  strcpy((char *)v127, "Translation");
  HIDWORD(v127[1]) = -352321536;
  AnyHashable.init<A>(_:)();
  if (v11[2] && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v16 & 1) != 0))
  {
    outlined init with copy of Any(v11[7] + 32 * v15, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_33;
  v17 = (unint64_t)v127[0];
  strcpy((char *)v127, "Intrinsics");
  BYTE3(v127[1]) = 0;
  HIDWORD(v127[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (v8[2] && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v19 & 1) != 0))
  {
    outlined init with copy of Any(v8[7] + 32 * v18, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v20 = v127[0];
  v127[0] = (id)30822;
  v127[1] = (id)0xE200000000000000;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v22 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v21, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
  {
LABEL_93:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v23 = v127[0];
  objc_msgSend(v127[0], sel_floatValue);
  v113 = v24;

  v127[0] = (id)31078;
  v127[1] = (id)0xE200000000000000;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v26 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v25, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v27 = v127[0];
  objc_msgSend(v127[0], sel_floatValue);
  v110 = v28;

  v127[0] = (id)7893104;
  v127[1] = (id)0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v30 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v29, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v31 = v127[0];
  objc_msgSend(v127[0], sel_floatValue);
  v105 = v32;

  v127[0] = (id)7958640;
  v127[1] = (id)0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v34 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v33, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v35 = v127[0];
  objc_msgSend(v127[0], sel_floatValue);
  v104 = v36;

  strcpy((char *)v127, "Resolution");
  BYTE3(v127[1]) = 0;
  HIDWORD(v127[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v38 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v37, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v39 = v127[0];
  v127[0] = (id)0x6874646977;
  v127[1] = (id)0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (v39[2] && (v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v41 & 1) != 0))
  {
    outlined init with copy of Any(v39[7] + 32 * v40, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
  v42 = v127[0];
  v103 = objc_msgSend(v127[0], sel_unsignedIntValue);

  v127[0] = (id)0x746867696568;
  v127[1] = (id)0xE600000000000000;
  AnyHashable.init<A>(_:)();
  if (v39[2] && (v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v44 & 1) != 0))
  {
    outlined init with copy of Any(v39[7] + 32 * v43, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v45 = v127[0];
  v102 = objc_msgSend(v127[0], sel_unsignedIntValue);

  v127[0] = (id)0xD000000000000010;
  v127[1] = (id)0x800000023D9CD5A0;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v47 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v46, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_95:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v100 = (unint64_t)v127[0];
  strcpy((char *)v127, "cameraType");
  BYTE3(v127[1]) = 0;
  HIDWORD(v127[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (v20[2] && (v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v114), (v49 & 1) != 0))
  {
    outlined init with copy of Any(v20[7] + 32 * v48, (uint64_t)&v128);
  }
  else
  {
    v128 = 0u;
    v129 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v114);
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_95;
  v114.value = (CMTimeValue)v127[0];
  *(id *)&v114.timescale = v127[1];
  *(_QWORD *)&v128 = 0x616C616E6E616BLL;
  *((_QWORD *)&v128 + 1) = 0xE700000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v50 = MEMORY[0x24BEE0D00];
  v51 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
  {
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v107 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v107)
        goto LABEL_103;
    }
    else
    {
      v107 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v107)
      {
LABEL_103:
        v114.value = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v107 & ~(v107 >> 63), 0);
        if (v107 < 0)
        {
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        v52 = 0;
        value = v114.value;
        do
        {
          if ((v14 & 0xC000000000000001) != 0)
            v54 = (id)MEMORY[0x24263790C](v52, v14);
          else
            v54 = *(id *)(v14 + 8 * v52 + 32);
          v55 = v54;
          objc_msgSend(v54, sel_floatValue);
          v57 = v56;

          v114.value = value;
          v59 = *(_QWORD *)(value + 16);
          v58 = *(_QWORD *)(value + 24);
          if (v59 >= v58 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
            value = v114.value;
          }
          ++v52;
          *(_QWORD *)(value + 16) = v59 + 1;
          *(_DWORD *)(value + 4 * v59 + 32) = v57;
        }
        while (v107 != v52);
        swift_bridgeObjectRelease();
LABEL_117:
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          v68 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          v108 = v68;
          if (v68)
            goto LABEL_119;
        }
        else
        {
          v108 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v108)
          {
LABEL_119:
            v114.value = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108 & ~(v108 >> 63), 0);
            if (v108 < 0)
            {
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
              return;
            }
            v60 = 0;
            v61 = v114.value;
            do
            {
              if ((v17 & 0xC000000000000001) != 0)
                v62 = (id)MEMORY[0x24263790C](v60, v17);
              else
                v62 = *(id *)(v17 + 8 * v60 + 32);
              v63 = v62;
              objc_msgSend(v62, sel_floatValue);
              v65 = v64;

              v114.value = v61;
              v67 = *(_QWORD *)(v61 + 16);
              v66 = *(_QWORD *)(v61 + 24);
              if (v67 >= v66 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
                v61 = v114.value;
              }
              ++v60;
              *(_QWORD *)(v61 + 16) = v67 + 1;
              *(_DWORD *)(v61 + 4 * v67 + 32) = v65;
            }
            while (v108 != v60);
            swift_bridgeObjectRelease();
            goto LABEL_130;
          }
        }
        swift_bridgeObjectRelease();
        v61 = MEMORY[0x24BEE4AF8];
LABEL_130:
        v69 = v100 >> 62;
        if (v100 >> 62)
          goto LABEL_152;
        if (*(uint64_t *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10) < 4)
        {
LABEL_154:
          __break(1u);
        }
        else
        {
          while (1)
          {
            if ((v100 & 0xC000000000000001) != 0)
            {
              _ArrayBuffer._typeCheckSlowPath(_:)(0);
              _ArrayBuffer._typeCheckSlowPath(_:)(1);
              _ArrayBuffer._typeCheckSlowPath(_:)(2);
              _ArrayBuffer._typeCheckSlowPath(_:)(3);
            }
            if (v69)
            {
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.subscript.getter();
              v71 = v73;
              v70 = v74;
              v76 = v75;
              swift_bridgeObjectRelease_n();
              v72 = v76 >> 1;
            }
            else
            {
              v70 = 0;
              v71 = (v100 & 0xFFFFFFFFFFFFFF8) + 32;
              v72 = 4;
            }
            v69 = v72 - v70;
            if (__OFSUB__(v72, v70))
              break;
            if (!v69)
            {
              swift_unknownObjectRelease();
              v77 = MEMORY[0x24BEE4AF8];
LABEL_150:
              specialized SIMD.init<A>(_:)(v77);
              v112 = v85;
              swift_bridgeObjectRelease();
              specialized static HandsKitUtils.inverseExtrinsics(_:_:)(value, v61);
              v109 = v86;
              v99 = v88;
              v101 = v87;
              v98 = v89;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              LODWORD(v90) = 0;
              HIDWORD(v90) = v110;
              v111 = v90;
              __asm { FMOV            V1.4S, #1.0 }
              *(_QWORD *)&_Q1 = __PAIR64__(v104, v105);
              v106 = _Q1;
              v130 = CMTime.init(value:timescale:)(0, 1);
              LOBYTE(v127[0]) = 1;
              v114 = v130;
              v115 = 1;
              v116 = 1;
              *(_QWORD *)v117 = v128;
              *(_QWORD *)&v117[7] = *(_QWORD *)((char *)&v128 + 7);
              v118 = v113;
              v119 = v111;
              v120 = v106;
              v121 = v112;
              v122 = v109;
              v123 = v101;
              v124 = v99;
              v125 = v98;
              v126 = __PAIR64__(v102, v103);
              _s5Hands16VideoDataStructsC011CalibrationC0VSgWOi_((uint64_t)&v114);
              goto LABEL_36;
            }
            v114.value = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69 & ~(v69 >> 63), 0);
            if (v69 < 0)
              goto LABEL_158;
            v77 = v114.value;
            if (v70 <= v72)
              v78 = v72;
            else
              v78 = v70;
            v79 = v78 - v70;
            v80 = (id *)(v71 + 8 * v70);
            while (v79)
            {
              objc_msgSend(*v80, sel_floatValue);
              v82 = v81;
              v114.value = v77;
              v84 = *(_QWORD *)(v77 + 16);
              v83 = *(_QWORD *)(v77 + 24);
              if (v84 >= v83 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
                v77 = v114.value;
              }
              *(_QWORD *)(v77 + 16) = v84 + 1;
              *(_DWORD *)(v77 + 4 * v84 + 32) = v82;
              --v79;
              ++v80;
              if (!--v69)
              {
                swift_unknownObjectRelease();
                goto LABEL_150;
              }
            }
            __break(1u);
LABEL_152:
            swift_bridgeObjectRetain();
            v96 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v96 < 0)
              goto LABEL_159;
            swift_bridgeObjectRetain();
            v97 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v97 < 4)
              goto LABEL_154;
          }
        }
        __break(1u);
        goto LABEL_156;
      }
    }
    swift_bridgeObjectRelease();
    value = MEMORY[0x24BEE4AF8];
    goto LABEL_117;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v115 = v50;
  v114.value = 0xD00000000000001DLL;
  *(_QWORD *)&v114.timescale = 0x800000023D9CD610;
  specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004ELL, 0x800000023D9CD5C0, 464, (uint64_t)&v114, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v114);
LABEL_35:
  _s5Hands16VideoDataStructsC011CalibrationC0VSgWOi0_((uint64_t)&v114);
LABEL_36:
  outlined init with take of VideoDataStructs.CalibrationData?((uint64_t)&v114, a4);
}

id HandsKitUtils.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HandsKitUtils.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsKitUtils();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HandsKitUtils.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsKitUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

float specialized static HandsKitUtils.computeOutputCameraIntrinsics(forCrop:cropShape:withRadius:)@<S0>(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float32x2_t a3@<D1>, int32x2_t a4@<D2>, __n128 a5@<Q4>)
{
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  float result;
  __n128 v14;
  float32x4_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v6 = vmulq_f32(a2, a2);
  v7 = vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1));
  a5.n128_u64[0] = (unint64_t)vmul_f32(a3, (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v7.f32 = vdiv_f32(vmul_n_f32((float32x2_t)a5.n128_u64[0], sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v7).f32[0])), (float32x2_t)vdup_lane_s32(a4, 0));
  *(int32x2_t *)v6.f32 = vcgt_f32((float32x2_t)vdup_n_s32(0x3DCCCCCDu), *(float32x2_t *)v7.f32);
  if (((v6.i32[0] | v6.i32[1]) & 1) != 0)
  {
    v19[3] = MEMORY[0x24BEE0D00];
    v19[0] = 0xD00000000000003FLL;
    v19[1] = 0x800000023D9CD6E0;
    v14 = a5;
    v15 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_23D9A7050;
    v9 = MEMORY[0x24BEE14E8];
    v10 = MEMORY[0x24BEE1568];
    *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE14E8];
    *(_QWORD *)(v8 + 64) = v10;
    *(_DWORD *)(v8 + 32) = v15.i32[0];
    *(_QWORD *)(v8 + 96) = v9;
    *(_QWORD *)(v8 + 104) = v10;
    *(_DWORD *)(v8 + 72) = v15.i32[1];
    type metadata accessor for HandyLoggerNeo();
    v16 = xmmword_23D9A7070;
    v17 = 0;
    v18 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v16, 0xD00000000000004ELL, 0x800000023D9CD5C0, 303, (uint64_t)v19, v8);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    a5 = v14;
    v7 = v15;
  }
  v11 = v7.u32[0];
  v7.i32[0] = 0;
  v12 = vzip2q_s32((int32x4_t)v11, vzip1q_s32((int32x4_t)v7, (int32x4_t)0));
  a5.n128_u32[1] = vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1).u32[0];
  v12.i32[2] = 0;
  result = 1.0;
  a5.n128_u32[2] = 1.0;
  *(_OWORD *)a1 = v11;
  *(int32x4_t *)(a1 + 16) = v12;
  *(__n128 *)(a1 + 32) = a5;
  return result;
}

void specialized static HandsKitUtils.computeCenter3D(_:_:_:)(uint64_t a1, double a2, double a3)
{
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  swift_beginAccess();
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = (void *)objc_opt_self();
    swift_beginAccess();
    v7 = *(_OWORD *)(a1 + 80);
    v8 = *(_OWORD *)(a1 + 96);
    v6 = *(_OWORD *)(a1 + 64);
    swift_beginAccess();
    objc_msgSend(v5, sel_computeCenter3dKannala_cameraIntrinsics_cameraDistortion_depth_, a2, *(double *)&v6, *(double *)&v7, *(double *)&v8, *(double *)(a1 + 112), a3);
  }
  else
  {
    ImageCalibrationData.opticalCenter.getter();
    ImageCalibrationData.rawFocal.getter();
  }
}

uint64_t specialized static HandsKitUtils.calcBoneLengths(forPose:)(uint64_t a1)
{
  float32x4_t *v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;

  v1 = *(float32x4_t **)a1;
  v2 = *(unsigned __int8 *)(a1 + 112);
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = 27;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 124) = 0u;
  if (v2 == 1)
  {
    if (v1[1].i64[0] < 0x1BuLL)
    {
      __break(1u);
    }
    else
    {
      v4 = 0;
      v5 = v1 + 10;
      do
      {
        v6 = *v5;
        v5 += 9;
        v7 = vmulq_f32(v6, v6);
        *(float *)(result + 32 + v4) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
        v4 += 4;
      }
      while (v4 != 108);
    }
  }
  return result;
}

void specialized static HandsKitUtils.extractLegacyJoints(_:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;

  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v2 + 16) = 21;
  bzero((void *)(v2 + 32), 0x2A0uLL);
  if (a1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 16);
    for (i = (_OWORD *)(v2 + 48); ; i += 2)
    {
      if (one-time initialization token for _mapping != -1)
        swift_once();
      if (v3 >= *(_QWORD *)(static HandsKitUtils._mapping + 16))
        break;
      v6 = *(_QWORD *)(static HandsKitUtils._mapping + 8 * v3 + 32);
      if (v6 < 0)
        goto LABEL_13;
      if (v6 >= v4)
        goto LABEL_14;
      if (v3 >= *(_QWORD *)(v2 + 16))
        goto LABEL_15;
      v7 = (_OWORD *)(a1 + 32 + 32 * v6);
      v8 = v7[1];
      *(i - 1) = *v7;
      *i = v8;
      if (++v3 == 21)
        return;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

double specialized static HandsKitUtils.getExtrinsicsFrom(_:toCamera:)(uint64_t a1, uint64_t a2)
{
  float32x4_t *v2;
  uint64_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double result;
  float32x4_t v17;

  v2 = *(float32x4_t **)(a1 + 64);
  v3 = *(_QWORD *)(a2 + 64);
  swift_beginAccess();
  v17 = v2[12];
  swift_beginAccess();
  v4 = *(int32x4_t *)(v3 + 192);
  v5 = *(int32x4_t *)(v3 + 208);
  v6 = *(int32x4_t *)(v3 + 224);
  v7 = vzip1q_s32(v4, v6);
  v8 = vzip1q_s32(v5, (int32x4_t)0);
  v9 = (float32x4_t)vzip1q_s32(v7, v8);
  v10 = (float32x4_t)vzip2q_s32(v7, v8);
  v11 = (float32x4_t)vzip1q_s32(vdupq_laneq_s32(v4, 2), vdupq_laneq_s32(v5, 2));
  v10.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v6, 1).i32[2];
  v11.i32[2] = *(_QWORD *)(v3 + 232);
  *(float32x2_t *)v6.i8 = vsub_f32(0, (float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)(v3 + 240))), v10, *(float32x2_t *)(v3 + 240), 1), v11, *(float32x4_t *)(v3 + 240), 2));
  objc_msgSend((id)objc_opt_self(), sel_createTransformFromRotation_AndTranslation_, *(double *)v9.i64, *(double *)v10.i64, *(double *)v11.i64, *(double *)v6.i64);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v17.f32[0]), v13, *(float32x2_t *)v17.f32, 1), v14, v17, 2), v15, v17, 3).u64[0];
  return result;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    v5 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v6 = *(_QWORD *)(result + 32 + 8 * v2);
      v7 = v4;
      v8 = v5;
      *((_QWORD *)&v7 + (v2 & 3)) = v6;
      v4 = v7;
      v5 = v8;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 8;
    if ((unint64_t)(v1 - 1) < 8)
      v3 = v1 - 1;
    v4 = 0uLL;
    v5 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 7)
      {
        __break(1u);
        goto LABEL_10;
      }
      v6 = *(_DWORD *)(result + 32 + 4 * v2);
      v7 = v4;
      v8 = v5;
      *((_DWORD *)&v7 + (v2 & 7)) = v6;
      v4 = v7;
      v5 = v8;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 7)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 8;
    if ((unint64_t)(v1 - 1) < 8)
      v3 = v1 - 1;
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 7)
      {
        __break(1u);
        goto LABEL_10;
      }
      v8 = *(_QWORD *)(result + 32 + 8 * v2);
      v9 = v4;
      v10 = v5;
      v11 = v6;
      v12 = v7;
      *((_QWORD *)&v9 + (v2 & 7)) = v8;
      v6 = v11;
      v7 = v12;
      v4 = v9;
      v5 = v10;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 7)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized static HandsKitUtils.project3DPointTo2D(_:withSourceImage:)(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(double *)(a1 + 184);
  v11 = 0;
  swift_beginAccess();
  v8 = *(_OWORD *)(v2 + 80);
  v9 = *(_OWORD *)(v2 + 96);
  v7 = *(_OWORD *)(v2 + 64);
  swift_beginAccess();
  v6 = *(_OWORD *)(v2 + 112);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 24))
    v4 = *(_QWORD *)(v2 + 16) != 0;
  else
    v4 = -1;
  objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v4, &v11, a2, *(double *)&v7, *(double *)&v8, *(double *)&v9, *(double *)&v6, v3);
  return v11;
}

float32x2_t specialized static HandsKitUtils.calculate2DHandCenter(_:)(_QWORD *a1)
{
  float32x2_t v1;
  float32x2_t v2;
  unsigned __int32 v3;
  int32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  unsigned __int32 v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v14;
  uint64_t v15;
  _WORD v16[12];
  uint64_t v17;

  if (a1[2] == 4)
  {
    v1 = (float32x2_t)a1[4];
    v2 = (float32x2_t)a1[5];
    v3 = vmul_f32(v1, (float32x2_t)0x3E9249253E924925).u32[0];
    v4 = (int32x2_t)vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v1, (int32x2_t)v2), (float32x2_t)0x3E9249253E924925);
    v2.i32[0] = vmul_lane_f32(v2, (float32x2_t)0x3E9249253E924925, 1).u32[0];
    v5 = (float32x2_t)a1[6];
    v6 = (float32x2_t)a1[7];
    v7 = vmul_f32(v5, (float32x2_t)0x3E1249253E924925).u32[0];
    v8 = (int32x2_t)vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v5, (int32x2_t)v6), (float32x2_t)0x3E1249253E924925);
    v9.i32[0] = vmul_lane_f32(v6, (float32x2_t)0x3E1249253E924925, 1).u32[0];
    v10 = (float32x2_t)vdup_lane_s32(v4, 0);
    v10.i32[0] = v3;
    v2.i32[1] = v4.i32[1];
    v11 = vadd_f32(vadd_f32(v10, 0), v2);
    v12 = (float32x2_t)vdup_lane_s32(v8, 0);
    v12.i32[0] = v7;
    v9.i32[1] = v8.i32[1];
    return vadd_f32(vadd_f32(v11, v12), v9);
  }
  else
  {
    v14 = MEMORY[0x24BEE0D00];
    v17 = MEMORY[0x24BEE0D00];
    strcpy((char *)v16, "HandsKitUtils");
    v16[7] = -4864;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_23D9A70A0;
    *(_QWORD *)(v15 + 56) = v14;
    *(_QWORD *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v15 + 32) = 0xD000000000000045;
    *(_QWORD *)(v15 + 40) = 0x800000023D9CD690;
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004ELL, 0x800000023D9CD5C0, 149, (uint64_t)v16, v15);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    return 0;
  }
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  __int128 v7;

  if (a3 >> 1 == a2)
    goto LABEL_10;
  if ((uint64_t)(a3 >> 1) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = 0;
  v4 = 0uLL;
  do
  {
    if ((a3 >> 1) + ~a2 > 3)
    {
      __break(1u);
      goto LABEL_9;
    }
    v5 = *(_DWORD *)(result + 4 * a2 + 4 * v3);
    v6 = v3 + 1;
    v7 = v4;
    *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3))) = v5;
    v4 = v7;
    v3 = v6;
  }
  while ((a3 >> 1) - a2 != v6);
  if ((unint64_t)(v6 - 1) < 3)
    goto LABEL_10;
  return result;
}

void specialized static HandsKitUtils.computeCropBoundingBox(_:center3D:fromImage:shouldFlip:handRadius:sparseGrid:)(float32x4_t *a1, uint64_t a2, char a3, uint64_t a4, float32x2_t a5, float a6)
{
  _OWORD *v10;
  __n128 v11;
  int32x4_t v12;
  unsigned __int32 v13;
  simd_float3x3 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x2_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float v53;
  float32x2_t v54;
  int8x16_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  simd_float3x3 v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  __int128 v69;
  float32x4_t v70[2];
  float32x4_t v71;
  float32x4_t v72;
  simd_float3x3 v73;

  v67 = a1[1];
  v10 = *(_OWORD **)(a2 + 64);
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v70);
  v11 = (__n128)v67;
  v68 = vaddq_f32(v72, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v70[0], v67.f32[0]), v70[1], *(float32x2_t *)v67.f32, 1), v71, v67, 2));
  specialized static HandsKitUtils.computeOutputCameraIntrinsics(forCrop:cropShape:withRadius:)((uint64_t)&v73, v68, a5, (int32x2_t)__PAIR64__(v71.u32[1], LODWORD(a6)), v11);
  v12 = (int32x4_t)vmulq_f32(v68, v68);
  v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  v14 = v73;
  v15 = vrsqrte_f32((float32x2_t)v13);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15)));
  v17 = vmulq_n_f32(v68, vmul_f32(v16, vrsqrts_f32((float32x2_t)v13, vmul_f32(v16, v16))).f32[0]);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL);
  v19 = vmlaq_f32(vmulq_f32(v18, (float32x4_t)xmmword_23D9B0390), (float32x4_t)xmmword_23D9A3E30, v17);
  v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
  v21 = (int32x4_t)vmulq_f32(v19, v19);
  v21.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), *(float32x2_t *)v21.i8)).u32[0];
  v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
  v24 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
  v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), vnegq_f32(v17)), v24, v18);
  v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
  v27 = (int32x4_t)vmulq_f32(v25, v25);
  v27.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), *(float32x2_t *)v27.i8)).u32[0];
  *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
  v28 = vmulq_n_f32(v26, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
  if ((a3 & 1) != 0)
  {
    v29 = vmulq_f32(v24, (float32x4_t)0);
    v61 = vmlaq_f32(vmlaq_f32(vnegq_f32(v24), (float32x4_t)0, v28), (float32x4_t)0, v17);
    v62 = vaddq_f32(v17, vmlaq_f32(v29, (float32x4_t)0, v28));
    v60 = vmlaq_f32(vaddq_f32(v28, v29), (float32x4_t)0, v17);
  }
  else
  {
    v60 = v28;
    v61 = v24;
    v62 = v17;
  }
  v65 = __invert_f3(v14);
  swift_beginAccess();
  v30 = *(_QWORD *)(a4 + 16);
  if (v30)
  {
    v65.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v65.columns[0].f32[0]), v60, *(float32x2_t *)v65.columns[0].f32, 1), v62, (float32x4_t)v65.columns[0], 2);
    v64 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v65.columns[1].f32[0]), v60, *(float32x2_t *)v65.columns[1].f32, 1), v62, (float32x4_t)v65.columns[1], 2);
    v63 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v65.columns[2].f32[0]), v60, *(float32x2_t *)v65.columns[2].f32, 1), v62, (float32x4_t)v65.columns[2], 2);
    v55 = *((int8x16_t *)v10 + 7);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v31 = 0;
    *(int32x2_t *)&v32 = vdup_n_s32(0x7F7FFFFFu);
    v54 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
    *(_QWORD *)&v33 = 0x80000000800000;
    v34 = 1.0;
    while (1)
    {
      v50 = *(_QWORD *)(a4 + 8 * v31 + 32);
      v51 = *(_QWORD *)(v50 + 16);
      if (!v51)
        break;
      if (v51 == 1)
        goto LABEL_15;
      v38 = *((float32x4_t *)v10 + 4);
      v37 = *((float32x4_t *)v10 + 5);
      v39 = *((float32x4_t *)v10 + 6);
      v52 = vaddq_f32(v63, vmlaq_n_f32(vmulq_n_f32((float32x4_t)v65.columns[0], *(float *)(v50 + 32)), v64, *(float *)(v50 + 36)));
      v53 = vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v52, v52));
      if (v53 >= 0.00001)
      {
        v35 = sqrtf(v53);
        v66 = v33;
        v69 = v32;
        v58 = *((float32x4_t *)v10 + 5);
        v59 = *((float32x4_t *)v10 + 6);
        v56 = *(float32x2_t *)v52.f32;
        v57 = *((float32x4_t *)v10 + 4);
        v36 = atan2f(v35, v52.f32[2]);
        v38 = v57;
        v37 = v58;
        v39 = v59;
        v34 = 1.0;
        v40 = v36 * v36;
        v41 = v36 * (float)(v36 * v36);
        v42 = (float)(v36 * v36) * v41;
        v43 = v36 + (float)(*(float *)v55.i32 * v41);
        v44 = *(float *)&v55.i32[1] * v42;
        v45.f32[0] = v40 * v42;
        v45.f32[1] = v40 * v45.f32[0];
        v46 = vmul_f32(v54, v45);
        v33 = v66;
        v32 = v69;
        *(float32x2_t *)v47.f32 = vmul_n_f32(v56, (float)((float)((float)(v43 + v44) + v46.f32[0]) + v46.f32[1]) / v35);
        v47.i64[1] = __PAIR64__(v61.u32[3], 1.0);
      }
      else
      {
        *(float32x2_t *)v47.f32 = vmul_n_f32(*(float32x2_t *)v52.f32, v34 / v52.f32[2]);
        v47.i64[1] = __PAIR64__(v60.u32[3], LODWORD(v34));
      }
      ++v31;
      v48 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v47.f32[0]), v37, *(float32x2_t *)v47.f32, 1), v39, v47, 2);
      v49 = vdiv_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_laneq_s32(v48, 2));
      *(float32x2_t *)&v33 = vmaxnm_f32(*(float32x2_t *)&v33, v49);
      *(float32x2_t *)&v32 = vminnm_f32(*(float32x2_t *)&v32, v49);
      if (v30 == v31)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

double specialized static HandsKitUtils.getPalmCenterJoints()()
{
  _OWORD *v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_23D9A7080;
  v0[2] = xmmword_23D9B03A0;
  *(_QWORD *)&result = 11;
  v0[3] = xmmword_23D9B03B0;
  return result;
}

float specialized static HandsKitUtils.calcAvgBoneLengths(fromPose:)(uint64_t a1)
{
  float result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;

  result = 0.0;
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (one-time initialization token for _boneNames != -1)
      goto LABEL_18;
    while (1)
    {
      v3 = *(_QWORD *)(static HandsKitUtils._boneNames + 16);
      if (!v3)
        break;
      v4 = *(_QWORD *)(v2 + 16);
      v5 = (uint64_t *)(static HandsKitUtils._boneNames + 40);
      v6 = 0.0;
      v7 = *(_QWORD *)(static HandsKitUtils._boneNames + 16);
      while (1)
      {
        v8 = *(v5 - 1);
        if (v8 < 0)
          break;
        if (v8 >= v4)
          goto LABEL_15;
        v9 = *v5;
        if (*v5 < 0)
          goto LABEL_16;
        if (v9 >= v4)
          goto LABEL_17;
        v5 += 2;
        v10 = vsubq_f32(*(float32x4_t *)(v2 + 32 + 32 * v8 + 16), *(float32x4_t *)(v2 + 32 + 32 * v9 + 16));
        v11 = vmulq_f32(v10, v10);
        v6 = v6
           + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
        if (!--v7)
          return v6 / (float)v3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_once();
    }
    v6 = 0.0;
    return v6 / (float)v3;
  }
  return result;
}

float specialized static HandsKitUtils.findBoundingBoxOverlap(_:_:_:_:)(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;

  v4 = vmul_lane_f32(a4, a4, 1);
  v5 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
  v6 = vmul_f32(a4, (float32x2_t)0x3F0000003F000000);
  v7 = (int32x2_t)vmaxnm_f32(vsub_f32(vminnm_f32(vadd_f32(v5, a1), vadd_f32(v6, a3)), vmaxnm_f32(vsub_f32(a1, v5), vsub_f32(a3, v6))), 0);
  v8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)a2, v7), (float32x2_t)vzip2_s32((int32x2_t)a2, v7));
  return v8.f32[1] / (float)(vadd_f32(v8, v4).f32[0] - v8.f32[1]);
}

uint64_t specialized static HandsKitUtils.getLegacyJointsIndices()()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (one-time initialization token for _mapping != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = static HandsKitUtils._mapping;
    v1 = *(_QWORD *)(static HandsKitUtils._mapping + 16);
    v2 = MEMORY[0x24BEE4AF8];
    if (!v1)
      break;
    v8 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = 0;
    v2 = v8;
    while (1)
    {
      v4 = *(_QWORD *)(v0 + 8 * v3 + 32);
      if (v4 < 0)
        break;
      v6 = *(_QWORD *)(v8 + 16);
      v5 = *(_QWORD *)(v8 + 24);
      if (v6 >= v5 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
      ++v3;
      *(_QWORD *)(v8 + 16) = v6 + 1;
      *(_QWORD *)(v8 + 8 * v6 + 32) = v4;
      if (v1 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
  return v2;
}

float specialized static HandsKitUtils.calcAvgBoneLength(fromEnrollData:)(uint64_t *a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *a1;
  result = 0.0;
  if (*(_QWORD *)(*a1 + 16) >= 0x1AuLL)
  {
    if (one-time initialization token for _boneNamesMapping != -1)
      goto LABEL_16;
    while (1)
    {
      v3 = *(_QWORD *)(static HandsKitUtils._boneNamesMapping + 16);
      if (!v3)
        break;
      v4 = v1 + 32;
      v5 = *(_QWORD *)(v1 + 16);
      v6 = (uint64_t *)(static HandsKitUtils._boneNamesMapping + 40);
      v7 = 0.0;
      v8 = *(_QWORD *)(static HandsKitUtils._boneNamesMapping + 16);
      while (1)
      {
        v10 = *(v6 - 1);
        if (v10 >= v5)
          break;
        v11 = *v6;
        if (*v6 < 1)
        {
          v9 = 0.0;
        }
        else
        {
          if (v11 >= v5)
            goto LABEL_15;
          v9 = *(float *)(v4 + 4 * v11);
        }
        v6 += 2;
        v7 = v7 + (float)(*(float *)(v4 + 4 * v10) + v9);
        if (!--v8)
          return v7 / (float)v3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      swift_once();
    }
    v7 = 0.0;
    return v7 / (float)v3;
  }
  return result;
}

uint64_t specialized static HandsKitUtils.calcHandSize(forPose:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (*(_BYTE *)(result + 112) == 1)
  {
    v1 = *(_QWORD *)(result + 8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = 9;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      *(_OWORD *)(result + 32) = *(_OWORD *)(v1 + 48);
      if (v2 >= 0x15)
      {
        *(_OWORD *)(result + 48) = *(_OWORD *)(v1 + 688);
        if (v2 != 21)
        {
          *(_OWORD *)(result + 64) = *(_OWORD *)(v1 + 720);
          if (v2 >= 0x17)
          {
            *(_OWORD *)(result + 80) = *(_OWORD *)(v1 + 752);
            if (v2 != 23)
            {
              *(_OWORD *)(result + 96) = *(_OWORD *)(v1 + 784);
              *(_OWORD *)(result + 112) = *(_OWORD *)(v1 + 80);
              *(_OWORD *)(result + 128) = *(_OWORD *)(v1 + 112);
              *(_OWORD *)(result + 144) = *(_OWORD *)(v1 + 144);
              *(_OWORD *)(result + 160) = *(_OWORD *)(v1 + 176);
              return swift_bridgeObjectRelease();
            }
LABEL_13:
            __break(1u);
            return result;
          }
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

double _s5Hands16VideoDataStructsC011CalibrationC0VSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

uint64_t specialized static HandsKitUtils.inverseExtrinsics(_:_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 < 4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 < 7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 == 7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 < 9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v3 == 1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < 3)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t _s5Hands16VideoDataStructsC011CalibrationC0VSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 184) = 0;
  return result;
}

uint64_t type metadata accessor for HandsKitUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for HandsKitUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static HandsKitUtils.extractLegacyJoints(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static HandsKitUtils.directRegression(toArvinoMapping:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static HandsKitUtils.findBoundingBoxOverlap(_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static HandsKitUtils.calcHandSize(forPose:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static HandsKitUtils.project3DPointTo2D(_:withSourceImage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static HandsKitUtils.computeCenter3D(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of static HandsKitUtils.referenceTransform(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

double simd_mul(float32x4_t a1, simd_float3x3 a2)
{
  float32x4_t v2;
  double result;

  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(a1, v2).u64[0];
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HandsKitPipelineEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 32);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HandsKitPipelineEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HandsKitPipelineEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandsKitPipelineEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for HandsKitPipelineEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for HandsKitPipelineEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandsKitPipelineEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7B7044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsKitPipelineEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7B70E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for HandsKitPipelineEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsKitPipelineEvent);
}

uint64_t type metadata completion function for HandsKitPipelineEvent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitPipelineEvent.EventType()
{
  lazy protocol witness table accessor for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitPipelineEvent.PipelineType()
{
  lazy protocol witness table accessor for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandsKitPipelineEvent.EventType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static HandsKitPipelineEvent.EventType.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandsKitPipelineEvent.PipelineType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static HandsKitPipelineEvent.PipelineType.allCases, a1);
}

uint64_t ImageExpirationEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in ImageExpirationEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for ImageExpirationEvent, type metadata accessor for CMTimeProtobuf, (unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ImageExpirationEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in ImageExpirationEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3)
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (v3[2])
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (v3[3])
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    type metadata accessor for ImageExpirationEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in ImageExpirationEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ImageExpirationEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t protocol witness for Message.init() in conformance ImageExpirationEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ImageExpirationEvent()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ImageExpirationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ImageExpirationEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ImageExpirationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ImageExpirationEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ImageExpirationEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ImageExpirationEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ImageExpirationEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageExpirationEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageExpirationEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
  return Message.hash(into:)();
}

uint64_t HandsKitPipelineEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType();
          goto LABEL_11;
        case 3:
          lazy protocol witness table accessor for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for HandsKitPipelineEvent(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandsKitPipelineEvent.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!v0[3]
        || (lazy protocol witness table accessor for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        result = closure #1 in HandsKitPipelineEvent.traverse<A>(visitor:)((uint64_t)v0);
        if (!v1)
        {
          type metadata accessor for HandsKitPipelineEvent(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in HandsKitPipelineEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for HandsKitPipelineEvent(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandsKitPipelineEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 32));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsKitPipelineEvent()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsKitPipelineEvent()
{
  return HandsKitPipelineEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsKitPipelineEvent()
{
  return HandsKitPipelineEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsKitPipelineEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitPipelineEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitPipelineEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsKitPipelineEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitPipelineEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitPipelineEvent.EventType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitPipelineEvent.EventType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitPipelineEvent.PipelineType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitPipelineEvent.PipelineType._protobuf_nameMap, a1);
}

uint64_t CalibrationUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in CalibrationUpdateEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CalibrationUpdateEvent);
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #1 in ImageExpirationEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CalibrationUpdateEvent, type metadata accessor for Matrix2dPB, (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
          goto LABEL_5;
        case 4:
          v12 = v11;
          closure #4 in CalibrationUpdateEvent.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in ImageExpirationEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in CalibrationUpdateEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for CalibrationUpdateEvent(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CalibrationUpdateEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CalibrationUpdateEvent.traverse<A>(visitor:)(v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for CalibrationUpdateEvent);
  if (!v4)
  {
    if (*(_QWORD *)v3)
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #2 in CalibrationUpdateEvent.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #3 in CalibrationUpdateEvent.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_BYTE *)(v3 + 9) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    type metadata accessor for CalibrationUpdateEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CalibrationUpdateEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t updated;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CalibrationUpdateEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(updated + 32), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #3 in CalibrationUpdateEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t updated;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CalibrationUpdateEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(updated + 36), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t protocol witness for Message.init() in conformance CalibrationUpdateEvent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 8) = 1;
  UnknownStorage.init()();
  v4 = a2 + a1[7];
  v5 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[8];
  v7 = type metadata accessor for Matrix2dPB(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v9(v6, 1, 1, v7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a2 + a1[9], 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CalibrationUpdateEvent()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CalibrationUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CalibrationUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CalibrationUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CalibrationUpdateEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CalibrationUpdateEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CalibrationUpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CalibrationUpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CalibrationUpdateEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CalibrationUpdateEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
  return Message.hash(into:)();
}

uint64_t InputFrameDropEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      closure #1 in InputFrameDropEvent.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in InputFrameDropEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for InputFrameDropEvent(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t InputFrameDropEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in InputFrameDropEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3 != 0.0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    type metadata accessor for InputFrameDropEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in InputFrameDropEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InputFrameDropEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t protocol witness for Message.init() in conformance InputFrameDropEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance InputFrameDropEvent()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance InputFrameDropEvent()
{
  return InputFrameDropEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance InputFrameDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InputFrameDropEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance InputFrameDropEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance InputFrameDropEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static InputFrameDropEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InputFrameDropEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputFrameDropEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
  return Message.hash(into:)();
}

uint64_t PrewittPowerChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        closure #1 in CalibrationUpdateEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PrewittPowerChangeEvent);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in CalibrationUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PrewittPowerChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CalibrationUpdateEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PrewittPowerChangeEvent);
  if (!v4)
  {
    if (*v3)
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    if (v3[1])
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    type metadata accessor for PrewittPowerChangeEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CalibrationUpdateEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, __n128))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[4];

  v19[3] = a4;
  v19[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CMTimeProtobuf(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a5(0, v14);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v17 + 28), (uint64_t)v10, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v10, (uint64_t)v16, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for CMTimeProtobuf);
}

uint64_t protocol witness for Message.init() in conformance PrewittPowerChangeEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PrewittPowerChangeEvent()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PrewittPowerChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PrewittPowerChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PrewittPowerChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PrewittPowerChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PrewittPowerChangeEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PrewittPowerChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PrewittPowerChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PrewittPowerChangeEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PrewittPowerChangeEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in PrewittPowerChangeEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
}

uint64_t type metadata accessor for PrewittPowerChangeEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PrewittPowerChangeEvent);
}

uint64_t base witness table accessor for Message in PrewittPowerChangeEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
}

uint64_t base witness table accessor for Hashable in PrewittPowerChangeEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PrewittPowerChangeEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PrewittPowerChangeEvent and conformance PrewittPowerChangeEvent, type metadata accessor for PrewittPowerChangeEvent, (uint64_t)&protocol conformance descriptor for PrewittPowerChangeEvent);
}

uint64_t base witness table accessor for Equatable in InputFrameDropEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
}

uint64_t type metadata accessor for InputFrameDropEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for InputFrameDropEvent);
}

uint64_t base witness table accessor for Message in InputFrameDropEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
}

uint64_t base witness table accessor for Hashable in InputFrameDropEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in InputFrameDropEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type InputFrameDropEvent and conformance InputFrameDropEvent, type metadata accessor for InputFrameDropEvent, (uint64_t)&protocol conformance descriptor for InputFrameDropEvent);
}

uint64_t base witness table accessor for Equatable in CalibrationUpdateEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
}

uint64_t type metadata accessor for CalibrationUpdateEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CalibrationUpdateEvent);
}

uint64_t base witness table accessor for Message in CalibrationUpdateEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
}

uint64_t base witness table accessor for Hashable in CalibrationUpdateEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CalibrationUpdateEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationUpdateEvent and conformance CalibrationUpdateEvent, type metadata accessor for CalibrationUpdateEvent, (uint64_t)&protocol conformance descriptor for CalibrationUpdateEvent);
}

uint64_t base witness table accessor for Equatable in HandsKitPipelineEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
}

uint64_t base witness table accessor for Message in HandsKitPipelineEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
}

uint64_t base witness table accessor for Hashable in HandsKitPipelineEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsKitPipelineEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitPipelineEvent and conformance HandsKitPipelineEvent, type metadata accessor for HandsKitPipelineEvent, (uint64_t)&protocol conformance descriptor for HandsKitPipelineEvent);
}

uint64_t base witness table accessor for Equatable in ImageExpirationEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
}

uint64_t type metadata accessor for ImageExpirationEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ImageExpirationEvent);
}

uint64_t base witness table accessor for Message in ImageExpirationEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
}

uint64_t base witness table accessor for Hashable in ImageExpirationEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ImageExpirationEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageExpirationEvent and conformance ImageExpirationEvent, type metadata accessor for ImageExpirationEvent, (uint64_t)&protocol conformance descriptor for ImageExpirationEvent);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandsKitPipelineEvent.PipelineType()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandsKitPipelineEvent.PipelineType] and conformance [A], &demangling cache variable for type metadata for [HandsKitPipelineEvent.PipelineType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandsKitPipelineEvent.EventType()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandsKitPipelineEvent.EventType] and conformance [A], &demangling cache variable for type metadata for [HandsKitPipelineEvent.EventType]);
}

uint64_t specialized static PrewittPowerChangeEvent.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v49 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v48 = (char *)&v48 - v9;
  v10 = type metadata accessor for CMTimeProtobuf(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v54 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v55 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v48 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v48 - v27;
  v29 = type metadata accessor for PrewittPowerChangeEvent(0);
  v30 = *(int *)(v29 + 28);
  v52 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a1[v30], (uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v31 = *(int *)(v29 + 28);
  v53 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a2[v31], (uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v32 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v24, v32, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v33((uint64_t)v17, 1, v10) != 1)
  {
    v42 = (uint64_t)v54;
    v43 = v55;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v55, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v33(v32, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v32, v42, type metadata accessor for CMTimeProtobuf);
      if (*(_QWORD *)v43 == *(_QWORD *)v42 && *(_DWORD *)(v43 + 8) == *(_DWORD *)(v42 + 8))
      {
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Matrix3x3PB(v42, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Matrix3x3PB(v43, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
        if ((v46 & 1) != 0)
          goto LABEL_4;
LABEL_16:
        v40 = 0;
        return v40 & 1;
      }
      outlined destroy of Matrix3x3PB(v42, type metadata accessor for CMTimeProtobuf);
      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Matrix3x3PB(v43, type metadata accessor for CMTimeProtobuf);
      v45 = (uint64_t)v17;
      v44 = &demangling cache variable for type metadata for CMTimeProtobuf?;
LABEL_15:
      outlined destroy of Coordinate3DPB?(v45, v44);
      goto LABEL_16;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v43, type metadata accessor for CMTimeProtobuf);
LABEL_9:
    v44 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v45 = (uint64_t)v17;
    goto LABEL_15;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v33(v32, 1, v10) != 1)
    goto LABEL_9;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
LABEL_4:
  v34 = v53;
  if (*(_QWORD *)v52 != *(_QWORD *)v53 || *((_QWORD *)v52 + 1) != *((_QWORD *)v53 + 1))
    goto LABEL_16;
  v36 = v50;
  v35 = v51;
  v37 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v38 = v48;
  v37(v48, &v52[*(int *)(v29 + 24)], v51);
  v39 = v49;
  v37(v49, &v34[*(int *)(v29 + 24)], v35);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t specialized static CalibrationUpdateEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t updated;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v75;
  char v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t);
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v109 = a1;
  v110 = a2;
  v100 = type metadata accessor for UnknownStorage();
  v94 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100, v2);
  v93 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v92 = (char *)&v92 - v6;
  v104 = type metadata accessor for Matrix2dPB(0);
  v101 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104, v7);
  v96 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v102, v9);
  v98 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v105 = (uint64_t)&v92 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v14, v15);
  v95 = (uint64_t)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v103 = (char *)&v92 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v97 = (uint64_t)&v92 - v22;
  MEMORY[0x24BDAC7A8](v23, v24);
  v99 = (uint64_t)&v92 - v25;
  MEMORY[0x24BDAC7A8](v26, v27);
  v107 = (uint64_t)&v92 - v28;
  MEMORY[0x24BDAC7A8](v29, v30);
  v108 = (uint64_t)&v92 - v31;
  v32 = type metadata accessor for CMTimeProtobuf(0);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32, v34);
  v36 = (char *)&v92 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v92 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v41, v42);
  v44 = (char *)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45, v46);
  v48 = (char *)&v92 - v47;
  MEMORY[0x24BDAC7A8](v49, v50);
  v52 = (char *)&v92 - v51;
  updated = type metadata accessor for CalibrationUpdateEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(v109 + *(int *)(updated + 28), (uint64_t)v52, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v106 = (int *)updated;
  outlined init with copy of (Int32, Matrix2dPB)(v110 + *(int *)(updated + 28), (uint64_t)v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v54 = (uint64_t)&v40[*(int *)(v37 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v52, (uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v48, v54, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v55((uint64_t)v40, 1, v32) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v55(v54, 1, v32) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_4;
    }
LABEL_10:
    v68 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
LABEL_11:
    v69 = (uint64_t)v40;
LABEL_20:
    outlined destroy of Coordinate3DPB?(v69, v68);
    goto LABEL_21;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, (uint64_t)v44, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v55(v54, 1, v32) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for CMTimeProtobuf);
    goto LABEL_10;
  }
  outlined init with take of Matrix2dPB(v54, (uint64_t)v36, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v44 != *(_QWORD *)v36 || *((_DWORD *)v44 + 2) != *((_DWORD *)v36 + 2))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for CMTimeProtobuf);
    v69 = (uint64_t)v40;
    v68 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_20;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v70 & 1) == 0)
    goto LABEL_21;
LABEL_4:
  v57 = v109;
  v56 = v110;
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)v109, *(unsigned __int8 *)(v109 + 8), *(_QWORD *)v110, *(unsigned __int8 *)(v110 + 8)) & 1) == 0)goto LABEL_21;
  v58 = v106;
  v59 = v108;
  outlined init with copy of (Int32, Matrix2dPB)(v57 + v106[8], v108, &demangling cache variable for type metadata for Matrix2dPB?);
  v60 = v107;
  outlined init with copy of (Int32, Matrix2dPB)(v56 + v58[8], v107, &demangling cache variable for type metadata for Matrix2dPB?);
  v61 = v102;
  v62 = v105;
  v63 = v105 + *(int *)(v102 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v59, v105, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v60, v63, &demangling cache variable for type metadata for Matrix2dPB?);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  v65 = v104;
  if (v64(v62, 1, v104) == 1)
  {
    outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for Matrix2dPB?);
    v66 = v64(v63, 1, v65);
    v67 = (uint64_t)v103;
    if (v66 == 1)
    {
      outlined destroy of Coordinate3DPB?(v62, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_24;
    }
LABEL_19:
    v68 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v69 = v62;
    goto LABEL_20;
  }
  v71 = v99;
  outlined init with copy of (Int32, Matrix2dPB)(v62, v99, &demangling cache variable for type metadata for Matrix2dPB?);
  v72 = v64(v63, 1, v65);
  v67 = (uint64_t)v103;
  if (v72 == 1)
  {
    outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v108, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v71, type metadata accessor for Matrix2dPB);
    goto LABEL_19;
  }
  v75 = v96;
  outlined init with take of Matrix2dPB(v63, v96, type metadata accessor for Matrix2dPB);
  v76 = static Matrix2dPB.== infix(_:_:)(v71, v75);
  outlined destroy of Matrix3x3PB(v75, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v108, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v71, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v76 & 1) == 0)
    goto LABEL_21;
LABEL_24:
  v77 = v106;
  v78 = v97;
  outlined init with copy of (Int32, Matrix2dPB)(v57 + v106[9], v97, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v56 + v77[9], v67, &demangling cache variable for type metadata for Matrix2dPB?);
  v40 = v98;
  v79 = (uint64_t)&v98[*(int *)(v61 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v98, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v67, v79, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v64((uint64_t)v40, 1, v65) != 1)
  {
    v80 = v95;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, v95, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v64(v79, 1, v65) != 1)
    {
      v81 = v78;
      v82 = v96;
      outlined init with take of Matrix2dPB(v79, v96, type metadata accessor for Matrix2dPB);
      v83 = static Matrix2dPB.== infix(_:_:)(v80, v82);
      outlined destroy of Matrix3x3PB(v82, type metadata accessor for Matrix2dPB);
      outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Matrix3x3PB(v80, type metadata accessor for Matrix2dPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for Matrix2dPB?);
      if ((v83 & 1) == 0)
        goto LABEL_21;
      goto LABEL_31;
    }
    outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v80, type metadata accessor for Matrix2dPB);
    goto LABEL_29;
  }
  outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v64(v79, 1, v65) != 1)
  {
LABEL_29:
    v68 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    goto LABEL_11;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for Matrix2dPB?);
LABEL_31:
  if (*(unsigned __int8 *)(v57 + 9) == *(unsigned __int8 *)(v56 + 9))
  {
    v84 = v106;
    v85 = v57 + v106[6];
    v86 = v94;
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
    v88 = v92;
    v89 = v100;
    v87(v92, v85, v100);
    v90 = v93;
    v87(v93, v56 + v84[6], v89);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v73 = dispatch thunk of static Equatable.== infix(_:_:)();
    v91 = *(void (**)(char *, uint64_t))(v86 + 8);
    v91(v90, v89);
    v91(v88, v89);
    return v73 & 1;
  }
LABEL_21:
  v73 = 0;
  return v73 & 1;
}

uint64_t specialized static ImageExpirationEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v51 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v50 = (char *)&v50 - v9;
  v10 = type metadata accessor for CMTimeProtobuf(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v56 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v57 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v50 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v50 - v27;
  v29 = type metadata accessor for ImageExpirationEvent(0);
  v30 = *(int *)(v29 + 32);
  v54 = a1;
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v30, (uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v31 = *(int *)(v29 + 32);
  v55 = a2;
  outlined init with copy of (Int32, Matrix2dPB)(a2 + v31, (uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v32 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v24, v32, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v33((uint64_t)v17, 1, v10) != 1)
  {
    v44 = (uint64_t)v56;
    v45 = v57;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v57, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v33(v32, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v32, v44, type metadata accessor for CMTimeProtobuf);
      if (*(_QWORD *)v45 == *(_QWORD *)v44 && *(_DWORD *)(v45 + 8) == *(_DWORD *)(v44 + 8))
      {
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v48 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Matrix3x3PB(v44, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
        if ((v48 & 1) != 0)
          goto LABEL_4;
LABEL_17:
        v42 = 0;
        return v42 & 1;
      }
      outlined destroy of Matrix3x3PB(v44, type metadata accessor for CMTimeProtobuf);
      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
      v47 = (uint64_t)v17;
      v46 = &demangling cache variable for type metadata for CMTimeProtobuf?;
LABEL_16:
      outlined destroy of Coordinate3DPB?(v47, v46);
      goto LABEL_17;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
LABEL_10:
    v46 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v47 = (uint64_t)v17;
    goto LABEL_16;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v33(v32, 1, v10) != 1)
    goto LABEL_10;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
LABEL_4:
  v34 = v54;
  v35 = v55;
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)v54, *(unsigned __int8 *)(v54 + 8), *(_QWORD *)v55, *(unsigned __int8 *)(v55 + 8)) & 1) == 0|| *(_QWORD *)(v34 + 16) != *(_QWORD *)(v35 + 16)|| *(_QWORD *)(v34 + 24) != *(_QWORD *)(v35 + 24))
  {
    goto LABEL_17;
  }
  v36 = v34 + *(int *)(v29 + 28);
  v38 = v52;
  v37 = v53;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v40 = v50;
  v39(v50, v36, v53);
  v41 = v51;
  v39(v51, v35 + *(int *)(v29 + 28), v37);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v41, v37);
  v43(v40, v37);
  return v42 & 1;
}

unint64_t lazy protocol witness table accessor for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.EventType, &type metadata for HandsKitPipelineEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.EventType, &type metadata for HandsKitPipelineEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.EventType, &type metadata for HandsKitPipelineEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.EventType, &type metadata for HandsKitPipelineEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.EventType and conformance HandsKitPipelineEvent.EventType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.PipelineType, &type metadata for HandsKitPipelineEvent.PipelineType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.PipelineType, &type metadata for HandsKitPipelineEvent.PipelineType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.PipelineType, &type metadata for HandsKitPipelineEvent.PipelineType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType;
  if (!lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitPipelineEvent.PipelineType, &type metadata for HandsKitPipelineEvent.PipelineType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitPipelineEvent.PipelineType and conformance HandsKitPipelineEvent.PipelineType);
  }
  return result;
}

uint64_t specialized static InputFrameDropEvent.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  double *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t, double);
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double *v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v51 = (char *)&v50 - v9;
  v10 = type metadata accessor for CMTimeProtobuf(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v57 = (uint64_t)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v50 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v50 - v28;
  v30 = type metadata accessor for InputFrameDropEvent(0);
  v31 = *(int *)(v30 + 24);
  v55 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v34 = *(int *)(v33 + 24);
  v56 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v34, (uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v35 = (uint64_t)&v18[*(int *)(v15 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v18, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v18, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v36(v35, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  v45 = v57;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, v57, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v36(v35, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
LABEL_8:
    v46 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v47 = (uint64_t)v18;
LABEL_14:
    outlined destroy of Coordinate3DPB?(v47, v46);
    goto LABEL_15;
  }
  outlined init with take of Matrix2dPB(v35, (uint64_t)v14, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v45 != *(_QWORD *)v14 || *(_DWORD *)(v45 + 8) != *((_DWORD *)v14 + 2))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
    v47 = (uint64_t)v18;
    v46 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_14;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v48 & 1) == 0)
    goto LABEL_15;
LABEL_4:
  v37 = v56;
  if (*v55 != *v56)
  {
LABEL_15:
    v43 = 0;
    return v43 & 1;
  }
  v39 = v53;
  v38 = v54;
  v40 = *(void (**)(char *, char *, uint64_t, double))(v53 + 16);
  v41 = v51;
  v40(v51, (char *)v55 + *(int *)(v33 + 20), v54, *v55);
  v42 = v52;
  ((void (*)(char *, char *, uint64_t))v40)(v52, (char *)v37 + *(int *)(v33 + 20), v38);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v42, v38);
  v44(v41, v38);
  return v43 & 1;
}

uint64_t specialized static HandsKitPipelineEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v24;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v29 - v11;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_30;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) == 1)
  {
    if (v14)
    {
      if (v14 == 1)
      {
        if (v13 != 1)
          goto LABEL_30;
      }
      else if (v13 != 2)
      {
        goto LABEL_30;
      }
    }
    else if (v13)
    {
      goto LABEL_30;
    }
  }
  else if (v13 != v14)
  {
    goto LABEL_30;
  }
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a1 + 32))
    v15 = v15 != 0;
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    if (v16)
    {
      if (v15 != 1)
        goto LABEL_30;
    }
    else if (v15)
    {
      goto LABEL_30;
    }
  }
  else if (v15 != v16)
  {
    goto LABEL_30;
  }
  v17 = type metadata accessor for HandsKitPipelineEvent(0);
  v18 = *(int *)(v17 + 32);
  v19 = (_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if (!v20)
  {
    if (!v22)
    {
LABEL_32:
      v26 = a1 + *(int *)(v17 + 28);
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v27(v12, v26, v4);
      v27(v8, a2 + *(int *)(v17 + 28), v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v8, v4);
      v28(v12, v4);
      return v24 & 1;
    }
LABEL_30:
    v24 = 0;
    return v24 & 1;
  }
  if (!v22)
    goto LABEL_30;
  if (*v19 == *v21 && v20 == v22)
    goto LABEL_32;
  v24 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_32;
  return v24 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageExpirationEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 32);
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for ImageExpirationEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for CMTimeProtobuf(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for ImageExpirationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for ImageExpirationEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_DWORD *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for CMTimeProtobuf(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[2] = v15[2];
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v10);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for ImageExpirationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for ImageExpirationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_DWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[2] = v14[2];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageExpirationEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BC09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 28);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ImageExpirationEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BC11C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 28);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for ImageExpirationEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CalibrationUpdateEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_QWORD *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[8];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = type metadata accessor for Matrix2dPB(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      *((_BYTE *)v20 + 8) = *((_BYTE *)v21 + 8);
      v38 = v11;
      v20[2] = v21[2];
      v26 = *(int *)(v22 + 28);
      v27 = (char *)v20 + v26;
      v28 = (char *)v21 + v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = v27;
      v11 = v38;
      v38((uint64_t)v29, (uint64_t)v28, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v30 = a3[9];
    v31 = (_QWORD *)((char *)v4 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    if (v24(v32, 1, v22))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      *v31 = *v32;
      *((_BYTE *)v31 + 8) = *((_BYTE *)v32 + 8);
      v31[2] = v32[2];
      v34 = *(int *)(v22 + 28);
      v35 = (char *)v31 + v34;
      v36 = (char *)v32 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11((uint64_t)v35, (uint64_t)v36, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v31, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t destroy for CalibrationUpdateEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for CMTimeProtobuf(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v13(v6 + *(int *)(v7 + 24), v5);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  if (!v10(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v8 + *(int *)(v9 + 28), v5);
  }
  v11 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11 + *(int *)(v9 + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for CalibrationUpdateEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for Matrix2dPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
    v36 = v10;
    v18[2] = v19[2];
    v24 = *(int *)(v20 + 28);
    v25 = (char *)v18 + v24;
    v26 = (char *)v19 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = v25;
    v10 = v36;
    v36((uint64_t)v27, (uint64_t)v26, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v28 = a3[9];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  if (v22(v30, 1, v20))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *v29 = *v30;
    *((_BYTE *)v29 + 8) = *((_BYTE *)v30 + 8);
    v29[2] = v30[2];
    v32 = *(int *)(v20 + 28);
    v33 = (char *)v29 + v32;
    v34 = (char *)v30 + v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v33, (uint64_t)v34, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v29, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for CalibrationUpdateEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v47 = *(_QWORD *)(v10 - 8);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 24);
  v46(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
  v46((uint64_t)&v12[*(int *)(v14 + 24)], (uint64_t)&v13[*(int *)(v14 + 24)], v10);
LABEL_7:
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = type metadata accessor for Matrix2dPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
      v28 = *(int *)(v23 + 28);
      v45 = v24;
      v29 = v21 + v28;
      v30 = v22 + v28;
      v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = v29;
      v24 = v45;
      v44(v31, v30, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of Matrix3x3PB(v21, type metadata accessor for Matrix2dPB);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v21, (const void *)v22, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46(v21 + *(int *)(v23 + 28), v22 + *(int *)(v23 + 28), v10);
LABEL_13:
  v33 = a3[9];
  v34 = a1 + v33;
  v35 = (uint64_t)a2 + v33;
  v36 = v25(a1 + v33, 1, v23);
  v37 = v25(v35, 1, v23);
  if (!v36)
  {
    if (!v37)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v46(v34 + *(int *)(v23 + 28), v35 + *(int *)(v23 + 28), v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v34, type metadata accessor for Matrix2dPB);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v34, (const void *)v35, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  v38 = *(int *)(v23 + 28);
  v39 = v34 + v38;
  v40 = v35 + v38;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41(v39, v40, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v34, 0, 1, v23);
  return a1;
}

uint64_t initializeWithTake for CalibrationUpdateEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for Matrix2dPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
    v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v24 = a3[9];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  if (v22(v26, 1, v20))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v25 = *v26;
    *((_BYTE *)v25 + 8) = *((_BYTE *)v26 + 8);
    v25[2] = v26[2];
    v10((char *)v25 + *(int *)(v20 + 28), (char *)v26 + *(int *)(v20 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for CalibrationUpdateEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD *)(v9 - 8);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v35(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v35((uint64_t)&v11[*(int *)(v13 + 24)], (uint64_t)&v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for Matrix2dPB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v20 + *(int *)(v22 + 28), v21 + *(int *)(v22 + 28), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    outlined destroy of Matrix3x3PB(v20, type metadata accessor for Matrix2dPB);
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease();
  v35(v20 + *(int *)(v22 + 28), v21 + *(int *)(v22 + 28), v9);
LABEL_13:
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = v24(a1 + v28, 1, v22);
  v32 = v24(v30, 1, v22);
  if (!v31)
  {
    if (!v32)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      swift_bridgeObjectRelease();
      v35(v29 + *(int *)(v22 + 28), v30 + *(int *)(v22 + 28), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v29, type metadata accessor for Matrix2dPB);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v29, (const void *)v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v29 + *(int *)(v22 + 28), v30 + *(int *)(v22 + 28), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalibrationUpdateEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BD2AC(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 9);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[7];
      }
      else
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CalibrationUpdateEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BD384(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 9) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CalibrationUpdateEvent()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for InputFrameDropEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for InputFrameDropEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CMTimeProtobuf(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  return result;
}

_QWORD *initializeWithCopy for InputFrameDropEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for InputFrameDropEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for InputFrameDropEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for InputFrameDropEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputFrameDropEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BDC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for InputFrameDropEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BDC80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for InputFrameDropEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PrewittPowerChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for PrewittPowerChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for CMTimeProtobuf(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  return result;
}

_OWORD *initializeWithCopy for PrewittPowerChangeEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for PrewittPowerChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for PrewittPowerChangeEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_OWORD *assignWithTake for PrewittPowerChangeEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrewittPowerChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BE48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 24);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PrewittPowerChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7BE50C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 24);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for PrewittPowerChangeEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for HandsKitPipelineEvent.PipelineType()
{
  return &type metadata for HandsKitPipelineEvent.PipelineType;
}

ValueMetadata *type metadata accessor for HandsKitPipelineEvent.EventType()
{
  return &type metadata for HandsKitPipelineEvent.EventType;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GesturePipelineMapper.PipelineID()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GesturePipelineMapper.PipelineID()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GesturePipelineMapper.PipelineID()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GesturePipelineMapper.PipelineID(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t GesturePipelineMapper.findMappingImpl(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;

  v2 = v1;
  v4 = type metadata accessor for HandDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v62 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v60 - v10;
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v60 - v14;
  v16 = *a1;
  v17 = *(unsigned __int8 *)(v2 + 16);
  v64 = v11;
  v60 = v16;
  if (v17 != 1)
  {
    v52 = *(_QWORD *)(v16 + 16);
    v53 = MEMORY[0x24BEE4AF8];
    if (v52)
    {
      v69 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      v54 = v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v55 = *(_QWORD *)(v5 + 72);
      v53 = v69;
      do
      {
        outlined init with copy of HandDescriptor(v54, (uint64_t)v15);
        v56 = *((_QWORD *)v15 + 18);
        outlined destroy of HandDescriptor((uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
          v53 = v69;
        }
        v58 = *(_QWORD *)(v53 + 16);
        v57 = *(_QWORD *)(v53 + 24);
        if (v58 >= v57 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
          v53 = v69;
        }
        *(_QWORD *)(v53 + 16) = v58 + 1;
        *(_QWORD *)(v53 + 8 * v58 + 32) = v56;
        v54 += v55;
        --v52;
        v11 = v64;
      }
      while (v52);
      v16 = v60;
      swift_bridgeObjectRelease();
    }
    v59 = specialized Set.init<A>(_:)(v53);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v2 + 32);
    PipelineMapper.updateMaps(_:)(v59);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v16 + 16);
    if (v19)
      goto LABEL_3;
    return MEMORY[0x24BEE4AF8];
  }
  v18 = *(_QWORD *)(v2 + 32);
  specialized PipelineMapper.findMapping(_:_:)(v16, 1);
  v19 = *(_QWORD *)(v16 + 16);
  if (!v19)
    return MEMORY[0x24BEE4AF8];
LABEL_3:
  v20 = (uint64_t *)(v18 + 24);
  v21 = (uint64_t *)(v18 + 16);
  v67 = (uint64_t *)(v2 + 24);
  v22 = v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v63 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v61 = (uint64_t *)(v18 + 16);
  while (1)
  {
    outlined init with copy of HandDescriptor(v22, (uint64_t)v11);
    v24 = *((_QWORD *)v11 + 18);
    swift_beginAccess();
    v25 = *v20;
    if (*(_QWORD *)(*v20 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v27 & 1) != 0))
    {
      v66 = v23;
      v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
    }
    else
    {
      swift_endAccess();
      swift_beginAccess();
      v29 = *v21;
      if (!*(_QWORD *)(*v21 + 16))
      {
        swift_endAccess();
        goto LABEL_5;
      }
      v66 = v23;
      v30 = specialized _NativeSet.startIndex.getter(v29);
      v32 = v31;
      v34 = v33 & 1;
      v28 = specialized Set._Variant.remove(at:)(v30, v31);
      swift_endAccess();
      outlined consume of Set<CameraSource>.Index._Variant(v30, v32, v34);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v68 = *v20;
      *v20 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v24, isUniquelyReferenced_nonNull_native);
      *v20 = v68;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    v36 = *((_QWORD *)v11 + 18);
    v37 = v67;
    result = swift_beginAccess();
    v39 = v62;
    if ((v28 & 0x8000000000000000) != 0)
      break;
    if (v28 >= *(_QWORD *)(*v37 + 16))
      goto LABEL_39;
    v40 = *v37 + 16 * v28;
    v41 = *(_QWORD *)(v40 + 32);
    v42 = *(unsigned __int8 *)(v40 + 40);
    outlined init with copy of HandDescriptor((uint64_t)v11, v62);
    if (v36 != v41)
    {
      outlined destroy of HandDescriptor(v39);
LABEL_17:
      v45 = v11;
      v44 = *((_QWORD *)v11 + 18);
      LOBYTE(v42) = v45[136];
      v65 = 1;
      goto LABEL_18;
    }
    v43 = *(unsigned __int8 *)(v39 + 136);
    outlined destroy of HandDescriptor(v39);
    if (v42 != v43)
      goto LABEL_17;
    v65 = 0;
    v44 = v36;
LABEL_18:
    v46 = v67;
    v47 = (_QWORD *)*v67;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v46 = (uint64_t)v47;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v47);
      v47 = (_QWORD *)result;
      *v67 = result;
    }
    if (v28 >= v47[2])
      goto LABEL_40;
    v48 = &v47[2 * v28];
    v48[4] = v44;
    *((_BYTE *)v48 + 40) = v42;
    swift_endAccess();
    v23 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    v11 = v64;
    v50 = v23[2];
    v49 = v23[3];
    if (v50 >= v49 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v23);
    v23[2] = v50 + 1;
    v51 = &v23[3 * v50];
    v51[4] = v36;
    v51[5] = v28;
    *((_BYTE *)v51 + 48) = v65;
    v21 = v61;
LABEL_5:
    outlined destroy of HandDescriptor((uint64_t)v11);
    v22 += v63;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v23;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t GesturePipelineMapper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GesturePipelineMapper()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for GesturePipelineMapper.FixedSizePipelineArray()
{
  return &type metadata for GesturePipelineMapper.FixedSizePipelineArray;
}

uint64_t getEnumTagSinglePayload for GesturePipelineMapper.PipelineID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GesturePipelineMapper.PipelineID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GesturePipelineMapper.PipelineID()
{
  return &type metadata for GesturePipelineMapper.PipelineID;
}

unint64_t lazy protocol witness table accessor for type GesturePipelineMapper.PipelineID and conformance GesturePipelineMapper.PipelineID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GesturePipelineMapper.PipelineID and conformance GesturePipelineMapper.PipelineID;
  if (!lazy protocol witness table cache variable for type GesturePipelineMapper.PipelineID and conformance GesturePipelineMapper.PipelineID)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for GesturePipelineMapper.PipelineID, &type metadata for GesturePipelineMapper.PipelineID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GesturePipelineMapper.PipelineID and conformance GesturePipelineMapper.PipelineID);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF15DetectionResultVG_AF0gH2PBVs5NeverOTg5053_s5Hands14HandDescriptorV10toProtoBufAA0bC2PBVyFAA015gh7G0VAA12eF27O3key_AA0hI0V5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[3];
  uint64_t v44;

  v3 = type metadata accessor for DetectionResultPB(0);
  v36 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v31[1] = v1;
    v44 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v37 = v44;
    result = specialized Dictionary.startIndex.getter(a1);
    v10 = result;
    v11 = 0;
    v12 = a1 + 64;
    v13 = *(_BYTE *)(a1 + 32);
    v32 = a1 + 80;
    v33 = v7;
    v34 = v9;
    v35 = a1 + 64;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << v13)
    {
      v16 = (unint64_t)v10 >> 6;
      if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
        goto LABEL_25;
      v17 = (__int128 *)(*(_QWORD *)(a1 + 56) + 112 * v10);
      v18 = v17[5];
      v42 = v17[4];
      v43[0] = v18;
      *(_OWORD *)((char *)v43 + 9) = *(__int128 *)((char *)v17 + 89);
      v19 = v17[1];
      v38 = *v17;
      v39 = v19;
      v20 = v17[3];
      v40 = v17[2];
      v41 = v20;
      DetectionResult.toProtoBuf()((uint64_t)v6);
      v21 = v37;
      v44 = v37;
      v22 = (uint64_t)v6;
      v24 = *(_QWORD *)(v37 + 16);
      v23 = *(_QWORD *)(v37 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v21 = v44;
      }
      *(_QWORD *)(v21 + 16) = v24 + 1;
      v25 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      v37 = v21;
      result = outlined init with take of Matrix2dPB(v22, v21 + v25 + *(_QWORD *)(v36 + 72) * v24, type metadata accessor for DetectionResultPB);
      v13 = *(_BYTE *)(a1 + 32);
      v14 = 1 << v13;
      if (v10 >= 1 << v13)
        goto LABEL_26;
      v12 = v35;
      v26 = *(_QWORD *)(v35 + 8 * v16);
      if ((v26 & (1 << v10)) == 0)
        goto LABEL_27;
      LODWORD(v9) = v34;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v34)
        goto LABEL_28;
      v6 = (char *)v22;
      v27 = v26 & (-2 << (v10 & 0x3F));
      if (v27)
      {
        v14 = __clz(__rbit64(v27)) | v10 & 0xFFFFFFFFFFFFFFC0;
        v15 = v33;
      }
      else
      {
        v28 = v16 + 1;
        v29 = (v14 + 63) >> 6;
        v15 = v33;
        if (v16 + 1 < v29)
        {
          v30 = *(_QWORD *)(v35 + 8 * v28);
          if (v30)
          {
LABEL_20:
            v14 = __clz(__rbit64(v30)) + (v28 << 6);
          }
          else
          {
            while (v29 - 2 != v16)
            {
              v30 = *(_QWORD *)(v32 + 8 * v16++);
              if (v30)
              {
                v28 = v16 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v11;
      v10 = v14;
      if (v11 == v15)
        return v37;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF13PoseImageCropVG_AF0ghI2PBVs5NeverOTg5053_s5Hands14HandDescriptorV10toProtoBufAA0bC2PBVyFAA013ghi7G0VAA12eF29O3key_AA0hiJ0V5valuet_tXEfU1_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[3];
  uint64_t v50;

  v3 = type metadata accessor for PoseImageCropPB(0);
  v38 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v33[1] = v1;
    v50 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v39 = v50;
    result = specialized Dictionary.startIndex.getter(a1);
    v10 = result;
    v11 = 0;
    v12 = a1 + 64;
    v13 = *(_BYTE *)(a1 + 32);
    v34 = a1 + 80;
    v35 = v7;
    v36 = v9;
    v37 = a1 + 64;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << v13)
    {
      v16 = (unint64_t)v10 >> 6;
      if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
        goto LABEL_25;
      v17 = (__int128 *)(*(_QWORD *)(a1 + 56) + 176 * v10);
      v18 = v17[9];
      v48 = v17[8];
      v49[0] = v18;
      *(_OWORD *)((char *)v49 + 9) = *(__int128 *)((char *)v17 + 153);
      v19 = v17[5];
      v44 = v17[4];
      v45 = v19;
      v20 = v17[7];
      v46 = v17[6];
      v47 = v20;
      v21 = v17[1];
      v40 = *v17;
      v22 = v17[2];
      v43 = v17[3];
      v41 = v21;
      v42 = v22;
      PoseImageCrop.toProtoBuf()((uint64_t)v6);
      v23 = v39;
      v50 = v39;
      v24 = (uint64_t)v6;
      v26 = *(_QWORD *)(v39 + 16);
      v25 = *(_QWORD *)(v39 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v23 = v50;
      }
      *(_QWORD *)(v23 + 16) = v26 + 1;
      v27 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      v39 = v23;
      result = outlined init with take of Matrix2dPB(v24, v23 + v27 + *(_QWORD *)(v38 + 72) * v26, type metadata accessor for PoseImageCropPB);
      v13 = *(_BYTE *)(a1 + 32);
      v14 = 1 << v13;
      if (v10 >= 1 << v13)
        goto LABEL_26;
      v12 = v37;
      v28 = *(_QWORD *)(v37 + 8 * v16);
      if ((v28 & (1 << v10)) == 0)
        goto LABEL_27;
      LODWORD(v9) = v36;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v36)
        goto LABEL_28;
      v6 = (char *)v24;
      v29 = v28 & (-2 << (v10 & 0x3F));
      if (v29)
      {
        v14 = __clz(__rbit64(v29)) | v10 & 0xFFFFFFFFFFFFFFC0;
        v15 = v35;
      }
      else
      {
        v30 = v16 + 1;
        v31 = (v14 + 63) >> 6;
        v15 = v35;
        if (v16 + 1 < v31)
        {
          v32 = *(_QWORD *)(v37 + 8 * v30);
          if (v32)
          {
LABEL_20:
            v14 = __clz(__rbit64(v32)) + (v30 << 6);
          }
          else
          {
            while (v31 - 2 != v16)
            {
              v32 = *(_QWORD *)(v34 + 8 * v16++);
              if (v32)
              {
                v30 = v16 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v11;
      v10 = v14;
      if (v11 == v15)
        return v39;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_5Hands12CameraSourceO_Sfts5NeverOTg504_ss5d11VSf5Hands12fg34OSfIgyyrd_AB3key_Sf5valuetAE_Sfts5h85OIegnrzr_TR066_s5Hands26OperationalEnvelopeSignalsV8protoBufAcA0bcD2PBV_tcfcAA12cd7O_Q23A10V_SftXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v27;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v26;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(int *)(*(_QWORD *)(a1 + 48) + 4 * v6);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v6);
    v16 = *(_QWORD *)(v27 + 16);
    v15 = *(_QWORD *)(v27 + 24);
    if (v16 >= v15 >> 1)
    {
      v24 = v9;
      v25 = v5;
      v23 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v10 = v23;
      v9 = v24;
      v5 = v25;
      v7 = v26;
    }
    *(_QWORD *)(v27 + 16) = v16 + 1;
    v17 = v27 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v13;
    *(_BYTE *)(v17 + 40) = v13 < 0xE;
    *(_DWORD *)(v17 + 44) = v14;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v18 = *(_QWORD *)(v9 + 8 * v12);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v11 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = v12 + 1;
      v21 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v21)
      {
        v22 = *(_QWORD *)(v9 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v11 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v12)
          {
            v22 = *(_QWORD *)(v10 + 8 * v12++);
            if (v22)
            {
              v20 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  char *v4;
  Swift::Int v5;
  char v6;
  _BYTE v7[16];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (char *)(a1 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v4 += 16;
      specialized Set._Variant.insert(_:)((uint64_t)v7, v5, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type HandsKitGTInjection and conformance HandsKitGTInjection();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (char *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)((uint64_t)&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t HandDescriptor.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  int *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(_QWORD, _QWORD, _QWORD);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  uint64_t v230;
  int64_t i;
  char v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t (*v252)(_QWORD, _QWORD, _QWORD);
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  float v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  _QWORD *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t (*v285)(_QWORD, _QWORD, _QWORD);
  int v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  __int128 v304;
  _OWORD *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _DWORD *v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  __int128 v324;
  _OWORD *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _DWORD *v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (*v349)(_QWORD, _QWORD, _QWORD);
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t (*v353)(_QWORD, _QWORD, _QWORD);
  uint64_t v354;
  _OWORD *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _DWORD *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  char *v367;
  uint64_t v368;
  unsigned __int8 *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  unsigned __int8 *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t (*v388)(_QWORD, _QWORD, _QWORD);
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void (*v405)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v406;
  _DWORD *v407;
  _BYTE *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  __int128 v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  __int128 v424;
  __int128 v425;
  uint64_t *v426;
  uint64_t v427;
  int64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _BYTE *v432;
  uint64_t v433;
  char v434;
  int v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int *v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t (*v455)(_QWORD, _QWORD, _QWORD);
  uint64_t v456;
  unint64_t v457;
  float v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _DWORD *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _BYTE *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unsigned int (*v481)(_QWORD, _QWORD, _QWORD);
  _QWORD *v482;
  char *v483;
  uint64_t v484;
  int v485;
  char v486;
  uint64_t v487;
  char v488;
  char v489;
  char v490;
  char v491;
  uint64_t v492;
  int v493;
  char v494;
  int v495;
  int v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  int *v500;
  int v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unsigned int v510;
  _QWORD *v511;
  char *v512;
  uint64_t v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  _DWORD *v517;
  int *v518;
  int v519;
  int *v520;
  int v521;
  uint64_t *v522;
  uint64_t v523;
  char v524;
  char *v525;
  char v526;
  char v527;
  uint64_t v528;
  _BYTE *v529;
  uint64_t v530;
  uint64_t v531;
  _BYTE *v532;
  _BYTE *v533;
  _BYTE *v534;
  _QWORD *v535;
  _QWORD *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t (*v539)(_QWORD, _QWORD, _QWORD);
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned __int8 v549;
  __int128 v550;
  _OWORD *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t (*v554)(_QWORD, _QWORD, _QWORD);
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  __int128 v562;
  _QWORD *v563;
  _BYTE *v564;
  uint64_t v565;
  uint64_t v566;
  _BYTE *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t (*v570)(_QWORD, _QWORD, _QWORD);
  int v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  char v575;
  __int128 *v576;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v578;
  unint64_t v579;
  __int128 v580;
  _OWORD *v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 *v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t (*v605)(_QWORD, _QWORD, _QWORD);
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t *v610;
  _BYTE *v611;
  _BYTE *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t (*v615)(_QWORD, _QWORD, _QWORD);
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t result;
  uint64_t v623;
  _QWORD v624[2];
  uint64_t v625;
  uint64_t v626;
  _QWORD *v627;
  uint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  _QWORD *v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  _QWORD *v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  _QWORD *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _DWORD *v656;
  _QWORD *v657;
  _QWORD *v658;
  uint64_t v659;
  uint64_t v660;
  _OWORD *v661;
  char *v662;
  uint64_t v663;
  _QWORD *v664;
  uint64_t v665;
  uint64_t v666;
  void (*v667)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  _QWORD *v672;
  void (*v673)(_QWORD, _QWORD, _QWORD);
  uint64_t v674;
  uint64_t v675;
  unint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  __int128 v685;
  _OWORD *v686;
  uint64_t v687;
  _OWORD *v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  _QWORD *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  char *v700;
  char *v701;
  _QWORD *v702;
  _QWORD *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  _QWORD *v723;
  __int128 v724;
  uint64_t v725;
  uint64_t v726;
  int *v727;
  uint64_t v728;
  char *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  __int128 v733;
  __int128 *v734;
  __int128 v735;
  uint64_t v736;
  _BYTE *v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  _BYTE v744[32];
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  uint64_t v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  _OWORD v761[3];
  _OWORD v762[6];
  char v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  uint64_t v767;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v678 = (uint64_t)v624 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v679 = (uint64_t)v624 - v10;
  MEMORY[0x24BDAC7A8](v9, v11);
  v722 = (uint64_t)v624 - v12;
  v721 = type metadata accessor for HandDescriptorInternalPB(0);
  v720 = *(_QWORD *)(v721 - 8);
  MEMORY[0x24BDAC7A8](v721, v13);
  v677 = (uint64_t)v624 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v676 = (_QWORD *)((char *)v624 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternalPB?);
  v20 = MEMORY[0x24BDAC7A8](v18, v19);
  v675 = (uint64_t)v624 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v22);
  v719 = (uint64_t)v624 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v26 = MEMORY[0x24BDAC7A8](v24, v25);
  v730 = (uint64_t)v624 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v28);
  v736 = (uint64_t)v624 - v29;
  v728 = type metadata accessor for PoseImageCropPB(0);
  v681 = *(_QWORD *)(v728 - 8);
  v31 = MEMORY[0x24BDAC7A8](v728, v30);
  v726 = (uint64_t)v624 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v33);
  v729 = (char *)v624 - v34;
  v717 = type metadata accessor for PoseSpecPB(0);
  v715 = *(_QWORD *)(v717 - 8);
  MEMORY[0x24BDAC7A8](v717, v35);
  v672 = (_QWORD *)((char *)v624 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  v39 = MEMORY[0x24BDAC7A8](v37, v38);
  v671 = (uint64_t)v624 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39, v41);
  v714 = (uint64_t)v624 - v42;
  v713 = type metadata accessor for PinchInfoPB(0);
  v712 = *(_QWORD *)(v713 - 8);
  MEMORY[0x24BDAC7A8](v713, v43);
  v668 = (_QWORD *)((char *)v624 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  v47 = MEMORY[0x24BDAC7A8](v45, v46);
  v666 = (uint64_t)v624 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47, v49);
  v711 = (uint64_t)v624 - v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFeaturesPB?);
  v53 = MEMORY[0x24BDAC7A8](v51, v52);
  v660 = (uint64_t)v624 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x24BDAC7A8](v53, v55);
  v665 = (uint64_t)v624 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56, v58);
  v663 = (uint64_t)v624 - v60;
  MEMORY[0x24BDAC7A8](v59, v61);
  v659 = (uint64_t)v624 - v62;
  v710 = type metadata accessor for PinchFeaturesPB(0);
  v709 = *(_QWORD *)(v710 - 8);
  v64 = MEMORY[0x24BDAC7A8](v710, v63);
  v658 = (_QWORD *)((char *)v624 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = MEMORY[0x24BDAC7A8](v64, v66);
  v664 = (_QWORD *)((char *)v624 - v68);
  v70 = MEMORY[0x24BDAC7A8](v67, v69);
  v662 = (char *)v624 - v71;
  MEMORY[0x24BDAC7A8](v70, v72);
  v657 = (_QWORD *)((char *)v624 - v73);
  v706 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v705 = *(_QWORD *)(v706 - 8);
  MEMORY[0x24BDAC7A8](v706, v74);
  v656 = (_DWORD *)((char *)v624 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v78 = MEMORY[0x24BDAC7A8](v76, v77);
  v655 = (uint64_t)v624 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v78, v80);
  v704 = (uint64_t)v624 - v81;
  v82 = type metadata accessor for HandPresence(0);
  v680 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82, v83);
  v737 = (char *)v624 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v698 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v697 = *(_QWORD *)(v698 - 8);
  MEMORY[0x24BDAC7A8](v698, v85);
  v654 = (uint64_t)v624 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v89 = MEMORY[0x24BDAC7A8](v87, v88);
  v653 = (uint64_t)v624 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v89, v91);
  v695 = (uint64_t)v624 - v92;
  v652 = type metadata accessor for HandPosePB(0);
  v650 = *(_QWORD *)(v652 - 8);
  MEMORY[0x24BDAC7A8](v652, v93);
  v627 = (_QWORD *)((char *)v624 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  v97 = MEMORY[0x24BDAC7A8](v95, v96);
  v626 = (uint64_t)v624 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v97, v99);
  v648 = (uint64_t)v624 - v100;
  *(_QWORD *)&v693 = type metadata accessor for CompactHandPosePB(0);
  *(_QWORD *)&v692 = *(_QWORD *)(v693 - 8);
  MEMORY[0x24BDAC7A8](v693, v101);
  v651 = (_QWORD *)((char *)v624 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompactHandPosePB?);
  v105 = MEMORY[0x24BDAC7A8](v103, v104);
  v649 = (uint64_t)v624 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v105, v107);
  *(_QWORD *)&v691 = (char *)v624 - v108;
  *(_QWORD *)&v724 = type metadata accessor for Coordinate3DPB(0);
  v723 = *(_QWORD **)(v724 - 8);
  v110 = MEMORY[0x24BDAC7A8](v724, v109);
  v703 = (_QWORD *)((char *)v624 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = MEMORY[0x24BDAC7A8](v110, v112);
  v702 = (_QWORD *)((char *)v624 - v114);
  v116 = MEMORY[0x24BDAC7A8](v113, v115);
  v700 = (char *)v624 - v117;
  v119 = MEMORY[0x24BDAC7A8](v116, v118);
  v647 = (_QWORD *)((char *)v624 - v120);
  v122 = MEMORY[0x24BDAC7A8](v119, v121);
  v646 = (_QWORD *)((char *)v624 - v123);
  v125 = MEMORY[0x24BDAC7A8](v122, v124);
  v644 = (_QWORD *)((char *)v624 - v126);
  v128 = MEMORY[0x24BDAC7A8](v125, v127);
  v641 = (_QWORD *)((char *)v624 - v129);
  v131 = MEMORY[0x24BDAC7A8](v128, v130);
  v640 = (_QWORD *)((char *)v624 - v132);
  v134 = MEMORY[0x24BDAC7A8](v131, v133);
  v638 = (_QWORD *)((char *)v624 - v135);
  v137 = MEMORY[0x24BDAC7A8](v134, v136);
  v635 = (_QWORD *)((char *)v624 - v138);
  v140 = MEMORY[0x24BDAC7A8](v137, v139);
  v634 = (_QWORD *)((char *)v624 - v141);
  MEMORY[0x24BDAC7A8](v140, v142);
  v632 = (_QWORD *)((char *)v624 - v143);
  v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  v146 = MEMORY[0x24BDAC7A8](v144, v145);
  v701 = (char *)v624 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = MEMORY[0x24BDAC7A8](v146, v148);
  v699 = (uint64_t)v624 - v150;
  v152 = MEMORY[0x24BDAC7A8](v149, v151);
  v696 = (uint64_t)v624 - v153;
  v155 = MEMORY[0x24BDAC7A8](v152, v154);
  v645 = (uint64_t)v624 - v156;
  v158 = MEMORY[0x24BDAC7A8](v155, v157);
  v643 = (uint64_t)v624 - v159;
  v161 = MEMORY[0x24BDAC7A8](v158, v160);
  v642 = (uint64_t)v624 - v162;
  v164 = MEMORY[0x24BDAC7A8](v161, v163);
  *(_QWORD *)&v689 = (char *)v624 - v165;
  v167 = MEMORY[0x24BDAC7A8](v164, v166);
  v639 = (uint64_t)v624 - v168;
  v170 = MEMORY[0x24BDAC7A8](v167, v169);
  v637 = (uint64_t)v624 - v171;
  v173 = MEMORY[0x24BDAC7A8](v170, v172);
  v636 = (uint64_t)v624 - v174;
  v176 = MEMORY[0x24BDAC7A8](v173, v175);
  v687 = (uint64_t)v624 - v177;
  v179 = MEMORY[0x24BDAC7A8](v176, v178);
  v633 = (uint64_t)v624 - v180;
  v182 = MEMORY[0x24BDAC7A8](v179, v181);
  v631 = (uint64_t)v624 - v183;
  v185 = MEMORY[0x24BDAC7A8](v182, v184);
  v630 = (uint64_t)v624 - v186;
  MEMORY[0x24BDAC7A8](v185, v187);
  *(_QWORD *)&v685 = (char *)v624 - v188;
  v189 = type metadata accessor for CameraPairTransitionPB(0);
  v683 = *(_QWORD *)(v189 - 8);
  v684 = v189;
  MEMORY[0x24BDAC7A8](v189, v190);
  v629 = (_QWORD *)((char *)v624 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0));
  v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB?);
  v194 = MEMORY[0x24BDAC7A8](v192, v193);
  v628 = (uint64_t)v624 - ((v195 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v194, v196);
  v682 = (uint64_t)v624 - v197;
  v198 = type metadata accessor for DetectionResultPB(0);
  v199 = *(_QWORD *)(v198 - 8);
  v201 = MEMORY[0x24BDAC7A8](v198, v200);
  *(_QWORD *)&v735 = (char *)v624 - ((v202 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v201, v203);
  v205 = (char *)v624 - v204;
  *(_WORD *)(a2 + 4) = 514;
  *(_OWORD *)(a2 + 16) = 0u;
  v625 = a2 + 16;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 138) = 2;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 1;
  *(_BYTE *)(a2 + 281) = 0;
  v206 = (int *)type metadata accessor for HandDescriptor();
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v207 = a2 + v206[17];
  v208 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v716 = *(_QWORD *)(v208 - 8);
  v673 = *(void (**)(_QWORD, _QWORD, _QWORD))(v716 + 56);
  v674 = v207;
  v718 = v208;
  v673(v207, 1, 1);
  v209 = a2 + v206[19];
  *(_QWORD *)v209 = 0;
  *(_QWORD *)(v209 + 8) = 0;
  v686 = (_OWORD *)v209;
  *(_BYTE *)(v209 + 16) = 1;
  v210 = a2 + v206[20];
  *(_QWORD *)v210 = 0;
  *(_QWORD *)(v210 + 8) = 0;
  v688 = (_OWORD *)v210;
  *(_BYTE *)(v210 + 16) = 1;
  v211 = a2 + v206[21];
  *(_QWORD *)v211 = 0;
  *(_QWORD *)(v211 + 8) = 0;
  *(_QWORD *)&v690 = v211;
  *(_BYTE *)(v211 + 16) = 1;
  v212 = a2 + v206[22];
  *(_OWORD *)(v212 + 32) = 0u;
  *(_OWORD *)(v212 + 48) = 0u;
  *(_OWORD *)v212 = 0u;
  *(_OWORD *)(v212 + 16) = 0u;
  v694 = (_QWORD *)v212;
  *(_BYTE *)(v212 + 64) = 1;
  v213 = a2 + v206[24];
  v214 = type metadata accessor for HandDescriptorInternal();
  v215 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v214 - 8) + 56);
  v669 = v214;
  v670 = v213;
  v667 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v215;
  v215(v213, 1, 1);
  v216 = a2 + v206[27];
  *(_QWORD *)v216 = 0;
  v708 = (_QWORD *)v216;
  *(_BYTE *)(v216 + 8) = 1;
  v217 = a2 + v206[28];
  *(_OWORD *)(v217 + 16) = 0u;
  *(_OWORD *)(v217 + 32) = 0u;
  *(_OWORD *)v217 = 0u;
  v661 = (_OWORD *)v217;
  *(_WORD *)(v217 + 48) = 256;
  v218 = MEMORY[0x24BEE4AF8];
  v707 = v206[29];
  *(_QWORD *)(a2 + v707) = MEMORY[0x24BEE4AF8];
  v219 = a2 + v206[31];
  *(_QWORD *)(v219 + 48) = 0;
  *(_OWORD *)(v219 + 16) = 0u;
  *(_OWORD *)(v219 + 32) = 0u;
  *(_OWORD *)v219 = 0u;
  v220 = a2 + v206[36];
  v221 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 56))(v220, 1, 1, v221);
  v222 = a2 + v206[37];
  *(_BYTE *)v222 = 2;
  *(_DWORD *)(v222 + 4) = 0;
  *(_BYTE *)(v222 + 8) = 1;
  v727 = v206;
  v223 = v206[38];
  v725 = a2;
  v224 = a2 + v223;
  *(_DWORD *)v224 = 2;
  *(_QWORD *)(v224 + 8) = 0;
  *(_BYTE *)(v224 + 16) = 1;
  *(_QWORD *)(v224 + 24) = 0;
  *(_BYTE *)(v224 + 32) = 1;
  *(_QWORD *)(v224 + 40) = 0;
  *(_BYTE *)(v224 + 48) = 1;
  v225 = type metadata accessor for HandDescriptorPB(0);
  *(_DWORD *)(v224 + 49) = 0;
  v732 = *(int *)(v225 + 20);
  v731 = a1;
  v226 = *(_QWORD *)(a1 + v732);
  swift_beginAccess();
  v227 = *(_QWORD *)(v226 + 24);
  v228 = *(_QWORD *)(v227 + 16);
  if (v228)
  {
    v764 = v218;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v228, 0);
    v229 = *(unsigned __int8 *)(v199 + 80);
    v624[1] = v227;
    v230 = v227 + ((v229 + 32) & ~v229);
    *(_QWORD *)&v733 = *(_QWORD *)(v199 + 72);
    v734 = &v756;
    v218 = v764;
    for (i = v228 - 1; ; --i)
    {
      outlined init with copy of TrackingUpdateDataPB(v230, (uint64_t)v205, type metadata accessor for DetectionResultPB);
      v232 = v205[32];
      *(_QWORD *)&v755 = *((_QWORD *)v205 + 3);
      BYTE8(v755) = v232;
      v233 = v735;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v205, v735, type metadata accessor for DetectionResultPB);
      DetectionResult.init(protoBuf:)(v233, (uint64_t)v734);
      outlined destroy of Matrix3x3PB((uint64_t)v205, type metadata accessor for DetectionResultPB);
      v742 = v759;
      v743 = v760;
      *(_OWORD *)v744 = v761[0];
      *(_OWORD *)&v744[9] = *(_OWORD *)((char *)v761 + 9);
      v738 = v755;
      v739 = v756;
      v740 = v757;
      v741 = v758;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v218 + 16) + 1, 1);
        v218 = v764;
      }
      v235 = *(_QWORD *)(v218 + 16);
      v234 = *(_QWORD *)(v218 + 24);
      if (v235 >= v234 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v234 > 1, v235 + 1, 1);
        v218 = v764;
      }
      *(_QWORD *)(v218 + 16) = v235 + 1;
      v236 = (_OWORD *)(v218 + (v235 << 7));
      v237 = v738;
      v238 = v739;
      v239 = v741;
      v236[4] = v740;
      v236[5] = v239;
      v236[2] = v237;
      v236[3] = v238;
      v240 = v742;
      v241 = v743;
      v242 = *(_OWORD *)v744;
      *(_OWORD *)((char *)v236 + 137) = *(_OWORD *)&v744[9];
      v236[7] = v241;
      v236[8] = v242;
      v236[6] = v240;
      if (!i)
        break;
      v230 += v733;
    }
    swift_bridgeObjectRelease();
  }
  v243 = v731;
  if (*(_QWORD *)(v218 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
    v244 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v244 = MEMORY[0x24BEE4B00];
  }
  v767 = v244;
  v245 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v245, 1, &v767);
  swift_bridgeObjectRelease();
  v246 = v725;
  *(_QWORD *)(v725 + v727[18]) = v767;
  v247 = *(_QWORD *)(v243 + v732);
  swift_beginAccess();
  *(_QWORD *)(v246 + 144) = *(_QWORD *)(v247 + 16);
  v248 = (_DWORD *)(v247
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  swift_beginAccess();
  *(_DWORD *)v246 = *v248;
  v249 = v247
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  v250 = v682;
  outlined init with copy of (Int32, Matrix2dPB)(v249, v682, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v251 = v684;
  v252 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v683 + 48);
  LODWORD(v249) = v252(v250, 1, v684);
  outlined destroy of Coordinate3DPB?(v250, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v734 = 0;
  if ((_DWORD)v249 == 1)
  {
    v253 = 0;
    v254 = *MEMORY[0x24BDAEE00];
    v255 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v256 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v257 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v258 = 0uLL;
    v259 = 1.0;
    v260 = 0uLL;
    v261 = *MEMORY[0x24BDAEE00];
    v262 = v255;
    v263 = v256;
    v264 = v257;
    v265 = 0uLL;
    v266 = 0uLL;
    v267 = 0uLL;
    v268 = 0uLL;
    v269 = 0uLL;
    v270 = 0uLL;
    v271 = v732;
    v272 = v724;
    v273 = v731;
  }
  else
  {
    v274 = v247
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
    swift_beginAccess();
    v275 = v628;
    outlined init with copy of (Int32, Matrix2dPB)(v274, v628, &demangling cache variable for type metadata for CameraPairTransitionPB?);
    v276 = v252(v275, 1, v251);
    v277 = v251;
    v272 = v724;
    v278 = v629;
    if (v276 == 1)
    {
      *v629 = 0;
      UnknownStorage.init()();
      v279 = (char *)v278 + *(int *)(v277 + 28);
      v280 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v280 - 8) + 56))(v279, 1, 1, v280);
      outlined destroy of Coordinate3DPB?(v275, &demangling cache variable for type metadata for CameraPairTransitionPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v275, (uint64_t)v629, type metadata accessor for CameraPairTransitionPB);
    }
    v281 = v732;
    v273 = v731;
    CameraPairTransition.init(protoBuf:)((uint64_t)v278, (uint64_t)&v738);
    v254 = v738;
    v255 = v739;
    v256 = v740;
    v257 = v741;
    v259 = *(float *)&v742;
    v765 = *(_QWORD *)((char *)&v742 + 4);
    v766 = HIDWORD(v742);
    v261 = v743;
    v262 = *(_OWORD *)v744;
    v263 = *(_OWORD *)&v744[16];
    v264 = v745;
    v258 = v746;
    v260 = v747;
    v265 = v748;
    v266 = v749;
    v267 = v750;
    v268 = v751;
    v269 = v752;
    v270 = v753;
    v253 = v754;
    v247 = *(_QWORD *)(v273 + v281);
    v271 = v281;
  }
  v282 = v246 + v727[35];
  *(_QWORD *)(v282 + 68) = v765;
  *(_DWORD *)(v282 + 76) = v766;
  v283 = v247
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  *(_OWORD *)v282 = v254;
  *(_OWORD *)(v282 + 16) = v255;
  *(_OWORD *)(v282 + 32) = v256;
  *(_OWORD *)(v282 + 48) = v257;
  *(float *)(v282 + 64) = v259;
  *(_OWORD *)(v282 + 80) = v261;
  *(_OWORD *)(v282 + 96) = v262;
  *(_OWORD *)(v282 + 112) = v263;
  *(_OWORD *)(v282 + 128) = v264;
  *(_OWORD *)(v282 + 144) = v258;
  *(_OWORD *)(v282 + 160) = v260;
  *(_OWORD *)(v282 + 176) = v265;
  *(_OWORD *)(v282 + 192) = v266;
  *(_OWORD *)(v282 + 208) = v267;
  *(_OWORD *)(v282 + 224) = v268;
  *(_OWORD *)(v282 + 240) = v269;
  *(_OWORD *)(v282 + 256) = v270;
  *(_QWORD *)(v282 + 272) = v253;
  swift_beginAccess();
  v284 = v685;
  outlined init with copy of (Int32, Matrix2dPB)(v283, v685, &demangling cache variable for type metadata for Coordinate3DPB?);
  v285 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v723[6];
  v286 = v285(v284, 1, v272);
  outlined destroy of Coordinate3DPB?(v284, &demangling cache variable for type metadata for Coordinate3DPB?);
  v287 = *(_QWORD *)(v273 + v271);
  v288 = 0uLL;
  v735 = 0u;
  v289 = v693;
  if (v286 != 1)
  {
    v290 = v287
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v291 = v290;
    v292 = v630;
    outlined init with copy of (Int32, Matrix2dPB)(v291, v630, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v292, 1, v272) == 1)
    {
      v293 = v632;
      *v632 = 0;
      v293[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v292, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v293 = v632;
      outlined init with take of Matrix2dPB(v292, (uint64_t)v632, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v294) = *v293;
    v733 = v294;
    outlined destroy of Matrix3x3PB((uint64_t)v293, type metadata accessor for Coordinate3DPB);
    v295 = v287
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v296 = v295;
    v297 = v631;
    outlined init with copy of (Int32, Matrix2dPB)(v296, v631, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v297, 1, v272) == 1)
    {
      v298 = v634;
      *v634 = 0;
      *((_DWORD *)v298 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v297, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v298 = v634;
      outlined init with take of Matrix2dPB(v297, (uint64_t)v634, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v299) = *((_DWORD *)v298 + 1);
    v685 = v299;
    outlined destroy of Matrix3x3PB((uint64_t)v298, type metadata accessor for Coordinate3DPB);
    v300 = v287
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v301 = v300;
    v302 = v633;
    outlined init with copy of (Int32, Matrix2dPB)(v301, v633, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v302, 1, v272) == 1)
    {
      v303 = v635;
      *v635 = 0;
      *((_DWORD *)v303 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v302, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v303 = v635;
      outlined init with take of Matrix2dPB(v302, (uint64_t)v635, type metadata accessor for Coordinate3DPB);
    }
    *(_QWORD *)&v304 = __PAIR64__(v685, v733);
    *((_QWORD *)&v304 + 1) = *((unsigned int *)v303 + 2);
    v733 = v304;
    outlined destroy of Matrix3x3PB((uint64_t)v303, type metadata accessor for Coordinate3DPB);
    v288 = v733;
  }
  v305 = v686;
  *v686 = v288;
  *((_BYTE *)v305 + 16) = v286 == 1;
  v306 = v287
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  swift_beginAccess();
  v307 = v687;
  outlined init with copy of (Int32, Matrix2dPB)(v306, v687, &demangling cache variable for type metadata for Coordinate3DPB?);
  v308 = v285(v307, 1, v272);
  outlined destroy of Coordinate3DPB?(v307, &demangling cache variable for type metadata for Coordinate3DPB?);
  v309 = *(_QWORD *)(v731 + v732);
  if (v308 != 1)
  {
    v310 = v309
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v311 = v310;
    v312 = v636;
    outlined init with copy of (Int32, Matrix2dPB)(v311, v636, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v312, 1, v272) == 1)
    {
      v313 = v638;
      *v638 = 0;
      v313[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v312, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v313 = v638;
      outlined init with take of Matrix2dPB(v312, (uint64_t)v638, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v314) = *v313;
    v735 = v314;
    outlined destroy of Matrix3x3PB((uint64_t)v313, type metadata accessor for Coordinate3DPB);
    v315 = v309
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v316 = v315;
    v317 = v637;
    outlined init with copy of (Int32, Matrix2dPB)(v316, v637, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v317, 1, v272) == 1)
    {
      v318 = v640;
      *v640 = 0;
      *((_DWORD *)v318 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v317, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v318 = v640;
      outlined init with take of Matrix2dPB(v317, (uint64_t)v640, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v319) = *((_DWORD *)v318 + 1);
    v733 = v319;
    outlined destroy of Matrix3x3PB((uint64_t)v318, type metadata accessor for Coordinate3DPB);
    v320 = v309
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v321 = v320;
    v322 = v639;
    outlined init with copy of (Int32, Matrix2dPB)(v321, v639, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v322, 1, v272) == 1)
    {
      v323 = v641;
      *v641 = 0;
      *((_DWORD *)v323 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v322, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v323 = v641;
      outlined init with take of Matrix2dPB(v322, (uint64_t)v641, type metadata accessor for Coordinate3DPB);
    }
    *(_QWORD *)&v324 = __PAIR64__(v733, v735);
    *((_QWORD *)&v324 + 1) = *((unsigned int *)v323 + 2);
    v735 = v324;
    outlined destroy of Matrix3x3PB((uint64_t)v323, type metadata accessor for Coordinate3DPB);
  }
  v325 = v688;
  *v688 = v735;
  *((_BYTE *)v325 + 16) = v308 == 1;
  v326 = v309
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  swift_beginAccess();
  v327 = v689;
  outlined init with copy of (Int32, Matrix2dPB)(v326, v689, &demangling cache variable for type metadata for Coordinate3DPB?);
  v328 = v285(v327, 1, v272);
  outlined destroy of Coordinate3DPB?(v327, &demangling cache variable for type metadata for Coordinate3DPB?);
  v329 = *(_QWORD *)(v731 + v732);
  v330 = 0uLL;
  if (v328 != 1)
  {
    v331 = v329
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v332 = v331;
    v333 = v642;
    outlined init with copy of (Int32, Matrix2dPB)(v332, v642, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v333, 1, v272) == 1)
    {
      v334 = v644;
      *v644 = 0;
      v334[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v333, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v334 = v644;
      outlined init with take of Matrix2dPB(v333, (uint64_t)v644, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v335) = *v334;
    v735 = v335;
    outlined destroy of Matrix3x3PB((uint64_t)v334, type metadata accessor for Coordinate3DPB);
    v336 = v329
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v337 = v336;
    v338 = v643;
    outlined init with copy of (Int32, Matrix2dPB)(v337, v643, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v338, 1, v272) == 1)
    {
      v339 = v646;
      *v646 = 0;
      *((_DWORD *)v339 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v338, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v339 = v646;
      outlined init with take of Matrix2dPB(v338, (uint64_t)v646, type metadata accessor for Coordinate3DPB);
    }
    LODWORD(v340) = *((_DWORD *)v339 + 1);
    v733 = v340;
    outlined destroy of Matrix3x3PB((uint64_t)v339, type metadata accessor for Coordinate3DPB);
    v341 = v329
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v342 = v341;
    v343 = v645;
    outlined init with copy of (Int32, Matrix2dPB)(v342, v645, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v285(v343, 1, v272) == 1)
    {
      v344 = v647;
      *v647 = 0;
      *((_DWORD *)v344 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v343, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v344 = v647;
      outlined init with take of Matrix2dPB(v343, (uint64_t)v647, type metadata accessor for Coordinate3DPB);
    }
    *(_QWORD *)&v345 = __PAIR64__(v733, v735);
    *((_QWORD *)&v345 + 1) = *((unsigned int *)v344 + 2);
    v735 = v345;
    outlined destroy of Matrix3x3PB((uint64_t)v344, type metadata accessor for Coordinate3DPB);
    v330 = v735;
  }
  *(_QWORD *)&v735 = v285;
  v346 = v690;
  *(_OWORD *)v690 = v330;
  *(_BYTE *)(v346 + 16) = v328 == 1;
  v347 = v329
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  swift_beginAccess();
  v348 = v691;
  outlined init with copy of (Int32, Matrix2dPB)(v347, v691, &demangling cache variable for type metadata for CompactHandPosePB?);
  v349 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v692 + 48);
  LODWORD(v347) = v349(v348, 1, v289);
  outlined destroy of Coordinate3DPB?(v348, &demangling cache variable for type metadata for CompactHandPosePB?);
  if ((_DWORD)v347 == 1)
  {
    v350 = *(_QWORD *)(v731 + v732);
    v351 = v350 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
    swift_beginAccess();
    v352 = v648;
    outlined init with copy of (Int32, Matrix2dPB)(v351, v648, &demangling cache variable for type metadata for HandPosePB?);
    v353 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v650 + 48);
    v354 = v652;
    LODWORD(v351) = v353(v352, 1, v652);
    outlined destroy of Coordinate3DPB?(v352, &demangling cache variable for type metadata for HandPosePB?);
    if ((_DWORD)v351 == 1)
    {
      outlined consume of HandPose?(*(_QWORD *)(v246 + 16));
      v355 = (_OWORD *)v625;
      *(_QWORD *)(v625 + 112) = 0;
      v355[5] = 0u;
      v355[6] = 0u;
      v355[3] = 0u;
      v355[4] = 0u;
      v355[1] = 0u;
      v355[2] = 0u;
      *v355 = 0u;
    }
    else
    {
      v364 = v350
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
      swift_beginAccess();
      v365 = v626;
      outlined init with copy of (Int32, Matrix2dPB)(v364, v626, &demangling cache variable for type metadata for HandPosePB?);
      if (v353(v365, 1, v354) == 1)
      {
        v366 = v627;
        *v627 = MEMORY[0x24BEE4AF8];
        v366[2] = 0;
        UnknownStorage.init()();
        v367 = (char *)v366 + *(int *)(v354 + 28);
        v368 = type metadata accessor for Matrix2dPB(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v368 - 8) + 56))(v367, 1, 1, v368);
        outlined destroy of Coordinate3DPB?(v365, &demangling cache variable for type metadata for HandPosePB?);
        v350 = *(_QWORD *)(v731 + v732);
      }
      else
      {
        v366 = v627;
        outlined init with take of Matrix2dPB(v365, (uint64_t)v627, type metadata accessor for HandPosePB);
      }
      v377 = (unsigned __int8 *)(v350
                               + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
      swift_beginAccess();
      HandPose.init(protoBuf:isLeft:)(v366, *v377, (uint64_t)&v738);
      v733 = v738;
      v692 = v740;
      v693 = v739;
      v690 = v742;
      v691 = v741;
      v689 = v743;
      v378 = *(_QWORD *)&v744[8];
      v379 = *(_QWORD *)v744;
      v380 = 256;
      if (!v744[17])
        v380 = 0;
      v381 = v380 | v744[16] | ((unint64_t)*(unsigned int *)&v744[20] << 32);
      outlined consume of HandPose?(*(_QWORD *)(v246 + 16));
      v382 = v693;
      *(_OWORD *)(v246 + 16) = v733;
      *(_OWORD *)(v246 + 32) = v382;
      v383 = v691;
      *(_OWORD *)(v246 + 48) = v692;
      *(_OWORD *)(v246 + 64) = v383;
      v384 = v689;
      *(_OWORD *)(v246 + 80) = v690;
      *(_OWORD *)(v246 + 96) = v384;
      *(_QWORD *)(v246 + 112) = v379;
      *(_QWORD *)(v246 + 120) = v378;
      *(_QWORD *)(v246 + 128) = v381;
    }
  }
  else
  {
    v356 = v731;
    v357 = v732;
    v358 = *(_QWORD *)(v731 + v732);
    v359 = v358
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
    swift_beginAccess();
    v360 = v649;
    outlined init with copy of (Int32, Matrix2dPB)(v359, v649, &demangling cache variable for type metadata for CompactHandPosePB?);
    if (v349(v360, 1, v289) == 1)
    {
      v361 = v651;
      *v651 = MEMORY[0x24BEE4AF8];
      v361[2] = 0;
      UnknownStorage.init()();
      v362 = (char *)v361 + *(int *)(v289 + 28);
      v363 = type metadata accessor for Matrix2dPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v363 - 8) + 56))(v362, 1, 1, v363);
      outlined destroy of Coordinate3DPB?(v360, &demangling cache variable for type metadata for CompactHandPosePB?);
      v358 = *(_QWORD *)(v356 + v357);
    }
    else
    {
      v361 = v651;
      outlined init with take of Matrix2dPB(v360, (uint64_t)v651, type metadata accessor for CompactHandPosePB);
    }
    v369 = (unsigned __int8 *)(v358
                             + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
    swift_beginAccess();
    HandPose.init(protoBuf:isLeft:)(v361, *v369, (uint64_t *)&v738);
    v733 = v738;
    v692 = v740;
    v693 = v739;
    v690 = v742;
    v691 = v741;
    v689 = v743;
    v370 = *(_QWORD *)&v744[8];
    v371 = *(_QWORD *)v744;
    v372 = 256;
    if (!v744[17])
      v372 = 0;
    v373 = v372 | v744[16] | ((unint64_t)*(unsigned int *)&v744[20] << 32);
    outlined consume of HandPose?(*(_QWORD *)(v246 + 16));
    v374 = v693;
    *(_OWORD *)(v246 + 16) = v733;
    *(_OWORD *)(v246 + 32) = v374;
    v375 = v691;
    *(_OWORD *)(v246 + 48) = v692;
    *(_OWORD *)(v246 + 64) = v375;
    v376 = v689;
    *(_OWORD *)(v246 + 80) = v690;
    *(_OWORD *)(v246 + 96) = v376;
    *(_QWORD *)(v246 + 112) = v371;
    *(_QWORD *)(v246 + 120) = v370;
    *(_QWORD *)(v246 + 128) = v373;
    v272 = v724;
  }
  v385 = *(_QWORD *)(v731 + v732);
  v386 = v385
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  swift_beginAccess();
  v387 = v695;
  outlined init with copy of (Int32, Matrix2dPB)(v386, v695, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v388 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v697 + 48);
  v389 = v698;
  v390 = v388(v387, 1, v698);
  outlined destroy of Coordinate3DPB?(v387, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  if (v390 == 1)
  {
    v391 = 0;
    v392 = 0;
    v393 = 0;
    v394 = 0;
    v395 = 0;
    v396 = 0;
    v397 = 0;
    v398 = 0;
    v399 = v732;
    v400 = (uint64_t)v700;
  }
  else
  {
    v401 = v385
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
    swift_beginAccess();
    v402 = v401;
    v403 = v653;
    outlined init with copy of (Int32, Matrix2dPB)(v402, v653, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    if (v388(v403, 1, v389) == 1)
    {
      v404 = v654;
      UnknownStorage.init()();
      v405 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v723[7];
      v405(v404 + *(int *)(v389 + 20), 1, 1, v272);
      v405(v404 + *(int *)(v389 + 24), 1, 1, v272);
      outlined destroy of Coordinate3DPB?(v403, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    }
    else
    {
      v404 = v654;
      outlined init with take of Matrix2dPB(v403, v654, type metadata accessor for DetectionCanonicalizationDataPB);
    }
    v399 = v732;
    v400 = (uint64_t)v700;
    DetectionCanonicalizationData.init(protoBuf:)(v404, &v738);
    v392 = *((_QWORD *)&v738 + 1);
    v391 = v738;
    v394 = *((_QWORD *)&v739 + 1);
    v393 = v739;
    v396 = *((_QWORD *)&v740 + 1);
    v395 = v740;
    v398 = *((_QWORD *)&v741 + 1);
    v397 = v741;
    v385 = *(_QWORD *)(v731 + v399);
  }
  v406 = v694;
  *v694 = v391;
  v406[1] = v392;
  v406[2] = v393;
  v406[3] = v394;
  v406[4] = v395;
  v406[5] = v396;
  v406[6] = v397;
  v406[7] = v398;
  *((_BYTE *)v406 + 64) = v390 == 1;
  v407 = (_DWORD *)(v385
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  swift_beginAccess();
  *(_DWORD *)(v246 + 8) = *v407;
  v408 = (_BYTE *)(v385
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  swift_beginAccess();
  *(_BYTE *)(v246 + 136) = *v408;
  v409 = v385 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  v410 = v409;
  v411 = v696;
  outlined init with copy of (Int32, Matrix2dPB)(v410, v696, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v735)(v411, 1, v272) == 1)
  {
    *(_QWORD *)v400 = 0;
    *(_DWORD *)(v400 + 8) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v411, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v411, v400, type metadata accessor for Coordinate3DPB);
  }
  v413 = v731;
  v414 = v272;
  v415 = (uint64_t)v729;
  LODWORD(v412) = *(_DWORD *)v400;
  v733 = v412;
  outlined destroy of Matrix3x3PB(v400, type metadata accessor for Coordinate3DPB);
  v416 = *(_QWORD *)(v413 + v399);
  v417 = v416 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  v418 = v699;
  outlined init with copy of (Int32, Matrix2dPB)(v417, v699, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v735)(v418, 1, v414) == 1)
  {
    v419 = v702;
    *v702 = 0;
    *((_DWORD *)v419 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v418, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v419 = v702;
    outlined init with take of Matrix2dPB(v418, (uint64_t)v702, type metadata accessor for Coordinate3DPB);
  }
  v421 = (uint64_t)v701;
  LODWORD(v420) = *((_DWORD *)v419 + 1);
  v724 = v420;
  outlined destroy of Matrix3x3PB((uint64_t)v419, type metadata accessor for Coordinate3DPB);
  v422 = v416 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v422, v421, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v735)(v421, 1, v414) == 1)
  {
    v423 = v703;
    *v703 = 0;
    *((_DWORD *)v423 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v421, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v423 = v703;
    outlined init with take of Matrix2dPB(v421, (uint64_t)v703, type metadata accessor for Coordinate3DPB);
  }
  *(_QWORD *)&v424 = __PAIR64__(v724, v733);
  *((_QWORD *)&v424 + 1) = *((unsigned int *)v423 + 2);
  v735 = v424;
  outlined destroy of Matrix3x3PB((uint64_t)v423, type metadata accessor for Coordinate3DPB);
  v425 = v735;
  *(_OWORD *)(v246 + 160) = v735;
  *(_OWORD *)(v246 + 176) = v425;
  *(_BYTE *)(v246 + 192) = 0;
  v426 = (uint64_t *)(v416
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  swift_beginAccess();
  v427 = *v426;
  v428 = *(_QWORD *)(*v426 + 16);
  v429 = MEMORY[0x24BEE4AF8];
  if (v428)
  {
    *(_QWORD *)&v738 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v428, 0);
    v430 = *(unsigned __int8 *)(v680 + 80);
    *(_QWORD *)&v733 = v427;
    v431 = v427 + ((v430 + 32) & ~v430);
    *(_QWORD *)&v735 = *(_QWORD *)(v680 + 72);
    v429 = v738;
    do
    {
      v432 = v737;
      outlined init with copy of TrackingUpdateDataPB(v431, (uint64_t)v737, type metadata accessor for HandPresence);
      v433 = *(_QWORD *)v432;
      v434 = v432[8];
      v435 = *((_DWORD *)v432 + 3);
      outlined destroy of Matrix3x3PB((uint64_t)v432, type metadata accessor for HandPresence);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v429 + 16) + 1, 1);
        v429 = v738;
      }
      v437 = *(_QWORD *)(v429 + 16);
      v436 = *(_QWORD *)(v429 + 24);
      if (v437 >= v436 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v436 > 1, v437 + 1, 1);
        v429 = v738;
      }
      *(_QWORD *)(v429 + 16) = v437 + 1;
      v438 = v429 + 16 * v437;
      *(_QWORD *)(v438 + 32) = v433;
      *(_BYTE *)(v438 + 40) = v434;
      *(_DWORD *)(v438 + 44) = v435;
      v431 += v735;
      --v428;
    }
    while (v428);
    swift_bridgeObjectRelease();
    v415 = (uint64_t)v729;
  }
  v439 = v731;
  if (*(_QWORD *)(v429 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, Float>);
    v440 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v440 = MEMORY[0x24BEE4B00];
  }
  v441 = v725;
  *(_QWORD *)&v738 = v440;
  v442 = swift_bridgeObjectRetain();
  v443 = (uint64_t)v734;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v442, 1, &v738);
  *(_QWORD *)&v724 = v443;
  if (v443)
    goto LABEL_167;
  swift_bridgeObjectRelease();
  v444 = v727;
  *(_QWORD *)(v441 + v727[26]) = v738;
  v445 = *(_QWORD *)(v439 + v732);
  v446 = v445
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
  swift_beginAccess();
  v447 = *(_BYTE *)(v446 + 8);
  v448 = v441 + v444[25];
  *(_QWORD *)v448 = *(_QWORD *)v446;
  *(_BYTE *)(v448 + 8) = v447;
  v449 = v441 + v444[30];
  *(_QWORD *)v449 = 0;
  *(_BYTE *)(v449 + 8) = 1;
  v450 = v445
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus;
  swift_beginAccess();
  v451 = *(_BYTE *)(v450 + 8);
  v452 = v441 + v444[33];
  *(_QWORD *)v452 = *(_QWORD *)v450;
  *(_BYTE *)(v452 + 8) = v451;
  v453 = v445
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  v454 = v704;
  outlined init with copy of (Int32, Matrix2dPB)(v453, v704, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v455 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v705 + 48);
  v456 = v706;
  LODWORD(v453) = v455(v454, 1, v706);
  outlined destroy of Coordinate3DPB?(v454, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if ((_DWORD)v453 == 1)
  {
    v457 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v458 = 1.0;
    v459 = v710;
    goto LABEL_104;
  }
  v460 = v445
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  v461 = v655;
  outlined init with copy of (Int32, Matrix2dPB)(v460, v655, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if (v455(v461, 1, v456) == 1)
  {
    v462 = v656;
    *v656 = 0;
    *((_QWORD *)v462 + 1) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v461, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  }
  else
  {
    v462 = v656;
    outlined init with take of Matrix2dPB(v461, (uint64_t)v656, type metadata accessor for OperationalEnvelopeSignalsPB);
  }
  v458 = *(float *)v462;
  v463 = swift_bridgeObjectRetain();
  v464 = v724;
  v465 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_5Hands12CameraSourceO_Sfts5NeverOTg504_ss5d11VSf5Hands12fg34OSfIgyyrd_AB3key_Sf5valuetAE_Sfts5h85OIegnrzr_TR066_s5Hands26OperationalEnvelopeSignalsV8protoBufAcA0bcD2PBV_tcfcAA12cd7O_Q23A10V_SftXEfU_Tf3nnnpf_nTf1cn_n(v463);
  swift_bridgeObjectRelease();
  v459 = v710;
  if (*(_QWORD *)(v465 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, Float>);
    v466 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v466 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v738 = v466;
  v467 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v467, 1, &v738);
  *(_QWORD *)&v724 = v464;
  if (v464)
  {
LABEL_167:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v457 = v738;
  outlined destroy of Matrix3x3PB((uint64_t)v462, type metadata accessor for OperationalEnvelopeSignalsPB);
LABEL_104:
  v468 = (_BYTE *)(v441 + 268);
  v469 = v441 + v727[34];
  *(float *)v469 = v458;
  *(_QWORD *)(v469 + 8) = v457;
  v470 = v445
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  swift_beginAccess();
  if ((*(_BYTE *)(v470 + 4) & 1) != 0)
  {
    v471 = v445
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
    swift_beginAccess();
    v472 = v660;
    outlined init with copy of (Int32, Matrix2dPB)(v471, v660, &demangling cache variable for type metadata for PinchFeaturesPB?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v709 + 48))(v472, 1, v459) == 1)
    {
      v473 = v658;
      *v658 = 0;
      v473[1] = 0;
      v473[5] = 0;
      v474 = MEMORY[0x24BEE4AF8];
      v473[2] = MEMORY[0x24BEE4AF8];
      v473[3] = 0;
      *((_BYTE *)v473 + 32) = 0;
      *((_WORD *)v473 + 24) = 1;
      UnknownStorage.init()();
      v475 = (char *)v473 + *(int *)(v459 + 60);
      v476 = type metadata accessor for RawPinchFeaturesPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v476 - 8) + 56))(v475, 1, 1, v476);
      outlined destroy of Coordinate3DPB?(v472, &demangling cache variable for type metadata for PinchFeaturesPB?);
      v477 = v731;
      v478 = v732;
    }
    else
    {
      v473 = v658;
      outlined init with take of Matrix2dPB(v472, (uint64_t)v658, type metadata accessor for PinchFeaturesPB);
      v477 = v731;
      v478 = v732;
      v474 = MEMORY[0x24BEE4AF8];
    }
    PinchFeatures.init(protoBuf:)((uint64_t)v473, (uint64_t)&v738);
    v485 = v739;
    v486 = BYTE4(v739);
    v487 = *((_QWORD *)&v739 + 1);
    v488 = v740;
    v489 = BYTE1(v740);
    v490 = BYTE2(v740);
    v491 = BYTE3(v740);
    v492 = *((_QWORD *)&v740 + 1);
    v493 = v741;
    v494 = BYTE4(v741);
    v495 = DWORD2(v741);
    v496 = HIDWORD(v741);
    v497 = v742;
    *(_OWORD *)(v441 + 216) = v738;
    *(_DWORD *)(v441 + 232) = v485;
    *(_BYTE *)(v441 + 236) = v486;
    *(_QWORD *)(v441 + 240) = v487;
    *(_BYTE *)(v441 + 248) = v488;
    *(_BYTE *)(v441 + 249) = v489;
    *(_BYTE *)(v441 + 250) = v490;
    *(_BYTE *)(v441 + 251) = v491;
    *(_QWORD *)(v441 + 256) = v492;
    *(_DWORD *)(v441 + 264) = v493;
    *v468 = v494;
    *(_DWORD *)(v441 + 272) = v495;
    *(_DWORD *)(v441 + 276) = v496;
    *(_BYTE *)(v441 + 280) = v497;
  }
  else
  {
    v479 = v445
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
    swift_beginAccess();
    v480 = v659;
    outlined init with copy of (Int32, Matrix2dPB)(v479, v659, &demangling cache variable for type metadata for PinchFeaturesPB?);
    v481 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v709 + 48);
    if (v481(v480, 1, v459) == 1)
    {
      v482 = v657;
      *v657 = 0;
      v482[1] = 0;
      v482[5] = 0;
      v482[2] = MEMORY[0x24BEE4AF8];
      v482[3] = 0;
      *((_BYTE *)v482 + 32) = 0;
      *((_WORD *)v482 + 24) = 1;
      UnknownStorage.init()();
      v483 = (char *)v482 + *(int *)(v459 + 60);
      v484 = type metadata accessor for RawPinchFeaturesPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v484 - 8) + 56))(v483, 1, 1, v484);
      outlined destroy of Coordinate3DPB?(v480, &demangling cache variable for type metadata for PinchFeaturesPB?);
    }
    else
    {
      v482 = v657;
      outlined init with take of Matrix2dPB(v480, (uint64_t)v657, type metadata accessor for PinchFeaturesPB);
    }
    v498 = (uint64_t)v662;
    PinchFeatures.init(protoBuf:)((uint64_t)v482, (uint64_t)&v738);
    v499 = *(_QWORD *)(v731 + v732);
    v500 = (int *)(v499
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty);
    swift_beginAccess();
    v501 = *v500;
    if (*((_BYTE *)v500 + 4))
      v501 = 0;
    LODWORD(v741) = v501;
    BYTE4(v741) = 0;
    v502 = v499
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
    swift_beginAccess();
    v503 = v663;
    outlined init with copy of (Int32, Matrix2dPB)(v502, v663, &demangling cache variable for type metadata for PinchFeaturesPB?);
    if (v481(v503, 1, v459) == 1)
    {
      *(_QWORD *)v498 = 0;
      *(_QWORD *)(v498 + 8) = 0;
      *(_QWORD *)(v498 + 40) = 0;
      *(_QWORD *)(v498 + 16) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v498 + 24) = 0;
      *(_BYTE *)(v498 + 32) = 0;
      *(_WORD *)(v498 + 48) = 1;
      UnknownStorage.init()();
      v504 = v498 + *(int *)(v459 + 60);
      v505 = type metadata accessor for RawPinchFeaturesPB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v505 - 8) + 56))(v504, 1, 1, v505);
      outlined destroy of Coordinate3DPB?(v503, &demangling cache variable for type metadata for PinchFeaturesPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v503, v498, type metadata accessor for PinchFeaturesPB);
    }
    v506 = *(_QWORD *)(v498 + 16);
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB(v498, type metadata accessor for PinchFeaturesPB);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v740 + 1) = v506;
    v507 = *(_QWORD *)(v731 + v732)
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
    swift_beginAccess();
    v508 = v507;
    v509 = v665;
    outlined init with copy of (Int32, Matrix2dPB)(v508, v665, &demangling cache variable for type metadata for PinchFeaturesPB?);
    v510 = v481(v509, 1, v459);
    v737 = v468;
    v511 = v664;
    if (v510 == 1)
    {
      *v664 = 0;
      v511[1] = 0;
      v511[5] = 0;
      v511[2] = MEMORY[0x24BEE4AF8];
      v511[3] = 0;
      *((_BYTE *)v511 + 32) = 0;
      *((_WORD *)v511 + 24) = 1;
      UnknownStorage.init()();
      v512 = (char *)v511 + *(int *)(v459 + 60);
      v513 = type metadata accessor for RawPinchFeaturesPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v513 - 8) + 56))(v512, 1, 1, v513);
      outlined destroy of Coordinate3DPB?(v509, &demangling cache variable for type metadata for PinchFeaturesPB?);
      v506 = *((_QWORD *)&v740 + 1);
    }
    else
    {
      outlined init with take of Matrix2dPB(v509, (uint64_t)v664, type metadata accessor for PinchFeaturesPB);
    }
    v514 = *((_DWORD *)v511 + 6);
    outlined destroy of Matrix3x3PB((uint64_t)v511, type metadata accessor for PinchFeaturesPB);
    v477 = v731;
    v515 = v732;
    v516 = *(_QWORD *)(v731 + v732);
    v517 = (_DWORD *)(v516
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
    swift_beginAccess();
    LODWORD(v735) = *v517;
    v518 = (int *)(v516
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
    swift_beginAccess();
    v519 = *v518;
    v520 = (int *)(v516
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty);
    swift_beginAccess();
    if (*((_BYTE *)v520 + 4))
      v521 = 0;
    else
      v521 = *v520;
    v522 = (uint64_t *)(v516
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus);
    swift_beginAccess();
    v523 = *v522;
    v524 = *((_BYTE *)v522 + 8);
    v525 = (char *)(v516
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
    v478 = v515;
    swift_beginAccess();
    v526 = *v525;
    v527 = BYTE3(v740);
    v528 = v725;
    *(_OWORD *)(v725 + 216) = v738;
    *(_DWORD *)(v528 + 232) = v735;
    *(_BYTE *)(v528 + 236) = 0;
    *(_QWORD *)(v528 + 240) = v523;
    *(_BYTE *)(v528 + 248) = v524;
    *(_BYTE *)(v528 + 249) = 0;
    *(_BYTE *)(v528 + 250) = v526;
    *(_BYTE *)(v528 + 251) = v527;
    *(_QWORD *)(v528 + 256) = v506;
    *(_DWORD *)(v528 + 264) = v521;
    v529 = v737;
    *v737 = 0;
    *(_DWORD *)(v528 + 272) = v514;
    *(_DWORD *)(v528 + 276) = v519;
    v441 = v528;
    v529[12] = 0;
    v415 = (uint64_t)v729;
    v474 = MEMORY[0x24BEE4AF8];
  }
  v530 = v707;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v441 + v530) = v474;
  v531 = *(_QWORD *)(v477 + v478);
  v532 = (_BYTE *)(v531
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
  swift_beginAccess();
  *(_BYTE *)(v441 + 4) = *v532;
  v533 = (_BYTE *)(v531
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
  swift_beginAccess();
  *(_BYTE *)(v441 + 5) = *v533;
  v534 = (_BYTE *)(v531
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  swift_beginAccess();
  *(_BYTE *)(v441 + 137) = *v534;
  v535 = (_QWORD *)(v531
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
  swift_beginAccess();
  v536 = v708;
  *v708 = *v535;
  *((_BYTE *)v536 + 8) = 0;
  v537 = v531 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  swift_beginAccess();
  v538 = v711;
  outlined init with copy of (Int32, Matrix2dPB)(v537, v711, &demangling cache variable for type metadata for PinchInfoPB?);
  v539 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v712 + 48);
  v540 = v713;
  LODWORD(v537) = v539(v538, 1, v713);
  outlined destroy of Coordinate3DPB?(v538, &demangling cache variable for type metadata for PinchInfoPB?);
  if ((_DWORD)v537 != 1)
  {
    v541 = v531
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
    swift_beginAccess();
    v542 = v666;
    outlined init with copy of (Int32, Matrix2dPB)(v541, v666, &demangling cache variable for type metadata for PinchInfoPB?);
    if (v539(v542, 1, v540) == 1)
    {
      v543 = v668;
      *v668 = 0;
      UnknownStorage.init()();
      v544 = (char *)v543 + *(int *)(v540 + 24);
      v545 = type metadata accessor for PinchStatusPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v545 - 8) + 56))(v544, 1, 1, v545);
      outlined destroy of Coordinate3DPB?(v542, &demangling cache variable for type metadata for PinchInfoPB?);
    }
    else
    {
      v543 = v668;
      outlined init with take of Matrix2dPB(v542, (uint64_t)v668, type metadata accessor for PinchInfoPB);
    }
    v546 = v732;
    PinchInfo.init(protoBuf:)(v543, (uint64_t)&v738);
    v547 = v740;
    v548 = *((_QWORD *)&v740 + 1);
    v549 = v741;
    v550 = v739;
    v551 = v661;
    *v661 = v738;
    v551[1] = v550;
    *((_QWORD *)v551 + 4) = v547;
    *((_QWORD *)v551 + 5) = v548;
    *((_WORD *)v551 + 24) = v549;
    v531 = *(_QWORD *)(v731 + v546);
  }
  v552 = v531 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  swift_beginAccess();
  v553 = v714;
  outlined init with copy of (Int32, Matrix2dPB)(v552, v714, &demangling cache variable for type metadata for PoseSpecPB?);
  v554 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v715 + 48);
  v555 = v717;
  LODWORD(v552) = v554(v553, 1, v717);
  outlined destroy of Coordinate3DPB?(v553, &demangling cache variable for type metadata for PoseSpecPB?);
  if ((_DWORD)v552 == 1)
  {
    v556 = *(_QWORD *)(v731 + v732);
    v557 = v728;
  }
  else
  {
    v556 = *(_QWORD *)(v731 + v732);
    v558 = v556 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
    swift_beginAccess();
    v559 = v671;
    outlined init with copy of (Int32, Matrix2dPB)(v558, v671, &demangling cache variable for type metadata for PoseSpecPB?);
    if (v554(v559, 1, v555) == 1)
    {
      v560 = v672;
      v561 = MEMORY[0x24BEE4AF8];
      *v672 = MEMORY[0x24BEE4AF8];
      v560[1] = 0;
      *((_BYTE *)v560 + 16) = 1;
      v560[3] = v561;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v559, &demangling cache variable for type metadata for PoseSpecPB?);
    }
    else
    {
      v560 = v672;
      outlined init with take of Matrix2dPB(v559, (uint64_t)v672, type metadata accessor for PoseSpecPB);
    }
    v557 = v728;
    PoseSpec.init(protoBuf:)(v560, &v738);
    v562 = v738;
    outlined consume of HandPose?(*(_QWORD *)(v441 + 200));
    *(_OWORD *)(v441 + 200) = v562;
  }
  v563 = (_QWORD *)(v556
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  swift_beginAccess();
  v723 = (_QWORD *)*v563;
  v564 = (_BYTE *)v723[2];
  if (v564)
  {
    v565 = (uint64_t)v723
         + ((*(unsigned __int8 *)(v681 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v681 + 80));
    *(_QWORD *)&v735 = *(_QWORD *)(v681 + 72);
    *(_QWORD *)&v733 = (char *)&v738 + 7;
    swift_bridgeObjectRetain();
    v734 = (__int128 *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v737 = v564;
      outlined init with copy of TrackingUpdateDataPB(v565, v415, type metadata accessor for PoseImageCropPB);
      v568 = v736;
      outlined init with copy of (Int32, Matrix2dPB)(v415 + *(int *)(v557 + 44), v736, &demangling cache variable for type metadata for Matrix2dPB?);
      v569 = type metadata accessor for Matrix2dPB(0);
      v570 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v569 - 8) + 48);
      v571 = v570(v568, 1, v569);
      outlined destroy of Coordinate3DPB?(v568, &demangling cache variable for type metadata for Matrix2dPB?);
      if (v571 == 1)
      {
        v566 = v415;
      }
      else
      {
        v572 = v730;
        outlined init with copy of (Int32, Matrix2dPB)(v415 + *(int *)(v557 + 48), v730, &demangling cache variable for type metadata for Matrix2dPB?);
        if (v570(v572, 1, v569) != 1)
        {
          outlined destroy of Coordinate3DPB?(v572, &demangling cache variable for type metadata for Matrix2dPB?);
          v573 = v726;
          outlined init with copy of TrackingUpdateDataPB(v415, v726, type metadata accessor for PoseImageCropPB);
          PoseImageCrop.init(protoBuf:)(v573, (uint64_t)&v755);
          v574 = *(_QWORD *)v415;
          v575 = *(_BYTE *)(v415 + 8);
          outlined destroy of Matrix3x3PB(v415, type metadata accessor for PoseImageCropPB);
          v576 = v734;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v567 = v737;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v576 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v576 + 2) + 1, 1, v576);
          v579 = *((_QWORD *)v576 + 2);
          v578 = *((_QWORD *)v576 + 3);
          if (v579 >= v578 >> 1)
            v576 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v578 > 1), v579 + 1, 1, v576);
          v763 = v575;
          v580 = v760;
          v581 = (_OWORD *)v733;
          *(_OWORD *)(v733 + 64) = v759;
          v581[5] = v580;
          *(_OWORD *)((char *)v581 + 153) = *(_OWORD *)((char *)v762 + 9);
          v582 = v762[0];
          v581[8] = v761[2];
          v581[9] = v582;
          v583 = v761[1];
          v581[6] = v761[0];
          v581[7] = v583;
          v584 = v756;
          *v581 = v755;
          v581[1] = v584;
          v585 = v758;
          v581[2] = v757;
          v581[3] = v585;
          *((_QWORD *)v576 + 2) = v579 + 1;
          v734 = v576;
          v586 = &v576[12 * v579];
          *((_QWORD *)v586 + 4) = v574;
          *((_BYTE *)v586 + 40) = v763;
          v587 = v738;
          v588 = v739;
          *(__int128 *)((char *)v586 + 73) = v740;
          *(__int128 *)((char *)v586 + 57) = v588;
          *(__int128 *)((char *)v586 + 41) = v587;
          v589 = v741;
          v590 = v742;
          v591 = v743;
          *(__int128 *)((char *)v586 + 137) = *(_OWORD *)v744;
          *(__int128 *)((char *)v586 + 121) = v591;
          *(__int128 *)((char *)v586 + 105) = v590;
          *(__int128 *)((char *)v586 + 89) = v589;
          v592 = *(_OWORD *)&v744[16];
          v593 = v745;
          v594 = v746;
          *(__int128 *)((char *)v586 + 201) = v747;
          *(__int128 *)((char *)v586 + 185) = v594;
          *(__int128 *)((char *)v586 + 169) = v593;
          *(__int128 *)((char *)v586 + 153) = v592;
          v557 = v728;
          v415 = (uint64_t)v729;
          goto LABEL_139;
        }
        outlined destroy of Coordinate3DPB?(v572, &demangling cache variable for type metadata for Matrix2dPB?);
        v566 = v415;
      }
      outlined destroy of Matrix3x3PB(v566, type metadata accessor for PoseImageCropPB);
      v567 = v737;
LABEL_139:
      v565 += v735;
      v564 = v567 - 1;
      if (!v564)
      {
        swift_bridgeObjectRelease();
        v595 = v725;
        v596 = v731;
        v597 = (uint64_t)v734;
        goto LABEL_150;
      }
    }
  }
  v595 = v441;
  v597 = MEMORY[0x24BEE4AF8];
  v596 = v731;
LABEL_150:
  v598 = v721;
  if (*(_QWORD *)(v597 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, PoseImageCrop>);
    v599 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v599 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v738 = v599;
  v600 = swift_bridgeObjectRetain();
  v601 = v724;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v600, 1, &v738);
  if (v601)
    goto LABEL_167;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v595 + v727[23]) = v738;
  v602 = *(_QWORD *)(v596 + v732);
  v603 = v602
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  swift_beginAccess();
  v604 = v719;
  outlined init with copy of (Int32, Matrix2dPB)(v603, v719, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  v605 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v720 + 48);
  LODWORD(v603) = v605(v604, 1, v598);
  outlined destroy of Coordinate3DPB?(v604, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  if ((_DWORD)v603 != 1)
  {
    v606 = v602
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
    swift_beginAccess();
    v607 = v675;
    outlined init with copy of (Int32, Matrix2dPB)(v606, v675, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    if (v605(v607, 1, v598) == 1)
    {
      v608 = v677;
      UnknownStorage.init()();
      v609 = *(int *)(v598 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v608 + v609) = static HandDescriptorInternalPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v607, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    }
    else
    {
      v608 = v677;
      outlined init with take of Matrix2dPB(v607, v677, type metadata accessor for HandDescriptorInternalPB);
    }
    v610 = v676;
    HandDescriptorInternal.init(protoBuf:)(v608, v676);
    v667(v610, 0, 1, v669);
    outlined assign with take of HomePinchInternalPB?((uint64_t)v610, v670, &demangling cache variable for type metadata for HandDescriptorInternal?);
    v602 = *(_QWORD *)(v596 + v732);
  }
  v611 = (_BYTE *)(v602
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
  swift_beginAccess();
  *(_BYTE *)(v595 + 138) = *v611;
  v612 = (_BYTE *)(v602
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  swift_beginAccess();
  *(_BYTE *)(v595 + 281) = *v612;
  v613 = v602
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  swift_beginAccess();
  v614 = v722;
  outlined init with copy of (Int32, Matrix2dPB)(v613, v722, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v615 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v716 + 48);
  v616 = v718;
  LODWORD(v613) = v615(v614, 1, v718);
  outlined destroy of Coordinate3DPB?(v614, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  if ((_DWORD)v613 != 1)
  {
    v617 = *(_QWORD *)(v596 + v732)
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
    swift_beginAccess();
    v618 = v678;
    outlined init with copy of (Int32, Matrix2dPB)(v617, v678, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    if (v615(v618, 1, v616) == 1)
    {
      v619 = v679;
      UnknownStorage.init()();
      v620 = v619 + *(int *)(v616 + 20);
      v621 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v621 - 8) + 56))(v620, 1, 1, v621);
      outlined destroy of Coordinate3DPB?(v618, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    }
    else
    {
      v619 = v679;
      outlined init with take of Matrix2dPB(v618, v679, type metadata accessor for ThumbIndexTapFeaturesPB);
    }
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v673)(v619, 0, 1, v616);
    outlined assign with take of HomePinchInternalPB?(v619, v674, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  }
  result = outlined destroy of Matrix3x3PB(v596, type metadata accessor for HandDescriptorPB);
  v623 = v595 + v727[32];
  *(_OWORD *)(v623 + 32) = 0u;
  *(_QWORD *)(v623 + 8) = 0;
  *(_QWORD *)(v623 + 16) = 0;
  *(_QWORD *)v623 = 0;
  *(_QWORD *)(v623 + 48) = -1;
  *(_BYTE *)(v623 + 56) = 0;
  *(_QWORD *)(v623 + 60) = 0x3F800000BF800000;
  *(_WORD *)(v623 + 68) = 0;
  return result;
}

uint64_t HandDescriptor.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int8x8_t *v191;
  __int8 v192;
  int8x8_t v193;
  int8x8_t v194;
  _QWORD *v195;
  uint64_t *v196;
  int8x16_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _DWORD *v212;
  int8x16_t v213;
  uint64_t *v214;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int32 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int32 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  int8x8_t *v244;
  uint64_t v245;
  _QWORD *v246;
  int8x8_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t *v250;
  int8x16_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int8x8_t *v265;
  _DWORD *v266;
  int8x16_t v267;
  uint64_t *v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  __int32 v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  __int32 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int8x8_t *v298;
  uint64_t *v299;
  int8x8_t v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _DWORD *v315;
  __int128 v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int8x8_t v343;
  uint64_t v344;
  int8x8_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 *v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int8x8_t *v367;
  uint64_t v368;
  int32x4_t v369;
  uint64_t v370;
  uint64_t v371;
  int *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  _BYTE *v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  _DWORD *v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  _DWORD *v402;
  uint64_t *v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  char v426;
  uint64_t v427;
  uint64_t v428;
  _BYTE *v429;
  int v430;
  char v431;
  uint64_t v432;
  uint64_t v433;
  _BYTE *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char v444;
  uint64_t v445;
  uint64_t v446;
  _BYTE *v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  uint64_t v460;
  int8x8_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void (*v465)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v466;
  void (*v467)(int8x8_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  char v497;
  uint64_t v498;
  char v499;
  char v500;
  char v501;
  char v502;
  uint64_t v503;
  int v504;
  char v505;
  unsigned int v506;
  unsigned int v507;
  char v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  char v524;
  uint64_t v525;
  uint64_t v526;
  _BYTE *v527;
  char v528;
  uint64_t v529;
  uint64_t v530;
  _BYTE *v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  uint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t result;
  int8x8_t v561;
  char *v562;
  char *v563;
  int8x8_t *v564;
  uint64_t v565;
  char *v566;
  uint64_t v567;
  char *v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  char *v573;
  uint64_t v574;
  int8x8_t *v575;
  uint64_t v576;
  int8x8_t *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  __int128 v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int8x8_t *v609;
  int8x8_t *v610;
  int8x8_t *v611;
  __int128 v612;
  unsigned int (*v613)(uint64_t, uint64_t, _QWORD *);
  int32x4_t v614;
  _QWORD *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int8x8_t *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  char *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int *v639;
  uint64_t v640;
  uint64_t v641;
  int8x16_t v642;
  int32x4_t v643;
  uint64_t v644;
  int8x8_t *v645;
  int32x4_t v646;
  uint64_t v647;
  uint64_t v648;
  __int128 v649;
  uint64_t v650;
  uint64_t *v651;
  _QWORD *v652;
  uint64_t v653[4];
  _OWORD v654[26];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v638 = (uint64_t)&v561 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v637 = (uint64_t)&v561 - v9;
  v636 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v635 = *(_QWORD *)(v636 - 8);
  MEMORY[0x24BDAC7A8](v636, v10);
  v633 = (char *)&v561 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v634 = (uint64_t)&v561 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v596 = (uint64_t)&v561 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v595 = (uint64_t)&v561 - v20;
  MEMORY[0x24BDAC7A8](v21, v22);
  v629 = (uint64_t)&v561 - v23;
  v631 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v644 = *(_QWORD *)(v631 - 8);
  MEMORY[0x24BDAC7A8](v631, v24);
  v630 = (uint64_t)&v561 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v632 = (uint64_t)&v561 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v628 = (uint64_t)&v561 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32, v33);
  v627 = (uint64_t)&v561 - v34;
  v626 = type metadata accessor for CameraPairTransitionPB(0);
  v625 = *(_QWORD *)(v626 - 8);
  MEMORY[0x24BDAC7A8](v626, v35);
  v624 = (int8x8_t *)((char *)&v561 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v37, v38);
  v623 = (uint64_t)&v561 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40, v41);
  v622 = (uint64_t)&v561 - v42;
  v621 = type metadata accessor for PinchFeaturesPB(0);
  v620 = *(_QWORD *)(v621 - 8);
  MEMORY[0x24BDAC7A8](v621, v43);
  v648 = (uint64_t)&v561 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternalPB?);
  MEMORY[0x24BDAC7A8](v45, v46);
  v594 = (uint64_t)&v561 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48, v49);
  v593 = (uint64_t)&v561 - v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v51, v52);
  v617 = (uint64_t)&v561 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for HandDescriptorInternalPB(0);
  v591 = *(_QWORD *)(v54 - 8);
  v592 = v54;
  MEMORY[0x24BDAC7A8](v54, v55);
  v618 = (uint64_t)&v561 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57, v58);
  v590 = (uint64_t)&v561 - v59;
  MEMORY[0x24BDAC7A8](v60, v61);
  v619 = (uint64_t)&v561 - v62;
  v63 = type metadata accessor for PinchStatusPB(0);
  v584 = *(_QWORD *)(v63 - 8);
  v585 = v63;
  MEMORY[0x24BDAC7A8](v63, v64);
  v563 = (char *)&v561 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v66, v67);
  v589 = (uint64_t)&v561 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69, v70);
  v587 = (uint64_t)&v561 - v71;
  MEMORY[0x24BDAC7A8](v72, v73);
  v645 = (int8x8_t *)((char *)&v561 - v74);
  v647 = type metadata accessor for PinchInfoPB(0);
  v616 = *(_QWORD *)(v647 - 8);
  MEMORY[0x24BDAC7A8](v647, v75);
  v586 = (uint64_t)&v561 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v77, v78);
  v588 = (uint64_t)&v561 - v79;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v80, v81);
  v608 = (uint64_t)&v561 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v83, v84);
  v607 = (uint64_t)&v561 - v85;
  v86 = type metadata accessor for PoseSpecPB(0);
  v605 = *(_QWORD *)(v86 - 8);
  v606 = v86;
  MEMORY[0x24BDAC7A8](v86, v87);
  v604 = (uint64_t)&v561 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompactHandPosePB?);
  MEMORY[0x24BDAC7A8](v89, v90);
  v603 = (uint64_t)&v561 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v92, v93);
  v602 = (uint64_t)&v561 - v94;
  v640 = type metadata accessor for Matrix2dPB(0);
  v597 = *(_QWORD *)(v640 - 8);
  MEMORY[0x24BDAC7A8](v640, v95);
  v599 = (uint64_t)&v561 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v641 = type metadata accessor for CompactHandPosePB(0);
  v601 = *(_QWORD *)(v641 - 8);
  MEMORY[0x24BDAC7A8](v641, v97);
  v598 = (char *)&v561 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v99, v100);
  v600 = (uint64_t)&v561 - v101;
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  MEMORY[0x24BDAC7A8](v102, v103);
  *(_QWORD *)&v583 = (char *)&v561 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v105, v106);
  v582 = (uint64_t)&v561 - v107;
  v108 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v580 = *(_QWORD *)(v108 - 8);
  v581 = v108;
  MEMORY[0x24BDAC7A8](v108, v109);
  v579 = (uint64_t)&v561 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v111, v112);
  v578 = (uint64_t)&v561 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v114, v115);
  v576 = (uint64_t)&v561 - v116;
  MEMORY[0x24BDAC7A8](v117, v118);
  v574 = (uint64_t)&v561 - v119;
  MEMORY[0x24BDAC7A8](v120, v121);
  v572 = (uint64_t)&v561 - v122;
  MEMORY[0x24BDAC7A8](v123, v124);
  v570 = (uint64_t)&v561 - v125;
  MEMORY[0x24BDAC7A8](v126, v127);
  v569 = (uint64_t)&v561 - v128;
  MEMORY[0x24BDAC7A8](v129, v130);
  v567 = (uint64_t)&v561 - v131;
  MEMORY[0x24BDAC7A8](v132, v133);
  v565 = (uint64_t)&v561 - v134;
  MEMORY[0x24BDAC7A8](v135, v136);
  v138 = (char *)&v561 - v137;
  MEMORY[0x24BDAC7A8](v139, v140);
  *(_QWORD *)&v649 = (char *)&v561 - v141;
  MEMORY[0x24BDAC7A8](v142, v143);
  v145 = (char *)&v561 - v144;
  v652 = (_QWORD *)type metadata accessor for Coordinate3DPB(0);
  v646.i64[0] = *(v652 - 1);
  MEMORY[0x24BDAC7A8](v652, v146);
  v614.i64[0] = (uint64_t)&v561 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v148, v149);
  v577 = (int8x8_t *)((char *)&v561 - v150);
  MEMORY[0x24BDAC7A8](v151, v152);
  v575 = (int8x8_t *)((char *)&v561 - v153);
  MEMORY[0x24BDAC7A8](v154, v155);
  *(_QWORD *)&v612 = (char *)&v561 - v156;
  MEMORY[0x24BDAC7A8](v157, v158);
  v573 = (char *)&v561 - v159;
  MEMORY[0x24BDAC7A8](v160, v161);
  v571 = (char *)&v561 - v162;
  MEMORY[0x24BDAC7A8](v163, v164);
  v611 = (int8x8_t *)((char *)&v561 - v165);
  MEMORY[0x24BDAC7A8](v166, v167);
  v610 = (int8x8_t *)((char *)&v561 - v168);
  MEMORY[0x24BDAC7A8](v169, v170);
  v568 = (char *)&v561 - v171;
  MEMORY[0x24BDAC7A8](v172, v173);
  v566 = (char *)&v561 - v174;
  MEMORY[0x24BDAC7A8](v175, v176);
  v609 = (int8x8_t *)((char *)&v561 - v177);
  MEMORY[0x24BDAC7A8](v178, v179);
  v564 = (int8x8_t *)((char *)&v561 - v180);
  MEMORY[0x24BDAC7A8](v181, v182);
  v184 = (char *)&v561 - v183;
  UnknownStorage.init()();
  v185 = (uint64_t *)(a1 + *(int *)(type metadata accessor for HandDescriptorPB(0) + 20));
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *v185 = static HandDescriptorPB._StorageClass.defaultInstance;
  v650 = type metadata accessor for HandDescriptor();
  swift_retain();
  v186 = swift_bridgeObjectRetain();
  v187 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF15DetectionResultVG_AF0gH2PBVs5NeverOTg5053_s5Hands14HandDescriptorV10toProtoBufAA0bC2PBVyFAA015gh7G0VAA12eF27O3key_AA0hI0V5valuet_tXEfU_Tf1cn_n(v186);
  v615 = 0;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v188 = swift_retain();
    v189 = specialized HandDescriptorPB._StorageClass.init(copying:)(v188);
    swift_release();
    *v185 = v189;
    swift_release();
  }
  v651 = v185;
  v190 = *v185;
  swift_beginAccess();
  *(_QWORD *)(v190 + 24) = v187;
  swift_bridgeObjectRelease();
  v191 = (int8x8_t *)((char *)v2 + *(int *)(v650 + 76));
  v192 = v191[2].i8[0];
  v643.i64[0] = (uint64_t)v145;
  if ((v192 & 1) == 0)
  {
    v193 = *v191;
    v561 = v191[1];
    v562 = v138;
    v194 = v561;
    v195 = v652;
    UnknownStorage.init()();
    *(_DWORD *)v184 = v193.i32[0];
    *(int8x8_t *)(v184 + 4) = vext_s8(v193, v194, 4uLL);
    v196 = v651;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v198 = swift_retain();
      v199 = specialized HandDescriptorPB._StorageClass.init(copying:)(v198);
      swift_release();
      *v196 = v199;
      swift_release();
    }
    *(int8x8_t *)v197.i8 = v193;
    v642 = v197;
    v200 = *v196;
    outlined init with take of Matrix2dPB((uint64_t)v184, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    v201 = v145;
    v202 = v646.i64[0];
    v613 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v646.i64[0] + 56);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v201, 0, 1, v195);
    v203 = (uint64_t)v201;
    v204 = v649;
    outlined init with take of ImageData?(v203, v649, &demangling cache variable for type metadata for Coordinate3DPB?);
    v205 = v200
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    swift_retain();
    v206 = v205;
    v207 = v652;
    outlined assign with take of HomePinchInternalPB?(v204, v206, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v208 = *v196
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v209 = v208;
    v210 = (uint64_t)v562;
    outlined init with copy of (Int32, Matrix2dPB)(v209, (uint64_t)v562, &demangling cache variable for type metadata for Coordinate3DPB?);
    v211 = *(char **)(v202 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v211)(v210, 1, v207) == 1)
    {
      v212 = v564;
      *v564 = 0;
      v212[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v210, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v212 = v564;
      outlined init with take of Matrix2dPB(v210, (uint64_t)v564, type metadata accessor for Coordinate3DPB);
    }
    v213.i64[0] = v642.i64[0];
    v213.u64[1] = (unint64_t)v561;
    v642 = v213;
    *v212 = v193.i32[0];
    v214 = v651;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v216 = v649;
    v145 = (char *)v643.i64[0];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v217 = swift_retain();
      v218 = specialized HandDescriptorPB._StorageClass.init(copying:)(v217);
      swift_release();
      *v214 = v218;
      swift_release();
    }
    v219 = v642.i32[1];
    v220 = *v214;
    outlined init with take of Matrix2dPB((uint64_t)v212, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v207);
    outlined init with take of ImageData?((uint64_t)v145, v216, &demangling cache variable for type metadata for Coordinate3DPB?);
    v221 = v220
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    swift_retain();
    v222 = v221;
    v223 = v652;
    outlined assign with take of HomePinchInternalPB?(v216, v222, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v224 = *v214
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v225 = v224;
    v226 = v565;
    outlined init with copy of (Int32, Matrix2dPB)(v225, v565, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v211)(v226, 1, v223) == 1)
    {
      v227 = v609;
      *v609 = 0;
      *((_DWORD *)v227 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v226, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v227 = v609;
      outlined init with take of Matrix2dPB(v226, (uint64_t)v609, type metadata accessor for Coordinate3DPB);
    }
    v228 = (uint64_t)v566;
    v566 = v211;
    *((_DWORD *)v227 + 1) = v219;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v229 = swift_retain();
      v230 = specialized HandDescriptorPB._StorageClass.init(copying:)(v229);
      v227 = v609;
      swift_release();
      *v214 = v230;
      swift_release();
    }
    v231 = v642.i32[2];
    v232 = *v214;
    outlined init with take of Matrix2dPB((uint64_t)v227, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v223);
    outlined init with take of ImageData?((uint64_t)v145, v216, &demangling cache variable for type metadata for Coordinate3DPB?);
    v233 = v232
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    swift_retain();
    v234 = v233;
    v235 = v652;
    outlined assign with take of HomePinchInternalPB?(v216, v234, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v236 = *v214
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    v237 = v236;
    v238 = v567;
    outlined init with copy of (Int32, Matrix2dPB)(v237, v567, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v566)(v238, 1, v235) == 1)
    {
      *(_QWORD *)v228 = 0;
      *(_DWORD *)(v228 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v238, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v238, v228, type metadata accessor for Coordinate3DPB);
    }
    *(_DWORD *)(v228 + 8) = v231;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v239 = swift_retain();
      v240 = specialized HandDescriptorPB._StorageClass.init(copying:)(v239);
      swift_release();
      *v214 = v240;
      swift_release();
    }
    v241 = *v214;
    outlined init with take of Matrix2dPB(v228, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v235);
    outlined init with take of ImageData?((uint64_t)v145, v216, &demangling cache variable for type metadata for Coordinate3DPB?);
    v242 = v241
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v216, v242, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
  }
  v243 = (int *)v650;
  v244 = (int8x8_t *)((char *)v2 + *(int *)(v650 + 80));
  v245 = v649;
  v246 = v652;
  if ((v244[2].i8[0] & 1) == 0)
  {
    v247 = *v244;
    v609 = (int8x8_t *)v244[1];
    v248 = v609;
    v249 = (uint64_t)v568;
    UnknownStorage.init()();
    *(_DWORD *)v249 = v247.i32[0];
    *(int8x8_t *)(v249 + 4) = vext_s8(v247, (int8x8_t)v248, 4uLL);
    v250 = v651;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v252 = swift_retain();
      v253 = specialized HandDescriptorPB._StorageClass.init(copying:)(v252);
      swift_release();
      *v250 = v253;
      swift_release();
    }
    *(int8x8_t *)v251.i8 = v247;
    v642 = v251;
    v254 = *v250;
    outlined init with take of Matrix2dPB(v249, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    v255 = v145;
    v256 = v646.i64[0];
    v613 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v646.i64[0] + 56);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v255, 0, 1, v246);
    v257 = (uint64_t)v255;
    v258 = v649;
    outlined init with take of ImageData?(v257, v649, &demangling cache variable for type metadata for Coordinate3DPB?);
    v259 = v254
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    swift_retain();
    v260 = v259;
    v261 = v652;
    outlined assign with take of HomePinchInternalPB?(v258, v260, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v262 = *v250
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v263 = v262;
    v264 = v569;
    outlined init with copy of (Int32, Matrix2dPB)(v263, v569, &demangling cache variable for type metadata for Coordinate3DPB?);
    v265 = *(int8x8_t **)(v256 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v265)(v264, 1, v261) == 1)
    {
      v266 = v610;
      *v610 = 0;
      v266[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v264, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v266 = v610;
      outlined init with take of Matrix2dPB(v264, (uint64_t)v610, type metadata accessor for Coordinate3DPB);
    }
    v267.i64[0] = v642.i64[0];
    v267.i64[1] = (uint64_t)v609;
    v642 = v267;
    *v266 = v247.i32[0];
    v268 = v651;
    v269 = swift_isUniquelyReferenced_nonNull_native();
    v245 = v649;
    v145 = (char *)v643.i64[0];
    if ((v269 & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v270 = swift_retain();
      v271 = specialized HandDescriptorPB._StorageClass.init(copying:)(v270);
      v266 = v610;
      swift_release();
      *v268 = v271;
      swift_release();
    }
    v272 = v642.i32[1];
    v273 = *v268;
    outlined init with take of Matrix2dPB((uint64_t)v266, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v261);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v274 = v273
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    swift_retain();
    v275 = v274;
    v276 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v275, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v277 = *v268
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v278 = v277;
    v279 = v570;
    outlined init with copy of (Int32, Matrix2dPB)(v278, v570, &demangling cache variable for type metadata for Coordinate3DPB?);
    v280 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *))v265)(v279, 1, v276);
    v281 = (uint64_t)v571;
    v282 = v611;
    if (v280 == 1)
    {
      *v611 = 0;
      *((_DWORD *)v282 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v279, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v279, (uint64_t)v611, type metadata accessor for Coordinate3DPB);
    }
    v610 = v265;
    *((_DWORD *)v282 + 1) = v272;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v283 = swift_retain();
      v284 = specialized HandDescriptorPB._StorageClass.init(copying:)(v283);
      v282 = v611;
      swift_release();
      *v268 = v284;
      swift_release();
    }
    v285 = v642.i32[2];
    v286 = *v268;
    outlined init with take of Matrix2dPB((uint64_t)v282, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v276);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v287 = v286
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    swift_retain();
    v288 = v287;
    v289 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v288, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v290 = *v268
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    v291 = v290;
    v292 = v572;
    outlined init with copy of (Int32, Matrix2dPB)(v291, v572, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v610)(v292, 1, v289) == 1)
    {
      *(_QWORD *)v281 = 0;
      *(_DWORD *)(v281 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v292, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v292, v281, type metadata accessor for Coordinate3DPB);
    }
    v243 = (int *)v650;
    *(_DWORD *)(v281 + 8) = v285;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v293 = swift_retain();
      v294 = specialized HandDescriptorPB._StorageClass.init(copying:)(v293);
      swift_release();
      *v268 = v294;
      swift_release();
    }
    v295 = *v268;
    outlined init with take of Matrix2dPB(v281, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v613)(v145, 0, 1, v289);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v296 = v295
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
    swift_beginAccess();
    swift_retain();
    v297 = v296;
    v246 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v297, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
  }
  v298 = (int8x8_t *)((char *)v2 + v243[21]);
  v299 = v651;
  if ((v298[2].i8[0] & 1) == 0)
  {
    v300 = *v298;
    v301 = v651;
    v611 = (int8x8_t *)v298[1];
    v302 = v611;
    v303 = (uint64_t)v573;
    UnknownStorage.init()();
    *(_DWORD *)v303 = v300.i32[0];
    *(int8x8_t *)(v303 + 4) = vext_s8(v300, (int8x8_t)v302, 4uLL);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v305 = swift_retain();
      v306 = specialized HandDescriptorPB._StorageClass.init(copying:)(v305);
      swift_release();
      *v301 = v306;
      swift_release();
    }
    *(int8x8_t *)&v304 = v300;
    v649 = v304;
    v307 = *v301;
    outlined init with take of Matrix2dPB(v303, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    v308 = v646.i64[0];
    v642.i64[0] = *(_QWORD *)(v646.i64[0] + 56);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v642.i64[0])(v145, 0, 1, v246);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v309 = v307
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    swift_retain();
    v310 = v309;
    v311 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v310, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v312 = *v301
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v313 = v312;
    v314 = v574;
    outlined init with copy of (Int32, Matrix2dPB)(v313, v574, &demangling cache variable for type metadata for Coordinate3DPB?);
    v613 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v308 + 48);
    if (v613(v314, 1, v311) == 1)
    {
      v315 = (_DWORD *)v612;
      *(_QWORD *)v612 = 0;
      v315[2] = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v314, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v315 = (_DWORD *)v612;
      outlined init with take of Matrix2dPB(v314, v612, type metadata accessor for Coordinate3DPB);
    }
    *(_QWORD *)&v316 = v649;
    *((_QWORD *)&v316 + 1) = v611;
    v649 = v316;
    *v315 = v300.i32[0];
    v299 = v651;
    v317 = swift_isUniquelyReferenced_nonNull_native();
    v145 = (char *)v643.i64[0];
    if ((v317 & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v318 = swift_retain();
      v319 = specialized HandDescriptorPB._StorageClass.init(copying:)(v318);
      v315 = (_DWORD *)v612;
      swift_release();
      *v299 = v319;
      swift_release();
    }
    v320 = DWORD1(v649);
    v321 = *v299;
    outlined init with take of Matrix2dPB((uint64_t)v315, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v642.i64[0])(v145, 0, 1, v311);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v322 = v321
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    swift_retain();
    v323 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v322, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v324 = *v299
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v325 = v324;
    v326 = v576;
    outlined init with copy of (Int32, Matrix2dPB)(v325, v576, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v613(v326, 1, v323) == 1)
    {
      v327 = v575;
      *v575 = 0;
      *((_DWORD *)v327 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v326, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v327 = v575;
      outlined init with take of Matrix2dPB(v326, (uint64_t)v575, type metadata accessor for Coordinate3DPB);
    }
    *((_DWORD *)v327 + 1) = v320;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v328 = swift_retain();
      v329 = specialized HandDescriptorPB._StorageClass.init(copying:)(v328);
      swift_release();
      *v299 = v329;
      swift_release();
    }
    v330 = DWORD2(v649);
    v331 = *v299;
    outlined init with take of Matrix2dPB((uint64_t)v327, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v642.i64[0])(v145, 0, 1, v323);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v332 = v331
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    swift_retain();
    v333 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v332, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
    v334 = *v299
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    v335 = v334;
    v336 = v578;
    outlined init with copy of (Int32, Matrix2dPB)(v335, v578, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v613(v336, 1, v333) == 1)
    {
      v337 = v577;
      *v577 = 0;
      *((_DWORD *)v337 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v336, &demangling cache variable for type metadata for Coordinate3DPB?);
    }
    else
    {
      v337 = v577;
      outlined init with take of Matrix2dPB(v336, (uint64_t)v577, type metadata accessor for Coordinate3DPB);
    }
    v243 = (int *)v650;
    *((_DWORD *)v337 + 2) = v330;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v338 = swift_retain();
      v339 = specialized HandDescriptorPB._StorageClass.init(copying:)(v338);
      swift_release();
      *v299 = v339;
      swift_release();
    }
    v340 = *v299;
    outlined init with take of Matrix2dPB((uint64_t)v337, (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v642.i64[0])(v145, 0, 1, v333);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v341 = v340
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
    swift_beginAccess();
    swift_retain();
    v342 = v341;
    v246 = v652;
    outlined assign with take of HomePinchInternalPB?(v245, v342, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
  }
  if ((v2[48] & 1) == 0)
  {
    v343 = *(int8x8_t *)(v2 + 44);
    v344 = v614.i64[0];
    v345 = *(int8x8_t *)(v2 + 46);
    UnknownStorage.init()();
    *(_DWORD *)v344 = v343.i32[0];
    *(int8x8_t *)(v344 + 4) = vext_s8(v343, v345, 4uLL);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v346 = swift_retain();
      v347 = specialized HandDescriptorPB._StorageClass.init(copying:)(v346);
      swift_release();
      *v299 = v347;
      swift_release();
    }
    v348 = *v299;
    outlined init with take of Matrix2dPB(v614.i64[0], (uint64_t)v145, type metadata accessor for Coordinate3DPB);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v646.i64[0] + 56))(v145, 0, 1, v246);
    outlined init with take of ImageData?((uint64_t)v145, v245, &demangling cache variable for type metadata for Coordinate3DPB?);
    v349 = v245;
    v350 = v348 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v349, v350, &demangling cache variable for type metadata for Coordinate3DPB?);
    swift_endAccess();
    swift_release();
  }
  v351 = (__int128 *)((char *)v2 + v243[22]);
  if ((v351[4] & 1) == 0)
  {
    v353 = v351[1];
    v352 = v351[2];
    v354 = *v351;
    v356 = *((_QWORD *)v351 + 6);
    v355 = *((_QWORD *)v351 + 7);
    v654[0] = v354;
    v654[1] = v353;
    v654[2] = v352;
    *((_QWORD *)&v654[3] + 1) = v355;
    *(_QWORD *)&v654[3] = v356;
    v357 = v579;
    DetectionCanonicalizationData.toProtoBuf()(v579);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v358 = swift_retain();
      v359 = specialized HandDescriptorPB._StorageClass.init(copying:)(v358);
      swift_release();
      *v299 = v359;
      swift_release();
    }
    v360 = *v299;
    v361 = v357;
    v362 = v582;
    outlined init with take of Matrix2dPB(v361, v582, type metadata accessor for DetectionCanonicalizationDataPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v580 + 56))(v362, 0, 1, v581);
    v363 = v362;
    v364 = v583;
    outlined init with take of ImageData?(v363, v583, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    v365 = v360
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v364, v365, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    swift_endAccess();
    swift_release();
  }
  v366 = *((_QWORD *)v2 + 2);
  v639 = v2;
  if (v366)
  {
    LODWORD(v649) = v2[33];
    LODWORD(v613) = v2[32];
    v612 = *(_OWORD *)(v2 + 6);
    v367 = (int8x8_t *)*((_QWORD *)v2 + 7);
    v610 = (int8x8_t *)*((_QWORD *)v2 + 8);
    v611 = v367;
    v368 = *((_QWORD *)v2 + 9);
    v609 = (int8x8_t *)*((_QWORD *)v2 + 10);
    v369.i64[0] = (uint64_t)v610;
    v369.i64[1] = v368;
    v646 = v369;
    v583 = *(_OWORD *)(v2 + 10);
    v371 = *((_QWORD *)v2 + 11);
    v370 = *((_QWORD *)v2 + 12);
    v369.i64[0] = (uint64_t)v609;
    v369.i64[1] = v371;
    v643 = v369;
    v372 = v2;
    v373 = *((_QWORD *)v2 + 14);
    v374 = *((_QWORD *)v372 + 13);
    v369.i64[0] = v370;
    v369.i64[1] = v374;
    v642 = (int8x16_t)v369;
    v375 = *((_QWORD *)v372 + 15);
    v369.i64[0] = v373;
    v369.i64[1] = v375;
    v614 = v369;
    v376 = v641;
    v377 = (uint64_t)v598;
    *((_DWORD *)v598 + 2) = 0;
    UnknownStorage.init()();
    v378 = v377 + *(int *)(v376 + 28);
    v652 = *(_QWORD **)(v597 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v652)(v378, 1, 1, v640);
    *(_OWORD *)((char *)v654 + 8) = v612;
    *(_OWORD *)((char *)&v654[1] + 8) = v583;
    *(_QWORD *)&v654[0] = v366;
    *((_QWORD *)&v654[2] + 1) = v611;
    *((_QWORD *)&v654[3] + 1) = v368;
    *(_QWORD *)&v654[3] = v610;
    *((_QWORD *)&v654[4] + 1) = v371;
    *(_QWORD *)&v654[4] = v609;
    *((_QWORD *)&v654[5] + 1) = v374;
    *(_QWORD *)&v654[5] = v370;
    *((_QWORD *)&v654[6] + 1) = v375;
    v299 = v651;
    *(_QWORD *)&v654[6] = v373;
    LOWORD(v654[7]) = (unsigned __int16)v613 & 0x101;
    LODWORD(v370) = v649;
    DWORD1(v654[7]) = v649;
    *(_QWORD *)v377 = HandPose.serializeJointTransforms()(*(int32x2_t *)&v583);
    v379 = specialized Matrix2d.init(simd4x4float:)(v646, v643, v642, v614);
    v381 = v599;
    Matrix2d.toProtoBuf()(v379, v380 & 1, v599);
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?(v378, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined init with take of Matrix2dPB(v381, v378, type metadata accessor for Matrix2dPB);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v652)(v378, 0, 1, v640);
    *(_DWORD *)(v377 + 8) = v370;
    v382 = v600;
    outlined init with take of Matrix2dPB(v377, v600, type metadata accessor for CompactHandPosePB);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v383 = swift_retain();
      v384 = specialized HandDescriptorPB._StorageClass.init(copying:)(v383);
      swift_release();
      *v299 = v384;
      swift_release();
    }
    v385 = *v299;
    v386 = v382;
    v387 = v602;
    outlined init with take of Matrix2dPB(v386, v602, type metadata accessor for CompactHandPosePB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v601 + 56))(v387, 0, 1, v641);
    v388 = v387;
    v389 = v603;
    outlined init with take of ImageData?(v388, v603, &demangling cache variable for type metadata for CompactHandPosePB?);
    v390 = v385
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v389, v390, &demangling cache variable for type metadata for CompactHandPosePB?);
    swift_endAccess();
    swift_release();
    v2 = v639;
    v243 = (int *)v650;
  }
  v391 = *((_BYTE *)v2 + 136);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v392 = swift_retain();
    v393 = specialized HandDescriptorPB._StorageClass.init(copying:)(v392);
    swift_release();
    *v299 = v393;
    swift_release();
  }
  v394 = (_BYTE *)(*v299
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  swift_beginAccess();
  *v394 = v391;
  v395 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v396 = swift_retain();
    v397 = specialized HandDescriptorPB._StorageClass.init(copying:)(v396);
    swift_release();
    *v299 = v397;
    swift_release();
  }
  v398 = (_DWORD *)(*v299
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  swift_beginAccess();
  *v398 = v395;
  v399 = v2[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v400 = swift_retain();
    v401 = specialized HandDescriptorPB._StorageClass.init(copying:)(v400);
    swift_release();
    *v299 = v401;
    swift_release();
  }
  v402 = (_DWORD *)(*v299
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  swift_beginAccess();
  *v402 = v399;
  v403 = (uint64_t *)((char *)v2 + v243[33]);
  v404 = *v403;
  v405 = *((_BYTE *)v403 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v406 = swift_retain();
    v407 = specialized HandDescriptorPB._StorageClass.init(copying:)(v406);
    swift_release();
    *v299 = v407;
    swift_release();
  }
  v408 = *v299
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus;
  swift_beginAccess();
  *(_QWORD *)v408 = v404;
  *(_BYTE *)(v408 + 8) = v405;
  v409 = *((_QWORD *)v2 + 18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v410 = swift_retain();
    v411 = specialized HandDescriptorPB._StorageClass.init(copying:)(v410);
    swift_release();
    *v299 = v411;
    swift_release();
  }
  v412 = *v299;
  swift_beginAccess();
  *(_QWORD *)(v412 + 16) = v409;
  v413 = swift_bridgeObjectRetain();
  v414 = v615;
  v415 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12HandPresenceV8CategoryOSfG_AHs5NeverOTg5010_s5Hands12ef2V8g31OSfACIgyyr_AE3key_Sf5valuetACs5H100OIegnrzr_TR055_s5Hands0A6FADataV15appendPoseFrameyyAA0A7KitDataVFAA12bc4VAH8D11O_SftXEfU2_Tf3nnnpf_nTf1cn_n(v413);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v416 = swift_retain();
    v417 = specialized HandDescriptorPB._StorageClass.init(copying:)(v416);
    swift_release();
    *v299 = v417;
    swift_release();
  }
  v418 = (uint64_t *)(*v299
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  swift_beginAccess();
  *v418 = v415;
  swift_bridgeObjectRelease();
  v419 = (uint64_t *)((char *)v2 + v243[25]);
  v420 = *v419;
  v421 = *((_BYTE *)v419 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v422 = swift_retain();
    v423 = specialized HandDescriptorPB._StorageClass.init(copying:)(v422);
    swift_release();
    *v299 = v423;
    swift_release();
  }
  v424 = *v299
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
  swift_beginAccess();
  *(_QWORD *)v424 = v420;
  *(_BYTE *)(v424 + 8) = v421;
  v425 = *((unsigned __int8 *)v2 + 4);
  if (v425 != 2)
  {
    v426 = v425 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v427 = swift_retain();
      v428 = specialized HandDescriptorPB._StorageClass.init(copying:)(v427);
      swift_release();
      *v299 = v428;
      swift_release();
    }
    v429 = (_BYTE *)(*v299
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
    swift_beginAccess();
    *v429 = v426;
  }
  v430 = *((unsigned __int8 *)v2 + 5);
  if (v430 != 2)
  {
    v431 = v430 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v432 = swift_retain();
      v433 = specialized HandDescriptorPB._StorageClass.init(copying:)(v432);
      swift_release();
      *v299 = v433;
      swift_release();
    }
    v434 = (_BYTE *)(*v299
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
    swift_beginAccess();
    *v434 = v431;
  }
  if (*((_QWORD *)v2 + 25))
  {
    v435 = *((_QWORD *)v2 + 26);
    *(_QWORD *)&v654[0] = *((_QWORD *)v2 + 25);
    *((_QWORD *)&v654[0] + 1) = v435;
    v436 = v604;
    PoseSpec.toProtoBuf()(v604);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v437 = swift_retain();
      v438 = specialized HandDescriptorPB._StorageClass.init(copying:)(v437);
      swift_release();
      *v299 = v438;
      swift_release();
    }
    v439 = *v299;
    v440 = v436;
    v441 = v607;
    outlined init with take of Matrix2dPB(v440, v607, type metadata accessor for PoseSpecPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v605 + 56))(v441, 0, 1, v606);
    v442 = v608;
    outlined init with take of ImageData?(v441, v608, &demangling cache variable for type metadata for PoseSpecPB?);
    v443 = v439 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v442, v443, &demangling cache variable for type metadata for PoseSpecPB?);
    swift_endAccess();
    swift_release();
  }
  v444 = *((_BYTE *)v2 + 137);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v445 = swift_retain();
    v446 = specialized HandDescriptorPB._StorageClass.init(copying:)(v445);
    swift_release();
    *v299 = v446;
    swift_release();
  }
  v447 = (_BYTE *)(*v299
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  swift_beginAccess();
  *v447 = v444;
  v448 = (uint64_t *)((char *)v2 + v243[27]);
  if ((v448[1] & 1) == 0)
  {
    v449 = *v448;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v450 = swift_retain();
      v451 = specialized HandDescriptorPB._StorageClass.init(copying:)(v450);
      swift_release();
      *v299 = v451;
      swift_release();
    }
    v452 = (_QWORD *)(*v299
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
    swift_beginAccess();
    *v452 = v449;
  }
  v453 = (uint64_t *)((char *)v2 + v243[28]);
  if ((*((_BYTE *)v453 + 49) & 1) != 0)
  {
    v454 = (uint64_t)v645;
    (*(void (**)(int8x8_t *, uint64_t, uint64_t, uint64_t))(v616 + 56))(v645, 1, 1, v647);
    outlined destroy of Coordinate3DPB?(v454, &demangling cache variable for type metadata for PinchInfoPB?);
  }
  else
  {
    v652 = v414;
    v455 = *v453;
    v456 = v453[1];
    v458 = v453[2];
    v457 = v453[3];
    v459 = *((_BYTE *)v453 + 48);
    v460 = v453[4];
    *(_QWORD *)&v649 = v453[5];
    v461 = v645;
    *v645 = 0;
    v462 = v647;
    UnknownStorage.init()();
    v463 = (uint64_t)v461 + *(int *)(v462 + 24);
    v464 = v585;
    v465 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v584 + 56);
    v465(v463, 1, 1, v585);
    if ((v460 & 1) == 0)
    {
      v466 = v563;
      UnknownStorage.init()();
      *v466 = v455;
      v466[1] = v456;
      v466[2] = v458;
      v466[3] = v457;
      outlined destroy of Coordinate3DPB?(v463, &demangling cache variable for type metadata for PinchStatusPB?);
      outlined init with take of Matrix2dPB((uint64_t)v466, v463, type metadata accessor for PinchStatusPB);
      v465(v463, 0, 1, v464);
    }
    if ((v459 & 1) == 0)
      *v645 = (int8x8_t)v649;
    v467 = *(void (**)(int8x8_t *, _QWORD, uint64_t, uint64_t))(v616 + 56);
    v468 = (uint64_t)v645;
    v467(v645, 0, 1, v647);
    v469 = v588;
    outlined init with take of Matrix2dPB(v468, v588, type metadata accessor for PinchInfoPB);
    v470 = v586;
    outlined init with copy of TrackingUpdateDataPB(v469, v586, type metadata accessor for PinchInfoPB);
    v299 = v651;
    v471 = swift_isUniquelyReferenced_nonNull_native();
    v2 = v639;
    v243 = (int *)v650;
    if ((v471 & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v472 = swift_retain();
      v473 = specialized HandDescriptorPB._StorageClass.init(copying:)(v472);
      swift_release();
      *v299 = v473;
      swift_release();
    }
    v474 = *v299;
    v475 = v470;
    v476 = v587;
    outlined init with take of Matrix2dPB(v475, v587, type metadata accessor for PinchInfoPB);
    v467((int8x8_t *)v476, 0, 1, v647);
    v477 = v476;
    v478 = v589;
    outlined init with take of ImageData?(v477, v589, &demangling cache variable for type metadata for PinchInfoPB?);
    v479 = v474
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v478, v479, &demangling cache variable for type metadata for PinchInfoPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v469, type metadata accessor for PinchInfoPB);
    v414 = v652;
  }
  v480 = swift_bridgeObjectRetain();
  v481 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF13PoseImageCropVG_AF0ghI2PBVs5NeverOTg5053_s5Hands14HandDescriptorV10toProtoBufAA0bC2PBVyFAA013ghi7G0VAA12eF29O3key_AA0hiJ0V5valuet_tXEfU1_Tf1cn_n(v480);
  v652 = v414;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v482 = swift_retain();
    v483 = specialized HandDescriptorPB._StorageClass.init(copying:)(v482);
    swift_release();
    *v299 = v483;
    swift_release();
  }
  v484 = (uint64_t *)(*v299
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  swift_beginAccess();
  *v484 = v481;
  swift_bridgeObjectRelease();
  v485 = v617;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v2 + v243[24], v617, &demangling cache variable for type metadata for HandDescriptorInternal?);
  v486 = type metadata accessor for HandDescriptorInternal();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v486 - 8) + 48))(v485, 1, v486) == 1)
  {
    outlined destroy of Coordinate3DPB?(v485, &demangling cache variable for type metadata for HandDescriptorInternal?);
  }
  else
  {
    v487 = v590;
    HandDescriptorInternal.toProtoBuf()(v590);
    outlined destroy of Matrix3x3PB(v485, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
    v488 = v487;
    v489 = v619;
    outlined init with take of Matrix2dPB(v488, v619, type metadata accessor for HandDescriptorInternalPB);
    outlined init with copy of TrackingUpdateDataPB(v489, v618, type metadata accessor for HandDescriptorInternalPB);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v490 = swift_retain();
      v491 = specialized HandDescriptorPB._StorageClass.init(copying:)(v490);
      swift_release();
      *v299 = v491;
      swift_release();
    }
    v492 = *v299;
    v493 = v593;
    outlined init with take of Matrix2dPB(v618, v593, type metadata accessor for HandDescriptorInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v591 + 56))(v493, 0, 1, v592);
    v494 = v594;
    outlined init with take of ImageData?(v493, v594, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    v495 = v492
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v494, v495, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v619, type metadata accessor for HandDescriptorInternalPB);
  }
  v496 = v2[58];
  v497 = *((_BYTE *)v2 + 236);
  v498 = *((_QWORD *)v2 + 30);
  v499 = *((_BYTE *)v2 + 248);
  v500 = *((_BYTE *)v2 + 249);
  v501 = *((_BYTE *)v2 + 250);
  v502 = *((_BYTE *)v2 + 251);
  v503 = *((_QWORD *)v2 + 32);
  v504 = v2[66];
  v505 = *((_BYTE *)v2 + 268);
  v506 = v2[68];
  v507 = v2[69];
  v508 = *((_BYTE *)v2 + 280);
  v654[0] = *(_OWORD *)(v2 + 54);
  LODWORD(v654[1]) = v496;
  BYTE4(v654[1]) = v497;
  *((_QWORD *)&v654[1] + 1) = v498;
  LOBYTE(v654[2]) = v499;
  BYTE1(v654[2]) = v500;
  BYTE2(v654[2]) = v501;
  BYTE3(v654[2]) = v502;
  *((_QWORD *)&v654[2] + 1) = v503;
  LODWORD(v654[3]) = v504;
  BYTE4(v654[3]) = v505;
  *((_QWORD *)&v654[3] + 1) = __PAIR64__(v507, v506);
  LOBYTE(v654[4]) = v508;
  PinchFeatures.toProtoBuf()(v648);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v509 = swift_retain();
    v510 = specialized HandDescriptorPB._StorageClass.init(copying:)(v509);
    swift_release();
    *v299 = v510;
    swift_release();
  }
  v511 = *v299;
  v512 = v622;
  outlined init with take of Matrix2dPB(v648, v622, type metadata accessor for PinchFeaturesPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v620 + 56))(v512, 0, 1, v621);
  v513 = v623;
  outlined init with take of ImageData?(v512, v623, &demangling cache variable for type metadata for PinchFeaturesPB?);
  v514 = v511
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v513, v514, &demangling cache variable for type metadata for PinchFeaturesPB?);
  swift_endAccess();
  swift_release();
  memcpy(v654, (char *)v2 + v243[35], 0x118uLL);
  v515 = v624;
  CameraPairTransition.toProtoBuf()(v624);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v516 = swift_retain();
    v517 = specialized HandDescriptorPB._StorageClass.init(copying:)(v516);
    swift_release();
    *v299 = v517;
    swift_release();
  }
  v518 = *v299;
  v519 = (uint64_t)v515;
  v520 = v627;
  outlined init with take of Matrix2dPB(v519, v627, type metadata accessor for CameraPairTransitionPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v625 + 56))(v520, 0, 1, v626);
  v521 = v628;
  outlined init with take of ImageData?(v520, v628, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v522 = v518
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v521, v522, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  swift_endAccess();
  swift_release();
  v523 = *((unsigned __int8 *)v2 + 138);
  if (v523 != 2)
  {
    v524 = v523 & 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v525 = swift_retain();
      v526 = specialized HandDescriptorPB._StorageClass.init(copying:)(v525);
      swift_release();
      *v299 = v526;
      swift_release();
    }
    v527 = (_BYTE *)(*v299
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
    swift_beginAccess();
    *v527 = v524;
  }
  v528 = *((_BYTE *)v2 + 281);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorPB._StorageClass(0);
    swift_allocObject();
    v529 = swift_retain();
    v530 = specialized HandDescriptorPB._StorageClass.init(copying:)(v529);
    swift_release();
    *v299 = v530;
    swift_release();
  }
  v531 = (_BYTE *)(*v299
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  swift_beginAccess();
  *v531 = v528;
  v532 = v629;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v2 + v243[17], v629, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v533 = v631;
  v534 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v644 + 48))(v532, 1, v631);
  v535 = v299;
  v536 = v636;
  v537 = (uint64_t)v633;
  if (v534 == 1)
  {
    outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  }
  else
  {
    v538 = v632;
    outlined init with take of Matrix2dPB(v532, v632, type metadata accessor for ThumbIndexTapFeaturesPB);
    outlined init with copy of TrackingUpdateDataPB(v538, v630, type metadata accessor for ThumbIndexTapFeaturesPB);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v539 = swift_retain();
      v540 = specialized HandDescriptorPB._StorageClass.init(copying:)(v539);
      swift_release();
      *v535 = v540;
      swift_release();
    }
    v541 = *v535;
    v542 = v595;
    outlined init with take of Matrix2dPB(v630, v595, type metadata accessor for ThumbIndexTapFeaturesPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v644 + 56))(v542, 0, 1, v533);
    v543 = v596;
    outlined init with take of ImageData?(v542, v596, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    v544 = v541
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v543, v544, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v632, type metadata accessor for ThumbIndexTapFeaturesPB);
    v243 = (int *)v650;
  }
  v545 = *(int *)((char *)v2 + v243[34]);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  UnknownStorage.init()();
  *(_DWORD *)v537 = v545;
  v546 = swift_bridgeObjectRetain();
  v547 = v652;
  v548 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSfG_s5Int32V_Sfts5NeverOTg5010_s5Hands12ef5OSfs5g34VSfIgnydd_AC3key_Sf5valuetAE_Sfts5H110OIegnrzr_TR063_s5Hands26OperationalEnvelopeSignalsV10toProtoBufAA0bcD2PBVyFs5d9V_SftAA12bc2O_T5XEfU_Tf3nnnpf_nTf1cn_n(v546);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v548 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v549 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v549 = MEMORY[0x24BEE4B00];
  }
  v653[0] = v549;
  v550 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v550, 1, v653);
  if (v547)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v537 + 8) = v653[0];
    v551 = v634;
    outlined init with take of Matrix2dPB(v537, v634, type metadata accessor for OperationalEnvelopeSignalsPB);
    v552 = v651;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorPB._StorageClass(0);
      swift_allocObject();
      v553 = swift_retain();
      v554 = specialized HandDescriptorPB._StorageClass.init(copying:)(v553);
      swift_release();
      *v552 = v554;
      swift_release();
    }
    v555 = *v552;
    v556 = v551;
    v557 = v637;
    outlined init with take of Matrix2dPB(v556, v637, type metadata accessor for OperationalEnvelopeSignalsPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v635 + 56))(v557, 0, 1, v536);
    v558 = v638;
    outlined init with take of ImageData?(v557, v638, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    v559 = v555
         + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v558, v559, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t HandDescriptor.almostEqual(to:withThreshold:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  _BOOL4 v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  int64_t v62;
  Swift::String v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t result;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _OWORD *v100;
  char v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t v119;
  BOOL v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  unint64_t v128;
  Swift::String v129;
  Swift::String v130;
  Swift::String v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Swift::String v143;
  Swift::String v144;
  uint64_t v145;
  Swift::String v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  Swift::String v155;
  Swift::String v156;
  uint64_t v157;
  void *v158;
  void *v159;
  Swift::String v160;
  Swift::String v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int64_t v172;
  uint64_t v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t i;
  int64_t v179;
  unint64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  __int128 *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  _OWORD *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  double v207;
  Swift::String v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  Swift::String v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  float v248;
  uint64_t v249;
  char v250;
  float v251;
  uint64_t v252;
  char v253;
  float v254;
  uint64_t v255;
  char v256;
  float v257;
  uint64_t v258;
  char v259;
  float v260;
  uint64_t v261;
  char v262;
  float v263;
  uint64_t v264;
  Swift::String v265;
  Swift::String v266;
  Swift::String v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  Swift::String v271;
  Swift::String v272;
  Swift::String v273;
  Swift::String v274;
  Swift::String v275;
  Swift::String v276;
  Swift::String v277;
  Swift::String v278;
  Swift::String v279;
  Swift::String v280;
  Swift::String v281;
  Swift::String v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  Swift::String v288;
  Swift::String v289;
  Swift::String v290;
  Swift::String v291;
  Swift::String v292;
  int v293;
  int v294;
  Swift::String v295;
  Swift::String v296;
  Swift::String v297;
  Swift::String v298;
  Swift::String v299;
  Swift::String v300;
  int v301;
  char v302;
  uint64_t v303;
  char v304;
  char v305;
  char v306;
  char v307;
  uint64_t v308;
  int v309;
  char v310;
  unsigned int v311;
  unsigned int v312;
  char v313;
  int v314;
  char v315;
  uint64_t v316;
  char v317;
  char v318;
  char v319;
  char v320;
  uint64_t v321;
  int v322;
  char v323;
  unsigned int v324;
  unsigned int v325;
  char v326;
  double v327;
  Swift::String v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  Swift::String v332;
  int v333;
  char v334;
  uint64_t v335;
  char v336;
  char v337;
  char v338;
  char v339;
  uint64_t v340;
  int v341;
  char v342;
  unsigned int v343;
  unsigned int v344;
  char v345;
  Swift::String v346;
  int v347;
  char v348;
  uint64_t v349;
  char v350;
  char v351;
  char v352;
  char v353;
  uint64_t v354;
  int v355;
  char v356;
  unsigned int v357;
  unsigned int v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int (*v363)(uint64_t, uint64_t, uint64_t);
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  Swift::String v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  Swift::String v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  Swift::String v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  Swift::String v384;
  Swift::String v385;
  Swift::String v386;
  uint64_t v387;
  Swift::String v388;
  uint64_t v389;
  int v390;
  int v391;
  uint64_t v392;
  Swift::String v393;
  Swift::String v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  Swift::String v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  Swift::String v407;
  Swift::String v408;
  Swift::String v409;
  Swift::String v410;
  Swift::String v411;
  Swift::String v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  uint64_t *v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  Swift::String v420;
  Swift::String v421;
  Swift::String v422;
  Swift::String v423;
  Swift::String v424;
  Swift::String v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t *v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  Swift::String v433;
  Swift::String v434;
  Swift::String v435;
  Swift::String v436;
  Swift::String v437;
  Swift::String v438;
  int v439;
  uint64_t v440;
  int v441;
  Swift::String v442;
  Swift::String v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  Swift::String v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  int v452;
  Swift::String v453;
  Swift::String v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  Swift::String v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  Swift::String v463;
  uint64_t v464;
  unint64_t v465;
  Swift::String v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  char *v485;
  char *v486;
  char *v487;
  unsigned int v488;
  void *v489;
  int *v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  void *v494;
  float32x4_t v495;
  float32x4_t v496;
  uint64_t v497;
  __int128 v498;
  uint64_t v499;
  int64_t v500;
  float32x4_t v501;
  _OWORD v502[8];
  _OWORD v503[2];
  float32x4_t v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  _OWORD v509[2];
  __int128 v510;
  __int128 v511;
  _OWORD v512[2];
  _OWORD v513[7];
  __int128 v514;
  __int128 v515;
  _OWORD v516[2];
  _OWORD v517[7];
  __int128 v518;
  __int128 v519;
  _OWORD v520[3];
  Hands::OperationalEnvelopeSignals v521;

  v469 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v469, v5);
  v468 = (uint64_t)&v467 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v467 - v9;
  MEMORY[0x24BDAC7A8](v11, v12);
  v477 = (uint64_t)&v467 - v13;
  v478 = type metadata accessor for HandDescriptorInternal();
  v476 = *(_QWORD *)(v478 - 8);
  MEMORY[0x24BDAC7A8](v478, v14);
  v16 = (char *)&v467 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v471 = (uint64_t)&v467 - v19;
  v20 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v20, v21);
  v473 = (uint64_t)&v467 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v472 = (uint64_t)&v467 - v25;
  MEMORY[0x24BDAC7A8](v26, v27);
  v475 = (uint64_t)&v467 - v28;
  MEMORY[0x24BDAC7A8](v29, v30);
  v481 = (char *)&v467 - v31;
  MEMORY[0x24BDAC7A8](v32, v33);
  v474 = (uint64_t *)((char *)&v467 - v34);
  MEMORY[0x24BDAC7A8](v35, v36);
  v480 = (uint64_t)&v467 - v37;
  MEMORY[0x24BDAC7A8](v38, v39);
  v483 = (uint64_t)&v467 - v40;
  MEMORY[0x24BDAC7A8](v41, v42);
  v482 = (uint64_t)&v467 - v43;
  MEMORY[0x24BDAC7A8](v44, v45);
  v484 = (uint64_t)&v467 - v46;
  MEMORY[0x24BDAC7A8](v47, v48);
  v479 = (uint64_t)&v467 - v49;
  v50 = vabds_f32(*(float *)v2, *(float *)a1);
  v51 = a2;
  v52 = v50 <= v51;
  v499 = a1;
  if (v50 > v51)
  {
    *(_QWORD *)&v517[0] = 0;
    *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v53._countAndFlagsBits = 0xD00000000000001ELL;
    v53._object = (void *)0x800000023D9CD950;
    String.append(_:)(v53);
    *(_QWORD *)&v513[0] = *(_QWORD *)(v2 + 144);
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 8250;
    v55._object = (void *)0xE200000000000000;
    String.append(_:)(v55);
    Float.write<A>(to:)();
    v56._countAndFlagsBits = 8236;
    v56._object = (void *)0xE200000000000000;
    String.append(_:)(v56);
    a1 = v499;
    Float.write<A>(to:)();
    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v513[0] = xmmword_23D9A8970;
    v513[1] = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 2, (uint64_t *)v513, 0xD000000000000056, 0x800000023D9CD8F0, 411, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
  }
  v57 = *(int *)(v20 + 72);
  v58 = *(_QWORD *)(v2 + v57);
  v59 = *(_QWORD *)(v58 + 16);
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + v57) + 16);
  v490 = (int *)v20;
  v485 = v10;
  v470 = v16;
  v500 = v57;
  if (v59 == v60)
  {
    v488 = v52;
  }
  else
  {
    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v517[0] = 0xD000000000000018;
    *((_QWORD *)&v517[0] + 1) = 0x800000023D9CD970;
    type metadata accessor for HandyLoggerNeo();
    v498 = xmmword_23D9A8970;
    v513[0] = xmmword_23D9A8970;
    v513[1] = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, 0x800000023D9CD8F0, 416, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
    strcpy((char *)v517, "self = ");
    *((_QWORD *)&v517[0] + 1) = 0xE700000000000000;
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    swift_bridgeObjectRetain();
    v61._countAndFlagsBits = Dictionary.description.getter();
    v62 = v57;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 32;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
    v513[0] = v498;
    v513[1] = 0uLL;
    v64 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, 0x800000023D9CD8F0, 417, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
    strcpy((char *)v517, "value = ");
    BYTE9(v517[0]) = 0;
    WORD5(v517[0]) = 0;
    HIDWORD(v517[0]) = -402653184;
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
    v513[0] = v498;
    v513[1] = 0uLL;
    a1 = v499;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, 0x800000023D9CD8F0, 418, (uint64_t)v517, v64);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
    v488 = 0;
    v58 = *(_QWORD *)(v2 + v62);
  }
  v497 = v2;
  v486 = (char *)(v2 + 268);
  v487 = (char *)(a1 + 268);
  v66 = *(_QWORD *)(v58 + 64);
  v492 = v58 + 64;
  v67 = 1 << *(_BYTE *)(v58 + 32);
  v68 = -1;
  if (v67 < 64)
    v68 = ~(-1 << v67);
  v69 = v68 & v66;
  v495.i64[0] = (unint64_t)(v67 + 63) >> 6;
  v496.i64[0] = (uint64_t)&v505;
  result = swift_bridgeObjectRetain();
  v71 = 0;
  v494 = (void *)0x800000023D9CD990;
  v498 = xmmword_23D9A8970;
  v491 = (unint64_t)"t";
  v493 = 0x800000023D9CD8F0;
  v489 = (void *)0x800000023D9CD9B0;
  while (1)
  {
    if (v69)
    {
      v83 = __clz(__rbit64(v69));
      v69 &= v69 - 1;
      v84 = v83 | (v71 << 6);
      goto LABEL_28;
    }
    v85 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
      goto LABEL_214;
    }
    if (v85 >= v495.i64[0])
      goto LABEL_32;
    v86 = *(_QWORD *)(v492 + 8 * v85);
    ++v71;
    if (!v86)
    {
      v71 = v85 + 1;
      if (v85 + 1 >= v495.i64[0])
        goto LABEL_32;
      v86 = *(_QWORD *)(v492 + 8 * v71);
      if (!v86)
      {
        v71 = v85 + 2;
        if (v85 + 2 >= v495.i64[0])
          goto LABEL_32;
        v86 = *(_QWORD *)(v492 + 8 * v71);
        if (!v86)
          break;
      }
    }
LABEL_27:
    v69 = (v86 - 1) & v86;
    v84 = __clz(__rbit64(v86)) + (v71 << 6);
LABEL_28:
    v88 = *(_QWORD *)(v58 + 48) + 16 * v84;
    v89 = *(_QWORD *)v88;
    v90 = *(_BYTE *)(v88 + 8);
    v91 = (__int128 *)(*(_QWORD *)(v58 + 56) + 112 * v84);
    v92 = *v91;
    v93 = v91[2];
    v517[1] = v91[1];
    v517[2] = v93;
    v94 = v91[3];
    v95 = v91[4];
    v96 = v91[5];
    *(_OWORD *)((char *)&v517[5] + 9) = *(__int128 *)((char *)v91 + 89);
    v517[4] = v95;
    v517[5] = v96;
    v517[3] = v94;
    v517[0] = v92;
    v97 = *(_QWORD *)(a1 + v500);
    if (!*(_QWORD *)(v97 + 16))
      goto LABEL_10;
    outlined retain of DetectionResult((uint64_t)v517);
    v98 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v90);
    if ((v99 & 1) == 0)
    {
      outlined release of DetectionResult((uint64_t)v517);
LABEL_10:
      *(_QWORD *)&v513[0] = 0;
      *((_QWORD *)&v513[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      v72._countAndFlagsBits = 0x697463657465444CLL;
      v72._object = (void *)0xEE00206E69206E6FLL;
      String.append(_:)(v72);
      v504.i64[0] = v89;
      v504.i8[8] = v90;
      _print_unlocked<A, B>(_:_:)();
      v73._countAndFlagsBits = 0xD000000000000012;
      v73._object = v494;
      String.append(_:)(v73);
      v504.i64[0] = *(_QWORD *)(v497 + 144);
      v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._countAndFlagsBits = 32;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      swift_bridgeObjectRetain();
      v76._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77._countAndFlagsBits = 32;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      swift_bridgeObjectRetain();
      v78._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      a1 = v499;
      swift_bridgeObjectRelease();
      *((_QWORD *)&v513[1] + 1) = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v504 = (float32x4_t)v498;
      v79 = v496.i64[0];
      *(_QWORD *)v496.i64[0] = 0;
      *(_QWORD *)(v79 + 8) = 0;
      v80 = v493;
      v81 = MEMORY[0x24BEE4AF8];
      v82 = 430;
      goto LABEL_11;
    }
    v100 = (_OWORD *)(*(_QWORD *)(v97 + 56) + 112 * v98);
    v507 = v100[3];
    v508 = v100[4];
    v509[0] = v100[5];
    *(_OWORD *)((char *)v509 + 9) = *(_OWORD *)((char *)v100 + 89);
    v504 = *(float32x4_t *)v100;
    v505 = v100[1];
    v506 = v100[2];
    v513[4] = v517[4];
    v513[5] = v517[5];
    *(_OWORD *)((char *)&v513[5] + 9) = *(_OWORD *)((char *)&v517[5] + 9);
    v513[0] = v517[0];
    v513[1] = v517[1];
    v513[2] = v517[2];
    v513[3] = v517[3];
    v101 = DetectionResult.almostEqual(to:withThreshold:)((float32x2_t *)&v504, a2);
    result = outlined release of DetectionResult((uint64_t)v517);
    if ((v101 & 1) == 0)
    {
      *(_QWORD *)&v513[0] = 0;
      *((_QWORD *)&v513[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      v102._countAndFlagsBits = 0x6974636574654452;
      v102._object = (void *)0xEE00206E69206E6FLL;
      String.append(_:)(v102);
      v504.i64[0] = v89;
      v504.i8[8] = v90;
      _print_unlocked<A, B>(_:_:)();
      v103._countAndFlagsBits = 0xD000000000000013;
      v103._object = v489;
      String.append(_:)(v103);
      v504.i64[0] = *(_QWORD *)(v497 + 144);
      v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v104);
      swift_bridgeObjectRelease();
      v105._countAndFlagsBits = 32;
      v105._object = (void *)0xE100000000000000;
      String.append(_:)(v105);
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      swift_bridgeObjectRetain();
      v106._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v107._countAndFlagsBits = 32;
      v107._object = (void *)0xE100000000000000;
      String.append(_:)(v107);
      swift_bridgeObjectRetain();
      v108._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      a1 = v499;
      swift_bridgeObjectRelease();
      *((_QWORD *)&v513[1] + 1) = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v504 = (float32x4_t)v498;
      v109 = v496.i64[0];
      *(_QWORD *)v496.i64[0] = 0;
      *(_QWORD *)(v109 + 8) = 0;
      v80 = v491 | 0x8000000000000000;
      v82 = 427;
      v81 = MEMORY[0x24BEE4AF8];
LABEL_11:
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v504, 0xD000000000000056, v80, v82, (uint64_t)v513, v81);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v513);
    }
  }
  v87 = v85 + 3;
  if (v87 >= v495.i64[0])
  {
LABEL_32:
    swift_release();
    if ((*(_BYTE *)(v497 + 192) & 1) != 0)
    {
      v110 = v479;
      outlined init with copy of TrackingUpdateDataPB(a1, v479, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v111 = *(unsigned __int8 *)(v110 + 192);
      outlined destroy of Matrix3x3PB(v110, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v112 = v488 & v111;
      goto LABEL_39;
    }
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
    {
      v113 = v479;
      outlined init with copy of TrackingUpdateDataPB(a1, v479, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB(v113, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    }
    else
    {
      v115 = *(_QWORD *)(v497 + 176);
      v114 = *(_QWORD *)(v497 + 184);
      v116.i64[0] = v115;
      v116.i64[1] = v114;
      v117 = *(_QWORD *)(a1 + 176);
      v118 = *(_QWORD *)(a1 + 184);
      v119.i64[0] = v117;
      v119.i64[1] = v118;
      v495 = v119;
      v496 = v116;
      v120 = SIMD3<>.almostEqual(to:withThreshold:)(v119, a2, v116);
      v112 = v488;
      if (v120)
        goto LABEL_39;
      *(_QWORD *)&v517[0] = 0;
      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      v121._countAndFlagsBits = 0xD00000000000001ELL;
      v121._object = (void *)0x800000023D9CDE40;
      String.append(_:)(v121);
      *(_QWORD *)&v513[0] = *(_QWORD *)(v497 + 144);
      v122._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v122);
      swift_bridgeObjectRelease();
      v123._countAndFlagsBits = 8250;
      v123._object = (void *)0xE200000000000000;
      String.append(_:)(v123);
      *((_QWORD *)&v513[0] + 1) = v114;
      *(_QWORD *)&v513[0] = v115;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
      v124._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      v125._countAndFlagsBits = 8236;
      v125._object = (void *)0xE200000000000000;
      String.append(_:)(v125);
      *((_QWORD *)&v513[0] + 1) = v118;
      *(_QWORD *)&v513[0] = v117;
      v126._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v126);
      swift_bridgeObjectRelease();
      v127._countAndFlagsBits = 32;
      v127._object = (void *)0xE100000000000000;
      String.append(_:)(v127);
      Float.write<A>(to:)();
      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
      v496.i64[0] = type metadata accessor for HandyLoggerNeo();
      v513[0] = v498;
      v513[1] = 0uLL;
      v128 = v491 | 0x8000000000000000;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 436, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
      *(_QWORD *)&v517[0] = 0;
      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v517[0] = 0xD00000000000001CLL;
      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDE60;
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      swift_bridgeObjectRetain();
      v129._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v129);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v130._countAndFlagsBits = 32;
      v130._object = (void *)0xE100000000000000;
      String.append(_:)(v130);
      swift_bridgeObjectRetain();
      v131._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v131);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
      v513[0] = v498;
      v513[1] = 0uLL;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v128, 437, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
    }
    v112 = 0;
LABEL_39:
    v488 = v112;
    v132 = (_QWORD *)v497;
    v133 = *(_QWORD *)(v497 + 200);
    v134 = v484;
    outlined init with copy of TrackingUpdateDataPB(a1, v484, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v133)
    {
      outlined destroy of Matrix3x3PB(v134, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v135 = v482;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v132, v482, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v136 = v483;
      outlined init with copy of TrackingUpdateDataPB(a1, v483, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    }
    else
    {
      v141 = *(_QWORD *)(v134 + 200);
      outlined copy of HandPose?(v141);
      outlined destroy of Matrix3x3PB(v134, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined consume of HandPose?(v141);
      v135 = v482;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v132, v482, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v136 = v483;
      outlined init with copy of TrackingUpdateDataPB(v499, v483, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v141)
      {
        outlined destroy of Matrix3x3PB(v136, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Matrix3x3PB(v135, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        goto LABEL_47;
      }
    }
    v137 = *(_QWORD *)(v135 + 200);
    outlined destroy of Matrix3x3PB(v135, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v138 = v480;
    outlined init with take of Matrix2dPB(v136, v480, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (!v137)
    {
      outlined destroy of Matrix3x3PB(v138, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v140 = v132[25];
      if (!v140)
        goto LABEL_52;
LABEL_49:
      if (*(_QWORD *)(v499 + 200))
      {
        v150 = swift_bridgeObjectRetain();
        v151 = specialized Set.init<A>(_:)(v150);
        swift_bridgeObjectRelease();
        v152 = swift_bridgeObjectRetain();
        v153 = specialized Set.init<A>(_:)(v152);
        swift_bridgeObjectRelease();
        v154 = specialized static Set.== infix(_:_:)(v151, v153);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v154 & 1) == 0)
        {
          *(_QWORD *)&v517[0] = 0;
          *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v517[0] = 0xD000000000000023;
          *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDDF0;
          *(_QWORD *)&v513[0] = v132[18];
          v155._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v155);
          swift_bridgeObjectRelease();
          v156._countAndFlagsBits = 2112032;
          v156._object = (void *)0xE300000000000000;
          String.append(_:)(v156);
          swift_bridgeObjectRetain();
          v157 = MEMORY[0x2426374F8](v140, &type metadata for CameraSource);
          v159 = v158;
          swift_bridgeObjectRelease();
          v160._countAndFlagsBits = v157;
          v160._object = v159;
          String.append(_:)(v160);
          swift_bridgeObjectRelease();
          v161._countAndFlagsBits = 32;
          v161._object = (void *)0xE100000000000000;
          String.append(_:)(v161);
          v162 = swift_bridgeObjectRetain();
          v163 = MEMORY[0x2426374F8](v162, &type metadata for CameraSource);
          v165 = v164;
          swift_bridgeObjectRelease();
          v166._countAndFlagsBits = v163;
          v166._object = v165;
          String.append(_:)(v166);
          swift_bridgeObjectRelease();
          *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
          type metadata accessor for HandyLoggerNeo();
          v513[0] = v498;
          v513[1] = 0uLL;
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 456, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
          v488 = 0;
        }
      }
LABEL_52:
      v167 = *(_QWORD *)((char *)v132 + v490[23]);
      v168 = *(_QWORD *)(v167 + 64);
      v496.i64[0] = v167 + 64;
      v169 = 1 << *(_BYTE *)(v167 + 32);
      v170 = -1;
      if (v169 < 64)
        v170 = ~(-1 << v169);
      v171 = v170 & v168;
      v500 = (unint64_t)(v169 + 63) >> 6;
      v495.i64[0] = (uint64_t)v502;
      result = swift_bridgeObjectRetain();
      v172 = 0;
      v493 = v491 | 0x8000000000000000;
      v494 = (void *)0x800000023D9CDDD0;
      v173 = v499;
      if (v171)
        goto LABEL_57;
LABEL_58:
      v179 = v172 + 1;
      if (__OFADD__(v172, 1))
        goto LABEL_215;
      if (v179 >= v500)
        goto LABEL_78;
      v180 = *(_QWORD *)(v496.i64[0] + 8 * v179);
      ++v172;
      if (!v180)
      {
        v172 = v179 + 1;
        if (v179 + 1 >= v500)
          goto LABEL_78;
        v180 = *(_QWORD *)(v496.i64[0] + 8 * v172);
        if (!v180)
        {
          v172 = v179 + 2;
          if (v179 + 2 >= v500)
            goto LABEL_78;
          v180 = *(_QWORD *)(v496.i64[0] + 8 * v172);
          if (!v180)
          {
            v181 = v179 + 3;
            if (v181 < v500)
            {
              v180 = *(_QWORD *)(v496.i64[0] + 8 * v181);
              if (!v180)
              {
                while (1)
                {
                  v172 = v181 + 1;
                  if (__OFADD__(v181, 1))
                    goto LABEL_216;
                  if (v172 >= v500)
                    goto LABEL_78;
                  v180 = *(_QWORD *)(v496.i64[0] + 8 * v172);
                  ++v181;
                  if (v180)
                    goto LABEL_71;
                }
              }
              v172 = v181;
              goto LABEL_71;
            }
LABEL_78:
            swift_release();
            goto LABEL_79;
          }
        }
      }
LABEL_71:
      v171 = (v180 - 1) & v180;
      for (i = __clz(__rbit64(v180)) + (v172 << 6); ; i = v177 | (v172 << 6))
      {
        v182 = *(_QWORD *)(v167 + 48) + 16 * i;
        v183 = *(_QWORD *)v182;
        v184 = *(_BYTE *)(v182 + 8);
        v185 = (__int128 *)(*(_QWORD *)(v167 + 56) + 176 * i);
        v186 = *v185;
        v187 = v185[2];
        v517[1] = v185[1];
        v517[2] = v187;
        v188 = v185[3];
        v189 = v185[4];
        v190 = v185[6];
        v517[5] = v185[5];
        v517[6] = v190;
        v517[3] = v188;
        v517[4] = v189;
        v191 = v185[7];
        v192 = v185[8];
        v193 = v185[9];
        *(_OWORD *)((char *)v520 + 9) = *(__int128 *)((char *)v185 + 153);
        v519 = v192;
        v520[0] = v193;
        v518 = v191;
        v517[0] = v186;
        v194 = *(_QWORD *)(v173 + v490[23]);
        v195 = *(_QWORD *)(v194 + 16);
        outlined retain of PoseImageCrop((uint64_t)v517);
        if (!v195)
          break;
        v196 = specialized __RawDictionaryStorage.find<A>(_:)(v183, v184);
        if ((v197 & 1) == 0)
          break;
        v198 = (_OWORD *)(*(_QWORD *)(v194 + 56) + 176 * v196);
        v200 = v198[1];
        v199 = v198[2];
        v513[0] = *v198;
        v513[1] = v200;
        v513[2] = v199;
        v201 = v198[3];
        v202 = v198[4];
        v203 = v198[6];
        v513[5] = v198[5];
        v513[6] = v203;
        v513[3] = v201;
        v513[4] = v202;
        v204 = v198[7];
        v205 = v198[8];
        v206 = v198[9];
        *(_OWORD *)((char *)v516 + 9) = *(_OWORD *)((char *)v198 + 153);
        v515 = v205;
        v516[0] = v206;
        v514 = v204;
        v511 = v519;
        v512[0] = v520[0];
        *(_OWORD *)((char *)v512 + 9) = *(_OWORD *)((char *)v520 + 9);
        v508 = v517[4];
        v509[0] = v517[5];
        v509[1] = v517[6];
        v510 = v518;
        v504 = (float32x4_t)v517[0];
        v505 = v517[1];
        v506 = v517[2];
        v507 = v517[3];
        v502[6] = v198[7];
        v502[7] = v198[8];
        v503[0] = v198[9];
        *(_OWORD *)((char *)v503 + 9) = *(_OWORD *)((char *)v198 + 153);
        v502[2] = v198[3];
        v502[3] = v198[4];
        v502[4] = v198[5];
        v502[5] = v198[6];
        v501 = *(float32x4_t *)v198;
        v502[0] = v198[1];
        v502[1] = v198[2];
        outlined retain of PoseImageCrop((uint64_t)v513);
        if ((PoseImageCrop.almostEqual(to:withThreshold:)(&v501, a2, v207) & 1) != 0)
        {
          outlined release of PoseImageCrop((uint64_t)v513);
          result = outlined release of PoseImageCrop((uint64_t)v517);
          v173 = v499;
          if (!v171)
            goto LABEL_58;
        }
        else
        {
          v504.i64[0] = 0;
          v504.i64[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(32);
          v501 = v504;
          v174._countAndFlagsBits = 0xD00000000000001ALL;
          v174._object = v494;
          String.append(_:)(v174);
          v511 = v515;
          v512[0] = v516[0];
          *(_OWORD *)((char *)v512 + 9) = *(_OWORD *)((char *)v516 + 9);
          v508 = v513[4];
          v509[0] = v513[5];
          v509[1] = v513[6];
          v510 = v514;
          v504 = (float32x4_t)v513[0];
          v505 = v513[1];
          v506 = v513[2];
          v507 = v513[3];
          _print_unlocked<A, B>(_:_:)();
          v175._countAndFlagsBits = 8236;
          v175._object = (void *)0xE200000000000000;
          String.append(_:)(v175);
          v511 = v519;
          v512[0] = v520[0];
          *(_OWORD *)((char *)v512 + 9) = *(_OWORD *)((char *)v520 + 9);
          v508 = v517[4];
          v509[0] = v517[5];
          v509[1] = v517[6];
          v510 = v518;
          v504 = (float32x4_t)v517[0];
          v505 = v517[1];
          v506 = v517[2];
          v507 = v517[3];
          _print_unlocked<A, B>(_:_:)();
          *((_QWORD *)&v505 + 1) = MEMORY[0x24BEE0D00];
          v504 = v501;
          type metadata accessor for HandyLoggerNeo();
          v501 = (float32x4_t)v498;
          v176 = v495.i64[0];
          *(_QWORD *)v495.i64[0] = 0;
          *(_QWORD *)(v176 + 8) = 0;
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v501, 0xD000000000000056, v493, 467, (uint64_t)&v504, MEMORY[0x24BEE4AF8]);
          outlined release of PoseImageCrop((uint64_t)v513);
          outlined release of PoseImageCrop((uint64_t)v517);
          result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v504);
          v173 = v499;
          if (!v171)
            goto LABEL_58;
        }
LABEL_57:
        v177 = __clz(__rbit64(v171));
        v171 &= v171 - 1;
      }
      *(_QWORD *)&v513[0] = 0;
      *((_QWORD *)&v513[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v208._countAndFlagsBits = 0xD000000000000012;
      v208._object = (void *)0x800000023D9CD9D0;
      String.append(_:)(v208);
      v504.i64[0] = v183;
      v504.i8[8] = v184;
      _print_unlocked<A, B>(_:_:)();
      *((_QWORD *)&v513[1] + 1) = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v504 = (float32x4_t)v498;
      v505 = 0uLL;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v504, 0xD000000000000056, v491 | 0x8000000000000000, 461, (uint64_t)v513, MEMORY[0x24BEE4AF8]);
      outlined release of PoseImageCrop((uint64_t)v517);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v513);
      v488 = 0;
      v173 = v499;
LABEL_79:
      v209 = v497;
      v210 = *(_QWORD *)(v497 + 16);
      v211 = v474;
      outlined init with copy of TrackingUpdateDataPB(v173, (uint64_t)v474, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v212 = v490;
      v213 = (uint64_t)v485;
      v214 = (uint64_t)v481;
      if (v210)
      {
        outlined destroy of Matrix3x3PB((uint64_t)v211, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined init with copy of TrackingUpdateDataPB(v209, v214, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v215 = v475;
        outlined init with copy of TrackingUpdateDataPB(v173, v475, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      }
      else
      {
        v223 = v211[2];
        v500 = v211[3];
        v224 = v211[5];
        v496.i64[0] = v211[4];
        v225 = v211[7];
        v494 = (void *)v211[6];
        v495.i64[0] = v224;
        v226 = (void *)v211[9];
        v492 = v211[8];
        v493 = v225;
        v489 = v226;
        outlined copy of HandPose?(v223);
        outlined destroy of Matrix3x3PB((uint64_t)v211, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v209 = v497;
        v213 = (uint64_t)v485;
        v212 = v490;
        v173 = v499;
        v214 = (uint64_t)v481;
        outlined consume of HandPose?(v223);
        outlined init with copy of TrackingUpdateDataPB(v209, v214, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v215 = v475;
        outlined init with copy of TrackingUpdateDataPB(v173, v475, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v223)
        {
          outlined destroy of Matrix3x3PB(v215, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          outlined destroy of Matrix3x3PB(v214, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v221 = 0;
          v222 = *(_QWORD *)(v209 + 16);
          if (!v222)
            goto LABEL_94;
          goto LABEL_91;
        }
      }
      v216 = v214;
      v217 = *(_QWORD *)(v214 + 16);
      outlined destroy of Matrix3x3PB(v216, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v218 = v215;
      v219 = v472;
      outlined init with take of Matrix2dPB(v218, v472, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v217)
      {
        v220 = *(_QWORD *)(v219 + 16);
        outlined destroy of Matrix3x3PB(v219, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v220)
          v221 = v488;
        else
          v221 = 0;
        v222 = *(_QWORD *)(v209 + 16);
        if (!v222)
          goto LABEL_94;
      }
      else
      {
        outlined destroy of Matrix3x3PB(v219, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v221 = v488;
        v222 = *(_QWORD *)(v209 + 16);
        if (!v222)
          goto LABEL_94;
      }
LABEL_91:
      v227 = *(_QWORD *)(v173 + 16);
      if (v227)
      {
        v228 = *(_OWORD *)(v173 + 24);
        v230 = *(_QWORD *)(v209 + 120);
        v229 = *(_QWORD *)(v209 + 128);
        v231 = *(_OWORD *)(v209 + 104);
        v232 = *(_OWORD *)(v209 + 88);
        v233 = *(_OWORD *)(v209 + 72);
        v234 = *(_OWORD *)(v209 + 56);
        v235 = *(_OWORD *)(v209 + 40);
        v236 = *(_OWORD *)(v173 + 40);
        v237 = *(_OWORD *)(v173 + 56);
        v238 = *(_OWORD *)(v173 + 72);
        v239 = *(_OWORD *)(v173 + 88);
        v240 = *(_OWORD *)(v173 + 104);
        v242 = *(_QWORD *)(v173 + 120);
        v241 = *(_QWORD *)(v173 + 128);
        *(_OWORD *)((char *)v517 + 8) = *(_OWORD *)(v209 + 24);
        *(_OWORD *)((char *)&v517[1] + 8) = v235;
        *(_OWORD *)((char *)&v517[2] + 8) = v234;
        *(_OWORD *)((char *)&v517[3] + 8) = v233;
        *(_OWORD *)((char *)&v517[4] + 8) = v232;
        *(_OWORD *)((char *)&v517[5] + 8) = v231;
        *(_QWORD *)&v517[0] = v222;
        *((_QWORD *)&v517[6] + 1) = v230;
        LOWORD(v518) = v229 & 0x101;
        DWORD1(v518) = HIDWORD(v229);
        *(_OWORD *)((char *)v513 + 8) = v228;
        *(_OWORD *)((char *)&v513[1] + 8) = v236;
        *(_OWORD *)((char *)&v513[2] + 8) = v237;
        *(_OWORD *)((char *)&v513[3] + 8) = v238;
        *(_OWORD *)((char *)&v513[4] + 8) = v239;
        *(_OWORD *)((char *)&v513[5] + 8) = v240;
        *(_QWORD *)&v513[0] = v227;
        *((_QWORD *)&v513[6] + 1) = v242;
        LOWORD(v514) = v241 & 0x101;
        DWORD1(v514) = HIDWORD(v241);
        if ((HandPose.almostEqual(to:withThreshold:)((float *)v513, a2 + a2) & 1) == 0)
        {
          *(_QWORD *)&v517[0] = 0;
          *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v517[0] = 0xD00000000000001CLL;
          *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDDB0;
          *(_QWORD *)&v513[0] = *(_QWORD *)(v209 + 144);
          v243._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v243);
          swift_bridgeObjectRelease();
          *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
          type metadata accessor for HandyLoggerNeo();
          v513[0] = v498;
          v513[1] = 0uLL;
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 481, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
          v221 = 0;
        }
      }
LABEL_94:
      v244 = *(_QWORD *)(v209 + v212[26]);
      if (*(_QWORD *)(v244 + 16))
      {
        v245 = specialized __RawDictionaryStorage.find<A>(_:)(1, 1);
        if ((v246 & 1) == 0)
          goto LABEL_108;
        v247 = *(_QWORD *)(v499 + v212[26]);
        if (!*(_QWORD *)(v247 + 16))
          goto LABEL_108;
        v248 = *(float *)(*(_QWORD *)(v244 + 56) + 4 * v245);
        v249 = specialized __RawDictionaryStorage.find<A>(_:)(1, 1);
        if ((v250 & 1) == 0)
          goto LABEL_108;
        if (!*(_QWORD *)(v244 + 16))
          goto LABEL_111;
        v251 = *(float *)(*(_QWORD *)(v247 + 56) + 4 * v249);
        v252 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1);
        if ((v253 & 1) == 0
          || !*(_QWORD *)(v247 + 16)
          || (v254 = *(float *)(*(_QWORD *)(v244 + 56) + 4 * v252),
              v255 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1),
              (v256 & 1) == 0))
        {
LABEL_108:
          v283 = *(_QWORD *)(v244 + 16);
          v284 = v473;
          outlined init with copy of TrackingUpdateDataPB(v499, v473, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          if (v283)
          {
            outlined destroy of Matrix3x3PB(v284, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_110:
            v264 = 0;
            goto LABEL_115;
          }
LABEL_112:
          v285 = *(_QWORD *)(*(_QWORD *)(v284 + v212[26]) + 16);
          outlined destroy of Matrix3x3PB(v284, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          if (v285)
            v264 = 0;
          else
            v264 = v221;
LABEL_115:
          v286 = *(unsigned __int8 *)(v209 + 4);
          v287 = *(unsigned __int8 *)(v499 + 4);
          if (v286 == 2)
          {
            if (v287 == 2)
              goto LABEL_121;
          }
          else if (v287 != 2 && ((((v287 & 1) == 0) ^ v286) & 1) != 0)
          {
LABEL_121:
            v293 = *(unsigned __int8 *)(v209 + 5);
            v294 = *(unsigned __int8 *)(v499 + 5);
            if (v293 == 2)
            {
              if (v294 == 2)
                goto LABEL_127;
            }
            else if (v294 != 2 && ((((v294 & 1) == 0) ^ v293) & 1) != 0)
            {
LABEL_127:
              v301 = *(_DWORD *)(v209 + 232);
              v302 = *(_BYTE *)(v209 + 236);
              v303 = *(_QWORD *)(v209 + 240);
              v304 = *(_BYTE *)(v209 + 248);
              v305 = *(_BYTE *)(v209 + 249);
              v306 = *(_BYTE *)(v209 + 250);
              v307 = *(_BYTE *)(v209 + 251);
              v308 = *(_QWORD *)(v209 + 256);
              v309 = *(_DWORD *)(v209 + 264);
              v310 = *v486;
              v311 = *(_DWORD *)(v209 + 272);
              v312 = *(_DWORD *)(v209 + 276);
              v313 = v486[12];
              v517[0] = *(_OWORD *)(v209 + 216);
              LODWORD(v517[1]) = v301;
              BYTE4(v517[1]) = v302;
              *((_QWORD *)&v517[1] + 1) = v303;
              LOBYTE(v517[2]) = v304;
              BYTE1(v517[2]) = v305;
              BYTE2(v517[2]) = v306;
              BYTE3(v517[2]) = v307;
              *((_QWORD *)&v517[2] + 1) = v308;
              LODWORD(v517[3]) = v309;
              BYTE4(v517[3]) = v310;
              *((_QWORD *)&v517[3] + 1) = __PAIR64__(v312, v311);
              LOBYTE(v517[4]) = v313;
              v314 = *(_DWORD *)(v499 + 232);
              v315 = *(_BYTE *)(v499 + 236);
              v316 = *(_QWORD *)(v499 + 240);
              v317 = *(_BYTE *)(v499 + 248);
              v318 = *(_BYTE *)(v499 + 249);
              v319 = *(_BYTE *)(v499 + 250);
              v320 = *(_BYTE *)(v499 + 251);
              v321 = *(_QWORD *)(v499 + 256);
              v322 = *(_DWORD *)(v499 + 264);
              v323 = *v487;
              v324 = *(_DWORD *)(v499 + 272);
              v325 = *(_DWORD *)(v499 + 276);
              v326 = v487[12];
              v513[0] = *(_OWORD *)(v499 + 216);
              LODWORD(v513[1]) = v314;
              BYTE4(v513[1]) = v315;
              *((_QWORD *)&v513[1] + 1) = v316;
              LOBYTE(v513[2]) = v317;
              BYTE1(v513[2]) = v318;
              BYTE2(v513[2]) = v319;
              BYTE3(v513[2]) = v320;
              *((_QWORD *)&v513[2] + 1) = v321;
              LODWORD(v513[3]) = v322;
              BYTE4(v513[3]) = v323;
              *((_QWORD *)&v513[3] + 1) = __PAIR64__(v325, v324);
              v327 = a2 + a2;
              LOBYTE(v513[4]) = v326;
              if (!PinchFeatures.almostEqual(to:withThreshold:)((uint64_t)v513, v327))
              {
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(34);
                swift_bridgeObjectRelease();
                *(_QWORD *)&v517[0] = 0xD000000000000020;
                *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDA60;
                *(_QWORD *)&v513[0] = *(_QWORD *)(v209 + 144);
                v328._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v328);
                swift_bridgeObjectRelease();
                v329 = MEMORY[0x24BEE0D00];
                *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                type metadata accessor for HandyLoggerNeo();
                v513[0] = v498;
                v513[1] = 0uLL;
                v330 = v491 | 0x8000000000000000;
                v331 = MEMORY[0x24BEE4AF8];
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 515, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(18);
                v513[0] = v517[0];
                v332._countAndFlagsBits = 0xD000000000000010;
                v332._object = (void *)0x800000023D9CDA90;
                String.append(_:)(v332);
                v333 = *(_DWORD *)(v209 + 232);
                v334 = *(_BYTE *)(v209 + 236);
                v335 = *(_QWORD *)(v209 + 240);
                v336 = *(_BYTE *)(v209 + 248);
                v337 = *(_BYTE *)(v209 + 249);
                v338 = *(_BYTE *)(v209 + 250);
                v339 = *(_BYTE *)(v209 + 251);
                v340 = *(_QWORD *)(v209 + 256);
                v341 = *(_DWORD *)(v209 + 264);
                v342 = *v486;
                v343 = *(_DWORD *)(v209 + 272);
                v344 = *(_DWORD *)(v209 + 276);
                v345 = v486[12];
                v517[0] = *(_OWORD *)(v209 + 216);
                LODWORD(v517[1]) = v333;
                BYTE4(v517[1]) = v334;
                *((_QWORD *)&v517[1] + 1) = v335;
                LOBYTE(v517[2]) = v336;
                BYTE1(v517[2]) = v337;
                BYTE2(v517[2]) = v338;
                BYTE3(v517[2]) = v339;
                *((_QWORD *)&v517[2] + 1) = v340;
                LODWORD(v517[3]) = v341;
                BYTE4(v517[3]) = v342;
                *((_QWORD *)&v517[3] + 1) = __PAIR64__(v344, v343);
                LOBYTE(v517[4]) = v345;
                _print_unlocked<A, B>(_:_:)();
                *((_QWORD *)&v517[1] + 1) = v329;
                v517[0] = v513[0];
                v513[0] = v498;
                v513[1] = 0uLL;
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v330, 516, (uint64_t)v517, v331);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(24);
                v513[0] = v517[0];
                v346._countAndFlagsBits = 0xD000000000000016;
                v346._object = (void *)0x800000023D9CDAB0;
                String.append(_:)(v346);
                v347 = *(_DWORD *)(v499 + 232);
                v348 = *(_BYTE *)(v499 + 236);
                v349 = *(_QWORD *)(v499 + 240);
                v350 = *(_BYTE *)(v499 + 248);
                v351 = *(_BYTE *)(v499 + 249);
                v352 = *(_BYTE *)(v499 + 250);
                v353 = *(_BYTE *)(v499 + 251);
                v354 = *(_QWORD *)(v499 + 256);
                v355 = *(_DWORD *)(v499 + 264);
                v356 = *v487;
                v357 = *(_DWORD *)(v499 + 272);
                v358 = *(_DWORD *)(v499 + 276);
                v359 = v487[12];
                v517[0] = *(_OWORD *)(v499 + 216);
                LODWORD(v517[1]) = v347;
                BYTE4(v517[1]) = v348;
                *((_QWORD *)&v517[1] + 1) = v349;
                LOBYTE(v517[2]) = v350;
                BYTE1(v517[2]) = v351;
                BYTE2(v517[2]) = v352;
                BYTE3(v517[2]) = v353;
                *((_QWORD *)&v517[2] + 1) = v354;
                LODWORD(v517[3]) = v355;
                BYTE4(v517[3]) = v356;
                *((_QWORD *)&v517[3] + 1) = __PAIR64__(v358, v357);
                LOBYTE(v517[4]) = v359;
                v212 = v490;
                v213 = (uint64_t)v485;
                v209 = v497;
                _print_unlocked<A, B>(_:_:)();
                *((_QWORD *)&v517[1] + 1) = v329;
                v517[0] = v513[0];
                v513[0] = v498;
                v513[1] = 0uLL;
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v330, 517, (uint64_t)v517, v331);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                v264 = 0;
              }
              v360 = v264;
              v361 = v209 + v212[24];
              v362 = v477;
              outlined init with copy of (Int32, Matrix2dPB)(v361, v477, &demangling cache variable for type metadata for HandDescriptorInternal?);
              v363 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v476 + 48);
              v364 = v478;
              if (v363(v362, 1, v478) == 1)
              {
                outlined destroy of Coordinate3DPB?(v362, &demangling cache variable for type metadata for HandDescriptorInternal?);
              }
              else
              {
                v365 = v362;
                v366 = v471;
                outlined init with take of Matrix2dPB(v365, v471, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                v367 = v499 + v212[24];
                outlined init with copy of (Int32, Matrix2dPB)(v367, v213, &demangling cache variable for type metadata for HandDescriptorInternal?);
                if (v363(v213, 1, v364) == 1)
                {
                  outlined destroy of Matrix3x3PB(v366, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                  outlined destroy of Coordinate3DPB?(v213, &demangling cache variable for type metadata for HandDescriptorInternal?);
                }
                else
                {
                  v368 = v213;
                  v369 = (uint64_t)v470;
                  outlined init with take of Matrix2dPB(v368, (uint64_t)v470, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                  if ((HandDescriptorInternal.almostEqual(to:withThreshold:)(v369, v327) & 1) == 0)
                  {
                    *(_QWORD *)&v517[0] = 0;
                    *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(17);
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v517[0] = 0x6C616E7265746E69;
                    *((_QWORD *)&v517[0] + 1) = 0xEF203D2061746144;
                    v462 = v468;
                    outlined init with copy of (Int32, Matrix2dPB)(v361, v468, &demangling cache variable for type metadata for HandDescriptorInternal?);
                    v463._countAndFlagsBits = String.init<A>(describing:)();
                    String.append(_:)(v463);
                    swift_bridgeObjectRelease();
                    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                    type metadata accessor for HandyLoggerNeo();
                    v513[0] = v498;
                    v513[1] = 0uLL;
                    v464 = v366;
                    v465 = v491 | 0x8000000000000000;
                    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 524, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                    *(_QWORD *)&v517[0] = 0;
                    *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                    v209 = v497;
                    _StringGuts.grow(_:)(23);
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v517[0] = 0xD000000000000015;
                    *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDCD0;
                    outlined init with copy of (Int32, Matrix2dPB)(v367, v462, &demangling cache variable for type metadata for HandDescriptorInternal?);
                    v466._countAndFlagsBits = String.init<A>(describing:)();
                    String.append(_:)(v466);
                    swift_bridgeObjectRelease();
                    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                    v513[0] = v498;
                    v513[1] = 0uLL;
                    v212 = v490;
                    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v465, 525, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                    outlined destroy of Matrix3x3PB(v369, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                    outlined destroy of Matrix3x3PB(v464, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                    v370 = 0;
LABEL_136:
                    v371 = v499;
                    if (v327 < vabds_f32(*(float *)(v209 + 8), *(float *)(v499 + 8)))
                    {
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(29);
                      v372._countAndFlagsBits = 0xD00000000000001BLL;
                      v372._object = (void *)0x800000023D9CDC90;
                      String.append(_:)(v372);
                      Float.write<A>(to:)();
                      v373 = MEMORY[0x24BEE0D00];
                      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                      type metadata accessor for HandyLoggerNeo();
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      v374 = v491 | 0x8000000000000000;
                      v375 = MEMORY[0x24BEE4AF8];
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 530, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      v209 = v497;
                      _StringGuts.grow(_:)(30);
                      v376._countAndFlagsBits = 0xD00000000000001CLL;
                      v376._object = (void *)0x800000023D9CDCB0;
                      String.append(_:)(v376);
                      v212 = v490;
                      Float.write<A>(to:)();
                      *((_QWORD *)&v517[1] + 1) = v373;
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      v377 = v374;
                      v371 = v499;
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v377, 531, (uint64_t)v517, v375);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      v370 = 0;
                    }
                    v378 = v212[34];
                    v379 = v209;
                    v521.handToHmdDistance = *(Swift::Float *)(v371 + v378);
                    v521.visibilityScores._rawValue = *(void **)(v371 + v378 + 8);
                    if (!OperationalEnvelopeSignals.almostEqual(to:withThreshold:)(v521, v327))
                    {
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(47);
                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v517[0] = 0xD00000000000002DLL;
                      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDAD0;
                      *(_QWORD *)&v513[0] = *(_QWORD *)(v209 + 144);
                      v380._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v380);
                      swift_bridgeObjectRelease();
                      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                      v381 = MEMORY[0x24BEE0D00];
                      type metadata accessor for HandyLoggerNeo();
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      v382 = v491 | 0x8000000000000000;
                      v383 = MEMORY[0x24BEE4AF8];
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 536, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(26);
                      v384._countAndFlagsBits = 0xD000000000000014;
                      v384._object = (void *)0x800000023D9CDB00;
                      String.append(_:)(v384);
                      Float.write<A>(to:)();
                      v385._countAndFlagsBits = 8224;
                      v385._object = (void *)0xE200000000000000;
                      String.append(_:)(v385);
                      Float.write<A>(to:)();
                      *((_QWORD *)&v517[1] + 1) = v381;
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v382, 537, (uint64_t)v517, v383);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(26);
                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v517[0] = 0xD000000000000018;
                      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDB20;
                      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
                      swift_bridgeObjectRetain();
                      v386._countAndFlagsBits = Dictionary.description.getter();
                      String.append(_:)(v386);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v387 = MEMORY[0x24BEE0D00];
                      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v382, 538, (uint64_t)v517, v383);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(27);
                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v517[0] = 0xD000000000000019;
                      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDB40;
                      swift_bridgeObjectRetain();
                      v388._countAndFlagsBits = Dictionary.description.getter();
                      String.append(_:)(v388);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *((_QWORD *)&v517[1] + 1) = v387;
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      v389 = v382;
                      v371 = v499;
                      v379 = v497;
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v389, 539, (uint64_t)v517, v383);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      v370 = 0;
                    }
                    v390 = *(unsigned __int8 *)(v379 + 137);
                    v391 = *(unsigned __int8 *)(v371 + 137);
                    v392 = v379;
                    if (v390 != v391)
                    {
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(48);
                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v517[0] = 0xD000000000000026;
                      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDB60;
                      *(_QWORD *)&v513[0] = *(_QWORD *)(v379 + 144);
                      v393._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v393);
                      swift_bridgeObjectRelease();
                      v394._countAndFlagsBits = 2112032;
                      v394._object = (void *)0xE300000000000000;
                      String.append(_:)(v394);
                      if (v390)
                        v395 = 1702195828;
                      else
                        v395 = 0x65736C6166;
                      if (v390)
                        v396 = 0xE400000000000000;
                      else
                        v396 = 0xE500000000000000;
                      v397 = v396;
                      String.append(_:)(*(Swift::String *)&v395);
                      swift_bridgeObjectRelease();
                      v398._countAndFlagsBits = 32;
                      v398._object = (void *)0xE100000000000000;
                      String.append(_:)(v398);
                      if (v391)
                        v399 = 1702195828;
                      else
                        v399 = 0x65736C6166;
                      if (v391)
                        v400 = 0xE400000000000000;
                      else
                        v400 = 0xE500000000000000;
                      v392 = v497;
                      v401 = v400;
                      String.append(_:)(*(Swift::String *)&v399);
                      swift_bridgeObjectRelease();
                      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                      type metadata accessor for HandyLoggerNeo();
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 545, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      v370 = 0;
                    }
                    v402 = v490[27];
                    v403 = (uint64_t *)(v392 + v402);
                    if ((*(_BYTE *)(v392 + v402 + 8) & 1) == 0)
                    {
                      v404 = (uint64_t *)(v499 + v402);
                      if ((v404[1] & 1) == 0)
                      {
                        v405 = *v403;
                        v406 = *v404;
                        if (*v403 != *v404)
                        {
                          *(_QWORD *)&v517[0] = 0;
                          *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(52);
                          v407._countAndFlagsBits = 0xD00000000000002ALL;
                          v407._object = (void *)0x800000023D9CDC60;
                          String.append(_:)(v407);
                          *(_QWORD *)&v513[0] = *(_QWORD *)(v497 + 144);
                          v408._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v408);
                          swift_bridgeObjectRelease();
                          v409._countAndFlagsBits = 2112032;
                          v409._object = (void *)0xE300000000000000;
                          String.append(_:)(v409);
                          *(_QWORD *)&v513[0] = v405;
                          v410._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v410);
                          swift_bridgeObjectRelease();
                          v411._countAndFlagsBits = 32;
                          v411._object = (void *)0xE100000000000000;
                          String.append(_:)(v411);
                          *(_QWORD *)&v513[0] = v406;
                          v412._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v412);
                          swift_bridgeObjectRelease();
                          *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                          type metadata accessor for HandyLoggerNeo();
                          v513[0] = v498;
                          v513[1] = 0uLL;
                          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 552, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                          __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                          v370 = 0;
                        }
                      }
                    }
                    v413 = v490[30];
                    v414 = *(_QWORD *)(v497 + v413);
                    v415 = *(_BYTE *)(v497 + v413 + 8);
                    v416 = (uint64_t *)(v499 + v413);
                    v417 = *v416;
                    v418 = *((unsigned __int8 *)v416 + 8);
                    if (v418 != 1)
                    {
                      v419 = v497;
                      if (v414 == v417)
                        goto LABEL_165;
                      goto LABEL_164;
                    }
                    if (v417)
                    {
                      if (v417 == 1)
                      {
                        v419 = v497;
                        if (v414 == 1)
                          goto LABEL_165;
LABEL_164:
                        *(_QWORD *)&v517[0] = 0;
                        *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                        _StringGuts.grow(_:)(56);
                        v420._countAndFlagsBits = 0xD00000000000002ELL;
                        v420._object = (void *)0x800000023D9CDB90;
                        String.append(_:)(v420);
                        *(_QWORD *)&v513[0] = *(_QWORD *)(v419 + 144);
                        v421._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                        String.append(_:)(v421);
                        swift_bridgeObjectRelease();
                        v422._countAndFlagsBits = 2112032;
                        v422._object = (void *)0xE300000000000000;
                        String.append(_:)(v422);
                        *(_QWORD *)&v513[0] = v414;
                        BYTE8(v513[0]) = v415;
                        v423._countAndFlagsBits = String.init<A>(describing:)();
                        String.append(_:)(v423);
                        swift_bridgeObjectRelease();
                        v424._countAndFlagsBits = 32;
                        v424._object = (void *)0xE100000000000000;
                        String.append(_:)(v424);
                        *(_QWORD *)&v513[0] = v417;
                        BYTE8(v513[0]) = v418;
                        v425._countAndFlagsBits = String.init<A>(describing:)();
                        String.append(_:)(v425);
                        swift_bridgeObjectRelease();
                        *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                        type metadata accessor for HandyLoggerNeo();
                        v513[0] = v498;
                        v513[1] = 0uLL;
                        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 557, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                        __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                        v370 = 0;
                        goto LABEL_165;
                      }
                      v419 = v497;
                      if (v414 != 2)
                        goto LABEL_164;
                    }
                    else
                    {
                      v419 = v497;
                      if (v414)
                        goto LABEL_164;
                    }
LABEL_165:
                    v426 = v490[33];
                    v427 = *(_QWORD *)(v419 + v426);
                    v428 = *(unsigned __int8 *)(v419 + v426 + 8);
                    v429 = (uint64_t *)(v499 + v426);
                    v430 = *v429;
                    v431 = *((unsigned __int8 *)v429 + 8);
                    v432 = v427 != 0;
                    if (!v428)
                      v432 = v427;
                    if (v431 == 1)
                    {
                      if (v430)
                      {
                        if (v432 == 1)
                          goto LABEL_173;
                      }
                      else if (!v432)
                      {
                        goto LABEL_173;
                      }
                    }
                    else if (v432 == v430)
                    {
LABEL_173:
                      v439 = *(unsigned __int8 *)(v499 + 138);
                      if (v439 == 2)
                      {
                        v440 = v497;
                      }
                      else
                      {
                        v440 = v497;
                        v441 = *(unsigned __int8 *)(v497 + 138);
                        if (v441 != 2 && (v439 & 1) != (v441 & 1))
                        {
                          *(_QWORD *)&v517[0] = 0;
                          *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(49);
                          swift_bridgeObjectRelease();
                          *(_QWORD *)&v517[0] = 0xD000000000000027;
                          *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDC30;
                          *(_QWORD *)&v513[0] = *(_QWORD *)(v440 + 144);
                          v442._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v442);
                          swift_bridgeObjectRelease();
                          v443._countAndFlagsBits = 2112032;
                          v443._object = (void *)0xE300000000000000;
                          String.append(_:)(v443);
                          if ((v441 & 1) != 0)
                            v444 = 1702195828;
                          else
                            v444 = 0x65736C6166;
                          if ((v441 & 1) != 0)
                            v445 = 0xE400000000000000;
                          else
                            v445 = 0xE500000000000000;
                          v446 = v445;
                          String.append(_:)(*(Swift::String *)&v444);
                          swift_bridgeObjectRelease();
                          v447._countAndFlagsBits = 32;
                          v447._object = (void *)0xE100000000000000;
                          String.append(_:)(v447);
                          if ((v439 & 1) != 0)
                            v448 = 1702195828;
                          else
                            v448 = 0x65736C6166;
                          if ((v439 & 1) != 0)
                            v449 = 0xE400000000000000;
                          else
                            v449 = 0xE500000000000000;
                          v440 = v497;
                          v450 = v449;
                          String.append(_:)(*(Swift::String *)&v448);
                          swift_bridgeObjectRelease();
                          *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                          type metadata accessor for HandyLoggerNeo();
                          v513[0] = v498;
                          v513[1] = 0uLL;
                          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 569, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                          __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                          v370 = 0;
                        }
                      }
                      v451 = v486[13];
                      v452 = v487[13];
                      if (v451 == v452)
                        return v370;
                      *(_QWORD *)&v517[0] = 0;
                      *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(47);
                      swift_bridgeObjectRelease();
                      *(_QWORD *)&v517[0] = 0xD000000000000025;
                      *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDC00;
                      *(_QWORD *)&v513[0] = *(_QWORD *)(v440 + 144);
                      v453._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v453);
                      swift_bridgeObjectRelease();
                      v454._countAndFlagsBits = 2112032;
                      v454._object = (void *)0xE300000000000000;
                      String.append(_:)(v454);
                      if (v451)
                        v455 = 1702195828;
                      else
                        v455 = 0x65736C6166;
                      if (v451)
                        v456 = 0xE400000000000000;
                      else
                        v456 = 0xE500000000000000;
                      v457 = v456;
                      String.append(_:)(*(Swift::String *)&v455);
                      swift_bridgeObjectRelease();
                      v458._countAndFlagsBits = 32;
                      v458._object = (void *)0xE100000000000000;
                      String.append(_:)(v458);
                      if (v452)
                        v459 = 1702195828;
                      else
                        v459 = 0x65736C6166;
                      if (v452)
                        v460 = 0xE400000000000000;
                      else
                        v460 = 0xE500000000000000;
                      v461 = v460;
                      String.append(_:)(*(Swift::String *)&v459);
                      swift_bridgeObjectRelease();
                      *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                      type metadata accessor for HandyLoggerNeo();
                      v513[0] = v498;
                      v513[1] = 0uLL;
                      v147 = v491 | 0x8000000000000000;
                      v148 = MEMORY[0x24BEE4AF8];
                      v149 = 574;
LABEL_204:
                      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v147, v149, (uint64_t)v517, v148);
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                      return 0;
                    }
                    *(_QWORD *)&v517[0] = 0;
                    *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(62);
                    v433._countAndFlagsBits = 0xD000000000000034;
                    v433._object = (void *)0x800000023D9CDBC0;
                    String.append(_:)(v433);
                    *(_QWORD *)&v513[0] = *(_QWORD *)(v497 + 144);
                    v434._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v434);
                    swift_bridgeObjectRelease();
                    v435._countAndFlagsBits = 2112032;
                    v435._object = (void *)0xE300000000000000;
                    String.append(_:)(v435);
                    *(_QWORD *)&v513[0] = v427;
                    BYTE8(v513[0]) = v428;
                    v436._countAndFlagsBits = String.init<A>(describing:)();
                    String.append(_:)(v436);
                    swift_bridgeObjectRelease();
                    v437._countAndFlagsBits = 32;
                    v437._object = (void *)0xE100000000000000;
                    String.append(_:)(v437);
                    *(_QWORD *)&v513[0] = v430;
                    BYTE8(v513[0]) = v431;
                    v438._countAndFlagsBits = String.init<A>(describing:)();
                    String.append(_:)(v438);
                    swift_bridgeObjectRelease();
                    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                    type metadata accessor for HandyLoggerNeo();
                    v513[0] = v498;
                    v513[1] = 0uLL;
                    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 562, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                    __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                    v370 = 0;
                    goto LABEL_173;
                  }
                  outlined destroy of Matrix3x3PB(v369, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                  outlined destroy of Matrix3x3PB(v366, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
                }
              }
              v370 = v360;
              goto LABEL_136;
            }
            *(_QWORD *)&v517[0] = 0;
            *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(60);
            v295._countAndFlagsBits = 0xD000000000000032;
            v295._object = (void *)0x800000023D9CDA20;
            String.append(_:)(v295);
            *(_QWORD *)&v513[0] = *(_QWORD *)(v209 + 144);
            v296._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v296);
            swift_bridgeObjectRelease();
            v297._countAndFlagsBits = 2112032;
            v297._object = (void *)0xE300000000000000;
            String.append(_:)(v297);
            LOBYTE(v513[0]) = v293;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
            v298._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v298);
            swift_bridgeObjectRelease();
            v299._countAndFlagsBits = 32;
            v299._object = (void *)0xE100000000000000;
            String.append(_:)(v299);
            LOBYTE(v513[0]) = v294;
            v300._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v300);
            swift_bridgeObjectRelease();
            *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
            type metadata accessor for HandyLoggerNeo();
            v513[0] = v498;
            v513[1] = 0uLL;
            static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 510, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
            v264 = 0;
            goto LABEL_127;
          }
          *(_QWORD *)&v517[0] = 0;
          *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(43);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v517[0] = 0xD000000000000021;
          *((_QWORD *)&v517[0] + 1) = 0x800000023D9CD9F0;
          *(_QWORD *)&v513[0] = *(_QWORD *)(v209 + 144);
          v288._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v288);
          swift_bridgeObjectRelease();
          v289._countAndFlagsBits = 2112032;
          v289._object = (void *)0xE300000000000000;
          String.append(_:)(v289);
          LOBYTE(v513[0]) = v286;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
          v290._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v290);
          swift_bridgeObjectRelease();
          v291._countAndFlagsBits = 32;
          v291._object = (void *)0xE100000000000000;
          String.append(_:)(v291);
          LOBYTE(v513[0]) = v287;
          v292._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v292);
          swift_bridgeObjectRelease();
          *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
          type metadata accessor for HandyLoggerNeo();
          v513[0] = v498;
          v513[1] = 0uLL;
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 505, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
          v264 = 0;
          goto LABEL_121;
        }
        if (*(_QWORD *)(v244 + 16))
        {
          v257 = *(float *)(*(_QWORD *)(v247 + 56) + 4 * v255);
          v258 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
          if ((v259 & 1) != 0)
          {
            if (*(_QWORD *)(v247 + 16))
            {
              v260 = *(float *)(*(_QWORD *)(v244 + 56) + 4 * v258);
              v261 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
              if ((v262 & 1) != 0)
              {
                v263 = *(float *)(*(_QWORD *)(v247 + 56) + 4 * v261);
                v264 = v221;
                if ((float)(v51 + v51) >= (float)((float)((float)((float)(v248 - v251) * sqrtf(v248 - v251))
                                                         + (float)((float)(v254 - v257) * (float)(v254 - v257)))
                                                 + (float)((float)(v260 - v263) * (float)(v260 - v263))))
                  goto LABEL_115;
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(55);
                v265._countAndFlagsBits = 0xD000000000000026;
                v265._object = (void *)0x800000023D9CDCF0;
                String.append(_:)(v265);
                *(_QWORD *)&v513[0] = *(_QWORD *)(v497 + 144);
                v266._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v266);
                swift_bridgeObjectRelease();
                v267._countAndFlagsBits = 0x7265206874697720;
                v267._object = (void *)0xED0000203A726F72;
                String.append(_:)(v267);
                Float.write<A>(to:)();
                v268 = MEMORY[0x24BEE0D00];
                *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
                type metadata accessor for HandyLoggerNeo();
                v513[0] = v498;
                v513[1] = 0uLL;
                v269 = v491 | 0x8000000000000000;
                v270 = MEMORY[0x24BEE4AF8];
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v491 | 0x8000000000000000, 494, (uint64_t)v517, MEMORY[0x24BEE4AF8]);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(52);
                v271._object = (void *)0x800000023D9CDD20;
                v271._countAndFlagsBits = 0xD00000000000002ELL;
                String.append(_:)(v271);
                v272._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v272);
                swift_bridgeObjectRelease();
                v273._countAndFlagsBits = 8236;
                v273._object = (void *)0xE200000000000000;
                String.append(_:)(v273);
                v274._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v274);
                swift_bridgeObjectRelease();
                *((_QWORD *)&v517[1] + 1) = v268;
                v513[0] = v498;
                v513[1] = 0uLL;
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v269, 495, (uint64_t)v517, v270);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(52);
                v275._object = (void *)0x800000023D9CDD50;
                v275._countAndFlagsBits = 0xD00000000000002ELL;
                String.append(_:)(v275);
                v276._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v276);
                swift_bridgeObjectRelease();
                v277._countAndFlagsBits = 8236;
                v277._object = (void *)0xE200000000000000;
                String.append(_:)(v277);
                v278._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v278);
                v213 = (uint64_t)v485;
                swift_bridgeObjectRelease();
                *((_QWORD *)&v517[1] + 1) = v268;
                v513[0] = v498;
                v513[1] = 0uLL;
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v269, 496, (uint64_t)v517, v270);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                *(_QWORD *)&v517[0] = 0;
                *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
                v209 = v497;
                _StringGuts.grow(_:)(52);
                v279._object = (void *)0x800000023D9CDD80;
                v279._countAndFlagsBits = 0xD00000000000002ELL;
                String.append(_:)(v279);
                v280._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v280);
                swift_bridgeObjectRelease();
                v281._countAndFlagsBits = 8236;
                v281._object = (void *)0xE200000000000000;
                String.append(_:)(v281);
                v282._countAndFlagsBits = Float.description.getter();
                String.append(_:)(v282);
                v212 = v490;
                swift_bridgeObjectRelease();
                *((_QWORD *)&v517[1] + 1) = v268;
                v513[0] = v498;
                v513[1] = 0uLL;
                static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v513, 0xD000000000000056, v269, 497, (uint64_t)v517, v270);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v517);
                goto LABEL_110;
              }
            }
          }
          goto LABEL_108;
        }
      }
LABEL_111:
      v284 = v473;
      outlined init with copy of TrackingUpdateDataPB(v499, v473, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      goto LABEL_112;
    }
    v139 = *(_QWORD *)(v138 + 200);
    outlined destroy of Matrix3x3PB(v138, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v139)
    {
      v140 = v132[25];
      if (!v140)
        goto LABEL_52;
      goto LABEL_49;
    }
LABEL_47:
    *(_QWORD *)&v517[0] = 0;
    *((_QWORD *)&v517[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v517[0] = 0xD000000000000017;
    *((_QWORD *)&v517[0] + 1) = 0x800000023D9CDE20;
    v142 = v132[26];
    *(_QWORD *)&v513[0] = v132[25];
    *((_QWORD *)&v513[0] + 1) = v142;
    outlined copy of HandPose?(*(uint64_t *)&v513[0]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpec?);
    v143._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v144._countAndFlagsBits = 32;
    v144._object = (void *)0xE100000000000000;
    String.append(_:)(v144);
    v145 = *(_QWORD *)(v499 + 208);
    *(_QWORD *)&v513[0] = *(_QWORD *)(v499 + 200);
    *((_QWORD *)&v513[0] + 1) = v145;
    outlined copy of HandPose?(*(uint64_t *)&v513[0]);
    v146._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v146);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v517[1] + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v513[0] = v498;
    v513[1] = 0uLL;
    v147 = v491 | 0x8000000000000000;
    v148 = MEMORY[0x24BEE4AF8];
    v149 = 448;
    goto LABEL_204;
  }
  v86 = *(_QWORD *)(v492 + 8 * v87);
  if (v86)
  {
    v71 = v87;
    goto LABEL_27;
  }
  while (1)
  {
    v71 = v87 + 1;
    if (__OFADD__(v87, 1))
      break;
    if (v71 >= v495.i64[0])
      goto LABEL_32;
    v86 = *(_QWORD *)(v492 + 8 * v71);
    ++v87;
    if (v86)
      goto LABEL_27;
  }
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HandDescriptor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandDescriptor;
  if (!type metadata singleton initialization cache for HandDescriptor)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall HandDescriptor.transformHandsCoordinates(from:)(simd_float4x4 *from)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  _OWORD v40[6];
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;
  unsigned int v45;

  v28 = v4;
  v29 = v5;
  v26 = v2;
  v27 = v3;
  v6 = (float32x2_t *)(v1 + *(int *)(type metadata accessor for HandDescriptor() + 80));
  if ((v6[2].i8[0] & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + 192) & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    *(float32x4_t *)v6->f32 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*v6)), v27, *v6, 1), v28, *(float32x4_t *)v6->f32, 2), v29);
    v6[2].i8[0] = 0;
    if ((*(_BYTE *)(v1 + 192) & 1) != 0)
    {
LABEL_3:
      v7 = *(_QWORD *)(v1 + 16);
      if (!v7)
        return;
      goto LABEL_4;
    }
  }
  v25 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(v1 + 176))), v27, *(float32x2_t *)(v1 + 176), 1), v28, *(float32x4_t *)(v1 + 176), 2), v29);
  *(float32x4_t *)(v1 + 160) = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(v1 + 160))), v27, *(float32x2_t *)(v1 + 160), 1), v28, *(float32x4_t *)(v1 + 160), 2), v29);
  *(float32x4_t *)(v1 + 176) = v25;
  *(_BYTE *)(v1 + 192) = 0;
  v7 = *(_QWORD *)(v1 + 16);
  if (!v7)
    return;
LABEL_4:
  v8 = *(_OWORD *)(v1 + 24);
  v9 = *(_OWORD *)(v1 + 40);
  v10 = *(_OWORD *)(v1 + 56);
  v11 = *(_OWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v1 + 88);
  v13 = *(_OWORD *)(v1 + 104);
  v15 = *(_QWORD *)(v1 + 120);
  v14 = *(_QWORD *)(v1 + 128);
  v30 = v7;
  v31 = v8;
  v32 = v9;
  v33 = v10;
  v34 = v11;
  v35 = v12;
  v36 = v13;
  v37 = v15;
  v38 = v14 & 0x101;
  v39 = HIDWORD(v14);
  HandPose.init(_:from:)((uint64_t)&v30, (uint64_t)v40, v26, v27, v28, v29);
  v16 = v40[2];
  v17 = v40[3];
  v18 = v40[4];
  v19 = v40[5];
  v21 = v41;
  v20 = v42;
  v22 = 256;
  if (!v44)
    v22 = 0;
  v23 = v22 | v43 | ((unint64_t)v45 << 32);
  v24 = v40[1];
  *(_OWORD *)(v1 + 16) = v40[0];
  *(_OWORD *)(v1 + 32) = v24;
  *(_OWORD *)(v1 + 48) = v16;
  *(_OWORD *)(v1 + 64) = v17;
  *(_OWORD *)(v1 + 80) = v18;
  *(_OWORD *)(v1 + 96) = v19;
  *(_QWORD *)(v1 + 112) = v21;
  *(_QWORD *)(v1 + 120) = v20;
  *(_QWORD *)(v1 + 128) = v23;
}

uint64_t HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37[2];
  __int128 v38[7];
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD v50[4];
  __int128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int16 v55;

  v24 = a2;
  v22 = a5;
  v23 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  v15 = MEMORY[0x24BEE4AF8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v40 = v21;
  v41 = v14;
  v42 = v13;
  v43 = 0;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v37[0] = 0;
  v37[1] = 0;
  outlined init with copy of (Int32, Matrix2dPB)(a4, (uint64_t)v12, &demangling cache variable for type metadata for HandDescriptorInternal?);
  v17 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:));
  *(_QWORD *)&v44 = &outlined read-only object #0 of ObjectInteractionData.init();
  *((_QWORD *)&v44 + 1) = &outlined read-only object #1 of ObjectInteractionData.init();
  v45 = &outlined read-only object #2 of ObjectInteractionData.init();
  v46 = &outlined read-only object #3 of ObjectInteractionData.init();
  v47 = &outlined read-only object #4 of ObjectInteractionData.init();
  v48 = &outlined read-only object #5 of ObjectInteractionData.init();
  v49 = &outlined read-only object #6 of ObjectInteractionData.init();
  v35 = 0;
  v36 = 1;
  v18 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v27 = 0;
  v28[0] = 0;
  *(_QWORD *)((char *)v28 + 5) = 0;
  v28[2] = -1;
  v29 = 0;
  v30 = v15;
  v31 = 0;
  v32 = 1;
  v33 = 0;
  v34 = 0;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v51 = 0u;
  memset(v50, 0, 24);
  v52 = -1;
  v53 = 0;
  v54 = 0x3F800000BF800000;
  v55 = 0;
  v25 = 0;
  v26 = 1;
  HandDescriptor.init(detectionResults:handID:isLeft:handRadius:handCenter:detection3DHandCenter:handPose:handPresenceScore:handPresenceClass:poseSpec:pinchDown:pinchDownHomeUserInterface:pinchCancelled:branchFeatsArr:objectInteractionData:objectInteractionClass:imageCrops:internalData:trackingHealthScore:pinchFeatures:operationalEnvelopeSignals:objectInteractionInfo:objectInteractionStateStatus:)(v16, v23, v24, &v40, 0, 0, 1, v38, v22, a6, 1.0, 1.0, v17, 1, 1, v37, 514, 0, v15,
    &v44,
    &v35,
    v18,
    (uint64_t)v12,
    &v27,
    v19,
    (uint64_t)v50,
    &v25);
  return outlined destroy of Coordinate3DPB?(a4, &demangling cache variable for type metadata for HandDescriptorInternal?);
}

uint64_t HandDescriptor.init(hand:stripImageCrops:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int16 v82;
  _QWORD v83[8];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  int v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135[2];
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150[2];
  char v151;
  __int128 v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  _OWORD v158[3];
  _OWORD v159[2];

  LODWORD(v107) = a2;
  v104 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v103 = (uint64_t)v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for HandDescriptor();
  v8 = v7[19];
  v9 = *(_QWORD *)(a1 + v7[18]);
  v10 = *(float *)a1;
  v11 = *(_BYTE *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 176);
  v150[0] = *(_OWORD *)(a1 + 160);
  v150[1] = v12;
  v151 = v11;
  v13 = *(_QWORD *)(a1 + v8);
  v14 = *(_QWORD *)(a1 + v8 + 8);
  v15 = *(unsigned __int8 *)(a1 + v8 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a1 + 112);
  v28 = *(_QWORD *)(a1 + 120);
  v29 = *(_QWORD *)(a1 + 128);
  v86 = *(_QWORD *)(a1 + 16);
  v87 = v16;
  *(_QWORD *)&v136 = v86;
  *((_QWORD *)&v136 + 1) = v16;
  v88 = v18;
  v137 = v18;
  v138 = v17;
  v90 = v17;
  v91 = v19;
  v139 = v19;
  v140 = v20;
  v141 = v22;
  v142 = v21;
  v83[6] = v23;
  v83[7] = v24;
  v143 = v24;
  v144 = v23;
  v83[4] = v26;
  v83[5] = v25;
  v145 = v26;
  v146 = v25;
  v83[2] = v28;
  v83[3] = v27;
  v147 = v27;
  v148 = v28;
  v149 = v29;
  v30 = v7[25];
  v102 = *(_QWORD *)(a1 + v7[26]);
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(unsigned __int8 *)(a1 + v30 + 8);
  v33 = *(_QWORD *)(a1 + 208);
  v84 = *(_QWORD *)(a1 + 200);
  v85 = v33;
  v135[0] = v84;
  v135[1] = v33;
  v34 = (uint64_t *)(a1 + v7[31]);
  v36 = *v34;
  v35 = (void *)v34[1];
  v38 = (void *)v34[2];
  v37 = (void *)v34[3];
  v40 = (void *)v34[4];
  v39 = (void *)v34[5];
  v41 = (void *)v34[6];
  v42 = *(_QWORD *)(a1 + 144);
  v43 = *(unsigned __int8 *)(a1 + 136);
  v44 = v7[29];
  v95 = v40;
  v96 = v37;
  v93 = v41;
  v94 = v39;
  if (v36)
  {
    v89 = (void *)v36;
    v92 = v35;
    v45 = v38;
  }
  else
  {
    v41 = &outlined read-only object #6 of ObjectInteractionData.init();
    v39 = &outlined read-only object #5 of ObjectInteractionData.init();
    v40 = &outlined read-only object #4 of ObjectInteractionData.init();
    v37 = &outlined read-only object #3 of ObjectInteractionData.init();
    v45 = &outlined read-only object #2 of ObjectInteractionData.init();
    v92 = &outlined read-only object #1 of ObjectInteractionData.init();
    v89 = &outlined read-only object #0 of ObjectInteractionData.init();
  }
  v46 = *(unsigned __int8 *)(a1 + 4);
  v47 = *(unsigned __int8 *)(a1 + 137);
  v48 = *(_QWORD *)(a1 + v44);
  v49 = a1 + v7[30];
  v50 = *(_QWORD *)v49;
  LOBYTE(v49) = *(_BYTE *)(v49 + 8);
  v133 = v50;
  v134 = v49;
  v115 = v14;
  v116 = v13;
  v114 = v15;
  v113 = v31;
  v112 = v32;
  v111 = v42;
  v110 = v43;
  v109 = v46;
  v108 = v47;
  v100 = v39;
  v101 = v41;
  v98 = v37;
  v99 = v40;
  v105 = v9;
  v106 = (char *)(a1 + 268);
  v97 = v45;
  v83[1] = v38;
  if ((v107 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v86);
    v51 = v102;
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v84);
    swift_bridgeObjectRetain();
    outlined copy of ObjectInteractionData?(v36);
    v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v54 = v97;
    v53 = v98;
    v56 = v99;
    v55 = v100;
    v57 = v101;
    v58 = v52;
  }
  else
  {
    v107 = *(_QWORD *)(a1 + v7[23]);
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v86);
    v51 = v102;
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v84);
    swift_bridgeObjectRetain();
    v58 = v107;
    outlined copy of ObjectInteractionData?(v36);
    swift_bridgeObjectRetain();
    v54 = v97;
    v53 = v98;
    v56 = v99;
    v55 = v100;
    v57 = v101;
  }
  v60 = v103;
  v59 = v104;
  *(_QWORD *)&v152 = v89;
  *((_QWORD *)&v152 + 1) = v92;
  v153 = v54;
  v154 = v53;
  v155 = v56;
  v156 = v55;
  v157 = v57;
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v7[24], v103, &demangling cache variable for type metadata for HandDescriptorInternal?);
  v61 = *(float *)(a1 + 8);
  v62 = *(_DWORD *)(a1 + 232);
  v63 = *(_BYTE *)(a1 + 236);
  v64 = *(_QWORD *)(a1 + 240);
  v65 = *(_BYTE *)(a1 + 248);
  v66 = *(_BYTE *)(a1 + 249);
  v67 = *(_BYTE *)(a1 + 250);
  v68 = *(_BYTE *)(a1 + 251);
  v69 = *(_QWORD *)(a1 + 256);
  v70 = *(_DWORD *)(a1 + 264);
  v71 = *v106;
  v72 = *(_DWORD *)(a1 + 272);
  v73 = *(_DWORD *)(a1 + 276);
  v74 = v106[12];
  v119 = *(_OWORD *)(a1 + 216);
  v120 = v62;
  v121 = v63;
  v122 = v64;
  v123 = v65;
  v124 = v66;
  v125 = v67;
  v126 = v68;
  v127 = v69;
  v128 = v70;
  v129 = v71;
  v130 = v72;
  v131 = v73;
  v132 = v74;
  v75 = a1 + v7[34];
  v76 = *(float *)v75;
  v77 = *(_QWORD *)(v75 + 8);
  v78 = a1 + v7[32];
  v79 = *(_OWORD *)(v78 + 48);
  v158[2] = *(_OWORD *)(v78 + 32);
  v159[0] = v79;
  *(_QWORD *)((char *)v159 + 14) = *(_QWORD *)(v78 + 62);
  v80 = *(_OWORD *)(v78 + 16);
  v158[0] = *(_OWORD *)v78;
  v158[1] = v80;
  v117 = 0;
  v118 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HIBYTE(v82) = 2;
  LOBYTE(v82) = v109;
  HandDescriptor.init(detectionResults:handID:isLeft:handRadius:handCenter:detection3DHandCenter:handPose:handPresenceScore:handPresenceClass:poseSpec:pinchDown:pinchDownHomeUserInterface:pinchCancelled:branchFeatsArr:objectInteractionData:objectInteractionClass:imageCrops:internalData:trackingHealthScore:pinchFeatures:operationalEnvelopeSignals:objectInteractionInfo:objectInteractionStateStatus:)(v105, v111, v110, v150, v116, v115, v114, &v136, v59, v10, v61, v76, v51, v113, v112, v135, v82, v108, v48,
    &v152,
    &v133,
    v58,
    v60,
    (uint64_t *)&v119,
    v77,
    (uint64_t)v158,
    &v117);
  return outlined destroy of Matrix3x3PB(a1, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

float HandDescriptor.handRadius.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t HandDescriptor.pinchDown.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t HandDescriptor.pinchDownHomeUserInterface.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

float HandDescriptor.trackingHealthScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

uint64_t HandDescriptor.handPose.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = v1[10];
  v11 = v1[11];
  v12 = v1[12];
  v13 = v1[13];
  v14 = v1[14];
  v15 = v1[15];
  v16 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  a1[13] = v15;
  a1[14] = v16;
  return outlined copy of HandPose?(v2);
}

__n128 HandDescriptor.handPose.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = a1[1];
  v10 = *a1;
  v7 = a1[3];
  v8 = a1[2];
  v5 = a1[5];
  v6 = a1[4];
  v4 = (__n128)a1[6];
  v2 = *((_QWORD *)a1 + 14);
  outlined consume of HandPose?(*(_QWORD *)(v1 + 16));
  *(_OWORD *)(v1 + 16) = v10;
  *(_OWORD *)(v1 + 32) = v9;
  *(_OWORD *)(v1 + 48) = v8;
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v6;
  *(_OWORD *)(v1 + 96) = v5;
  result = v4;
  *(__n128 *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 128) = v2;
  return result;
}

uint64_t (*HandDescriptor.handPose.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.isLeft.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t HandDescriptor.pinchCancelled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t HandDescriptor.middleDoubleTap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t HandDescriptor.handID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

__n128 HandDescriptor.handCenter.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 192);
  result = *(__n128 *)(v1 + 160);
  v4 = *(_OWORD *)(v1 + 176);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 HandDescriptor.handCenter.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 176) = v4;
  *(_BYTE *)(v1 + 192) = v2;
  return result;
}

uint64_t (*HandDescriptor.handCenter.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.poseSpec.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v1 + 208);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of HandPose?(v2);
}

uint64_t HandDescriptor.poseSpec.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = outlined consume of HandPose?(*(_QWORD *)(v1 + 200));
  *(_QWORD *)(v1 + 200) = v2;
  *(_QWORD *)(v1 + 208) = v3;
  return result;
}

uint64_t (*HandDescriptor.poseSpec.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.pinchFeatures.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  int v13;
  char v14;

  v2 = *(_DWORD *)(v1 + 232);
  v3 = *(_BYTE *)(v1 + 236);
  v4 = *(_QWORD *)(v1 + 240);
  v5 = *(_BYTE *)(v1 + 248);
  v6 = *(_BYTE *)(v1 + 249);
  v7 = *(_BYTE *)(v1 + 250);
  v8 = *(_BYTE *)(v1 + 251);
  v9 = *(_QWORD *)(v1 + 256);
  v10 = *(_DWORD *)(v1 + 264);
  v11 = *(_BYTE *)(v1 + 268);
  v12 = *(_DWORD *)(v1 + 272);
  v13 = *(_DWORD *)(v1 + 276);
  v14 = *(_BYTE *)(v1 + 280);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 216);
  *(_DWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = v6;
  *(_BYTE *)(a1 + 34) = v7;
  *(_BYTE *)(a1 + 35) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 52) = v11;
  *(_DWORD *)(a1 + 56) = v12;
  *(_DWORD *)(a1 + 60) = v13;
  *(_BYTE *)(a1 + 64) = v14;
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptor.thumbIndexTap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 281);
}

uint64_t HandDescriptor.detectionResults.getter()
{
  type metadata accessor for HandDescriptor();
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptor.detection3DHandCenter.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HandDescriptor() + 76));
}

uint64_t HandDescriptor.detection3DHandCenter.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for HandDescriptor();
  v8 = v3 + *(int *)(result + 76);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*HandDescriptor.detection3DHandCenter.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.predictedHandCenter.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HandDescriptor() + 80));
}

uint64_t HandDescriptor.predictedHandCenter.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for HandDescriptor();
  v8 = v3 + *(int *)(result + 80);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*HandDescriptor.predictedHandCenter.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.cropUsedHandCenter.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HandDescriptor() + 84));
}

uint64_t HandDescriptor.cropUsedHandCenter.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for HandDescriptor();
  v8 = v3 + *(int *)(result + 84);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*HandDescriptor.cropUsedHandCenter.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.imageCrops.getter()
{
  type metadata accessor for HandDescriptor();
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptor.imageCrops.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for HandDescriptor() + 92);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*HandDescriptor.imageCrops.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.internalData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HandDescriptor();
  return outlined init with copy of (Int32, Matrix2dPB)(v1 + *(int *)(v3 + 96), a1, &demangling cache variable for type metadata for HandDescriptorInternal?);
}

uint64_t HandDescriptor.internalData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HandDescriptor();
  return outlined assign with take of HomePinchInternalPB?(a1, v1 + *(int *)(v3 + 96), &demangling cache variable for type metadata for HandDescriptorInternal?);
}

uint64_t (*HandDescriptor.internalData.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.objectInteractionClass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for HandDescriptor();
  v4 = (uint64_t *)(v1 + *(int *)(result + 120));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t HandDescriptor.objectInteractionClass.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for HandDescriptor();
  v5 = v1 + *(int *)(result + 120);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*HandDescriptor.objectInteractionClass.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptor.objectInteractionStateStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for HandDescriptor();
  v4 = (uint64_t *)(v1 + *(int *)(result + 132));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t HandDescriptor.objectInteractionStateStatus.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for HandDescriptor();
  v5 = v1 + *(int *)(result + 132);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*HandDescriptor.objectInteractionStateStatus.modify())(_QWORD)
{
  type metadata accessor for HandDescriptor();
  return _s5Hands13PoseImageCropVSgWOi_;
}

unint64_t HandDescriptor.hoverDistanceUncertainty.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 264) | ((unint64_t)*(unsigned __int8 *)(v0 + 268) << 32);
}

__n128 HandDescriptor.init(detectionResults:handID:isLeft:handRadius:handCenter:detection3DHandCenter:handPose:handPresenceScore:handPresenceClass:poseSpec:pinchDown:pinchDownHomeUserInterface:pinchCancelled:branchFeatsArr:objectInteractionData:objectInteractionClass:imageCrops:internalData:trackingHealthScore:pinchFeatures:operationalEnvelopeSignals:objectInteractionInfo:objectInteractionStateStatus:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, __int128 *a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, uint64_t a13, uint64_t a14, char a15, uint64_t *a16, __int16 a17, char a18, uint64_t a19, __int128 *a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t *a27)
{
  int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  int v82;
  char v84;
  char v85;
  uint64_t v86;
  int v88;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;

  v93 = a20[1];
  v94 = *a20;
  v92 = a20[2];
  v91 = *((_QWORD *)a20 + 6);
  v70 = *a4;
  v69 = *((_QWORD *)a4 + 2);
  v68 = *((_QWORD *)a4 + 3);
  v67 = *((_BYTE *)a4 + 32);
  v65 = a8[1];
  v66 = *a8;
  v63 = a8[3];
  v64 = a8[2];
  v61 = a8[5];
  v62 = a8[4];
  v60 = a8[6];
  v59 = *((_QWORD *)a8 + 14);
  v71 = a16[1];
  v72 = *a16;
  v86 = *a21;
  v85 = *((_BYTE *)a21 + 8);
  v88 = *((_DWORD *)a24 + 4);
  v31 = *((_DWORD *)a24 + 14);
  v102 = *a27;
  v101 = *((_BYTE *)a27 + 8);
  *(_BYTE *)(a9 + 138) = 2;
  *(_BYTE *)(a9 + 281) = 0;
  v73 = *((_BYTE *)a24 + 20);
  v74 = a24[3];
  v75 = *((_BYTE *)a24 + 32);
  v76 = *((_BYTE *)a24 + 33);
  v77 = *((_BYTE *)a24 + 34);
  v78 = *((_BYTE *)a24 + 35);
  v79 = a24[5];
  v80 = *((_DWORD *)a24 + 12);
  v81 = *((_BYTE *)a24 + 52);
  v82 = *((_DWORD *)a24 + 15);
  v84 = *((_BYTE *)a24 + 64);
  v32 = (int *)type metadata accessor for HandDescriptor();
  v33 = a9 + v32[17];
  v34 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v35 = *a24;
  v36 = a24[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v37 = a9 + v32[19];
  v38 = a9 + v32[20];
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_BYTE *)(v38 + 16) = 1;
  v39 = a9 + v32[21];
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_BYTE *)(v39 + 16) = 1;
  v40 = a9 + v32[22];
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_BYTE *)(v40 + 64) = 1;
  v41 = a9 + v32[24];
  v42 = type metadata accessor for HandDescriptorInternal();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = a9 + v32[27];
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  v44 = a9 + v32[28];
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_OWORD *)v44 = 0u;
  *(_WORD *)(v44 + 48) = 256;
  v45 = v32[29];
  v46 = a9 + v32[31];
  v47 = a9 + v32[36];
  v48 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
  v49 = a9 + v32[37];
  *(_BYTE *)v49 = 2;
  *(_DWORD *)(v49 + 4) = 0;
  *(_BYTE *)(v49 + 8) = 1;
  v50 = a9 + v32[38];
  *(_DWORD *)v50 = 2;
  *(_QWORD *)(v50 + 8) = 0;
  *(_BYTE *)(v50 + 16) = 1;
  *(_QWORD *)(v50 + 24) = 0;
  *(_BYTE *)(v50 + 32) = 1;
  *(_QWORD *)(v50 + 40) = 0;
  *(_BYTE *)(v50 + 48) = 1;
  *(_DWORD *)(v50 + 49) = 0;
  *(_QWORD *)(a9 + v32[18]) = a1;
  *(_QWORD *)(a9 + 144) = a2;
  *(float *)a9 = a10;
  *(_QWORD *)v37 = a5;
  *(_QWORD *)(v37 + 8) = a6;
  *(_BYTE *)(v37 + 16) = a7 & 1;
  *(_OWORD *)(a9 + 160) = v70;
  *(_QWORD *)(a9 + 176) = v69;
  *(_QWORD *)(a9 + 184) = v68;
  *(_BYTE *)(a9 + 192) = v67;
  *(_OWORD *)(a9 + 16) = v66;
  *(_OWORD *)(a9 + 32) = v65;
  *(_OWORD *)(a9 + 48) = v64;
  *(_OWORD *)(a9 + 64) = v63;
  *(_OWORD *)(a9 + 80) = v62;
  *(_OWORD *)(a9 + 96) = v61;
  *(_OWORD *)(a9 + 112) = v60;
  *(_QWORD *)(a9 + 128) = v59;
  *(_BYTE *)(a9 + 136) = a3;
  *(_QWORD *)(a9 + v32[26]) = a13;
  v51 = a9 + v32[25];
  *(_QWORD *)v51 = a14;
  *(_BYTE *)(v51 + 8) = a15 & 1;
  *(_QWORD *)(a9 + 200) = v72;
  *(_QWORD *)(a9 + 208) = v71;
  *(_WORD *)(a9 + 4) = a17;
  *(_BYTE *)(a9 + 137) = a18;
  *(_QWORD *)(a9 + v45) = a19;
  *(_OWORD *)v46 = v94;
  *(_OWORD *)(v46 + 16) = v93;
  *(_OWORD *)(v46 + 32) = v92;
  *(_QWORD *)(v46 + 48) = v91;
  v52 = a9 + v32[30];
  *(_QWORD *)v52 = v86;
  *(_BYTE *)(v52 + 8) = v85;
  *(_QWORD *)(a9 + v32[23]) = a22;
  outlined assign with copy of HandDescriptorInternal?(a23, v41);
  *(_QWORD *)(a9 + 216) = v35;
  *(_QWORD *)(a9 + 224) = v36;
  *(_DWORD *)(a9 + 232) = v88;
  *(_BYTE *)(a9 + 236) = v73;
  *(_QWORD *)(a9 + 240) = v74;
  *(_BYTE *)(a9 + 248) = v75;
  *(_BYTE *)(a9 + 249) = v76;
  *(_BYTE *)(a9 + 250) = v77;
  *(_BYTE *)(a9 + 251) = v78;
  *(_QWORD *)(a9 + 256) = v79;
  *(_DWORD *)(a9 + 264) = v80;
  *(_BYTE *)(a9 + 268) = v81;
  *(_DWORD *)(a9 + 272) = v31;
  *(_DWORD *)(a9 + 276) = v82;
  *(_BYTE *)(a9 + 280) = v84;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_WORD *)(v44 + 48) = 0;
  v98 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v100 = *MEMORY[0x24BDAEE00];
  v96 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v97 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  outlined destroy of Coordinate3DPB?(a23, &demangling cache variable for type metadata for HandDescriptorInternal?);
  v53 = a9 + v32[35];
  *(_OWORD *)v53 = v100;
  *(_OWORD *)(v53 + 16) = v98;
  *(_OWORD *)(v53 + 32) = v97;
  *(_OWORD *)(v53 + 48) = v96;
  *(_DWORD *)(v53 + 64) = 1065353216;
  *(_QWORD *)(v53 + 68) = v103;
  *(_DWORD *)(v53 + 76) = v104;
  *(_OWORD *)(v53 + 80) = v100;
  *(_OWORD *)(v53 + 96) = v98;
  *(_OWORD *)(v53 + 112) = v97;
  *(_OWORD *)(v53 + 128) = v96;
  *(_OWORD *)(v53 + 144) = 0u;
  *(_OWORD *)(v53 + 160) = 0u;
  *(_OWORD *)(v53 + 176) = 0u;
  *(_OWORD *)(v53 + 192) = 0u;
  *(_OWORD *)(v53 + 208) = 0u;
  *(_OWORD *)(v53 + 224) = 0u;
  *(_OWORD *)(v53 + 240) = 0u;
  *(_OWORD *)(v53 + 256) = 0u;
  *(_QWORD *)(v53 + 272) = 0;
  *(float *)(a9 + 8) = a11;
  v54 = a9 + v32[34];
  *(float *)v54 = a12;
  *(_QWORD *)(v54 + 8) = a25;
  v55 = a9 + v32[32];
  v56 = *(_OWORD *)(a26 + 48);
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(a26 + 32);
  *(_OWORD *)(v55 + 48) = v56;
  *(_QWORD *)(v55 + 62) = *(_QWORD *)(a26 + 62);
  result = *(__n128 *)(a26 + 16);
  *(_OWORD *)v55 = *(_OWORD *)a26;
  *(__n128 *)(v55 + 16) = result;
  v58 = a9 + v32[33];
  *(_QWORD *)v58 = v102;
  *(_BYTE *)(v58 + 8) = v101;
  return result;
}

uint64_t HandDescriptor.init(detectionResultsArray:isLeft:handRadius:handCenter:internalData:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD v58[3];
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67[2];
  __int128 v68[7];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _OWORD v78[2];
  __int128 v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;

  v53 = a2;
  v54 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v51 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  v48 = *(_QWORD *)(a3 + 8);
  v49 = v13;
  v50 = *(_QWORD *)(a3 + 24);
  v52 = *(unsigned __int8 *)(a3 + 32);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v45 = v14;
    v46 = a4;
    v57 = MEMORY[0x24BEE4AF8];
    v47 = a1;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v16 = v47;
    v17 = v57;
    v18 = v15 - 1;
    for (i = 32; ; i += 112)
    {
      v20 = *(_OWORD *)(v16 + i + 64);
      v21 = *(_OWORD *)(v16 + i + 80);
      v22 = *(_OWORD *)(v16 + i + 32);
      v77[0] = *(_OWORD *)(v16 + i + 48);
      v77[1] = v20;
      v78[0] = v21;
      *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)(v16 + i + 89);
      v23 = *(_OWORD *)(v16 + i + 16);
      v74 = *(_OWORD *)(v16 + i);
      v75 = v23;
      v76 = v22;
      outlined retain of DetectionResult((uint64_t)&v74);
      v57 = v17;
      v25 = *(_QWORD *)(v17 + 16);
      v24 = *(_QWORD *)(v17 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v16 = v47;
        v17 = v57;
      }
      v26 = v76;
      LOBYTE(v79) = BYTE8(v76);
      v68[6] = *(_OWORD *)((char *)v78 + 9);
      *(__int128 *)((char *)&v68[4] + 7) = v77[1];
      *(__int128 *)((char *)&v68[5] + 7) = v78[0];
      *(__int128 *)((char *)v68 + 7) = v74;
      *(__int128 *)((char *)&v68[1] + 7) = v75;
      *(__int128 *)((char *)&v68[2] + 7) = v76;
      *(__int128 *)((char *)&v68[3] + 7) = v77[0];
      *(_QWORD *)(v17 + 16) = v25 + 1;
      v27 = v17 + (v25 << 7);
      *(_QWORD *)(v27 + 32) = v26;
      *(_BYTE *)(v27 + 40) = v79;
      v28 = v68[0];
      v29 = v68[1];
      *(_OWORD *)(v27 + 73) = v68[2];
      *(_OWORD *)(v27 + 57) = v29;
      *(_OWORD *)(v27 + 41) = v28;
      v30 = v68[3];
      v31 = v68[4];
      v32 = v68[5];
      *(_OWORD *)(v27 + 137) = v68[6];
      *(_OWORD *)(v27 + 121) = v32;
      *(_OWORD *)(v27 + 105) = v31;
      *(_OWORD *)(v27 + 89) = v30;
      if (!v18)
        break;
      --v18;
    }
    swift_bridgeObjectRelease();
    v14 = v45;
    a4 = v46;
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
      v33 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_11;
    }
  }
  v33 = MEMORY[0x24BEE4B00];
LABEL_11:
  *(_QWORD *)&v68[0] = v33;
  v34 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v34, 1, v68);
  swift_bridgeObjectRelease();
  v46 = static HandDescriptor.handCounter;
  v47 = *(_QWORD *)&v68[0];
  *(_QWORD *)&v70 = v49;
  *((_QWORD *)&v70 + 1) = v48;
  v35 = v50;
  v71 = v14;
  v72 = v50;
  v36 = v52;
  v73 = v52;
  if (v52)
    v37 = 0;
  else
    v37 = v14;
  if (v52)
    v35 = 0;
  v49 = v37;
  v50 = v35;
  v69 = 0;
  memset(v68, 0, sizeof(v68));
  v67[0] = 0;
  v67[1] = 0;
  v38 = v51;
  outlined init with copy of (Int32, Matrix2dPB)(a4, v51, &demangling cache variable for type metadata for HandDescriptorInternal?);
  v39 = a4;
  v40 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of HandDescriptor.init(detectionResultsArray:isLeft:handRadius:handCenter:internalData:));
  *(_QWORD *)&v79 = &outlined read-only object #0 of ObjectInteractionData.init();
  *((_QWORD *)&v79 + 1) = &outlined read-only object #1 of ObjectInteractionData.init();
  v80 = &outlined read-only object #2 of ObjectInteractionData.init();
  v81 = &outlined read-only object #3 of ObjectInteractionData.init();
  v82 = &outlined read-only object #4 of ObjectInteractionData.init();
  v83 = &outlined read-only object #5 of ObjectInteractionData.init();
  v84 = &outlined read-only object #6 of ObjectInteractionData.init();
  v65 = 0;
  v66 = 1;
  v41 = MEMORY[0x24BEE4AF8];
  v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v57 = 0;
  v58[0] = 0;
  *(_QWORD *)((char *)v58 + 5) = 0;
  v58[2] = -1;
  v59 = 0;
  v60 = v41;
  v61 = 0;
  v62 = 1;
  v63 = 0;
  v64 = 0;
  v43 = specialized Dictionary.init(dictionaryLiteral:)(v41);
  v76 = 0u;
  v74 = 0uLL;
  *(_QWORD *)&v75 = 0;
  *(_QWORD *)&v77[0] = -1;
  BYTE8(v77[0]) = 0;
  *(_QWORD *)((char *)v77 + 12) = 0x3F800000BF800000;
  WORD2(v77[1]) = 0;
  v55 = 0;
  v56 = 1;
  HandDescriptor.init(detectionResults:handID:isLeft:handRadius:handCenter:detection3DHandCenter:handPose:handPresenceScore:handPresenceClass:poseSpec:pinchDown:pinchDownHomeUserInterface:pinchCancelled:branchFeatsArr:objectInteractionData:objectInteractionClass:imageCrops:internalData:trackingHealthScore:pinchFeatures:operationalEnvelopeSignals:objectInteractionInfo:objectInteractionStateStatus:)(v47, v46, v53 & 1, &v70, v49, v50, v36, v68, v54, a6, 1.0, 1.0, v40, 1, 1, v67, 514, 0, v41,
    &v79,
    &v65,
    v42,
    v38,
    &v57,
    v43,
    (uint64_t)&v74,
    &v55);
  if (static HandDescriptor.handCounter == -1)
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    ++static HandDescriptor.handCounter;
    return outlined destroy of Coordinate3DPB?(v39, &demangling cache variable for type metadata for HandDescriptorInternal?);
  }
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v23;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v5 = a1 + 56;
    v6 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(a1 + 56);
    v23 = (unint64_t)(v6 + 63) >> 6;
    v9 = a2 + 56;
    while (1)
    {
      if (v8)
      {
        v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v11 = v10 | (v4 << 6);
      }
      else
      {
        v12 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        if (v12 >= v23)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        ++v4;
        if (!v13)
        {
          v4 = v12 + 1;
          if (v12 + 1 >= v23)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
          {
            v4 = v12 + 2;
            if (v12 + 2 >= v23)
              return 1;
            v13 = *(_QWORD *)(v5 + 8 * v4);
            if (!v13)
            {
              v14 = v12 + 3;
              if (v14 >= v23)
                return 1;
              v13 = *(_QWORD *)(v5 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  v4 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    break;
                  if (v4 >= v23)
                    return 1;
                  v13 = *(_QWORD *)(v5 + 8 * v4);
                  ++v14;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_33:
                __break(1u);
                JUMPOUT(0x23D7CBFF4);
              }
              v4 = v14;
            }
          }
        }
LABEL_22:
        v8 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v4 << 6);
      }
      v15 = *(_QWORD *)(a1 + 48) + 16 * v11;
      v16 = *(_QWORD *)v15;
      v17 = *(unsigned __int8 *)(v15 + 8);
      Hasher.init(_seed:)();
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Hashable.hash(into:)();
      v18 = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v20 = v18 & ~v19;
      if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        return 0;
      v21 = ~v19;
      while (1)
      {
        if (v17)
          __asm { BR              X12 }
        if (*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v20) == v16)
          break;
        v20 = (v20 + 1) & v21;
        if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t specialized static HandDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int16 v44;
  int v45;

  v2 = *(_QWORD *)(a1 + 144);
  if (v2 == *(_QWORD *)(a2 + 144))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4)
      return HandDescriptor.almostEqual(to:withThreshold:)(a2, 0.00000001) & 1;
    v5 = *(_QWORD *)(a2 + 16);
    if (!v5)
      return HandDescriptor.almostEqual(to:withThreshold:)(a2, 0.00000001) & 1;
    v6 = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    v9 = *(_OWORD *)(a1 + 104);
    v10 = *(_OWORD *)(a1 + 88);
    v11 = *(_OWORD *)(a1 + 72);
    v12 = *(_OWORD *)(a1 + 56);
    v13 = *(_OWORD *)(a1 + 40);
    v14 = *(_OWORD *)(a2 + 40);
    v15 = *(_OWORD *)(a2 + 56);
    v16 = *(_OWORD *)(a2 + 72);
    v17 = *(_OWORD *)(a2 + 88);
    v18 = *(_OWORD *)(a2 + 104);
    v20 = *(_QWORD *)(a2 + 120);
    v19 = *(_QWORD *)(a2 + 128);
    v37 = *(_OWORD *)(a1 + 24);
    v38 = v13;
    v39 = v12;
    v40 = v11;
    v41 = v10;
    v42 = v9;
    v36 = v4;
    v43 = v8;
    v44 = v7 & 0x101;
    v45 = HIDWORD(v7);
    *(_QWORD *)v27 = v5;
    *(_OWORD *)&v27[8] = v6;
    v28 = v14;
    v29 = v15;
    v30 = v16;
    v31 = v17;
    v32 = v18;
    v33 = v20;
    v34 = v19 & 0x101;
    v35 = HIDWORD(v19);
    if ((specialized static HandPose.== infix(_:_:)((__int128 *)&v36, (uint64_t *)v27) & 1) != 0)
      return HandDescriptor.almostEqual(to:withThreshold:)(a2, 0.00000001) & 1;
    v36 = 0;
    *(_QWORD *)&v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v25._countAndFlagsBits = 0xD00000000000001CLL;
    v25._object = (void *)0x800000023D9CDDB0;
    String.append(_:)(v25);
    *(_QWORD *)v27 = v2;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v36 = 0xD000000000000010;
    *(_QWORD *)&v37 = 0x800000023D9CDE80;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v38 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    *(_OWORD *)v27 = xmmword_23D9A8970;
    *(_QWORD *)&v27[16] = 0;
    *(_QWORD *)&v28 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)v27, 0xD000000000000056, 0x800000023D9CD8F0, 392, (uint64_t)&v36, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type HandDescriptorPB and conformance HandDescriptorPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB;
  if (!lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB)
  {
    v1 = type metadata accessor for HandDescriptorPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandDescriptorPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandDescriptor(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(_BYTE *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  char *__dsta;
  _BYTE *__dst;
  char *v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  int *v184;
  char *v185;
  int *v186;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a2[2];
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 24) = v8;
      v9 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 48) = v9;
      v10 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 80) = v10;
      v11 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 112) = v11;
      *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
      *(_BYTE *)(v4 + 129) = *((_BYTE *)a2 + 129);
      *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 96) = v13;
      *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
      *(_QWORD *)(v4 + 128) = a2[16];
      v14 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v4 + 32) = v14;
      v15 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v15;
    }
    v16 = a2[25];
    *(_BYTE *)(v4 + 136) = *((_BYTE *)a2 + 136);
    *(_WORD *)(v4 + 137) = *(_WORD *)((char *)a2 + 137);
    *(_QWORD *)(v4 + 144) = a2[18];
    v17 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v4 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v4 + 176) = v17;
    *(_BYTE *)(v4 + 192) = *((_BYTE *)a2 + 192);
    if (v16)
    {
      v18 = a2[26];
      *(_QWORD *)(v4 + 200) = v16;
      *(_QWORD *)(v4 + 208) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 25);
    }
    *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 27);
    *(_DWORD *)(v4 + 232) = *((_DWORD *)a2 + 58);
    *(_BYTE *)(v4 + 236) = *((_BYTE *)a2 + 236);
    *(_QWORD *)(v4 + 240) = a2[30];
    *(_DWORD *)(v4 + 248) = *((_DWORD *)a2 + 62);
    v19 = a2[32];
    *(_DWORD *)(v4 + 264) = *((_DWORD *)a2 + 66);
    *(_BYTE *)(v4 + 268) = *((_BYTE *)a2 + 268);
    *(_DWORD *)(v4 + 272) = *((_DWORD *)a2 + 68);
    *(_DWORD *)(v4 + 276) = *((_DWORD *)a2 + 69);
    *(_WORD *)(v4 + 280) = *((_WORD *)a2 + 140);
    v20 = v6[17];
    v21 = (char *)(v4 + v20);
    v22 = (char *)a2 + v20;
    *(_QWORD *)(v4 + 256) = v19;
    v23 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    v186 = v6;
    if (v25(v22, 1, v23))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for UnknownStorage();
      v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v183(v21, v22, v27);
      v28 = *(int *)(v23 + 20);
      v29 = &v21[v28];
      v30 = &v22[v28];
      v31 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v29 = *(_QWORD *)v30;
        v34 = *(int *)(v31 + 20);
        __dsta = &v30[v34];
        v181 = &v29[v34];
        swift_bridgeObjectRetain();
        v183(v181, __dsta, v27);
        v35 = *(int *)(v31 + 24);
        v36 = &v29[v35];
        v37 = &v30[v35];
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v36[4] = v37[4];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      v6 = v186;
    }
    v38 = v6[19];
    *(_QWORD *)(v4 + v6[18]) = *(uint64_t *)((char *)a2 + v6[18]);
    v39 = v4 + v38;
    v40 = (uint64_t)a2 + v38;
    *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v41 = v6[20];
    v42 = v6[21];
    v43 = v4 + v41;
    v44 = (uint64_t)a2 + v41;
    *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    v45 = v4 + v42;
    v46 = (uint64_t)a2 + v42;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
    v47 = v6[22];
    v48 = v6[23];
    v49 = v4 + v47;
    v50 = (uint64_t)a2 + v47;
    *(_BYTE *)(v49 + 64) = *(_BYTE *)(v50 + 64);
    v51 = *(_OWORD *)(v50 + 48);
    *(_OWORD *)(v49 + 32) = *(_OWORD *)(v50 + 32);
    *(_OWORD *)(v49 + 48) = v51;
    v52 = *(_OWORD *)(v50 + 16);
    v53 = *(uint64_t *)((char *)a2 + v48);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v52;
    *(_QWORD *)(v4 + v48) = v53;
    v54 = v6[24];
    v55 = (_QWORD *)(v4 + v54);
    v56 = (uint64_t *)((char *)a2 + v54);
    v57 = type metadata accessor for HandDescriptorInternal();
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v58 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v56, 1, v57))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v182 = v58;
      v184 = (int *)v57;
      *v55 = *v56;
      *((_BYTE *)v55 + 8) = *((_BYTE *)v56 + 8);
      v61 = v56[6];
      swift_bridgeObjectRetain();
      if (v61)
      {
        v55[2] = v56[2];
        *((_WORD *)v55 + 12) = *((_WORD *)v56 + 12);
        v55[4] = v56[4];
        *((_BYTE *)v55 + 40) = *((_BYTE *)v56 + 40);
        v62 = v56[7];
        v63 = v56[8];
        v55[6] = v61;
        v55[7] = v62;
        v65 = v56[9];
        v64 = v56[10];
        v55[8] = v63;
        v55[9] = v65;
        v55[10] = v64;
        *((_DWORD *)v55 + 22) = *((_DWORD *)v56 + 22);
        v66 = v56[13];
        v55[12] = v56[12];
        v55[13] = v66;
        *((_BYTE *)v55 + 120) = *((_BYTE *)v56 + 120);
        v55[14] = v56[14];
        *(_QWORD *)((char *)v55 + 124) = *(_QWORD *)((char *)v56 + 124);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v67 = *((_OWORD *)v56 + 6);
        *((_OWORD *)v55 + 5) = *((_OWORD *)v56 + 5);
        *((_OWORD *)v55 + 6) = v67;
        *((_OWORD *)v55 + 7) = *((_OWORD *)v56 + 7);
        *((_DWORD *)v55 + 32) = *((_DWORD *)v56 + 32);
        v68 = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 1) = *((_OWORD *)v56 + 1);
        *((_OWORD *)v55 + 2) = v68;
        v69 = *((_OWORD *)v56 + 4);
        *((_OWORD *)v55 + 3) = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 4) = v69;
      }
      v55[17] = v56[17];
      v55[18] = v56[18];
      v55[19] = v56[19];
      memcpy(v55 + 20, v56 + 20, 0x373uLL);
      v70 = v184[10];
      __dst = (char *)v55 + v70;
      v71 = (char *)v56 + v70;
      v72 = type metadata accessor for ActionInternalPB(0);
      v73 = *(_QWORD *)(v72 - 8);
      v74 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v74(v71, 1, v72))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
        memcpy(__dst, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        *__dst = *v71;
        v76 = *(int *)(v72 + 20);
        v77 = &__dst[v76];
        v78 = &v71[v76];
        v79 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v72);
      }
      v80 = v184[11];
      v81 = (char *)v55 + v80;
      v82 = (char *)v56 + v80;
      v83 = type metadata accessor for UnsureInternalPB(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v86 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v81, v82, v86);
        *(_QWORD *)&v81[*(int *)(v83 + 20)] = *(_QWORD *)&v82[*(int *)(v83 + 20)];
        v87 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56);
        swift_retain();
        v87(v81, 0, 1, v83);
      }
      v88 = v184[12];
      v89 = (char *)v55 + v88;
      v90 = (char *)v56 + v88;
      v91 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      v92 = *(_QWORD *)(v91 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
      {
        v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v94 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v89, v90, v94);
        *(_QWORD *)&v89[*(int *)(v91 + 20)] = *(_QWORD *)&v90[*(int *)(v91 + 20)];
        v95 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56);
        swift_retain();
        v95(v89, 0, 1, v91);
      }
      v96 = v184[13];
      v97 = (_QWORD *)((char *)v55 + v96);
      v98 = (_QWORD *)((char *)v56 + v96);
      v99 = type metadata accessor for HomePinchInternalPB(0);
      v100 = *(_QWORD *)(v99 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
      {
        v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        *v97 = *v98;
        v102 = *(int *)(v99 + 20);
        v103 = (char *)v97 + v102;
        v104 = (char *)v98 + v102;
        v105 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      }
      *(_QWORD *)((char *)v55 + v184[14]) = *(_QWORD *)((char *)v56 + v184[14]);
      v106 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v182 + 56);
      swift_bridgeObjectRetain();
      v106(v55, 0, 1, v184);
      v6 = v186;
    }
    v107 = v6[25];
    v108 = v6[26];
    v109 = v4 + v107;
    v110 = (uint64_t)a2 + v107;
    *(_QWORD *)v109 = *(_QWORD *)v110;
    *(_BYTE *)(v109 + 8) = *(_BYTE *)(v110 + 8);
    *(_QWORD *)(v4 + v108) = *(uint64_t *)((char *)a2 + v108);
    v111 = v6[27];
    v112 = v6[28];
    v113 = v4 + v111;
    v114 = (uint64_t)a2 + v111;
    *(_BYTE *)(v113 + 8) = *(_BYTE *)(v114 + 8);
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v115 = v4 + v112;
    v116 = (uint64_t)a2 + v112;
    v117 = *(_OWORD *)(v116 + 16);
    *(_OWORD *)v115 = *(_OWORD *)v116;
    *(_OWORD *)(v115 + 16) = v117;
    *(_OWORD *)(v115 + 32) = *(_OWORD *)(v116 + 32);
    *(_WORD *)(v115 + 48) = *(_WORD *)(v116 + 48);
    v118 = v6[30];
    *(_QWORD *)(v4 + v6[29]) = *(uint64_t *)((char *)a2 + v6[29]);
    v119 = v4 + v118;
    v120 = (uint64_t)a2 + v118;
    *(_QWORD *)v119 = *(_QWORD *)v120;
    *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
    v121 = v6[31];
    v122 = (_QWORD *)(v4 + v121);
    v123 = (uint64_t)a2 + v121;
    v124 = *(uint64_t *)((char *)a2 + v121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v124)
    {
      v125 = *(_QWORD *)(v123 + 8);
      v126 = *(_QWORD *)(v123 + 16);
      *v122 = v124;
      v122[1] = v125;
      v127 = *(_QWORD *)(v123 + 24);
      v128 = *(_QWORD *)(v123 + 32);
      v122[2] = v126;
      v122[3] = v127;
      v129 = *(_QWORD *)(v123 + 40);
      v130 = *(_QWORD *)(v123 + 48);
      v122[4] = v128;
      v122[5] = v129;
      v122[6] = v130;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v186;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v131 = *(_OWORD *)(v123 + 16);
      *(_OWORD *)v122 = *(_OWORD *)v123;
      *((_OWORD *)v122 + 1) = v131;
      *((_OWORD *)v122 + 2) = *(_OWORD *)(v123 + 32);
      v122[6] = *(_QWORD *)(v123 + 48);
    }
    v132 = v6[32];
    v133 = v6[33];
    v134 = v4 + v132;
    v135 = (uint64_t)a2 + v132;
    *(_QWORD *)(v134 + 62) = *(_QWORD *)(v135 + 62);
    v136 = *(_OWORD *)(v135 + 48);
    *(_OWORD *)(v134 + 32) = *(_OWORD *)(v135 + 32);
    *(_OWORD *)(v134 + 48) = v136;
    v137 = *(_OWORD *)(v135 + 16);
    *(_OWORD *)v134 = *(_OWORD *)v135;
    *(_OWORD *)(v134 + 16) = v137;
    v138 = v4 + v133;
    v139 = (uint64_t)a2 + v133;
    *(_QWORD *)v138 = *(_QWORD *)v139;
    *(_BYTE *)(v138 + 8) = *(_BYTE *)(v139 + 8);
    v140 = v6[34];
    v141 = v6[35];
    v142 = v4 + v140;
    v143 = (uint64_t)a2 + v140;
    *(_DWORD *)v142 = *(_DWORD *)v143;
    *(_QWORD *)(v142 + 8) = *(_QWORD *)(v143 + 8);
    v144 = v4 + v141;
    v145 = (uint64_t)a2 + v141;
    v146 = *(_OWORD *)((char *)a2 + v141 + 48);
    *(_OWORD *)(v144 + 32) = *(_OWORD *)((char *)a2 + v141 + 32);
    *(_OWORD *)(v144 + 48) = v146;
    *(_DWORD *)(v144 + 64) = *(_DWORD *)((char *)a2 + v141 + 64);
    v147 = *(_OWORD *)((char *)a2 + v141 + 16);
    *(_OWORD *)v144 = *(_OWORD *)((char *)a2 + v141);
    *(_OWORD *)(v144 + 16) = v147;
    v148 = *(_OWORD *)((char *)a2 + v141 + 96);
    *(_OWORD *)(v144 + 80) = *(_OWORD *)((char *)a2 + v141 + 80);
    *(_OWORD *)(v144 + 96) = v148;
    v149 = *(_OWORD *)((char *)a2 + v141 + 128);
    *(_OWORD *)(v144 + 112) = *(_OWORD *)((char *)a2 + v141 + 112);
    *(_OWORD *)(v144 + 128) = v149;
    v150 = (uint64_t)a2 + v141 + 144;
    v151 = *(_QWORD *)v150;
    swift_bridgeObjectRetain();
    if (v151)
    {
      v152 = *(_QWORD *)(v145 + 152);
      *(_QWORD *)(v144 + 144) = v151;
      *(_QWORD *)(v144 + 152) = v152;
      v153 = *(_OWORD *)(v145 + 176);
      *(_OWORD *)(v144 + 160) = *(_OWORD *)(v145 + 160);
      *(_OWORD *)(v144 + 176) = v153;
      v154 = *(_OWORD *)(v145 + 208);
      *(_OWORD *)(v144 + 192) = *(_OWORD *)(v145 + 192);
      *(_OWORD *)(v144 + 208) = v154;
      v155 = *(_OWORD *)(v145 + 240);
      *(_OWORD *)(v144 + 224) = *(_OWORD *)(v145 + 224);
      *(_OWORD *)(v144 + 240) = v155;
      *(_BYTE *)(v144 + 256) = *(_BYTE *)(v145 + 256);
      *(_BYTE *)(v144 + 257) = *(_BYTE *)(v145 + 257);
      *(_DWORD *)(v144 + 260) = *(_DWORD *)(v145 + 260);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v156 = *(_OWORD *)(v150 + 80);
      *(_OWORD *)(v144 + 208) = *(_OWORD *)(v150 + 64);
      *(_OWORD *)(v144 + 224) = v156;
      *(_OWORD *)(v144 + 240) = *(_OWORD *)(v150 + 96);
      *(_QWORD *)(v144 + 256) = *(_QWORD *)(v150 + 112);
      v157 = *(_OWORD *)(v150 + 16);
      *(_OWORD *)(v144 + 144) = *(_OWORD *)v150;
      *(_OWORD *)(v144 + 160) = v157;
      v158 = *(_OWORD *)(v150 + 48);
      *(_OWORD *)(v144 + 176) = *(_OWORD *)(v150 + 32);
      *(_OWORD *)(v144 + 192) = v158;
    }
    v159 = *(_QWORD *)(v145 + 272);
    *(_QWORD *)(v144 + 264) = *(_QWORD *)(v145 + 264);
    *(_QWORD *)(v144 + 272) = v159;
    v160 = v6[36];
    v161 = (_QWORD *)(v4 + v160);
    v162 = (uint64_t *)((char *)a2 + v160);
    v163 = type metadata accessor for PartialHandMultiCam(0);
    v164 = *(_QWORD *)(v163 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
    {
      v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
      memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
    else
    {
      v166 = v162[1];
      *v161 = *v162;
      v161[1] = v166;
      v167 = *(int *)(v163 + 24);
      v185 = (char *)v161 + v167;
      v168 = (char *)v162 + v167;
      v169 = type metadata accessor for UnknownStorage();
      v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v170(v185, v168, v169);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
    }
    v171 = v186[37];
    v172 = v186[38];
    v173 = v4 + v171;
    v174 = (uint64_t)a2 + v171;
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *(_BYTE *)(v173 + 8) = *(_BYTE *)(v174 + 8);
    v175 = v4 + v172;
    v176 = (uint64_t)a2 + v172;
    v177 = *(_OWORD *)(v176 + 16);
    *(_OWORD *)v175 = *(_OWORD *)v176;
    *(_OWORD *)(v175 + 16) = v177;
    *(_OWORD *)(v175 + 32) = *(_OWORD *)(v176 + 32);
    *(_QWORD *)(v175 + 45) = *(_QWORD *)(v176 + 45);
  }
  return v4;
}

uint64_t destroy for HandDescriptor(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 200))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v4 = a1 + a2[17];
  v5 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v8 = v4 + *(int *)(v5 + 20);
    v9 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      v7(v8 + *(int *)(v9 + 20), v6);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + a2[24];
  v11 = (int *)type metadata accessor for HandDescriptorInternal();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v10 + 48))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v10 + v11[10];
    v13 = type metadata accessor for ActionInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      v14 = v12 + *(int *)(v13 + 20);
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    }
    v16 = v10 + v11[11];
    v17 = type metadata accessor for UnsureInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      swift_release();
    }
    v19 = v10 + v11[12];
    v20 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
    {
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
      swift_release();
    }
    v22 = v10 + v11[13];
    v23 = type metadata accessor for HomePinchInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      v24 = v22 + *(int *)(v23 + 20);
      v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[31]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[35] + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v26 = a1 + a2[36];
  v27 = type metadata accessor for PartialHandMultiCam(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v26 + *(int *)(v27 + 24);
    v30 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  }
  return result;
}

uint64_t initializeWithCopy for HandDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(_QWORD *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(_BYTE *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  char *__dsta;
  _BYTE *__dst;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t);
  int *v182;
  char *v183;
  int *v184;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
  }
  v14 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v15 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v15;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v14)
  {
    v16 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v14;
    *(_QWORD *)(a1 + 208) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  v17 = *(_QWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v18 = a3[17];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  *(_QWORD *)(a1 + 256) = v17;
  v21 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  v184 = a3;
  if (v23(v20, 1, v21))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for UnknownStorage();
    v181 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v181(v19, v20, v25);
    v26 = *(int *)(v21 + 20);
    v27 = &v19[v26];
    v28 = &v20[v26];
    v29 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v32 = *(int *)(v29 + 20);
      __dsta = &v28[v32];
      v179 = &v27[v32];
      swift_bridgeObjectRetain();
      v181(v179, __dsta, v25);
      v33 = *(int *)(v29 + 24);
      v34 = &v27[v33];
      v35 = &v28[v33];
      *(_DWORD *)v34 = *(_DWORD *)v35;
      v34[4] = v35[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    a3 = v184;
  }
  v36 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v37 = a1 + v36;
  v38 = a2 + v36;
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  v39 = a3[20];
  v40 = a3[21];
  v41 = a1 + v39;
  v42 = a2 + v39;
  *(_BYTE *)(v41 + 16) = *(_BYTE *)(v42 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  v43 = a1 + v40;
  v44 = a2 + v40;
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  v45 = a3[22];
  v46 = a3[23];
  v47 = a1 + v45;
  v48 = a2 + v45;
  *(_BYTE *)(v47 + 64) = *(_BYTE *)(v48 + 64);
  v49 = *(_OWORD *)(v48 + 48);
  *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
  *(_OWORD *)(v47 + 48) = v49;
  v50 = *(_OWORD *)(v48 + 16);
  v51 = *(_QWORD *)(a2 + v46);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v50;
  *(_QWORD *)(a1 + v46) = v51;
  v52 = a3[24];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (_QWORD *)(a2 + v52);
  v55 = type metadata accessor for HandDescriptorInternal();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v56 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v57(v54, 1, v55))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v180 = v56;
    v182 = (int *)v55;
    *v53 = *v54;
    *((_BYTE *)v53 + 8) = *((_BYTE *)v54 + 8);
    v59 = v54[6];
    swift_bridgeObjectRetain();
    if (v59)
    {
      v53[2] = v54[2];
      *((_WORD *)v53 + 12) = *((_WORD *)v54 + 12);
      v53[4] = v54[4];
      *((_BYTE *)v53 + 40) = *((_BYTE *)v54 + 40);
      v60 = v54[7];
      v61 = v54[8];
      v53[6] = v59;
      v53[7] = v60;
      v63 = v54[9];
      v62 = v54[10];
      v53[8] = v61;
      v53[9] = v63;
      v53[10] = v62;
      *((_DWORD *)v53 + 22) = *((_DWORD *)v54 + 22);
      v64 = v54[13];
      v53[12] = v54[12];
      v53[13] = v64;
      *((_BYTE *)v53 + 120) = *((_BYTE *)v54 + 120);
      v53[14] = v54[14];
      *(_QWORD *)((char *)v53 + 124) = *(_QWORD *)((char *)v54 + 124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v65 = *((_OWORD *)v54 + 6);
      *((_OWORD *)v53 + 5) = *((_OWORD *)v54 + 5);
      *((_OWORD *)v53 + 6) = v65;
      *((_OWORD *)v53 + 7) = *((_OWORD *)v54 + 7);
      *((_DWORD *)v53 + 32) = *((_DWORD *)v54 + 32);
      v66 = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 1) = *((_OWORD *)v54 + 1);
      *((_OWORD *)v53 + 2) = v66;
      v67 = *((_OWORD *)v54 + 4);
      *((_OWORD *)v53 + 3) = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 4) = v67;
    }
    v53[17] = v54[17];
    v53[18] = v54[18];
    v53[19] = v54[19];
    memcpy(v53 + 20, v54 + 20, 0x373uLL);
    v68 = v182[10];
    __dst = (char *)v53 + v68;
    v69 = (char *)v54 + v68;
    v70 = type metadata accessor for ActionInternalPB(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72(v69, 1, v70))
    {
      v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(__dst, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      *__dst = *v69;
      v74 = *(int *)(v70 + 20);
      v75 = &__dst[v74];
      v76 = &v69[v74];
      v77 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
    }
    v78 = v182[11];
    v79 = (char *)v53 + v78;
    v80 = (char *)v54 + v78;
    v81 = type metadata accessor for UnsureInternalPB(0);
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      v84 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v79, v80, v84);
      *(_QWORD *)&v79[*(int *)(v81 + 20)] = *(_QWORD *)&v80[*(int *)(v81 + 20)];
      v85 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56);
      swift_retain();
      v85(v79, 0, 1, v81);
    }
    v86 = v182[12];
    v87 = (char *)v53 + v86;
    v88 = (char *)v54 + v86;
    v89 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v90 = *(_QWORD *)(v89 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
    {
      v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      v92 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v87, v88, v92);
      *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
      v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
      swift_retain();
      v93(v87, 0, 1, v89);
    }
    v94 = v182[13];
    v95 = (_QWORD *)((char *)v53 + v94);
    v96 = (_QWORD *)((char *)v54 + v94);
    v97 = type metadata accessor for HomePinchInternalPB(0);
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
    {
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      *v95 = *v96;
      v100 = *(int *)(v97 + 20);
      v101 = (char *)v95 + v100;
      v102 = (char *)v96 + v100;
      v103 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v102, v103);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    *(_QWORD *)((char *)v53 + v182[14]) = *(_QWORD *)((char *)v54 + v182[14]);
    v104 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v180 + 56);
    swift_bridgeObjectRetain();
    v104(v53, 0, 1, v182);
    a3 = v184;
  }
  v105 = a3[25];
  v106 = a3[26];
  v107 = a1 + v105;
  v108 = a2 + v105;
  *(_QWORD *)v107 = *(_QWORD *)v108;
  *(_BYTE *)(v107 + 8) = *(_BYTE *)(v108 + 8);
  *(_QWORD *)(a1 + v106) = *(_QWORD *)(a2 + v106);
  v109 = a3[27];
  v110 = a3[28];
  v111 = a1 + v109;
  v112 = a2 + v109;
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  v113 = a1 + v110;
  v114 = a2 + v110;
  v115 = *(_OWORD *)(v114 + 16);
  *(_OWORD *)v113 = *(_OWORD *)v114;
  *(_OWORD *)(v113 + 16) = v115;
  *(_OWORD *)(v113 + 32) = *(_OWORD *)(v114 + 32);
  *(_WORD *)(v113 + 48) = *(_WORD *)(v114 + 48);
  v116 = a3[30];
  *(_QWORD *)(a1 + a3[29]) = *(_QWORD *)(a2 + a3[29]);
  v117 = a1 + v116;
  v118 = a2 + v116;
  *(_QWORD *)v117 = *(_QWORD *)v118;
  *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
  v119 = a3[31];
  v120 = (_QWORD *)(a1 + v119);
  v121 = a2 + v119;
  v122 = *(_QWORD *)(a2 + v119);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v122)
  {
    v123 = *(_QWORD *)(v121 + 8);
    v124 = *(_QWORD *)(v121 + 16);
    *v120 = v122;
    v120[1] = v123;
    v125 = *(_QWORD *)(v121 + 24);
    v126 = *(_QWORD *)(v121 + 32);
    v120[2] = v124;
    v120[3] = v125;
    v127 = *(_QWORD *)(v121 + 40);
    v128 = *(_QWORD *)(v121 + 48);
    v120[4] = v126;
    v120[5] = v127;
    v120[6] = v128;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v184;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v129 = *(_OWORD *)(v121 + 16);
    *(_OWORD *)v120 = *(_OWORD *)v121;
    *((_OWORD *)v120 + 1) = v129;
    *((_OWORD *)v120 + 2) = *(_OWORD *)(v121 + 32);
    v120[6] = *(_QWORD *)(v121 + 48);
  }
  v130 = a3[32];
  v131 = a3[33];
  v132 = a1 + v130;
  v133 = a2 + v130;
  *(_QWORD *)(v132 + 62) = *(_QWORD *)(v133 + 62);
  v134 = *(_OWORD *)(v133 + 48);
  *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
  *(_OWORD *)(v132 + 48) = v134;
  v135 = *(_OWORD *)(v133 + 16);
  *(_OWORD *)v132 = *(_OWORD *)v133;
  *(_OWORD *)(v132 + 16) = v135;
  v136 = a1 + v131;
  v137 = a2 + v131;
  *(_QWORD *)v136 = *(_QWORD *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  v138 = a3[34];
  v139 = a3[35];
  v140 = a1 + v138;
  v141 = a2 + v138;
  *(_DWORD *)v140 = *(_DWORD *)v141;
  *(_QWORD *)(v140 + 8) = *(_QWORD *)(v141 + 8);
  v142 = a1 + v139;
  v143 = a2 + v139;
  v144 = *(_OWORD *)(a2 + v139 + 48);
  *(_OWORD *)(v142 + 32) = *(_OWORD *)(a2 + v139 + 32);
  *(_OWORD *)(v142 + 48) = v144;
  *(_DWORD *)(v142 + 64) = *(_DWORD *)(a2 + v139 + 64);
  v145 = *(_OWORD *)(a2 + v139 + 16);
  *(_OWORD *)v142 = *(_OWORD *)(a2 + v139);
  *(_OWORD *)(v142 + 16) = v145;
  v146 = *(_OWORD *)(a2 + v139 + 96);
  *(_OWORD *)(v142 + 80) = *(_OWORD *)(a2 + v139 + 80);
  *(_OWORD *)(v142 + 96) = v146;
  v147 = *(_OWORD *)(a2 + v139 + 128);
  *(_OWORD *)(v142 + 112) = *(_OWORD *)(a2 + v139 + 112);
  *(_OWORD *)(v142 + 128) = v147;
  v148 = a2 + v139 + 144;
  v149 = *(_QWORD *)v148;
  swift_bridgeObjectRetain();
  if (v149)
  {
    v150 = *(_QWORD *)(v143 + 152);
    *(_QWORD *)(v142 + 144) = v149;
    *(_QWORD *)(v142 + 152) = v150;
    v151 = *(_OWORD *)(v143 + 176);
    *(_OWORD *)(v142 + 160) = *(_OWORD *)(v143 + 160);
    *(_OWORD *)(v142 + 176) = v151;
    v152 = *(_OWORD *)(v143 + 208);
    *(_OWORD *)(v142 + 192) = *(_OWORD *)(v143 + 192);
    *(_OWORD *)(v142 + 208) = v152;
    v153 = *(_OWORD *)(v143 + 240);
    *(_OWORD *)(v142 + 224) = *(_OWORD *)(v143 + 224);
    *(_OWORD *)(v142 + 240) = v153;
    *(_BYTE *)(v142 + 256) = *(_BYTE *)(v143 + 256);
    *(_BYTE *)(v142 + 257) = *(_BYTE *)(v143 + 257);
    *(_DWORD *)(v142 + 260) = *(_DWORD *)(v143 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v154 = *(_OWORD *)(v148 + 80);
    *(_OWORD *)(v142 + 208) = *(_OWORD *)(v148 + 64);
    *(_OWORD *)(v142 + 224) = v154;
    *(_OWORD *)(v142 + 240) = *(_OWORD *)(v148 + 96);
    *(_QWORD *)(v142 + 256) = *(_QWORD *)(v148 + 112);
    v155 = *(_OWORD *)(v148 + 16);
    *(_OWORD *)(v142 + 144) = *(_OWORD *)v148;
    *(_OWORD *)(v142 + 160) = v155;
    v156 = *(_OWORD *)(v148 + 48);
    *(_OWORD *)(v142 + 176) = *(_OWORD *)(v148 + 32);
    *(_OWORD *)(v142 + 192) = v156;
  }
  v157 = *(_QWORD *)(v143 + 272);
  *(_QWORD *)(v142 + 264) = *(_QWORD *)(v143 + 264);
  *(_QWORD *)(v142 + 272) = v157;
  v158 = a3[36];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = type metadata accessor for PartialHandMultiCam(0);
  v162 = *(_QWORD *)(v161 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
  {
    v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
  }
  else
  {
    v164 = v160[1];
    *v159 = *v160;
    v159[1] = v164;
    v165 = *(int *)(v161 + 24);
    v183 = (char *)v159 + v165;
    v166 = (char *)v160 + v165;
    v167 = type metadata accessor for UnknownStorage();
    v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v168(v183, v166, v167);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
  }
  v169 = v184[37];
  v170 = v184[38];
  v171 = a1 + v169;
  v172 = a2 + v169;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
  v173 = a1 + v170;
  v174 = a2 + v170;
  v175 = *(_OWORD *)(v174 + 16);
  *(_OWORD *)v173 = *(_OWORD *)v174;
  *(_OWORD *)(v173 + 16) = v175;
  *(_OWORD *)(v173 + 32) = *(_OWORD *)(v174 + 32);
  *(_QWORD *)(v173 + 45) = *(_QWORD *)(v174 + 45);
  return a1;
}

uint64_t assignWithCopy for HandDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(_BYTE *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(_BYTE *, uint64_t, uint64_t);
  int v178;
  int v179;
  uint64_t v180;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(char *, uint64_t, uint64_t);
  int v191;
  int v192;
  uint64_t v193;
  void (*v194)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (*v201)(char *, uint64_t, uint64_t);
  int v202;
  int v203;
  uint64_t v204;
  void (*v205)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(_QWORD *, uint64_t, uint64_t);
  int v213;
  int v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __int128 *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  __int128 *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t (*v285)(_QWORD *, uint64_t, uint64_t);
  int v286;
  int v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  void (*v291)(char *, char *, uint64_t);
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  char *__dsta;
  _BYTE *__dst;
  char *v321;
  uint64_t v322;
  void (*v323)(uint64_t, char *, uint64_t);
  uint64_t v324;
  int *v325;
  int *v326;
  char *v327;
  int *v328;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  v9 = (__int128 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    }
    else
    {
      outlined destroy of HandPose(v6);
      v14 = v9[3];
      v16 = *v9;
      v15 = v9[1];
      *(_OWORD *)(v6 + 32) = v9[2];
      *(_OWORD *)(v6 + 48) = v14;
      *(_OWORD *)v6 = v16;
      *(_OWORD *)(v6 + 16) = v15;
      v18 = v9[5];
      v17 = v9[6];
      v19 = v9[4];
      *(_QWORD *)(v6 + 112) = *((_QWORD *)v9 + 14);
      *(_OWORD *)(v6 + 80) = v18;
      *(_OWORD *)(v6 + 96) = v17;
      *(_OWORD *)(v6 + 64) = v19;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    v11 = *(_OWORD *)(a2 + 64);
    v12 = *(_OWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *v9;
    v21 = *(_OWORD *)(a2 + 32);
    v22 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v6 + 48) = v22;
    *(_OWORD *)v6 = v20;
    *(_OWORD *)(v6 + 16) = v21;
    v23 = *(_OWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 96);
    v25 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v6 + 112) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v6 + 80) = v24;
    *(_OWORD *)(v6 + 96) = v25;
    *(_OWORD *)(v6 + 64) = v23;
  }
  v26 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v27 = *(_OWORD *)(a2 + 160);
  v28 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v28;
  *(_OWORD *)(a1 + 160) = v27;
  v29 = *(_QWORD *)(a2 + 200);
  if (v26)
  {
    if (v29)
    {
      *(_QWORD *)(a1 + 200) = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 200) = v29;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_15:
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v30 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v30;
  v31 = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v31;
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v32;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  v33 = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v33;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v34 = a3[17];
  v35 = a1 + v34;
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39((uint64_t)v36, 1, v37);
  v328 = a3;
  if (!v40)
  {
    if (!v41)
    {
      v52 = type metadata accessor for UnknownStorage();
      v324 = *(_QWORD *)(v52 - 8);
      v53 = *(void (**)(uint64_t, char *, uint64_t))(v324 + 24);
      v53(v35, v36, v52);
      v54 = *(int *)(v37 + 20);
      v55 = (char *)(v35 + v54);
      v56 = &v36[v54];
      v57 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
      v60 = v59(v55, 1, v57);
      v61 = v59(v56, 1, v57);
      if (v60)
      {
        a3 = v328;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          v62 = *(int *)(v57 + 20);
          v63 = &v55[v62];
          v64 = &v56[v62];
          v65 = *(void (**)(char *, char *, uint64_t))(v324 + 16);
          swift_bridgeObjectRetain();
          v66 = v64;
          a3 = v328;
          v65(v63, v66, v52);
          v67 = *(int *)(v57 + 24);
          v68 = &v55[v67];
          v69 = &v56[v67];
          v70 = v69[4];
          *(_DWORD *)v68 = *(_DWORD *)v69;
          v68[4] = v70;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          goto LABEL_28;
        }
      }
      else
      {
        a3 = v328;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v53((uint64_t)&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v52);
          v162 = *(int *)(v57 + 24);
          v163 = &v55[v162];
          v164 = &v56[v162];
          v165 = v164[4];
          *(_DWORD *)v163 = *(_DWORD *)v164;
          v163[4] = v165;
          goto LABEL_28;
        }
        outlined destroy of Matrix3x3PB((uint64_t)v55, type metadata accessor for RawThumbIndexTapFeaturesPB);
      }
      v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?)
                                  - 8)
                      + 64);
      v50 = v55;
      v51 = v56;
LABEL_22:
      memcpy(v50, v51, v49);
      goto LABEL_28;
    }
    outlined destroy of Matrix3x3PB(v35, type metadata accessor for ThumbIndexTapFeaturesPB);
LABEL_21:
    v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?)
                                - 8)
                    + 64);
    v50 = (void *)v35;
    v51 = v36;
    goto LABEL_22;
  }
  if (v41)
    goto LABEL_21;
  v42 = type metadata accessor for UnknownStorage();
  v323 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
  v323(v35, v36, v42);
  v43 = *(int *)(v37 + 20);
  v44 = (_QWORD *)(v35 + v43);
  v45 = &v36[v43];
  v46 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    *v44 = *(_QWORD *)v45;
    v71 = *(int *)(v46 + 20);
    __dsta = &v45[v71];
    v321 = (char *)v44 + v71;
    swift_bridgeObjectRetain();
    v323((uint64_t)v321, __dsta, v42);
    v72 = *(int *)(v46 + 24);
    v73 = (char *)v44 + v72;
    v74 = &v45[v72];
    v75 = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v73[4] = v75;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  a3 = v328;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_28:
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = a3[19];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *v78;
  *(_BYTE *)(v77 + 16) = *((_BYTE *)v78 + 16);
  *(_OWORD *)v77 = v79;
  v80 = a3[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_BYTE *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_BYTE *)(v81 + 16) = v83;
  v84 = a3[21];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = *(_BYTE *)(v86 + 16);
  *(_OWORD *)v85 = *(_OWORD *)v86;
  *(_BYTE *)(v85 + 16) = v87;
  v88 = a3[22];
  v89 = a1 + v88;
  v90 = a2 + v88;
  *(_OWORD *)v89 = *(_OWORD *)v90;
  v91 = *(_OWORD *)(v90 + 16);
  v92 = *(_OWORD *)(v90 + 32);
  v93 = *(_OWORD *)(v90 + 48);
  *(_BYTE *)(v89 + 64) = *(_BYTE *)(v90 + 64);
  *(_OWORD *)(v89 + 32) = v92;
  *(_OWORD *)(v89 + 48) = v93;
  *(_OWORD *)(v89 + 16) = v91;
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = a3[24];
  v95 = a1 + v94;
  v96 = a2 + v94;
  v97 = type metadata accessor for HandDescriptorInternal();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (v101)
    {
      outlined destroy of Matrix3x3PB(v95, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v95 = *(_QWORD *)v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
    v106 = (_OWORD *)(v95 + 16);
    v107 = (__int128 *)(v96 + 16);
    v108 = *(_QWORD *)(v96 + 48);
    if (*(_QWORD *)(v95 + 48))
    {
      if (v108)
      {
        *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
        *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
        *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
        *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
        v109 = *(_QWORD *)(v96 + 32);
        *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
        *(_QWORD *)(v95 + 32) = v109;
        *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
        *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
        *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v110 = *(_QWORD *)(v96 + 112);
        *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
        *(_QWORD *)(v95 + 112) = v110;
        *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      }
      else
      {
        outlined destroy of PinchInternalData(v95 + 16);
        v156 = *(_OWORD *)(v96 + 64);
        v158 = *v107;
        v157 = *(_OWORD *)(v96 + 32);
        *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
        *(_OWORD *)(v95 + 64) = v156;
        *v106 = v158;
        *(_OWORD *)(v95 + 32) = v157;
        v160 = *(_OWORD *)(v96 + 96);
        v159 = *(_OWORD *)(v96 + 112);
        v161 = *(_OWORD *)(v96 + 80);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
        *(_OWORD *)(v95 + 96) = v160;
        *(_OWORD *)(v95 + 112) = v159;
        *(_OWORD *)(v95 + 80) = v161;
      }
    }
    else if (v108)
    {
      *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
      *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
      *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
      *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
      v154 = *(_QWORD *)(v96 + 32);
      *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
      *(_QWORD *)(v95 + 32) = v154;
      *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
      *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
      *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
      *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
      *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
      *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
      *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
      *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
      v155 = *(_QWORD *)(v96 + 112);
      *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
      *(_QWORD *)(v95 + 112) = v155;
      *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v166 = *v107;
      v167 = *(_OWORD *)(v96 + 32);
      v168 = *(_OWORD *)(v96 + 64);
      *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
      *(_OWORD *)(v95 + 64) = v168;
      *v106 = v166;
      *(_OWORD *)(v95 + 32) = v167;
      v169 = *(_OWORD *)(v96 + 80);
      v170 = *(_OWORD *)(v96 + 96);
      v171 = *(_OWORD *)(v96 + 112);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      *(_OWORD *)(v95 + 96) = v170;
      *(_OWORD *)(v95 + 112) = v171;
      *(_OWORD *)(v95 + 80) = v169;
    }
    *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
    *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
    *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
    v326 = (int *)v97;
    v172 = *(int *)(v97 + 40);
    v173 = (_BYTE *)(v95 + v172);
    v174 = (_BYTE *)(v96 + v172);
    v175 = type metadata accessor for ActionInternalPB(0);
    v176 = *(_QWORD *)(v175 - 8);
    v177 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v176 + 48);
    v178 = v177(v173, 1, v175);
    v179 = v177(v174, 1, v175);
    if (v178)
    {
      if (!v179)
      {
        *v173 = *v174;
        v180 = *(int *)(v175 + 20);
        v181 = &v173[v180];
        v182 = &v174[v180];
        v183 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v181, v182, v183);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v179)
      {
        *v173 = *v174;
        v309 = *(int *)(v175 + 20);
        v310 = &v173[v309];
        v311 = &v174[v309];
        v312 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v312 - 8) + 24))(v310, v311, v312);
LABEL_66:
        v185 = v326[11];
        v186 = (char *)(v95 + v185);
        v187 = (char *)(v96 + v185);
        v188 = type metadata accessor for UnsureInternalPB(0);
        v189 = *(_QWORD *)(v188 - 8);
        v190 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 48);
        v191 = v190(v186, 1, v188);
        v192 = v190(v187, 1, v188);
        if (v191)
        {
          if (!v192)
          {
            v193 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v186, v187, v193);
            *(_QWORD *)&v186[*(int *)(v188 + 20)] = *(_QWORD *)&v187[*(int *)(v188 + 20)];
            v194 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56);
            swift_retain();
            v194(v186, 0, 1, v188);
            goto LABEL_72;
          }
        }
        else
        {
          if (!v192)
          {
            v313 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v313 - 8) + 24))(v186, v187, v313);
            *(_QWORD *)&v186[*(int *)(v188 + 20)] = *(_QWORD *)&v187[*(int *)(v188 + 20)];
            swift_retain();
            swift_release();
LABEL_72:
            v196 = v326[12];
            v197 = (char *)(v95 + v196);
            v198 = (char *)(v96 + v196);
            v199 = type metadata accessor for ObjectInteractionStateInternalPB(0);
            v200 = *(_QWORD *)(v199 - 8);
            v201 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v200 + 48);
            v202 = v201(v197, 1, v199);
            v203 = v201(v198, 1, v199);
            if (v202)
            {
              if (!v203)
              {
                v204 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(v197, v198, v204);
                *(_QWORD *)&v197[*(int *)(v199 + 20)] = *(_QWORD *)&v198[*(int *)(v199 + 20)];
                v205 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v200 + 56);
                swift_retain();
                v205(v197, 0, 1, v199);
                goto LABEL_78;
              }
            }
            else
            {
              if (!v203)
              {
                v314 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v314 - 8) + 24))(v197, v198, v314);
                *(_QWORD *)&v197[*(int *)(v199 + 20)] = *(_QWORD *)&v198[*(int *)(v199 + 20)];
                swift_retain();
                swift_release();
LABEL_78:
                v207 = v326[13];
                v208 = (_QWORD *)(v95 + v207);
                v209 = (_QWORD *)(v96 + v207);
                v210 = type metadata accessor for HomePinchInternalPB(0);
                v211 = *(_QWORD *)(v210 - 8);
                v212 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v211 + 48);
                v213 = v212(v208, 1, v210);
                v214 = v212(v209, 1, v210);
                if (v213)
                {
                  if (!v214)
                  {
                    *v208 = *v209;
                    v215 = *(int *)(v210 + 20);
                    v216 = (char *)v208 + v215;
                    v217 = (char *)v209 + v215;
                    v218 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
                    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v208, 0, 1, v210);
LABEL_84:
                    a3 = v328;
                    *(_QWORD *)(v95 + v326[14]) = *(_QWORD *)(v96 + v326[14]);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_85;
                  }
                }
                else
                {
                  if (!v214)
                  {
                    *v208 = *v209;
                    v315 = *(int *)(v210 + 20);
                    v316 = (char *)v208 + v315;
                    v317 = (char *)v209 + v315;
                    v318 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v318 - 8) + 24))(v316, v317, v318);
                    goto LABEL_84;
                  }
                  outlined destroy of Matrix3x3PB((uint64_t)v208, type metadata accessor for HomePinchInternalPB);
                }
                v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
                memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
                goto LABEL_84;
              }
              outlined destroy of Matrix3x3PB((uint64_t)v197, type metadata accessor for ObjectInteractionStateInternalPB);
            }
            v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
            memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
            goto LABEL_78;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v186, type metadata accessor for UnsureInternalPB);
        }
        v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
        goto LABEL_72;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v173, type metadata accessor for ActionInternalPB);
    }
    v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
    goto LABEL_66;
  }
  if (v101)
  {
LABEL_34:
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v95, (const void *)v96, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_85;
  }
  v322 = v98;
  v325 = (int *)v97;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  v102 = *(_QWORD *)(v96 + 48);
  swift_bridgeObjectRetain();
  if (v102)
  {
    *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
    *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
    *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
    *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
    v103 = *(_QWORD *)(v96 + 32);
    *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
    *(_QWORD *)(v95 + 32) = v103;
    *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
    *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
    *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
    *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
    *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
    *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
    *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
    *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
    v104 = *(_QWORD *)(v96 + 112);
    *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
    *(_QWORD *)(v95 + 112) = v104;
    *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v111 = *(_OWORD *)(v96 + 16);
    v112 = *(_OWORD *)(v96 + 32);
    v113 = *(_OWORD *)(v96 + 64);
    *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
    *(_OWORD *)(v95 + 64) = v113;
    *(_OWORD *)(v95 + 16) = v111;
    *(_OWORD *)(v95 + 32) = v112;
    v114 = *(_OWORD *)(v96 + 80);
    v115 = *(_OWORD *)(v96 + 96);
    v116 = *(_OWORD *)(v96 + 112);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    *(_OWORD *)(v95 + 96) = v115;
    *(_OWORD *)(v95 + 112) = v116;
    *(_OWORD *)(v95 + 80) = v114;
  }
  *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
  *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
  *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
  *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
  memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
  v117 = *(int *)(v97 + 40);
  __dst = (_BYTE *)(v95 + v117);
  v118 = (_BYTE *)(v96 + v117);
  v119 = type metadata accessor for ActionInternalPB(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v121(v118, 1, v119))
  {
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(__dst, v118, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    *__dst = *v118;
    v123 = *(int *)(v119 + 20);
    v124 = &__dst[v123];
    v125 = &v118[v123];
    v126 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v120 + 56))(__dst, 0, 1, v119);
  }
  v127 = v325[11];
  v128 = (char *)(v95 + v127);
  v129 = (char *)(v96 + v127);
  v130 = type metadata accessor for UnsureInternalPB(0);
  v131 = *(_QWORD *)(v130 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
  {
    v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
  }
  else
  {
    v133 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v128, v129, v133);
    *(_QWORD *)&v128[*(int *)(v130 + 20)] = *(_QWORD *)&v129[*(int *)(v130 + 20)];
    v134 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56);
    swift_retain();
    v134(v128, 0, 1, v130);
  }
  v135 = v325[12];
  v136 = (char *)(v95 + v135);
  v137 = (char *)(v96 + v135);
  v138 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v139 = *(_QWORD *)(v138 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
  {
    v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
  }
  else
  {
    v141 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v136, v137, v141);
    *(_QWORD *)&v136[*(int *)(v138 + 20)] = *(_QWORD *)&v137[*(int *)(v138 + 20)];
    v142 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56);
    swift_retain();
    v142(v136, 0, 1, v138);
  }
  v143 = v325[13];
  v144 = (_QWORD *)(v95 + v143);
  v145 = (_QWORD *)(v96 + v143);
  v146 = type metadata accessor for HomePinchInternalPB(0);
  v147 = *(_QWORD *)(v146 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
  {
    v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
  }
  else
  {
    *v144 = *v145;
    v149 = *(int *)(v146 + 20);
    v150 = (char *)v144 + v149;
    v151 = (char *)v145 + v149;
    v152 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
  }
  *(_QWORD *)(v95 + v325[14]) = *(_QWORD *)(v96 + v325[14]);
  v153 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v322 + 56);
  swift_bridgeObjectRetain();
  v153(v95, 0, 1, v325);
  a3 = v328;
LABEL_85:
  v220 = a3[25];
  v221 = a1 + v220;
  v222 = (uint64_t *)(a2 + v220);
  v223 = *v222;
  *(_BYTE *)(v221 + 8) = *((_BYTE *)v222 + 8);
  *(_QWORD *)v221 = v223;
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v224 = a3[27];
  v225 = a1 + v224;
  v226 = (uint64_t *)(a2 + v224);
  v227 = *v226;
  *(_BYTE *)(v225 + 8) = *((_BYTE *)v226 + 8);
  *(_QWORD *)v225 = v227;
  v228 = a3[28];
  v229 = a1 + v228;
  v230 = (__int128 *)(a2 + v228);
  v232 = v230[1];
  v231 = v230[2];
  v233 = *v230;
  *(_WORD *)(v229 + 48) = *((_WORD *)v230 + 24);
  *(_OWORD *)(v229 + 16) = v232;
  *(_OWORD *)(v229 + 32) = v231;
  *(_OWORD *)v229 = v233;
  *(_QWORD *)(a1 + a3[29]) = *(_QWORD *)(a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v234 = a3[30];
  v235 = a1 + v234;
  v236 = (uint64_t *)(a2 + v234);
  v237 = *v236;
  *(_BYTE *)(v235 + 8) = *((_BYTE *)v236 + 8);
  *(_QWORD *)v235 = v237;
  v238 = a3[31];
  v239 = (_QWORD *)(a1 + v238);
  v240 = (__int128 *)(a2 + v238);
  v241 = *(_QWORD *)(a2 + v238);
  if (*(_QWORD *)(a1 + v238))
  {
    if (v241)
    {
      *v239 = v241;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[1] = *((_QWORD *)v240 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[2] = *((_QWORD *)v240 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[3] = *((_QWORD *)v240 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[4] = *((_QWORD *)v240 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[5] = *((_QWORD *)v240 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239[6] = *((_QWORD *)v240 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ObjectInteractionData(a1 + v238);
      v243 = v240[1];
      v242 = v240[2];
      v244 = *v240;
      v239[6] = *((_QWORD *)v240 + 6);
      *((_OWORD *)v239 + 1) = v243;
      *((_OWORD *)v239 + 2) = v242;
      *(_OWORD *)v239 = v244;
    }
  }
  else if (v241)
  {
    *v239 = v241;
    v239[1] = *((_QWORD *)v240 + 1);
    v239[2] = *((_QWORD *)v240 + 2);
    v239[3] = *((_QWORD *)v240 + 3);
    v239[4] = *((_QWORD *)v240 + 4);
    v239[5] = *((_QWORD *)v240 + 5);
    v239[6] = *((_QWORD *)v240 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v328;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v245 = *v240;
    v246 = v240[1];
    v247 = v240[2];
    v239[6] = *((_QWORD *)v240 + 6);
    *((_OWORD *)v239 + 1) = v246;
    *((_OWORD *)v239 + 2) = v247;
    *(_OWORD *)v239 = v245;
  }
  v248 = a3[32];
  v249 = a1 + v248;
  v250 = a2 + v248;
  *(_QWORD *)v249 = *(_QWORD *)v250;
  *(_DWORD *)(v249 + 8) = *(_DWORD *)(v250 + 8);
  *(_DWORD *)(v249 + 12) = *(_DWORD *)(v250 + 12);
  *(_QWORD *)(v249 + 16) = *(_QWORD *)(v250 + 16);
  *(_OWORD *)(v249 + 32) = *(_OWORD *)(v250 + 32);
  *(_QWORD *)(v249 + 48) = *(_QWORD *)(v250 + 48);
  *(_BYTE *)(v249 + 56) = *(_BYTE *)(v250 + 56);
  *(_DWORD *)(v249 + 60) = *(_DWORD *)(v250 + 60);
  *(_DWORD *)(v249 + 64) = *(_DWORD *)(v250 + 64);
  *(_BYTE *)(v249 + 68) = *(_BYTE *)(v250 + 68);
  *(_BYTE *)(v249 + 69) = *(_BYTE *)(v250 + 69);
  v251 = a3[33];
  v252 = a1 + v251;
  v253 = (uint64_t *)(a2 + v251);
  v254 = *v253;
  *(_BYTE *)(v252 + 8) = *((_BYTE *)v253 + 8);
  *(_QWORD *)v252 = v254;
  v255 = a3[34];
  v256 = a1 + v255;
  v257 = a2 + v255;
  *(_DWORD *)v256 = *(_DWORD *)v257;
  *(_QWORD *)(v256 + 8) = *(_QWORD *)(v257 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v258 = a3[35];
  v259 = a1 + v258;
  v260 = a2 + v258;
  *(_OWORD *)v259 = *(_OWORD *)(a2 + v258);
  *(_OWORD *)(v259 + 16) = *(_OWORD *)(a2 + v258 + 16);
  *(_OWORD *)(v259 + 32) = *(_OWORD *)(a2 + v258 + 32);
  *(_OWORD *)(v259 + 48) = *(_OWORD *)(a2 + v258 + 48);
  *(_DWORD *)(v259 + 64) = *(_DWORD *)(a2 + v258 + 64);
  *(_OWORD *)(v259 + 80) = *(_OWORD *)(a2 + v258 + 80);
  *(_OWORD *)(v259 + 96) = *(_OWORD *)(a2 + v258 + 96);
  *(_OWORD *)(v259 + 112) = *(_OWORD *)(a2 + v258 + 112);
  *(_OWORD *)(v259 + 128) = *(_OWORD *)(a2 + v258 + 128);
  v261 = a1 + v258 + 144;
  v263 = a2 + v258 + 144;
  v262 = *(_QWORD *)v263;
  if (*(_QWORD *)v261)
  {
    if (v262)
    {
      *(_QWORD *)(v259 + 144) = v262;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v259 + 152) = *(_QWORD *)(v260 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(v259 + 160) = *(_OWORD *)(v260 + 160);
      *(_OWORD *)(v259 + 176) = *(_OWORD *)(v260 + 176);
      *(_OWORD *)(v259 + 192) = *(_OWORD *)(v260 + 192);
      *(_OWORD *)(v259 + 208) = *(_OWORD *)(v260 + 208);
      *(_OWORD *)(v259 + 224) = *(_OWORD *)(v260 + 224);
      *(_OWORD *)(v259 + 240) = *(_OWORD *)(v260 + 240);
      *(_BYTE *)(v259 + 256) = *(_BYTE *)(v260 + 256);
      *(_BYTE *)(v259 + 257) = *(_BYTE *)(v260 + 257);
      *(_DWORD *)(v259 + 260) = *(_DWORD *)(v260 + 260);
    }
    else
    {
      outlined destroy of HandPose(a1 + v258 + 144);
      v268 = *(_OWORD *)(v263 + 48);
      v270 = *(_OWORD *)v263;
      v269 = *(_OWORD *)(v263 + 16);
      *(_OWORD *)(v261 + 32) = *(_OWORD *)(v263 + 32);
      *(_OWORD *)(v261 + 48) = v268;
      *(_OWORD *)v261 = v270;
      *(_OWORD *)(v261 + 16) = v269;
      v272 = *(_OWORD *)(v263 + 80);
      v271 = *(_OWORD *)(v263 + 96);
      v273 = *(_OWORD *)(v263 + 64);
      *(_QWORD *)(v261 + 112) = *(_QWORD *)(v263 + 112);
      *(_OWORD *)(v261 + 80) = v272;
      *(_OWORD *)(v261 + 96) = v271;
      *(_OWORD *)(v261 + 64) = v273;
    }
  }
  else if (v262)
  {
    *(_QWORD *)(v259 + 144) = v262;
    *(_QWORD *)(v259 + 152) = *(_QWORD *)(v260 + 152);
    v264 = *(_OWORD *)(v260 + 176);
    *(_OWORD *)(v259 + 160) = *(_OWORD *)(v260 + 160);
    *(_OWORD *)(v259 + 176) = v264;
    v265 = *(_OWORD *)(v260 + 192);
    v266 = *(_OWORD *)(v260 + 208);
    v267 = *(_OWORD *)(v260 + 240);
    *(_OWORD *)(v259 + 224) = *(_OWORD *)(v260 + 224);
    *(_OWORD *)(v259 + 240) = v267;
    *(_OWORD *)(v259 + 192) = v265;
    *(_OWORD *)(v259 + 208) = v266;
    *(_BYTE *)(v259 + 256) = *(_BYTE *)(v260 + 256);
    *(_BYTE *)(v259 + 257) = *(_BYTE *)(v260 + 257);
    *(_DWORD *)(v259 + 260) = *(_DWORD *)(v260 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v274 = *(_OWORD *)v263;
    v275 = *(_OWORD *)(a2 + v258 + 160);
    v276 = *(_OWORD *)(a2 + v258 + 192);
    *(_OWORD *)(a1 + v258 + 176) = *(_OWORD *)(a2 + v258 + 176);
    *(_OWORD *)(a1 + v258 + 192) = v276;
    *(_OWORD *)v261 = v274;
    *(_OWORD *)(a1 + v258 + 160) = v275;
    v277 = *(_OWORD *)(a2 + v258 + 208);
    v278 = *(_OWORD *)(a2 + v258 + 224);
    v279 = *(_OWORD *)(a2 + v258 + 240);
    *(_QWORD *)(a1 + v258 + 256) = *(_QWORD *)(a2 + v258 + 256);
    *(_OWORD *)(a1 + v258 + 224) = v278;
    *(_OWORD *)(a1 + v258 + 240) = v279;
    *(_OWORD *)(a1 + v258 + 208) = v277;
  }
  *(_QWORD *)(v259 + 264) = *(_QWORD *)(v260 + 264);
  *(_QWORD *)(v259 + 272) = *(_QWORD *)(v260 + 272);
  v280 = a3[36];
  v281 = (_QWORD *)(a1 + v280);
  v282 = (_QWORD *)(a2 + v280);
  v283 = type metadata accessor for PartialHandMultiCam(0);
  v284 = *(_QWORD *)(v283 - 8);
  v285 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v284 + 48);
  v286 = v285(v281, 1, v283);
  v287 = v285(v282, 1, v283);
  if (!v286)
  {
    if (!v287)
    {
      *v281 = *v282;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v281[1] = v282[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v305 = *(int *)(v283 + 24);
      v306 = (char *)v281 + v305;
      v307 = (char *)v282 + v305;
      v308 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v308 - 8) + 24))(v306, v307, v308);
      goto LABEL_105;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v281, type metadata accessor for PartialHandMultiCam);
    goto LABEL_104;
  }
  if (v287)
  {
LABEL_104:
    v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
    goto LABEL_105;
  }
  *v281 = *v282;
  v281[1] = v282[1];
  v288 = *(int *)(v283 + 24);
  v289 = (char *)v281 + v288;
  v327 = (char *)v282 + v288;
  v290 = type metadata accessor for UnknownStorage();
  v291 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v290 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v292 = v289;
  a3 = v328;
  v291(v292, v327, v290);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
LABEL_105:
  v294 = a3[37];
  v295 = a1 + v294;
  v296 = a2 + v294;
  *(_BYTE *)v295 = *(_BYTE *)v296;
  v297 = *(_DWORD *)(v296 + 4);
  *(_BYTE *)(v295 + 8) = *(_BYTE *)(v296 + 8);
  *(_DWORD *)(v295 + 4) = v297;
  v298 = a3[38];
  v299 = a1 + v298;
  v300 = a2 + v298;
  *(_BYTE *)v299 = *(_BYTE *)v300;
  *(_BYTE *)(v299 + 1) = *(_BYTE *)(v300 + 1);
  *(_BYTE *)(v299 + 2) = *(_BYTE *)(v300 + 2);
  *(_BYTE *)(v299 + 3) = *(_BYTE *)(v300 + 3);
  v301 = *(_QWORD *)(v300 + 8);
  *(_BYTE *)(v299 + 16) = *(_BYTE *)(v300 + 16);
  *(_QWORD *)(v299 + 8) = v301;
  v302 = *(_QWORD *)(v300 + 24);
  *(_BYTE *)(v299 + 32) = *(_BYTE *)(v300 + 32);
  *(_QWORD *)(v299 + 24) = v302;
  v303 = *(_QWORD *)(v300 + 40);
  *(_BYTE *)(v299 + 48) = *(_BYTE *)(v300 + 48);
  *(_QWORD *)(v299 + 40) = v303;
  *(_BYTE *)(v299 + 49) = *(_BYTE *)(v300 + 49);
  *(_BYTE *)(v299 + 50) = *(_BYTE *)(v300 + 50);
  *(_BYTE *)(v299 + 51) = *(_BYTE *)(v300 + 51);
  *(_BYTE *)(v299 + 52) = *(_BYTE *)(v300 + 52);
  return a1;
}

uint64_t outlined destroy of PoseSpec(uint64_t a1)
{
  destroy for GenericAccidental.InternalStates();
  return a1;
}

uint64_t outlined destroy of ObjectInteractionData(uint64_t a1)
{
  destroy for ObjectInteractionData();
  return a1;
}

uint64_t initializeWithTake for HandDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int *v48;
  unsigned int (**v49)(_QWORD *, uint64_t, int *);
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v135;
  _BYTE *v136;
  char *v137;
  char *__dst;
  void *__dsta;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 232);
  v11 = *(_OWORD *)(a2 + 248);
  v12 = *(_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v13 = a3[17];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  *(_OWORD *)(a1 + 232) = v10;
  v16 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for UnknownStorage();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    v20(v14, v15, v19);
    v21 = *(int *)(v16 + 20);
    __dst = &v14[v21];
    v22 = &v15[v21];
    v23 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v135 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v22, 1, v23))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v22;
      v20(&__dst[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v19);
      v25 = *(int *)(v23 + 24);
      v26 = &__dst[v25];
      v27 = &v22[v25];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(__dst, 0, 1, v23);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v28 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v31 = a3[20];
  v32 = a3[21];
  v33 = a1 + v31;
  v34 = a2 + v31;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  v35 = a1 + v32;
  v36 = a2 + v32;
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_BYTE *)(v35 + 16) = *(_BYTE *)(v36 + 16);
  v37 = a3[22];
  v38 = a3[23];
  v39 = a1 + v37;
  v40 = (__int128 *)(a2 + v37);
  *(_BYTE *)(v39 + 64) = *((_BYTE *)v40 + 64);
  v41 = v40[3];
  *(_OWORD *)(v39 + 32) = v40[2];
  *(_OWORD *)(v39 + 48) = v41;
  v43 = *v40;
  v42 = v40[1];
  v44 = *(_QWORD *)(a2 + v38);
  *(_OWORD *)v39 = v43;
  *(_OWORD *)(v39 + 16) = v42;
  *(_QWORD *)(a1 + v38) = v44;
  v45 = a3[24];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  v48 = (int *)type metadata accessor for HandDescriptorInternal();
  v49 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v48 - 1);
  if (v49[6](v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    __dsta = v49;
    *v46 = *v47;
    *((_BYTE *)v46 + 8) = *((_BYTE *)v47 + 8);
    v51 = *((_OWORD *)v47 + 6);
    *((_OWORD *)v46 + 5) = *((_OWORD *)v47 + 5);
    *((_OWORD *)v46 + 6) = v51;
    *((_OWORD *)v46 + 7) = *((_OWORD *)v47 + 7);
    *((_DWORD *)v46 + 32) = *((_DWORD *)v47 + 32);
    v52 = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 1) = *((_OWORD *)v47 + 1);
    *((_OWORD *)v46 + 2) = v52;
    v53 = *((_OWORD *)v47 + 4);
    *((_OWORD *)v46 + 3) = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 4) = v53;
    v46[17] = v47[17];
    *((_OWORD *)v46 + 9) = *((_OWORD *)v47 + 9);
    memcpy(v46 + 20, v47 + 20, 0x373uLL);
    v54 = v48[10];
    v55 = (char *)v46 + v54;
    v56 = (char *)v47 + v54;
    v57 = type metadata accessor for ActionInternalPB(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      *v55 = *v56;
      v60 = *(int *)(v57 + 20);
      v136 = &v55[v60];
      v61 = &v56[v60];
      v62 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v136, v61, v62);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    v63 = v48[11];
    v64 = (char *)v46 + v63;
    v65 = (char *)v47 + v63;
    v66 = type metadata accessor for UnsureInternalPB(0);
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v64, v65, v69);
      *(_QWORD *)&v64[*(int *)(v66 + 20)] = *(_QWORD *)&v65[*(int *)(v66 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    v70 = v48[12];
    v71 = (char *)v46 + v70;
    v72 = (char *)v47 + v70;
    v73 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v76 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v71, v72, v76);
      *(_QWORD *)&v71[*(int *)(v73 + 20)] = *(_QWORD *)&v72[*(int *)(v73 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
    v77 = v48[13];
    v78 = (_QWORD *)((char *)v46 + v77);
    v79 = (_QWORD *)((char *)v47 + v77);
    v80 = type metadata accessor for HomePinchInternalPB(0);
    v81 = *(_QWORD *)(v80 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      *v78 = *v79;
      v83 = *(int *)(v80 + 20);
      v137 = (char *)v78 + v83;
      v84 = (char *)v79 + v83;
      v85 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v137, v84, v85);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
    }
    *(_QWORD *)((char *)v46 + v48[14]) = *(_QWORD *)((char *)v47 + v48[14]);
    (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v46, 0, 1, v48);
  }
  v86 = a3[25];
  v87 = a3[26];
  v88 = a1 + v86;
  v89 = a2 + v86;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v90 = *(_QWORD *)(a2 + v87);
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_QWORD *)(a1 + v87) = v90;
  v91 = a3[27];
  v92 = a3[28];
  v93 = a1 + v91;
  v94 = a2 + v91;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v95 = a1 + v92;
  v96 = a2 + v92;
  v97 = *(_OWORD *)(v96 + 16);
  *(_OWORD *)v95 = *(_OWORD *)v96;
  *(_OWORD *)(v95 + 16) = v97;
  v98 = *(_OWORD *)(v96 + 32);
  *(_WORD *)(v95 + 48) = *(_WORD *)(v96 + 48);
  v99 = a3[29];
  v100 = a3[30];
  v101 = *(_QWORD *)(a2 + v99);
  *(_OWORD *)(v95 + 32) = v98;
  *(_QWORD *)(a1 + v99) = v101;
  v102 = a1 + v100;
  *(_QWORD *)v102 = *(_QWORD *)(a2 + v100);
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(a2 + v100 + 8);
  v103 = a3[31];
  v104 = a3[32];
  v105 = a1 + v103;
  v106 = a2 + v103;
  v107 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v107;
  *(_OWORD *)(v105 + 32) = *(_OWORD *)(v106 + 32);
  *(_QWORD *)(v105 + 48) = *(_QWORD *)(v106 + 48);
  v108 = a1 + v104;
  v109 = a2 + v104;
  v110 = *(_OWORD *)(v109 + 48);
  *(_OWORD *)(v108 + 32) = *(_OWORD *)(v109 + 32);
  *(_OWORD *)(v108 + 48) = v110;
  *(_QWORD *)(v108 + 62) = *(_QWORD *)(v109 + 62);
  v111 = *(_OWORD *)(v109 + 16);
  *(_OWORD *)v108 = *(_OWORD *)v109;
  *(_OWORD *)(v108 + 16) = v111;
  v112 = a3[33];
  v113 = a3[34];
  v114 = a1 + v112;
  v115 = a2 + v112;
  *(_BYTE *)(v114 + 8) = *(_BYTE *)(v115 + 8);
  *(_QWORD *)v114 = *(_QWORD *)v115;
  v116 = a3[35];
  *(_OWORD *)(a1 + v113) = *(_OWORD *)(a2 + v113);
  memcpy((void *)(a1 + v116), (const void *)(a2 + v116), 0x118uLL);
  v117 = a3[36];
  v118 = (_OWORD *)(a1 + v117);
  v119 = (_OWORD *)(a2 + v117);
  v120 = type metadata accessor for PartialHandMultiCam(0);
  v121 = *(_QWORD *)(v120 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
  {
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    *v118 = *v119;
    v123 = *(int *)(v120 + 24);
    v124 = (char *)v118 + v123;
    v125 = (char *)v119 + v123;
    v126 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
  }
  v127 = a3[37];
  v128 = a3[38];
  v129 = a1 + v127;
  v130 = a2 + v127;
  *(_QWORD *)v129 = *(_QWORD *)v130;
  *(_BYTE *)(v129 + 8) = *(_BYTE *)(v130 + 8);
  v131 = a1 + v128;
  v132 = a2 + v128;
  v133 = *(_OWORD *)(v132 + 16);
  *(_OWORD *)v131 = *(_OWORD *)v132;
  *(_OWORD *)(v131 + 16) = v133;
  *(_OWORD *)(v131 + 32) = *(_OWORD *)(v132 + 32);
  *(_QWORD *)(v131 + 45) = *(_QWORD *)(v132 + 45);
  return a1;
}

uint64_t assignWithTake for HandDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  int v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t (*v117)(_BYTE *, uint64_t, uint64_t);
  int v118;
  int v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t, uint64_t);
  int v131;
  size_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, uint64_t, uint64_t);
  int v149;
  size_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t (*v158)(_QWORD *, uint64_t, uint64_t);
  int v159;
  int v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t (*v215)(_QWORD *, uint64_t, uint64_t);
  int v216;
  int v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *__src;
  _QWORD *__srca;
  _BYTE *__srcd;
  char *__srce;
  _QWORD *__srcb;
  _QWORD *__srcc;
  _QWORD *__dst;
  int *__dsta;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a1 + 16;
  v8 = a2 + 16;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
      v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      goto LABEL_6;
    }
    outlined destroy of HandPose(v6);
  }
  v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v6 + 80) = v12;
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v8 + 112);
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v8;
  *(_OWORD *)(v6 + 16) = v13;
  v14 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v6 + 48) = v14;
LABEL_6:
  v15 = *(_QWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v16)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 200) = v15;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_11:
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  v17 = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v18 = a3[17];
  v19 = a1 + v18;
  v20 = (char *)(a2 + v18);
  *(_DWORD *)(a1 + 272) = v17;
  v21 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23((uint64_t)v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      v35 = type metadata accessor for UnknownStorage();
      __srca = *(_QWORD **)(v35 - 8);
      v36 = (void (*)(uint64_t, char *, uint64_t))__srca[5];
      v36(v19, v20, v35);
      v37 = *(int *)(v21 + 20);
      v38 = (char *)(v19 + v37);
      v39 = &v20[v37];
      v40 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v238 = *(_QWORD *)(v40 - 8);
      v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v238 + 48);
      v42 = v41(v38, 1, v40);
      v43 = v41(v39, 1, v40);
      if (v42)
      {
        if (!v43)
        {
          *(_QWORD *)v38 = *(_QWORD *)v39;
          ((void (*)(char *, char *, uint64_t))__srca[4])(&v38[*(int *)(v40 + 20)], &v39[*(int *)(v40 + 20)], v35);
          v44 = *(int *)(v40 + 24);
          v45 = &v38[v44];
          v46 = &v39[v44];
          *(_DWORD *)v45 = *(_DWORD *)v46;
          v45[4] = v46[4];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v38, 0, 1, v40);
          goto LABEL_24;
        }
      }
      else
      {
        if (!v43)
        {
          *(_QWORD *)v38 = *(_QWORD *)v39;
          swift_bridgeObjectRelease();
          v36((uint64_t)&v38[*(int *)(v40 + 20)], &v39[*(int *)(v40 + 20)], v35);
          v135 = *(int *)(v40 + 24);
          v136 = &v38[v135];
          v137 = &v39[v135];
          *(_DWORD *)v136 = *(_DWORD *)v137;
          v136[4] = v137[4];
          goto LABEL_24;
        }
        outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for RawThumbIndexTapFeaturesPB);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?)
                                  - 8)
                      + 64);
      v33 = v38;
      v34 = v39;
LABEL_18:
      memcpy(v33, v34, v32);
      goto LABEL_24;
    }
    outlined destroy of Matrix3x3PB(v19, type metadata accessor for ThumbIndexTapFeaturesPB);
LABEL_17:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?)
                                - 8)
                    + 64);
    v33 = (void *)v19;
    v34 = v20;
    goto LABEL_18;
  }
  if (v25)
    goto LABEL_17;
  v26 = type metadata accessor for UnknownStorage();
  v27 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
  v27(v19, v20, v26);
  v28 = *(int *)(v21 + 20);
  __dst = (_QWORD *)(v19 + v28);
  v29 = &v20[v28];
  v30 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  __src = *(void **)(v30 - 8);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))__src + 6))(v29, 1, v30))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *__dst = *(_QWORD *)v29;
    v27((uint64_t)__dst + *(int *)(v30 + 20), &v29[*(int *)(v30 + 20)], v26);
    v47 = *(int *)(v30 + 24);
    v48 = (char *)__dst + v47;
    v49 = &v29[v47];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__src + 7))(__dst, 0, 1, v30);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_24:
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRelease();
  v50 = a3[19];
  v51 = a3[20];
  v52 = a1 + v50;
  v53 = a2 + v50;
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_BYTE *)(v52 + 16) = *(_BYTE *)(v53 + 16);
  v54 = a1 + v51;
  v55 = a2 + v51;
  *(_OWORD *)v54 = *(_OWORD *)v55;
  *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
  v56 = a3[21];
  v57 = a3[22];
  v58 = a1 + v56;
  v59 = a2 + v56;
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_BYTE *)(v58 + 16) = *(_BYTE *)(v59 + 16);
  v60 = a1 + v57;
  v61 = a2 + v57;
  *(_BYTE *)(v60 + 64) = *(_BYTE *)(v61 + 64);
  v62 = *(_OWORD *)(v61 + 48);
  *(_OWORD *)(v60 + 32) = *(_OWORD *)(v61 + 32);
  *(_OWORD *)(v60 + 48) = v62;
  v63 = *(_OWORD *)(v61 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *(_OWORD *)(v60 + 16) = v63;
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRelease();
  v64 = a3[24];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = type metadata accessor for HandDescriptorInternal();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v65, 1, v67);
  __dsta = (int *)v67;
  v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (v71)
    {
      outlined destroy of Matrix3x3PB(v65, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_30;
    }
    *(_QWORD *)v65 = *(_QWORD *)v66;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
    if (*(_QWORD *)(v65 + 48))
    {
      v82 = *(_QWORD *)(v66 + 48);
      if (v82)
      {
        *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
        *(_BYTE *)(v65 + 24) = *(_BYTE *)(v66 + 24);
        *(_BYTE *)(v65 + 25) = *(_BYTE *)(v66 + 25);
        *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
        *(_BYTE *)(v65 + 40) = *(_BYTE *)(v66 + 40);
        *(_QWORD *)(v65 + 48) = v82;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 56) = *(_QWORD *)(v66 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 64) = *(_QWORD *)(v66 + 64);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 72) = *(_QWORD *)(v66 + 72);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v65 + 88) = *(_DWORD *)(v66 + 88);
        v83 = *(_QWORD *)(v66 + 104);
        *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
        *(_QWORD *)(v65 + 104) = v83;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 112) = *(_QWORD *)(v66 + 112);
        *(_BYTE *)(v65 + 120) = *(_BYTE *)(v66 + 120);
        *(_QWORD *)(v65 + 124) = *(_QWORD *)(v66 + 124);
        goto LABEL_50;
      }
      outlined destroy of PinchInternalData(v65 + 16);
    }
    v110 = *(_OWORD *)(v66 + 96);
    *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
    *(_OWORD *)(v65 + 96) = v110;
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_DWORD *)(v65 + 128) = *(_DWORD *)(v66 + 128);
    v111 = *(_OWORD *)(v66 + 32);
    *(_OWORD *)(v65 + 16) = *(_OWORD *)(v66 + 16);
    *(_OWORD *)(v65 + 32) = v111;
    v112 = *(_OWORD *)(v66 + 64);
    *(_OWORD *)(v65 + 48) = *(_OWORD *)(v66 + 48);
    *(_OWORD *)(v65 + 64) = v112;
LABEL_50:
    *(_QWORD *)(v65 + 136) = *(_QWORD *)(v66 + 136);
    swift_bridgeObjectRelease();
    *(_DWORD *)(v65 + 144) = *(_DWORD *)(v66 + 144);
    *(_DWORD *)(v65 + 148) = *(_DWORD *)(v66 + 148);
    *(_QWORD *)(v65 + 152) = *(_QWORD *)(v66 + 152);
    swift_bridgeObjectRelease();
    memcpy((void *)(v65 + 160), (const void *)(v66 + 160), 0x373uLL);
    v113 = *(int *)(v67 + 40);
    v114 = (_BYTE *)(v65 + v113);
    v115 = (_BYTE *)(v66 + v113);
    v116 = type metadata accessor for ActionInternalPB(0);
    __srcb = *(_QWORD **)(v116 - 8);
    v117 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))__srcb[6];
    v118 = v117(v114, 1, v116);
    v119 = v117(v115, 1, v116);
    if (v118)
    {
      if (!v119)
      {
        *v114 = *v115;
        v120 = *(int *)(v116 + 20);
        v121 = &v114[v120];
        v122 = &v115[v120];
        v123 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v121, v122, v123);
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srcb[7])(v114, 0, 1, v116);
        goto LABEL_56;
      }
    }
    else
    {
      if (!v119)
      {
        *v114 = *v115;
        v138 = *(int *)(v116 + 20);
        v139 = &v114[v138];
        v140 = &v115[v138];
        v141 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
LABEL_56:
        v125 = __dsta[11];
        v126 = v65 + v125;
        v127 = (char *)(v66 + v125);
        v128 = type metadata accessor for UnsureInternalPB(0);
        v129 = *(_QWORD *)(v128 - 8);
        v130 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
        v239 = v126;
        LODWORD(v126) = v130(v126, 1, v128);
        v131 = v130((uint64_t)v127, 1, v128);
        if ((_DWORD)v126)
        {
          if (v131)
          {
            v132 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v133 = (void *)v239;
LABEL_61:
            memcpy(v133, v127, v132);
            goto LABEL_66;
          }
          v134 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v239, v127, v134);
          *(_QWORD *)(v239 + *(int *)(v128 + 20)) = *(_QWORD *)&v127[*(int *)(v128 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v129 + 56))(v239, 0, 1, v128);
        }
        else
        {
          if (v131)
          {
            outlined destroy of Matrix3x3PB(v239, type metadata accessor for UnsureInternalPB);
            v132 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v133 = (void *)v239;
            goto LABEL_61;
          }
          v142 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 40))(v239, v127, v142);
          *(_QWORD *)(v239 + *(int *)(v128 + 20)) = *(_QWORD *)&v127[*(int *)(v128 + 20)];
          swift_release();
        }
LABEL_66:
        v143 = __dsta[12];
        v144 = v65 + v143;
        v145 = (char *)(v66 + v143);
        v146 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        v147 = *(_QWORD *)(v146 - 8);
        v148 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
        v240 = v144;
        LODWORD(v144) = v148(v144, 1, v146);
        v149 = v148((uint64_t)v145, 1, v146);
        if ((_DWORD)v144)
        {
          if (v149)
          {
            v150 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v151 = (void *)v240;
LABEL_71:
            memcpy(v151, v145, v150);
            goto LABEL_74;
          }
          v152 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v240, v145, v152);
          *(_QWORD *)(v240 + *(int *)(v146 + 20)) = *(_QWORD *)&v145[*(int *)(v146 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v147 + 56))(v240, 0, 1, v146);
        }
        else
        {
          if (v149)
          {
            outlined destroy of Matrix3x3PB(v240, type metadata accessor for ObjectInteractionStateInternalPB);
            v150 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v151 = (void *)v240;
            goto LABEL_71;
          }
          v153 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 40))(v240, v145, v153);
          *(_QWORD *)(v240 + *(int *)(v146 + 20)) = *(_QWORD *)&v145[*(int *)(v146 + 20)];
          swift_release();
        }
LABEL_74:
        v154 = __dsta[13];
        v155 = (_QWORD *)(v65 + v154);
        v156 = (_QWORD *)(v66 + v154);
        v157 = type metadata accessor for HomePinchInternalPB(0);
        __srcc = *(_QWORD **)(v157 - 8);
        v158 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))__srcc[6];
        v159 = v158(v155, 1, v157);
        v160 = v158(v156, 1, v157);
        if (v159)
        {
          if (!v160)
          {
            *v155 = *v156;
            v161 = *(int *)(v157 + 20);
            v162 = (char *)v155 + v161;
            v163 = (char *)v156 + v161;
            v164 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v162, v163, v164);
            ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcc[7])(v155, 0, 1, v157);
LABEL_80:
            *(_QWORD *)(v65 + __dsta[14]) = *(_QWORD *)(v66 + __dsta[14]);
            swift_bridgeObjectRelease();
            goto LABEL_81;
          }
        }
        else
        {
          if (!v160)
          {
            *v155 = *v156;
            v234 = *(int *)(v157 + 20);
            v235 = (char *)v155 + v234;
            v236 = (char *)v156 + v234;
            v237 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v237 - 8) + 40))(v235, v236, v237);
            goto LABEL_80;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v155, type metadata accessor for HomePinchInternalPB);
        }
        v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
        goto LABEL_80;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v114, type metadata accessor for ActionInternalPB);
    }
    v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_56;
  }
  if (v71)
  {
LABEL_30:
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v65, (const void *)v66, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_81;
  }
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
  v72 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v72;
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_DWORD *)(v65 + 128) = *(_DWORD *)(v66 + 128);
  v73 = *(_OWORD *)(v66 + 32);
  *(_OWORD *)(v65 + 16) = *(_OWORD *)(v66 + 16);
  *(_OWORD *)(v65 + 32) = v73;
  v74 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)(v65 + 48) = *(_OWORD *)(v66 + 48);
  *(_OWORD *)(v65 + 64) = v74;
  *(_QWORD *)(v65 + 136) = *(_QWORD *)(v66 + 136);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  memcpy((void *)(v65 + 160), (const void *)(v66 + 160), 0x373uLL);
  v75 = *(int *)(v67 + 40);
  v76 = (_BYTE *)(v65 + v75);
  v77 = (_BYTE *)(v66 + v75);
  v78 = type metadata accessor for ActionInternalPB(0);
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    *v76 = *v77;
    v84 = *(int *)(v78 + 20);
    __srcd = &v76[v84];
    v85 = &v77[v84];
    v86 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(__srcd, v85, v86);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  v87 = __dsta[11];
  v88 = (char *)(v65 + v87);
  v89 = (char *)(v66 + v87);
  v90 = type metadata accessor for UnsureInternalPB(0);
  v91 = *(_QWORD *)(v90 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
  {
    v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    v93 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v88, v89, v93);
    *(_QWORD *)&v88[*(int *)(v90 + 20)] = *(_QWORD *)&v89[*(int *)(v90 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
  }
  v94 = __dsta[12];
  v95 = (char *)(v65 + v94);
  v96 = (char *)(v66 + v94);
  v97 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v98 = *(_QWORD *)(v97 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
  {
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    v100 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v95, v96, v100);
    *(_QWORD *)&v95[*(int *)(v97 + 20)] = *(_QWORD *)&v96[*(int *)(v97 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
  }
  v101 = __dsta[13];
  v102 = (_QWORD *)(v65 + v101);
  v103 = (_QWORD *)(v66 + v101);
  v104 = type metadata accessor for HomePinchInternalPB(0);
  v105 = *(_QWORD *)(v104 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
  {
    v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    *v102 = *v103;
    v107 = *(int *)(v104 + 20);
    __srce = (char *)v102 + v107;
    v108 = (char *)v103 + v107;
    v109 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(__srce, v108, v109);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *(_QWORD *)(v65 + __dsta[14]) = *(_QWORD *)(v66 + __dsta[14]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 56))(v65, 0, 1);
LABEL_81:
  v166 = a3[25];
  v167 = a3[26];
  v168 = a1 + v166;
  v169 = a2 + v166;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  *(_QWORD *)(a1 + v167) = *(_QWORD *)(a2 + v167);
  swift_bridgeObjectRelease();
  v170 = a3[27];
  v171 = a3[28];
  v172 = a1 + v170;
  v173 = a2 + v170;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  *(_QWORD *)v172 = *(_QWORD *)v173;
  v174 = a1 + v171;
  v175 = a2 + v171;
  v176 = *(_OWORD *)(v175 + 16);
  *(_OWORD *)v174 = *(_OWORD *)v175;
  *(_OWORD *)(v174 + 16) = v176;
  *(_OWORD *)(v174 + 32) = *(_OWORD *)(v175 + 32);
  *(_WORD *)(v174 + 48) = *(_WORD *)(v175 + 48);
  *(_QWORD *)(a1 + a3[29]) = *(_QWORD *)(a2 + a3[29]);
  swift_bridgeObjectRelease();
  v177 = a3[30];
  v178 = a3[31];
  v179 = a1 + v177;
  v180 = a2 + v177;
  *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
  *(_QWORD *)v179 = *(_QWORD *)v180;
  v181 = (_QWORD *)(a1 + v178);
  v182 = (_QWORD *)(a2 + v178);
  if (*(_QWORD *)(a1 + v178))
  {
    if (*v182)
    {
      *v181 = *v182;
      swift_bridgeObjectRelease();
      v181[1] = v182[1];
      swift_bridgeObjectRelease();
      v181[2] = v182[2];
      swift_bridgeObjectRelease();
      v181[3] = v182[3];
      swift_bridgeObjectRelease();
      v181[4] = v182[4];
      swift_bridgeObjectRelease();
      v181[5] = v182[5];
      swift_bridgeObjectRelease();
      v181[6] = v182[6];
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    outlined destroy of ObjectInteractionData(a1 + v178);
  }
  v183 = *((_OWORD *)v182 + 1);
  *(_OWORD *)v181 = *(_OWORD *)v182;
  *((_OWORD *)v181 + 1) = v183;
  *((_OWORD *)v181 + 2) = *((_OWORD *)v182 + 2);
  v181[6] = v182[6];
LABEL_86:
  v184 = a3[32];
  v185 = a3[33];
  v186 = a1 + v184;
  v187 = a2 + v184;
  *(_QWORD *)v186 = *(_QWORD *)v187;
  *(_QWORD *)(v186 + 16) = *(_QWORD *)(v187 + 16);
  *(_QWORD *)(v186 + 48) = *(_QWORD *)(v187 + 48);
  *(_BYTE *)(v186 + 56) = *(_BYTE *)(v187 + 56);
  *(_BYTE *)(v186 + 68) = *(_BYTE *)(v187 + 68);
  *(_QWORD *)(v186 + 8) = *(_QWORD *)(v187 + 8);
  *(_OWORD *)(v186 + 32) = *(_OWORD *)(v187 + 32);
  *(_QWORD *)(v186 + 60) = *(_QWORD *)(v187 + 60);
  *(_BYTE *)(v186 + 69) = *(_BYTE *)(v187 + 69);
  v188 = a1 + v185;
  v189 = a2 + v185;
  *(_QWORD *)v188 = *(_QWORD *)v189;
  *(_BYTE *)(v188 + 8) = *(_BYTE *)(v189 + 8);
  v190 = a3[34];
  v191 = a1 + v190;
  v192 = a2 + v190;
  *(_DWORD *)v191 = *(_DWORD *)v192;
  *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
  swift_bridgeObjectRelease();
  v193 = a3[35];
  v194 = a1 + v193;
  v195 = a2 + v193;
  v196 = *(_OWORD *)(a2 + v193 + 16);
  *(_OWORD *)v194 = *(_OWORD *)(a2 + v193);
  *(_OWORD *)(v194 + 16) = v196;
  v197 = *(_OWORD *)(a2 + v193 + 48);
  *(_OWORD *)(v194 + 32) = *(_OWORD *)(a2 + v193 + 32);
  *(_OWORD *)(v194 + 48) = v197;
  *(_DWORD *)(v194 + 64) = *(_DWORD *)(a2 + v193 + 64);
  v198 = *(_OWORD *)(a2 + v193 + 96);
  *(_OWORD *)(v194 + 80) = *(_OWORD *)(a2 + v193 + 80);
  *(_OWORD *)(v194 + 96) = v198;
  v199 = *(_OWORD *)(a2 + v193 + 128);
  *(_OWORD *)(v194 + 112) = *(_OWORD *)(a2 + v193 + 112);
  *(_OWORD *)(v194 + 128) = v199;
  v200 = a1 + v193 + 144;
  v202 = a2 + v193 + 144;
  v201 = *(_QWORD *)v202;
  if (*(_QWORD *)v200)
  {
    if (v201)
    {
      *(_QWORD *)(v194 + 144) = v201;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v194 + 152) = *(_QWORD *)(v195 + 152);
      swift_bridgeObjectRelease();
      v203 = *(_OWORD *)(v195 + 176);
      *(_OWORD *)(v194 + 160) = *(_OWORD *)(v195 + 160);
      *(_OWORD *)(v194 + 176) = v203;
      v204 = *(_OWORD *)(v195 + 208);
      *(_OWORD *)(v194 + 192) = *(_OWORD *)(v195 + 192);
      *(_OWORD *)(v194 + 208) = v204;
      v205 = *(_OWORD *)(v195 + 240);
      *(_OWORD *)(v194 + 224) = *(_OWORD *)(v195 + 224);
      *(_OWORD *)(v194 + 240) = v205;
      *(_BYTE *)(v194 + 256) = *(_BYTE *)(v195 + 256);
      *(_BYTE *)(v194 + 257) = *(_BYTE *)(v195 + 257);
      *(_DWORD *)(v194 + 260) = *(_DWORD *)(v195 + 260);
      goto LABEL_91;
    }
    outlined destroy of HandPose(v200);
  }
  v206 = *(_OWORD *)(v202 + 80);
  *(_OWORD *)(v200 + 64) = *(_OWORD *)(v202 + 64);
  *(_OWORD *)(v200 + 80) = v206;
  *(_OWORD *)(v200 + 96) = *(_OWORD *)(v202 + 96);
  *(_QWORD *)(v200 + 112) = *(_QWORD *)(v202 + 112);
  v207 = *(_OWORD *)(v202 + 16);
  *(_OWORD *)v200 = *(_OWORD *)v202;
  *(_OWORD *)(v200 + 16) = v207;
  v208 = *(_OWORD *)(v202 + 48);
  *(_OWORD *)(v200 + 32) = *(_OWORD *)(v202 + 32);
  *(_OWORD *)(v200 + 48) = v208;
LABEL_91:
  v209 = *(_QWORD *)(v195 + 272);
  *(_QWORD *)(v194 + 264) = *(_QWORD *)(v195 + 264);
  *(_QWORD *)(v194 + 272) = v209;
  v210 = a3[36];
  v211 = (_QWORD *)(a1 + v210);
  v212 = (_QWORD *)(a2 + v210);
  v213 = type metadata accessor for PartialHandMultiCam(0);
  v214 = *(_QWORD *)(v213 - 8);
  v215 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v214 + 48);
  v216 = v215(v211, 1, v213);
  v217 = v215(v212, 1, v213);
  if (!v216)
  {
    if (!v217)
    {
      *v211 = *v212;
      swift_bridgeObjectRelease();
      v211[1] = v212[1];
      swift_bridgeObjectRelease();
      v230 = *(int *)(v213 + 24);
      v231 = (char *)v211 + v230;
      v232 = (char *)v212 + v230;
      v233 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 40))(v231, v232, v233);
      goto LABEL_97;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v211, type metadata accessor for PartialHandMultiCam);
    goto LABEL_96;
  }
  if (v217)
  {
LABEL_96:
    v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
    goto LABEL_97;
  }
  *(_OWORD *)v211 = *(_OWORD *)v212;
  v218 = *(int *)(v213 + 24);
  v219 = (char *)v211 + v218;
  v220 = (char *)v212 + v218;
  v221 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 32))(v219, v220, v221);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v211, 0, 1, v213);
LABEL_97:
  v223 = a3[37];
  v224 = a3[38];
  v225 = a1 + v223;
  v226 = a2 + v223;
  *(_BYTE *)v225 = *(_BYTE *)v226;
  *(_DWORD *)(v225 + 4) = *(_DWORD *)(v226 + 4);
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  v227 = a1 + v224;
  v228 = a2 + v224;
  *(_BYTE *)v227 = *(_BYTE *)v228;
  *(_BYTE *)(v227 + 1) = *(_BYTE *)(v228 + 1);
  *(_BYTE *)(v227 + 2) = *(_BYTE *)(v228 + 2);
  *(_BYTE *)(v227 + 3) = *(_BYTE *)(v228 + 3);
  *(_BYTE *)(v227 + 16) = *(_BYTE *)(v228 + 16);
  *(_QWORD *)(v227 + 8) = *(_QWORD *)(v228 + 8);
  *(_QWORD *)(v227 + 24) = *(_QWORD *)(v228 + 24);
  *(_BYTE *)(v227 + 32) = *(_BYTE *)(v228 + 32);
  *(_QWORD *)(v227 + 40) = *(_QWORD *)(v228 + 40);
  *(_BYTE *)(v227 + 48) = *(_BYTE *)(v228 + 48);
  *(_BYTE *)(v227 + 49) = *(_BYTE *)(v228 + 49);
  *(_BYTE *)(v227 + 50) = *(_BYTE *)(v228 + 50);
  *(_BYTE *)(v227 + 51) = *(_BYTE *)(v228 + 51);
  *(_BYTE *)(v227 + 52) = *(_BYTE *)(v228 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7D2128(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 256);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[17];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[24];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[36];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7D2204(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 256) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[17];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[24];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[36];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for HandDescriptor()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ThumbIndexTapFeaturesPB?, (void (*)(uint64_t))type metadata accessor for ThumbIndexTapFeaturesPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandDescriptorInternal?, (void (*)(uint64_t))type metadata accessor for HandDescriptorInternal);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PartialHandMultiCam?, (void (*)(uint64_t))type metadata accessor for PartialHandMultiCam);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t _s5Hands12CameraSourceO_AA15DetectionResultVtSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double _s5Hands12CameraSourceO_AA15DetectionResultVtSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 105) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined assign with copy of HandDescriptorInternal?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t _s5Hands12CameraSourceO_AA13PoseImageCropVtSgWOg(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 184);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

double _s5Hands12CameraSourceO_AA13PoseImageCropVtSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 184) = 2;
  return result;
}

uint64_t PinchFeatures.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int v24;
  int v25;
  uint64_t result;
  _BYTE v27[12];
  int v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for RawPinchFeaturesPB(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  v28 = *(unsigned __int8 *)(a1 + 49);
  v18 = *(_BYTE *)(a1 + 32);
  v19 = type metadata accessor for PinchFeaturesPB(0);
  outlined init with copy of RawPinchFeaturesPB?(a1 + *(int *)(v19 + 60), (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v20 = &v12[*(int *)(v8 + 32)];
    *(_DWORD *)v20 = 0;
    v20[4] = 1;
    outlined destroy of RawPinchFeaturesPB?((uint64_t)v7);
  }
  else
  {
    outlined init with take of RawPinchFeaturesPB((uint64_t)v7, (uint64_t)v12);
  }
  v21 = *((_QWORD *)v12 + 1);
  v22 = *((_DWORD *)v12 + 1);
  v23 = &v12[*(int *)(v8 + 32)];
  if (v23[4])
    v24 = 0;
  else
    v24 = *(_DWORD *)v23;
  v25 = *(_DWORD *)v12;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for RawPinchFeaturesPB);
  result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for PinchFeaturesPB);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v17;
  *(_BYTE *)(a2 + 33) = 0;
  *(_BYTE *)(a2 + 34) = v18;
  *(_BYTE *)(a2 + 35) = v28;
  *(_QWORD *)(a2 + 40) = v21;
  *(_DWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 56) = v22;
  *(_DWORD *)(a2 + 60) = v25;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

uint64_t PinchFeatures.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t result;
  _BYTE v28[12];
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v3 = type metadata accessor for RawPinchFeaturesPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = &v28[-v10];
  v12 = *((_DWORD *)v1 + 4);
  v13 = *((_BYTE *)v1 + 20);
  v30 = v1[3];
  v29 = *((unsigned __int8 *)v1 + 32);
  v14 = *((unsigned __int8 *)v1 + 33);
  v15 = *((unsigned __int8 *)v1 + 34);
  v16 = *((unsigned __int8 *)v1 + 35);
  v17 = v1[5];
  v31 = *((_DWORD *)v1 + 12);
  v32 = v14;
  v34 = *((unsigned __int8 *)v1 + 52);
  v35 = v16;
  v19 = *((_DWORD *)v1 + 14);
  v18 = *((_DWORD *)v1 + 15);
  v33 = *((unsigned __int8 *)v1 + 64);
  v20 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 1;
  v21 = type metadata accessor for PinchFeaturesPB(0);
  UnknownStorage.init()();
  v22 = a1 + *(int *)(v21 + 60);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v24 = *v1;
  v25 = v1[1];
  v23(v22, 1, 1, v3);
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = v25;
  if ((v13 & 1) != 0)
  {
    if ((v32 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v12;
    if ((v32 & 1) != 0)
    {
LABEL_3:
      if (v15 == 2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  *(_QWORD *)(a1 + 40) = v30;
  *(_BYTE *)(a1 + 48) = v29 & 1;
  if (v15 != 2)
LABEL_4:
    *(_BYTE *)(a1 + 32) = v15 & 1;
LABEL_5:
  *(_DWORD *)v7 = 0;
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  v26 = &v7[*(int *)(v3 + 32)];
  *(_DWORD *)v26 = 0;
  v26[4] = 1;
  *((_QWORD *)v7 + 1) = v17;
  *((_DWORD *)v7 + 1) = v19;
  if ((v33 & 1) == 0)
    *(_DWORD *)v7 = v18;
  if ((v34 & 1) == 0)
  {
    *(_DWORD *)v26 = v31;
    v26[4] = 0;
  }
  outlined init with take of RawPinchFeaturesPB((uint64_t)v7, (uint64_t)v11);
  outlined destroy of RawPinchFeaturesPB?(v22);
  outlined init with take of RawPinchFeaturesPB((uint64_t)v11, v22);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v23)(v22, 0, 1, v3);
  *(_BYTE *)(a1 + 49) = v35;
  return result;
}

BOOL PinchFeatures.almostEqual(to:withThreshold:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v2;
  int v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10;
  Swift::Float v11;
  char v12;
  Swift::Float v13;
  Swift::Float v14;
  char v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  int v23;
  char v24;
  float v26;
  char v27;
  Swift::Bool v28;
  char v30;
  void *v31;
  char v32;
  float v33;
  Hands::RawPinchFeatures to;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  v4 = *(unsigned __int8 *)(a1 + 20);
  v5 = *(unsigned __int8 *)(v2 + 20);
  v6 = vabds_f32(*(float *)v2, *(float *)a1) < a2
    && vabds_f32(*(float *)(v2 + 4), *(float *)(a1 + 4)) < a2
    && vabds_f32(*(float *)(v2 + 8), *(float *)(a1 + 8)) < a2
    && vabds_f32(*(float *)(v2 + 12), *(float *)(a1 + 12)) < a2;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(unsigned __int8 *)(a1 + 34);
  v9 = *(unsigned __int8 *)(a1 + 35);
  v10 = *(void **)(a1 + 40);
  v11 = *(float *)(a1 + 48);
  v12 = *(_BYTE *)(a1 + 52);
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(_BYTE *)(a1 + 64);
  v16 = *(_BYTE *)(v2 + 32);
  v17 = *(unsigned __int8 *)(v2 + 34);
  v18 = *(unsigned __int8 *)(v2 + 35);
  v19 = *(_QWORD *)(v2 + 40);
  v20 = *(_DWORD *)(v2 + 48);
  v21 = *(_BYTE *)(v2 + 52);
  v22 = *(_DWORD *)(v2 + 56);
  v23 = *(_DWORD *)(v2 + 60);
  v24 = *(_BYTE *)(v2 + 64);
  if (((v5 | v4) & 1) != 0)
  {
    if ((v6 & v5 & v4) != 1)
      return 0;
  }
  else if (vabds_f32(*(float *)(v2 + 16), *(float *)(a1 + 16)) >= a2 || !v6)
  {
    return 0;
  }
  if ((*(_BYTE *)(v2 + 33) & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 33))
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 33) & 1) != 0)
      return 0;
    v32 = *(_BYTE *)(a1 + 52);
    v33 = *(float *)(a1 + 48);
    v31 = *(void **)(a1 + 40);
    v26 = *(float *)(a1 + 60);
    v30 = *(_BYTE *)(a1 + 64);
    v27 = specialized == infix<A>(_:_:)(v7, v16 & 1, *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32) & 1);
    v15 = v30;
    v14 = v26;
    v12 = v32;
    v11 = v33;
    v10 = v31;
    if ((v27 & 1) == 0)
      return 0;
  }
  if (v17 == 2)
  {
    v28 = 0;
    if (v8 != 2)
      return v28;
  }
  else
  {
    v28 = 0;
    if (v8 == 2 || ((v8 ^ ((v17 & 1) == 0)) & 1) == 0)
      return v28;
  }
  if (((v9 ^ v18) & 1) == 0)
  {
    v35 = v19;
    v36 = v20;
    v37 = v21;
    v38 = v22;
    v39 = v23;
    v40 = v24;
    to.scoreAheads._rawValue = v10;
    to.hoverDistanceUncertainty.value = v11;
    to.hoverDistanceUncertainty.is_nil = v12;
    to.unsureNetScore = v13;
    to.rawPinchScore.value = v14;
    to.rawPinchScore.is_nil = v15;
    return RawPinchFeatures.almostEqual(to:withThreshold:)(&to, a2);
  }
  return v28;
}

float PinchFeatures.pinchOcc.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float PinchFeatures.pinchHdUncertainty.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

float PinchFeatures.makeUnsureScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

float PinchFeatures.hdUnsureScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

unint64_t PinchFeatures.pinchScore.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

void PinchFeatures.pinchOcclusionStatus.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 33);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t PinchFeatures.objectInteractionFilterCond.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t PinchFeatures.occludedByOtherHand.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t PinchFeatures.rawPinchFeatures.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  int v5;
  char v6;

  v2 = *(_DWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 52);
  v4 = *(_DWORD *)(v1 + 56);
  v5 = *(_DWORD *)(v1 + 60);
  v6 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type PinchFeaturesPB and conformance PinchFeaturesPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB;
  if (!lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB)
  {
    v1 = type metadata accessor for PinchFeaturesPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchFeaturesPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB);
  }
  return result;
}

uint64_t destroy for PinchFeatures()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PinchFeatures(uint64_t a1, uint64_t a2)
{
  int v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchFeatures(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PinchFeatures(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchFeatures()
{
  return &type metadata for PinchFeatures;
}

uint64_t outlined destroy of RawPinchFeaturesPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of RawPinchFeaturesPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HandyLoggerLogLevel()
{
  lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandyLoggerLogLevel()
{
  lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel();
  return RawRepresentable<>.encode(to:)();
}

unint64_t lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel;
  if (!lazy protocol witness table cache variable for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel)
  {
    type metadata accessor for HandyLoggerLogLevel(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandyLoggerLogLevel, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel);
  }
  return result;
}

uint64_t destroy for PinchFrameFeatures(_QWORD *a1)
{
  uint64_t result;

  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[30])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1[85];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PinchFrameFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v12 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v13;
    *(_QWORD *)(a1 + 248) = v14;
    v15 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v15;
    v16 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v16;
    v17 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v17;
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
    *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v18;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v19 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v19;
    v20 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v20;
  }
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v21 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v21;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v22 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v22;
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 460) = *(_BYTE *)(a2 + 460);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  v23 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 517) = *(_QWORD *)(a2 + 517);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v24 = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = v24;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  v25 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v25;
  v26 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 608) = v26;
  v27 = (_OWORD *)(a1 + 656);
  v28 = (_OWORD *)(a2 + 656);
  v29 = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29)
  {
    *v27 = *v28;
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 680) = v29;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 672);
    *v27 = *v28;
    *(_OWORD *)(a1 + 672) = v30;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  }
  v31 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v31;
  v32 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v32;
  *(_QWORD *)(a1 + 766) = *(_QWORD *)(a2 + 766);
  return a1;
}

uint64_t assignWithCopy for PinchFrameFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
      *(_DWORD *)(a1 + 116) = *((_DWORD *)a2 + 29);
    }
    else
    {
      outlined destroy of HandPose(a1);
      v10 = *((_OWORD *)a2 + 3);
      v12 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)a1 = v12;
      *(_OWORD *)(a1 + 16) = v11;
      v14 = *((_OWORD *)a2 + 5);
      v13 = *((_OWORD *)a2 + 6);
      v15 = *((_OWORD *)a2 + 4);
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 64) = v15;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = a2[1];
    v6 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v6;
    v7 = *((_OWORD *)a2 + 3);
    v8 = *((_OWORD *)a2 + 4);
    v9 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
    *(_DWORD *)(a1 + 116) = *((_DWORD *)a2 + 29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v18;
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v17;
    v19 = *((_OWORD *)a2 + 4);
    v20 = *((_OWORD *)a2 + 5);
    v21 = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 80) = v20;
    *(_OWORD *)(a1 + 96) = v21;
    *(_OWORD *)(a1 + 64) = v19;
  }
  v22 = *((_DWORD *)a2 + 30);
  *(_BYTE *)(a1 + 124) = *((_BYTE *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v22;
  *(_BYTE *)(a1 + 125) = *((_BYTE *)a2 + 125);
  *(_QWORD *)(a1 + 128) = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a2[19];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = (_OWORD *)(a1 + 240);
  v25 = *(_QWORD *)(a1 + 240);
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  *(_BYTE *)(a1 + 193) = *((_BYTE *)a2 + 193);
  *(_QWORD *)(a1 + 200) = a2[25];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = a2[27];
  *(_QWORD *)(a1 + 224) = a2[28];
  v27 = (__int128 *)(a2 + 30);
  v26 = a2[30];
  if (v25)
  {
    if (v26)
    {
      *(_QWORD *)(a1 + 240) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = a2[31];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
      *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
      *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
      *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
      *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
      *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
      *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
      *(_BYTE *)(a1 + 353) = *((_BYTE *)a2 + 353);
      *(_DWORD *)(a1 + 356) = *((_DWORD *)a2 + 89);
    }
    else
    {
      outlined destroy of HandPose(a1 + 240);
      v32 = *((_OWORD *)a2 + 18);
      v34 = *v27;
      v33 = *((_OWORD *)a2 + 16);
      *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
      *(_OWORD *)(a1 + 288) = v32;
      *v24 = v34;
      *(_OWORD *)(a1 + 256) = v33;
      v36 = *((_OWORD *)a2 + 20);
      v35 = *((_OWORD *)a2 + 21);
      v37 = *((_OWORD *)a2 + 19);
      *(_QWORD *)(a1 + 352) = a2[44];
      *(_OWORD *)(a1 + 320) = v36;
      *(_OWORD *)(a1 + 336) = v35;
      *(_OWORD *)(a1 + 304) = v37;
    }
  }
  else if (v26)
  {
    *(_QWORD *)(a1 + 240) = v26;
    *(_QWORD *)(a1 + 248) = a2[31];
    v28 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(a1 + 272) = v28;
    v29 = *((_OWORD *)a2 + 18);
    v30 = *((_OWORD *)a2 + 19);
    v31 = *((_OWORD *)a2 + 21);
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 336) = v31;
    *(_OWORD *)(a1 + 288) = v29;
    *(_OWORD *)(a1 + 304) = v30;
    *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
    *(_BYTE *)(a1 + 353) = *((_BYTE *)a2 + 353);
    *(_DWORD *)(a1 + 356) = *((_DWORD *)a2 + 89);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v38 = *v27;
    v39 = *((_OWORD *)a2 + 16);
    v40 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 288) = v40;
    *v24 = v38;
    *(_OWORD *)(a1 + 256) = v39;
    v41 = *((_OWORD *)a2 + 19);
    v42 = *((_OWORD *)a2 + 20);
    v43 = *((_OWORD *)a2 + 21);
    *(_QWORD *)(a1 + 352) = a2[44];
    *(_OWORD *)(a1 + 320) = v42;
    *(_OWORD *)(a1 + 336) = v43;
    *(_OWORD *)(a1 + 304) = v41;
  }
  *(_DWORD *)(a1 + 360) = *((_DWORD *)a2 + 90);
  *(_DWORD *)(a1 + 364) = *((_DWORD *)a2 + 91);
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 92);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 93);
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
  *(_QWORD *)(a1 + 384) = a2[48];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 392) = a2[49];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = a2[50];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 408) = *((_DWORD *)a2 + 102);
  *(_DWORD *)(a1 + 412) = *((_DWORD *)a2 + 103);
  *(_DWORD *)(a1 + 416) = *((_DWORD *)a2 + 104);
  *(_DWORD *)(a1 + 420) = *((_DWORD *)a2 + 105);
  *(_DWORD *)(a1 + 424) = *((_DWORD *)a2 + 106);
  *(_DWORD *)(a1 + 428) = *((_DWORD *)a2 + 107);
  *(_DWORD *)(a1 + 432) = *((_DWORD *)a2 + 108);
  *(_DWORD *)(a1 + 436) = *((_DWORD *)a2 + 109);
  *(_DWORD *)(a1 + 440) = *((_DWORD *)a2 + 110);
  *(_DWORD *)(a1 + 444) = *((_DWORD *)a2 + 111);
  *(_DWORD *)(a1 + 448) = *((_DWORD *)a2 + 112);
  *(_DWORD *)(a1 + 452) = *((_DWORD *)a2 + 113);
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a2 + 114);
  *(_BYTE *)(a1 + 460) = *((_BYTE *)a2 + 460);
  *(_DWORD *)(a1 + 464) = *((_DWORD *)a2 + 116);
  *(_DWORD *)(a1 + 468) = *((_DWORD *)a2 + 117);
  *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
  *(_BYTE *)(a1 + 473) = *((_BYTE *)a2 + 473);
  *(_BYTE *)(a1 + 474) = *((_BYTE *)a2 + 474);
  *(_BYTE *)(a1 + 475) = *((_BYTE *)a2 + 475);
  v44 = a2[60];
  *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
  *(_QWORD *)(a1 + 480) = v44;
  v45 = a2[62];
  *(_BYTE *)(a1 + 504) = *((_BYTE *)a2 + 504);
  *(_QWORD *)(a1 + 496) = v45;
  v46 = a2[64];
  *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
  *(_QWORD *)(a1 + 512) = v46;
  *(_BYTE *)(a1 + 521) = *((_BYTE *)a2 + 521);
  *(_BYTE *)(a1 + 522) = *((_BYTE *)a2 + 522);
  *(_BYTE *)(a1 + 523) = *((_BYTE *)a2 + 523);
  *(_BYTE *)(a1 + 524) = *((_BYTE *)a2 + 524);
  *(_QWORD *)(a1 + 528) = a2[66];
  *(_DWORD *)(a1 + 536) = *((_DWORD *)a2 + 134);
  *(_DWORD *)(a1 + 540) = *((_DWORD *)a2 + 135);
  *(_DWORD *)(a1 + 544) = *((_DWORD *)a2 + 136);
  *(_DWORD *)(a1 + 548) = *((_DWORD *)a2 + 137);
  *(_DWORD *)(a1 + 552) = *((_DWORD *)a2 + 138);
  *(_DWORD *)(a1 + 556) = *((_DWORD *)a2 + 139);
  *(_QWORD *)(a1 + 560) = a2[70];
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  *(_DWORD *)(a1 + 572) = *((_DWORD *)a2 + 143);
  *(_QWORD *)(a1 + 576) = a2[72];
  *(_QWORD *)(a1 + 584) = a2[73];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 592) = *((_OWORD *)a2 + 37);
  *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a2 + 39);
  *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
  v47 = (_OWORD *)(a1 + 656);
  v48 = a2 + 82;
  v49 = a2[85];
  if (*(_QWORD *)(a1 + 680))
  {
    if (v49)
    {
      *(_QWORD *)(a1 + 656) = a2[82];
      *(_DWORD *)(a1 + 664) = *((_DWORD *)a2 + 166);
      *(_DWORD *)(a1 + 668) = *((_DWORD *)a2 + 167);
      *(_QWORD *)(a1 + 672) = a2[84];
      *(_QWORD *)(a1 + 680) = a2[85];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 688) = a2[86];
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ObjectInteractionResultsByHand(a1 + 656);
      v51 = a2[86];
      v52 = *((_OWORD *)a2 + 42);
      *v47 = *v48;
      *(_OWORD *)(a1 + 672) = v52;
      *(_QWORD *)(a1 + 688) = v51;
    }
  }
  else
  {
    v50 = *v48;
    if (v49)
    {
      *(_QWORD *)(a1 + 672) = a2[84];
      *v47 = v50;
      *(_QWORD *)(a1 + 680) = a2[85];
      *(_QWORD *)(a1 + 688) = a2[86];
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v53 = *((_OWORD *)a2 + 42);
      *(_QWORD *)(a1 + 688) = a2[86];
      *v47 = v50;
      *(_OWORD *)(a1 + 672) = v53;
    }
  }
  *(_QWORD *)(a1 + 704) = a2[88];
  *(_DWORD *)(a1 + 712) = *((_DWORD *)a2 + 178);
  *(_DWORD *)(a1 + 716) = *((_DWORD *)a2 + 179);
  *(_QWORD *)(a1 + 720) = a2[90];
  *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 46);
  *(_QWORD *)(a1 + 752) = a2[94];
  *(_BYTE *)(a1 + 760) = *((_BYTE *)a2 + 760);
  *(_DWORD *)(a1 + 764) = *((_DWORD *)a2 + 191);
  *(_DWORD *)(a1 + 768) = *((_DWORD *)a2 + 192);
  *(_BYTE *)(a1 + 772) = *((_BYTE *)a2 + 772);
  *(_BYTE *)(a1 + 773) = *((_BYTE *)a2 + 773);
  return a1;
}

void *__swift_memcpy774_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x306uLL);
}

uint64_t assignWithTake for PinchFrameFeatures(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRelease();
      v4 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v4;
      v5 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v5;
      v6 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v6;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
      goto LABEL_6;
    }
    outlined destroy of HandPose(a1);
  }
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_6:
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 240);
  v11 = *(_QWORD *)(a1 + 240);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  if (v11)
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 240) = v10;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRelease();
      v12 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v12;
      v13 = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = v13;
      v14 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = v14;
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
      *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
      goto LABEL_11;
    }
    outlined destroy of HandPose(a1 + 240);
  }
  v15 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v16 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v16;
  v17 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v17;
LABEL_11:
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  swift_bridgeObjectRelease();
  v18 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v18;
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 460) = *(_BYTE *)(a2 + 460);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_BYTE *)(a1 + 473) = *(_BYTE *)(a2 + 473);
  *(_BYTE *)(a1 + 474) = *(_BYTE *)(a2 + 474);
  *(_BYTE *)(a1 + 475) = *(_BYTE *)(a2 + 475);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  *(_BYTE *)(a1 + 521) = *(_BYTE *)(a2 + 521);
  *(_BYTE *)(a1 + 522) = *(_BYTE *)(a2 + 522);
  *(_BYTE *)(a1 + 523) = *(_BYTE *)(a2 + 523);
  *(_BYTE *)(a1 + 524) = *(_BYTE *)(a2 + 524);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  swift_bridgeObjectRelease();
  v19 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 608) = v19;
  v20 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v20;
  if (!*(_QWORD *)(a1 + 680))
  {
LABEL_15:
    v22 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v22;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    goto LABEL_16;
  }
  v21 = *(_QWORD *)(a2 + 680);
  if (!v21)
  {
    outlined destroy of ObjectInteractionResultsByHand(a1 + 656);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  swift_release();
LABEL_16:
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
  *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  *(_BYTE *)(a1 + 772) = *(_BYTE *)(a2 + 772);
  *(_BYTE *)(a1 + 773) = *(_BYTE *)(a2 + 773);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchFrameFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 774))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchFrameFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 760) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 772) = 0;
    *(_DWORD *)(result + 768) = 0;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 774) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 774) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchFrameFeatures()
{
  return &type metadata for PinchFrameFeatures;
}

void PinchAcceptorStaticHand.preProcess(_:)()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 34) = 0;
  *(_WORD *)(v0 + 32) = 0;
}

uint64_t PinchAcceptorStaticHand.process(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  float v5;
  float v6;

  v2 = *(unsigned __int8 *)(result + 192);
  v3 = *(unsigned __int8 *)(result + 460);
  if (*(_BYTE *)(v1 + 52) == 1
    && v3 != 0
    && *(float *)(v1 + 56) < *(float *)(result + 364)
    && *(float *)(v1 + 60) < *(float *)(result + 444))
  {
    v5 = *(float *)(result + 372);
    v6 = *(float *)(result + 536);
    *(_BYTE *)(v1 + 32) = 1;
    if (v6 < v5)
      *(_WORD *)(v1 + 33) = 257;
  }
  if ((v2 & v3) == 1)
    *(_BYTE *)(v1 + 34) = 1;
  return result;
}

uint64_t PinchAcceptorStaticHand.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorStaticHand()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchAcceptorStaticHand.ThresholdConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[12])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchAcceptorStaticHand.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchAcceptorStaticHand.ThresholdConfig()
{
  return &type metadata for PinchAcceptorStaticHand.ThresholdConfig;
}

id Enrolment.init(options:)(HandsKitConfig *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  objc_super v11;

  *(_DWORD *)&v1[OBJC_IVAR____TtC5Hands9Enrolment_rgbHandSigma] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusMean] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusSum] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusStd] = 0;
  v3 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthSum;
  v4 = v1;
  v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v5 + 16) = 27;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_QWORD *)&v1[v3] = v5;
  v6 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthMean;
  v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v7 + 16) = 27;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 124) = 0u;
  *(_QWORD *)&v4[v6] = v7;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_enrolmentFrameCount] = 0;
  v8 = &v4[OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_numOfPreEnrolmentFrames] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_numOfEnrolmentFrames] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_numOfIgnoredFrames] = 0;
  v4[OBJC_IVAR____TtC5Hands9Enrolment_isEnrollmentEnabled] = 0;
  v4[OBJC_IVAR____TtC5Hands9Enrolment_isSucceeded] = 0;
  v4[OBJC_IVAR____TtC5Hands9Enrolment_isLeftHandPreferred] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kHandRadiusMax] = 1041001422;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kHandRadiusMin] = 1034453341;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kHandSizeSigmaOverThreshold] = 1001803398;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kEnrolmentDefaultHandRadius] = 1037082667;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexIgnoreFrameEnd] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexPreEnrolmentEnd] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd] = 0;
  v4[OBJC_IVAR____TtC5Hands9Enrolment_enableCoreAnalytics] = 0;

  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for Enrolment();
  v9 = -[HandsKitConfig init](&v11, sel_init);
  Enrolment.reconfig(_:)(a1);

  return v9;
}

Swift::Void __swiftcall Enrolment.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = -[HandsKitConfig EnableEnrolment](a1, sel_EnableEnrolment);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_isEnrollmentEnabled) = v3;
  v4 = -[HandsKitConfig LeftHandPreferredForEnrolment](a1, sel_LeftHandPreferredForEnrolment);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_isLeftHandPreferred) = v4;
  v5 = -[HandsKitConfig NumOfIgnoredEnrolmentFrames](a1, sel_NumOfIgnoredEnrolmentFrames);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_21;
  v6 = OBJC_IVAR____TtC5Hands9Enrolment_numOfIgnoredFrames;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_numOfIgnoredFrames) = v5;
  v7 = -[HandsKitConfig NumOfPreEnrolmentFrames](a1, sel_NumOfPreEnrolmentFrames);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_21;
  v8 = OBJC_IVAR____TtC5Hands9Enrolment_numOfPreEnrolmentFrames;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_numOfPreEnrolmentFrames) = v7;
  v9 = -[HandsKitConfig NumOfEnrolmentFrames](a1, sel_NumOfEnrolmentFrames);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_21;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_numOfEnrolmentFrames) = v9;
  v10 = *(_DWORD *)(v1 + v6);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexIgnoreFrameEnd) = v10;
  v11 = *(_DWORD *)(v1 + v8);
  v12 = __CFADD__(v10, v11);
  v13 = v10 + v11;
  if (v12)
  {
    __break(1u);
    goto LABEL_19;
  }
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexPreEnrolmentEnd) = v13;
  v12 = __CFADD__(v13, v9);
  v14 = v13 + v9;
  if (v12)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v12 = v14 != 0;
  v15 = v14 - 1;
  if (!v12)
    goto LABEL_20;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd) = v15;
  if (-[HandsKitConfig EnableCoreAnalytics](a1, sel_EnableCoreAnalytics))
    v16 = !-[HandsKitConfig ARKitReplayMode](a1, sel_ARKitReplayMode);
  else
    v16 = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands9Enrolment_enableCoreAnalytics) = v16;
  v23 = xmmword_23D9A8B80;
  v24 = 0;
  v25 = 0;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v22[0] = 0xD000000000000017;
  v22[1] = 0x800000023D9C9BD0;
  v17 = -[HandsKitConfig EnableCoreAnalytics](a1, sel_EnableCoreAnalytics);
  v18 = v17 == 0;
  if (v17)
    v19 = 1702195828;
  else
    v19 = 0x65736C6166;
  if (v18)
    v20 = 0xE500000000000000;
  else
    v20 = 0xE400000000000000;
  v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v22[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 67, 0, (uint64_t *)&v23, (uint64_t)v22, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
}

_QWORD *Enrolment.handNotInFOVEnrollmentStatus(enrolmentFrameCount:input:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  _DWORD *v8;
  char v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  _QWORD *result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[35];

  v7 = *(_QWORD *)(a2 + 72);
  if (*(_BYTE *)(a2 + 80) == 1)
  {
    if (v7 != 1)
    {
      v8 = (_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd);
      if (*(_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd) >= a1 || !v7)
      {
        v9 = 1;
LABEL_20:
        v18 = *(_DWORD *)(a2 + 84);
        v19 = *(_QWORD *)(a2 + 128);
        v20 = *(_BYTE *)(a2 + 136);
        v21 = *(_DWORD *)(a2 + 176);
        v22 = *(_QWORD *)(a2 + 184);
        v23 = *(_OWORD *)(a2 + 224);
        v24 = *(_OWORD *)(a2 + 240);
        v25 = *(_OWORD *)(a2 + 256);
        v26 = *(_OWORD *)(a2 + 272);
        v27 = *(_OWORD *)(a2 + 288);
        v28 = *(_OWORD *)(a2 + 304);
        v29 = *(_QWORD *)(a2 + 360);
        v30 = *(_QWORD *)(a2 + 384);
        v31 = *(_BYTE *)(a2 + 392);
        v32 = *(_QWORD *)(a2 + 396);
        v33 = *(_DWORD *)(a2 + 404);
        v34 = *(_DWORD *)(a2 + 408);
        v35 = *(_BYTE *)(a2 + 444);
        v36 = *(_BYTE *)(a2 + 464);
        v37 = *(_OWORD *)(a2 + 472);
        v38 = *(_QWORD *)(a2 + 488);
        v39 = *(_QWORD *)(a2 + 528);
        v40 = *(_QWORD *)(a2 + 536);
        v41 = *(_QWORD *)(a2 + 544);
        *(_QWORD *)&v47[0] = *(_QWORD *)a2;
        *(_OWORD *)((char *)v47 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)((char *)&v47[1] + 8) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)((char *)&v47[2] + 8) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)((char *)&v47[3] + 8) = *(_OWORD *)(a2 + 56);
        *((_QWORD *)&v47[4] + 1) = v7;
        LOBYTE(v47[5]) = v9;
        DWORD1(v47[5]) = v18;
        *((_QWORD *)&v47[5] + 1) = *(_QWORD *)(a2 + 88);
        v42 = *(_OWORD *)(a2 + 112);
        v47[6] = *(_OWORD *)(a2 + 96);
        v47[7] = v42;
        *(_QWORD *)&v47[8] = v19;
        BYTE8(v47[8]) = v20;
        v43 = *(_OWORD *)(a2 + 160);
        v47[9] = *(_OWORD *)(a2 + 144);
        v47[10] = v43;
        LODWORD(v47[11]) = v21;
        *((_QWORD *)&v47[11] + 1) = v22;
        v44 = *(_OWORD *)(a2 + 208);
        v47[12] = *(_OWORD *)(a2 + 192);
        v47[13] = v44;
        v47[14] = v23;
        v47[15] = v24;
        v47[16] = v25;
        v47[17] = v26;
        v47[18] = v27;
        v47[19] = v28;
        v45 = *(_OWORD *)(a2 + 336);
        v47[20] = *(_OWORD *)(a2 + 320);
        v47[21] = v45;
        *(_QWORD *)&v47[22] = *(_QWORD *)(a2 + 352);
        *((_QWORD *)&v47[22] + 1) = v29;
        v47[23] = *(_OWORD *)(a2 + 368);
        *(_QWORD *)&v47[24] = v30;
        BYTE8(v47[24]) = v31;
        *(_QWORD *)((char *)&v47[24] + 12) = v32;
        *(_QWORD *)((char *)&v47[25] + 4) = __PAIR64__(v34, v33);
        *(_OWORD *)((char *)&v47[25] + 12) = *(_OWORD *)(a2 + 412);
        *(_OWORD *)((char *)&v47[26] + 12) = *(_OWORD *)(a2 + 428);
        BYTE12(v47[27]) = v35;
        v47[28] = *(_OWORD *)(a2 + 448);
        LOBYTE(v47[29]) = v36;
        *(_OWORD *)((char *)&v47[29] + 8) = v37;
        *((_QWORD *)&v47[30] + 1) = v38;
        v46 = *(_OWORD *)(a2 + 512);
        v47[31] = *(_OWORD *)(a2 + 496);
        v47[32] = v46;
        *(_QWORD *)&v47[33] = v39;
        *((_QWORD *)&v47[33] + 1) = v40;
        *(_QWORD *)&v47[34] = v41;
        memcpy(a3, v47, 0x228uLL);
        return outlined retain of HandsKitData(v47);
      }
      goto LABEL_13;
    }
LABEL_7:
    v10 = *(double *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime);
    v11 = *(_BYTE *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime + 8);
    if ((v11 & 1) == 0)
      v10 = CACurrentMediaTime() - v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 2;
    *(_QWORD *)(a2 + 72) = 2;
    v9 = 1;
    *(_BYTE *)(a2 + 80) = 1;
    *(_DWORD *)(a2 + 92) = 0;
    v12 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a2 + 84) = 1037082667;
    *(_DWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = v12;
    *(_QWORD *)(a2 + 104) = v12;
    *(_QWORD *)(a2 + 112) = v12;
    *(_QWORD *)(a2 + 120) = v12;
    *(double *)(a2 + 128) = v10;
    *(_BYTE *)(a2 + 136) = v11;
    v8 = (_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd);
    if (*(_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd) >= a1)
      goto LABEL_20;
    goto LABEL_13;
  }
  if (v7 == 1)
    goto LABEL_7;
  v8 = (_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd);
  if (*(_DWORD *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd) >= a1 || !v7)
  {
    v9 = 0;
    goto LABEL_20;
  }
LABEL_13:
  v13 = v3 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime;
  v14 = *(double *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime);
  v15 = *(_BYTE *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime + 8);
  if ((v15 & 1) == 0)
    v14 = CACurrentMediaTime() - v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  v7 = 4;
  *(_QWORD *)(a2 + 72) = 4;
  v9 = 1;
  *(_BYTE *)(a2 + 80) = 1;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 84) = 1037082667;
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 96) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 104) = v17;
  *(_QWORD *)(a2 + 112) = v17;
  *(_QWORD *)(a2 + 120) = v17;
  *(double *)(a2 + 128) = v14;
  *(_BYTE *)(a2 + 136) = v15;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC5Hands9Enrolment_enableCoreAnalytics) != 1)
    goto LABEL_20;
  if (*v8 != -1)
  {
    v7 = 4;
    if (*v8 + 1 == a1)
    {
      *(_QWORD *)&v47[0] = 4;
      BYTE8(v47[0]) = 1;
      *(_QWORD *)&v47[1] = 0;
      *((_QWORD *)&v47[1] + 1) = v17;
      HIDWORD(v47[0]) = 1037082667;
      *(_QWORD *)&v47[2] = v17;
      *((_QWORD *)&v47[2] + 1) = v17;
      *(_QWORD *)&v47[3] = v17;
      *((double *)&v47[3] + 1) = v14;
      LOBYTE(v47[4]) = v15;
      EnrollmentResults.sendCoreAnalytics()();
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void Enrolment.runSync(withInput:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  int v38;
  int32x4_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  double v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int32x4_t *v86;
  double v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int32x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  char **v100;
  unint64_t v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  char *v106;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v108;
  char *v109;
  float v110;
  unsigned int v111;
  char *v112;
  char v113;
  int32x4_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  double v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  float *v127;
  float v128;
  float v129;
  double v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  __int32 v141;
  double v142;
  __int8 v143;
  int32x4_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  int32x4_t *v174;
  char *v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int32x4_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int32x4_t v185[35];
  _QWORD v186[70];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v161 - v11;
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v161 - v15;
  v181.i64[0] = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v181.i64[0], v17);
  v19 = (char *)&v161 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v24 = (int32x4_t *)((char *)&v161 - v23);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC5Hands9Enrolment_isEnrollmentEnabled) & 1) == 0)
  {
    memcpy(v186, (const void *)a1, 0x228uLL);
    memcpy(a2, (const void *)a1, 0x228uLL);
    outlined retain of HandsKitData(v186);
    return;
  }
  v180 = v22;
  v171 = OBJC_IVAR____TtC5Hands9Enrolment_isEnrollmentEnabled;
  v25 = v2 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC5Hands9Enrolment_enrollmentStartTime + 8) == 1)
  {
    *(CFTimeInterval *)v25 = CACurrentMediaTime();
    *(_BYTE *)(v25 + 8) = 0;
  }
  v26 = *(_DWORD *)(v2 + OBJC_IVAR____TtC5Hands9Enrolment_enrolmentFrameCount);
  v27 = __CFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  v174 = v24;
  v175 = v16;
  v169 = v25;
  v176 = OBJC_IVAR____TtC5Hands9Enrolment_enrolmentFrameCount;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC5Hands9Enrolment_enrolmentFrameCount) = v28;
  memcpy(v186, (const void *)a1, 0x228uLL);
  v29 = v186[0];
  v30 = v180;
  v177 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v180 + 56);
  v177(v12, 1, 1, v181.i64[0]);
  v31 = *(_QWORD *)(v29 + 16);
  v179 = v2;
  v173 = a2;
  if (v31)
  {
    v172 = a1;
    v178 = OBJC_IVAR____TtC5Hands9Enrolment_isLeftHandPreferred;
    v32 = v29 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    outlined retain of HandsKitData(v186);
    v33 = v29;
    v34 = *(_QWORD *)(v30 + 72);
    v170 = v33;
    swift_bridgeObjectRetain();
    v2 = v179;
    while (1)
    {
      outlined init with copy of HandDescriptor(v32, (uint64_t)v19);
      outlined init with copy of HandDescriptor?((uint64_t)v12, (uint64_t)v8);
      v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
      v36 = v35(v8, 1, v181.i64[0]);
      outlined destroy of HandDescriptor?((uint64_t)v8);
      if (v36 == 1)
      {
        outlined destroy of HandDescriptor?((uint64_t)v12);
        outlined init with copy of HandDescriptor((uint64_t)v19, (uint64_t)v12);
        v177(v12, 0, 1, v181.i64[0]);
      }
      if (*(unsigned __int8 *)(v2 + v178) == v19[136])
        break;
      outlined destroy of HandDescriptor((uint64_t)v19);
      v32 += v34;
      --v31;
      v30 = v180;
      if (!v31)
      {
        swift_bridgeObjectRelease();
        a1 = v172;
        a2 = v173;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of HandDescriptor?((uint64_t)v12);
    v37 = (uint64_t)v175;
    outlined init with take of HandDescriptor((uint64_t)v19, (uint64_t)v175);
    v177((char *)v37, 0, 1, v181.i64[0]);
    outlined release of HandsKitData(v186);
    a1 = v172;
    a2 = v173;
    v38 = v35((char *)v37, 1, v181.i64[0]);
  }
  else
  {
    outlined retain of HandsKitData(v186);
LABEL_14:
    v37 = (uint64_t)v175;
    outlined init with take of HandDescriptor?((uint64_t)v12, (uint64_t)v175);
    outlined release of HandsKitData(v186);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v37, 1, v181.i64[0]);
  }
  if (v38 == 1)
  {
    outlined destroy of HandDescriptor?(v37);
LABEL_29:
    Enrolment.handNotInFOVEnrollmentStatus(enrolmentFrameCount:input:)(*(_DWORD *)(v2 + v176), a1, a2);
    return;
  }
  v39 = v174;
  outlined init with take of HandDescriptor(v37, (uint64_t)v174);
  v40 = v39[1].i64[0];
  if (!v40)
  {
    outlined destroy of HandDescriptor((uint64_t)v39);
    goto LABEL_29;
  }
  v41 = v39[1].i64[1];
  v42 = v39[2].i64[0];
  v43 = v39[2].i64[1];
  v44 = v39[3].i64[0];
  v45 = v39[3].i64[1];
  v46 = v39[4].i64[0];
  v48 = v39[4].i64[1];
  v47 = v39[5].i64[0];
  v49 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v39[5].i64[1];
  v50 = v39[6].i64[0];
  v51 = v39[6].i64[1];
  v52 = v39[7].i64[0];
  v53 = v39[7].i64[1];
  v54 = v39[8].u64[0];
  v55 = *(_QWORD *)(a1 + 472);
  v180 = v43;
  v181.i64[0] = v44;
  v177 = v49;
  v178 = v47;
  v175 = (char *)v50;
  v170 = v51;
  v167 = v53;
  v168 = v52;
  if (v55 && (v56 = *(_QWORD *)(a1 + 480)) != 0 && (v174[12].i8[0] & 1) == 0)
  {
    v71 = v174[11].i64[0];
    v72 = v174[11].i64[1];
    v185[0] = v174[10];
    v185[1].i64[0] = v71;
    v185[1].i64[1] = v72;
    v162 = v46;
    v163 = v45;
    v164 = v48;
    v165 = v41;
    v166 = v42;
    outlined copy of HandPose?(v40);
    swift_retain();
    swift_retain();
    v172 = v56;
    if (!specialized static Enrolment.isInMCAMFov(handCenter:mcamLeftCalib:mcamRightCalib:)(v185, v55, v56))
    {
      outlined consume of HandPose?(v40);
      v185[0] = (int32x4_t)xmmword_23D9B1300;
      v185[1] = 0uLL;
      v184 = MEMORY[0x24BEE0D00];
      v182 = 0xD000000000000058;
      v183 = 0x800000023D9CE440;
      specialized static HLog.W(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 157, 0, v185[0].i64, (uint64_t)&v182, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
      Enrolment.handNotInFOVEnrollmentStatus(enrolmentFrameCount:input:)(*(_DWORD *)(v179 + v176), a1, v173);
      swift_release();
      swift_release();
      outlined destroy of HandDescriptor((uint64_t)v174);
      return;
    }
    v59 = v165;
    v57 = v166;
    swift_release();
    swift_release();
    v45 = v163;
    v48 = v164;
    v46 = v162;
  }
  else
  {
    v57 = v42;
    v58 = v41;
    swift_bridgeObjectRetain();
    v59 = v58;
    swift_bridgeObjectRetain();
  }
  v60 = v179;
  if (*(_BYTE *)(v179 + v171) != 1 || (*(_BYTE *)(v179 + OBJC_IVAR____TtC5Hands9Enrolment_isSucceeded) & 1) != 0)
  {
    outlined consume of HandPose?(v40);
    outlined destroy of HandDescriptor((uint64_t)v174);
LABEL_26:
    v61 = v173;
LABEL_27:
    memcpy(v185, (const void *)a1, 0x228uLL);
    memcpy(v61, (const void *)a1, 0x228uLL);
    outlined retain of HandsKitData(v185);
    return;
  }
  v172 = a1;
  v62 = OBJC_IVAR____TtC5Hands9Enrolment_numOfIgnoredFrames;
  if (*(_DWORD *)(v179 + v176) < *(_DWORD *)(v179 + OBJC_IVAR____TtC5Hands9Enrolment_numOfIgnoredFrames))
  {
    outlined consume of HandPose?(v40);
    v185[0] = (int32x4_t)xmmword_23D9B1300;
    v185[1] = 0uLL;
    v184 = MEMORY[0x24BEE0D00];
    v182 = 0xD000000000000047;
    v183 = 0x800000023D9CE3F0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_23D9A7050;
    v64 = *(_DWORD *)(v60 + v176);
    v65 = MEMORY[0x24BEE44F0];
    v66 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v63 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v63 + 64) = v66;
    *(_DWORD *)(v63 + 32) = v64;
    v67 = *(_DWORD *)(v60 + v62);
    *(_QWORD *)(v63 + 96) = v65;
    *(_QWORD *)(v63 + 104) = v66;
    *(_DWORD *)(v63 + 72) = v67;
    specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 165, 0, v185[0].i64, (uint64_t)&v182, v63);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
    v68 = *(double *)v169;
    v69 = *(_BYTE *)(v169 + 8);
    if ((v69 & 1) == 0)
      v68 = CACurrentMediaTime() - v68;
    outlined destroy of HandDescriptor((uint64_t)v174);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v172;
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = 2;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 84) = 1037082667;
    v70 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a1 + 104) = v70;
    *(_QWORD *)(a1 + 112) = v70;
    *(_QWORD *)(a1 + 120) = v70;
    *(double *)(a1 + 128) = v68;
    *(_BYTE *)(a1 + 136) = v69;
    goto LABEL_26;
  }
  v162 = OBJC_IVAR____TtC5Hands9Enrolment_isSucceeded;
  v171 = HIDWORD(v54);
  v185[0].i64[0] = v40;
  v185[0].i64[1] = v59;
  v165 = v59;
  v166 = v57;
  v185[1].i64[0] = v57;
  v185[1].i64[1] = v180;
  v185[2].i64[0] = v181.i64[0];
  v185[2].i64[1] = v45;
  v185[3].i64[0] = v46;
  v185[3].i64[1] = v48;
  v185[4].i64[0] = v178;
  v185[4].i64[1] = (uint64_t)v177;
  v185[5].i64[0] = (uint64_t)v175;
  v185[5].i64[1] = v170;
  v73 = v170;
  v185[6].i64[0] = v168;
  v185[6].i64[1] = v167;
  v74 = v167;
  v161 = v54;
  LODWORD(v163) = v54 & 1;
  v185[7].i16[0] = v54 & 0x101;
  v164 = v48;
  v185[7].i32[1] = HIDWORD(v54);
  specialized static HandsKitUtils.calcHandSize(forPose:)((uint64_t)v185);
  v185[0].i64[0] = v40;
  v185[0].i64[1] = v165;
  v76 = v75 * 0.3918;
  v185[1].i64[0] = v166;
  v185[1].i64[1] = v180;
  v185[2].i64[0] = v181.i64[0];
  v185[2].i64[1] = v45;
  v185[3].i64[0] = v46;
  v185[3].i64[1] = v48;
  v185[4].i64[0] = v178;
  v185[4].i64[1] = (uint64_t)v177;
  v185[5].i64[1] = v73;
  v185[5].i64[0] = (uint64_t)v175;
  v185[6].i64[1] = v74;
  v185[6].i64[0] = v168;
  v185[7].i8[0] = v163;
  v185[7].i8[1] = BYTE1(v54) & 1;
  v185[7].i32[1] = v171;
  v77 = specialized static HandsKitUtils.calcBoneLengths(forPose:)((uint64_t)v185);
  outlined consume of HandPose?(v40);
  v78 = *(_DWORD *)(v60 + v176);
  v79 = OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexPreEnrolmentEnd;
  if (v78 < *(_DWORD *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexPreEnrolmentEnd))
  {
    v80 = v176;
    swift_bridgeObjectRelease();
    v185[0] = (int32x4_t)xmmword_23D9B1300;
    v185[1] = 0uLL;
    v184 = MEMORY[0x24BEE0D00];
    v182 = 0xD00000000000003CLL;
    v183 = 0x800000023D9CE3B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_23D9A7050;
    v82 = *(_DWORD *)(v60 + v80);
    v83 = MEMORY[0x24BEE44F0];
    v84 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v81 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v81 + 64) = v84;
    *(_DWORD *)(v81 + 32) = v82;
    v85 = *(_DWORD *)(v60 + v79);
    *(_QWORD *)(v81 + 96) = v83;
    *(_QWORD *)(v81 + 104) = v84;
    *(_DWORD *)(v81 + 72) = v85;
    specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 176, 0, v185[0].i64, (uint64_t)&v182, v81);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
    v86 = v174;
    if (v76 < 0.13713 && v76 > 0.082278)
    {
      v87 = *(double *)v169;
      v88 = *(_BYTE *)(v169 + 8);
      if ((v88 & 1) == 0)
        v87 = CACurrentMediaTime() - v87;
      outlined destroy of HandDescriptor((uint64_t)v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v172;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = 2;
      *(_BYTE *)(a1 + 80) = 1;
      *(float *)(a1 + 84) = v76;
      *(_QWORD *)(a1 + 88) = 0;
      v89 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(a1 + 104) = v89;
      *(_QWORD *)(a1 + 112) = v89;
      *(_QWORD *)(a1 + 120) = v89;
      *(double *)(a1 + 128) = v87;
      *(_BYTE *)(a1 + 136) = v88;
      goto LABEL_26;
    }
    v114 = v174;
    goto LABEL_69;
  }
  v90 = OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd;
  v91 = *(_DWORD *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_kFrameIndexEnrolmentEnd);
  v92 = v174;
  if (v78 >= v91)
  {
    swift_bridgeObjectRelease();
    if (*(_DWORD *)(v60 + v176) != *(_DWORD *)(v60 + v90))
    {
      v114 = v92;
LABEL_69:
      outlined destroy of HandDescriptor((uint64_t)v114);
      a1 = v172;
      goto LABEL_26;
    }
    v181 = (int32x4_t)xmmword_23D9B1300;
    v185[0] = (int32x4_t)xmmword_23D9B1300;
    v185[1] = 0uLL;
    v115 = MEMORY[0x24BEE0D00];
    v184 = MEMORY[0x24BEE0D00];
    v182 = 0xD000000000000011;
    v183 = 0x800000023D9CE1F0;
    specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 205, 0, v185[0].i64, (uint64_t)&v182, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
    v116 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusStd;
    v117 = v60;
    v118 = sqrtf(*(float *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusStd)/ (float)*(unsigned int *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount));
    v119 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusMean;
    v120 = *(float *)(v117 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusMean);
    if (v120 < 0.13713 && v120 > 0.082278 && v118 > 0.0 && v118 < 0.0055636)
    {
      v180 = (uint64_t)"enableCoreAnalytics";
      v122 = *(double *)v169;
      v123 = *(_BYTE *)(v169 + 8);
      v124 = v115;
      if ((v123 & 1) == 0)
        v122 = CACurrentMediaTime() - v122;
      v136 = v172;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v136 + 72) = 0;
      *(_BYTE *)(v136 + 80) = 1;
      *(float *)(v136 + 84) = v120;
      *(_QWORD *)(v136 + 88) = 0;
      v137 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v136 + 96) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v136 + 104) = v137;
      *(_QWORD *)(v136 + 112) = v137;
      *(_QWORD *)(v136 + 120) = v137;
      *(double *)(v136 + 128) = v122;
      *(_BYTE *)(v136 + 136) = v123;
      a1 = v136;
      v138 = v179;
      *(_BYTE *)(v179 + v162) = 1;
      v139 = (uint64_t *)(v138 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthMean);
      swift_beginAccess();
      v140 = *v139;
      v141 = *(_DWORD *)(v138 + v119);
      v142 = *(double *)v169;
      v143 = *(_BYTE *)(v169 + 8);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if ((v143 & 1) == 0)
        v142 = CACurrentMediaTime() - v142;
      v185[0] = v181;
      v185[1] = 0uLL;
      v184 = v124;
      v182 = 0xD00000000000002FLL;
      v183 = 0x800000023D9CE340;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v149 = swift_allocObject();
      v150 = *(_DWORD *)(v138 + v119);
      v151 = MEMORY[0x24BEE14E8];
      *(_OWORD *)(v149 + 16) = xmmword_23D9A70A0;
      v152 = MEMORY[0x24BEE1568];
      *(_QWORD *)(v149 + 56) = v151;
      *(_QWORD *)(v149 + 64) = v152;
      *(_DWORD *)(v149 + 32) = v150;
      specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, v180 | 0x8000000000000000, 221, 2, v185[0].i64, (uint64_t)&v182, v149);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v153 = 0;
      *(_QWORD *)(v136 + 72) = 0;
      *(_BYTE *)(v136 + 80) = 1;
      *(_DWORD *)(v136 + 84) = v141;
      *(_QWORD *)(v136 + 88) = 0;
      *(_QWORD *)(v136 + 96) = v140;
      v154 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v136 + 104) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v136 + 112) = v140;
      *(_QWORD *)(v136 + 120) = v154;
      *(double *)(v136 + 128) = v142;
      goto LABEL_91;
    }
    v133 = MEMORY[0x24BEE14E8];
    v134 = MEMORY[0x24BEE1568];
    v180 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount;
    if (v120 <= 0.13713)
    {
      v144 = v181;
      if (v120 >= 0.082278)
      {
        if (v118 <= 0.0055636)
        {
LABEL_90:
          v185[0] = v144;
          v185[1] = 0uLL;
          v184 = v115;
          v182 = 0xD00000000000003BLL;
          v183 = 0x800000023D9CE210;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v155 = swift_allocObject();
          *(_OWORD *)(v155 + 16) = xmmword_23D9A7050;
          v138 = v179;
          v156 = *(_DWORD *)(v179 + v116);
          *(_QWORD *)(v155 + 56) = v133;
          *(_QWORD *)(v155 + 64) = v134;
          *(_DWORD *)(v155 + 32) = v156;
          v157 = *(_DWORD *)(v138 + v119);
          *(_QWORD *)(v155 + 96) = v133;
          *(_QWORD *)(v155 + 104) = v134;
          *(_DWORD *)(v155 + 72) = v157;
          specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 231, 2, v185[0].i64, (uint64_t)&v182, v155);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
          *(_DWORD *)(v138 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusSum) = 0;
          *(_DWORD *)(v138 + v176) = 0;
          *(_DWORD *)(v138 + v180) = 0;
          *(_DWORD *)(v138 + v116) = 0;
          v158 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v158 + 16) = 27;
          *(_OWORD *)(v158 + 32) = 0u;
          *(_OWORD *)(v158 + 48) = 0u;
          *(_OWORD *)(v158 + 64) = 0u;
          *(_OWORD *)(v158 + 80) = 0u;
          *(_OWORD *)(v158 + 96) = 0u;
          *(_OWORD *)(v158 + 112) = 0u;
          *(_OWORD *)(v158 + 124) = 0u;
          v159 = (uint64_t *)(v138 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthSum);
          v143 = 1;
          swift_beginAccess();
          *v159 = v158;
          swift_bridgeObjectRelease();
          v160 = v169;
          *(_QWORD *)v169 = 0;
          *(_BYTE *)(v160 + 8) = 1;
          a1 = v172;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v153 = 3;
          *(_QWORD *)(a1 + 72) = 3;
          *(_BYTE *)(a1 + 80) = 1;
          *(_QWORD *)(a1 + 88) = 0;
          *(_DWORD *)(a1 + 84) = 1037082667;
          v140 = MEMORY[0x24BEE4AF8];
          *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE4AF8];
          *(_QWORD *)(a1 + 104) = v140;
          *(_QWORD *)(a1 + 112) = v140;
          *(_QWORD *)(a1 + 120) = v140;
          *(_QWORD *)(a1 + 128) = 0;
          v142 = 0.0;
          v141 = 1037082667;
LABEL_91:
          *(_BYTE *)(a1 + 136) = v143;
          v61 = v173;
          if (*(_BYTE *)(v138 + OBJC_IVAR____TtC5Hands9Enrolment_enableCoreAnalytics) == 1)
          {
            v185[0].i64[0] = v153;
            v185[0].i8[8] = 1;
            v185[0].i32[3] = v141;
            v185[1].i64[0] = 0;
            v185[1].i64[1] = v140;
            v185[2].i64[0] = MEMORY[0x24BEE4AF8];
            v185[2].i64[1] = v140;
            v185[3].i64[0] = MEMORY[0x24BEE4AF8];
            *(double *)&v185[3].i64[1] = v142;
            v185[4].i8[0] = v143;
            EnrollmentResults.sendCoreAnalytics()();
            a1 = v172;
          }
          outlined destroy of HandDescriptor((uint64_t)v174);
          goto LABEL_27;
        }
        v185[0] = v181;
        v185[1] = 0uLL;
        v184 = v115;
        v182 = 0xD00000000000006DLL;
        v183 = 0x800000023D9CE250;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v145 = v134;
        v146 = v115;
        v147 = swift_allocObject();
        *(_OWORD *)(v147 + 16) = xmmword_23D9A7050;
        *(_QWORD *)(v147 + 56) = v133;
        *(_QWORD *)(v147 + 64) = v145;
        *(float *)(v147 + 32) = v118;
        *(_QWORD *)(v147 + 96) = v133;
        *(_QWORD *)(v147 + 104) = v145;
        *(_DWORD *)(v147 + 72) = 1001803398;
        v148 = 229;
      }
      else
      {
        v185[0] = v181;
        v185[1] = 0uLL;
        v184 = v115;
        v182 = 0xD00000000000003ALL;
        v183 = 0x800000023D9CE2C0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v145 = v134;
        v146 = v115;
        v147 = swift_allocObject();
        *(_OWORD *)(v147 + 16) = xmmword_23D9A7050;
        *(_QWORD *)(v147 + 56) = v133;
        *(_QWORD *)(v147 + 64) = v145;
        *(float *)(v147 + 32) = v120;
        *(_QWORD *)(v147 + 96) = v133;
        *(_QWORD *)(v147 + 104) = v145;
        *(_DWORD *)(v147 + 72) = 1034453341;
        v148 = 227;
      }
      specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, v148, 2, v185[0].i64, (uint64_t)&v182, v147);
      v115 = v146;
      v134 = v145;
    }
    else
    {
      v185[0] = v181;
      v185[1] = 0uLL;
      v184 = v115;
      v182 = 0xD000000000000039;
      v183 = 0x800000023D9CE300;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v135 = swift_allocObject();
      *(_OWORD *)(v135 + 16) = xmmword_23D9A7050;
      *(_QWORD *)(v135 + 56) = v133;
      *(_QWORD *)(v135 + 64) = v134;
      *(float *)(v135 + 32) = v120;
      *(_QWORD *)(v135 + 96) = v133;
      *(_QWORD *)(v135 + 104) = v134;
      *(_DWORD *)(v135 + 72) = 1041001422;
      specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 225, 2, v185[0].i64, (uint64_t)&v182, v135);
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
    v144 = v181;
    goto LABEL_90;
  }
  v185[0] = (int32x4_t)xmmword_23D9B1300;
  v185[1] = 0uLL;
  v184 = MEMORY[0x24BEE0D00];
  v182 = 0xD000000000000034;
  v183 = 0x800000023D9CE370;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_23D9A7050;
  v94 = MEMORY[0x24BEE44F0];
  v95 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v93 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v93 + 64) = v95;
  *(_DWORD *)(v93 + 32) = v78;
  *(_QWORD *)(v93 + 96) = v94;
  *(_QWORD *)(v93 + 104) = v95;
  *(_DWORD *)(v93 + 72) = v91;
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000063, 0x800000023D9CE180, 185, 0, v185[0].i64, (uint64_t)&v182, v93);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v182);
  v96 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusSum;
  *(float *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusSum) = v76
                                                                      + *(float *)(v60
                                                                                 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusSum);
  v97 = OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount;
  v98 = *(_DWORD *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount);
  v27 = __CFADD__(v98, 1);
  v99 = v98 + 1;
  if (!v27)
  {
    *(_DWORD *)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusLocalCount) = v99;
    v100 = (char **)(v60 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthSum);
    swift_beginAccess();
    v101 = *((_QWORD *)*v100 + 2);
    if (!v101)
    {
      swift_bridgeObjectRelease();
LABEL_71:
      v125 = v179;
      v126 = *(_DWORD *)(v179 + v97);
      if (v126 == 1)
        v127 = (float *)v92;
      else
        v127 = (float *)(v179 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusMean);
      v128 = *v127;
      v129 = *(float *)(v179 + v96) / (float)v126;
      *(float *)(v179 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusMean) = v129;
      *(float *)(v125 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusStd) = *(float *)(v125
                                                                                      + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandRadiusStd)
                                                                           + (float)((float)(v76 - v128)
                                                                                   * (float)(v76 - v129));
      v130 = *(double *)v169;
      v131 = *(_BYTE *)(v169 + 8);
      if ((v131 & 1) == 0)
        v130 = CACurrentMediaTime() - v130;
      outlined destroy of HandDescriptor((uint64_t)v92);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v172;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = 2;
      *(_BYTE *)(a1 + 80) = 1;
      *(float *)(a1 + 84) = v129;
      *(_QWORD *)(a1 + 88) = 0;
      v132 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(a1 + 104) = v132;
      *(_QWORD *)(a1 + 112) = v132;
      *(_QWORD *)(a1 + 120) = v132;
      *(double *)(a1 + 128) = v130;
      *(_BYTE *)(a1 + 136) = v131;
      goto LABEL_26;
    }
    v181.i64[0] = v96;
    if (v101 > *(_QWORD *)(v77 + 16))
      goto LABEL_99;
    v102 = (char **)(v179 + OBJC_IVAR____TtC5Hands9Enrolment_rgbHandBoneLengthMean);
    v103 = -(uint64_t)v101;
    v104 = 8;
    while (1)
    {
      v105 = *(float *)(v77 + 4 * v104);
      swift_beginAccess();
      v106 = *v100;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v100 = v106;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
        *v100 = v106;
      }
      v108 = v104 - 8;
      if ((unint64_t)(v104 - 8) >= *((_QWORD *)v106 + 2))
        goto LABEL_95;
      *(float *)&v106[4 * v104] = v105 + *(float *)&v106[4 * v104];
      v109 = *v100;
      swift_endAccess();
      if (v108 >= *((_QWORD *)v109 + 2))
        goto LABEL_96;
      v110 = *(float *)&v109[4 * v104];
      v111 = *(_DWORD *)(v179 + v97);
      swift_beginAccess();
      v112 = *v102;
      v113 = swift_isUniquelyReferenced_nonNull_native();
      *v102 = v112;
      if ((v113 & 1) == 0)
      {
        v112 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v112);
        *v102 = v112;
      }
      if (v108 >= *((_QWORD *)v112 + 2))
        goto LABEL_97;
      *(float *)&v112[4 * v104] = v110 / (float)v111;
      swift_endAccess();
      ++v104;
      if (v103 + v104 == 8)
      {
        swift_bridgeObjectRelease();
        v92 = v174;
        v96 = v181.i64[0];
        goto LABEL_71;
      }
    }
  }
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
}

id Enrolment.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Enrolment();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for Enrolment()
{
  return objc_opt_self();
}

BOOL specialized static Enrolment.isInMCAMFov(handCenter:mcamLeftCalib:mcamRightCalib:)(int32x4_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  CMTimeValue value;
  uint64_t v9;
  CMTimeEpoch epoch;
  __int128 v11;
  uint64_t v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 result;
  uint64_t v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  id v39;
  int32x4_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  float32x4_t v48;
  char v49;
  _QWORD v50[4];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  CMTime v66;
  simd_float4x4 v67;

  v65 = *MEMORY[0x24BDAC8D0];
  v41 = a1[1];
  v39 = (id)objc_opt_self();
  v47 = 0;
  v4 = 0;
  v32 = a3 + 144;
  v37 = (float32x4_t)vdupq_laneq_s32(v41, 2);
  v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1);
  while (1)
  {
    v5 = (char *)&outlined read-only object #0 of static Enrolment.isInMCAMFov(handCenter:mcamLeftCalib:mcamRightCalib:)
       + v4;
    v6 = *((_QWORD *)v5 + 4);
    v7 = v5[40];
    v66 = CMTime.init(seconds:preferredTimescale:)(0.0, 1000000);
    value = v66.value;
    v9 = *(_QWORD *)&v66.timescale;
    epoch = v66.epoch;
    if (v7 == 1)
      __asm { BR              X8 ; loc_23D7D6234 loc_23D7D6238 }
    v12 = v6 ? a3 : a2;
    swift_beginAccess();
    switch(v6)
    {
      case 2:
        v11 = xmmword_23D9B1360;
        break;
      case 3:
        v11 = xmmword_23D9B1350;
        break;
      case 4:
        v11 = xmmword_23D9B1340;
        break;
      case 5:
        v11 = xmmword_23D9B1330;
        break;
      case 6:
        v11 = xmmword_23D9B1320;
        break;
      case 7:
        v11 = xmmword_23D9B1310;
        break;
      default:
        v11 = 0uLL;
        break;
    }
    v13 = COERCE_DOUBLE(vcvt_f32_u32(*(uint32x2_t *)(v12 + 144)));
    v50[0] = 0;
    v50[1] = value;
    v50[2] = v9;
    v50[3] = epoch;
    v51 = 0u;
    v52 = 0u;
    v53 = v12;
    v54 = v6;
    v55 = v7;
    v56 = 0;
    v57 = v11;
    v58 = xmmword_23D9AB950;
    v59 = xmmword_23D9AB950;
    v60 = 0;
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    v61 = v14;
    v62 = v14;
    v63 = -1;
    v64 = v13;
    if ((*(_BYTE *)(v12 + 400) & 1) != 0)
    {
      swift_beginAccess();
      v67 = __invert_f4(*(simd_float4x4 *)(v12 + 192));
      *(simd_float4x4 *)(v12 + 256) = v67;
      v67.columns[0].i32[3] = v33;
      v67.columns[1].i32[3] = v34;
      v67.columns[2].i32[3] = v35;
      *(_BYTE *)(v12 + 320) = 0;
      v67.columns[3].i32[3] = v36;
      *(simd_float4x4 *)(v12 + 336) = v67;
      *(_BYTE *)(v12 + 400) = 0;
      v15 = v67.columns[0].i64[1];
      v16 = v67.columns[0].i64[0];
      v17 = v67.columns[1].i64[1];
      v18 = v67.columns[1].i64[0];
      v19 = v67.columns[2].i64[1];
      v20 = v67.columns[2].i64[0];
      v21 = v67.columns[3].i64[1];
      v22 = v67.columns[3].i64[0];
    }
    else
    {
      v22 = *(_QWORD *)(v12 + 384);
      v21 = *(_QWORD *)(v12 + 392);
      v20 = *(_QWORD *)(v12 + 368);
      v19 = *(_QWORD *)(v12 + 376);
      v18 = *(_QWORD *)(v12 + 352);
      v17 = *(_QWORD *)(v12 + 360);
      v16 = *(_QWORD *)(v12 + 336);
      v15 = *(_QWORD *)(v12 + 344);
    }
    v23.i64[0] = v16;
    v23.i64[1] = v15;
    v24.i64[0] = v18;
    v24.i64[1] = v17;
    v25 = vmlaq_f32(vmulq_n_f32(v23, *(float *)v41.i32), v38, v24);
    v24.i64[0] = v20;
    v24.i64[1] = v19;
    v26.i64[0] = v22;
    v26.i64[1] = v21;
    v27 = vaddq_f32(vmlaq_f32(v25, v37, v24), v26);
    v27.i32[3] = v48.i32[3];
    v48 = v27;
    v49 = 0;
    swift_beginAccess();
    v44 = *(_OWORD *)(v12 + 80);
    v45 = *(_OWORD *)(v12 + 96);
    v43 = *(_OWORD *)(v12 + 64);
    swift_beginAccess();
    v42 = *(_OWORD *)(v12 + 112);
    swift_beginAccess();
    v28 = *(_BYTE *)(v12 + 24) ? *(_QWORD *)(v12 + 16) != 0 : -1;
    swift_retain();
    objc_msgSend(v39, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v28, &v49, *(double *)v48.i64, *(double *)&v43, *(double *)&v44, *(double *)&v45, *(double *)&v42, v13, v32);
    v46 = v29;
    outlined release of ImageData((uint64_t)v50);
    if (v49 != 1)
      break;
    if (*(float *)&v46 <= 0.0 || *(float *)&v46 >= 1.0)
      break;
    result = *((float *)&v46 + 1) < 1.0 && *((float *)&v46 + 1) > 0.0;
    if (v47 | result)
      return result;
LABEL_3:
    v47 = 1;
    v4 = 0x10u;
  }
  if ((v47 & 1) == 0)
    goto LABEL_3;
  return 0;
}

uint64_t MissingFingerReconstruction.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MissingFingerReconstruction()
{
  return objc_opt_self();
}

uint64_t MissingFingerReconstruction.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = &outlined read-only object #0 of MissingFingerReconstruction.init();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[ARVinoJointIndexes]>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_23D9A96F0;
  *(_QWORD *)(v1 + 32) = &outlined read-only object #1 of MissingFingerReconstruction.init();
  *(_QWORD *)(v1 + 40) = &outlined read-only object #2 of MissingFingerReconstruction.init();
  *(_QWORD *)(v1 + 48) = &outlined read-only object #3 of MissingFingerReconstruction.init();
  *(_QWORD *)(v1 + 56) = &outlined read-only object #4 of MissingFingerReconstruction.init();
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 64) = &outlined read-only object #5 of MissingFingerReconstruction.init();
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v0 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 32) = &outlined read-only object #6 of MissingFingerReconstruction.init();
  *(_QWORD *)(v3 + 40) = &outlined read-only object #7 of MissingFingerReconstruction.init();
  *(_OWORD *)(v3 + 16) = xmmword_23D9A96F0;
  *(_QWORD *)(v3 + 48) = &outlined read-only object #8 of MissingFingerReconstruction.init();
  *(_QWORD *)(v3 + 56) = &outlined read-only object #9 of MissingFingerReconstruction.init();
  *(_QWORD *)(v3 + 64) = &outlined read-only object #10 of MissingFingerReconstruction.init();
  *(_QWORD *)(v3 + 72) = v2;
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = &outlined read-only object #11 of MissingFingerReconstruction.init();
  *(_QWORD *)(v0 + 48) = &outlined read-only object #12 of MissingFingerReconstruction.init();
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  return v0;
}

_QWORD *initializeBufferWithCopyOfBuffer for TntSingleHandSubsequence(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TntSingleHandSubsequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for TntSingleHandSubsequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for TntSingleHandSubsequence()
{
  return &type metadata for TntSingleHandSubsequence;
}

uint64_t TntSingleHandSubsequence.pushFrameFeature(_:)(void *__src)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  int64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE __dst[592];

  memcpy(__dst, __src, 0x242uLL);
  v2 = *(_QWORD **)v1;
  outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  result = (uint64_t)memcpy(&v2[74 * v4 + 4], __dst, 0x242uLL);
  *(_QWORD *)v1 = v2;
  v6 = v2[2];
  v7 = *(_QWORD *)(v1 + 8);
  if (v6)
    v8 = v7 < v6;
  else
    v8 = 0;
  if (v8)
  {
    while (1)
    {
      if (!v6)
      {
        __break(1u);
        goto LABEL_17;
      }
      v9 = v2;
      if ((unint64_t)(v6 - 1) > v2[3] >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, v6, 1, v2);
      swift_arrayDestroy();
      v10 = v9[2];
      if (!v10)
        break;
      result = (uint64_t)memmove(v9 + 4, v9 + 78, 592 * v10 - 592);
      v6 = v10 - 1;
      v9[2] = v10 - 1;
      if (v7 < v10 - 1)
      {
        v2 = v9;
        if (v10 != 1)
          continue;
      }
      *(_QWORD *)v1 = v9;
      return result;
    }
    *(_QWORD *)v1 = v2;
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall TntSingleHandSubsequence.getMakeFrameIndex(_:_:_:)(Swift::Int result, Swift::Float a2, Swift::Float a3)
{
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  const void *v6;
  uint64_t v7;
  char v10;
  char *v11;
  uint64_t v13;
  char v14;
  _BYTE v15[578];

  if (result < 0)
    goto LABEL_21;
  v4 = v3;
  v5 = result;
  if (*(_QWORD *)(v3 + 16) <= (unint64_t)result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = (const void *)(v3 + 32 + 592 * result);
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (!v7)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(float *)(*(_QWORD *)v6 + 4 * v7 + 28) < a2)
    return v5;
  memcpy(v15, v6, sizeof(v15));
  *(Swift::Int_optional *)&result = SingleHandFrameFeatures.getMakeFrameOffset(_:_:)(a2, a3);
  if ((v10 & 1) != 0)
  {
    if (!v5)
      return v5;
    v11 = (char *)(v4 + 592 * v5 - 560);
    while (v5-- >= 1)
    {
      if ((unint64_t)v5 >= *(_QWORD *)(v4 + 16))
        goto LABEL_18;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (!v13)
        goto LABEL_19;
      if (*(float *)(*(_QWORD *)v11 + 4 * v13 + 28) < a2)
        return v5;
      memcpy(v15, v11, sizeof(v15));
      *(Swift::Int_optional *)&result = SingleHandFrameFeatures.getMakeFrameOffset(_:_:)(a2, a3);
      if ((v14 & 1) == 0)
        goto LABEL_7;
      v11 -= 592;
      if (!v5)
        return v5;
    }
    goto LABEL_20;
  }
LABEL_7:
  if (!__OFADD__(v5, result))
    return (v5 + result) & ~((v5 + result) >> 63);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t TntSingleHandSubsequence.getMakeFrameFromBreakByScoreAheads(_:_:_:_:_:)(uint64_t *a1, Swift::Int a2, uint64_t a3, Swift::Float a4, float a5, float a6)
{
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  char *__src;

  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 16);
  if (!v15)
    goto LABEL_27;
  v6 = a3;
  v13 = a6;
  v12 = a5;
  v11 = a4;
  v7 = a2;
  v8 = v14 + 32;
  v9 = 2 * v15 - 1;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v16 + 16);
  swift_release();
  v10 = v9 >> 1;
  if (v17 != v9 >> 1)
    goto LABEL_28;
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  while (1)
  {
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v18 + 16);
    swift_release();
    if (!v19)
      break;
    v30 = v9;
    __src = (char *)v8;
    v9 = 0;
    v20 = v19 - 1;
    v13 = v13 + -0.2;
    v29 = v8 + 4 * v10;
    v8 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v21 = swift_dynamicCastClass();
      if (!v21)
      {
        swift_bridgeObjectRelease();
        v21 = v8;
      }
      v22 = *(_QWORD *)(v21 + 16);
      swift_release();
      if (v22 == v10)
      {
        v23 = (_QWORD *)swift_dynamicCastClass();
        if (!v23)
        {
          swift_bridgeObjectRelease();
          v23 = (_QWORD *)v8;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v23 = (_QWORD *)v8;
        if (v30 != 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          v23 = (_QWORD *)swift_allocObject();
          v25 = _swift_stdlib_malloc_size(v23);
          v26 = v25 - 32;
          if (v25 < 32)
            v26 = v25 - 29;
          v23[2] = v10;
          v23[3] = 2 * (v26 >> 2);
          v27 = v23 + 4;
          if (__src < (char *)v23 + 4 * v10 + 32 && (unint64_t)v27 < v29)
            goto LABEL_30;
          memcpy(v27, __src, 4 * v10);
        }
      }
      swift_bridgeObjectRelease();
      if (v9 >= v23[2])
        break;
      v24 = *((float *)v23 + v9 + 8);
      swift_release();
      if (v13 <= v24)
      {
        v7 = *(_QWORD *)(v6 + 16) - v9 - 2;
        return TntSingleHandSubsequence.getMakeFrameIndex(_:_:_:)(v7, v12 + -0.2, v11);
      }
      if (v20 == v9)
        return TntSingleHandSubsequence.getMakeFrameIndex(_:_:_:)(v7, v12 + -0.2, v11);
      ++v9;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRelease();
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, v8, 0, v9);
  }
  __break(1u);
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall TntSingleHandSubsequence.getMakeFrameByPinchDown()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::Int result;
  int64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  result = v2 - 1;
  v4 = v2 >> 1;
  if (v2 != v2 >> 1)
  {
    v5 = (_BYTE *)(v1 + 592 * v2 - 548);
    while (v4 < (uint64_t)v2)
    {
      if (*v5 != 1)
        return v2;
      --v2;
      v5 -= 592;
      if (v4 == v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall TntSingleHandSubsequence.getBreakFrameIndex(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  BOOL v5;
  Swift::Bool v6;
  Swift::Int v7;
  _BYTE v8[578];
  Swift::Int_optional v9;
  Swift::Int_optional result;

  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_6;
  v4 = v2 - 1;
  memcpy(v8, (const void *)(v1 + 592 * (v2 - 1) + 32), sizeof(v8));
  v9 = SingleHandFrameFeatures.getBreakFrameOffset(_:)(a1);
  if (!v9.is_nil)
  {
    v5 = __OFADD__(v4, v9.value);
    v4 += v9.value;
    if (v5)
    {
      __break(1u);
LABEL_6:
      v4 = 0;
    }
  }
  v6 = v2 == 0;
  v7 = v4;
  result.value = v7;
  result.is_nil = v6;
  return result;
}

Swift::Int __swiftcall TntSingleHandSubsequence.getBreakFrameByPostProcessedScore(_:_:)(Swift::Int result, Swift::Float a2)
{
  uint64_t v2;
  Swift::Int v3;
  float v4;
  float *v5;
  Swift::Int v6;

  v3 = *(_QWORD *)(v2 + 16);
  if (v3 < result)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v3 != result)
  {
    v4 = 1.0 - a2;
    v5 = (float *)(v2 + 592 * result + 40);
    v6 = result;
    while (v6 < v3)
    {
      if (result < 0)
        goto LABEL_12;
      if (*v5 <= v4)
        return v6;
      ++v6;
      v5 += 148;
      if (v3 == v6)
        return *(_QWORD *)(v2 + 16);
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

Swift::Int __swiftcall TntSingleHandSubsequence.getBreakFrameByRawScore(_:_:_:)(Swift::Int a1, Swift::Float a2, Swift::Float a3)
{
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  Swift::Int result;
  _QWORD __dst[74];

  v4 = *(_QWORD *)(v3 + 16);
  if (v4 >= a1)
  {
    v5 = a1;
    if (v4 == a1)
      return v5;
    v8 = v3 + 32;
    v9 = a1;
    while (v9 < v4)
    {
      if (v5 < 0)
        goto LABEL_37;
      v10 = v8 + 592 * v9;
      v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (!v11)
        goto LABEL_38;
      if (*(float *)(*(_QWORD *)v10 + 4 * v11 + 28) <= a3)
      {
        memcpy(__dst, (const void *)(v8 + 592 * v9), 0x242uLL);
        v12 = __dst[0];
        v13 = *(_QWORD *)(__dst[0] + 16);
        if (!v13)
          goto LABEL_39;
        swift_bridgeObjectRetain_n();
        outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        v14 = swift_dynamicCastClass();
        if (!v14)
        {
          swift_bridgeObjectRelease();
          v14 = MEMORY[0x24BEE4AF8];
        }
        v15 = 2 * v13 - 1;
        v16 = *(_QWORD *)(v14 + 16);
        swift_release();
        v17 = v15 >> 1;
        if (v16 == v15 >> 1)
        {
          v18 = swift_dynamicCastClass();
          if (!v18)
          {
            swift_bridgeObjectRelease();
            v18 = MEMORY[0x24BEE4AF8];
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v18 = MEMORY[0x24BEE4AF8];
          if (v15 != 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
            v26 = 4 * v17;
            v18 = swift_allocObject();
            v27 = _swift_stdlib_malloc_size((const void *)v18);
            v28 = v27 - 32;
            if (v27 < 32)
              v28 = v27 - 29;
            *(_QWORD *)(v18 + 16) = v17;
            *(_QWORD *)(v18 + 24) = 2 * (v28 >> 2);
            v29 = (void *)(v18 + 32);
            if (v12 + 32 < (unint64_t)(v18 + 32 + v26) && (unint64_t)v29 < v12 + 32 + v26)
              goto LABEL_42;
            memcpy(v29, (const void *)(v12 + 32), 4 * v17);
          }
        }
        swift_bridgeObjectRelease();
        outlined release of SingleHandFrameFeatures((uint64_t)__dst);
        v19 = *(_QWORD *)(v18 + 16);
        if (v19)
        {
          v20 = *(float *)(v18 + 32);
          v21 = v19 - 1;
          if (v21)
          {
            v22 = (float *)(v18 + 36);
            do
            {
              v23 = *v22++;
              v24 = v23;
              if (v20 < v23)
                v20 = v24;
              --v21;
            }
            while (v21);
          }
          swift_release();
          v25 = *(_QWORD *)(*(_QWORD *)v10 + 16);
          if (!v25)
            goto LABEL_40;
          if ((float)(v20 - *(float *)(*(_QWORD *)v10 + 4 * v25 + 28)) >= a2)
            return v9;
        }
        else
        {
          swift_release();
        }
      }
      if (++v9 == v4)
        return v4;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  __break(1u);
LABEL_42:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall TntSingleHandSubsequence.getFramePose(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v5;
  Swift::Int v6;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t *v30;
  Swift::OpaquePointer_optional result;

  if (a1 < 0)
  {
    v5 = 0;
  }
  else
  {
    v3 = v2;
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 16);
    if (v6 > (unint64_t)a1 && (a2 & 0x8000000000000000) == 0 && v6 > a2 && a2 >= a1)
    {
      v8 = a2 + 1;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v9 = swift_dynamicCastClass();
      if (!v9)
      {
        swift_bridgeObjectRelease();
        v9 = MEMORY[0x24BEE4AF8];
      }
      v10 = *(_QWORD *)(v9 + 16);
      swift_release();
      if (v10 == v8 - a1)
      {
        v11 = swift_dynamicCastClass();
        if (!v11)
        {
          swift_bridgeObjectRelease();
          v11 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v3, v3 + 32, a1, (2 * v8) | 1);
      }
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v30 = (unint64_t *)MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
        v13 = 0;
        v5 = v30;
        v23 = v11;
        do
        {
          v14 = *(_QWORD *)(v11 + v13 + 224);
          v15 = *(_QWORD *)(v11 + v13 + 232);
          v28 = *(_OWORD *)(v11 + v13 + 256);
          v29 = *(_OWORD *)(v11 + v13 + 240);
          v26 = *(_OWORD *)(v11 + v13 + 288);
          v27 = *(_OWORD *)(v11 + v13 + 272);
          v24 = *(_OWORD *)(v11 + v13 + 320);
          v25 = *(_OWORD *)(v11 + v13 + 304);
          v16 = *(_BYTE *)(v11 + v13 + 336);
          v17 = *(_BYTE *)(v11 + v13 + 337);
          v18 = *(_DWORD *)(v11 + v13 + 340);
          v19 = v30[2];
          v20 = v30[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v19 >= v20 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v19 + 1, 1);
          v30[2] = v19 + 1;
          v21 = &v30[16 * v19];
          v21[4] = v14;
          v21[5] = v15;
          *((_OWORD *)v21 + 3) = v29;
          *((_OWORD *)v21 + 4) = v28;
          *((_OWORD *)v21 + 5) = v27;
          *((_OWORD *)v21 + 6) = v26;
          *((_OWORD *)v21 + 7) = v25;
          *((_OWORD *)v21 + 8) = v24;
          *((_BYTE *)v21 + 144) = v16;
          *((_BYTE *)v21 + 145) = v17;
          v13 += 592;
          *((_DWORD *)v21 + 37) = v18;
          --v12;
          v11 = v23;
        }
        while (v12);
        swift_release();
      }
      else
      {
        swift_release();
        v5 = (unint64_t *)MEMORY[0x24BEE4AF8];
      }
    }
  }
  v22 = v5;
  result.is_nil = a2;
  result.value._rawValue = v22;
  return result;
}

uint64_t TntSingleHandSubsequence.getScrollDirection(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v5;
  float32x2_t *v7;
  float32x2_t *v8;

  if ((a1 & 0x8000000000000000) != 0)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 > a1 && (a2 & 0x8000000000000000) == 0 && (uint64_t)v5 > a2 && a2 >= (uint64_t)a1)
  {
    v7 = *(float32x2_t **)(a3 + 32 + 592 * a2 + 200);
    if (*(_QWORD *)&v7[2] < 7uLL)
    {
      __break(1u);
    }
    else
    {
      v8 = *(float32x2_t **)(a3 + 32 + 592 * a1 + 200);
      if (*(_QWORD *)&v8[2] >= 7uLL)
        return (uint64_t)vsub_f32(v7[28], v8[28]);
    }
    __break(1u);
  }
  return result;
}

uint64_t outlined retain of SingleHandFrameFeatures(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of SingleHandFrameFeatures(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  Swift::Int v39;
  char *v40;
  uint64_t result;
  char *v42;
  char *v43;
  char *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a8;
  v49 = a5;
  v9 = v8;
  v61 = a4;
  v62 = a1;
  v63 = a2;
  v47 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v60 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v59 = (char *)v45 - v13;
  v53 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v19);
  v46 = (char *)v45 - v20;
  v21 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v21 - 8);
  v51 = v21;
  MEMORY[0x24BDAC7A8](v21, v22);
  v57 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = (char *)v45 - v26;
  MEMORY[0x24BDAC7A8](v28, v29);
  v45[1] = (char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v32);
  v56 = *((_QWORD *)v16 - 1);
  MEMORY[0x24BDAC7A8](v33, v34);
  v55 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64, v36);
  v54 = (char *)v45 - v37;
  v38 = v16;
  v39 = dispatch thunk of Sequence.underestimatedCount.getter();
  v65 = MEMORY[0x242637984](v61);
  v61 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v39);
  (*(void (**)(char *, _QWORD, _QWORD *))(v56 + 16))(v55, v58, v16);
  v40 = v54;
  v58 = v38;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v39 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v39)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v27, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v62(v27, v60);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v60, v49);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v39)
      {
        v42 = v57;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v42 = v57;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  v60 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v42, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v57;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    return v65;
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v46;
    v43 = v57;
    while (1)
    {
      v58(v44, v43, AssociatedTypeWitness);
      v62(v44, v59);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v59, v49);
  }
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [CameraSource : Float].Iterator._Variant();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [CameraSource : Float].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    v27 = v24;
    outlined init with take of Any(v26, v28);
    v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
      result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t static ModelParams.getNamedSlices<A>(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  __int128 v48;
  __int128 v49;

  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v47);
  if (*((_QWORD *)&v49 + 1))
  {
    v14 = type metadata accessor for Array();
    v15 = swift_dynamicCast();
    if ((v15 & 1) != 0)
    {
      v47[0] = v45;
      MEMORY[0x24BDAC7A8](v15, v16);
      v41 = a4;
      v42 = a5;
      v43 = a6;
      type metadata accessor for IONamedSlice();
      TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
      v18 = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v14);
      v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static ModelParams.getNamedSlices<A>(_:key:), (uint64_t)&v40, v14, TupleTypeMetadata2, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
      swift_bridgeObjectRelease();
      v47[0] = v20;
      v21 = type metadata accessor for Array();
      v22 = MEMORY[0x24BEE12C8];
LABEL_16:
      MEMORY[0x242638C74](v22, v21);
      return Dictionary.init<A>(uniqueKeysWithValues:)();
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
  }
  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v24 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v23, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v47);
  if (*((_QWORD *)&v49 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v25 = swift_dynamicCast();
    if ((v25 & 1) != 0)
    {
      v44[1] = v44;
      v47[0] = v45;
      MEMORY[0x24BDAC7A8](v25, v26);
      v41 = a4;
      v42 = a5;
      v43 = a6;
      type metadata accessor for IONamedSlice();
      swift_getTupleTypeMetadata2();
      v27 = MEMORY[0x24BEE12C8];
      lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12C8]);
      v28 = Sequence.compactMap<A>(_:)();
      swift_bridgeObjectRelease();
      v47[0] = v28;
      v21 = type metadata accessor for Array();
      v22 = v27;
      goto LABEL_16;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
  }
  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v47);
  if (!*((_QWORD *)&v49 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    goto LABEL_26;
  }
  type metadata accessor for Dictionary();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    v45 = a2;
    v46 = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(a1 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v34 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v33, (uint64_t)&v48);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v47);
    if (*((_QWORD *)&v49 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v35 = swift_dynamicCast();
      if ((v35 & 1) != 0)
      {
        v47[0] = v45;
        MEMORY[0x24BDAC7A8](v35, v36);
        v41 = a4;
        v42 = a5;
        v43 = a6;
        type metadata accessor for IONamedSlice();
        swift_getTupleTypeMetadata2();
        lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [String : Any] and conformance [A : B], &demangling cache variable for type metadata for [String : Any], MEMORY[0x24BEE04D8]);
        v37 = Sequence.compactMap<A>(_:)();
        swift_bridgeObjectRelease();
        v47[0] = v37;
        v38 = type metadata accessor for Array();
        MEMORY[0x242638C74](MEMORY[0x24BEE12C8], v38);
        return Dictionary.init<A>(uniqueKeysWithValues:)();
      }
    }
    else
    {
      outlined destroy of Coordinate3DPB?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    }
    type metadata accessor for IONamedSlice();
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    return Dictionary.init(dictionaryLiteral:)();
  }
  type metadata accessor for IONamedSlice();
  v32 = Dictionary.mapValues<A>(_:)();
  swift_bridgeObjectRelease();
  return v32;
}

Swift::String __swiftcall ModelParams.getModelName()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::String __swiftcall ModelParams.getModelPath()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ModelParams.resolveModelPath()()
{
  _BYTE *v0;
  uint64_t v1;
  void *v2;
  Swift::String result;

  lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
  swift_allocError();
  *v0 = 0;
  v1 = swift_willThrow();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall ModelParams.configure()()
{
  _QWORD *v0;
  Swift::String v1;
  char v3;
  uint64_t ObjCClassFromMetadata;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = String.lowercased()();
  if (v1._countAndFlagsBits == 0x6F72687473736170 && v1._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
LABEL_8:
    v22 = xmmword_23D9A6CC0;
    v23 = 0;
    v24 = 0;
    v21 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v19 = 0xD000000000000019;
    *((_QWORD *)&v19 + 1) = 0x800000023D9CE680;
    v6 = MEMORY[0x24BEE4AF8];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000060, 0x800000023D9C92A0, 79, (uint64_t *)&v22, (uint64_t)&v19, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v19);
    specialized Dictionary.init(dictionaryLiteral:)(v6);
    (*(void (**)(void))(*v0 + 184))();
    swift_bridgeObjectRelease();
    return;
  }
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v7 = (*(uint64_t (**)(void))(*v0 + 168))();
  v9 = v8;
  v10 = (void *)objc_opt_self();
  v11 = (void *)MEMORY[0x2426372E8](v7, v9);
  v12 = objc_msgSend(v10, sel_loadConfig_modelPath_, v5, v11);

  if (v12
    && (v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v12,
        v14 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v13),
        swift_bridgeObjectRelease(),
        v14))
  {
    v0[4] = v7;
    v0[5] = v9;
    swift_bridgeObjectRelease();
    v15 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v0 + 184))(v15);

    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    (*(void (**)(void))(*v0 + 184))();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v22 = 0xD000000000000020;
    *((_QWORD *)&v22 + 1) = 0x800000023D9C7660;
    v17._countAndFlagsBits = v7;
    v17._object = v9;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 33;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v24 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v19 = xmmword_23D9A6CC0;
    v20 = 0;
    v21 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v19, 0xD000000000000060, 0x800000023D9C92A0, 91, (uint64_t)&v22, v16);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v22);
  }
}

Swift::String __swiftcall ModelParams.contents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String result;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[32];
  _QWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;

  v1 = type metadata accessor for Mirror();
  v19 = *(_QWORD *)(v1 - 8);
  v20 = v1;
  MEMORY[0x24BDAC7A8](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v28 + 1) = type metadata accessor for ModelParams();
  v26 = v0;
  swift_retain();
  Mirror.init(reflecting:)();
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16A8]), sel_init);
  v18 = v4;
  Mirror.children.getter();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  while (v29)
  {
    v7 = v26;
    v6 = v27;
    v24[0] = v26;
    v24[1] = v27;
    outlined init with take of Any(&v28, v25);
    v21 = v7;
    v22 = (unint64_t)v6;
    outlined init with copy of Any((uint64_t)v25, (uint64_t)v23);
    if (v6)
    {
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
      v21 = 0;
      v22 = 0xE000000000000000;
      v8._countAndFlagsBits = 10;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = v7;
      v9._object = v6;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 0x9203D0920;
      v10._object = (void *)0xE500000000000000;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      v11 = (void *)MEMORY[0x2426372E8](v21, v22);
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_appendString_, v11);

      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for (label: String?, value: Any));
    }
    else
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for (label: String?, value: Any));
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    }
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release_n();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v20);
  v15 = v12;
  v16 = v14;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

unint64_t closure #1 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_0;
  unint64_t result;
  uint64_t v10[4];

  type metadata accessor for IONamedSlice();
  v6 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v7 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  v7(a3, a1, a2);
  v10[3] = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v10);
  v7(boxed_opaque_existential_0, a1, a2);
  swift_allocObject();
  result = IONamedSlice.init(_:)((uint64_t)v10);
  *(uint64_t *)((char *)a3 + v6) = result;
  return result;
}

uint64_t closure #2 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[1];
  v22 = *a1;
  v24 = v22;
  v25 = v15;
  swift_bridgeObjectRetain();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    type metadata accessor for IONamedSlice();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v23, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, a2);
    type metadata accessor for IONamedSlice();
    v18 = swift_getTupleTypeMetadata2();
    v19 = *(int *)(v18 + 48);
    v20 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v23, v14, a2);
    v26 = MEMORY[0x24BEE0D00];
    v24 = v22;
    v25 = v15;
    swift_allocObject();
    swift_bridgeObjectRetain();
    v21 = IONamedSlice.init(_:)((uint64_t)&v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a2);
    *(_QWORD *)(v20 + v19) = v21;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v20, 0, 1, v18);
  }
}

unint64_t closure #3 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  _BYTE v4[32];

  outlined init with copy of Any(a1, (uint64_t)v4);
  type metadata accessor for IONamedSlice();
  swift_allocObject();
  result = IONamedSlice.init(_:)((uint64_t)v4);
  *a2 = result;
  return result;
}

uint64_t closure #4 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[32];

  v25 = a3;
  v26 = a4;
  v23 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23, v7);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[1];
  v29 = *a1;
  v16 = v29;
  v30 = v15;
  v24 = a1 + 2;
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)v31);
  v27 = v16;
  v28 = v15;
  swift_bridgeObjectRetain();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v23);
    type metadata accessor for IONamedSlice();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v26, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, a2);
    type metadata accessor for IONamedSlice();
    v19 = swift_getTupleTypeMetadata2();
    v25 = *(int *)(v19 + 48);
    v20 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v26, v14, a2);
    v21 = a1[1];
    v29 = *a1;
    v30 = v21;
    outlined init with copy of Any((uint64_t)v24, (uint64_t)v31);
    swift_allocObject();
    v22 = IONamedSlice.init(_:)((uint64_t)v31);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a2);
    *(_QWORD *)(v20 + v25) = v22;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v20, 0, 1, v19);
  }
}

uint64_t ModelParams.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ModelParams()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for BasePoseActionModelParams()
{
  return swift_initClassMetadata2();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ConfigurationName(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ConfigurationName()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConfigurationName()
{
  __asm { BR              X9 }
}

uint64_t sub_23D7D9254()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ConfigurationName(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConfigurationName@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConfigurationName.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConfigurationName()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D7D931C + 4 * byte_23D9B1405[*v0]))();
}

void sub_23D7D931C(_QWORD *a1@<X8>)
{
  *a1 = 808989233;
  a1[1] = 0xE400000000000000;
}

void sub_23D7D9330(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000023D9C3F00;
}

void sub_23D7D9350(_QWORD *a1@<X8>)
{
  *a1 = 3159094;
  a1[1] = 0xE300000000000000;
}

void sub_23D7D9364(_QWORD *a1@<X8>)
{
  *a1 = 0x5F7073692E303436;
  a1[1] = 0xEF64656E67696C61;
}

Swift::Void __swiftcall BasePoseActionModelParams.reset(modelConfig:)(Swift::OpaquePointer modelConfig)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *v2;
  v5 = static ModelParams.getNamedSlices<A>(_:key:)((uint64_t)modelConfig._rawValue, 0x737475706E69, 0xE600000000000000, (*v2)[28], (*v2)[30], (*v2)[31]);
  type metadata accessor for IONamedSlice();
  v2[7] = (uint64_t *)_s5Hands13PoseImageCropVSgWOi_(v5);
  swift_bridgeObjectRelease();
  v6 = static ModelParams.getNamedSlices<A>(_:key:)((uint64_t)modelConfig._rawValue, 0x7374757074756FLL, 0xE700000000000000, v4[29], v4[32], v4[33]);
  v2[8] = (uint64_t *)_s5Hands13PoseImageCropVSgWOi_(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  type metadata accessor for TypedKeysDictionary();
}

void sub_23D7D94A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = MEMORY[0x242638C74](&protocol conformance descriptor for TypedKeysDictionary<A, B>, a1);
  v9 = MEMORY[0x24BEE0D00];
  v10 = MEMORY[0x24BEE4078];
  v11 = MEMORY[0x24BEE40A8];
  *(_QWORD *)(v6 - 272) = v8;
  v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in BasePoseActionModelParams.reset(modelConfig:), v6 - 208, a1, v9, v10, v8, v11, v12);
  swift_bridgeObjectRelease();
  v14 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  v15 = specialized _copyCollectionToContiguousArray<A>(_:)(v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 - 136) = v15;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)(v6 - 136));
  *(_QWORD *)(v6 - 264) = a1;
  swift_release();
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v6 - 136);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v6 - 96) = v16;
  MEMORY[0x24BDAC7A8](v16, v17);
  v18 = *(_QWORD *)(v6 - 224);
  *(_QWORD *)(v6 - 232) = v3;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 248) = v2;
  *(_QWORD *)(v6 - 240) = v4;
  *(_QWORD *)(v6 - 120) = v18;
  *(_QWORD *)(v6 - 112) = v2;
  type metadata accessor for TypedKeysDictionary();
}

uint64_t closure #2 in BasePoseActionModelParams.reset(modelConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  _QWORD v18[2];

  type metadata accessor for IONamedSlice();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v7);
  v10 = (char *)v18 - v9;
  v12 = *(int *)(v11 + 48);
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)v18 - v9, a1, a2, v8);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)&v10[v12] = v14;
  v15 = *(_QWORD *)(v14 + 24);
  *a3 = *(_QWORD *)(v14 + 16);
  a3[1] = v15;
  v16 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  return v16(v10, a2);
}

BOOL closure #3 in BasePoseActionModelParams.reset(modelConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;

  type metadata accessor for IONamedSlice();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v5);
  v8 = (char *)&v15 - v7;
  v10 = *(int *)(v9 + 48);
  v11 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v15 - v7, a1, a2, v6);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)&v8[v10] = v12;
  v13 = *(_QWORD *)(v12 + 40) != 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, a2);
  return v13;
}

uint64_t closure #1 in BasePoseActionModelParams.reset(modelConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  _QWORD v18[2];

  type metadata accessor for IONamedSlice();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v7);
  v10 = (char *)v18 - v9;
  v12 = *(int *)(v11 + 48);
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)v18 - v9, a1, a2, v8);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)&v10[v12] = v14;
  v15 = *(_QWORD *)(v14 + 24);
  *a3 = *(_QWORD *)(v14 + 16);
  a3[1] = v15;
  v16 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  return v16(v10, a2);
}

uint64_t BasePoseActionModelParams.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t BasePoseActionModelParams.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BasePoseActionModelParams.__deallocating_deinit()
{
  BasePoseActionModelParams.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for BasePoseActionModelParams()
{
  JUMPOUT(0x242638C08);
}

uint64_t type metadata completion function for BasePoseModelParams()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall BasePoseModelParams.reset(modelConfig:)(Swift::OpaquePointer modelConfig)
{
  BasePoseActionModelParams.reset(modelConfig:)(modelConfig);
}

void sub_23D7D9BA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, id a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int128 a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned __int8 v31;
  unint64_t v32;
  char v33;
  int v34;
  float v35;
  unint64_t v36;
  char v37;
  int v38;
  float v39;
  float v40;
  _BYTE v41[40];
  __int128 v42;
  __int128 v43;

  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v28 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41), (v30 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)&v42);
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v41);
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v31 = 0;
    goto LABEL_10;
  }
  v31 = objc_msgSend((id)0xD000000000000014, sel_BOOLValue);

LABEL_10:
  *(_BYTE *)(v27 + 112) = v31;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v28 + 16) && (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v32, (uint64_t)&v42);
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v41);
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    v35 = 128.0;
    goto LABEL_19;
  }
  v34 = objc_msgSend((id)0x6469775F706F7263, sel_intValue);

  v35 = (float)v34;
LABEL_19:
  v40 = v35;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v28 + 16) && (v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41), (v37 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v36, (uint64_t)&v42);
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v41);
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v39 = 128.0;
    goto LABEL_28;
  }
  v38 = objc_msgSend((id)0x6965685F706F7263, sel_intValue);

  v39 = (float)v38;
LABEL_28:
  *(_QWORD *)(v27 + 104) = __PAIR64__(LODWORD(v39), LODWORD(v40));
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BasePoseModelParams.resolveModelPath()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  void (*v4)(char *, uint64_t);
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for ModelUtils);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 48);
  swift_bridgeObjectRetain();
  v4 = static ModelUtils.getPoseModelPath(_:_:)(v1, v2, v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = (uint64_t)v4;
  v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t BasePoseModelParams.__deallocating_deinit()
{
  BasePoseActionModelParams.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BasePoseModelParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BasePoseModelParams);
}

uint64_t getEnumTagSinglePayload for ConfigurationName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigurationName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D7DA024 + 4 * byte_23D9B140F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D7DA058 + 4 * byte_23D9B140A[v4]))();
}

uint64_t sub_23D7DA058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DA060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7DA068);
  return result;
}

uint64_t sub_23D7DA074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7DA07CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D7DA080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DA088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationName()
{
  return &type metadata for ConfigurationName;
}

unint64_t lazy protocol witness table accessor for type ConfigurationName and conformance ConfigurationName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConfigurationName and conformance ConfigurationName;
  if (!lazy protocol witness table cache variable for type ConfigurationName and conformance ConfigurationName)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ConfigurationName, &type metadata for ConfigurationName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfigurationName and conformance ConfigurationName);
  }
  return result;
}

unint64_t specialized ConfigurationName.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConfigurationName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t partial apply for closure #1 in BasePoseActionModelParams.reset(modelConfig:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return partial apply for closure #1 in BasePoseActionModelParams.reset(modelConfig:)(a1, a2);
}

{
  uint64_t v2;

  return closure #1 in BasePoseActionModelParams.reset(modelConfig:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #2 in BasePoseActionModelParams.reset(modelConfig:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in BasePoseActionModelParams.reset(modelConfig:)(a1, *(_QWORD *)(v2 + 24), a2);
}

BOOL partial apply for closure #3 in BasePoseActionModelParams.reset(modelConfig:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in BasePoseActionModelParams.reset(modelConfig:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #4 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #4 in static ModelParams.getNamedSlices<A>(_:key:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

uint64_t partial apply for closure #2 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in static ModelParams.getNamedSlices<A>(_:key:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t partial apply for closure #1 in static ModelParams.getNamedSlices<A>(_:key:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static ModelParams.getNamedSlices<A>(_:key:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t storeEnumTagSinglePayload for ModelParamsError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D7DA258 + 4 * byte_23D9B1419[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D7DA28C + 4 * byte_23D9B1414[v4]))();
}

uint64_t sub_23D7DA28C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DA294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7DA29CLL);
  return result;
}

uint64_t sub_23D7DA2A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7DA2B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D7DA2B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DA2BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelParamsError()
{
  return &type metadata for ModelParamsError;
}

id LUTWarper.__allocating_init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return LUTWarper.init(imageWidth:imageHeight:)(a1, a2);
}

id LUTWarper.init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  void *v28;
  id v29;
  const __CFDictionary *v30;
  CVReturn v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  const __CFDictionary *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  CVPixelBufferPoolRef v51;
  void *v52;
  __CVPixelBufferPool *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  id v61;
  const __CFDictionary *v62;
  id v63;
  void *v64;
  CVPixelBufferPoolRef v65;
  id v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const __CFDictionary *v80;
  objc_class *v81;
  id v82;
  objc_super v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  CVPixelBufferPoolRef poolOut[3];

  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x24BDAC8D0];
  v5 = &v2[OBJC_IVAR____TtC5Hands9LUTWarper__threadGroupSize];
  v6 = v2;
  MTLSizeMake(40, 40, &v87);
  v7 = v88;
  *(_OWORD *)v5 = v87;
  *((_QWORD *)v5 + 2) = v7;
  v8 = &v6[OBJC_IVAR____TtC5Hands9LUTWarper__threadPerGroupSize];
  MTLSizeMake(32, 32, &v87);
  v9 = v88;
  *(_OWORD *)v8 = v87;
  *((_QWORD *)v8 + 2) = v9;
  v71 = OBJC_IVAR____TtC5Hands9LUTWarper__metalDevice;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__metalDevice] = 0;
  v72 = OBJC_IVAR____TtC5Hands9LUTWarper__metalLibraries;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__metalLibraries] = 0;
  v73 = OBJC_IVAR____TtC5Hands9LUTWarper__metalComandQueue;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__metalComandQueue] = 0;
  v74 = OBJC_IVAR____TtC5Hands9LUTWarper__computePipeline;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__computePipeline] = 0;
  v75 = OBJC_IVAR____TtC5Hands9LUTWarper__outputTextureDescriptor;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__outputTextureDescriptor] = 0;
  v76 = OBJC_IVAR____TtC5Hands9LUTWarper__bufferPool;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__bufferPool] = 0;
  v79 = OBJC_IVAR____TtC5Hands9LUTWarper__sharedCapturer;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__sharedCapturer] = 0;
  v78 = OBJC_IVAR____TtC5Hands9LUTWarper__customScope;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__customScope] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__imageWidth] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Hands9LUTWarper__imageHeight] = a2;
  v81 = (objc_class *)type metadata accessor for LUTWarper();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v82 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  poolOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9A8140;
  v12 = (void *)*MEMORY[0x24BDC5708];
  type metadata accessor for CFStringRef(0);
  v14 = v13;
  *(_QWORD *)(v11 + 32) = v12;
  v15 = MEMORY[0x24BEE1768];
  v16 = (void **)MEMORY[0x24BDC5650];
  *(_QWORD *)(v11 + 56) = v13;
  *(_QWORD *)(v11 + 64) = a1;
  v17 = *v16;
  *(_QWORD *)(v11 + 88) = v15;
  *(_QWORD *)(v11 + 96) = v17;
  *(_QWORD *)(v11 + 120) = v13;
  *(_QWORD *)(v11 + 128) = a2;
  v77 = a2;
  v18 = (void *)*MEMORY[0x24BDC56B8];
  *(_QWORD *)(v11 + 184) = v13;
  *(_QWORD *)(v11 + 152) = v15;
  *(_QWORD *)(v11 + 160) = v18;
  v19 = MEMORY[0x24BEE44F0];
  *(_DWORD *)(v11 + 192) = 1278226488;
  v20 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(v11 + 248) = v13;
  *(_QWORD *)(v11 + 216) = v19;
  *(_QWORD *)(v11 + 224) = v20;
  v21 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v22 = v12;
  v23 = v17;
  v24 = v18;
  v25 = v20;
  v26 = objc_msgSend(v21, sel_init);
  v27 = type metadata accessor for NSDictionary();
  *(_QWORD *)(v11 + 256) = v26;
  v28 = (void *)*MEMORY[0x24BDC55D0];
  *(_QWORD *)(v11 + 280) = v27;
  *(_QWORD *)(v11 + 288) = v28;
  *(_QWORD *)(v11 + 344) = v15;
  *(_QWORD *)(v11 + 312) = v14;
  *(_QWORD *)(v11 + 320) = 64;
  v29 = v28;
  v30 = (const __CFDictionary *)NSDictionary.init(dictionaryLiteral:)();
  v31 = CVPixelBufferPoolCreate(0, 0, v30, poolOut);
  v32 = MEMORY[0x24BEE0D00];
  if (v31)
  {
    v89 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v87 = 0xD000000000000042;
    *((_QWORD *)&v87 + 1) = 0x800000023D9CE6F0;
    type metadata accessor for HandyLoggerNeo();
    v84 = xmmword_23D9B16F0;
    v85 = 0;
    v86 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v84, 0xD00000000000004ALL, 0x800000023D9CE6A0, 41, (uint64_t)&v87, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
  }
  v33 = MTLCreateSystemDefaultDevice();
  if (!v33)
  {

    v35 = v82;
LABEL_24:
    v89 = v32;
    *(_QWORD *)&v87 = 0xD000000000000029;
    *((_QWORD *)&v87 + 1) = 0x800000023D9CE740;
    type metadata accessor for HandyLoggerNeo();
    v84 = xmmword_23D9B16F0;
    v85 = 0;
    v86 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v84, 0xD00000000000004ALL, 0x800000023D9CE6A0, 49, (uint64_t)&v87, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
    v65 = poolOut[0];
    goto LABEL_25;
  }
  v34 = v33;
  *(_QWORD *)&v87 = 0;
  v35 = v82;
  v36 = objc_msgSend(v33, sel_newDefaultLibraryWithBundle_error_, v82, &v87);
  if (!v36)
  {
    v62 = v30;
    v63 = (id)v87;
    v64 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v30 = v62;

    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  v37 = v36;
  v38 = (id)v87;
  v39 = (void *)MEMORY[0x2426372E8](0x657072615754554CLL, 0xE900000000000072);
  v40 = objc_msgSend(v37, sel_newFunctionWithName_, v39);

  if (!v40)
  {
    swift_unknownObjectRelease();
LABEL_23:
    swift_unknownObjectRelease();

    goto LABEL_24;
  }
  v70 = objc_msgSend(v34, sel_newCommandQueue);
  if (!v70)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  *(_QWORD *)&v87 = 0;
  v41 = objc_msgSend(v34, sel_newComputePipelineStateWithFunction_error_, v40, &v87);
  v42 = (void *)v87;
  v69 = v41;
  if (!v41)
  {
    v80 = v30;
    v67 = (id)v87;
    v68 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v30 = v80;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  *(_QWORD *)&v6[v71] = v34;
  swift_unknownObjectRetain();
  v43 = v42;
  swift_unknownObjectRelease();
  *(_QWORD *)&v6[v72] = v37;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&v6[v73] = v70;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v44 = *(void **)&v6[v73];
  if (v44)
  {
    swift_unknownObjectRetain();
    v45 = (void *)MEMORY[0x2426372E8](0x657072615754554CLL, 0xE900000000000072);
    objc_msgSend(v44, sel_setLabel_, v45);
    swift_unknownObjectRelease();

  }
  v46 = v30;
  *(_QWORD *)&v6[v74] = v69;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v47 = objc_msgSend((id)objc_opt_self(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 13, a1, v77, 0);
  v48 = *(void **)&v6[v75];
  *(_QWORD *)&v6[v75] = v47;

  v49 = *(void **)&v6[v75];
  if (v49)
  {
    objc_msgSend(v49, sel_setStorageMode_, 0);
    v50 = *(void **)&v6[v75];
    if (v50)
      objc_msgSend(v50, sel_setUsage_, 2);
  }
  v51 = poolOut[0];
  v52 = *(void **)&v6[v76];
  *(CVPixelBufferPoolRef *)&v6[v76] = poolOut[0];
  v53 = v51;

  v54 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
  v55 = *(void **)&v6[v79];
  *(_QWORD *)&v6[v79] = v54;

  v56 = *(id *)&v6[v79];
  if (v56)
    v56 = objc_msgSend(v56, sel_newCaptureScopeWithDevice_, v34);
  *(_QWORD *)&v6[v78] = v56;
  swift_unknownObjectRelease();
  v57 = *(void **)&v6[v78];
  if (v57)
  {
    swift_unknownObjectRetain();
    v58 = (void *)MEMORY[0x2426372E8](0x7562656420736C50, 0xEC000000656D2067);
    objc_msgSend(v57, sel_setLabel_, v58);
    swift_unknownObjectRelease();

  }
  v59 = *(void **)&v6[v79];
  if (v59)
  {
    v60 = *(_QWORD *)&v6[v78];
    swift_unknownObjectRetain();
    v61 = v59;
    objc_msgSend(v61, sel_setDefaultCaptureScope_, v60);

    swift_unknownObjectRelease();
  }
  else
  {

  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v65 = (CVPixelBufferPoolRef)v6;
LABEL_25:

  v83.receiver = v6;
  v83.super_class = v81;
  return objc_msgSendSuper2(&v83, sel_init);
}

uint64_t MTLSizeMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 1;
  return result;
}

uint64_t type metadata accessor for LUTWarper()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

CVBufferRef __swiftcall LUTWarper.convert(image:warperMeshX:warperMeshY:)(CVBufferRef image, CVBufferRef warperMeshX, CVBufferRef warperMeshY)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IOSurfaceRef IOSurface;
  __IOSurface *v9;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  void *v12;
  id v13;
  id v14;
  void *v15;
  IOSurfaceRef v16;
  __IOSurface *v17;
  size_t v18;
  id v19;
  id v20;
  void *v21;
  IOSurfaceRef v22;
  __IOSurface *v23;
  size_t v24;
  id v25;
  id v26;
  CVBufferRef_optional v27;
  CVBufferRef value;
  IOSurfaceRef v29;
  void *v30;
  __IOSurface *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  __CVBuffer *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  CVPixelBufferRef pixelBuffera;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v4 = OBJC_IVAR____TtC5Hands9LUTWarper__metalDevice;
  v5 = *(void **)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__metalDevice);
  if (!v5)
    goto LABEL_26;
  swift_unknownObjectRetain();
  IOSurface = CVPixelBufferGetIOSurface(image);
  if (!IOSurface)
    goto LABEL_25;
  v9 = IOSurface;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(image, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(image, 0);
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 13, WidthOfPlane, HeightOfPlane, 0);
  v14 = objc_msgSend(v5, sel_newTextureWithDescriptor_iosurface_plane_, v13, v9, 0);
  swift_unknownObjectRelease();

  if (!v14)
  {
LABEL_26:
    v55 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v53 = 0xD00000000000002ELL;
    *((_QWORD *)&v53 + 1) = 0x800000023D9CE770;
    type metadata accessor for HandyLoggerNeo();
    v50 = xmmword_23D9B1700;
    v51 = 0;
    v52 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v50, 0xD00000000000004ALL, 0x800000023D9CE6A0, 93, (uint64_t)&v53, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v53);
    return image;
  }
  v15 = *(void **)(v3 + v4);
  if (!v15)
  {
LABEL_25:
    swift_unknownObjectRelease();
    goto LABEL_26;
  }
  swift_unknownObjectRetain();
  v16 = CVPixelBufferGetIOSurface(warperMeshX);
  if (!v16)
    goto LABEL_24;
  v17 = v16;
  v18 = CVPixelBufferGetWidthOfPlane(warperMeshX, 0);
  v19 = objc_msgSend(v12, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 55, v18, CVPixelBufferGetHeightOfPlane(warperMeshX, 0), 0);
  v20 = objc_msgSend(v15, sel_newTextureWithDescriptor_iosurface_plane_, v19, v17, 0);
  swift_unknownObjectRelease();

  if (!v20)
    goto LABEL_25;
  v21 = *(void **)(v3 + v4);
  if (!v21)
  {
LABEL_24:
    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  swift_unknownObjectRetain();
  v22 = CVPixelBufferGetIOSurface(warperMeshY);
  if (!v22)
  {
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  v23 = v22;
  v24 = CVPixelBufferGetWidthOfPlane(warperMeshY, 0);
  v25 = objc_msgSend(v12, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 55, v24, CVPixelBufferGetHeightOfPlane(warperMeshY, 0), 0);
  v26 = objc_msgSend(v21, sel_newTextureWithDescriptor_iosurface_plane_, v25, v23, 0);
  swift_unknownObjectRelease();

  if (!v26)
    goto LABEL_24;
  v27.value = LUTWarper.createPixelBuffer()().value;
  if (!v27.value)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  value = v27.value;
  v29 = CVPixelBufferGetIOSurface(v27.value);
  if (!v29)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_26;
  }
  v30 = *(void **)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__metalComandQueue);
  v31 = v29;
  if (!v30
    || (v32 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__computePipeline)) == 0
    || (v33 = *(void **)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__outputTextureDescriptor)) == 0)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_31:
    goto LABEL_26;
  }
  v34 = *(void **)(v3 + v4);
  if (!v34)
  {

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
LABEL_35:
    swift_unknownObjectRelease();
    goto LABEL_31;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v35 = v33;
  v36 = (__CVBuffer *)objc_msgSend(v34, sel_newTextureWithDescriptor_iosurface_plane_, v35, v31, 0);
  if (!v36)
  {

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_35;
  }
  pixelBuffera = v36;
  v46 = OBJC_IVAR____TtC5Hands9LUTWarper__customScope;
  v37 = *(void **)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__customScope);
  if (v37)
    objc_msgSend(v37, sel_beginScope);
  v47 = v35;
  v38 = objc_msgSend(v30, sel_commandBuffer);
  if (v38)
  {
    swift_unknownObjectRetain();
    v39 = (void *)MEMORY[0x2426372E8](0xD00000000000001FLL);
    objc_msgSend(v38, sel_setLabel_, v39);
    swift_unknownObjectRelease();

    v40 = objc_msgSend(v38, sel_computeCommandEncoder);
    if (v40)
    {
      swift_unknownObjectRetain();
      v45 = (void *)MEMORY[0x2426372E8](0xD00000000000001FLL, 0x800000023D9CE7A0);
      objc_msgSend(v40, sel_setLabel_, v45);
      swift_unknownObjectRelease();

      objc_msgSend(v40, sel_setComputePipelineState_, v32);
      objc_msgSend(v40, sel_setTexture_atIndex_, pixelBuffera, 0);
      objc_msgSend(v40, sel_setTexture_atIndex_, v14, 1);
      objc_msgSend(v40, sel_setTexture_atIndex_, v20, 2);
      objc_msgSend(v40, sel_setTexture_atIndex_, v26, 3);
      v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__threadGroupSize + 16);
      v42 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__threadPerGroupSize + 16);
      v53 = *(_OWORD *)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__threadGroupSize);
      v54 = v41;
      v50 = *(_OWORD *)(v3 + OBJC_IVAR____TtC5Hands9LUTWarper__threadPerGroupSize);
      v51 = v42;
      objc_msgSend(v40, sel_dispatchThreadgroups_threadsPerThreadgroup_, &v53, &v50);
      objc_msgSend(v40, sel_endEncoding);
    }
    objc_msgSend(v38, sel_commit);
  }
  v44 = *(void **)(v3 + v46);
  if (v44)
    objc_msgSend(v44, sel_endScope);
  if (v38)
  {
    objc_msgSend((id)swift_unknownObjectRetain(), sel_waitUntilCompleted);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return value;
}

CVBufferRef_optional __swiftcall LUTWarper.createPixelBuffer()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  CFAllocatorRef *v3;
  const __CFAllocator *v4;
  id v5;
  CVPixelBufferRef v6;
  IOSurfaceRef IOSurface;
  BOOL v8;
  uint64_t inited;
  void **v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  id v22;
  NSDictionary v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CVPixelBufferRef pixelBufferOut[2];

  v1 = v0;
  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  pixelBufferOut[0] = 0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Hands9LUTWarper__bufferPool);
  v3 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v5 = v2;
    if (CVPixelBufferPoolCreatePixelBuffer(v4, (CVPixelBufferPoolRef)v5, pixelBufferOut))
    {

      pixelBufferOut[0] = 0;
      v30 = MEMORY[0x24BEE0D00];
      v28 = 0xD00000000000004DLL;
      v29 = 0x800000023D9CE900;
      type metadata accessor for HandyLoggerNeo();
      v25 = xmmword_23D9A7060;
      v26 = 0;
      v27 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v25, 0xD00000000000004ALL, 0x800000023D9CE6A0, 133, (uint64_t)&v28, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
    }
    else
    {

    }
  }
  v6 = pixelBufferOut[0];
  IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut[0]);
  if (v6)
    v8 = IOSurface == 0;
  else
    v8 = 1;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
    inited = swift_initStackObject();
    v10 = (void **)MEMORY[0x24BDC5690];
    *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
    v11 = *v10;
    *(_QWORD *)(inited + 32) = v11;
    v12 = MEMORY[0x24BEE1328];
    *(_BYTE *)(inited + 40) = 1;
    v13 = (void *)*MEMORY[0x24BDC55E8];
    *(_QWORD *)(inited + 64) = v12;
    *(_QWORD *)(inited + 72) = v13;
    *(_BYTE *)(inited + 80) = 1;
    v14 = (void *)*MEMORY[0x24BDC5668];
    *(_QWORD *)(inited + 104) = v12;
    *(_QWORD *)(inited + 112) = v14;
    v15 = v11;
    v16 = v13;
    v17 = v14;
    v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v20 = (void **)MEMORY[0x24BDC55E0];
    *(_QWORD *)(inited + 120) = v18;
    v21 = *v20;
    *(_QWORD *)(inited + 144) = v19;
    *(_QWORD *)(inited + 152) = v21;
    *(_QWORD *)(inited + 184) = v12;
    *(_BYTE *)(inited + 160) = 1;
    v22 = v21;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    v23.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (CVPixelBufferCreate(*v3, *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands9LUTWarper__imageWidth), *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands9LUTWarper__imageHeight), 0x4C303038u, v23.super.isa, pixelBufferOut)|| (v6 = pixelBufferOut[0]) == 0)
    {
      v30 = MEMORY[0x24BEE0D00];
      v28 = 0xD00000000000001DLL;
      v29 = 0x800000023D9C47D0;
      specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004ALL, 0x800000023D9CE6A0, 154, (uint64_t)&v28, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
      v6 = 0;
      v23.super.isa = pixelBufferOut[0];
    }

  }
  return (CVBufferRef_optional)v6;
}

id LUTWarper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LUTWarper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LUTWarper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LUTWarper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for LUTWarper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LUTWarper.__allocating_init(imageWidth:imageHeight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t dispatch thunk of LUTWarper.convert(image:warperMeshX:warperMeshY:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t type metadata accessor for LegacyPinchFilterAdapter()
{
  return objc_opt_self();
}

uint64_t specialized static LegacyPinchFilterAdapter.getLegacyPinchFilterPinchDown(_:_:)(char a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  v3 = a2[2];
  if ((a1 & 1) != 0)
  {
    result = 1;
    if ((a2[1] & 2) == 0)
      return result;
    if ((a2[3] & 2) != 0)
      return result;
    result = 0;
    if ((v2 & 2) == 0 || (v3 & 2) != 0 || (v3 & 4) != 0)
      return result;
    return 1;
  }
  result = 0;
  if ((v2 & 2) != 0 && (a2[2] & 2) == 0 && (a2[2] & 4) == 0)
    return 1;
  return result;
}

uint64_t specialized static LegacyPinchFilterAdapter.createLegacyHandTrace(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v30 = a7;
  v31 = a8;
  v29 = a6;
  v27 = a3;
  v26 = a2;
  v28 = type metadata accessor for HandPinchEvent(0);
  MEMORY[0x24BDAC7A8](v28, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(unsigned __int8 *)(a9 + 8);
  v24 = *(unsigned __int8 *)(a9 + 9);
  v23 = *(unsigned __int8 *)(a9 + 10);
  v22 = *(_QWORD *)(a9 + 16);
  v13 = *(_BYTE *)(a9 + 24);
  v14 = *(_QWORD *)(a9 + 32);
  v15 = *(_BYTE *)(a9 + 40);
  v21 = *(_QWORD *)(a9 + 48);
  v16 = *(_DWORD *)(a9 + 72);
  v17 = *(_QWORD *)(a9 + 80);
  CMTime.seconds.getter();
  v18 = v26;
  Hands_trace_CBridge_0();
  *(_QWORD *)&v33 = *(_QWORD *)a9;
  BYTE8(v33) = v25;
  BYTE9(v33) = v24;
  BYTE10(v33) = v23;
  v34 = v22;
  LOBYTE(v35) = v13;
  v36 = v14;
  v37 = v15;
  v38 = v21;
  v39 = *(_OWORD *)(a9 + 56);
  v40 = v16;
  v41 = v17;
  static HandPinchEvent.generatePinchEvent(hand:timestamp:occlusionMin:occlusionMax:uncertainty:pinchPostprocess:)(v18, v27, a4, v29, v30, v31, (int *)&v33, (uint64_t)v12);
  v33 = xmmword_23D9AB690;
  v34 = 0;
  v35 = 0;
  v32[3] = v28;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v32);
  outlined init with copy of HandPinchEvent((uint64_t)v12, (uint64_t)boxed_opaque_existential_0);
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000008DLL, 0x800000023D9CE980, 167, (uint64_t *)&v33, (uint64_t)v32, MEMORY[0x24BEE4AF8]);
  outlined destroy of HandPinchEvent((uint64_t)v12);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
}

uint64_t outlined init with copy of HandPinchEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandPinchEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HandPinchEvent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HandPinchEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static LegacyPinchFilterAdapter.saveLegacyPinchInternalData(_:_:_:)(uint64_t a1, char a2, int *a3)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[3];

  v5 = *a3;
  v4 = a3[1];
  v6 = *((_BYTE *)a3 + 9);
  v29 = *((_QWORD *)a3 + 2);
  v28 = *((_BYTE *)a3 + 24);
  v7 = *((_QWORD *)a3 + 4);
  v8 = *((_QWORD *)a3 + 6);
  v9 = a3[14];
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)&v30 = _D0;
  WORD4(v30) = 0;
  v31 = 4;
  LOBYTE(v32) = 1;
  v15 = MEMORY[0x24BEE4AF8];
  v33 = &outlined read-only object #0 of static LegacyPinchFilterAdapter.saveLegacyPinchInternalData(_:_:_:);
  v34 = MEMORY[0x24BEE4AF8];
  v35 = MEMORY[0x24BEE4AF8];
  v36 = MEMORY[0x24BEE4AF8];
  v37 = MEMORY[0x24BEE4AF8];
  LODWORD(v38) = -1082130432;
  v39 = 0;
  v40 = 0xE000000000000000;
  v41 = 0;
  LOBYTE(v42[0]) = 1;
  *(_QWORD *)((char *)v42 + 4) = _D0;
  v16 = a1 + *(int *)(type metadata accessor for HandDescriptor() + 96);
  v17 = type metadata accessor for HandDescriptorInternal();
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48);
  if (v18(v16, 1, v17) == 1)
  {
    result = outlined release of PinchInternalData((uint64_t)&v30);
    __break(1u);
    goto LABEL_15;
  }
  v19 = v32;
  v20 = v38;
  v21 = v42[0];
  v22 = *(_QWORD *)(v16 + 16);
  v23 = *(_QWORD *)(v16 + 24);
  v24 = *(_QWORD *)(v16 + 32);
  v25 = *(_QWORD *)(v16 + 40);
  v26 = *(_QWORD *)(v16 + 48);
  *(_OWORD *)(v16 + 16) = v30;
  *(_QWORD *)(v16 + 32) = 4;
  *(_QWORD *)(v16 + 40) = v19;
  *(_QWORD *)(v16 + 48) = &outlined read-only object #0 of static LegacyPinchFilterAdapter.saveLegacyPinchInternalData(_:_:_:);
  *(_QWORD *)(v16 + 56) = v15;
  *(_QWORD *)(v16 + 64) = v15;
  *(_QWORD *)(v16 + 72) = v15;
  *(_QWORD *)(v16 + 80) = v15;
  *(_QWORD *)(v16 + 88) = v20;
  *(_OWORD *)(v16 + 96) = xmmword_23D9B1750;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = v21;
  *(_DWORD *)(v16 + 128) = -1082130432;
  outlined consume of PinchInternalData?(v22, v23, v24, v25, v26);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v16 + 48))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_DWORD *)(v16 + 16) = v5;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_DWORD *)(v16 + 20) = v4;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_BYTE *)(v16 + 24) = v6;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_BYTE *)(v16 + 25) = a2 & 1;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(v16 + 32) = v29;
  *(_BYTE *)(v16 + 40) = v28;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *(_QWORD *)(v16 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(_QWORD *)(v16 + 48))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(v16 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_QWORD *)(v16 + 48))
  {
    *(_DWORD *)(v16 + 88) = v9;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined release of PinchInternalData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized static LegacyPinchFilterAdapter.saveLegacyHandData(_:_:)(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_DWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 60);
  *(_DWORD *)(result + 232) = *(_DWORD *)a2;
  *(_BYTE *)(result + 236) = 0;
  *(_DWORD *)(result + 276) = v2;
  *(_BYTE *)(result + 280) = 0;
  *(_QWORD *)(result + 240) = v3;
  *(_WORD *)(result + 248) = v4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v10 = result;
    if ((*(_BYTE *)(v6 + 32) & 1) != 0)
    {
      v11 = 1;
LABEL_6:
      *(_BYTE *)(result + 250) = v11;
      *(_OWORD *)(result + 216) = v8;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 256) = v5;
      *(_DWORD *)(v10 + 272) = v7;
      return result;
    }
    if (v9 >= 2)
    {
      v11 = *(_BYTE *)(v6 + 33);
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall GesturePipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    while (v5 < *(_QWORD *)(v3 + 16))
    {
      v6 = *(_QWORD *)(v3 + 32 + 8 * v5);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = v6 + 32;
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of Detection2DComputePipelineProtocol(v8, (uint64_t)v17);
          v9 = v18;
          v10 = v19;
          __swift_project_boxed_opaque_existential_1(v17, v18);
          (*(void (**)(HandsKitConfig *, uint64_t, uint64_t))(v10 + 16))(a1, v9, v10);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
          v8 += 40;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
      }
      if (++v5 == v4)
      {
        swift_bridgeObjectRelease();
        v1 = v16;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    v11 = *(_QWORD *)(v1 + 32);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = v11 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of Detection2DComputePipelineProtocol(v13, (uint64_t)v17);
        v14 = v18;
        v15 = v19;
        __swift_project_boxed_opaque_existential_1(v17, v18);
        (*(void (**)(HandsKitConfig *, uint64_t, uint64_t))(v15 + 8))(a1, v14, v15);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        v13 += 40;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
  }
}

void GesturePipeline.process(_:)(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _BYTE v86[552];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[70];
  _OWORD v91[36];

  v3 = type metadata accessor for HandDescriptor();
  v83 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v85 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(_QWORD)static Frame.shared)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  v6 = *((_QWORD *)a1 + 42);
  if (v6 % (unint64_t)static Frame.shared != *((_QWORD *)&static Frame.shared + 1))
  {
    v66 = *(_QWORD *)(v1 + 32);
    v67 = *(_QWORD *)(v66 + 16);
    if (v67)
    {
      v68 = v66 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of Detection2DComputePipelineProtocol(v68, (uint64_t)v91);
        v69 = *((_QWORD *)&v91[1] + 1);
        v70 = *(_QWORD *)&v91[2];
        __swift_project_boxed_opaque_existential_1(v91, *((uint64_t *)&v91[1] + 1));
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 24))(a1, v69, v70);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v91);
        v68 += 40;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
    }
    return;
  }
  v7 = *((_QWORD *)a1 + 57);
  Hands_trace_CBridge();
  v82 = v1;
  v8 = *(_QWORD *)a1;
  v9 = *((_QWORD *)a1 + 9);
  v10 = a1[80];
  v11 = *((_DWORD *)a1 + 21);
  v12 = *((_QWORD *)a1 + 16);
  v13 = a1[136];
  v14 = *((_DWORD *)a1 + 44);
  v15 = *((_QWORD *)a1 + 23);
  v16 = *((_OWORD *)a1 + 14);
  v17 = *((_OWORD *)a1 + 15);
  v18 = *((_OWORD *)a1 + 16);
  v19 = *((_OWORD *)a1 + 17);
  v20 = *((_OWORD *)a1 + 18);
  v21 = *((_OWORD *)a1 + 19);
  v22 = *((_OWORD *)a1 + 20);
  v23 = *((_QWORD *)a1 + 43);
  v24 = *((_QWORD *)a1 + 45);
  v25 = *((_QWORD *)a1 + 48);
  v26 = a1[392];
  v27 = *(_QWORD *)(a1 + 396);
  v28 = *((_DWORD *)a1 + 101);
  v29 = *((_DWORD *)a1 + 102);
  v30 = a1[444];
  v31 = *((_QWORD *)a1 + 56);
  v32 = a1[464];
  v33 = *(_OWORD *)(a1 + 472);
  v34 = *((_QWORD *)a1 + 61);
  v35 = *((_QWORD *)a1 + 66);
  v36 = *((_QWORD *)a1 + 67);
  v37 = *((_QWORD *)a1 + 68);
  *(_OWORD *)((char *)v91 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v91[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)((char *)&v91[2] + 8) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)&v91[3] + 8) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)&v91[0] = v8;
  *((_QWORD *)&v91[4] + 1) = v9;
  LOBYTE(v91[5]) = v10;
  DWORD1(v91[5]) = v11;
  *((_QWORD *)&v91[5] + 1) = *((_QWORD *)a1 + 11);
  v38 = *((_OWORD *)a1 + 7);
  v91[6] = *((_OWORD *)a1 + 6);
  v91[7] = v38;
  *(_QWORD *)&v91[8] = v12;
  BYTE8(v91[8]) = v13;
  v39 = *((_OWORD *)a1 + 10);
  v91[9] = *((_OWORD *)a1 + 9);
  v91[10] = v39;
  LODWORD(v91[11]) = v14;
  *((_QWORD *)&v91[11] + 1) = v15;
  v40 = *((_OWORD *)a1 + 13);
  v91[12] = *((_OWORD *)a1 + 12);
  v91[13] = v40;
  v91[14] = v16;
  v91[15] = v17;
  v91[16] = v18;
  v91[17] = v19;
  v91[18] = v20;
  v91[19] = v21;
  v91[20] = v22;
  *(_QWORD *)&v91[21] = v6;
  *((_QWORD *)&v91[21] + 1) = v23;
  *(_QWORD *)&v91[22] = *((_QWORD *)a1 + 44);
  *((_QWORD *)&v91[22] + 1) = v24;
  v91[23] = *((_OWORD *)a1 + 23);
  *(_QWORD *)&v91[24] = v25;
  BYTE8(v91[24]) = v26;
  *(_QWORD *)((char *)&v91[24] + 12) = v27;
  *(_QWORD *)((char *)&v91[25] + 4) = __PAIR64__(v29, v28);
  *(_OWORD *)((char *)&v91[25] + 12) = *(_OWORD *)(a1 + 412);
  *(_OWORD *)((char *)&v91[26] + 12) = *(_OWORD *)(a1 + 428);
  BYTE12(v91[27]) = v30;
  *(_QWORD *)&v91[28] = v31;
  *((_QWORD *)&v91[28] + 1) = v7;
  LOBYTE(v91[29]) = v32;
  *(_OWORD *)((char *)&v91[29] + 8) = v33;
  *((_QWORD *)&v91[30] + 1) = v34;
  v41 = *((_OWORD *)a1 + 32);
  v91[31] = *((_OWORD *)a1 + 31);
  v91[32] = v41;
  *(_QWORD *)&v91[33] = v35;
  *((_QWORD *)&v91[33] + 1) = v36;
  *(_QWORD *)&v91[34] = v37;
  memcpy(v90, v91, 0x228uLL);
  swift_retain();
  outlined retain of HandsKitData(v91);
  v42 = GesturePipelineMapper.findMappingImpl(_:)(v90);
  swift_release();
  outlined release of HandsKitData(v91);
  v78 = *(_QWORD *)(v42 + 16);
  if (v78)
  {
    v43 = 0;
    v44 = v42 + 32;
    v45 = v82;
    v80 = v42;
    v77 = v42 + 32;
    while (v43 < *(_QWORD *)(v42 + 16))
    {
      v46 = v44 + 24 * v43;
      v47 = *(_QWORD *)(v46 + 8);
      if ((v47 & 0x8000000000000000) != 0)
        goto LABEL_40;
      v48 = *(_QWORD *)(v45 + 24);
      if (v47 >= *(_QWORD *)(v48 + 16))
        goto LABEL_41;
      v49 = *(_QWORD *)a1;
      v50 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      if (!v50)
      {
        swift_bridgeObjectRelease();
LABEL_28:
        v90[3] = MEMORY[0x24BEE0D00];
        v90[0] = 0xD00000000000002DLL;
        v90[1] = 0x800000023D9CEAF0;
        type metadata accessor for HandyLoggerNeo();
        *(_OWORD *)v86 = xmmword_23D9A9550;
        *(_QWORD *)&v86[16] = 0;
        *(_QWORD *)&v86[24] = 0;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)v86, 0xD000000000000061, 0x800000023D9CEA80, 49, (uint64_t)v90, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v90);
        goto LABEL_30;
      }
      v51 = *(_QWORD *)v46;
      v84 = *(unsigned __int8 *)(v46 + 16);
      v79 = v43 + 1;
      v52 = v83;
      v53 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      v81 = *(_QWORD *)(v48 + 8 * v47 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54 = 0;
      v55 = *(_QWORD *)(v52 + 72);
      while (1)
      {
        v56 = v85;
        outlined init with copy of HandDescriptor(v49 + v53, v85);
        v57 = *(_QWORD *)(v56 + 144);
        outlined destroy of HandDescriptor(v56);
        if (v57 == v51)
          break;
        ++v54;
        v53 += v55;
        if (v50 == v54)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v45 = v82;
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      v58 = *(_QWORD *)(v81 + 16);
      if (v58)
      {
        v59 = v81 + 32;
        for (i = v58 - 1; ; --i)
        {
          outlined init with copy of Detection2DComputePipelineProtocol(v59, (uint64_t)v87);
          if (v84)
          {
            v61 = v88;
            v62 = v89;
            __swift_project_boxed_opaque_existential_1(v87, v88);
            (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
          }
          v63 = v88;
          v64 = v89;
          __swift_project_boxed_opaque_existential_1(v87, v88);
          memcpy(v90, a1, 0x228uLL);
          v65 = v90[0];
          memcpy(v86, a1, sizeof(v86));
          outlined retain of HandsKitData(v90);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
          if (v54 >= *(_QWORD *)(v65 + 16))
            break;
          (*(void (**)(unint64_t, _BYTE *, uint64_t, uint64_t))(v64 + 24))(v65 + v53, v86, v63, v64);
          outlined release of HandsKitData(v90);
          *(_QWORD *)a1 = v65;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
          if (!i)
            goto LABEL_22;
          v59 += 40;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      v45 = v82;
      v43 = v79;
      v42 = v80;
      v44 = v77;
      if (v79 == v78)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  v45 = v82;
LABEL_30:
  v71 = *(_QWORD *)(v45 + 32);
  v72 = *(_QWORD *)(v71 + 16);
  if (v72)
  {
    v73 = v71 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Detection2DComputePipelineProtocol(v73, (uint64_t)v90);
      v74 = v90[3];
      v75 = v90[4];
      __swift_project_boxed_opaque_existential_1(v90, v90[3]);
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(a1, v74, v75);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v90);
      v73 += 40;
      --v72;
    }
    while (v72);
    swift_bridgeObjectRelease();
  }
  Hands_trace_CBridge();
}

uint64_t GesturePipeline.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GesturePipeline()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for PinchRecoverSimilarity()
{
  return swift_initClassMetadata2();
}

void PinchRecoverSimilarity.recoverImplementation(_:_:_:_:_:_:_:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata accessor for PinchRecoverSimilarity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PinchRecoverSimilarity);
}

void TapRecoverSimilarity.recoverImplementation(_:_:_:_:_:_:_:)(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W7>, uint64_t *a6@<X8>, uint64_t a7, unsigned __int8 a8, float32x4_t *a9, float *a10)
{
  uint64_t v10;
  const void *v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  __int128 v18;
  char v19;
  char v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  BOOL v32;
  float v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  char v41;
  int v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  float v48;
  float32x4_t v50;
  int v51;
  float v52;
  float32x4_t v53;
  float32x4_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  float32x4_t v62;
  _OWORD __src[37];
  _OWORD __dst[37];

  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v53 = a9[21];
    v50 = a9[20];
    v55 = a9[19];
    v13 = (const void *)(a3 + 592 * v10 - 560);
    memcpy(__dst, v13, 0x242uLL);
    v14 = *(_QWORD *)&__dst[1];
    memcpy(__src, v13, 0x242uLL);
    v15 = a10[8];
    outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
    v51 = specialized static RepetitivePinchBasicFeature.makeRangeCondition(_:_:)((uint64_t *)__src, v15);
    v16 = a10[4];
    memcpy(__src, __dst, 0x242uLL);
    v17 = specialized static RepetitivePinchBasicFeature.notFullyOccludedCondition(_:_:)(__src, a10[11]);
    v18 = __dst[12];
    v60 = __dst[14];
    v61 = __dst[13];
    v58 = __dst[16];
    v59 = __dst[15];
    v56 = __dst[18];
    v57 = __dst[17];
    v19 = __dst[19];
    v20 = BYTE1(__dst[19]);
    v21 = DWORD1(__dst[19]);
    v52 = a10[22];
    __src[0] = __dst[12];
    __src[1] = __dst[13];
    __src[2] = __dst[14];
    __src[3] = __dst[15];
    __src[4] = __dst[16];
    __src[5] = __dst[17];
    __src[6] = __dst[18];
    LOWORD(__src[7]) = __dst[19];
    DWORD1(__src[7]) = DWORD1(__dst[19]);
    specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)((uint64_t)__src);
    v23 = vmulq_f32(v55, v22);
    v24 = acosf(fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0], 1.0), -1.0));
    v25 = a10[12];
    __src[0] = v18;
    __src[1] = v61;
    __src[2] = v60;
    __src[3] = v59;
    __src[4] = v58;
    __src[5] = v57;
    __src[6] = v56;
    LOBYTE(__src[7]) = v19;
    BYTE1(__src[7]) = v20;
    DWORD1(__src[7]) = v21;
    HandPose.getHoverDistanceVector()();
    if (*(_QWORD *)(*((_QWORD *)&v18 + 1) + 16) < 7uLL)
    {
      __break(1u);
    }
    else
    {
      v27 = (float)((float)a1 / (float)a2) - (float)((float)a4 / (float)a5);
      v28 = (float)(v24 / 3.14) * 180.0;
      v29 = vmulq_f32(v26, v26);
      v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)));
      v31 = sqrtf(v30.f32[0]);
      v48 = v16;
      v32 = v27 > v16;
      v33 = a10[20];
      *(float32x2_t *)v30.f32 = vsub_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)(*((_QWORD *)&v18 + 1) + 240));
      v30.f32[2] = v50.f32[2] - *(float *)(*((_QWORD *)&v18 + 1) + 248);
      v34 = vmulq_f32(v30, v30);
      __src[0] = v18;
      __src[1] = v61;
      __src[2] = v60;
      __src[3] = v59;
      __src[4] = v58;
      __src[5] = v57;
      __src[6] = v56;
      LOBYTE(__src[7]) = v19;
      BYTE1(__src[7]) = v20;
      DWORD1(__src[7]) = v21;
      v35 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
      HandPose.getSimplifiedPinchCentroid(isRaw:)();
      v62 = v36;
      outlined release of SingleHandFrameFeatures((uint64_t)__dst);
      v37 = vsubq_f32(v53, v62);
      v38 = vmulq_f32(v37, v37);
      v39 = a10[21];
      v40 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]);
      v41 = specialized static RepetitivePinchBasicFeature.notRecentPinchDown(_:_:)(a3, 3);
      v42 = v17 | a8;
      if ((v14 == 2) | (v51 ^ 1) & 1 | (v42 ^ 1) & 1 | v32
        || (v28 <= v52 ? (v43 = v31 > v25) : (v43 = 1),
            !v43 ? (v44 = v35 > v33) : (v44 = 1),
            v44 || (v41 & 1) == 0 || v40 > v39))
      {
        v45 = 2;
        if ((((v14 == 2) | v51 ^ 1 | v42 ^ 1 | v32) & (v14 == 2)) == 0)
          v45 = 0;
        if ((v51 & 1) == 0)
          v45 |= 0x100uLL;
        if (v27 > v48)
          v45 |= 4uLL;
        if ((v42 & 1) == 0)
          v45 |= 8uLL;
        if (v28 > v52)
          v45 |= 0x20uLL;
        if (v31 > v25)
          v45 |= 0x40uLL;
        if (v35 > v33)
          v45 |= 0x400uLL;
        if (v40 > v39)
          v45 |= 0x1000uLL;
        if ((v41 & 1) == 0)
          v45 |= 0x2000uLL;
      }
      else
      {
        v45 = 0x8000;
      }
      *a6 = v45;
    }
  }
  else
  {
    *a6 = 0;
  }
}

uint64_t type metadata accessor for TapRecoverSimilarity(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TapRecoverSimilarity);
}

void ScrollRecoverSimilarity.recoverImplementation(_:_:_:_:_:_:_:)(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W7>, uint64_t *a6@<X8>, uint64_t a7, unsigned __int8 a8, float32x4_t *a9, float *a10)
{
  unint64_t v10;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  __int128 v17;
  char v18;
  char v19;
  int v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x2_t *v27;
  int v28;
  float v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float v35;
  float v36;
  char v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  float32x4_t v44;
  int v45;
  uint64_t v46;
  float32x4_t v48;
  _BOOL4 v49;
  float32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  float32x4_t v57;
  _OWORD __src[37];
  _OWORD __dst[37];

  v10 = *(_QWORD *)(a3 + 16);
  if (!v10)
  {
    *a6 = 0;
    return;
  }
  v44 = a9[20];
  v48 = a9[21];
  v50 = a9[19];
  v13 = 592 * v10 + a3 + 32;
  memcpy(__dst, (const void *)(v13 - 592), 0x242uLL);
  v46 = *(_QWORD *)&__dst[1];
  memcpy(__src, (const void *)(v13 - 592), 0x242uLL);
  v14 = a10[8];
  outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
  v45 = specialized static RepetitivePinchBasicFeature.makeRangeCondition(_:_:)((uint64_t *)__src, v14);
  v15 = a10[4];
  memcpy(__src, __dst, 0x242uLL);
  v16 = specialized static RepetitivePinchBasicFeature.notFullyOccludedCondition(_:_:)(__src, a10[11]);
  v17 = __dst[12];
  v55 = __dst[14];
  v56 = __dst[13];
  v53 = __dst[16];
  v54 = __dst[15];
  v51 = __dst[18];
  v52 = __dst[17];
  v18 = __dst[19];
  v19 = BYTE1(__dst[19]);
  v20 = DWORD1(__dst[19]);
  v49 = specialized static RepetitivePinchBasicFeature.movingTheSameDirection(_:_:)(a3, v48);
  v21 = a10[13];
  __src[0] = v17;
  __src[1] = v56;
  __src[2] = v55;
  __src[3] = v54;
  __src[4] = v53;
  __src[5] = v52;
  __src[6] = v51;
  LOBYTE(__src[7]) = v18;
  BYTE1(__src[7]) = v19;
  DWORD1(__src[7]) = v20;
  specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)((uint64_t)__src);
  v23 = vmulq_f32(v50, v22);
  v24 = acosf(fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0], 1.0), -1.0));
  v25 = a10[12];
  __src[0] = v17;
  __src[1] = v56;
  __src[2] = v55;
  __src[3] = v54;
  __src[4] = v53;
  __src[5] = v52;
  __src[6] = v51;
  LOBYTE(__src[7]) = v18;
  BYTE1(__src[7]) = v19;
  DWORD1(__src[7]) = v20;
  HandPose.getHoverDistanceVector()();
  v57 = v26;
  outlined release of SingleHandFrameFeatures((uint64_t)__dst);
  if (v10 < 3)
  {
    __break(1u);
    goto LABEL_36;
  }
  v27 = *(float32x2_t **)(v13 - 1576);
  if (*(_QWORD *)&v27[2] < 7uLL)
  {
LABEL_36:
    __break(1u);
    return;
  }
  v28 = v16 | a8;
  v29 = (float)((float)a1 / (float)a2) - (float)((float)a4 / (float)a5);
  v30 = (float)(v24 / 3.14) * 180.0;
  v31 = vmulq_f32(v57, v57);
  v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)));
  v33 = sqrtf(v32.f32[0]);
  *(float32x2_t *)v32.f32 = vsub_f32(*(float32x2_t *)v44.f32, v27[30]);
  v32.f32[2] = v44.f32[2] - v27[31].f32[0];
  v34 = vmulq_f32(v32, v32);
  v35 = a10[10];
  v36 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
  v37 = specialized static RepetitivePinchBasicFeature.notRecentPinchDown(_:_:)(a3, 8);
  if ((v46 == 2) | (v45 ^ 1) & 1 | (v28 ^ 1) & 1 | (v29 > v15)
    || !v49
    || (v30 <= v21 ? (v38 = v33 > v25) : (v38 = 1), !v38 ? (v39 = v36 > v35) : (v39 = 1), v39 || (v37 & 1) == 0))
  {
    v40 = 2;
    if ((((v46 == 2) | v45 ^ 1 | v28 ^ 1 | (v29 > v15)) & (v46 == 2)) == 0)
      v40 = 0;
    if ((v45 & 1) == 0)
      v40 |= 0x100uLL;
    if (v29 > v15)
      v40 |= 4uLL;
    if ((v28 & 1) == 0)
      v40 |= 8uLL;
    if (!v49)
      v40 |= 0x10uLL;
    if (v30 > v21)
      v40 |= 0x20uLL;
    if (v33 > v25)
      v40 |= 0x40uLL;
    if (v36 > v35)
      v40 |= 0x400uLL;
    if ((v37 & 1) == 0)
      v40 |= 0x2000uLL;
  }
  else
  {
    v40 = 0x4000;
  }
  *a6 = v40;
}

uint64_t type metadata accessor for ScrollRecoverSimilarity(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ScrollRecoverSimilarity);
}

uint64_t type metadata completion function for TapRecoverSimilarity()
{
  return swift_initClassMetadata2();
}

id JpegDecoder.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

Hands::JpegColorSpace_optional __swiftcall JpegColorSpace.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  Hands::JpegColorSpace_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of JpegColorSpace.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t JpegColorSpace.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x4C41435359415247;
  else
    return 4343634;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JpegColorSpace(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JpegColorSpace()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance JpegColorSpace()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JpegColorSpace()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Hands::JpegColorSpace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance JpegColorSpace(Swift::String *a1)
{
  return JpegColorSpace.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance JpegColorSpace(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 4343634;
  if (*v1)
    v2 = 0x4C41435359415247;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE900000000000045;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JpegDecoder.InputMetaKey()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance JpegDecoder.InputMetaKey()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JpegDecoder.InputMetaKey()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id JpegDecoder.init()()
{
  char *v0;
  VTPixelTransferSessionRef *v1;
  char *v2;
  Swift::String v3;
  Swift::String v4;
  objc_super v6;
  _OWORD v7[2];
  _QWORD v8[4];

  v1 = (VTPixelTransferSessionRef *)&v0[OBJC_IVAR____TtC5Hands11JpegDecoder__vtPixelTransferSession];
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Hands11JpegDecoder__vtPixelTransferSession] = 0;
  v2 = v0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Hands11JpegDecoder__decompressionSessions] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Hands11JpegDecoder__syncSemaphore] = dispatch_semaphore_create(0);
  swift_beginAccess();
  LODWORD(v1) = VTPixelTransferSessionCreate(0, v1);
  swift_endAccess();
  if ((_DWORD)v1 != noErr.getter())
  {
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v3._object = (void *)0x800000023D9CEBD0;
    v3._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v8[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v7, 0, sizeof(v7));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v7, 0xD00000000000004CLL, 0x800000023D9CEB80, 41, (uint64_t)v8, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Hands11JpegDecoder__pixelBufferPoolDict] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);

  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for JpegDecoder();
  return objc_msgSendSuper2(&v6, sel_init);
}

void JpegDecoder.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  OpaqueVTDecompressionSession *v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  VTPixelTransferSessionRef *v15;
  objc_super v16;

  v1 = &v0[OBJC_IVAR____TtC5Hands11JpegDecoder__decompressionSessions];
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }
    if (v12 >= v7)
      goto LABEL_21;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_21;
      v13 = *(_QWORD *)(v3 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_21;
        v13 = *(_QWORD *)(v3 + 8 * v8);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v6 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = (OpaqueVTDecompressionSession *)*(id *)(*(_QWORD *)(v2 + 56) + 8 * v10);
    VTDecompressionSessionFinishDelayedFrames(v11);
    VTDecompressionSessionInvalidate(v11);

  }
  v14 = v12 + 3;
  if (v14 < v7)
  {
    v13 = *(_QWORD *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v8 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_25;
        if (v8 >= v7)
          goto LABEL_21;
        v13 = *(_QWORD *)(v3 + 8 * v8);
        ++v14;
        if (v13)
          goto LABEL_20;
      }
    }
    v8 = v14;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  v15 = (VTPixelTransferSessionRef *)&v0[OBJC_IVAR____TtC5Hands11JpegDecoder__vtPixelTransferSession];
  swift_beginAccess();
  if (*v15)
    VTPixelTransferSessionInvalidate(*v15);
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for JpegDecoder();
  objc_msgSendSuper2(&v16, sel_dealloc);
}

CVPixelBufferPoolRef closure #1 in implicit closure #1 in JpegDecoder.getPixelBufferPool(inputMetaKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CVPixelBufferPoolRef result;
  CVPixelBufferPoolRef v7;
  uint64_t *v8;
  __CVPixelBufferPool *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12[24];

  v12[0] = a1 & 1;
  result = specialized static JpegDecoder.createPixelBufferPool(colorSpace:width:height:)(v12, SHIDWORD(a1), a2);
  if (result)
  {
    v7 = result;
    v8 = (uint64_t *)(a3 + OBJC_IVAR____TtC5Hands11JpegDecoder__pixelBufferPoolDict);
    swift_beginAccess();
    v9 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v8;
    *v8 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a1 & 0xFFFFFFFF00000001, a2, isUniquelyReferenced_nonNull_native);
    *v8 = v11;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_23D7DD820(int a1, int a2, int a3, uint64_t a4, int a5, int a6, const CMSampleTimingInfo *a7, OpaqueVTDecompressionSession *a8, CMBlockBufferRef *blockBufferOut, uint64_t a10, size_t *sampleSizeArray, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, VTDecompressionSessionRef session,uint64_t a21,uint64_t aBlock,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,VTDecodeInfoFlags infoFlagsOut,uint64_t a29,__int128 a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  void *v53;
  uint64_t v54;
  int v55;
  int v56;
  int32_t v57;
  char v58;
  const void *v59;
  int32_t v60;
  uint64_t v61;
  size_t v62;
  const __CFAllocator *v64;
  OSStatus v65;
  OpaqueCMBlockBuffer *v66;
  OSStatus v67;
  uint64_t inited;
  const size_t *v69;
  OSStatus v70;
  Swift::String v71;
  Swift::String v72;
  OpaqueCMBlockBuffer *v73;
  const opaqueCMFormatDescription *v74;
  OSStatus v75;
  void *v76;
  uint64_t v77;
  void *v78;
  opaqueCMSampleBuffer *v79;
  id v80;
  int v81;
  int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t *);
  void *v90;
  void (*v91)(uint64_t, uint64_t, __CVPixelBufferPool *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93[26];

  v62 = BYTE6(a4);
  v81 = v56;
  v82 = v55;
  v83 = v54;
  v84 = v53;
  v85 = v52;
  v64 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v65 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, BYTE6(a4), 0, 0, 0, BYTE6(a4), 0, (CMBlockBufferRef *)(v61 - 104));
  v66 = *(OpaqueCMBlockBuffer **)(v61 - 104);
  if (v65 != noErr.getter())
    goto LABEL_12;
  if (!v59)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!v66)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v67 = CMBlockBufferReplaceDataBytes(v59, v66, 0, v62);
  if (v67 != noErr.getter())
  {
LABEL_12:

    return;
  }
  *(_QWORD *)(v61 - 112) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A70A0;
  *(_QWORD *)(inited + 32) = v62;
  v69 = (const size_t *)(inited + 32);
  *(_QWORD *)(v61 - 160) = 0;
  v70 = CMVideoFormatDescriptionCreate(v64, 0x6A706567u, v60, v57, 0, (CMVideoFormatDescriptionRef *)(v61 - 160));
  if (v70 != noErr.getter())
  {
    v87 = 0;
    v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v71._object = (void *)0x800000023D9CECE0;
    v71._countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v71);
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v90 = (void *)MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v93, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, v93, 0xD00000000000004CLL, 0x800000023D9CEB80, 140, (uint64_t)&v87, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
  }
  v73 = *(OpaqueCMBlockBuffer **)(v61 - 104);
  if (!v73)
    goto LABEL_16;
  v74 = *(const opaqueCMFormatDescription **)(v61 - 160);
  if (!v74)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v75 = CMSampleBufferCreate(v64, v73, 1u, 0, 0, v74, 1, 1, a7, 1, v69, (CMSampleBufferRef *)(v61 - 112));
  v76 = *(void **)(v61 - 112);
  swift_bridgeObjectRelease();
  if (v75 == noErr.getter())
  {
    LODWORD(v93[0]) = 0;
    if (v76)
    {
      v77 = swift_allocObject();
      *(_BYTE *)(v77 + 16) = v58 & 1;
      *(_DWORD *)(v77 + 20) = v81;
      *(_DWORD *)(v77 + 24) = v82;
      *(_QWORD *)(v77 + 32) = v84;
      *(_QWORD *)(v77 + 40) = v83;
      *(_QWORD *)(v77 + 48) = v85;
      v91 = partial apply for closure #1 in closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:);
      v92 = v77;
      v87 = MEMORY[0x24BDAC760];
      v88 = 1107296256;
      v89 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Int32, @unowned VTDecodeInfoFlags, @guaranteed CVBufferRef?, @unowned CMTime, @unowned CMTime) -> ();
      v90 = &block_descriptor_10;
      v78 = _Block_copy(&v87);
      v79 = v76;
      v80 = v84;
      swift_retain();
      swift_release();
      VTDecompressionSessionDecodeFrameWithOutputHandler(a8, v79, 1u, (VTDecodeInfoFlags *)v93, v78);
      _Block_release(v78);

      return;
    }
LABEL_18:
    __break(1u);
    JUMPOUT(0x23D7DDBC8);
  }

}

void closure #1 in closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)(uint64_t a1, uint64_t a2, __CVPixelBufferPool *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, Swift::UInt32 a11, uint64_t a12, void (*a13)(__CVPixelBufferPool *))
{
  __CVPixelBufferPool *v13;
  char v14;
  __CVPixelBufferPool *v15;
  __CVPixelBufferPool *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __CVPixelBufferPool *v21;
  Swift::String v22;
  CVPixelBufferRef v23;
  __CVBuffer *v24;
  VTPixelTransferSessionRef *v25;
  OSStatus v26;
  Swift::String v27;
  __CVPixelBufferPool *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  CVPixelBufferRef pixelBufferOut[5];

  pixelBufferOut[4] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    a13(0);
    return;
  }
  v13 = a3;
  if ((a10 & 1) != 0)
  {
    v16 = a3;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v15 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      v28 = v15;
      a13(v13);

      return;
    }
  }
  v17 = (uint64_t *)(a12 + OBJC_IVAR____TtC5Hands11JpegDecoder__pixelBufferPoolDict);
  swift_beginAccess();
  v18 = *v17;
  if (*(_QWORD *)(v18 + 16))
  {
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a10 & 0xFFFFFFFF00000001, a11);
    if ((v20 & 1) != 0)
    {
      v21 = (__CVPixelBufferPool *)*(id *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  v21 = closure #1 in implicit closure #1 in JpegDecoder.getPixelBufferPool(inputMetaKey:)(a10 & 0xFFFFFFFF00000001, a11, a12);
LABEL_12:
  pixelBufferOut[0] = 0;
  if (CVPixelBufferPoolCreatePixelBuffer(0, v21, pixelBufferOut))
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v32 = 0xD00000000000002DLL;
    v33 = 0x800000023D9C4660;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v29 = xmmword_23D9A7060;
    v30 = 0;
    v31 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v29, 0xD00000000000004CLL, 0x800000023D9CEB80, 169, (uint64_t)&v32, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
    a13(0);
  }
  v23 = pixelBufferOut[0];
  if (pixelBufferOut[0])
  {
    v24 = pixelBufferOut[0];
    CVPixelBufferLockBaseAddress(v13, 1uLL);
    CVPixelBufferLockBaseAddress(v24, 0);
    v25 = (VTPixelTransferSessionRef *)(a12 + OBJC_IVAR____TtC5Hands11JpegDecoder__vtPixelTransferSession);
    swift_beginAccess();
    if (!*v25)
    {
      __break(1u);
      return;
    }
    v26 = VTPixelTransferSessionTransferImage(*v25, v13, v24);
    CVPixelBufferUnlockBaseAddress(v13, 1uLL);
    CVPixelBufferUnlockBaseAddress(v24, 0);
    if (v26 == noErr.getter())
    {
      v24 = v24;
      a13(v23);

      v13 = v21;
      v21 = v24;
    }
    else
    {
      v32 = 0;
      v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v32 = 0xD000000000000015;
      v33 = 0x800000023D9CED50;
      LODWORD(v29) = v26;
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v34 = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v29 = xmmword_23D9A7060;
      v30 = 0;
      v31 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v29, 0xD00000000000004CLL, 0x800000023D9CEB80, 181, (uint64_t)&v32, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
      a13(0);
    }

    v13 = v21;
    v21 = v24;
  }

}

void thunk for @escaping @callee_guaranteed @Sendable (@unowned Int32, @unowned VTDecodeInfoFlags, @guaranteed CVBufferRef?, @unowned CMTime, @unowned CMTime) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void (*v16)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *a5;
  v10 = a5[1];
  v11 = a5[2];
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v15 = a4;
  v16(a2, a3, a4, v9, v10, v11, v12, v13, v14);
  swift_release();

}

void JpegDecoder.decodeImage(colorspace:width:height:data:completion:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  VTDecompressionSessionRef v15;
  OpaqueVTDecompressionSession *v16;
  char isUniquelyReferenced_nonNull_native;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CMTimeValue v25;
  CMTimeScale v26;
  int v27;
  CMTimeEpoch v28;
  CMTime v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CMTime v34;
  CMTime v35;

  v33 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = (uint64_t *)(v5 + OBJC_IVAR____TtC5Hands11JpegDecoder__decompressionSessions);
  swift_beginAccess();
  v11 = *v10;
  v12 = v9 | (a2 << 32);
  if (*(_QWORD *)(*v10 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9 | (a2 << 32), a3);
    if ((v14 & 1) != 0)
    {
      *(id *)(*(_QWORD *)(v11 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v15 = specialized JpegDecoder.createSession(colorspace:width:height:)((int)&v25, a2, a3);
  swift_beginAccess();
  v16 = v15;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = *v10;
  *v10 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, v12, a3, isUniquelyReferenced_nonNull_native);
  *v10 = v24;
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_6:
  v34 = CMTime.init(seconds:preferredTimescale:)(0.0, 1000000);
  value = v34.value;
  timescale = v34.timescale;
  epoch = v34.epoch;
  v21 = HIDWORD(*(_QWORD *)&v34.timescale);
  v35 = CMTime.init(seconds:preferredTimescale:)(0.0, 1000000);
  v22 = *MEMORY[0x24BDC0D40];
  v23 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
  v25 = value;
  v26 = timescale;
  v27 = v21;
  v28 = epoch;
  v29 = v35;
  v30 = v22;
  v31 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 8);
  v32 = v23;
  __asm { BR              X10 }
}

uint64_t sub_23D7DE2B8()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v8;
  void *v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10 = v0;
  v11 = v1;
  v12 = BYTE2(v1);
  v13 = BYTE3(v1);
  v14 = BYTE4(v1);
  v15 = BYTE5(v1);
  v3 = v9;
  v4 = v2;
  v5 = v2;
  swift_retain_n();
  v6 = v3;
  v8 = v5;
  closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)((uint64_t)&v10, (uint64_t)&v10 + BYTE6(v1), v0, v1);

  outlined consume of Data._Representation(v0, v1);
  swift_release();
  outlined consume of Data._Representation(v0, v1);

  return swift_release();
}

uint64_t JpegDecoder.decodeImage(colorspace:width:height:data:)(_BYTE *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 24) = a4;
  *(_DWORD *)(v6 + 64) = a2;
  *(_DWORD *)(v6 + 68) = a3;
  *(_BYTE *)(v6 + 72) = *a1;
  return swift_task_switch();
}

uint64_t JpegDecoder.decodeImage(colorspace:width:height:data:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_BYTE *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v5;
  v6 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v5 + 16) = v2;
  *(_BYTE *)(v5 + 24) = v1;
  *(_QWORD *)(v5 + 28) = v6;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVBufferRef?);
  *v7 = v0;
  v7[1] = JpegDecoder.decodeImage(colorspace:width:height:data:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 v21;

  v20 = a7;
  v11 = a3 & 1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CVBufferRef?, Never>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = MEMORY[0x24BDAC7A8](v12, v15);
  v21 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v16);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  JpegDecoder.decodeImage(colorspace:width:height:data:completion:)(&v21, a4, a5, a6, v20);
  return swift_release();
}

uint64_t closure #1 in closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CVBufferRef?, Never>);
  return CheckedContinuation.resume(returning:)();
}

void *JpegDecoder.decodeImageSync(colorspace:width:height:data:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v21;
  unsigned __int8 v22[24];

  v21 = a5;
  v10 = type metadata accessor for DispatchTime();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = *a1;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  v22[0] = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v5;
  swift_retain();
  v5;
  JpegDecoder.decodeImage(colorspace:width:height:data:completion:)(v22, a2, a3, a4, v21);
  swift_release();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_beginAccess();
  v18 = *(void **)(v16 + 16);
  v19 = v18;
  swift_release();
  return v18;
}

Swift::Int closure #1 in JpegDecoder.decodeImageSync(colorspace:width:height:data:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v5 = a1;

  return OS_dispatch_semaphore.signal()();
}

CVPixelBufferRef static JpegDecoder.addStrideToImage(buffer:width:height:stride:)(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  OSType PixelFormatType;
  id v24;
  Class isa;
  id v26;
  __CVBuffer *v27;
  uint64_t v28;
  void **v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40;
  id v41;
  NSDictionary v42;
  _BYTE *BaseAddress;
  __CVBuffer *v44;
  _BYTE *v45;
  id v46;
  _BYTE *v47;
  int64_t BytesPerRow;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CVPixelBufferRef v55;
  id v57;
  CVPixelBufferRef pixelBufferOut[64];

  pixelBufferOut[62] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(a1, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(IOSurfacePropertyKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A96F0;
  v9 = MEMORY[0x24BEE1768];
  v10 = (void *)*MEMORY[0x24BDD8D40];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD8D40];
  *(_QWORD *)(inited + 40) = a4;
  v11 = (void *)*MEMORY[0x24BDD8D38];
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 80) = 1;
  v12 = (void *)*MEMORY[0x24BDD8D58];
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 112) = v12;
  *(_QWORD *)(inited + 120) = a3;
  v13 = (void *)*MEMORY[0x24BDD8D90];
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v13;
  *(_QWORD *)(inited + 160) = a2;
  v14 = (void *)*MEMORY[0x24BDD8D30];
  *(_QWORD *)(inited + 184) = v9;
  *(_QWORD *)(inited + 192) = v14;
  if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63)
    goto LABEL_26;
  v15 = inited;
  *(_QWORD *)(inited + 200) = a3 * a4;
  v16 = (void *)*MEMORY[0x24BDD8D60];
  *(_QWORD *)(inited + 224) = v9;
  *(_QWORD *)(inited + 232) = v16;
  v17 = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v22 = v16;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  *(_QWORD *)(v15 + 264) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(v15 + 240) = PixelFormatType;
  specialized Dictionary.init(dictionaryLiteral:)(v15);
  v24 = objc_allocWithZone(MEMORY[0x24BDD8DE8]);
  type metadata accessor for IOSurfacePropertyKey(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithProperties_, isa);

  v57 = v26;
  if (!v26)
    goto LABEL_29;
  v27 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  v28 = swift_initStackObject();
  v29 = (void **)MEMORY[0x24BDC5690];
  *(_OWORD *)(v28 + 16) = xmmword_23D9A7080;
  v30 = *v29;
  *(_QWORD *)(v28 + 32) = v30;
  v31 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v28 + 40) = 1;
  v32 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(v28 + 64) = v31;
  *(_QWORD *)(v28 + 72) = v32;
  *(_BYTE *)(v28 + 80) = 1;
  v33 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(v28 + 104) = v31;
  *(_QWORD *)(v28 + 112) = v33;
  v34 = v30;
  v35 = v32;
  v36 = v33;
  v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v39 = (void **)MEMORY[0x24BDC55E0];
  *(_QWORD *)(v28 + 120) = v37;
  v40 = *v39;
  *(_QWORD *)(v28 + 144) = v38;
  *(_QWORD *)(v28 + 152) = v40;
  *(_QWORD *)(v28 + 184) = v31;
  *(_BYTE *)(v28 + 160) = 1;
  v41 = v40;
  specialized Dictionary.init(dictionaryLiteral:)(v28);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v42.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  BaseAddress = CVPixelBufferGetBaseAddress(v27);
  v44 = v27;
  if (BaseAddress)
  {
    v45 = BaseAddress;
    CVPixelBufferGetDataSize(v27);
    v46 = objc_retainAutorelease(v57);
    v47 = objc_msgSend(v46, sel_baseAddress);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v44);
    if (a3 < 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a3)
    {
      if (a2 < 0)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      v49 = 0;
      while (1)
      {
        if (v49 == a3)
          goto LABEL_23;
        if (a2)
          break;
LABEL_8:
        if (++v49 == a3)
          goto LABEL_18;
      }
      v50 = v49 * a4;
      if ((unsigned __int128)(v49 * (__int128)a4) >> 64 == (v49 * a4) >> 63)
      {
        v51 = v49 * BytesPerRow;
        if ((unsigned __int128)(v49 * (__int128)BytesPerRow) >> 64 != (v49 * BytesPerRow) >> 63)
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        v52 = 0;
        while (1)
        {
          v53 = v50 + v52;
          if (__OFADD__(v50, v52))
            break;
          v54 = v51 + v52;
          if (__OFADD__(v51, v52))
            goto LABEL_22;
          ++v52;
          v47[v53] = v45[v54];
          if (a2 == v52)
            goto LABEL_8;
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      __break(1u);
      goto LABEL_25;
    }
LABEL_18:
    pixelBufferOut[0] = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x24BDBD240], (IOSurfaceRef)v46, v42.super.isa, pixelBufferOut);
    CVPixelBufferUnlockBaseAddress(v44, 0);
    v55 = pixelBufferOut[0];

  }
  else
  {
    CVPixelBufferUnlockBaseAddress(v27, 0);
    pixelBufferOut[3] = (CVPixelBufferRef)MEMORY[0x24BEE0D00];
    pixelBufferOut[0] = (CVPixelBufferRef)0xD000000000000016;
    pixelBufferOut[1] = (CVPixelBufferRef)0x800000023D9CEC40;
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004CLL, 0x800000023D9CEB80, 250, (uint64_t)pixelBufferOut, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)pixelBufferOut);
    return 0;
  }
  return v55;
}

uint64_t type metadata accessor for JpegDecoder()
{
  return objc_opt_self();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = __DataStorage._bytes.getter();
  v17 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v17 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = __DataStorage._length.getter();
  if (v18 >= a2 - a1)
    v19 = a2 - a1;
  else
    v19 = v18;
  v20 = v17 + v19;
  if (v17)
    v21 = v20;
  else
    v21 = 0;
  closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)(v17, v21, a4, a5);
  outlined consume of Data._Representation(a4, a5);

  return swift_release();
}

BOOL specialized static JpegDecoder.InputMetaKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  _BOOL8 result;

  v3 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  v6 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v7 = 0x4C41435359415247;
  else
    v7 = 4343634;
  if (v6)
    v8 = 0xE300000000000000;
  else
    v8 = 0xE900000000000045;
  if (*(_BYTE *)a2)
    v9 = 0x4C41435359415247;
  else
    v9 = 4343634;
  if (*(_BYTE *)a2)
    v10 = 0xE900000000000045;
  else
    v10 = 0xE300000000000000;
  if (v7 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n();
    if (v3 != v5)
      return 0;
    return v2 == v4;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v12 & 1) != 0 && v3 == v5)
    return v2 == v4;
  return result;
}

VTDecompressionSessionRef specialized JpegDecoder.createSession(colorspace:width:height:)(int a1, int32_t width, int32_t height)
{
  const __CFAllocator *v3;
  OSStatus v4;
  Swift::String v5;
  Swift::String v6;
  OSStatus v7;
  Swift::String v8;
  VTDecompressionSessionRef v9;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  VTDecompressionSessionRef decompressionSessionOut[2];

  decompressionSessionOut[1] = *(VTDecompressionSessionRef *)MEMORY[0x24BDAC8D0];
  formatDescriptionOut = 0;
  decompressionSessionOut[0] = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CMVideoFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x6A706567u, width, height, 0, &formatDescriptionOut);
  if (v4 != noErr.getter())
  {
    v13 = 0;
    v14 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v5._countAndFlagsBits = 0xD00000000000003BLL;
    v5._object = (void *)0x800000023D9CECE0;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v11 = 0u;
    v12 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v11, 0xD00000000000004CLL, 0x800000023D9CEB80, 63, (uint64_t)&v13, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  }
  if (!formatDescriptionOut)
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = VTDecompressionSessionCreate(v3, formatDescriptionOut, 0, 0, 0, decompressionSessionOut);
  if (v7 != noErr.getter())
  {
    v13 = 0;
    v14 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v13 = 0xD000000000000030;
    v14 = 0x800000023D9CED70;
    LODWORD(v11) = v7;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v11 = 0u;
    v12 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v11, 0xD00000000000004CLL, 0x800000023D9CEB80, 69, (uint64_t)&v13, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  }
  v9 = decompressionSessionOut[0];
  if (!decompressionSessionOut[0])
LABEL_9:
    __break(1u);

  return v9;
}

uint64_t partial apply for closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(unsigned int *)(v1 + 28), *(unsigned int *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23D7DF4F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23D7DF514()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type JpegColorSpace and conformance JpegColorSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JpegColorSpace and conformance JpegColorSpace;
  if (!lazy protocol witness table cache variable for type JpegColorSpace and conformance JpegColorSpace)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for JpegColorSpace, &type metadata for JpegColorSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JpegColorSpace and conformance JpegColorSpace);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JpegColorSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D7DF5D4 + 4 * byte_23D9B183D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D7DF608 + 4 * asc_23D9B1838[v4]))();
}

uint64_t sub_23D7DF608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DF610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7DF618);
  return result;
}

uint64_t sub_23D7DF624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7DF62CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D7DF630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7DF638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JpegColorSpace()
{
  return &type metadata for JpegColorSpace;
}

uint64_t method lookup function for JpegDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JpegDecoder.decodeImage(colorspace:width:height:data:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of JpegDecoder.decodeImage(colorspace:width:height:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = *(int **)((*MEMORY[0x24BEE4EA0] & *v5) + 0xE0);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = dispatch thunk of JpegDecoder.decodeImage(colorspace:width:height:data:);
  return v15(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of JpegDecoder.decodeImage(colorspace:width:height:data:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of JpegDecoder.decodeImageSync(colorspace:width:height:data:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t getEnumTagSinglePayload for JpegDecoder.InputMetaKey(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[12])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for JpegDecoder.InputMetaKey()
{
  return &type metadata for JpegDecoder.InputMetaKey;
}

unint64_t lazy protocol witness table accessor for type JpegDecoder.InputMetaKey and conformance JpegDecoder.InputMetaKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JpegDecoder.InputMetaKey and conformance JpegDecoder.InputMetaKey;
  if (!lazy protocol witness table cache variable for type JpegDecoder.InputMetaKey and conformance JpegDecoder.InputMetaKey)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for JpegDecoder.InputMetaKey, &type metadata for JpegDecoder.InputMetaKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JpegDecoder.InputMetaKey and conformance JpegDecoder.InputMetaKey);
  }
  return result;
}

uint64_t sub_23D7DF828()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CVBufferRef?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CVBufferRef?, Never>);
  return closure #1 in closure #1 in JpegDecoder.decodeImage(colorspace:width:height:data:)(a1);
}

uint64_t sub_23D7DF8CC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)(uint64_t a1, uint64_t a2, __CVPixelBufferPool *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  closure #1 in closure #1 in JpegDecoder.decodeImageWithSession(inputMetaKey:session:jpegData:width:height:completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *(unsigned __int8 *)(v9 + 16) | ((unint64_t)*(unsigned int *)(v9 + 20) << 32), *(_DWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(void (**)(__CVPixelBufferPool *))(v9 + 40));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

CVPixelBufferPoolRef specialized static JpegDecoder.createPixelBufferPool(colorSpace:width:height:)(_BYTE *a1, int a2, int a3)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  void *v24;
  id v25;
  void *v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  CVPixelBufferPoolRef poolOut[2];

  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x24BDAC8D0];
  if (*a1 == 1)
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      swift_bridgeObjectRelease();
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      v7 = 1714696752;
    else
      v7 = 1278226488;
  }
  else
  {
    v7 = 1714696752;
    swift_bridgeObjectRelease_n();
  }
  poolOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9A8140;
  v9 = (void *)*MEMORY[0x24BDC5708];
  type metadata accessor for CFStringRef(0);
  v11 = v10;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 32) = v9;
  v12 = MEMORY[0x24BEE3F88];
  *(_DWORD *)(v8 + 64) = a2;
  v13 = (void *)*MEMORY[0x24BDC5650];
  *(_QWORD *)(v8 + 120) = v10;
  *(_QWORD *)(v8 + 88) = v12;
  *(_QWORD *)(v8 + 96) = v13;
  *(_DWORD *)(v8 + 128) = a3;
  v14 = (void *)*MEMORY[0x24BDC56B8];
  *(_QWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 152) = v12;
  *(_QWORD *)(v8 + 160) = v14;
  v15 = MEMORY[0x24BEE44F0];
  *(_DWORD *)(v8 + 192) = v7;
  v16 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(v8 + 248) = v10;
  *(_QWORD *)(v8 + 216) = v15;
  *(_QWORD *)(v8 + 224) = v16;
  v17 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v18 = v9;
  v19 = v13;
  v20 = v14;
  v21 = v16;
  v22 = objc_msgSend(v17, sel_init);
  v23 = type metadata accessor for NSDictionary();
  *(_QWORD *)(v8 + 256) = v22;
  v24 = (void *)*MEMORY[0x24BDC55D0];
  *(_QWORD *)(v8 + 280) = v23;
  *(_QWORD *)(v8 + 288) = v24;
  *(_QWORD *)(v8 + 344) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 320) = 64;
  v25 = v24;
  v26 = (void *)NSDictionary.init(dictionaryLiteral:)();
  if (CVPixelBufferPoolCreate(0, 0, (CFDictionaryRef)v26, poolOut))
  {
    v31[3] = MEMORY[0x24BEE0D00];
    v31[0] = 0xD000000000000044;
    v31[1] = 0x800000023D9C44A0;
    type metadata accessor for HandyLoggerNeo();
    v28 = xmmword_23D9A7060;
    v29 = 0;
    v30 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v28, 0xD00000000000004CLL, 0x800000023D9CEB80, 89, (uint64_t)v31, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  }
  else
  {

  }
  return poolOut[0];
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CountByCameraSource()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CountByCameraSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type CameraSource and conformance CameraSource);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CountByCameraSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (void (*)(_QWORD))type metadata accessor for CountByCameraSource);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CountByCameraSource()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CountByCameraSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CountByCameraSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountByCameraSource()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CountByCameraSource()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
  return Message.hash(into:)();
}

uint64_t PipelineStatisticsLogging.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 11:
        case 12:
        case 13:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 3:
        case 4:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_8;
        case 7:
        case 8:
          type metadata accessor for CountByCameraSource(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PipelineStatisticsLogging.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(double *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 24)
      || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 32)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (*(double *)(v0 + 40) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 48)
            || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16)
              || (type metadata accessor for CountByCameraSource(0),
                  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16)
                || (type metadata accessor for CountByCameraSource(0),
                    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                if (*(double *)(v0 + 72) == 0.0
                  || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                {
                  if (*(double *)(v0 + 8) == 0.0
                    || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                  {
                    if (*(double *)(v0 + 16) == 0.0
                      || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                    {
                      type metadata accessor for PipelineStatisticsLogging(0);
                      return UnknownStorage.traverse<A>(visitor:)();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PipelineStatisticsLogging@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v1;
  *(_QWORD *)(a1 + 64) = v1;
  *(_QWORD *)(a1 + 72) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PipelineStatisticsLogging()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PipelineStatisticsLogging@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PipelineStatisticsLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 56);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PipelineStatisticsLogging())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PipelineStatisticsLogging()
{
  return PipelineStatisticsLogging.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PipelineStatisticsLogging()
{
  return PipelineStatisticsLogging.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PipelineStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PipelineStatisticsLogging@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PipelineStatisticsLogging._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PipelineStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PipelineStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
  return Message.hash(into:)();
}

uint64_t HandStatisticsLogging.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 6:
          type metadata accessor for CountByCameraSource(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
          goto LABEL_9;
        case 3:
          type metadata accessor for HandStatisticsLogging.CountByHandPresence(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
          goto LABEL_9;
        case 4:
        case 5:
        case 7:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 8:
          type metadata accessor for HandStatisticsLogging.CountByRejectionReason(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
LABEL_9:
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandStatisticsLogging.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for CountByCameraSource(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for CountByCameraSource(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[3] + 16)
        || (type metadata accessor for HandStatisticsLogging.CountByHandPresence(0),
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!v0[5] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          if (!v0[6] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0[2] + 16)
              || (type metadata accessor for CountByCameraSource(0),
                  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (!v0[7] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
              {
                if (!*(_QWORD *)(v0[4] + 16)
                  || (type metadata accessor for HandStatisticsLogging.CountByRejectionReason(0),
                      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for HandStatisticsLogging(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandStatisticsLogging@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandStatisticsLogging()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance HandStatisticsLogging@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance HandStatisticsLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance HandStatisticsLogging())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandStatisticsLogging()
{
  return HandStatisticsLogging.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandStatisticsLogging()
{
  return HandStatisticsLogging.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandStatisticsLogging@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandStatisticsLogging._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandStatisticsLogging()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
  return Message.hash(into:)();
}

uint64_t CountByCameraSource.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, void (*a6)(_QWORD))
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  if (!*v6 || (a4(a1, a2), result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v7))
  {
    if (!v6[2] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v7))
    {
      a6(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandStatisticsLogging.CountByHandPresence()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandStatisticsLogging.CountByHandPresence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandStatisticsLogging.CountByHandPresence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category, (uint64_t)&type metadata for HandPresence.Category, (void (*)(_QWORD))type metadata accessor for HandStatisticsLogging.CountByHandPresence);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandStatisticsLogging.CountByHandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandStatisticsLogging.CountByHandPresence@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandStatisticsLogging.CountByHandPresence._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandStatisticsLogging.CountByHandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandStatisticsLogging.CountByHandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23D9A7050;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v8 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = a4;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C318];
  v16 = type metadata accessor for _NameMap.NameDescription();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)((char *)v13 + v10) = 2;
  *(_QWORD *)v18 = "count";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23D9A7050;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v8 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = a4;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C318];
  v16 = type metadata accessor for _NameMap.NameDescription();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)((char *)v13 + v10) = 2;
  *(_QWORD *)v18 = "scrollDetectorState";
  *((_QWORD *)v18 + 1) = 19;
  v18[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9A70A0;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C318];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9A70A0;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C328];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CountByCameraSource.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        a4();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance CountByCameraSource@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandStatisticsLogging.CountByRejectionReason()
{
  return 0xD00000000000002CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandStatisticsLogging.CountByRejectionReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandStatisticsLogging.CountByRejectionReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CountByCameraSource.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason, (uint64_t)&type metadata for HandRejectionReason, (void (*)(_QWORD))type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandStatisticsLogging.CountByRejectionReason()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandStatisticsLogging.CountByRejectionReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandStatisticsLogging.CountByRejectionReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandStatisticsLogging.CountByRejectionReason()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandStatisticsLogging.CountByRejectionReason()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in HandStatisticsLogging.CountByRejectionReason()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t type metadata accessor for HandStatisticsLogging.CountByRejectionReason(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t base witness table accessor for Message in HandStatisticsLogging.CountByRejectionReason()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t base witness table accessor for Hashable in HandStatisticsLogging.CountByRejectionReason()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandStatisticsLogging.CountByRejectionReason()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByRejectionReason and conformance HandStatisticsLogging.CountByRejectionReason, type metadata accessor for HandStatisticsLogging.CountByRejectionReason, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByRejectionReason);
}

uint64_t base witness table accessor for Equatable in HandStatisticsLogging.CountByHandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
}

uint64_t type metadata accessor for HandStatisticsLogging.CountByHandPresence(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandStatisticsLogging.CountByHandPresence);
}

uint64_t base witness table accessor for Message in HandStatisticsLogging.CountByHandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
}

uint64_t base witness table accessor for Hashable in HandStatisticsLogging.CountByHandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandStatisticsLogging.CountByHandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging.CountByHandPresence and conformance HandStatisticsLogging.CountByHandPresence, type metadata accessor for HandStatisticsLogging.CountByHandPresence, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging.CountByHandPresence);
}

uint64_t base witness table accessor for Equatable in HandStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
}

uint64_t type metadata accessor for HandStatisticsLogging(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandStatisticsLogging);
}

uint64_t base witness table accessor for Message in HandStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
}

uint64_t base witness table accessor for Hashable in HandStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandStatisticsLogging and conformance HandStatisticsLogging, type metadata accessor for HandStatisticsLogging, (uint64_t)&protocol conformance descriptor for HandStatisticsLogging);
}

uint64_t base witness table accessor for Equatable in PipelineStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
}

uint64_t type metadata accessor for PipelineStatisticsLogging(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PipelineStatisticsLogging);
}

uint64_t base witness table accessor for Message in PipelineStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
}

uint64_t base witness table accessor for Hashable in PipelineStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PipelineStatisticsLogging()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging, type metadata accessor for PipelineStatisticsLogging, (uint64_t)&protocol conformance descriptor for PipelineStatisticsLogging);
}

uint64_t base witness table accessor for Equatable in CountByCameraSource()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
}

uint64_t type metadata accessor for CountByCameraSource(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CountByCameraSource);
}

uint64_t base witness table accessor for Message in CountByCameraSource()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
}

uint64_t base witness table accessor for Hashable in CountByCameraSource()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CountByCameraSource()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CountByCameraSource and conformance CountByCameraSource, type metadata accessor for CountByCameraSource, (uint64_t)&protocol conformance descriptor for CountByCameraSource);
}

uint64_t specialized static PipelineStatisticsLogging.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56)) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64)) & 1) != 0
    && *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    v13 = type metadata accessor for PipelineStatisticsLogging(0);
    v14 = a1 + *(int *)(v13 + 56);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 56), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static HandStatisticsLogging.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) != 0
    && a1[5] == a2[5]
    && a1[6] == a2[6]
    && a1[7] == a2[7])
  {
    v13 = type metadata accessor for HandStatisticsLogging(0);
    v14 = (char *)a1 + *(int *)(v13 + 48);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 48), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static HandStatisticsLogging.CountByRejectionReason.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13 && a1[2] == a2[2])
  {
    v14 = type metadata accessor for HandStatisticsLogging.CountByRejectionReason(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static HandStatisticsLogging.CountByHandPresence.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13 && a1[2] == a2[2])
  {
    v14 = type metadata accessor for HandStatisticsLogging.CountByHandPresence(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static CountByCameraSource.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13 && a1[2] == a2[2])
  {
    v14 = type metadata accessor for CountByCameraSource(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t getEnumTagSinglePayload for CountByCameraSource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CountByCameraSource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for HandStatisticsLogging(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    v8 = *(int *)(a3 + 48);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_QWORD *)(a1 + 56) = a2[7];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v5;
}

uint64_t destroy for HandStatisticsLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for HandStatisticsLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 48);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

_QWORD *assignWithCopy for HandStatisticsLogging(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v6 = *(int *)(a3 + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for HandStatisticsLogging(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for HandStatisticsLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandStatisticsLogging()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7E283C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 48)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HandStatisticsLogging()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D7E28C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 48)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for HandStatisticsLogging()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HandStatisticsLogging.CountByHandPresence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandStatisticsLogging.CountByHandPresence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CountByCameraSource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for CountByCameraSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CountByCameraSource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for CountByCameraSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CountByCameraSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandStatisticsLogging.CountByRejectionReason()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandStatisticsLogging.CountByRejectionReason()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CountByCameraSource()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PipelineStatisticsLogging(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v6 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v6;
    v7 = a2[9];
    v8 = *(int *)(a3 + 56);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v7;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for PipelineStatisticsLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 56);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PipelineStatisticsLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(int *)(a3 + 56);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

_QWORD *assignWithCopy for PipelineStatisticsLogging(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  v6 = *(int *)(a3 + 56);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PipelineStatisticsLogging(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 56);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for PipelineStatisticsLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(int *)(a3 + 56);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineStatisticsLogging()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7E3064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PipelineStatisticsLogging()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7E30EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PipelineStatisticsLogging()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall HandObjectProximity.updateDerivedFeatures()()
{
  uint64_t v0;
  float32x4_t v1;
  float32x4_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  float32x4_t v6;
  __int128 v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;

  v3 = *(float *)(v0 + 40);
  v4 = *(float *)(v0 + 56);
  v5 = *(float32x2_t *)(v0 + 32);
  v1.i64[0] = *(_QWORD *)(v0 + 48);
  *(float32x2_t *)v2.f32 = vsub_f32(v5, *(float32x2_t *)v1.f32);
  v2.f32[2] = v3 - v4;
  v6 = vmulq_f32(v2, v2);
  v6.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  *(_DWORD *)(v0 + 128) = v6.i32[0];
  *(float32x2_t *)&v7 = vmul_f32(vadd_f32(v5, *(float32x2_t *)v1.f32), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v1.f32 = vsub_f32(*(float32x2_t *)&v7, *(float32x2_t *)(v0 + 64));
  *((float *)&v7 + 2) = (float)(v3 + v4) * 0.5;
  HIDWORD(v7) = 0;
  *(_OWORD *)(v0 + 112) = v7;
  v1.f32[2] = *((float *)&v7 + 2) - *(float *)(v0 + 72);
  v8 = vmulq_f32(v1, v1);
  v8.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).u32[0];
  *(float *)&v7 = sqrtf(v8.f32[0]);
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  *(float32x4_t *)(v0 + 144) = vmulq_n_f32(v1, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  v8.f32[0] = *(float *)(v0 + 16) + *(float *)&v7;
  *(_DWORD *)(v0 + 160) = v8.i32[0];
  *(float *)(v0 + 164) = (float)((float)(v6.f32[0] * 0.5) * v8.f32[0]) / *(float *)&v7;
}

Swift::Bool __swiftcall HandObjectProximity.areBasicFeaturesNonZero()()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  BOOL v3;
  float v4;
  float v5;
  uint64_t v6;
  __int128 v7;
  BOOL v8;
  float v9;
  float v10;
  uint64_t v11;
  __int128 v12;
  BOOL v13;
  float v14;
  float v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v1 = 0;
  v2 = v0[3];
  while (1)
  {
    v21 = v2;
    v4 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v22 = 0u;
    v5 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v3 = v4 == v5;
    if (v1 == 2)
      break;
    while (1)
    {
      ++v1;
      if (v3)
        break;
      if (v1 == 2)
        goto LABEL_8;
      v3 = 0;
    }
  }
  if (v4 == v5)
    return 0;
LABEL_8:
  v6 = 0;
  v7 = v0[2];
  while (1)
  {
    v19 = v7;
    v9 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v20 = 0u;
    v10 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v8 = v9 == v10;
    if (v6 == 2)
      break;
    while (1)
    {
      ++v6;
      if (v8)
        break;
      if (v6 == 2)
        goto LABEL_14;
      v8 = 0;
    }
  }
  if (v9 == v10)
    return 0;
LABEL_14:
  v11 = 0;
  v12 = v0[4];
  while (1)
  {
    v17 = v12;
    v14 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v18 = 0u;
    v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v13 = v14 == v15;
    if (v11 == 2)
      break;
    while (1)
    {
      ++v11;
      if (v13)
        break;
      if (v11 == 2)
        return 1;
      v13 = 0;
    }
  }
  return v14 != v15;
}

BOOL HandObjectProximity.isPointInsideObjectProximityCone(_:)(__n128 a1)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;

  if (!HandObjectProximity.areBasicFeaturesNonZero()())
    return 0;
  if (*(float *)(v1 + 20) <= *(float *)(v1 + 128))
    return 0;
  *(float32x2_t *)v2.f32 = vsub_f32((float32x2_t)a1.n128_u64[0], *(float32x2_t *)(v1 + 64));
  v3 = v2;
  v3.f32[2] = a1.n128_f32[2] - *(float *)(v1 + 72);
  v4 = *(float32x4_t *)(v1 + 144);
  v5 = vmulq_f32(v4, v3);
  v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  if (v6.f32[0] < 0.0)
    return 0;
  v7 = *(float *)(v1 + 160);
  if (v7 <= v6.f32[0])
    return 0;
  *(float32x2_t *)v2.f32 = vsub_f32(*(float32x2_t *)v2.f32, vmul_n_f32(*(float32x2_t *)v4.f32, v6.f32[0]));
  v2.f32[2] = (float)(a1.n128_f32[2] - *(float *)(v1 + 72)) - vmulq_laneq_f32(v6, v4, 2).f32[0];
  v8 = vmulq_f32(v2, v2);
  return (float)((float)(v6.f32[0] / v7) * *(float *)(v1 + 164)) >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
}

float HandObjectProximity.minDistanceFromFingertipsToPoint(_:)(__n128 a1)
{
  float32x2_t *v1;
  uint64_t inited;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  unint64_t v7;
  float result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  v3.i32[3] = 0;
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(float32x2_t *)v3.f32 = vsub_f32(v1[6], (float32x2_t)a1.n128_u64[0]);
  v3.f32[2] = v1[7].f32[0] - a1.n128_f32[2];
  v4 = vmulq_f32(v3, v3);
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)));
  *(float *)(inited + 32) = sqrtf(v5.f32[0]);
  *(float32x2_t *)v5.f32 = vsub_f32(v1[4], (float32x2_t)a1.n128_u64[0]);
  v5.f32[2] = v1[5].f32[0] - a1.n128_f32[2];
  v6 = vmulq_f32(v5, v5);
  *(float *)(inited + 36) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  v7 = specialized Sequence<>.min()(inited);
  swift_setDeallocating();
  result = *(float *)&v7;
  if ((v7 & 0x100000000) != 0)
    return 100.0;
  return result;
}

uint64_t HandObjectProximity.getWorldHandPoseFromSpatialSceneState(_:_:)@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD v40[14];
  __int16 v41;
  int v42;
  _OWORD v43[6];
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  char v47;
  unsigned int v48;

  v5 = *(_QWORD *)(a2[16].i64[0] + 96);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    goto LABEL_12;
  v8 = result;
  result = type metadata accessor for HandDescriptor();
  v9 = *(_QWORD *)(result - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v5 + 72;
  while (*(_BYTE *)(v11 + 64) != (v8 & 1))
  {
    v11 += v10;
    if (!--v6)
      goto LABEL_12;
  }
  result = *(_QWORD *)(v11 - 56);
  if (!result)
  {
LABEL_12:
    *(_QWORD *)(a3 + 112) = 0;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v12 = *(_QWORD *)(v11 - 48);
  if (*(_QWORD *)(v12 + 16) < 0xAuLL)
  {
    __break(1u);
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v11 - 16);
  v14 = *(_QWORD *)(v11 - 8);
  v16 = *(_QWORD *)(v11 - 40);
  v15 = *(_QWORD *)(v11 - 32);
  v17 = *(_QWORD *)(v11 - 24);
  v18 = *(_QWORD *)v11;
  v19 = *(_QWORD *)(v11 + 8);
  v21 = *(_QWORD *)(v11 + 16);
  v20 = *(_QWORD *)(v11 + 24);
  v23 = *(_QWORD *)(v11 + 32);
  v22 = *(_QWORD *)(v11 + 40);
  v26 = v11 + 48;
  v24 = *(_QWORD *)(v11 + 48);
  v25 = *(_QWORD *)(v26 + 8);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v12 + 336);
  if (*(_QWORD *)(v12 + 16) < 5uLL)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(v12 + 176);
  v40[0] = result;
  v40[1] = v12;
  v40[2] = v16;
  v40[3] = v15;
  v40[4] = v17;
  v40[5] = v13;
  v40[6] = v14;
  v40[7] = v18;
  v40[8] = v19;
  v40[9] = v21;
  v40[10] = v20;
  v40[11] = v23;
  v40[12] = v22;
  v40[13] = v24;
  v41 = v25 & 0x101;
  v42 = HIDWORD(v25);
  v38 = a2[13];
  v39 = a2[12];
  v36 = a2[15];
  v37 = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = HandPose.init(_:from:)((uint64_t)v40, (uint64_t)v43, v39, v38, v37, v36);
  v27 = v43[2];
  v28 = v43[3];
  v29 = v43[4];
  v30 = v43[5];
  v32 = v44;
  v31 = v45;
  v33 = 256;
  if (!v47)
    v33 = 0;
  v34 = v33 | v46 | ((unint64_t)v48 << 32);
  v35 = v43[1];
  *(_OWORD *)a3 = v43[0];
  *(_OWORD *)(a3 + 16) = v35;
  *(_OWORD *)(a3 + 32) = v27;
  *(_OWORD *)(a3 + 48) = v28;
  *(_OWORD *)(a3 + 64) = v29;
  *(_OWORD *)(a3 + 80) = v30;
  *(_QWORD *)(a3 + 96) = v32;
  *(_QWORD *)(a3 + 104) = v31;
  *(_QWORD *)(a3 + 112) = v34;
  return result;
}

uint64_t HandObjectProximity.getWorldHandPoseAtTime(_:_:_:)@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  _QWORD v40[14];
  __int16 v41;
  int v42;
  _OWORD v43[6];
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  char v47;
  unsigned int v48;

  if (a2)
  {
    v11 = *(unsigned __int8 *)(a1 + 136);
    swift_retain();
    HandObjectProximity.getWorldHandPoseFromSpatialSceneState(_:_:)(v11, a2, a3);
    return swift_release();
  }
  result = *(_QWORD *)(a1 + 16);
  if (!result)
    goto LABEL_12;
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v13 + 16) < 0xAuLL)
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 104);
  v25 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 120);
  v26 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v13 + 336);
  if (*(_QWORD *)(v13 + 16) < 5uLL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(v13 + 176);
  if (*(_BYTE *)(v7 + 24) != 1)
  {
LABEL_12:
    *(_QWORD *)(a3 + 112) = 0;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  if (*(_QWORD *)(v13 + 16) < 0xAuLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v13 + 336);
  if (*(_QWORD *)(v13 + 16) < 5uLL)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(v13 + 176);
  v40[0] = result;
  v40[1] = v13;
  v40[2] = v14;
  v40[3] = v15;
  v40[4] = v16;
  v40[5] = v17;
  v40[6] = v19;
  v40[7] = v18;
  v40[8] = v21;
  v40[9] = v20;
  v40[10] = v23;
  v40[11] = v22;
  v40[12] = v25;
  v40[13] = v24;
  v41 = v26 & 0x101;
  v42 = HIDWORD(v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = HandPose.init(_:from:)((uint64_t)v40, (uint64_t)v43, a4, a5, a6, a7);
  v27 = v43[2];
  v28 = v43[3];
  v29 = v43[4];
  v30 = v43[5];
  v32 = v44;
  v31 = v45;
  v33 = 256;
  if (!v47)
    v33 = 0;
  v34 = v33 | v46 | ((unint64_t)v48 << 32);
  v35 = v43[1];
  *(_OWORD *)a3 = v43[0];
  *(_OWORD *)(a3 + 16) = v35;
  *(_OWORD *)(a3 + 32) = v27;
  *(_OWORD *)(a3 + 48) = v28;
  *(_OWORD *)(a3 + 64) = v29;
  *(_OWORD *)(a3 + 80) = v30;
  *(_QWORD *)(a3 + 96) = v32;
  *(_QWORD *)(a3 + 104) = v31;
  *(_QWORD *)(a3 + 112) = v34;
  return result;
}

uint64_t HandObjectProximity.get3DHandTipLocation(_:_:_:)(uint64_t a1, float32x4_t *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  _OWORD *v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  HandObjectProximity.getWorldHandPoseAtTime(_:_:_:)(a1, a2, (uint64_t)&v10, a3, a4, a5, a6);
  result = v10;
  if (v10)
  {
    v8 = v11;
    if (*(_QWORD *)(v11 + 16) < 0xAuLL)
    {
      __break(1u);
    }
    else
    {
      v6[3] = *(_OWORD *)(v11 + 336);
      if (*(_QWORD *)(v8 + 16) >= 5uLL)
      {
        v6[2] = *(_OWORD *)(v8 + 176);
        if (*(_QWORD *)(v8 + 16) >= 7uLL)
        {
          v9 = *(_OWORD *)(v8 + 240);
          result = outlined consume of HandPose?(result);
          v6[4] = v9;
          return result;
        }
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v6[3] = 0u;
  v6[4] = 0u;
  v6[2] = 0u;
  return result;
}

uint64_t HandObjectProximity.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandObjectProximity()
{
  return objc_opt_self();
}

__n128 __swift_memcpy56_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HandObjectProximity.DerivedFeatures(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HandObjectProximity.DerivedFeatures(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HandObjectProximity.DerivedFeatures()
{
  return &type metadata for HandObjectProximity.DerivedFeatures;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for HandObjectProximity.DeviceCoordinateFeatures()
{
  return &type metadata for HandObjectProximity.DeviceCoordinateFeatures;
}

ValueMetadata *type metadata accessor for HandObjectProximity.BasicFeatures()
{
  return &type metadata for HandObjectProximity.BasicFeatures;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HandObjectProximity.ThresholdConfig()
{
  return &type metadata for HandObjectProximity.ThresholdConfig;
}

BOOL static ImageCalibrationData.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (specialized static ImageCalibrationData.== infix(_:_:)(a1, a2) & 1) == 0;
}

uint64_t ImageCalibrationData.__allocating_init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(_OWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, double a13)
{
  uint64_t v21;

  v21 = swift_allocObject();
  ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return v21;
}

void __swiftcall TransformMatrixPB.toSIMD4x4()(simd_float4x4 *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  __int128 v50;
  simd_float4x4 simd4x4float;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  *(_QWORD *)&v50 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5, v7);
  v48 = (char *)&v46 - v9;
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v46 - v11;
  v13 = type metadata accessor for Coordinate3DPB(0);
  v46 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v49 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v20 = (char *)&v46 - v19;
  MEMORY[0x24BDAC7A8](v18, v21);
  v23 = (char *)&v46 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Matrix3x3PB(0);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28, v30);
  v32 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for TransformMatrixPB(0);
  memset(&simd4x4float, 0, sizeof(simd4x4float));
  v34 = *(int *)(v33 + 20);
  v47 = v2;
  outlined init with copy of (Int32, Matrix2dPB)(v2 + v34, (uint64_t)v27, &demangling cache variable for type metadata for Matrix3x3PB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    *((_DWORD *)v32 + 8) = 0;
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v27, &demangling cache variable for type metadata for Matrix3x3PB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v27, (uint64_t)v32, type metadata accessor for Matrix3x3PB);
  }
  Matrix3x3PB.fillSIMD4x4(simd4x4float:)(&simd4x4float);
  outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for Matrix3x3PB);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v36 = v47 + *(int *)(v33 + 24);
  outlined init with copy of (Int32, Matrix2dPB)(v36, (uint64_t)v12, &demangling cache variable for type metadata for Coordinate3DPB?);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v38 = v37(v12, 1, v13);
  v39 = v50;
  v40 = (uint64_t)v48;
  if (v38 == 1)
  {
    *(_QWORD *)v23 = 0;
    *((_DWORD *)v23 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v23, type metadata accessor for Coordinate3DPB);
  }
  v41 = *(_DWORD *)v23;
  outlined destroy of Matrix3x3PB((uint64_t)v23, type metadata accessor for Coordinate3DPB);
  *(_DWORD *)(inited + 32) = v41;
  outlined init with copy of (Int32, Matrix2dPB)(v36, v40, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v37((char *)v40, 1, v13) == 1)
  {
    *(_QWORD *)v20 = 0;
    *((_DWORD *)v20 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v40, (uint64_t)v20, type metadata accessor for Coordinate3DPB);
  }
  v42 = *((_DWORD *)v20 + 1);
  outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for Coordinate3DPB);
  *(_DWORD *)(inited + 36) = v42;
  outlined init with copy of (Int32, Matrix2dPB)(v36, v39, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v37((char *)v39, 1, v13) == 1)
  {
    v43 = v49;
    *v49 = 0;
    *((_DWORD *)v43 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v39, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v43 = v49;
    outlined init with take of Matrix2dPB(v39, (uint64_t)v49, type metadata accessor for Coordinate3DPB);
  }
  v44 = *((_DWORD *)v43 + 2);
  outlined destroy of Matrix3x3PB((uint64_t)v43, type metadata accessor for Coordinate3DPB);
  *(_DWORD *)(inited + 40) = v44;
  *(_DWORD *)(inited + 44) = 1065353216;
  specialized SIMD.init<A>(_:)(inited);
  v50 = v45;
  swift_setDeallocating();
}

uint64_t TransformMatrixPB.init(simd4x4float:)@<X0>(uint64_t a1@<X8>, int8x16_t a2@<Q0>, int8x16_t a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  int32x2_t v25;
  int32x2_t v26;
  __n128 v27;
  unint64_t v28;
  unsigned __int32 v29;
  int8x16_t v31;
  int8x16_t v32;
  __n128 v33;
  __n128 v34;

  v33 = a4;
  v34 = a5;
  v31 = a2;
  v32 = a3;
  v6 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = &v31.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9, v12);
  v14 = &v31.i8[-v13];
  v15 = type metadata accessor for Matrix3x3PB(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15, v17);
  v19 = (int32x2_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()();
  v20 = type metadata accessor for TransformMatrixPB(0);
  v21 = a1 + *(int *)(v20 + 20);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v22(v21, 1, 1, v15);
  v23 = a1 + *(int *)(v20 + 24);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v24(v23, 1, 1, v6);
  UnknownStorage.init()();
  v25 = *(int32x2_t *)v32.i8;
  v26 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  v27 = v33;
  v28 = __PAIR64__(v31.u32[1], v33.n128_u32[0]);
  *v19 = vzip1_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v32.i8);
  v19[1] = (int32x2_t)v28;
  v19[2] = vzip2_s32(v25, (int32x2_t)v27.n128_u64[0]);
  v19[3] = v26;
  v19[4].i32[0] = v27.n128_i32[2];
  outlined destroy of Coordinate3DPB?(v21, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined init with take of Matrix2dPB((uint64_t)v19, v21, type metadata accessor for Matrix3x3PB);
  v22(v21, 0, 1, v15);
  UnknownStorage.init()();
  v29 = v34.n128_u32[2];
  *(_QWORD *)v14 = v34.n128_u64[0];
  *((_DWORD *)v14 + 2) = v29;
  outlined init with copy of Coordinate3DPB((uint64_t)v14, (uint64_t)v11);
  outlined destroy of Coordinate3DPB?(v23, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v11, v23, type metadata accessor for Coordinate3DPB);
  v24(v23, 0, 1, v6);
  return outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for Coordinate3DPB);
}

void __swiftcall Matrix3x3PB.toSIMD3x3()(simd_float3x3 *__return_ptr retstr)
{
  _DWORD *v1;
  uint64_t inited;
  int v4;
  simd_float3 v5;
  uint64_t v6;
  int v7;
  simd_float3 v8;
  uint64_t v9;
  int v10;
  simd_float3 v11;
  simd_float3 v12;
  simd_float3 v13;
  simd_float3 v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  v4 = v1[3];
  *(_DWORD *)(inited + 32) = *v1;
  *(_DWORD *)(inited + 36) = v4;
  *(_DWORD *)(inited + 40) = v1[6];
  specialized SIMD.init<A>(_:)(inited);
  v13 = v5;
  swift_setDeallocating();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23D9A74A0;
  v7 = v1[4];
  *(_DWORD *)(v6 + 32) = v1[1];
  *(_DWORD *)(v6 + 36) = v7;
  *(_DWORD *)(v6 + 40) = v1[7];
  specialized SIMD.init<A>(_:)(v6);
  v12 = v8;
  swift_setDeallocating();
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23D9A74A0;
  v10 = v1[5];
  *(_DWORD *)(v9 + 32) = v1[2];
  *(_DWORD *)(v9 + 36) = v10;
  *(_DWORD *)(v9 + 40) = v1[8];
  specialized SIMD.init<A>(_:)(v9);
  v14 = v11;
  swift_setDeallocating();
  retstr->columns[0] = v13;
  retstr->columns[1] = v12;
  retstr->columns[2] = v14;
}

Swift::Void __swiftcall Matrix3x3PB.fillSIMD4x4(simd4x4float:)(simd_float4x4 *simd4x4float)
{
  _DWORD *v1;
  uint64_t inited;
  int v4;
  simd_float4 v5;
  uint64_t v6;
  int v7;
  simd_float4 v8;
  uint64_t v9;
  int v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v4 = v1[3];
  *(_DWORD *)(inited + 32) = *v1;
  *(_DWORD *)(inited + 36) = v4;
  *(_DWORD *)(inited + 40) = v1[6];
  *(_DWORD *)(inited + 44) = 0;
  specialized SIMD.init<A>(_:)(inited);
  v12 = v5;
  swift_setDeallocating();
  simd4x4float->columns[0] = v12;
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23D9A7080;
  v7 = v1[4];
  *(_DWORD *)(v6 + 32) = v1[1];
  *(_DWORD *)(v6 + 36) = v7;
  *(_DWORD *)(v6 + 40) = v1[7];
  *(_DWORD *)(v6 + 44) = 0;
  specialized SIMD.init<A>(_:)(v6);
  v13 = v8;
  swift_setDeallocating();
  simd4x4float->columns[1] = v13;
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23D9A7080;
  v10 = v1[5];
  *(_DWORD *)(v9 + 32) = v1[2];
  *(_DWORD *)(v9 + 36) = v10;
  *(_DWORD *)(v9 + 40) = v1[8];
  *(_DWORD *)(v9 + 44) = 0;
  specialized SIMD.init<A>(_:)(v9);
  v14 = v11;
  swift_setDeallocating();
  simd4x4float->columns[2] = v14;
}

uint64_t ImageCalibrationData.cameraModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t ImageCalibrationData.arrivalTimeStamp.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 28);
}

__n128 ImageCalibrationData.intrinsicCalibration.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;
  __int128 v5;

  swift_beginAccess();
  result = *(__n128 *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  v5 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  return result;
}

__n128 ImageCalibrationData.distortionParameters.getter()
{
  __n128 *v0;

  swift_beginAccess();
  return v0[7];
}

uint64_t key path setter for ImageCalibrationData.warperMeshBin : ImageCalibrationData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 128) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t ImageCalibrationData.warperMeshBin.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ImageCalibrationData.warperMeshBin.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ImageCalibrationData.warperMeshBin.modify())()
{
  swift_beginAccess();
  return static CameraModel.allCases.modify;
}

void key path setter for ImageCalibrationData.warperMeshBuffer : ImageCalibrationData(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;
  v5 = v2;

}

void *ImageCalibrationData.warperMeshBuffer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 136);
  v2 = v1;
  return v1;
}

double ImageCalibrationData.imageSize.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 144);
}

double ImageCalibrationData.rawFocal.getter()
{
  uint64_t v0;
  __int128 v1;

  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
    swift_beginAccess();
    v1 = *(_OWORD *)(v0 + 64);
    DWORD1(v1) = *(_DWORD *)(v0 + 84);
    *(_QWORD *)(v0 + 152) = v1;
    *(_BYTE *)(v0 + 160) = 0;
  }
  else
  {
    *(_QWORD *)&v1 = *(_QWORD *)(v0 + 152);
  }
  return *(double *)&v1;
}

double ImageCalibrationData.opticalCenter.getter()
{
  uint64_t v0;
  __int128 v1;

  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    swift_beginAccess();
    v1 = *(_OWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 168) = v1;
    *(_BYTE *)(v0 + 176) = 0;
  }
  else
  {
    *(_QWORD *)&v1 = *(_QWORD *)(v0 + 168);
  }
  return *(double *)&v1;
}

__n128 ImageCalibrationData.cameraToHeadsetTransform.getter()
{
  __n128 *v0;

  swift_beginAccess();
  return v0[12];
}

double ImageCalibrationData.cameraToHeadsetTransform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  double result;

  swift_beginAccess();
  *(__n128 *)(v4 + 192) = a1;
  *(__n128 *)(v4 + 208) = a2;
  *(__n128 *)(v4 + 224) = a3;
  *(__n128 *)(v4 + 240) = a4;
  result = 0.0;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_BYTE *)(v4 + 400) = 1;
  return result;
}

double (*ImageCalibrationData.cameraToHeadsetTransform.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ImageCalibrationData.cameraToHeadsetTransform.modify;
}

double ImageCalibrationData.cameraToHeadsetTransform.modify(uint64_t a1, char a2)
{
  double result;
  uint64_t v5;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    result = 0.0;
    *(_OWORD *)(v5 + 368) = 0u;
    *(_OWORD *)(v5 + 384) = 0u;
    *(_OWORD *)(v5 + 336) = 0u;
    *(_OWORD *)(v5 + 352) = 0u;
    *(_BYTE *)(v5 + 400) = 1;
  }
  return result;
}

double ImageCalibrationData.headsetToCameraTransform.getter()
{
  uint64_t v0;
  double v1;
  simd_float4x4 v3;

  if ((*(_BYTE *)(v0 + 320) & 1) == 0)
    return *(double *)(v0 + 256);
  swift_beginAccess();
  v3 = __invert_f4(*(simd_float4x4 *)(v0 + 192));
  *(simd_float4x4 *)(v0 + 256) = v3;
  *(_BYTE *)(v0 + 320) = 0;
  *(simd_float4x4 *)(v0 + 336) = v3;
  v1 = *(double *)v3.columns[0].i64;
  *(_BYTE *)(v0 + 400) = 0;
  return v1;
}

void ImageCalibrationData.headsetToCameraTransform4x3.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  simd_float4x4 v11;

  if ((*(_BYTE *)(v1 + 400) & 1) != 0)
  {
    swift_beginAccess();
    v11 = __invert_f4(*(simd_float4x4 *)(v1 + 192));
    *(simd_float4x4 *)(v1 + 256) = v11;
    *(_BYTE *)(v1 + 320) = 0;
    *(simd_float4x4 *)(v1 + 336) = v11;
    v3 = v11.columns[0].i64[1];
    v4 = v11.columns[0].i64[0];
    v5 = v11.columns[1].i64[1];
    v6 = v11.columns[2].i64[1];
    v7 = v11.columns[1].i64[0];
    v8 = v11.columns[2].i64[0];
    *(_BYTE *)(v1 + 400) = 0;
    v9 = v11.columns[3].i64[1];
    v10 = v11.columns[3].i64[0];
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 384);
    v9 = *(_QWORD *)(v1 + 392);
    v8 = *(_QWORD *)(v1 + 368);
    v6 = *(_QWORD *)(v1 + 376);
    v7 = *(_QWORD *)(v1 + 352);
    v5 = *(_QWORD *)(v1 + 360);
    v4 = *(_QWORD *)(v1 + 336);
    v3 = *(_QWORD *)(v1 + 344);
  }
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v7;
  a1[3] = v5;
  a1[4] = v8;
  a1[5] = v6;
  a1[6] = v10;
  a1[7] = v9;
}

uint64_t ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(_OWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, double a13)
{
  uint64_t v13;
  int v15;
  uint64_t v20;
  char v21;
  unint64_t v22;
  __int128 v23;
  void *v24;

  v15 = a6;
  v20 = *a2;
  v21 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(v13 + 160) = 1;
  *(_QWORD *)(v13 + 168) = 0;
  *(_BYTE *)(v13 + 176) = 1;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  v22 = HIDWORD(a6);
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 304) = 0u;
  *(_BYTE *)(v13 + 320) = 1;
  *(_OWORD *)(v13 + 336) = 0u;
  *(_OWORD *)(v13 + 352) = 0u;
  *(_OWORD *)(v13 + 368) = 0u;
  *(_OWORD *)(v13 + 384) = 0u;
  *(_BYTE *)(v13 + 400) = 1;
  v23 = a1[1];
  *(_OWORD *)(v13 + 64) = *a1;
  *(_OWORD *)(v13 + 80) = v23;
  *(_OWORD *)(v13 + 96) = a1[2];
  *(__n128 *)(v13 + 112) = a8;
  *(__n128 *)(v13 + 192) = a9;
  *(__n128 *)(v13 + 208) = a10;
  *(__n128 *)(v13 + 224) = a11;
  *(__n128 *)(v13 + 240) = a12;
  *(_QWORD *)(v13 + 16) = v20;
  *(_BYTE *)(v13 + 24) = v21;
  swift_beginAccess();
  *(_QWORD *)(v13 + 128) = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = *(void **)(v13 + 136);
  *(_QWORD *)(v13 + 136) = a4;

  swift_beginAccess();
  *(double *)(v13 + 144) = a13;
  *(_QWORD *)(v13 + 28) = a5;
  *(_DWORD *)(v13 + 36) = v15;
  *(_DWORD *)(v13 + 40) = v22;
  *(_QWORD *)(v13 + 44) = a7;
  return v13;
}

uint64_t ImageCalibrationData.__allocating_init(updateData:warperMeshBin:warperMeshBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  char v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  _OWORD v21[3];

  swift_beginAccess();
  v6 = *(_OWORD *)(a1 + 80);
  v21[0] = *(_OWORD *)(a1 + 64);
  v21[1] = v6;
  v21[2] = *(_OWORD *)(a1 + 96);
  swift_beginAccess();
  v18 = *(__n128 *)(a1 + 112);
  swift_beginAccess();
  v16 = *(__n128 *)(a1 + 208);
  v17 = *(__n128 *)(a1 + 192);
  v14 = *(__n128 *)(a1 + 224);
  v15 = *(__n128 *)(a1 + 240);
  swift_beginAccess();
  v7 = *(_BYTE *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = v7;
  swift_beginAccess();
  v8 = *(double *)(a1 + 144);
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 28);
  v10 = *(_QWORD *)(a1 + 36);
  v11 = *(_QWORD *)(a1 + 44);
  type metadata accessor for ImageCalibrationData();
  v12 = swift_allocObject();
  ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v21, &v19, a2, a3, v9, v10, v11, v18, v17, v16, v14, v15, v8);
  swift_release();
  return v12;
}

uint64_t ImageCalibrationData.__allocating_init(calibrationData:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized ImageCalibrationData.init(calibrationData:)(a1);
  swift_release();
  return v2;
}

uint64_t ImageCalibrationData.init(calibrationData:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized ImageCalibrationData.init(calibrationData:)(a1);
  swift_release();
  return v1;
}

uint64_t ImageCalibrationData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t *v31;
  uint64_t v32;
  int32x2_t v33;
  int32x2_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v67;
  int8x16_t v68;
  __int128 v69;
  __int128 v70;
  __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v80 = (uint64_t)v67.i64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v8);
  v79 = (uint64_t)v67.i64 - v9;
  v78 = type metadata accessor for CMTimeProtobuf(0);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78, v10);
  v76 = &v67.i8[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  v14 = MEMORY[0x24BDAC7A8](v12, v13);
  v75 = (uint64_t)v67.i64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v74 = (uint64_t)v67.i64 - v17;
  v73 = type metadata accessor for TransformMatrixPB(0);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73, v18);
  v71 = &v67.i8[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  v22 = MEMORY[0x24BDAC7A8](v20, v21);
  v24 = &v67.i8[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22, v25);
  v27 = &v67.i8[-v26];
  v28 = type metadata accessor for Matrix3x3PB(0);
  *(_QWORD *)&v70 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28, v29);
  v31 = (int32x2_t *)((char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()();
  v32 = *(int *)(type metadata accessor for ImageCalibrationDataPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v32) = static ImageCalibrationDataPB._StorageClass.defaultInstance;
  swift_beginAccess();
  v68 = *(int8x16_t *)(v1 + 64);
  v67 = *(int8x16_t *)(v1 + 80);
  v69 = *(_OWORD *)(v1 + 96);
  swift_retain();
  UnknownStorage.init()();
  v33 = *(int32x2_t *)v67.i8;
  v34 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
  v35 = v69;
  v36 = __PAIR64__(v68.u32[1], v69);
  *v31 = vzip1_s32(*(int32x2_t *)v68.i8, *(int32x2_t *)v67.i8);
  v31[1] = (int32x2_t)v36;
  v31[2] = vzip2_s32(v33, *(int32x2_t *)&v35);
  v31[3] = v34;
  v31[4].i32[0] = DWORD2(v35);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v37 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v37);
    swift_release();
  }
  v38 = *(_QWORD *)(a1 + v32);
  outlined init with take of Matrix2dPB((uint64_t)v31, (uint64_t)v27, type metadata accessor for Matrix3x3PB);
  (*(void (**)(__int8 *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v27, 0, 1, v28);
  outlined init with take of ImageData?((uint64_t)v27, (uint64_t)v24, &demangling cache variable for type metadata for Matrix3x3PB?);
  v39 = v38
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v24, v39, &demangling cache variable for type metadata for Matrix3x3PB?);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  v70 = *(_OWORD *)(v2 + 112);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v40 = swift_allocObject();
  v41 = v70;
  *(_OWORD *)(v40 + 16) = xmmword_23D9A7080;
  *(_OWORD *)(v40 + 32) = v41;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = (uint64_t)v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v44 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v44);
    swift_release();
  }
  v45 = (uint64_t *)(*(_QWORD *)(a1 + v32)
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  swift_beginAccess();
  *v45 = v40;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  TransformMatrixPB.init(simd4x4float:)(v43, *(int8x16_t *)(v2 + 192), *(int8x16_t *)(v2 + 208), *(__n128 *)(v2 + 224), *(__n128 *)(v2 + 240));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v46 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v46);
    swift_release();
  }
  v47 = *(_QWORD *)(a1 + v32);
  v48 = v74;
  outlined init with take of Matrix2dPB(v43, v74, type metadata accessor for TransformMatrixPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v48, 0, 1, v73);
  v49 = v75;
  outlined init with take of ImageData?(v48, v75, &demangling cache variable for type metadata for TransformMatrixPB?);
  v50 = v47
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v49, v50, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 24))
    v51 = *(_QWORD *)(v2 + 16) != 0;
  else
    v51 = *(_QWORD *)(v2 + 16);
  v52 = swift_isUniquelyReferenced_nonNull_native();
  v53 = (uint64_t)v76;
  if ((v52 & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v54 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v54);
    swift_release();
  }
  v55 = *(_QWORD *)(a1 + v32)
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel;
  swift_beginAccess();
  *(_QWORD *)v55 = v51;
  *(_BYTE *)(v55 + 8) = v51 < 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_23D9A7050;
  swift_beginAccess();
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(v2 + 144);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v57 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v57);
    swift_release();
  }
  v58 = (uint64_t *)(*(_QWORD *)(a1 + v32)
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize);
  swift_beginAccess();
  *v58 = v56;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v59 = *(_QWORD *)(v2 + 28);
  LODWORD(v58) = *(_DWORD *)(v2 + 36);
  v60 = v78;
  UnknownStorage.init()();
  *(_QWORD *)v53 = v59;
  *(_DWORD *)(v53 + 8) = (_DWORD)v58;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v61 = swift_retain();
    *(_QWORD *)(a1 + v32) = ImageCalibrationDataPB._StorageClass.init(copying:)(v61);
    swift_release();
  }
  v62 = *(_QWORD *)(a1 + v32);
  v63 = v79;
  outlined init with take of Matrix2dPB(v53, v79, type metadata accessor for CMTimeProtobuf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v63, 0, 1, v60);
  v64 = v80;
  outlined init with take of ImageData?(v63, v80, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v65 = v62
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v64, v65, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_endAccess();
  return swift_release();
}

__n128 ImageCalibrationData.cameraToHeadsetRotation.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;
  __int128 v5;

  swift_beginAccess();
  result = *(__n128 *)(v1 + 192);
  v4 = *(_OWORD *)(v1 + 208);
  v5 = *(_OWORD *)(v1 + 224);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  return result;
}

__n128 ImageCalibrationData.cameraToHeadsetTranslation.getter()
{
  __n128 *v0;

  swift_beginAccess();
  return v0[15];
}

Swift::Bool __swiftcall ImageCalibrationData.isRectilinearImage()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 24))
    v1 = v1 != 0;
  return v1 == 0;
}

uint64_t ImageCalibrationData.almostEquals(_:)(float32x4_t *a1)
{
  float32x4_t *v1;
  float32x4_t v3;
  uint32x4_t v4;
  Swift::String v5;
  float32x4_t v6;
  float32x4_t v7;
  Swift::String v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  Swift::String v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 *v19;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  swift_beginAccess();
  v26 = v1[4];
  v28 = v1[5];
  v30 = v1[6];
  swift_beginAccess();
  v3 = (float32x4_t)vdupq_n_s32(0x33D6BF95u);
  v4 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v3, vabdq_f32(v28, a1[5])), (int8x16_t)vcgeq_f32(v3, vabdq_f32(v26, a1[4]))), (int8x16_t)vcgeq_f32(v3, vabdq_f32(v30, a1[6])));
  v4.i32[3] = v4.i32[2];
  if ((vminvq_u32(v4) & 0x80000000) == 0)
  {
    v39 = xmmword_23D9A8970;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v38 = v34;
    v5._countAndFlagsBits = 0xD000000000000013;
    v5._object = (void *)0x800000023D9CF060;
    String.append(_:)(v5);
    v6 = v1[5];
    v7 = v1[6];
    v34 = (__int128)v1[4];
    v35 = v6;
    v36 = v7;
    type metadata accessor for simd_float3x3(0);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9 = a1[6];
    v35.i64[0] = a1[5].i64[0];
    v36 = v9;
    _print_unlocked<A, B>(_:_:)();
    v35.i64[1] = MEMORY[0x24BEE0D00];
    v34 = v38;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 235;
LABEL_5:
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000005CLL, 0x800000023D9CF000, v11, (uint64_t *)&v39, (uint64_t)&v34, v10);
    v19 = &v34;
    goto LABEL_6;
  }
  v31 = v3;
  swift_beginAccess();
  v24 = v1[12];
  v25 = v1[14];
  v27 = v1[13];
  v29 = v1[15];
  swift_beginAccess();
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(v27, a1[13])), (int8x16_t)vcgeq_f32(v31, vabdq_f32(v24, a1[12]))), vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(v25, a1[14])), (int8x16_t)vcgeq_f32(v31, vabdq_f32(v29, a1[15]))))) & 0x80000000) == 0)
  {
    v39 = xmmword_23D9A8970;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    v33 = v34;
    v12._countAndFlagsBits = 0xD000000000000014;
    v12._object = (void *)0x800000023D9CF080;
    String.append(_:)(v12);
    v13 = v1[13];
    v14 = v1[14];
    v15 = v1[15];
    v34 = (__int128)v1[12];
    v35 = v13;
    v36 = v14;
    v37 = v15;
    type metadata accessor for simd_float4x4(0);
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = a1[14];
    v18 = a1[15];
    v35.i64[0] = a1[13].i64[0];
    v36 = v17;
    v37 = v18;
    _print_unlocked<A, B>(_:_:)();
    v35.i64[1] = MEMORY[0x24BEE0D00];
    v34 = v33;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 240;
    goto LABEL_5;
  }
  swift_beginAccess();
  v32 = v1[7];
  swift_beginAccess();
  if (SIMD4<>.almostEqual(to:withThreshold:)(a1[7], 0.0000001, v32))
    return 1;
  v34 = xmmword_23D9A8970;
  v35 = 0uLL;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39 = 0xD000000000000014;
  *((_QWORD *)&v39 + 1) = 0x800000023D9CF0A0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
  lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>();
  v21._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v41 = MEMORY[0x24BEE0D00];
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000005CLL, 0x800000023D9CF000, 245, (uint64_t *)&v34, (uint64_t)&v39, MEMORY[0x24BEE4AF8]);
  v19 = &v39;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  return 0;
}

Swift::Float __swiftcall ImageCalibrationData.getFocalLengthX()()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 64);
}

Swift::Float __swiftcall ImageCalibrationData.getFocalLengthY()()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 84);
}

Swift::Float __swiftcall ImageCalibrationData.getPrincipalPointX()()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 96);
}

Swift::Float __swiftcall ImageCalibrationData.getPrincipalPointY()()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 100);
}

uint64_t ImageCalibrationData.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ImageCalibrationData.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance ImageCalibrationData@<X0>(uint64_t a1@<X8>)
{
  return ImageCalibrationData.toProtoBuf()(a1);
}

uint64_t specialized ImageCalibrationData.__allocating_init(protoBuf:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  simd_float4x4 *v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  unint64_t v75;
  uint64_t v76;
  simd_float3 v77;
  simd_float3 v78;
  simd_float3 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, unint64_t);
  CMTimeValue value;
  unint64_t v87;
  CMTimeEpoch epoch;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  int32x2_t v95;
  simd_float3 v96;
  __n128 v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  simd_float3 v113;
  simd_float3 v114;
  __n128 v115;
  simd_float3 v116;
  __n128 v117;
  uint64_t v118;
  char v119;
  simd_float4x4_optional v120;
  simd_float3x3_optional v121;
  simd_float3x3 v122;
  char v123;
  __n128 v124[4];
  char v125;
  simd_float3 v126[4];
  CMTime v127;
  CMTime v128;

  v115.n128_u64[0] = type metadata accessor for CMTimeProtobuf(0);
  v112 = *(_QWORD *)(v115.n128_u64[0] - 8);
  MEMORY[0x24BDAC7A8](v115.n128_u64[0], v2);
  v102 = (uint64_t *)((char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v101 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v8);
  v111 = (uint64_t)&v100 - v9;
  v113.i64[0] = type metadata accessor for Matrix3x3PB(0);
  v117.n128_u64[0] = *(_QWORD *)(v113.i64[0] - 8);
  MEMORY[0x24BDAC7A8](v113.i64[0], v10);
  v107 = (uint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  v14 = MEMORY[0x24BDAC7A8](v12, v13);
  v106 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v114.i64[0] = (uint64_t)&v100 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v20 = MEMORY[0x24BDAC7A8](v18, v19);
  v105 = (uint64_t)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v22);
  v110.n128_u64[0] = (unint64_t)&v100 - v23;
  v24 = type metadata accessor for Matrix2dPB(0);
  v116.i64[0] = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24, v25);
  v104 = (uint64_t *)((char *)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v26, v28);
  v108.n128_u64[0] = (unint64_t)&v100 - v29;
  v30 = type metadata accessor for TransformMatrixPB(0);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30, v32);
  v109.n128_u64[0] = (unint64_t)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  v36 = MEMORY[0x24BDAC7A8](v34, v35);
  v38 = (char *)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36, v39);
  v41 = (char *)&v100 - v40;
  v42 = *(int *)(type metadata accessor for ImageCalibrationDataPB(0) + 20);
  v43 = *(_QWORD *)(a1 + v42)
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v43, (uint64_t)v41, &demangling cache variable for type metadata for TransformMatrixPB?);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  LODWORD(v43) = v44(v41, 1, v30);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TransformMatrixPB?);
  v45 = *(_QWORD *)(a1 + v42);
  v103 = v24;
  if ((_DWORD)v43 == 1)
  {
    v46 = v45
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
    swift_beginAccess();
    v47 = v46;
    v48 = v110.n128_u64[0];
    outlined init with copy of (Int32, Matrix2dPB)(v47, v110.n128_i64[0], &demangling cache variable for type metadata for Matrix2dPB?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116.i64[0] + 48))(v48, 1, v24) == 1)
    {
      v49 = MEMORY[0x24BEE4AF8];
      v50 = v108.n128_u64[0];
      *(_QWORD *)v108.n128_u64[0] = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v50 + 8) = 0;
      *(_QWORD *)(v50 + 16) = v49;
      v51 = (_QWORD *)v50;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v48, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      v51 = (_QWORD *)v108.n128_u64[0];
      outlined init with take of Matrix2dPB(v48, v108.n128_i64[0], type metadata accessor for Matrix2dPB);
    }
    v54 = v117.n128_u64[0];
    specialized Matrix2d.init(protoBuf:)(v51);
    Matrix2d.toSimd4x4Float()(&v120);
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v120, (uint64_t)v124, &demangling cache variable for type metadata for simd_float4x4?);
    if ((v125 & 1) != 0)
      goto LABEL_18;
    v117 = v124[0];
    v109 = v124[2];
    v110 = v124[1];
    v108 = v124[3];
    v55 = v113.i64[0];
  }
  else
  {
    v52 = v45
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
    swift_beginAccess();
    outlined init with copy of (Int32, Matrix2dPB)(v52, (uint64_t)v38, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v44(v38, 1, v30) == 1)
    {
      v53 = v109.n128_u64[0];
      UnknownStorage.init()();
      v54 = v117.n128_u64[0];
      v55 = v113.i64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117.n128_u64[0] + 56))(v53 + *(int *)(v30 + 20), 1, 1, v113.i64[0]);
      v56 = v53 + *(int *)(v30 + 24);
      v57 = type metadata accessor for Coordinate3DPB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
      outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for TransformMatrixPB?);
    }
    else
    {
      v53 = v109.n128_u64[0];
      outlined init with take of Matrix2dPB((uint64_t)v38, v109.n128_i64[0], type metadata accessor for TransformMatrixPB);
      v55 = v113.i64[0];
      v54 = v117.n128_u64[0];
    }
    TransformMatrixPB.toSIMD4x4()(v58);
    v117 = v59;
    v109 = v61;
    v110 = v60;
    v108 = v62;
    outlined destroy of Matrix3x3PB(v53, type metadata accessor for TransformMatrixPB);
  }
  v63 = *(_QWORD *)(a1 + v42)
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  v64 = v114.i64[0];
  outlined init with copy of (Int32, Matrix2dPB)(v63, v114.i64[0], &demangling cache variable for type metadata for Matrix3x3PB?);
  v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  LODWORD(v63) = v65(v64, 1, v55);
  outlined destroy of Coordinate3DPB?(v64, &demangling cache variable for type metadata for Matrix3x3PB?);
  v66 = *(_QWORD *)(a1 + v42);
  if ((_DWORD)v63 == 1)
  {
    v67 = v66
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
    swift_beginAccess();
    v68 = v67;
    v69 = v105;
    outlined init with copy of (Int32, Matrix2dPB)(v68, v105, &demangling cache variable for type metadata for Matrix2dPB?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116.i64[0] + 48))(v69, 1, v103) == 1)
    {
      v70 = MEMORY[0x24BEE4AF8];
      v71 = v104;
      *v104 = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v71 + 8) = 0;
      v71[2] = v70;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      v71 = v104;
      outlined init with take of Matrix2dPB(v69, (uint64_t)v104, type metadata accessor for Matrix2dPB);
    }
    v75 = v115.n128_u64[0];
    specialized Matrix2d.init(protoBuf:)(v71);
    Matrix2d.toSimd3x3Float()(&v121);
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v121, (uint64_t)&v122, &demangling cache variable for type metadata for simd_float3x3?);
    if ((v123 & 1) != 0)
    {
LABEL_18:
      outlined destroy of Matrix3x3PB(a1, type metadata accessor for ImageCalibrationDataPB);
      return 0;
    }
    v79 = v122.columns[0];
    v77 = v122.columns[1];
    v78 = v122.columns[2];
  }
  else
  {
    v72 = v66
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
    swift_beginAccess();
    v73 = v106;
    outlined init with copy of (Int32, Matrix2dPB)(v72, v106, &demangling cache variable for type metadata for Matrix3x3PB?);
    if (v65(v73, 1, v55) == 1)
    {
      v74 = (_OWORD *)v107;
      *(_DWORD *)(v107 + 32) = 0;
      *v74 = 0u;
      v74[1] = 0u;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v73, &demangling cache variable for type metadata for Matrix3x3PB?);
    }
    else
    {
      v74 = (_OWORD *)v107;
      outlined init with take of Matrix2dPB(v73, v107, type metadata accessor for Matrix3x3PB);
    }
    v75 = v115.n128_u64[0];
    Matrix3x3PB.toSIMD3x3()(&v122);
    v116 = v122.columns[0];
    v113 = v122.columns[2];
    v114 = v122.columns[1];
    outlined destroy of Matrix3x3PB((uint64_t)v74, type metadata accessor for Matrix3x3PB);
    v78 = v113;
    v77 = v114;
    v79 = v116;
  }
  v126[0] = v79;
  v126[1] = v77;
  v126[2] = v78;
  v80 = *(_QWORD *)(a1 + v42);
  v81 = (uint64_t *)(v80
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  swift_beginAccess();
  v82 = *v81;
  v83 = v80
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  v84 = v111;
  outlined init with copy of (Int32, Matrix2dPB)(v83, v111, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v85 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v112 + 48);
  LODWORD(v83) = v85(v84, 1, v75);
  swift_bridgeObjectRetain();
  outlined destroy of Coordinate3DPB?(v84, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((_DWORD)v83 == 1)
  {
    v127 = CMTime.init(value:timescale:)(0, 1);
    value = v127.value;
    v87 = *(_QWORD *)&v127.timescale;
    epoch = v127.epoch;
  }
  else
  {
    v89 = *(_QWORD *)(a1 + v42)
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
    swift_beginAccess();
    v90 = v101;
    outlined init with copy of (Int32, Matrix2dPB)(v89, v101, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v85(v90, 1, v75) == 1)
    {
      v91 = v102;
      *v102 = 0;
      *((_DWORD *)v91 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v90, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      v91 = v102;
      outlined init with take of Matrix2dPB(v90, (uint64_t)v102, type metadata accessor for CMTimeProtobuf);
    }
    v128 = CMTime.init(value:timescale:)(*v91, *((_DWORD *)v91 + 2));
    value = v128.value;
    v87 = *(_QWORD *)&v128.timescale;
    epoch = v128.epoch;
    outlined destroy of Matrix3x3PB((uint64_t)v91, type metadata accessor for CMTimeProtobuf);
  }
  v92 = *(_QWORD *)(a1 + v42);
  v93 = v92
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize;
  result = swift_beginAccess();
  v96.i64[0] = 0x50000000500;
  if (*(_QWORD *)(*(_QWORD *)v93 + 16) == 2)
    v96.i64[0] = *(_QWORD *)(*(_QWORD *)v93 + 32);
  if (!v96.i32[0])
  {
    v95.i32[0] = 0;
    *(int8x8_t *)v96.f32 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(vdup_lane_s32(*(int32x2_t *)v96.f32, 1), v95), 0), (int8x8_t)0x50000000500, *(int8x8_t *)v96.f32);
  }
  if (*(_QWORD *)(v82 + 16) >= 4uLL)
  {
    v116 = v96;
    specialized SIMD.init<A>(_:)(v82 + 32, 0, 9uLL);
    v115 = v97;
    swift_bridgeObjectRelease();
    v98 = v92
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel;
    swift_beginAccess();
    v99 = *(_BYTE *)(v98 + 8);
    v118 = *(_QWORD *)v98;
    v119 = v99;
    type metadata accessor for ImageCalibrationData();
    v76 = swift_allocObject();
    ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v126, &v118, 0, 0, value, v87, epoch, v115, v117, v110, v109, v108, *(double *)v116.i64);
    outlined destroy of Matrix3x3PB(a1, type metadata accessor for ImageCalibrationDataPB);
    return v76;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ImageCalibrationData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint32x4_t v4;
  Swift::String v5;
  __int128 v6;
  __int128 v7;
  Swift::String v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  Swift::String v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v21;
  __int128 v22;
  BOOL v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  swift_beginAccess();
  v36 = *(float32x4_t *)(a1 + 80);
  v38 = *(float32x4_t *)(a1 + 64);
  v34 = *(float32x4_t *)(a1 + 96);
  swift_beginAccess();
  v4 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v36, *(float32x4_t *)(a2 + 80)), (int8x16_t)vceqq_f32(v38, *(float32x4_t *)(a2 + 64))), (int8x16_t)vceqq_f32(v34, *(float32x4_t *)(a2 + 96)));
  v4.i32[3] = v4.i32[2];
  if ((vminvq_u32(v4) & 0x80000000) != 0)
  {
    swift_beginAccess();
    v37 = *(float32x4_t *)(a1 + 208);
    v39 = *(float32x4_t *)(a1 + 192);
    v33 = *(float32x4_t *)(a1 + 224);
    v35 = *(float32x4_t *)(a1 + 240);
    swift_beginAccess();
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v37, *(float32x4_t *)(a2 + 208)), (int8x16_t)vceqq_f32(v39, *(float32x4_t *)(a2 + 192))), vandq_s8((int8x16_t)vceqq_f32(v33, *(float32x4_t *)(a2 + 224)), (int8x16_t)vceqq_f32(v35, *(float32x4_t *)(a2 + 240))))) & 0x80000000) == 0)
    {
      v50 = xmmword_23D9A8970;
      v51 = 0;
      v52 = 0;
      *(_QWORD *)&v45 = 0;
      *((_QWORD *)&v45 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      v44 = v45;
      v12._countAndFlagsBits = 0xD000000000000013;
      v12._object = (void *)0x800000023D9CF260;
      String.append(_:)(v12);
      v13 = *(_OWORD *)(a1 + 208);
      v14 = *(_OWORD *)(a1 + 224);
      v15 = *(_OWORD *)(a1 + 240);
      v45 = *(_OWORD *)(a1 + 192);
      v46 = v13;
      v47 = v14;
      v48 = v15;
      type metadata accessor for simd_float4x4(0);
      _print_unlocked<A, B>(_:_:)();
      v16._countAndFlagsBits = 32;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17 = *(_OWORD *)(a2 + 224);
      v18 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)&v46 = *(_QWORD *)(a2 + 208);
      v47 = v17;
      v48 = v18;
      _print_unlocked<A, B>(_:_:)();
      *((_QWORD *)&v46 + 1) = MEMORY[0x24BEE0D00];
      v45 = v44;
      v10 = MEMORY[0x24BEE4AF8];
      v11 = 259;
      goto LABEL_5;
    }
    swift_beginAccess();
    v40 = *(_OWORD *)(a1 + 112);
    swift_beginAccess();
    v21 = 0;
    v22 = *(_OWORD *)(a2 + 112);
    while (1)
    {
      v41 = v40;
      v24 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      v42 = v22;
      v25 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      v23 = v24 == v25;
      if (v21 == 3)
        break;
      while (1)
      {
        ++v21;
        if (v23)
          break;
        if (v21 == 3)
          goto LABEL_18;
        v23 = 0;
      }
    }
    if (v24 != v25)
    {
LABEL_18:
      v45 = xmmword_23D9A8970;
      v46 = 0uLL;
      *(_QWORD *)&v50 = 0;
      *((_QWORD *)&v50 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v50 = 0xD000000000000014;
      *((_QWORD *)&v50 + 1) = 0x800000023D9CF0A0;
      v43 = *(_OWORD *)(a1 + 112);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
      lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>();
      v30._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 32;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      v43 = *(_OWORD *)(a2 + 112);
      v32._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v52 = MEMORY[0x24BEE0D00];
      v28 = MEMORY[0x24BEE4AF8];
      v29 = 264;
      goto LABEL_19;
    }
    swift_beginAccess();
    v26 = *(_QWORD *)(a1 + 128);
    v27 = a2 + 128;
    if (v26)
    {
      swift_beginAccess();
      if (*(_QWORD *)v27)
      {
        if (*(_QWORD *)(v26 + 16) != *(_QWORD *)(*(_QWORD *)v27 + 16))
        {
          v45 = xmmword_23D9A8970;
          v46 = 0uLL;
          v52 = MEMORY[0x24BEE0D00];
          *(_QWORD *)&v50 = 0xD00000000000001BLL;
          *((_QWORD *)&v50 + 1) = 0x800000023D9CF2A0;
          v28 = MEMORY[0x24BEE4AF8];
          v29 = 277;
LABEL_19:
          specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000005CLL, 0x800000023D9CF000, v29, (uint64_t *)&v45, (uint64_t)&v50, v28);
          v19 = &v50;
          goto LABEL_6;
        }
        return 1;
      }
    }
    else
    {
      swift_beginAccess();
      if (!*(_QWORD *)v27)
        return 1;
    }
    v45 = xmmword_23D9A8970;
    v46 = 0uLL;
    v52 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v50 = 0xD000000000000019;
    *((_QWORD *)&v50 + 1) = 0x800000023D9CF280;
    v28 = MEMORY[0x24BEE4AF8];
    v29 = 270;
    goto LABEL_19;
  }
  v50 = xmmword_23D9A8970;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)&v45 = 0;
  *((_QWORD *)&v45 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v49 = v45;
  v5._countAndFlagsBits = 0xD000000000000013;
  v5._object = (void *)0x800000023D9CF060;
  String.append(_:)(v5);
  v6 = *(_OWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 96);
  v45 = *(_OWORD *)(a1 + 64);
  v46 = v6;
  v47 = v7;
  type metadata accessor for simd_float3x3(0);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)&v46 = *(_QWORD *)(a2 + 80);
  v47 = v9;
  _print_unlocked<A, B>(_:_:)();
  *((_QWORD *)&v46 + 1) = MEMORY[0x24BEE0D00];
  v45 = v49;
  v10 = MEMORY[0x24BEE4AF8];
  v11 = 254;
LABEL_5:
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000005CLL, 0x800000023D9CF000, v11, (uint64_t *)&v50, (uint64_t)&v45, v10);
  v19 = &v45;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  return 0;
}

uint64_t type metadata accessor for ImageCalibrationData()
{
  return objc_opt_self();
}

uint64_t specialized ImageCalibrationData.init(calibrationData:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_BYTE *)(v1 + 160) = 1;
  *(_QWORD *)(v1 + 168) = 0;
  *(_BYTE *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_BYTE *)(v1 + 320) = 1;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_BYTE *)(v1 + 400) = 1;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  swift_beginAccess();
  v3 = *(_OWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v3;
  *(_OWORD *)(v1 + 96) = v4;
  swift_beginAccess();
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 112);
  swift_beginAccess();
  v5 = *(_OWORD *)(a1 + 208);
  v6 = *(_OWORD *)(a1 + 224);
  v7 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v1 + 208) = v5;
  *(_OWORD *)(v1 + 224) = v6;
  *(_OWORD *)(v1 + 240) = v7;
  swift_beginAccess();
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v8;
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 128);
  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = *(void **)(a1 + 136);
  swift_beginAccess();
  v11 = *(void **)(v1 + 136);
  *(_QWORD *)(v1 + 136) = v10;
  v12 = v10;

  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 144);
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v13;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 44);
  v15 = *(_QWORD *)(a1 + 36);
  *(_QWORD *)(v1 + 28) = *(_QWORD *)(a1 + 28);
  *(_QWORD *)(v1 + 36) = v15;
  *(_QWORD *)(v1 + 44) = v14;
  return v1;
}

unint64_t lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
  if (!lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD4<Float>);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE4180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB;
  if (!lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB)
  {
    v1 = type metadata accessor for ImageCalibrationDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ImageCalibrationDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB);
  }
  return result;
}

uint64_t sub_23D7E70C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_23D7E7110(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 24) = v3;
  return result;
}

double sub_23D7E7160@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 44);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 28);
  result = *(double *)(v3 + 36);
  *(double *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  return result;
}

double sub_23D7E71B4(double *a1, uint64_t *a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *a2;
  swift_beginAccess();
  *(double *)(v5 + 28) = v3;
  result = a1[1];
  *(double *)(v5 + 36) = result;
  *(_QWORD *)(v5 + 44) = v4;
  return result;
}

__n128 sub_23D7E7210@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *a1;
  swift_beginAccess();
  result = *(__n128 *)(v3 + 64);
  v5 = *(_OWORD *)(v3 + 80);
  v6 = *(_OWORD *)(v3 + 96);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  return result;
}

__n128 sub_23D7E725C(__n128 *a1, _QWORD *a2)
{
  _OWORD *v2;
  __n128 result;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = a1[2];
  v2 = (_OWORD *)*a2;
  swift_beginAccess();
  v2[4] = v6;
  v2[5] = v5;
  result = v4;
  v2[6] = v4;
  return result;
}

__n128 sub_23D7E72BC@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = *a1;
  swift_beginAccess();
  result = v3[7];
  *a2 = result;
  return result;
}

__n128 sub_23D7E7300(__n128 *a1, __n128 **a2)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = *a2;
  swift_beginAccess();
  result = v4;
  v2[7] = v4;
  return result;
}

uint64_t sub_23D7E7348@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 128);
  return swift_bridgeObjectRetain();
}

id sub_23D7E7394@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 136);
  *a2 = v4;
  return v4;
}

double sub_23D7E73DC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *a1;
  swift_beginAccess();
  result = *(double *)(v3 + 144);
  *a2 = result;
  return result;
}

uint64_t sub_23D7E7420(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 144) = v2;
  return result;
}

__n128 sub_23D7E7468@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a1;
  swift_beginAccess();
  result = *(__n128 *)(v3 + 192);
  v5 = *(_OWORD *)(v3 + 208);
  v6 = *(_OWORD *)(v3 + 224);
  v7 = *(_OWORD *)(v3 + 240);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

double sub_23D7E74B4(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v4 = a1[3];
  v5 = a1[2];
  v2 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v2 + 192) = v7;
  *(_OWORD *)(v2 + 208) = v6;
  *(_OWORD *)(v2 + 224) = v5;
  *(_OWORD *)(v2 + 240) = v4;
  result = 0.0;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_BYTE *)(v2 + 400) = 1;
  return result;
}

uint64_t method lookup function for ImageCalibrationData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ImageCalibrationData.arrivalTimeStamp.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ImageCalibrationData.intrinsicCalibration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ImageCalibrationData.distortionParameters.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of ImageCalibrationData.warperMeshBin.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ImageCalibrationData.warperMeshBin.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ImageCalibrationData.warperMeshBin.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ImageCalibrationData.warperMeshBuffer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ImageCalibrationData.imageSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraToHeadsetTransform.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraToHeadsetTransform.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraToHeadsetTransform.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of ImageCalibrationData.__allocating_init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t (*v4)(_OWORD *);
  _OWORD v6[3];

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(uint64_t (**)(_OWORD *))(v1 + 488);
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = v3;
  return v4(v6);
}

uint64_t dispatch thunk of ImageCalibrationData.__allocating_init(calibrationData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraToHeadsetRotation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of ImageCalibrationData.cameraToHeadsetTranslation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of ImageCalibrationData.isRectilinearImage()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of ImageCalibrationData.almostEquals(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of ImageCalibrationData.getFocalLengthX()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of ImageCalibrationData.getFocalLengthY()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of ImageCalibrationData.getPrincipalPointX()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of ImageCalibrationData.getPrincipalPointY()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t PosePreprocessing.__allocating_init(options:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  PosePreprocessing.loadModelParams(_:)(a1);

  return v2;
}

uint64_t PosePreprocessing.init(options:)(void *a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  PosePreprocessing.loadModelParams(_:)(a1);

  return v1;
}

uint64_t PosePreprocessing.loadModelParams(_:)(id a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
    goto LABEL_22;
  if (COERCE_FLOAT(*(_QWORD *)(v1 + 56)) != 128.0 || COERCE_FLOAT(HIDWORD(*(_QWORD *)(v1 + 56))) != 128.0)
    goto LABEL_22;
  v4 = *(_QWORD *)(v1 + 80);
  if (!v4)
    goto LABEL_22;
  v5 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(a1, sel_PoseCropMode);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  if (v5 == v7 && v4 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_22:
    if (objc_msgSend(a1, sel_PosePipelineType) == 2 && objc_msgSend(a1, sel_UseUberMono))
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
    }
    else
    {
      closure #1 in PosePreprocessing.loadModelParams(_:)(a1, 128, 128, (uint64_t)v17);
    }
    swift_beginAccess();
    outlined assign with take of ImageCropProcessor?((uint64_t)v17, v1 + 16);
    swift_endAccess();
  }
LABEL_18:
  *(_QWORD *)(v1 + 56) = 0x4300000043000000;
  *(_BYTE *)(v1 + 64) = 0;
  v12 = objc_msgSend(a1, sel_PoseCropMode);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  *(_QWORD *)(v1 + 72) = v13;
  *(_QWORD *)(v1 + 80) = v15;
  return swift_bridgeObjectRelease();
}

double closure #1 in PosePreprocessing.loadModelParams(_:)@<D0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  double result;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v8 = objc_msgSend(a1, sel_PoseCropMode);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = v9 == 4542017 && v11 == 0xE300000000000000;
  if (v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v9 == 0x47435F454E41 ? (v17 = v11 == 0xE600000000000000) : (v17 = 0),
        v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v13 = type metadata accessor for EspressoCropProcessor();
    swift_allocObject();
    v14 = a1;
    v15 = specialized EspressoCropProcessor.init(config:cropWidth:cropHeight:)(v14, a2, a3);

    *(_QWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 32) = &protocol witness table for EspressoCropProcessor;
    *(_QWORD *)a4 = v15;
    return result;
  }
  v18 = v9 == 0x6C6174654DLL && v11 == 0xE500000000000000;
  if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || v9 == 909201478 && v11 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    v19 = type metadata accessor for MetalCropProcessor();
    swift_allocObject();
    v20 = MetalCropProcessor.init(config:cropWidth:cropHeight:)(a1, a2, a3);
    *(_QWORD *)(a4 + 24) = v19;
    *(_QWORD *)(a4 + 32) = &protocol witness table for MetalCropProcessor;
    *(_QWORD *)a4 = v20;
    return result;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_20;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v31[0] = 0xD000000000000016;
  v31[1] = 0x800000023D9CF380;
  v22 = objc_msgSend(a1, sel_PoseCropMode);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x800000023D9CF3A0;
  v27._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  v31[3] = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  v28 = xmmword_23D9A6CC0;
  v29 = 0;
  v30 = 0;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v28, 0xD000000000000061, 0x800000023D9CF310, 35, (uint64_t)v31, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  *(_QWORD *)(a4 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t PosePreprocessing.run(forHand:withOlderHand:withHandsKitData:gtInjections:xCanonicalization:rotateCrops:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  float32x2_t *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const void *v15;
  float32x2_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  simd_float3 v33;
  simd_float3 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  float32x4_t v59;
  float32x4_t v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  simd_float3 v64;
  simd_float3 v65;
  simd_float3 v66;
  simd_float3 v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  float32x4_t v104;
  float32x4_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t result;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  simd_float3 v114;
  simd_float3 v115;
  float32x4_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  simd_float3 v122;
  simd_float3 v123;
  simd_float3 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  simd_float3 v133;
  simd_float3 v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[3];
  float32x4_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  __int128 v154;
  _BYTE v155[25];
  _BYTE v156[7];
  char v157;
  _BYTE v158[7];
  __int8 v159;
  _QWORD v160[3];
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE v177[344];
  float32x4_t v178[4];
  simd_float3x3 v179;
  simd_float3x3 v180;

  v134.i64[0] = a4;
  v133.i64[0] = a2;
  v132.i64[0] = a1;
  v121 = a7;
  v120 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v120, v11);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v7[8].i8[0] & 1) != 0)
    goto LABEL_30;
  v14 = *(_QWORD *)(a3 + 200);
  v15 = (const void *)(a3 + 208);
  v16 = v7[7];
  type metadata accessor for PoseModelUtils();
  v17 = *(_OWORD *)(a3 + 176);
  v173 = *(_OWORD *)(a3 + 160);
  v174 = v17;
  v18 = *(_QWORD *)(a3 + 192);
  v19 = *(_OWORD *)(a3 + 112);
  v169 = *(_OWORD *)(a3 + 96);
  v170 = v19;
  v20 = *(_OWORD *)(a3 + 144);
  v171 = *(_OWORD *)(a3 + 128);
  v172 = v20;
  v21 = *(_OWORD *)(a3 + 48);
  v165 = *(_OWORD *)(a3 + 32);
  v166 = v21;
  v22 = *(_OWORD *)(a3 + 80);
  v167 = *(_OWORD *)(a3 + 64);
  v168 = v22;
  v24 = *(_OWORD *)a3;
  v23 = *(_OWORD *)(a3 + 16);
  v25 = v14;
  v163 = v24;
  v164 = v23;
  v175 = v18;
  v176 = v14;
  memcpy(v177, v15, sizeof(v177));
  static PoseModelUtils.preprocessInput(hand:olderHand:cropShape:handsKitData:gtInjections:xCanonicalization:rotateCrops:)(v132.i64[0], v133.i64[0], &v163, v134.i64[0], a5 & 1, a6 & 1, (uint64_t)v13, v16);
  swift_beginAccess();
  outlined init with copy of ImageCropProcessor?((uint64_t)&v7[2], (uint64_t)&v163);
  if (!*((_QWORD *)&v164 + 1))
  {
    outlined destroy of ImageCropProcessor?((uint64_t)&v163);
    return outlined init with take of Matrix2dPB((uint64_t)v13, v121, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  outlined init with take of PinchCancellationModule(&v163, (uint64_t)v160);
  v26 = *((_QWORD *)v13 + 25);
  v27 = v121;
  if (!v26 || (v28 = *(_QWORD *)(v26 + 16)) == 0)
  {
LABEL_27:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
    outlined init with copy of HandDescriptor((uint64_t)v13, v27);
    return outlined destroy of HandDescriptor((uint64_t)v13);
  }
  v111 = swift_bridgeObjectRetain();
  v112 = v14;
  v35 = (char *)(v111 + 40);
  v36 = v120;
  v113 = v13;
  while (1)
  {
    if (!*(_QWORD *)(v25 + 16))
      goto LABEL_8;
    v129 = v29;
    v130 = v30;
    v131 = v31;
    v132 = v32;
    v133 = v33;
    v134 = v34;
    v37 = *((_QWORD *)v35 - 1);
    v38 = *v35;
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *v35);
    if ((v40 & 1) != 0)
    {
      v41 = (__int128 *)(*(_QWORD *)(v25 + 56) + 192 * v39);
      v42 = v41[4];
      v43 = v41[5];
      v44 = v41[7];
      v169 = v41[6];
      v170 = v44;
      v168 = v43;
      v45 = v41[8];
      v46 = v41[9];
      v47 = v41[11];
      v173 = v41[10];
      v174 = v47;
      v171 = v45;
      v172 = v46;
      v48 = v41[1];
      v50 = v41[2];
      v49 = v41[3];
      v163 = *v41;
      v164 = v48;
      v165 = v50;
      v166 = v49;
      v167 = v42;
      v51 = *(_QWORD *)&v13[*(int *)(v36 + 92)];
      if (*(_QWORD *)(v51 + 16))
        break;
    }
LABEL_7:
    v29 = v129;
    v30 = v130;
    v33 = v133;
    v34 = v134;
    v31 = v131;
    v32 = v132;
LABEL_8:
    v35 += 16;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      v27 = v121;
      goto LABEL_27;
    }
  }
  v128 = *(int *)(v36 + 92);
  outlined retain of ImageData((uint64_t)&v163);
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
  if ((v53 & 1) == 0)
  {
    outlined release of ImageData((uint64_t)&v163);
    goto LABEL_7;
  }
  v54 = (_OWORD *)(*(_QWORD *)(v51 + 56) + 176 * v52);
  v56 = v54[1];
  v55 = v54[2];
  v146 = *(float32x4_t *)v54;
  v147 = v56;
  v148 = v55;
  v57 = v54[3];
  v58 = v54[4];
  v59 = *((float32x4_t *)v54 + 6);
  v151 = *((float32x4_t *)v54 + 5);
  v152 = v59;
  v149 = v57;
  v150 = v58;
  v60 = *((float32x4_t *)v54 + 7);
  v61 = v54[8];
  v62 = v54[9];
  *(_OWORD *)&v155[9] = *(_OWORD *)((char *)v54 + 153);
  v154 = v61;
  *(_OWORD *)v155 = v62;
  v153 = v60;
  v63 = (void *)objc_opt_self();
  v125 = v148;
  v126 = v149;
  v127 = v150;
  outlined retain of PoseImageCrop((uint64_t)&v146);
  objc_msgSend(v63, sel_shiftIntrinsics_, *(double *)&v125, *(double *)&v126, *(double *)&v127);
  v65 = v64;
  v65.i32[3] = v129.i32[3];
  v66.i32[3] = v130.i32[3];
  v123 = v66;
  v124 = v65;
  v67.i32[3] = v131.i32[3];
  v122 = v67;
  v68 = v161;
  *(_QWORD *)&v119 = v162;
  __swift_project_boxed_opaque_existential_1(v160, v161);
  v144 = v171;
  v145[0] = v172;
  v145[1] = v173;
  v145[2] = v174;
  v140 = v167;
  v141 = v168;
  v142 = v169;
  v143 = v170;
  v136 = v163;
  v137 = v164;
  v138 = v165;
  v139 = v166;
  v129 = v151;
  v130 = v152;
  v131 = v153;
  v179.columns[1] = v123;
  v179.columns[0] = v124;
  v179.columns[2] = v122;
  v180 = __invert_f3(v179);
  v69 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v180.columns[0].f32[0]), v130, *(float32x2_t *)v180.columns[0].f32, 1), v131, (float32x4_t)v180.columns[0], 2);
  v180.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v180.columns[1].f32[0]), v130, *(float32x2_t *)v180.columns[1].f32, 1), v131, (float32x4_t)v180.columns[1], 2);
  v180.columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v180.columns[2].f32[0]), v130, *(float32x2_t *)v180.columns[2].f32, 1), v131, (float32x4_t)v180.columns[2], 2);
  v69.i32[3] = v132.i32[3];
  v180.columns[0].i32[3] = v133.i32[3];
  v180.columns[1].i32[3] = v134.i32[3];
  v115 = v180.columns[0];
  v116 = v69;
  v178[0] = v69;
  v178[1] = (float32x4_t)v180.columns[0];
  v114 = v180.columns[1];
  v178[2] = (float32x4_t)v180.columns[1];
  v70 = (*(uint64_t (**)(__int128 *, float32x4_t *, uint64_t))(v119 + 8))(&v136, v178, v68);
  v72 = v71;
  v119 = v154;
  v73 = *(_DWORD *)&v155[16];
  v74 = *(_DWORD *)&v155[20];
  v132.i32[0] = v155[24];
  v117 = v146.i64[0];
  v118 = v147;
  v159 = v146.i8[8];
  v157 = BYTE8(v147);
  outlined copy of Data?(v70, v71);
  v134.i64[0] = v70;
  v133.i64[0] = v72;
  outlined copy of Data?(v70, v72);
  v75 = v128;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v135 = *(_QWORD **)&v13[v75];
  v77 = v135;
  *(_QWORD *)&v13[v75] = 0x8000000000000000;
  v79 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
  v80 = v77[2];
  v81 = (v78 & 1) == 0;
  v82 = v80 + v81;
  if (!__OFADD__(v80, v81))
  {
    v83 = v78;
    if (v77[3] >= v82)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v78 & 1) == 0)
          goto LABEL_22;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v83 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, isUniquelyReferenced_nonNull_native);
      v84 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
      if ((v83 & 1) != (v85 & 1))
        goto LABEL_31;
      v79 = v84;
      if ((v83 & 1) == 0)
      {
LABEL_22:
        v86 = v135;
        v135[(v79 >> 6) + 8] |= 1 << v79;
        v101 = v86[6] + 16 * v79;
        *(_QWORD *)v101 = v37;
        *(_BYTE *)(v101 + 8) = v38;
        v102 = v86[7] + 176 * v79;
        *(_QWORD *)v102 = v117;
        *(_BYTE *)(v102 + 8) = v159;
        *(_DWORD *)(v102 + 12) = *(_DWORD *)&v158[3];
        *(_DWORD *)(v102 + 9) = *(_DWORD *)v158;
        *(_QWORD *)(v102 + 16) = v118;
        *(_BYTE *)(v102 + 24) = v157;
        *(_DWORD *)(v102 + 25) = *(_DWORD *)v156;
        *(_DWORD *)(v102 + 28) = *(_DWORD *)&v156[3];
        v103 = v126;
        *(_OWORD *)(v102 + 32) = v125;
        *(_OWORD *)(v102 + 48) = v103;
        v104 = v129;
        *(_OWORD *)(v102 + 64) = v127;
        *(float32x4_t *)(v102 + 80) = v104;
        v105 = v131;
        *(float32x4_t *)(v102 + 96) = v130;
        *(float32x4_t *)(v102 + 112) = v105;
        *(_OWORD *)(v102 + 128) = v119;
        v99 = v134.i64[0];
        v100 = v133.i64[0];
        *(_QWORD *)(v102 + 144) = v134.i64[0];
        *(_QWORD *)(v102 + 152) = v100;
        *(_DWORD *)(v102 + 160) = v73;
        *(_DWORD *)(v102 + 164) = v74;
        *(_BYTE *)(v102 + 168) = v132.i8[0];
        v106 = v86[2];
        v107 = __OFADD__(v106, 1);
        v108 = v106 + 1;
        if (v107)
          goto LABEL_29;
        v86[2] = v108;
        goto LABEL_24;
      }
    }
    v86 = v135;
    v87 = v135[7] + 176 * v79;
    v89 = *(_OWORD *)(v87 + 16);
    v88 = *(_OWORD *)(v87 + 32);
    v136 = *(_OWORD *)v87;
    v137 = v89;
    v138 = v88;
    v90 = *(_OWORD *)(v87 + 96);
    v92 = *(_OWORD *)(v87 + 48);
    v91 = *(_OWORD *)(v87 + 64);
    v141 = *(_OWORD *)(v87 + 80);
    v142 = v90;
    v139 = v92;
    v140 = v91;
    v94 = *(_OWORD *)(v87 + 128);
    v93 = *(_OWORD *)(v87 + 144);
    v95 = *(_OWORD *)(v87 + 153);
    v143 = *(_OWORD *)(v87 + 112);
    *(_OWORD *)((char *)v145 + 9) = v95;
    v144 = v94;
    v145[0] = v93;
    outlined release of PoseImageCrop((uint64_t)&v136);
    *(_QWORD *)v87 = v117;
    *(_BYTE *)(v87 + 8) = v159;
    *(_DWORD *)(v87 + 9) = *(_DWORD *)v158;
    *(_DWORD *)(v87 + 12) = *(_DWORD *)&v158[3];
    *(_QWORD *)(v87 + 16) = v118;
    *(_BYTE *)(v87 + 24) = v157;
    *(_DWORD *)(v87 + 25) = *(_DWORD *)v156;
    *(_DWORD *)(v87 + 28) = *(_DWORD *)&v156[3];
    v96 = v126;
    *(_OWORD *)(v87 + 32) = v125;
    *(_OWORD *)(v87 + 48) = v96;
    v97 = v129;
    *(_OWORD *)(v87 + 64) = v127;
    *(float32x4_t *)(v87 + 80) = v97;
    v98 = v131;
    *(float32x4_t *)(v87 + 96) = v130;
    *(float32x4_t *)(v87 + 112) = v98;
    *(_OWORD *)(v87 + 128) = v119;
    v99 = v134.i64[0];
    v100 = v133.i64[0];
    *(_QWORD *)(v87 + 144) = v134.i64[0];
    *(_QWORD *)(v87 + 152) = v100;
    *(_DWORD *)(v87 + 160) = v73;
    *(_DWORD *)(v87 + 164) = v74;
    *(_BYTE *)(v87 + 168) = v132.i8[0];
LABEL_24:
    v13 = v113;
    *(_QWORD *)&v113[v128] = v86;
    swift_bridgeObjectRelease();
    outlined release of ImageData((uint64_t)&v163);
    outlined consume of Data?(v99, v100);
    outlined consume of Data?(v99, v100);
    outlined release of PoseImageCrop((uint64_t)&v146);
    v36 = v120;
    v25 = v112;
    v30 = (float32x4_t)v123;
    v29 = (float32x4_t)v124;
    v31 = (float32x4_t)v122;
    v33 = v115;
    v32 = v116;
    v34 = v114;
    goto LABEL_8;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PosePreprocessing.deinit()
{
  uint64_t v0;

  outlined destroy of ImageCropProcessor?(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PosePreprocessing.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ImageCropProcessor?(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of ImageCropProcessor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCropProcessor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ImageCropProcessor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCropProcessor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _QWORD *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  __n128 *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a3[6] + result) = a2;
  v7 = (__n128 *)(a3[7] + (result << 6));
  *v7 = a4;
  v7[1] = a5;
  v7[2] = a6;
  v7[3] = a7;
  v8 = a3[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a3[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 3 * result;
  *(_BYTE *)(v4 + 2) = BYTE2(a2);
  *(_WORD *)v4 = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  v4 = a4[7] + 104 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 96) = *(_BYTE *)(a3 + 96);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = v6;
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v7;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3;
  v6 = a5[7] + 80 * result;
  *(_QWORD *)(v6 + 62) = *(_QWORD *)(a4 + 62);
  v7 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v8;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3 & 1;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, _QWORD *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(result >> 6) + 8] |= 1 << result;
  v8 = a4[6] + 16 * result;
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = a3 & 1;
  v9 = (__n128 *)(a4[7] + (result << 6));
  *v9 = a5;
  v9[1] = a6;
  v9[2] = a7;
  v9[3] = a8;
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, _OWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3 & 1;
  v6 = a4[5];
  v7 = (_OWORD *)(a5[7] + 176 * result);
  v7[4] = a4[4];
  v7[5] = v6;
  *(_OWORD *)((char *)v7 + 153) = *(_OWORD *)((char *)a4 + 153);
  v8 = a4[9];
  v7[8] = a4[8];
  v7[9] = v8;
  v9 = a4[7];
  v7[6] = a4[6];
  v7[7] = v9;
  v10 = a4[1];
  *v7 = *a4;
  v7[1] = v10;
  v11 = a4[3];
  v7[2] = a4[2];
  v7[3] = v11;
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3 & 1;
  v6 = a4[7];
  v7 = (_OWORD *)(a5[7] + 192 * result);
  v7[6] = a4[6];
  v7[7] = v6;
  v8 = a4[5];
  v7[4] = a4[4];
  v7[5] = v8;
  v9 = a4[11];
  v7[10] = a4[10];
  v7[11] = v9;
  v10 = a4[9];
  v7[8] = a4[8];
  v7[9] = v10;
  v11 = a4[1];
  *v7 = *a4;
  v7[1] = v11;
  v12 = a4[3];
  v7[2] = a4[2];
  v7[3] = v12;
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = a4[6] + 16 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3 & 1;
  *(float *)(a4[7] + 4 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + (result << 6));
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v4[2] = a3[2];
  *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)((char *)a3 + 41);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 96 * result);
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v6 = a3[5];
  v4[4] = a3[4];
  v4[5] = v6;
  v7 = a3[3];
  v4[2] = a3[2];
  v4[3] = v7;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 24) = a5 & 1;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for HandsKitDataPB(0);
  result = outlined init with take of Matrix2dPB(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for HandsKitDataPB);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, void *__src, _QWORD *a4)
{
  void *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = memcpy((void *)(a4[7] + 560 * a1), __src, 0x228uLL);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5 & 1;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, __n128 a4, __n128 a5)
{
  __n128 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a2;
  v5 = (__n128 *)(a3[7] + 32 * result);
  *v5 = a4;
  v5[1] = a5;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Logger();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for ImageCalibrationDataPB(0);
  result = outlined init with take of Matrix2dPB(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for ImageCalibrationDataPB);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 12 * result;
  *(_BYTE *)v5 = a2 & 1;
  *(_DWORD *)(v5 + 4) = HIDWORD(a2);
  *(_DWORD *)(v5 + 8) = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, __n128 a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a2;
  *(__n128 *)(a3[7] + 16 * result) = a4;
  v4 = a3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a3[2] = v6;
  return result;
}

uint64_t type metadata accessor for PosePreprocessing()
{
  return objc_opt_self();
}

uint64_t method lookup function for PosePreprocessing()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PosePreprocessing.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PosePreprocessing.run(forHand:withOlderHand:withHandsKitData:gtInjections:xCanonicalization:rotateCrops:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t outlined assign with take of ImageCropProcessor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCropProcessor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of HandyLoggerSinkProtocolNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 8))();
}

uint64_t dispatch thunk of HandyLoggerSinkProtocolNeo.flush()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HandyLoggerSinkProtocolNeo.clearLogs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t CenternetDetection2DComputePipeline.getNMSConfidenceOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v4 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0x726F63735F736D6ELL, 0xEA00000000007365, v2, v3);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  if (!v1)
    return specialized _copyCollectionToContiguousArray<A>(_:)(v4, 4);
  return result;
}

uint64_t CenternetDetection2DComputePipeline.getDepthOutput()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  outlined init with copy of Detection2DComputePipelineProtocol(v2 + 24, (uint64_t)v10);
  v6 = v11;
  v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 160))(a1, a2, v6, v7);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  if (!v3)
    return specialized _copyCollectionToContiguousArray<A>(_:)(v8, 4);
  return result;
}

_QWORD *CenternetDetection2DComputePipeline.getKeyPointsOutput()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int32x2_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v20);
  v5 = v21;
  v6 = v22;
  __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
  v7 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *, uint64_t))(v6 + 160))(0x7079656B5F736D6ELL, 0xED000073746E696FLL, v5, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  if (!v1)
  {
    v8 = (int32x2_t *)specialized _copyCollectionToContiguousArray<A>(_:)(v7, 32);
    v9 = (int32x2_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23D9A7080;
    v11 = (unint64_t)v8[2];
    if (v11 < 2)
    {
      __break(1u);
    }
    else
    {
      v3 = v10;
      *(int32x2_t *)(v10 + 32) = vrev64_s32(v8[4]);
      if (v11 >= 4)
      {
        *(int32x2_t *)(v10 + 40) = vrev64_s32(v8[5]);
        if (v11 >= 6)
        {
          *(int32x2_t *)(v10 + 48) = vrev64_s32(v8[6]);
          if (v11 >= 8)
          {
            *(int32x2_t *)(v10 + 56) = vrev64_s32(v8[7]);
            v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
            v4 = v5[2];
            v11 = v5[3];
            v2 = v4 + 1;
            if (v4 < v11 >> 1)
              goto LABEL_7;
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v2, 1, v5);
LABEL_7:
          v5[2] = v2;
          v5[v4 + 4] = v3;
          v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = xmmword_23D9A7080;
          v13 = (unint64_t)v8[2];
          if (v13 < 0xA)
          {
            __break(1u);
          }
          else
          {
            v3 = v12;
            *(int32x2_t *)(v12 + 32) = vrev64_s32(v8[8]);
            if (v13 >= 0xC)
            {
              *(int32x2_t *)(v12 + 40) = vrev64_s32(v8[9]);
              if (v13 >= 0xE)
              {
                *(int32x2_t *)(v12 + 48) = vrev64_s32(v8[10]);
                if (v13 >= 0x10)
                {
                  *(int32x2_t *)(v12 + 56) = vrev64_s32(v8[11]);
                  v13 = v5[3];
                  v4 += 2;
                  if (v2 < v13 >> 1)
                    goto LABEL_12;
                  goto LABEL_33;
                }
LABEL_32:
                __break(1u);
LABEL_33:
                v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v4, 1, v5);
LABEL_12:
                v5[2] = v4;
                v5[v2 + 4] = v3;
                v14 = swift_allocObject();
                *(_OWORD *)(v14 + 16) = xmmword_23D9A7080;
                v15 = (unint64_t)v8[2];
                if (v15 < 0x12)
                {
                  __break(1u);
                }
                else
                {
                  v2 = v14;
                  *(int32x2_t *)(v14 + 32) = vrev64_s32(v8[12]);
                  if (v15 >= 0x14)
                  {
                    *(int32x2_t *)(v14 + 40) = vrev64_s32(v8[13]);
                    if (v15 >= 0x16)
                    {
                      *(int32x2_t *)(v14 + 48) = vrev64_s32(v8[14]);
                      if (v15 >= 0x18)
                      {
                        *(int32x2_t *)(v14 + 56) = vrev64_s32(v8[15]);
                        v4 = v5[2];
                        v15 = v5[3];
                        v3 = v4 + 1;
                        if (v4 < v15 >> 1)
                          goto LABEL_17;
                        goto LABEL_38;
                      }
LABEL_37:
                      __break(1u);
LABEL_38:
                      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v3, 1, v5);
LABEL_17:
                      v5[2] = v3;
                      v5[v4 + 4] = v2;
                      v16 = swift_allocObject();
                      *(_OWORD *)(v16 + 16) = xmmword_23D9A7080;
                      v17 = (unint64_t)v8[2];
                      if (v17 < 0x1A)
                      {
                        __break(1u);
                      }
                      else
                      {
                        v9 = (int32x2_t *)v16;
                        *(int32x2_t *)(v16 + 32) = vrev64_s32(v8[16]);
                        if (v17 >= 0x1C)
                        {
                          *(int32x2_t *)(v16 + 40) = vrev64_s32(v8[17]);
                          if (v17 >= 0x1E)
                          {
                            *(int32x2_t *)(v16 + 48) = vrev64_s32(v8[18]);
                            if (v17 >= 0x20)
                            {
                              v18 = v8[19];
                              swift_release();
                              v9[7] = vrev64_s32(v18);
                              v2 = v5[2];
                              v17 = v5[3];
                              v8 = (int32x2_t *)(v2 + 1);
                              if (v2 < v17 >> 1)
                              {
LABEL_22:
                                v5[2] = v8;
                                v5[v2 + 4] = v9;
                                return v5;
                              }
LABEL_43:
                              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), (int64_t)v8, 1, v5);
                              goto LABEL_22;
                            }
LABEL_42:
                            __break(1u);
                            goto LABEL_43;
                          }
LABEL_41:
                          __break(1u);
                          goto LABEL_42;
                        }
                      }
                      __break(1u);
                      goto LABEL_41;
                    }
LABEL_36:
                    __break(1u);
                    goto LABEL_37;
                  }
                }
                __break(1u);
                goto LABEL_36;
              }
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
          }
          __break(1u);
          goto LABEL_31;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  return v5;
}

Swift::tuple_center_OpaquePointer_size_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CenternetDetection2DComputePipeline.getNMSBoxesOutput()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  int32x2_t v4;
  int32x2_t v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  void *v18;
  __int128 v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  Swift::tuple_center_OpaquePointer_size_OpaquePointer result;
  _QWORD v37[3];
  _QWORD *v38;
  unint64_t v39;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v37);
  v6 = v38;
  v7 = v39;
  __swift_project_boxed_opaque_existential_1(v37, (uint64_t)v38);
  v8 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *, unint64_t))(v7 + 160))(0x65786F625F736D6ELL, 0xE900000000000073, v6, v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
  if (v1)
    goto LABEL_18;
  v9 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v8, 16);
  v10 = v9[2];
  if (v10 < 2)
  {
    __break(1u);
  }
  else if (v10 >= 4)
  {
    v6 = v9;
    v4 = (int32x2_t)v9[4];
    v5 = (int32x2_t)v9[5];
    v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v3 = *((_QWORD *)v8 + 2);
    v10 = *((_QWORD *)v8 + 3);
    v7 = v3 + 1;
    if (v3 < v10 >> 1)
      goto LABEL_5;
    goto LABEL_21;
  }
  __break(1u);
LABEL_21:
  v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v7, 1, v8);
LABEL_5:
  *(int32x2_t *)&v11 = vrev64_s32(v4);
  *((int32x2_t *)&v11 + 1) = vrev64_s32(v5);
  *((_QWORD *)v8 + 2) = v7;
  *(_OWORD *)&v8[16 * v3 + 32] = v11;
  v12 = v6[2];
  if (v12 < 6)
  {
    __break(1u);
  }
  else if (v12 >= 8)
  {
    v4 = (int32x2_t)v6[6];
    v5 = (int32x2_t)v6[7];
    v12 = *((_QWORD *)v8 + 3);
    v2 = v3 + 2;
    if ((uint64_t)(v3 + 2) <= (uint64_t)(v12 >> 1))
      goto LABEL_8;
    goto LABEL_24;
  }
  __break(1u);
LABEL_24:
  v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v2, 1, v8);
LABEL_8:
  *(int32x2_t *)&v13 = vrev64_s32(v4);
  *((int32x2_t *)&v13 + 1) = vrev64_s32(v5);
  *((_QWORD *)v8 + 2) = v2;
  *(_OWORD *)&v8[16 * v7 + 32] = v13;
  v14 = v6[2];
  if (v14 < 0xA)
  {
    __break(1u);
  }
  else if (v14 >= 0xC)
  {
    v4 = (int32x2_t)v6[8];
    v5 = (int32x2_t)v6[9];
    v14 = *((_QWORD *)v8 + 3);
    v7 = v3 + 3;
    if ((uint64_t)(v3 + 3) <= (uint64_t)(v14 >> 1))
      goto LABEL_11;
    goto LABEL_27;
  }
  __break(1u);
LABEL_27:
  v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v7, 1, v8);
LABEL_11:
  *(int32x2_t *)&v15 = vrev64_s32(v4);
  *((int32x2_t *)&v15 + 1) = vrev64_s32(v5);
  *((_QWORD *)v8 + 2) = v7;
  *(_OWORD *)&v8[16 * v2 + 32] = v15;
  v16 = v6[2];
  if (v16 < 0xE)
  {
    __break(1u);
  }
  else if (v16 >= 0x10)
  {
    v4 = (int32x2_t)v6[10];
    v5 = (int32x2_t)v6[11];
    v17 = (char *)swift_release();
    v7 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    v6 = (_QWORD *)(v7 + 1);
    if (v7 < v16 >> 1)
      goto LABEL_14;
    goto LABEL_30;
  }
  __break(1u);
LABEL_30:
  v17 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), (int64_t)v6, 1, v8);
  v8 = v17;
LABEL_14:
  *(int32x2_t *)&v19 = vrev64_s32(v4);
  *((int32x2_t *)&v19 + 1) = vrev64_s32(v5);
  *((_QWORD *)v8 + 2) = v6;
  *(_OWORD *)&v8[16 * v7 + 32] = v19;
  if (!v7)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v7 == 1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v7 < 3)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v20 = *(float32x2_t *)(v8 + 32);
  v21 = *(float32x2_t *)(v8 + 40);
  v22 = vmul_f32(vadd_f32(v20, v21), (float32x2_t)0x3F0000003F000000);
  v23 = vsub_f32(v21, v20);
  v24 = *(float32x2_t *)(v8 + 48);
  v25 = *(float32x2_t *)(v8 + 56);
  v26 = vmul_f32(vadd_f32(v24, v25), (float32x2_t)0x3F0000003F000000);
  v27 = vsub_f32(v25, v24);
  v29 = *(float32x2_t *)(v8 + 64);
  v28 = *(float32x2_t *)(v8 + 72);
  v30 = vsub_f32(v28, v29);
  v31 = vmul_f32(vadd_f32(v29, v28), (float32x2_t)0x3F0000003F000000);
  v32 = *(float32x2_t *)(v8 + 80);
  v33 = *(float32x2_t *)(v8 + 88);
  v34 = vmul_f32(vadd_f32(v32, v33), (float32x2_t)0x3F0000003F000000);
  v35 = vsub_f32(v33, v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
  v6 = (_QWORD *)swift_allocObject();
  *((_OWORD *)v6 + 1) = xmmword_23D9A7080;
  v6[4] = v22;
  v6[5] = v26;
  v6[6] = v31;
  v6[7] = v34;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A7080;
  *(float32x2_t *)(v7 + 32) = v23;
  *(float32x2_t *)(v7 + 40) = v27;
  *(float32x2_t *)(v7 + 48) = v30;
  *(float32x2_t *)(v7 + 56) = v35;
  swift_bridgeObjectRelease();
LABEL_18:
  v17 = (char *)v6;
  v18 = (void *)v7;
LABEL_34:
  result.size._rawValue = v18;
  result.center._rawValue = v17;
  return result;
}

uint64_t CenternetDetection2DComputePipeline.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CenternetDetection2DComputePipeline()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type CenterNetDetectionModelParams and conformance CenterNetDetectionModelParams()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelParams and conformance CenterNetDetectionModelParams;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelParams and conformance CenterNetDetectionModelParams)
  {
    v1 = type metadata accessor for CenterNetDetectionModelParams();
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelParams, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelParams and conformance CenterNetDetectionModelParams);
  }
  return result;
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.modelParams.getter in conformance CenternetDetection2DComputePipeline()
{
  return swift_retain();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.detectionModelEspresso.getter in conformance CenternetDetection2DComputePipeline@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of Detection2DComputePipelineProtocol(*v1 + 24, a1);
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.imageProcessor.getter in conformance CenternetDetection2DComputePipeline()
{
  return swift_retain();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getDepthOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getDepthOutput()(0x747065645F736D6ELL, 0xE900000000000068);
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.estimateDepthAndUvO(from:size2D:keypoints:boneLength:imageSize:) in conformance CenternetDetection2DComputePipeline()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getUvOOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getDepthOutput()(0x6F76755F736D6ELL, 0xE700000000000000);
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getNMSConfidenceOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getNMSConfidenceOutput()();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getChiralityScoreOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getDepthOutput()(0x726968635F736D6ELL, 0xEF73656974696C61);
}

_QWORD *protocol witness for Detection2DComputePipelineProtocol.getKeyPointsOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getKeyPointsOutput()();
}

void *protocol witness for Detection2DComputePipelineProtocol.getNMSBoxesOutput() in conformance CenternetDetection2DComputePipeline()
{
  return CenternetDetection2DComputePipeline.getNMSBoxesOutput()().center._rawValue;
}

__n128 PinchAcceptorHighIntentionMake.processAtPotentialMake(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  __n128 v11;
  __n128 result;
  __n128 v13;
  _OWORD v14[8];
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[7];
  __int128 v21;
  _BYTE v22[260];
  int v23;
  _BYTE v24[326];

  v3 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v3;
  v15 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v6;
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)v20 = *(_DWORD *)(a1 + 161);
  *(_DWORD *)&v20[3] = *(_DWORD *)(a1 + 164);
  v9 = *(_BYTE *)(a1 + 160);
  memcpy(v22, (const void *)(a1 + 184), sizeof(v22));
  v10 = *(_DWORD *)(a1 + 444);
  memcpy(v24, (const void *)(a1 + 448), sizeof(v24));
  swift_beginAccess();
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  PichAcceptorWithMakeCandidate.resetPinchBuffer()();
  *(_BYTE *)(v1 + 80) = 1;
  v11.n128_u64[0] = *(_QWORD *)(a1 + 136);
  v13 = v11;
  v16 = v11.n128_u64[0];
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v21 = *(_OWORD *)(a1 + 168);
  v23 = v10;
  PinchCandidateProcessor.assignMakeFrameCandidate(_:)((uint64_t)v14);
  *(_BYTE *)(v1 + 49) = 1;
  result = v13;
  *(_DWORD *)(v1 + 128) = v10;
  *(_DWORD *)(v1 + 132) = v13.n128_u32[0];
  return result;
}

uint64_t PinchAcceptorHighIntentionMake.processAtPotentialTouchFrame(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float *v35;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[7];
  __int128 v47;
  _BYTE v48[260];
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  float v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[26];

  v39 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_BYTE *)(a1 + 160);
  v38 = *(_OWORD *)(a1 + 168);
  v6 = *(float *)(a1 + 444);
  v7 = *(float *)(a1 + 536);
  result = swift_beginAccess();
  v9 = *(_QWORD *)(v1 + 72);
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    if (v11 >= 0x3E8)
      v11 = 1000;
    *(_QWORD *)(v1 + 72) = v11;
    v12 = *(_OWORD *)(a1 + 112);
    v40[6] = *(_OWORD *)(a1 + 96);
    v40[7] = v12;
    v41 = *(_QWORD *)(a1 + 128);
    v13 = *(_OWORD *)(a1 + 48);
    v40[2] = *(_OWORD *)(a1 + 32);
    v40[3] = v13;
    v14 = *(_OWORD *)(a1 + 80);
    v40[4] = *(_OWORD *)(a1 + 64);
    v40[5] = v14;
    v15 = *(_OWORD *)(a1 + 16);
    v40[0] = *(_OWORD *)a1;
    v40[1] = v15;
    v42 = v39;
    v43 = v3;
    v44 = v4;
    v45 = v5;
    *(_DWORD *)v46 = *(_DWORD *)(a1 + 161);
    *(_DWORD *)&v46[3] = *(_DWORD *)(a1 + 164);
    v47 = v38;
    memcpy(v48, (const void *)(a1 + 184), sizeof(v48));
    v49 = v6;
    v16 = *(_OWORD *)(a1 + 496);
    v52 = *(_OWORD *)(a1 + 480);
    v53 = v16;
    v54 = *(_OWORD *)(a1 + 512);
    v55 = *(_QWORD *)(a1 + 528);
    v17 = *(_OWORD *)(a1 + 464);
    v50 = *(_OWORD *)(a1 + 448);
    v51 = v17;
    v56 = v7;
    v18 = *(_OWORD *)(a1 + 556);
    v57 = *(_OWORD *)(a1 + 540);
    v58 = v18;
    v19 = *(_OWORD *)(a1 + 572);
    v20 = *(_OWORD *)(a1 + 588);
    v21 = *(_OWORD *)(a1 + 620);
    v61 = *(_OWORD *)(a1 + 604);
    v62 = v21;
    v59 = v19;
    v60 = v20;
    v22 = *(_OWORD *)(a1 + 636);
    v23 = *(_OWORD *)(a1 + 652);
    v24 = *(_OWORD *)(a1 + 684);
    v65 = *(_OWORD *)(a1 + 668);
    v66 = v24;
    v63 = v22;
    v64 = v23;
    v25 = *(_OWORD *)(a1 + 700);
    v26 = *(_OWORD *)(a1 + 716);
    *(_OWORD *)&v70[10] = *(_OWORD *)(a1 + 758);
    v27 = *(_OWORD *)(a1 + 748);
    v69 = *(_OWORD *)(a1 + 732);
    *(_OWORD *)v70 = v27;
    v67 = v25;
    v68 = v26;
    result = (uint64_t)PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)((uint64_t *)v40);
    if (v6 >= *(float *)(v1 + 128))
      v28 = *(float *)(v1 + 128);
    else
      v28 = v6;
    v29 = *(float *)&v39;
    if (*(float *)&v39 >= *(float *)(v1 + 132))
      v29 = *(float *)(v1 + 132);
    *(float *)(v1 + 128) = v28;
    *(float *)(v1 + 132) = v29;
    if (v28 >= *(float *)(v1 + 144))
    {
      v30 = *(_QWORD *)(v1 + 136);
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v32 = *(_QWORD *)(v1 + 152);
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = 0;
          v35 = (float *)(v30 + 32);
          v36 = (_QWORD *)(v32 + 32);
          v37 = v31 - 1;
          do
          {
            if (*v35 <= v28 && *(_QWORD *)(v1 + 72) >= *v36)
            {
              if (!v37)
                goto LABEL_22;
              v34 = 1;
            }
            else if (!v37)
            {
              break;
            }
            ++v36;
            ++v35;
            --v37;
            --v33;
          }
          while (v33);
          if ((v34 & 1) == 0)
            return result;
LABEL_22:
          if (v29 >= v7)
            *(_WORD *)(v1 + 33) = 257;
        }
      }
    }
    else
    {
      *(_BYTE *)(v1 + 64) = 0;
    }
  }
  return result;
}

uint64_t PinchAcceptorHighIntentionMake.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PinchAcceptorHighIntentionMake.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorHighIntentionMake()
{
  return objc_opt_self();
}

uint64_t destroy for PinchAcceptorHighIntentionMake.ThresholdConfig()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PinchAcceptorHighIntentionMake.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchAcceptorHighIntentionMake.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PinchAcceptorHighIntentionMake.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PinchAcceptorHighIntentionMake.ThresholdConfig()
{
  return &type metadata for PinchAcceptorHighIntentionMake.ThresholdConfig;
}

uint64_t specialized PinchAcceptorHighIntentionMake.ThresholdConfig.init(_:)(void *a1)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = objc_msgSend(a1, sel_OisPinchAcceptorHighIntentionMakeIntentionThresholds);
  type metadata accessor for NSNumber();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v25 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_29;
    }
    v7 = 0;
    v8 = v25;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x24263790C](v7, v3);
      else
        v9 = *(id *)(v3 + 8 * v7 + 32);
      v10 = v9;
      Float.init(truncating:)();
      v12 = v11;

      v14 = *(_QWORD *)(v25 + 16);
      v13 = *(_QWORD *)(v25 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      ++v7;
      *(_QWORD *)(v25 + 16) = v14 + 1;
      *(_DWORD *)(v25 + 4 * v14 + 32) = v12;
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(a1, sel_OisPinchAcceptorHighIntentionMakeMinTouchFrameToAllowMakes);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_16;
LABEL_27:
    swift_bridgeObjectRelease();
    specialized Sequence<>.min()(v8);
    swift_bridgeObjectRelease();

    return v8;
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17)
    goto LABEL_27;
LABEL_16:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = 0;
    v19 = v5;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x24263790C](v18, v16);
      else
        v20 = *(id *)(v16 + 8 * v18 + 32);
      v21 = v20;
      v22 = UInt.init(truncating:)();

      v24 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      if (v24 >= v23 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      ++v18;
      *(_QWORD *)(v19 + 16) = v24 + 1;
      *(_QWORD *)(v19 + 8 * v24 + 32) = v22;
    }
    while (v17 != v18);
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t EspressoCropProcessor.checkModelConfiguration(_:)(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void (*v11)(char *, uint64_t);
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v3 = EspressoCropProcessor.getVarianCroptModeName(_:)(a1);
  v5 = v4;
  if (v3 != *(_QWORD *)(v1 + 64) || v4 != *(void **)(v1 + 72))
  {
    v7 = v3;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      type metadata accessor for ModelUtils();
      v11 = static ModelUtils.getModelPath(modelDir:modelName:allowInternalModel:expectAbsolute:)(0xD000000000000021, (void *)0x800000023D9CF5E0, v7, v5, *(unsigned __int8 *)(v2 + 58), 0);
      v13 = v12;
      v14 = v10;
      specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v14, (uint64_t)v11, v13, MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
      v16 = v15;

      *(_QWORD *)(v2 + 16) = v16;
      swift_release();
      *(_QWORD *)(v2 + 64) = v7;
      *(_QWORD *)(v2 + 72) = v5;
    }
  }
  return swift_bridgeObjectRelease();
}

void EspressoCropProcessor.doCrop(_:_:)(uint64_t a1, int32x4_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  __int16 BytesPerRow;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  IOSurfaceRef IOSurface;
  __IOSurface *v12;
  Swift::String v13;
  void *v14;
  void *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  void *v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  Swift::String v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __CVBuffer *v44;
  void *v45;
  uint64_t v46;
  IOSurfaceRef v47;
  __IOSurface *v48;
  Swift::String v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = *(void **)(a1 + 56);
  if (!v3)
    return;
  v4 = v2;
  v53 = *a2;
  v54 = a2[1];
  v55 = a2[2];
  v5 = *(_QWORD *)(a1 + 64);
  v6 = v3;
  BytesPerRow = CVPixelBufferGetBytesPerRow(v6);
  EspressoCropProcessor.checkModelConfiguration(_:)(BytesPerRow);
  CVPixelBufferLockBaseAddress(v6, 0);
  if (!*(_QWORD *)(v2 + 16))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v8 = *(_QWORD **)(v2 + 24);
  if (!v8[2])
  {
    __break(1u);
    goto LABEL_40;
  }
  v9 = v8[4];
  v10 = (void *)v8[5];
  swift_bridgeObjectRetain();
  swift_retain();
  IOSurface = CVPixelBufferGetIOSurface(v6);
  if (IOSurface)
  {
    v12 = IOSurface;
    v13._countAndFlagsBits = v9;
    v13._object = v10;
    E5RTRegressor.setInput(_:fromIOSurface:)(v13, v12);
    if (v14)
    {
      swift_bridgeObjectRelease();
      swift_release();

LABEL_16:
      CVPixelBufferUnlockBaseAddress(v6, 0);
      v59.i64[0] = 0;
      v59.i64[1] = 0xE000000000000000;
      v35._countAndFlagsBits = 0x203D20726F727265;
      v35._object = (void *)0xE800000000000000;
      String.append(_:)(v35);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v60.i64[1] = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v56 = xmmword_23D9B16F0;
      v57 = 0;
      v58 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v56, 0xD000000000000072, 0x800000023D9CF530, 72, (uint64_t)&v59, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
      v36 = 0;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  v15 = (void *)objc_opt_self();
  swift_beginAccess();
  objc_msgSend(v15, sel_shiftIntrinsics_, *(double *)(v5 + 64), *(double *)(v5 + 80), *(double *)(v5 + 96));
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_48;
  if (v8[2] < 2uLL)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v20 = v8[6];
  v19 = (void *)v8[7];
  v21 = vzip1q_s32(v16, v18);
  v22 = vzip1q_s32(v17, (int32x4_t)0);
  v23 = vzip1q_s32(v21, v22);
  v24 = vzip2q_s32(v21, v22);
  v23.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v18, 0).i32[2];
  v24.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v18, 1).i32[2];
  v25 = vzip1q_s32(vdupq_laneq_s32(v16, 2), vdupq_laneq_s32(v17, 2));
  v25.i32[2] = v18.i32[2];
  v59 = v23;
  v60 = v24;
  v61 = v25;
  swift_retain();
  swift_bridgeObjectRetain();
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(v20, v19, v59.i8, 16, 12, 3, 0, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_49;
  if (v8[2] < 3uLL)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v27 = v8[8];
  v26 = (void *)v8[9];
  v59 = *(int32x4_t *)(v5 + 112);
  swift_retain();
  swift_bridgeObjectRetain();
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(v27, v26, v59.i8, 16, 16, 1, 0, 0);
  swift_bridgeObjectRelease();
  swift_release();
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_50;
  if (v8[2] < 4uLL)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v29 = v8[10];
  v28 = (void *)v8[11];
  v30 = vzip1q_s32(v53, v55);
  v31 = vzip1q_s32(v54, (int32x4_t)0);
  v32 = vzip1q_s32(v30, v31);
  v33 = vzip2q_s32(v30, v31);
  v32.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v55, 0).i32[2];
  v33.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v55, 1).i32[2];
  v34 = vzip1q_s32(vdupq_laneq_s32(v53, 2), vdupq_laneq_s32(v54, 2));
  v34.i32[2] = v55.i32[2];
  v59 = v32;
  v60 = v33;
  v61 = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(v29, v28, v59.i8, 16, 12, 3, 0, 0);
  swift_bridgeObjectRelease();
  swift_release();
  if ((*(_BYTE *)(v4 + 56) & 1) != 0)
  {
    swift_beginAccess();
    v43 = *(void **)(v5 + 136);
    if (!v43)
    {
      v60.i64[1] = MEMORY[0x24BEE0D00];
      v59.i64[0] = 0xD000000000000021;
      v59.i64[1] = 0x800000023D9CF5B0;
      type metadata accessor for HandyLoggerNeo();
      v56 = xmmword_23D9A6CC0;
      v57 = 0;
      v58 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v56, 0xD000000000000072, 0x800000023D9CF530, 61, (uint64_t)&v59, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
      CVPixelBufferUnlockBaseAddress(v6, 0);

      return;
    }
    v44 = v43;
    CVPixelBufferLockBaseAddress(v44, 0);
    if (!*(_QWORD *)(v4 + 16))
      goto LABEL_52;
    if (v8[2] < 5uLL)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
    v46 = v8[12];
    v45 = (void *)v8[13];
    swift_bridgeObjectRetain();
    swift_retain();
    v47 = CVPixelBufferGetIOSurface(v44);
    if (v47)
    {
      v48 = v47;
      v49._countAndFlagsBits = v46;
      v49._object = v45;
      E5RTRegressor.setInput(_:fromIOSurface:)(v49, v48);
      if (v14)
      {
        swift_bridgeObjectRelease();
        swift_release();

        CVPixelBufferUnlockBaseAddress(v44, 0);
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      swift_release();

    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    CVPixelBufferUnlockBaseAddress(v44, 0);

  }
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_retain();
  specialized E5RTRegressor.runNetwork(_:)();
  swift_release();
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_53:
    __break(1u);
    return;
  }
  v50 = *(_QWORD **)(v4 + 32);
  if (!v50[2])
    goto LABEL_46;
  v51 = v50[4];
  v52 = (void *)v50[5];
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = E5RTRegressor.getRawOutput(_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_release();
  CVPixelBufferUnlockBaseAddress(v6, 0);
LABEL_17:
  v37 = *(_QWORD *)(v4 + 40);
  if ((unint64_t)(v37 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v38 = 4 * v37;
  v39 = *(_QWORD *)(v4 + 48);
  v40 = 4 * v37 * v39;
  if ((unsigned __int128)(v38 * (__int128)v39) >> 64 != v40 >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v41 = v36 + v40;
  if (v36)
    v42 = v41;
  else
    v42 = 0;
  specialized Data.init<A>(_:)(v36, v42);

}

uint64_t EspressoCropProcessor.getVarianCroptModeName(_:)(__int16 a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  if (*(_BYTE *)(v1 + 56) == 1)
  {
    v3._countAndFlagsBits = 0x7261775F656E615FLL;
    v3._object = (void *)0xEB00000000726570;
    String.append(_:)(v3);
  }
  if (*(_BYTE *)(v1 + 57) == 1)
  {
    v4._countAndFlagsBits = 808728159;
    v4._object = (void *)0xE400000000000000;
    String.append(_:)(v4);
  }
  if ((a1 & 0x3FF) == 0)
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 29535;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  return 0x726F747369646E75;
}

uint64_t EspressoCropProcessor.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EspressoCropProcessor()
{
  return objc_opt_self();
}

void protocol witness for ImageCropProcessor.doCrop(_:_:) in conformance EspressoCropProcessor(uint64_t a1, int32x4_t *a2)
{
  EspressoCropProcessor.doCrop(_:_:)(a1, a2);
}

uint64_t specialized EspressoCropProcessor.init(config:cropWidth:cropHeight:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;

  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = &outlined read-only object #0 of EspressoCropProcessor.init(config:cropWidth:cropHeight:);
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  v5 = objc_msgSend(a1, sel_PoseCropMode);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (v6 == 0x47435F454E41 && v8 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v3 + 56) = v10 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9A7080;
  *(_QWORD *)(v11 + 32) = 0x305F7364726F6F63;
  *(_QWORD *)(v11 + 40) = 0xE900000000000078;
  *(_QWORD *)(v11 + 48) = 0xD000000000000014;
  *(_QWORD *)(v11 + 56) = 0x800000023D9C3800;
  *(_QWORD *)(v11 + 64) = 0xD000000000000011;
  *(_QWORD *)(v11 + 72) = 0x800000023D9C3840;
  *(_QWORD *)(v11 + 80) = 0xD000000000000015;
  *(_QWORD *)(v11 + 88) = 0x800000023D9C3820;
  if ((v10 & 1) != 0)
  {
    v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 5, 1, (_QWORD *)v11);
    *(_QWORD *)(v11 + 16) = 5;
    *(_QWORD *)(v11 + 96) = 0xD00000000000001ELL;
    *(_QWORD *)(v11 + 104) = 0x800000023D9C3C40;
  }
  *(_QWORD *)(v3 + 24) = v11;
  v12 = objc_msgSend(a1, sel_Enable640Mode);
  *(_BYTE *)(v3 + 57) = v12;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0xE000000000000000;
  *(_BYTE *)(v3 + 58) = objc_msgSend(a1, sel_AllowInternalModel);
  if (v12)
    v13 = 1024;
  else
    v13 = 2048;
  EspressoCropProcessor.checkModelConfiguration(_:)(v13);
  return v3;
}

Swift::Void __swiftcall PinchAcceptorSelectionAtBreak.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = v1;
  *(_QWORD *)(v0 + 120) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = v1;
  *(_QWORD *)(v0 + 120) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 56);
  *(_DWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

void PinchAcceptorSelectionAtBreak.processAtPotentialTouchFrame(_:)(const void *a1)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6[98];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 72);
  v4 = __CFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if (v5 >= 0x3E8)
      v5 = 1000;
    *(_QWORD *)(v1 + 72) = v5;
    memcpy(v6, a1, 0x306uLL);
    PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)(v6);
    if (*(_BYTE *)(v1 + 80) == 1
      && PinchAcceptorSelectionAtBreak.getCandidateStatus(_:)((uint64_t)a1) != 6)
    {
      PichAcceptorWithMakeCandidate.resetPinchBuffer()();
    }
  }
}

uint64_t PinchAcceptorSelectionAtBreak.getCandidateStatus(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  __int128 v26;
  _OWORD v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[7];
  __int128 v34;
  _BYTE v35[356];
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];

  v3 = *(_QWORD *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_BYTE *)(a1 + 160);
  v26 = *(_OWORD *)(a1 + 168);
  v7 = *(float *)(a1 + 540);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 72);
  if (v8 == 1)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v9 = specialized Sequence<>.min()(v4);
      if ((v9 & 0x100000000) == 0 && (float)(1.0 - v7) < *(float *)&v9)
        return 1;
    }
  }
  if (v8 >= *(_QWORD *)(v1 + 128))
    return 2;
  v11 = *(_OWORD *)(a1 + 112);
  v27[6] = *(_OWORD *)(a1 + 96);
  v27[7] = v11;
  v28 = *(_QWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v12;
  v13 = *(_OWORD *)(a1 + 80);
  v27[4] = *(_OWORD *)(a1 + 64);
  v27[5] = v13;
  v14 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v14;
  v29 = v3;
  v30 = v4;
  v31 = v5;
  v32 = v6;
  *(_DWORD *)v33 = *(_DWORD *)(a1 + 161);
  *(_DWORD *)&v33[3] = *(_DWORD *)(a1 + 164);
  v34 = v26;
  memcpy(v35, (const void *)(a1 + 184), sizeof(v35));
  v36 = v7;
  *(_QWORD *)&v50[14] = *(_QWORD *)(a1 + 766);
  v15 = *(_OWORD *)(a1 + 752);
  v49 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)v50 = v15;
  v16 = *(_OWORD *)(a1 + 688);
  v45 = *(_OWORD *)(a1 + 672);
  v46 = v16;
  v17 = *(_OWORD *)(a1 + 720);
  v47 = *(_OWORD *)(a1 + 704);
  v48 = v17;
  v18 = *(_OWORD *)(a1 + 624);
  v41 = *(_OWORD *)(a1 + 608);
  v42 = v18;
  v19 = *(_OWORD *)(a1 + 656);
  v43 = *(_OWORD *)(a1 + 640);
  v44 = v19;
  v20 = *(_OWORD *)(a1 + 560);
  v37 = *(_OWORD *)(a1 + 544);
  v38 = v20;
  v21 = *(_OWORD *)(a1 + 592);
  v39 = *(_OWORD *)(a1 + 576);
  v40 = v21;
  v22 = *(_QWORD *)(v1 + 56);
  *(float32x2_t *)v23.f32 = vsub_f32(COERCE_FLOAT32X2_T(specialized static PinchGestureHelper.updatePinchCentroidFromPinchFrameFeatures(_:_:_:)((uint64_t)v27, *(float32x4_t *)(v22 + 112), *(float32x4_t *)(v22 + 128))), *(float32x2_t *)(v22 + 96));
  v23.f32[2] = v24 - *(float *)(v22 + 104);
  v25 = vmulq_f32(v23, v23);
  if (*(float *)(v1 + 136) >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]))return 6;
  else
    return 5;
}

uint64_t PinchAcceptorSelectionAtBreak.processAtPotentialNoTouchFrame(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 88);
  v7 = __CFADD__(v4, 1);
  v5 = v4 + 1;
  if (v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v1 + 144);
  if (v6 == -1)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v6 + 1 < v5)
    v5 = v6 + 1;
  *(_QWORD *)(v1 + 88) = v5;
  v7 = *(_BYTE *)(v1 + 80) == 1 && v6 >= v5;
  if (v7)
  {
    result = PinchAcceptorSelectionAtBreak.checkSelectionRecoveryConditions(_:)(a1);
    if (result == 14)
      *(_WORD *)(v1 + 33) = 257;
  }
  return result;
}

uint64_t PinchAcceptorSelectionAtBreak.checkSelectionRecoveryConditions(_:)(uint64_t result)
{
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float32x4_t v49;
  __int128 v50;
  _OWORD v51[8];
  uint64_t v52;
  int v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _BYTE v58[7];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  float v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  float v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _BYTE v98[22];

  v2 = *(float *)(result + 368);
  v3 = *(float *)(result + 540);
  if ((float)(1.0 - v3) <= v2)
    return 1;
  v4 = result;
  v5 = *(float *)(result + 140);
  if (*(float *)(v1 + 172) <= v5)
    return 2;
  v6 = *(_QWORD *)(v1 + 152);
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v7 = *(_QWORD *)(v1 + 160);
  if (v7 < 0)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v8 = *(_DWORD *)(result + 136);
  v9 = *(_QWORD *)(result + 144);
  v10 = *(_QWORD *)(result + 152);
  v11 = *(_BYTE *)(result + 160);
  v50 = *(_OWORD *)(result + 168);
  if ((specialized static PinchGestureHelper.checkPrevRawActionScores(_:_:_:_:)(v9, v6, v7, *(float *)(v1 + 168)) & 1) == 0)
    return 3;
  swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 120);
  if (!*(_QWORD *)(v12 + 16))
    return 4;
  v13 = specialized Sequence<>.min()(v12);
  if ((v13 & 0x100000000) != 0 || *(float *)(v1 + 176) <= *(float *)&v13)
    return 4;
  v14 = *(_QWORD *)(v1 + 104);
  if (!*(_QWORD *)(v14 + 16))
    return 5;
  v15 = specialized Sequence<>.max()(v14);
  if ((v15 & 0x100000000) != 0 || *(float *)(v1 + 180) <= *(float *)&v15)
    return 5;
  v16 = *(_QWORD *)(v1 + 112);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    v20 = 0.0;
    goto LABEL_27;
  }
  if (v17 == 1)
  {
    v18 = 0;
    v19 = 0.0;
  }
  else
  {
    v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
    v21 = (float *)(v16 + 36);
    v19 = 0.0;
    v22 = v17 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v19 = (float)(v19 + *(v21 - 1)) + *v21;
      v21 += 2;
      v22 -= 2;
    }
    while (v22);
    if (v17 == v18)
      goto LABEL_26;
  }
  v23 = v17 - v18;
  v24 = (float *)(v16 + 4 * v18 + 32);
  do
  {
    v25 = *v24++;
    v19 = v19 + v25;
    --v23;
  }
  while (v23);
LABEL_26:
  v20 = v19 / (float)v17;
LABEL_27:
  if (*(float *)(v1 + 184) <= v20)
    return 6;
  v26 = *(_OWORD *)(v4 + 112);
  v51[6] = *(_OWORD *)(v4 + 96);
  v51[7] = v26;
  v52 = *(_QWORD *)(v4 + 128);
  v27 = *(_OWORD *)(v4 + 48);
  v51[2] = *(_OWORD *)(v4 + 32);
  v51[3] = v27;
  v28 = *(_OWORD *)(v4 + 80);
  v51[4] = *(_OWORD *)(v4 + 64);
  v51[5] = v28;
  v29 = *(_OWORD *)(v4 + 16);
  v51[0] = *(_OWORD *)v4;
  v51[1] = v29;
  v53 = v8;
  v54 = v5;
  v55 = v9;
  v56 = v10;
  v57 = v11;
  *(_DWORD *)v58 = *(_DWORD *)(v4 + 161);
  *(_DWORD *)&v58[3] = *(_DWORD *)(v4 + 164);
  v59 = v50;
  v30 = *(_OWORD *)(v4 + 312);
  v31 = *(_OWORD *)(v4 + 344);
  v69 = *(_OWORD *)(v4 + 328);
  v70 = v31;
  v32 = *(_OWORD *)(v4 + 280);
  v33 = *(_OWORD *)(v4 + 296);
  v34 = *(_OWORD *)(v4 + 248);
  v65 = *(_OWORD *)(v4 + 264);
  v66 = v32;
  v67 = v33;
  v68 = v30;
  v71 = *(_QWORD *)(v4 + 360);
  v64 = v34;
  v35 = *(_OWORD *)(v4 + 200);
  v60 = *(_OWORD *)(v4 + 184);
  v61 = v35;
  v36 = *(_OWORD *)(v4 + 232);
  v62 = *(_OWORD *)(v4 + 216);
  v63 = v36;
  v72 = v2;
  v37 = *(_OWORD *)(v4 + 516);
  v81 = *(_OWORD *)(v4 + 500);
  v82 = v37;
  v83 = *(_QWORD *)(v4 + 532);
  v38 = *(_OWORD *)(v4 + 452);
  v77 = *(_OWORD *)(v4 + 436);
  v78 = v38;
  v39 = *(_OWORD *)(v4 + 484);
  v79 = *(_OWORD *)(v4 + 468);
  v80 = v39;
  v40 = *(_OWORD *)(v4 + 388);
  v73 = *(_OWORD *)(v4 + 372);
  v74 = v40;
  v41 = *(_OWORD *)(v4 + 420);
  v75 = *(_OWORD *)(v4 + 404);
  v76 = v41;
  v84 = v3;
  *(_QWORD *)&v98[14] = *(_QWORD *)(v4 + 766);
  v42 = *(_OWORD *)(v4 + 752);
  v97 = *(_OWORD *)(v4 + 736);
  *(_OWORD *)v98 = v42;
  v43 = *(_OWORD *)(v4 + 688);
  v93 = *(_OWORD *)(v4 + 672);
  v94 = v43;
  v44 = *(_OWORD *)(v4 + 720);
  v95 = *(_OWORD *)(v4 + 704);
  v96 = v44;
  v45 = *(_OWORD *)(v4 + 624);
  v89 = *(_OWORD *)(v4 + 608);
  v90 = v45;
  v46 = *(_OWORD *)(v4 + 656);
  v91 = *(_OWORD *)(v4 + 640);
  v92 = v46;
  v47 = *(_OWORD *)(v4 + 560);
  v85 = *(_OWORD *)(v4 + 544);
  v86 = v47;
  v48 = *(_OWORD *)(v4 + 592);
  v87 = *(_OWORD *)(v4 + 576);
  v88 = v48;
  specialized static PinchGestureHelper.getIndexTipToThumbTipVectorFromPinchFrameFeatures(_:)((uint64_t)v51);
  if (specialized static PinchGestureHelper.similarity(_:_:)(*(float32x4_t *)(*(_QWORD *)(v1 + 56) + 144), v49) > *(float *)(v1 + 188))
    return 14;
  else
    return 7;
}

uint64_t PinchAcceptorSelectionAtBreak.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorSelectionAtBreak()
{
  return objc_opt_self();
}

unint64_t closure #1 in OISExitReasonAnalytics.sendCoreAnalytics()(uint64_t a1)
{
  uint64_t inited;
  NSNumber v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v3.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v11 = specialized static StatisticUtils.Location3DBucket.allCases.getter((uint64_t)v3.super.super.isa, v8, v9, v10);
  specialized Collection<>.firstIndex(of:)(v4, v5, v6, v7, (uint64_t)v11);
  swift_bridgeObjectRelease();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x6F69746E65746E69;
  *(_QWORD *)(inited + 88) = 0xEF65726F63735F6ELL;
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0x6165725F74697865;
  *(_QWORD *)(inited + 112) = 0xEB000000006E6F73;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v19 = xmmword_23D9A8B80;
  v20 = 0;
  v21 = 0;
  v13 = *(_QWORD *)(a1 + 72);
  v18[0] = *(_QWORD *)(a1 + 64);
  v18[1] = v13;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 8250;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  type metadata accessor for NSObject();
  v15 = MEMORY[0x24BEE0D00];
  v16._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v18[3] = v15;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000007BLL, 0x800000023D9CF7A0, 39, (uint64_t *)&v19, (uint64_t)v18, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  return v12;
}

uint64_t OISExitReasonAnalytics.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OISExitReasonAnalytics()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ObjectCoreAnalytics.sendCoreAnalyticsDataOIH()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD v5[6];

  v1 = v0[14] & ~((uint64_t)v0[14] >> 63);
  v2 = (void *)MEMORY[0x2426372E8](v0[2], v0[3]);
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = v0;
  v3[3] = v1;
  v3[4] = 8;
  v3[5] = 0;
  v5[4] = partial apply for closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIH();
  v5[5] = v3;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v5[3] = &block_descriptor_11;
  v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v4);

  v0[14] = 0;
  v0[27] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
}

unint64_t closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIH()(_QWORD *a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  v3 = a1[7];
  *(_QWORD *)(inited + 32) = a1[6];
  *(_QWORD *)(inited + 40) = v3;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v4 = a1[9];
  *(_QWORD *)(inited + 56) = a1[8];
  *(_QWORD *)(inited + 64) = v4;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v12 = xmmword_23D9A8B80;
  v13 = 0;
  v14 = 0;
  v6 = a1[3];
  v11[0] = a1[2];
  v11[1] = v6;
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  type metadata accessor for NSObject();
  v8 = MEMORY[0x24BEE0D00];
  v9._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v11[3] = v8;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000007BLL, 0x800000023D9CF7A0, 105, (uint64_t *)&v12, (uint64_t)v11, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  return v5;
}

Hands::ObjectAnalyticsData __swiftcall ObjectCoreAnalytics.getCoreAnalyticsDataOIS(_:)(Hands::PinchEventType a1)
{
  float32x2_t *v1;
  CMTimeValue v3;
  CMTimeScale v4;
  CMTimeFlags v5;
  CMTimeEpoch v6;
  CMTimeValue v7;
  CMTimeScale v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  float32x4_t v11;
  double Seconds;
  float v13;
  float v14;
  Swift::Int v15;
  float32x4_t v16;
  float v17;
  Swift::Int v18;
  CMTime time;
  Hands::ObjectAnalyticsData result;

  v3 = (CMTimeValue)v1[20];
  v4 = v1[21].i32[0];
  v5 = v1[21].u32[1];
  v6 = (CMTimeEpoch)v1[22];
  v7 = (CMTimeValue)v1[15];
  v8 = v1[16].i32[0];
  v9 = v1[16].u32[1];
  v10 = (CMTimeEpoch)v1[17];
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = v3;
    time.timescale = v4;
    time.flags = v5;
    time.epoch = v6;
    Seconds = CMTimeGetSeconds(&time);
    time.value = v7;
    time.timescale = v8;
    time.flags = v9;
    time.epoch = v10;
    v13 = Seconds - CMTimeGetSeconds(&time);
    v14 = fabsf(v13);
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = a1;
  *(float32x2_t *)v11.f32 = vsub_f32(v1[24], v1[18]);
  v11.f32[2] = v1[25].f32[0] - v1[19].f32[0];
  v16 = vmulq_f32(v11, v11);
  v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]);
  v18 = 0;
  result.pinchEventType = v15;
  result.suppressedFrames = v18;
  result.pinchMovement = v17;
  result.pinchDuration = v14;
  return result;
}

unint64_t closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIS(_:_:)(_QWORD *a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v3 = a1[5];
  *(_QWORD *)(inited + 32) = a1[4];
  *(_QWORD *)(inited + 40) = v3;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v4 = a1[9];
  *(_QWORD *)(inited + 56) = a1[8];
  *(_QWORD *)(inited + 64) = v4;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  v5 = a1[11];
  *(_QWORD *)(inited + 80) = a1[10];
  *(_QWORD *)(inited + 88) = v5;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  v6 = a1[13];
  *(_QWORD *)(inited + 104) = a1[12];
  *(_QWORD *)(inited + 112) = v6;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 120) = Float._bridgeToObjectiveC()();
  v7 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v14 = xmmword_23D9A8B80;
  v15 = 0;
  v16 = 0;
  v8 = a1[3];
  v13[0] = a1[2];
  v13[1] = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  type metadata accessor for NSObject();
  v10 = MEMORY[0x24BEE0D00];
  v11._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v13[3] = v10;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000007BLL, 0x800000023D9CF7A0, 130, (uint64_t *)&v14, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  return v7;
}

uint64_t ObjectCoreAnalytics.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObjectCoreAnalytics()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ObjectAnalyticsData()
{
  return &type metadata for ObjectAnalyticsData;
}

uint64_t destroy for ObjectCoreAnalytics.ObjectCoreAnalyticsField()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ObjectCoreAnalytics.ObjectCoreAnalyticsField(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ObjectCoreAnalytics.ObjectCoreAnalyticsField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_QWORD *assignWithTake for ObjectCoreAnalytics.ObjectCoreAnalyticsField(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCoreAnalytics.ObjectCoreAnalyticsField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectCoreAnalytics.ObjectCoreAnalyticsField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectCoreAnalytics.ObjectCoreAnalyticsField()
{
  return &type metadata for ObjectCoreAnalytics.ObjectCoreAnalyticsField;
}

uint64_t sub_23D7EBE3C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIH()()
{
  uint64_t v0;

  return closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIH()(*(_QWORD **)(v0 + 16));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t specialized ObjectCoreAnalytics.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v1 + 24) = 0x800000023D9CC910;
  *(_QWORD *)(v1 + 32) = 0x7466656C5F7369;
  *(_QWORD *)(v1 + 40) = 0xE700000000000000;
  *(_QWORD *)(v1 + 48) = 0xD000000000000011;
  *(_QWORD *)(v1 + 56) = 0x800000023D9CF820;
  *(_QWORD *)(v1 + 64) = 0xD000000000000010;
  *(_QWORD *)(v1 + 72) = 0x800000023D9CCB80;
  strcpy((char *)(v1 + 80), "duration_secs");
  *(_WORD *)(v1 + 94) = -4864;
  v2 = (uint64_t *)MEMORY[0x24BDC0D88];
  *(_QWORD *)(v1 + 96) = 0xD000000000000020;
  *(_QWORD *)(v1 + 104) = 0x800000023D9CCC00;
  v3 = *v2;
  v4 = *((_DWORD *)v2 + 2);
  v5 = *((_DWORD *)v2 + 3);
  v6 = v2[2];
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = v3;
  *(_DWORD *)(v1 + 128) = v4;
  *(_DWORD *)(v1 + 132) = v5;
  *(_QWORD *)(v1 + 136) = v6;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_QWORD *)(v1 + 160) = v3;
  *(_DWORD *)(v1 + 168) = v4;
  *(_DWORD *)(v1 + 172) = v5;
  *(_QWORD *)(v1 + 176) = v6;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_BYTE *)(v1 + 208) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 216) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 208) = objc_msgSend(a1, sel_EnableCoreAnalytics);
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 216) = v7;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(uint64_t a1)
{
  return RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(a1, &demangling cache variable for type metadata for MissedPinchStatePB?, type metadata accessor for MissedPinchStatePB, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState);
}

uint64_t RecoverRepetitivePinchInternalDataPB.missedPinchByBreakState.setter(uint64_t a1)
{
  return RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(a1, &demangling cache variable for type metadata for MissedPinchStatePB?, type metadata accessor for MissedPinchStatePB, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState);
}

uint64_t RecoverRepetitivePinchInternalDataPB.scrollData.setter(uint64_t a1)
{
  return RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(a1, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData);
}

uint64_t RecoverRepetitivePinchInternalDataPB.tapData.setter(uint64_t a1)
{
  return RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(a1, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData);
}

uint64_t RecoverRepetitivePinchInternalDataPB.pinchData.setter(uint64_t a1)
{
  return RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(a1, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData);
}

uint64_t RecoverRepetitivePinchInternalDataPB.missedPinchState.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for RecoverRepetitivePinchInternalDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(0);
    swift_allocObject();
    v18 = swift_retain();
    *(_QWORD *)(v4 + v17) = RecoverRepetitivePinchInternalDataPB._StorageClass.init(copying:)(v18);
    swift_release();
  }
  v19 = *(_QWORD *)(v4 + v17);
  outlined init with take of Matrix2dPB(a1, (uint64_t)v16, a3);
  v20 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 0, 1, v20);
  outlined init with take of ImageData?((uint64_t)v16, (uint64_t)v12, a2);
  v21 = v19 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v12, v21, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t RecoverRepetitivePinchInternalDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedPinchStatePB?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  v12 = type metadata accessor for MissedPinchStatePB(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
  v13(v1+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState, 1, 1, v12);
  v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch) = 0;
  v16 = v1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
  v17 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v29 = v1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
  v18();
  v30 = v1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
  v18();
  v19 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v19, (uint64_t)v10, &demangling cache variable for type metadata for MissedPinchStatePB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v10, v11, &demangling cache variable for type metadata for MissedPinchStatePB?);
  swift_endAccess();
  v20 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v20, (uint64_t)v10, &demangling cache variable for type metadata for MissedPinchStatePB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v10, v14, &demangling cache variable for type metadata for MissedPinchStatePB?);
  swift_endAccess();
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  swift_beginAccess();
  *v15 = (_BYTE)v21;
  v22 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v22, (uint64_t)v6, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v16, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  swift_endAccess();
  v23 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v23, (uint64_t)v6, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  v24 = v29;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v24, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  swift_endAccess();
  v25 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v25, (uint64_t)v6, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  swift_release();
  v26 = v30;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v26, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  swift_endAccess();
  return v1;
}

uint64_t RecoverRepetitivePinchInternalDataPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState, &demangling cache variable for type metadata for MissedPinchStatePB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState, &demangling cache variable for type metadata for MissedPinchStatePB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RecoverRepetitivePinchInternalDataPB._StorageClass()
{
  return type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(0);
}

uint64_t type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RecoverRepetitivePinchInternalDataPB._StorageClass);
}

void type metadata completion function for RecoverRepetitivePinchInternalDataPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MissedPinchStatePB?, (void (*)(uint64_t))type metadata accessor for MissedPinchStatePB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, (void (*)(uint64_t))type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for MissedPinchStatePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MissedPinchStatePB);
}

uint64_t type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int (*v30)(_DWORD *, uint64_t, uint64_t);
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (_OWORD *)((char *)v4 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v31 = v16;
      *v13 = *v14;
      v11((char *)v13 + v15[6], (char *)v14 + v15[6], v10);
      v19 = v15[7];
      v20 = (_DWORD *)((char *)v13 + v19);
      v21 = (_DWORD *)((char *)v14 + v19);
      v22 = type metadata accessor for CMTimeProtobuf(0);
      v23 = *(_QWORD *)(v22 - 8);
      v30 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48);
      if (v30(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v20[2] = v21[2];
        v11((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v10);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v25 = v15[8];
      v26 = (_DWORD *)((char *)v13 + v25);
      v27 = (_DWORD *)((char *)v14 + v25);
      if (v30(v27, 1, v22))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v26 = *(_QWORD *)v27;
        v26[2] = v27[2];
        v11((char *)v26 + *(int *)(v22 + 24), (char *)v27 + *(int *)(v22 + 24), v10);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v31 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t type metadata accessor for PinchRecoveryAnalyticsDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchRecoveryAnalyticsDataPB);
}

uint64_t destroy for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v13(v6 + v7[6], v5);
    v9 = v6 + v7[7];
    v10 = type metadata accessor for CMTimeProtobuf(0);
    v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
    if (!v11(v9, 1, v10))
      v13(v9 + *(int *)(v10 + 24), v5);
    v12 = v6 + v7[8];
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12 + *(int *)(v10 + 24), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int (*v28)(_DWORD *, uint64_t, uint64_t);
  uint64_t v29;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v29 = v15;
    *v12 = *v13;
    v10((char *)v12 + v14[6], (char *)v13 + v14[6], v9);
    v17 = v14[7];
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CMTimeProtobuf(0);
    v21 = *(_QWORD *)(v20 - 8);
    v28 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48);
    if (v28(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v14[8];
    v24 = (_DWORD *)((char *)v12 + v23);
    v25 = (_DWORD *)((char *)v13 + v23);
    if (v28(v25, 1, v20))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[2] = v25[2];
      v10((char *)v24 + *(int *)(v20 + 24), (char *)v25 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v29 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  void (*__src)(char *, char *, uint64_t);
  char *__srca;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchRecoveryAnalyticsDataPB);
      goto LABEL_7;
    }
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
    v11(&v13[v15[6]], &v14[v15[6]], v9);
    v28 = v15[7];
    v29 = &v13[v28];
    __srca = &v14[v28];
    v30 = type metadata accessor for CMTimeProtobuf(0);
    v46 = *(_QWORD *)(v30 - 8);
    v47 = (uint64_t)v29;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    LODWORD(v29) = v31(v29, 1, v30);
    v32 = v31(__srca, 1, v30);
    if ((_DWORD)v29)
    {
      if (!v32)
      {
        *(_QWORD *)v47 = *(_QWORD *)__srca;
        *(_DWORD *)(v47 + 8) = *((_DWORD *)__srca + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v47 + *(int *)(v30 + 24), &__srca[*(int *)(v30 + 24)], v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v30);
        goto LABEL_23;
      }
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v34 = (void *)v47;
    }
    else
    {
      if (!v32)
      {
        *(_QWORD *)v47 = *(_QWORD *)__srca;
        *(_DWORD *)(v47 + 8) = *((_DWORD *)__srca + 2);
        v11((char *)(v47 + *(int *)(v30 + 24)), &__srca[*(int *)(v30 + 24)], v9);
        goto LABEL_23;
      }
      outlined destroy of Matrix3x3PB(v47, type metadata accessor for CMTimeProtobuf);
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v34 = (void *)v47;
    }
    memcpy(v34, __srca, v33);
LABEL_23:
    v41 = v15[8];
    v42 = (uint64_t)&v13[v41];
    v43 = &v14[v41];
    v44 = v31((char *)v42, 1, v30);
    v45 = v31(v43, 1, v30);
    if (v44)
    {
      if (!v45)
      {
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_DWORD *)(v42 + 8) = *((_DWORD *)v43 + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v42 + *(int *)(v30 + 24), &v43[*(int *)(v30 + 24)], v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v30);
        return a1;
      }
    }
    else
    {
      if (!v45)
      {
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_DWORD *)(v42 + 8) = *((_DWORD *)v43 + 2);
        v11((char *)(v42 + *(int *)(v30 + 24)), &v43[*(int *)(v30 + 24)], v9);
        return a1;
      }
      outlined destroy of Matrix3x3PB(v42, type metadata accessor for CMTimeProtobuf);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                - 8)
                    + 64);
    v26 = (void *)v42;
    v27 = v43;
    goto LABEL_8;
  }
  if (v18)
  {
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?)
                                - 8)
                    + 64);
    v26 = v13;
    v27 = v14;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  __src = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  __src(&v13[v15[6]], &v14[v15[6]], v9);
  v19 = v15[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = type metadata accessor for CMTimeProtobuf(0);
  v23 = *(_QWORD *)(v22 - 8);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v48(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
    __src(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v35 = v23;
  v36 = v15[8];
  v37 = &v13[v36];
  v38 = &v14[v36];
  if (v48(v38, 1, v22))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_DWORD *)v37 + 2) = *((_DWORD *)v38 + 2);
    __src(&v37[*(int *)(v22 + 24)], &v38[*(int *)(v22 + 24)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v22);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int (*v28)(_DWORD *, uint64_t, uint64_t);
  uint64_t v29;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v29 = v15;
    *v12 = *v13;
    v10((char *)v12 + v14[6], (char *)v13 + v14[6], v9);
    v17 = v14[7];
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CMTimeProtobuf(0);
    v21 = *(_QWORD *)(v20 - 8);
    v28 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48);
    if (v28(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v14[8];
    v24 = (_DWORD *)((char *)v12 + v23);
    v25 = (_DWORD *)((char *)v13 + v23);
    if (v28(v25, 1, v20))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[2] = v25[2];
      v10((char *)v24 + *(int *)(v20 + 24), (char *)v25 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v29 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  void (*__src)(char *, char *, uint64_t);
  char *__srca;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchRecoveryAnalyticsDataPB);
      goto LABEL_7;
    }
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v11(&v13[v15[6]], &v14[v15[6]], v9);
    v28 = v15[7];
    v29 = &v13[v28];
    __srca = &v14[v28];
    v30 = type metadata accessor for CMTimeProtobuf(0);
    v46 = *(_QWORD *)(v30 - 8);
    v47 = (uint64_t)v29;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    LODWORD(v29) = v31(v29, 1, v30);
    v32 = v31(__srca, 1, v30);
    if ((_DWORD)v29)
    {
      if (!v32)
      {
        *(_QWORD *)v47 = *(_QWORD *)__srca;
        *(_DWORD *)(v47 + 8) = *((_DWORD *)__srca + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v47 + *(int *)(v30 + 24), &__srca[*(int *)(v30 + 24)], v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v30);
        goto LABEL_23;
      }
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v34 = (void *)v47;
    }
    else
    {
      if (!v32)
      {
        *(_QWORD *)v47 = *(_QWORD *)__srca;
        *(_DWORD *)(v47 + 8) = *((_DWORD *)__srca + 2);
        v11((char *)(v47 + *(int *)(v30 + 24)), &__srca[*(int *)(v30 + 24)], v9);
        goto LABEL_23;
      }
      outlined destroy of Matrix3x3PB(v47, type metadata accessor for CMTimeProtobuf);
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v34 = (void *)v47;
    }
    memcpy(v34, __srca, v33);
LABEL_23:
    v41 = v15[8];
    v42 = (uint64_t)&v13[v41];
    v43 = &v14[v41];
    v44 = v31((char *)v42, 1, v30);
    v45 = v31(v43, 1, v30);
    if (v44)
    {
      if (!v45)
      {
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_DWORD *)(v42 + 8) = *((_DWORD *)v43 + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v42 + *(int *)(v30 + 24), &v43[*(int *)(v30 + 24)], v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v30);
        return a1;
      }
    }
    else
    {
      if (!v45)
      {
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_DWORD *)(v42 + 8) = *((_DWORD *)v43 + 2);
        v11((char *)(v42 + *(int *)(v30 + 24)), &v43[*(int *)(v30 + 24)], v9);
        return a1;
      }
      outlined destroy of Matrix3x3PB(v42, type metadata accessor for CMTimeProtobuf);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                - 8)
                    + 64);
    v26 = (void *)v42;
    v27 = v43;
    goto LABEL_8;
  }
  if (v18)
  {
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?)
                                - 8)
                    + 64);
    v26 = v13;
    v27 = v14;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  __src = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  __src(&v13[v15[6]], &v14[v15[6]], v9);
  v19 = v15[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = type metadata accessor for CMTimeProtobuf(0);
  v23 = *(_QWORD *)(v22 - 8);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v48(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
    __src(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v35 = v23;
  v36 = v15[8];
  v37 = &v13[v36];
  v38 = &v14[v36];
  if (v48(v38, 1, v22))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_DWORD *)v37 + 2) = *((_DWORD *)v38 + 2);
    __src(&v37[*(int *)(v22 + 24)], &v38[*(int *)(v22 + 24)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v22);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EDBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EDC48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchRecoveryAnalyticsDataPB?, (void (*)(uint64_t))type metadata accessor for PinchRecoveryAnalyticsDataPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PinchRecoveryAnalyticsDataPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_DWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48);
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v20 = a3[8];
    v21 = (_DWORD *)((char *)v4 + v20);
    v22 = (_DWORD *)((char *)a2 + v20);
    if (v17(v22, 1, v15))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[2] = v22[2];
      v11((char *)v21 + *(int *)(v15 + 24), (char *)v22 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for PinchRecoveryAnalyticsDataPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for CMTimeProtobuf(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 24), v5);
  v9 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v7 + 24), v5);
  return result;
}

_OWORD *initializeWithCopy for PinchRecoveryAnalyticsDataPB(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_DWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[8];
  v19 = (_DWORD *)((char *)a1 + v18);
  v20 = (_DWORD *)((char *)a2 + v18);
  if (v16(v20, 1, v14))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[2] = v20[2];
    v10((char *)v19 + *(int *)(v14 + 24), (char *)v20 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  return a1;
}

char *assignWithCopy for PinchRecoveryAnalyticsDataPB(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v9 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v27 + 24);
  v26(v7, v8, v9);
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v26(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  v22 = v15(&a1[v19], 1, v13);
  v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      v26(&v20[*(int *)(v13 + 24)], &v21[*(int *)(v13 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for CMTimeProtobuf);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(&v20[*(int *)(v13 + 24)], &v21[*(int *)(v13 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
  return a1;
}

_OWORD *initializeWithTake for PinchRecoveryAnalyticsDataPB(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_DWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[8];
  v19 = (_DWORD *)((char *)a1 + v18);
  v20 = (_DWORD *)((char *)a2 + v18);
  if (v16(v20, 1, v14))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[2] = v20[2];
    v10((char *)v19 + *(int *)(v14 + 24), (char *)v20 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  return a1;
}

char *assignWithTake for PinchRecoveryAnalyticsDataPB(char *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;

  *(_OWORD *)a1 = *a2;
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v9 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v27 + 40);
  v26(v7, v8, v9);
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v26(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  v22 = v15(&a1[v19], 1, v13);
  v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      v26(&v20[*(int *)(v13 + 24)], &v21[*(int *)(v13 + 24)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for CMTimeProtobuf);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v20[*(int *)(v13 + 24)], &v21[*(int *)(v13 + 24)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchRecoveryAnalyticsDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EE818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 24);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PinchRecoveryAnalyticsDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EE898(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 24);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for PinchRecoveryAnalyticsDataPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for MissedPinchStatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MissedPinchStatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinchInternalDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EEA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinchInternalDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7EEA88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RecoverRepetitivePinchInternalDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RecoverRepetitivePinchInternalDataPB);
}

uint64_t RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for RecoverRepetitivePinchInternalDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = RecoverRepetitivePinchInternalDataPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 7:
          v16 = a2;
          v17 = a1;
          v18 = a3;
          v19 = a4;
          v20 = &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
          goto LABEL_10;
        case 8:
          v16 = a2;
          v17 = a1;
          v18 = a3;
          v19 = a4;
          v20 = &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
LABEL_10:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v16, v17, v18, v19, (uint64_t)v20, type metadata accessor for MissedPinchStatePB, (unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
          break;
        case 12:
          closure #3 in closure #1 in RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
          goto LABEL_5;
        case 14:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
          goto LABEL_5;
        case 15:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
LABEL_5:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, &lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in closure #1 in RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v7 = swift_retain();
  closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v10;

  result = closure #1 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState, 7);
  if (!v4)
  {
    closure #1 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState, 8);
    v10 = (_BYTE *)(a1
                  + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
    swift_beginAccess();
    if (*v10 == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #3 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #4 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    return closure #5 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[8];

  v19[1] = a6;
  v19[2] = a3;
  v19[7] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedPinchStatePB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MissedPinchStatePB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + *a5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v17, (uint64_t)v11, &demangling cache variable for type metadata for MissedPinchStatePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for MissedPinchStatePB?);
  outlined init with take of Matrix2dPB((uint64_t)v11, (uint64_t)v16, type metadata accessor for MissedPinchStatePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for MissedPinchStatePB);
}

uint64_t closure #3 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t closure #4 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t closure #5 in closure #1 in RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

BOOL closure #1 in static RecoverRepetitivePinchInternalDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  char v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char *v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v132 = a2;
  v122 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v120 = *(_QWORD *)(v122 - 8);
  MEMORY[0x24BDAC7A8](v122, v3);
  v116 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?));
  MEMORY[0x24BDAC7A8](v124, v5);
  v113 = (uint64_t)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v117 = (uint64_t)&v112 - v9;
  MEMORY[0x24BDAC7A8](v10, v11);
  v121 = (uint64_t)&v112 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v112 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v115 = (char *)&v112 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v114 = (uint64_t)&v112 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v119 = (uint64_t)&v112 - v24;
  MEMORY[0x24BDAC7A8](v25, v26);
  v118 = (char *)&v112 - v27;
  MEMORY[0x24BDAC7A8](v28, v29);
  v123 = (uint64_t)&v112 - v30;
  v31 = type metadata accessor for MissedPinchStatePB(0);
  v131 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31, v32);
  v126 = (char *)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MissedPinchStatePB?, MissedPinchStatePB?));
  MEMORY[0x24BDAC7A8](v34, v35);
  v128 = (uint64_t)&v112 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v112 - v39;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedPinchStatePB?);
  MEMORY[0x24BDAC7A8](v41, v42);
  v125 = (char **)((char *)&v112 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v44, v45);
  v130 = (uint64_t)&v112 - v46;
  MEMORY[0x24BDAC7A8](v47, v48);
  v129 = (char **)((char *)&v112 - v49);
  MEMORY[0x24BDAC7A8](v50, v51);
  v53 = (char *)&v112 - v52;
  v54 = a1;
  v55 = a1
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v55, (uint64_t)v53, &demangling cache variable for type metadata for MissedPinchStatePB?);
  v56 = v132;
  v57 = v132
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  swift_beginAccess();
  v127 = v34;
  v58 = (uint64_t)&v40[*(int *)(v34 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v53, (uint64_t)v40, &demangling cache variable for type metadata for MissedPinchStatePB?);
  v59 = v31;
  outlined init with copy of (Int32, Matrix2dPB)(v57, v58, &demangling cache variable for type metadata for MissedPinchStatePB?);
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v60((uint64_t)v40, 1, v31) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for MissedPinchStatePB?);
    v61 = v60(v58, 1, v31);
    v62 = v54;
    if (v61 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for MissedPinchStatePB?);
      goto LABEL_8;
    }
  }
  else
  {
    v63 = v54;
    v64 = v129;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, (uint64_t)v129, &demangling cache variable for type metadata for MissedPinchStatePB?);
    if (v60(v58, 1, v31) != 1)
    {
      v65 = v126;
      outlined init with take of Matrix2dPB(v58, (uint64_t)v126, type metadata accessor for MissedPinchStatePB);
      v62 = v63;
      swift_retain();
      swift_retain();
      LODWORD(v131) = specialized static MissedPinchByBreakStatePB.== infix(_:_:)(v64, v65, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedPinchStatePB);
      outlined destroy of Matrix3x3PB((uint64_t)v65, type metadata accessor for MissedPinchStatePB);
      outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for MissedPinchStatePB?);
      outlined destroy of Matrix3x3PB((uint64_t)v64, type metadata accessor for MissedPinchStatePB);
      outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for MissedPinchStatePB?);
      if ((v131 & 1) == 0)
        goto LABEL_19;
LABEL_8:
      v66 = v62
          + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
      swift_beginAccess();
      v67 = v130;
      outlined init with copy of (Int32, Matrix2dPB)(v66, v130, &demangling cache variable for type metadata for MissedPinchStatePB?);
      v68 = v56
          + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
      swift_beginAccess();
      v69 = v128;
      v70 = v128 + *(int *)(v127 + 48);
      outlined init with copy of (Int32, Matrix2dPB)(v67, v128, &demangling cache variable for type metadata for MissedPinchStatePB?);
      outlined init with copy of (Int32, Matrix2dPB)(v68, v70, &demangling cache variable for type metadata for MissedPinchStatePB?);
      v71 = v62;
      if (v60(v69, 1, v59) == 1)
      {
        outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for MissedPinchStatePB?);
        if (v60(v70, 1, v59) == 1)
        {
          outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for MissedPinchStatePB?);
LABEL_18:
          v77 = (unsigned __int8 *)(v62
                                  + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
          swift_beginAccess();
          v78 = *v77;
          v79 = (unsigned __int8 *)(v56
                                  + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
          swift_beginAccess();
          if (v78 != *v79)
            goto LABEL_19;
          v81 = v62
              + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
          swift_beginAccess();
          v82 = v123;
          outlined init with copy of (Int32, Matrix2dPB)(v81, v123, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
          v83 = v56
              + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
          swift_beginAccess();
          v69 = v121;
          v84 = v121 + *(int *)(v124 + 48);
          outlined init with copy of (Int32, Matrix2dPB)(v82, v121, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
          outlined init with copy of (Int32, Matrix2dPB)(v83, v84, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
          v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
          v86 = v122;
          if (v85(v69, 1, v122) == 1)
          {
            outlined destroy of Coordinate3DPB?(v82, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
            if (v85(v84, 1, v86) == 1)
            {
              outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
LABEL_29:
              v90 = v71
                  + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
              swift_beginAccess();
              v91 = v119;
              outlined init with copy of (Int32, Matrix2dPB)(v90, v119, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              v92 = v56
                  + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
              swift_beginAccess();
              v93 = v117;
              v94 = v117 + *(int *)(v124 + 48);
              outlined init with copy of (Int32, Matrix2dPB)(v91, v117, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              v95 = v93;
              outlined init with copy of (Int32, Matrix2dPB)(v92, v94, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              if (v85(v93, 1, v86) == 1)
              {
                outlined destroy of Coordinate3DPB?(v91, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                v96 = v85(v94, 1, v86);
                v97 = (uint64_t)v115;
                if (v96 == 1)
                {
                  outlined destroy of Coordinate3DPB?(v95, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  goto LABEL_36;
                }
              }
              else
              {
                v98 = v114;
                outlined init with copy of (Int32, Matrix2dPB)(v93, v114, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                v99 = v85(v94, 1, v86);
                v97 = (uint64_t)v115;
                if (v99 != 1)
                {
                  v100 = (char *)v98;
                  v101 = v116;
                  outlined init with take of Matrix2dPB(v94, (uint64_t)v116, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                  v102 = specialized static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.== infix(_:_:)(v100, v101);
                  outlined destroy of Matrix3x3PB((uint64_t)v101, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                  outlined destroy of Coordinate3DPB?(v119, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  outlined destroy of Matrix3x3PB((uint64_t)v100, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                  outlined destroy of Coordinate3DPB?(v117, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  if ((v102 & 1) == 0)
                    goto LABEL_19;
LABEL_36:
                  v103 = v71
                       + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
                  swift_beginAccess();
                  outlined init with copy of (Int32, Matrix2dPB)(v103, v97, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  v104 = v56
                       + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
                  swift_beginAccess();
                  v105 = v113;
                  v106 = v113 + *(int *)(v124 + 48);
                  outlined init with copy of (Int32, Matrix2dPB)(v97, v113, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  v107 = v105;
                  outlined init with copy of (Int32, Matrix2dPB)(v104, v106, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                  if (v85(v105, 1, v86) == 1)
                  {
                    swift_release();
                    swift_release();
                    outlined destroy of Coordinate3DPB?(v97, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                    if (v85(v106, 1, v86) == 1)
                    {
                      outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                      return 1;
                    }
                  }
                  else
                  {
                    v108 = v105;
                    v109 = v112;
                    outlined init with copy of (Int32, Matrix2dPB)(v108, (uint64_t)v112, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                    if (v85(v106, 1, v86) != 1)
                    {
                      v110 = v116;
                      outlined init with take of Matrix2dPB(v106, (uint64_t)v116, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                      v111 = specialized static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.== infix(_:_:)(v109, v110);
                      swift_release();
                      swift_release();
                      outlined destroy of Matrix3x3PB((uint64_t)v110, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                      outlined destroy of Coordinate3DPB?(v97, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                      outlined destroy of Matrix3x3PB((uint64_t)v109, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                      outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                      return (v111 & 1) != 0;
                    }
                    swift_release();
                    swift_release();
                    outlined destroy of Coordinate3DPB?(v97, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                    outlined destroy of Matrix3x3PB((uint64_t)v109, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
                  }
                  outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?));
                  return 0;
                }
                outlined destroy of Coordinate3DPB?(v119, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
                outlined destroy of Matrix3x3PB(v98, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
              }
              v73 = &demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              v74 = v95;
              goto LABEL_16;
            }
          }
          else
          {
            v87 = v118;
            outlined init with copy of (Int32, Matrix2dPB)(v69, (uint64_t)v118, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
            if (v85(v84, 1, v86) != 1)
            {
              v88 = v116;
              outlined init with take of Matrix2dPB(v84, (uint64_t)v116, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
              v89 = specialized static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.== infix(_:_:)(v87, v88);
              outlined destroy of Matrix3x3PB((uint64_t)v88, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
              outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              outlined destroy of Matrix3x3PB((uint64_t)v87, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
              outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
              if ((v89 & 1) == 0)
                goto LABEL_19;
              goto LABEL_29;
            }
            outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
            outlined destroy of Matrix3x3PB((uint64_t)v87, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
          }
          v73 = &demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?, RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
LABEL_15:
          v74 = v69;
LABEL_16:
          outlined destroy of Coordinate3DPB?(v74, v73);
          goto LABEL_19;
        }
      }
      else
      {
        v72 = v125;
        outlined init with copy of (Int32, Matrix2dPB)(v69, (uint64_t)v125, &demangling cache variable for type metadata for MissedPinchStatePB?);
        if (v60(v70, 1, v59) != 1)
        {
          v75 = v126;
          outlined init with take of Matrix2dPB(v70, (uint64_t)v126, type metadata accessor for MissedPinchStatePB);
          v76 = specialized static MissedPinchByBreakStatePB.== infix(_:_:)(v72, v75, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedPinchStatePB);
          outlined destroy of Matrix3x3PB((uint64_t)v75, type metadata accessor for MissedPinchStatePB);
          outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for MissedPinchStatePB?);
          outlined destroy of Matrix3x3PB((uint64_t)v72, type metadata accessor for MissedPinchStatePB);
          outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for MissedPinchStatePB?);
          if ((v76 & 1) == 0)
            goto LABEL_19;
          goto LABEL_18;
        }
        outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for MissedPinchStatePB?);
        outlined destroy of Matrix3x3PB((uint64_t)v72, type metadata accessor for MissedPinchStatePB);
      }
      v73 = &demangling cache variable for type metadata for (MissedPinchStatePB?, MissedPinchStatePB?);
      goto LABEL_15;
    }
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for MissedPinchStatePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v64, type metadata accessor for MissedPinchStatePB);
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for (MissedPinchStatePB?, MissedPinchStatePB?));
LABEL_19:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance RecoverRepetitivePinchInternalDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static RecoverRepetitivePinchInternalDataPB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance RecoverRepetitivePinchInternalDataPB()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RecoverRepetitivePinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RecoverRepetitivePinchInternalDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RecoverRepetitivePinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RecoverRepetitivePinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RecoverRepetitivePinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RecoverRepetitivePinchInternalDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverRepetitivePinchInternalDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RecoverRepetitivePinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RecoverRepetitivePinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
  return Message.hash(into:)();
}

uint64_t RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchRecoveryAnalyticsDataPB);
}

uint64_t protocol witness for Message.init() in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return 0xD00000000000003ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  return Message.hash(into:)();
}

uint64_t MissedPinchStatePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 6 || result == 5 || result == 4)
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance MissedPinchStatePB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MissedPinchStatePB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MissedPinchStatePB()
{
  return MissedPinchStatePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MissedPinchStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MissedPinchStatePB.traverse<A>(visitor:)(a1, a2, a3, 4, 5, 6, (void (*)(_QWORD))type metadata accessor for MissedPinchStatePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MissedPinchStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MissedPinchStatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MissedPinchStatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MissedPinchStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MissedPinchStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MissedPinchStatePB(_QWORD *a1, char *a2)
{
  return specialized static MissedPinchByBreakStatePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedPinchStatePB) & 1;
}

uint64_t PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (*v3)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (v3[1])
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #2 in PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t protocol witness for Message.init() in conformance PinchRecoveryAnalyticsDataPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);

  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v7)((char *)a2 + *(int *)(a1 + 32), 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchRecoveryAnalyticsDataPB()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchRecoveryAnalyticsDataPB()
{
  return PinchRecoveryAnalyticsDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchRecoveryAnalyticsDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchRecoveryAnalyticsDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchRecoveryAnalyticsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchRecoveryAnalyticsDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchRecoveryAnalyticsDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchRecoveryAnalyticsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchRecoveryAnalyticsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
  return Message.hash(into:)();
}

uint64_t MissedPinchByBreakStatePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MissedPinchStatePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD))
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  if (!*v7 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v8))
  {
    if (!v7[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v8))
    {
      if (!v7[2] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v8))
      {
        a7(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MissedPinchByBreakStatePB()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MissedPinchByBreakStatePB()
{
  return MissedPinchByBreakStatePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MissedPinchByBreakStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MissedPinchStatePB.traverse<A>(visitor:)(a1, a2, a3, 1, 2, 3, (void (*)(_QWORD))type metadata accessor for MissedPinchByBreakStatePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MissedPinchByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MissedPinchByBreakStatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MissedPinchByBreakStatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MissedPinchByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MissedPinchByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MissedPinchByBreakStatePB(_QWORD *a1, char *a2)
{
  return specialized static MissedPinchByBreakStatePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedPinchByBreakStatePB) & 1;
}

uint64_t protocol witness for Message.init() in conformance MissedScrollStatePB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MissedScrollStatePB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MissedScrollStatePB()
{
  return MissedScrollStatePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MissedScrollStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MissedScrollStatePB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MissedScrollStatePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MissedScrollStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MissedScrollStatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MissedScrollStatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MissedScrollStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MissedScrollStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MissedScrollStatePB(_QWORD *a1, char *a2)
{
  return specialized static MissedScrollByBreakStatePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedScrollStatePB) & 1;
}

uint64_t MissedScrollStatePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MissedScrollStatePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (!*v4 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v5))
  {
    if (!v4[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MissedScrollByBreakStatePB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MissedScrollByBreakStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MissedScrollStatePB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MissedScrollByBreakStatePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MissedScrollByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MissedScrollByBreakStatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MissedScrollByBreakStatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MissedScrollByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MissedScrollByBreakStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MissedScrollByBreakStatePB(_QWORD *a1, char *a2)
{
  return specialized static MissedScrollByBreakStatePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MissedScrollByBreakStatePB) & 1;
}

uint64_t base witness table accessor for Equatable in MissedScrollByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
}

uint64_t type metadata accessor for MissedScrollByBreakStatePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MissedScrollByBreakStatePB);
}

uint64_t base witness table accessor for Message in MissedScrollByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
}

uint64_t base witness table accessor for Hashable in MissedScrollByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MissedScrollByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
}

uint64_t base witness table accessor for Equatable in MissedScrollStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
}

uint64_t type metadata accessor for MissedScrollStatePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MissedScrollStatePB);
}

uint64_t base witness table accessor for Message in MissedScrollStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
}

uint64_t base witness table accessor for Hashable in MissedScrollStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MissedScrollStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
}

uint64_t base witness table accessor for Equatable in MissedPinchByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
}

uint64_t type metadata accessor for MissedPinchByBreakStatePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MissedPinchByBreakStatePB);
}

uint64_t base witness table accessor for Message in MissedPinchByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
}

uint64_t base witness table accessor for Hashable in MissedPinchByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MissedPinchByBreakStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchByBreakStatePB and conformance MissedPinchByBreakStatePB, type metadata accessor for MissedPinchByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchByBreakStatePB);
}

uint64_t base witness table accessor for Equatable in PinchRecoveryAnalyticsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
}

uint64_t base witness table accessor for Message in PinchRecoveryAnalyticsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
}

uint64_t base witness table accessor for Hashable in PinchRecoveryAnalyticsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchRecoveryAnalyticsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchRecoveryAnalyticsDataPB and conformance PinchRecoveryAnalyticsDataPB, type metadata accessor for PinchRecoveryAnalyticsDataPB, (uint64_t)&protocol conformance descriptor for PinchRecoveryAnalyticsDataPB);
}

uint64_t base witness table accessor for Equatable in MissedPinchStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
}

uint64_t base witness table accessor for Message in MissedPinchStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
}

uint64_t base witness table accessor for Hashable in MissedPinchStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MissedPinchStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB, type metadata accessor for MissedPinchStatePB, (uint64_t)&protocol conformance descriptor for MissedPinchStatePB);
}

uint64_t base witness table accessor for Equatable in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t base witness table accessor for Message in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t base witness table accessor for Hashable in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t base witness table accessor for Equatable in RecoverRepetitivePinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t base witness table accessor for Message in RecoverRepetitivePinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t base witness table accessor for Hashable in RecoverRepetitivePinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RecoverRepetitivePinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t specialized static RecoverRepetitivePinchInternalDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for RecoverRepetitivePinchInternalDataPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static RecoverRepetitivePinchInternalDataPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  char v38;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  _QWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v48 - v10;
  v12 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v54 = *(_QWORD *)(v12 - 8);
  v55 = v12;
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchRecoveryAnalyticsDataPB?, PinchRecoveryAnalyticsDataPB?));
  MEMORY[0x24BDAC7A8](v53, v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  MEMORY[0x24BDAC7A8](v19, v20);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v48 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v29 = (char *)&v48 - v28;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_8;
  v30 = a1;
  v31 = a2;
  v32 = v27;
  v48 = v15;
  v49 = v11;
  v50 = v7;
  v33 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v34 = v30;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v30[*(int *)(v33 + 24)], (uint64_t)v29, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  v35 = v31;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v31[*(int *)(v33 + 24)], (uint64_t)v24, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  v36 = (uint64_t)&v18[*(int *)(v53 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v18, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v24, v36, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  if (v37((uint64_t)v18, 1, v55) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    if (v37(v36, 1, v55) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
LABEL_11:
      v43 = v51;
      v42 = v52;
      v44 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      v45 = v49;
      v44(v49, &v34[*(int *)(v33 + 20)], v52);
      v46 = v50;
      v44(v50, &v35[*(int *)(v33 + 20)], v42);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v47 = *(void (**)(char *, uint64_t))(v43 + 8);
      v47(v46, v42);
      v47(v45, v42);
      return v38 & 1;
    }
    goto LABEL_7;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, (uint64_t)v32, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  if (v37(v36, 1, v55) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for PinchRecoveryAnalyticsDataPB);
LABEL_7:
    outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for (PinchRecoveryAnalyticsDataPB?, PinchRecoveryAnalyticsDataPB?));
    goto LABEL_8;
  }
  v40 = v48;
  outlined init with take of Matrix2dPB(v36, (uint64_t)v48, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  v41 = specialized static PinchRecoveryAnalyticsDataPB.== infix(_:_:)(v32, v40);
  outlined destroy of Matrix3x3PB((uint64_t)v40, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  if ((v41 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v38 = 0;
  return v38 & 1;
}

uint64_t specialized static PinchRecoveryAnalyticsDataPB.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v81 = type metadata accessor for UnknownStorage();
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81, v4);
  v78 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v77 = (char *)&v77 - v8;
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v80 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v83 = (uint64_t)&v77 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v16, v17);
  v86 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v77 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v82 = (uint64_t)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v89 = (uint64_t)&v77 - v28;
  MEMORY[0x24BDAC7A8](v29, v30);
  v85 = (uint64_t)&v77 - v31;
  MEMORY[0x24BDAC7A8](v32, v33);
  v90 = (uint64_t)&v77 - v34;
  MEMORY[0x24BDAC7A8](v35, v36);
  v38 = (char *)&v77 - v37;
  MEMORY[0x24BDAC7A8](v39, v40);
  v42 = (char *)&v77 - v41;
  v43 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v44 = *(int *)(v43 + 28);
  v87 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v44, (uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v45 = v43;
  v46 = *(int *)(v43 + 28);
  v47 = v9;
  v88 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v46, (uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v84 = v16;
  v48 = (uint64_t)&v22[*(int *)(v16 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v42, (uint64_t)v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v38, v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v49((uint64_t)v22, 1, v9) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v49(v48, 1, v9) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_4;
    }
LABEL_12:
    v69 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v70 = (uint64_t)v22;
    goto LABEL_26;
  }
  v68 = v90;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v22, v90, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v49(v48, 1, v9) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v68, type metadata accessor for CMTimeProtobuf);
    goto LABEL_12;
  }
  v71 = v83;
  outlined init with take of Matrix2dPB(v48, v83, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v68 != *(_QWORD *)v71 || *(_DWORD *)(v68 + 8) != *(_DWORD *)(v71 + 8))
  {
    outlined destroy of Matrix3x3PB(v71, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v68, type metadata accessor for CMTimeProtobuf);
    v70 = (uint64_t)v22;
    v69 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v71, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB(v68, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v72 & 1) == 0)
    goto LABEL_27;
LABEL_4:
  v50 = v47;
  v51 = v45;
  v52 = *(int *)(v45 + 32);
  v53 = v87;
  v54 = v85;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v87 + v52, v85, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v55 = v88;
  v56 = v89;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v88 + *(int *)(v51 + 32), v89, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v57 = v86;
  v58 = v86 + *(int *)(v84 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v54, v86, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)(v56, v58, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v49(v57, 1, v50) != 1)
  {
    v73 = v82;
    outlined init with copy of (Int32, Matrix2dPB)(v57, v82, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v49(v58, 1, v50) == 1)
    {
      outlined destroy of Coordinate3DPB?(v89, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Matrix3x3PB(v73, type metadata accessor for CMTimeProtobuf);
      goto LABEL_20;
    }
    v74 = v80;
    outlined init with take of Matrix2dPB(v58, v80, type metadata accessor for CMTimeProtobuf);
    if (*(_QWORD *)v73 == *(_QWORD *)v74 && *(_DWORD *)(v73 + 8) == *(_DWORD *)(v74 + 8))
    {
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v75 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB(v74, type metadata accessor for CMTimeProtobuf);
      outlined destroy of Coordinate3DPB?(v89, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Matrix3x3PB(v73, type metadata accessor for CMTimeProtobuf);
      outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for CMTimeProtobuf?);
      if ((v75 & 1) != 0)
        goto LABEL_7;
LABEL_27:
      v66 = 0;
      return v66 & 1;
    }
    outlined destroy of Matrix3x3PB(v74, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?(v89, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v73, type metadata accessor for CMTimeProtobuf);
    v70 = v57;
    v69 = &demangling cache variable for type metadata for CMTimeProtobuf?;
LABEL_26:
    outlined destroy of Coordinate3DPB?(v70, v69);
    goto LABEL_27;
  }
  outlined destroy of Coordinate3DPB?(v56, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v49(v58, 1, v50) != 1)
  {
LABEL_20:
    v69 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v70 = v57;
    goto LABEL_26;
  }
  outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for CMTimeProtobuf?);
LABEL_7:
  if (*v53 != *v55 || v53[1] != v55[1])
    goto LABEL_27;
  v59 = (char *)v53 + *(int *)(v51 + 24);
  v60 = v79;
  v61 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  v62 = v77;
  v63 = v81;
  v61(v77, v59, v81);
  v64 = (char *)v55 + *(int *)(v51 + 24);
  v65 = v78;
  v61(v78, v64, v63);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  v67 = *(void (**)(char *, uint64_t))(v60 + 8);
  v67(v65, v63);
  v67(v62, v63);
  return v66 & 1;
}

uint64_t specialized static MissedScrollByBreakStatePB.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, __n128))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v15 = (char *)&v22 - v14;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1))
  {
    v16 = a3(0, v13);
    v17 = (char *)a1 + *(int *)(v16 + 24);
    v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v18(v15, v17, v6);
    v18(v10, &a2[*(int *)(v16 + 24)], v6);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v10, v6);
    v20(v15, v6);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t specialized static MissedPinchByBreakStatePB.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, __n128))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v15 = (char *)&v22 - v14;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1) && a1[2] == *((_QWORD *)a2 + 2))
  {
    v16 = a3(0, v13);
    v17 = (char *)a1 + *(int *)(v16 + 28);
    v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v18(v15, v17, v6);
    v18(v10, &a2[*(int *)(v16 + 28)], v6);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v10, v6);
    v20(v15, v6);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MissedPinchStatePB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

