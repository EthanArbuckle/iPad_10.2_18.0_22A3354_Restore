void sub_1CAF4D628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1CAF511DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1CAF5A8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CAF5B4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PLLogDisplay()
{
  if (qword_1ED883138 != -1)
    dispatch_once(&qword_1ED883138, &__block_literal_global_24);
  return (id)qword_1ED883130;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id PLLogAudio()
{
  if (qword_1ED883598 != -1)
    dispatch_once(&qword_1ED883598, &__block_literal_global_32);
  return (id)qword_1ED883590;
}

id PLLogSMC()
{
  if (qword_1ED882628 != -1)
    dispatch_once(&qword_1ED882628, &__block_literal_global_11);
  return (id)qword_1ED882620;
}

void sub_1CAF6787C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;

  if (a2)
  {
    if (a2 == 2)
    {
      v20 = objc_begin_catch(a1);
      if (objc_msgSend(*(id *)(v19 + 4000), "debugEnabled"))
      {
        v21 = objc_opt_class();
        a9 = MEMORY[0x1E0C809B0];
        a10 = 3221225472;
        a11 = __52__PLBatteryAgent_logEventPointBatteryPanicShutdown___block_invoke_2;
        a12 = &__block_descriptor_40_e5_v8__0lu32l8;
        a13 = v21;
        if (qword_1ED887768 != -1)
          dispatch_once(&qword_1ED887768, &a9);
        if (byte_1ED887590)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("BatteryPanicShutdown data could not be parsed"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "lastPathComponent");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "-[PLBatteryAgent logEventPointBatteryPanicShutdown:]");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "logMessage:fromFile:fromFunction:fromLineNumber:", v22, v25, v26, 7430);

          PLLogCommon();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v22;
            _os_log_debug_impl(&dword_1CAF47000, v27, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }

        }
      }

      objc_end_catch();
      JUMPOUT(0x1CAF67830);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

BOOL AWDMETRICSCellularPowerLogReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  AWDMETRICSCellularPowerLogShutdown *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 806952)
      {
        switch((int)v17)
        {
          case 816640:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            objc_msgSend(a1, "addCellularPowerLogXOShutdown:", v18);
            goto LABEL_41;
          case 816641:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAPPSPerfLevels:", v18);
            goto LABEL_180;
          case 816642:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            objc_msgSend(a1, "addCellularPowerLogAPPSCXOShutdown:", v18);
LABEL_41:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogShutdownReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816643:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAPPSSleepVeto:", v18);
            goto LABEL_180;
          case 816644:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogMCPMSleepVeto:", v18);
            goto LABEL_180;
          case 816645:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogMPSSPerfLevels:", v18);
            goto LABEL_180;
          case 816646:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGPSStates:", v18);
            goto LABEL_180;
          case 816647:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAOPUARTStates:", v18);
            goto LABEL_180;
          case 816648:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWLANUARTStates:", v18);
            goto LABEL_180;
          case 816649:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPCIeStates:", v18);
            goto LABEL_180;
          case 816650:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogL1SleepStates:", v18);
            goto LABEL_180;
          case 816651:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEConfiguredCASCCStates:", v18);
            goto LABEL_180;
          case 816652:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEActivatedCASCCStates:", v18);
            goto LABEL_180;
          case 816653:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERxTxActivityStates:", v18);
            goto LABEL_180;
          case 816654:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogLTECarrierComponentInfo:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816655:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEAggregatedDLTBS:", v18);
            goto LABEL_180;
          case 816656:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERSRP:", v18);
            goto LABEL_180;
          case 816657:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTESINR:", v18);
            goto LABEL_180;
          case 816658:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTETxPower:", v18);
            goto LABEL_180;
          case 816659:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERxDiversity:", v18);
            goto LABEL_180;
          case 816660:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEULCAState:", v18);
            goto LABEL_180;
          case 816661:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPowerEstimator:", v18);
            goto LABEL_180;
          case 816662:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            objc_msgSend(a1, "addCellularPowerLogLTEPagingDRXCycle:", v18);
            goto LABEL_67;
          case 816663:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            objc_msgSend(a1, "addCellularPowerLogNRPagingDRXCycle:", v18);
LABEL_67:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816664:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogProtocolState:", v18);
            goto LABEL_180;
          case 816665:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPLMNSearch:", v18);
            goto LABEL_180;
          case 816666:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMTxPower:", v18);
            goto LABEL_180;
          case 816667:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRxRSSI:", v18);
            goto LABEL_180;
          case 816668:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRABMode:", v18);
            goto LABEL_180;
          case 816669:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRxDiversity:", v18);
            goto LABEL_180;
          case 816670:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMATxPower:", v18);
            goto LABEL_180;
          case 816671:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARxRSSI:", v18);
            goto LABEL_180;
          case 816672:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSCGRel);
            objc_msgSend(a1, "addCellularPowerLogNRSCGRel:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSCGRelReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816673:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARxDiversity:", v18);
            goto LABEL_180;
          case 816674:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARABMode:", v18);
            goto LABEL_180;
          case 816675:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARABType:", v18);
            goto LABEL_180;
          case 816676:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDOTxPower:", v18);
            goto LABEL_180;
          case 816677:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDORxRSSI:", v18);
            goto LABEL_180;
          case 816678:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogHybridRABMode:", v18);
            goto LABEL_180;
          case 816679:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDORxDiversity:", v18);
            goto LABEL_180;
          case 816680:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XTxPower:", v18);
            goto LABEL_180;
          case 816681:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRxRSSI:", v18);
            goto LABEL_180;
          case 816682:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRABMode:", v18);
            goto LABEL_180;
          case 816683:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRxDiversity:", v18);
            goto LABEL_180;
          case 816684:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMACDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogWCDMACDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816685:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogLTECDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816686:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMARRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogWCDMARRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816687:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTERRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogLTERRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816688:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSystemEvent);
            objc_msgSend(a1, "addCellularPowerLogSystemEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSystemEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816689:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            objc_msgSend(a1, "addCellularPowerLogRATReselectionEvent:", v18);
            goto LABEL_109;
          case 816690:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            objc_msgSend(a1, "addCellularPowerLogRATRedirectionEvent:", v18);
LABEL_109:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogRATChangeEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816691:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogGSMRRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogGSMRRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816692:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRRCStateChange:", v18);
            goto LABEL_117;
          case 816693:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogHybridRRCStateChange:", v18);
LABEL_117:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816694:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogServiceEvent);
            objc_msgSend(a1, "addCellularPowerLogServiceStateEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogServiceEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816695:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNScanEvent);
            objc_msgSend(a1, "addCellularPowerLogPLMNScanEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNScanEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816696:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNSearchEvent);
            objc_msgSend(a1, "addCellularPowerLogPLMNSearchEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816697:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSARRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogNRSARRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816698:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRNSAENDCEvent);
            objc_msgSend(a1, "addCellularPowerLogNRNSAENDCEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816699:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogNRCDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816700:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWP:", v18);
            goto LABEL_180;
          case 816701:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogRFTunerStatsHist:", v18);
            goto LABEL_180;
          case 816702:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CASCCConfigured:", v18);
            goto LABEL_180;
          case 816703:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CASCCActivated:", v18);
            goto LABEL_180;
          case 816704:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RxTx:", v18);
            goto LABEL_180;
          case 816705:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CarrierComponentInfo:", v18);
            goto LABEL_163;
          case 816706:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6DLTBS:", v18);
            goto LABEL_180;
          case 816707:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RSRP:", v18);
            goto LABEL_180;
          case 816708:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6ULCAState:", v18);
            goto LABEL_180;
          case 816709:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6TxPower:", v18);
            goto LABEL_180;
          case 816710:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RxDiversity:", v18);
            goto LABEL_180;
          case 816711:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogSPMI:", v18);
            goto LABEL_180;
          case 816712:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBWP:", v18);
            goto LABEL_180;
          case 816713:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveAntennaPanel:", v18);
            goto LABEL_180;
          case 816714:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRFRCoverage);
            objc_msgSend(a1, "addCellularPowerLogNRFRCoverage:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRFRCoverageReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816715:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBeamID:", v18);
            goto LABEL_180;
          case 816716:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSFTStateEvent);
            objc_msgSend(a1, "addCellularPowerLogSFTState:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSFTStateEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816717:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCASCCConfigured:", v18);
            goto LABEL_180;
          case 816718:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCASCCActivated:", v18);
            goto LABEL_180;
          case 816719:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveRxTx:", v18);
            goto LABEL_180;
          case 816720:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCarrierComponentInfo:", v18);
LABEL_163:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816721:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveDLTBS:", v18);
            goto LABEL_180;
          case 816722:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveRSRP:", v18);
            goto LABEL_180;
          case 816723:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogSFTRxTx:", v18);
            goto LABEL_180;
          case 816724:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveTxPower:", v18);
            goto LABEL_180;
          case 816725:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveULCAState:", v18);
            goto LABEL_180;
          case 816726:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWPSCC:", v18);
            goto LABEL_180;
          case 816727:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBWPSCC:", v18);
            goto LABEL_180;
          case 816728:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRDCEvent);
            objc_msgSend(a1, "addCellularPowerLogNRDCEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816729:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWUS);
            objc_msgSend(a1, "addCellularPowerLogWUS:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWUSReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816730:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWPSA:", v18);
LABEL_180:
            if (PBReaderPlaceMark()
              && (AWDMETRICSCellularPowerLogHistogramReadFrom((uint64_t)v18, a2) & 1) != 0)
            {
              goto LABEL_182;
            }
            goto LABEL_186;
          default:
            if ((_DWORD)v17 != 806953)
              goto LABEL_37;
            v18 = objc_alloc_init(AWDMETRICSCellularDynamicRatSelection);
            objc_msgSend(a1, "addCellularDynamicRatSelection:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularDynamicRatSelectionReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
        }
      }
      if ((_DWORD)v17 == 786435)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularPerClientProfileTriggerCount);
        objc_msgSend(a1, "addCellularPerClientProfileTriggerCount:", v18);
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_186:

          return 0;
        }
        goto LABEL_182;
      }
      if ((_DWORD)v17 == 806936)
        break;
      if ((_DWORD)v17 == 806937)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularNrSdmEndcRelease);
        objc_msgSend(a1, "addCellularNrSdmEndcRelease:", v18);
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularNrSdmEndcReleaseReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_186;
        }
LABEL_182:
        PBReaderRecallMark();

        goto LABEL_183;
      }
LABEL_37:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_183:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(AWDMETRICSCellularNrSDMActivation);
    objc_msgSend(a1, "addCellularNrSDMActivation:", v18);
    if (!PBReaderPlaceMark() || (AWDMETRICSCellularNrSDMActivationReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_186;
    goto LABEL_182;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  AWDMETRICSMBin *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_58;
      case 2u:
        v24 = objc_alloc_init(AWDMETRICSMBin);
        objc_msgSend((id)a1, "addBin:", v24);
        if (PBReaderPlaceMark() && AWDMETRICSMBinReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_52:
        v36 = 28;
        goto LABEL_57;
      case 4u:
        v31 = 0;
        v32 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_56:
        v36 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v27;
        goto LABEL_58;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

BOOL AWDMETRICSMBinReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogShutdownReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          v40 = 16;
          goto LABEL_61;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v41 = 24;
          goto LABEL_66;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_60:
          v40 = 8;
LABEL_61:
          *(_QWORD *)(a1 + v40) = v19;
          continue;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_63;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_65:
      v41 = 28;
LABEL_66:
      *(_DWORD *)(a1 + v41) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSystemEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogServiceEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogXPC()
{
  if (qword_1ED8859E0 != -1)
    dispatch_once(&qword_1ED8859E0, &__block_literal_global_49);
  return (id)qword_1ED8859D8;
}

id PLLogPush()
{
  if (qword_1ED884C80 != -1)
    dispatch_once(&qword_1ED884C80, &__block_literal_global_40);
  return (id)qword_1ED884C78;
}

void sub_1CAF78FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CAF81294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v68 - 176), 8);
  _Block_object_dispose((const void *)(v68 - 240), 8);
  _Unwind_Resume(a1);
}

#error "1CAF835E0: too big function (funcsize=0)"

id removeCTPrefixFromString(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "hasPrefix:", v3))
  {
    objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v3, "length"));
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

void TelephonyNotificationCB(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  if (a5)
  {
    +[PLBBAgent getBBAgent](PLBBAgent, "getBBAgent");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x3032000000;
      v16 = __Block_byref_object_copy__10;
      v17 = __Block_byref_object_dispose__10;
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a5);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v14[5], "setObject:forKey:", CFSTR("not set"), CFSTR("kCTRegistrationCellChangedNotification"));
      objc_msgSend((id)v14[5], "setObject:forKey:", CFSTR("not set"), CFSTR("kCTRegistrationStatusChangedNotification"));
      objc_msgSend((id)v14[5], "setObject:forKey:", CFSTR("not set"), CFSTR("kCTRegistrationDataStatusChangedNotification"));
      objc_msgSend((id)v14[5], "setObject:forKey:", CFSTR("not set"), CFSTR("kCTRegistrationOperatorNameChangedNotification"));
      if (a3)
        CFRetain(a3);
      objc_msgSend(v7, "workQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __TelephonyNotificationCB_block_invoke;
      block[3] = &unk_1E857DDA0;
      v11 = &v13;
      v12 = a3;
      v10 = v7;
      dispatch_async(v8, block);

      _Block_object_dispose(&v13, 8);
    }

  }
}

void sub_1CAFAE12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PLLogThermal()
{
  if (qword_1ED8822A0 != -1)
    dispatch_once(&qword_1ED8822A0, &__block_literal_global);
  return (id)_MergedGlobals_1;
}

id PLLogNetwork()
{
  if (qword_1ED8825B8 != -1)
    dispatch_once(&qword_1ED8825B8, &__block_literal_global_10);
  return (id)qword_1ED8825B0;
}

id PLLogIOReport()
{
  if (qword_1ED882EF0 != -1)
    dispatch_once(&qword_1ED882EF0, &__block_literal_global_19);
  return (id)qword_1ED882EE8;
}

id PLLogCamera()
{
  if (qword_1ED882550 != -1)
    dispatch_once(&qword_1ED882550, &__block_literal_global_8);
  return (id)_MergedGlobals_1_8;
}

id PLLogCLPC()
{
  if (qword_1ED884CD0 != -1)
    dispatch_once(&qword_1ED884CD0, &__block_literal_global_41);
  return (id)qword_1ED884CC8;
}

BOOL AWDMETRICSMCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_77:
          v55 = 32;
          goto LABEL_98;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_81:
          v55 = 24;
          goto LABEL_98;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_85:
          v55 = 28;
          goto LABEL_98;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_89:
          v55 = 20;
          goto LABEL_98;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_93:
          v55 = 16;
          goto LABEL_98;
        case 7u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
          goto LABEL_95;
        v50 += 7;
        v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_97:
      v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  AWDMETRICSMCarrierComponentInfo *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        objc_msgSend((id)a1, "addCarrierInfo:", v24);
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CAFB1EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  char a71;
  uint64_t v71;

  _Block_object_dispose((const void *)(v71 - 224), 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2B8], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for UrsaRequest(uint64_t a1)
{
  return sub_1CAFB5180(a1, (uint64_t *)&unk_1EF999C00);
}

uint64_t sub_1CAFB4F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1CAFB4F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1CAFB4FC4(uint64_t a1, uint64_t a2)
{
  return sub_1CAFB50F8(a1, a2, type metadata accessor for UrsaRequest);
}

uint64_t sub_1CAFB4FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1CAFB5014()
{
  return sub_1CAFB51B4(type metadata accessor for UrsaRequest);
}

uint64_t sub_1CAFB5020(uint64_t a1, uint64_t a2)
{
  return sub_1CAFB5208(a1, a2, type metadata accessor for UrsaRequest);
}

uint64_t sub_1CAFB502C(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for UrsaRequest(0);
  v4 = v1 + *(int *)(result + 40);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t sub_1CAFB5060()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for UrsaResponse(0) + 24)) & 1;
}

uint64_t type metadata accessor for UrsaResponse(uint64_t a1)
{
  return sub_1CAFB5180(a1, (uint64_t *)&unk_1EF999C10);
}

uint64_t sub_1CAFB5098()
{
  return sub_1CAFB50A4(type metadata accessor for UrsaResponse);
}

uint64_t sub_1CAFB50A4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1CAFB50F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 28));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1CAFB513C()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for UrsaResponse(0) + 32));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t type metadata accessor for UrsaIssue(uint64_t a1)
{
  return sub_1CAFB5180(a1, (uint64_t *)&unk_1EF999C20);
}

uint64_t sub_1CAFB5180(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CAFB51B4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 36));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1CAFB5208(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 36));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1CAFB524C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_1CB360900();
  __swift_allocate_value_buffer(v0, qword_1EF99A470);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF99A470);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B50);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CB3867B0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "cr_key";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1CB3608E8();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "build";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "device";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "response_flag";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "request_id";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "fetch_window_start";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  return sub_1CB3608F4();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1CAFB54AC()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1CB360834();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          type metadata accessor for UrsaRequest(0);
          sub_1CB360864();
          break;
        case 6:
          type metadata accessor for UrsaRequest(0);
          sub_1CB360858();
          break;
        default:
          break;
      }
      result = sub_1CB360834();
    }
  }
  return result;
}

uint64_t sub_1CAFB55D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for UrsaRequest(0);
  v10 = (int *)result;
  if (*(_QWORD *)(v5 + *(int *)(result + 20) + 8))
    result = sub_1CB3608D0();
  if (!v4)
  {
    if (*(_QWORD *)(v5 + v10[6] + 8))
      sub_1CB3608D0();
    if (*(_QWORD *)(v5 + v10[7] + 8))
      sub_1CB3608D0();
    if (*(_QWORD *)(v5 + v10[8] + 8))
      sub_1CB3608D0();
    sub_1CAFB67EC(v5, a1, a2, a3, type metadata accessor for UrsaRequest);
    sub_1CAFB5748(v5);
    return sub_1CB3607F8();
  }
  return result;
}

uint64_t sub_1CAFB5748(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaRequest(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 8) & 1) == 0)
    return sub_1CB3608C4();
  return result;
}

uint64_t sub_1CAFB57C0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  result = sub_1CB360804();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = (_QWORD *)(a2 + a1[7]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v8);
  *v10 = 0;
  v10[1] = 0;
  v11 = a1[10];
  v12 = (_QWORD *)(a2 + a1[9]);
  *v12 = 0;
  v12[1] = 0;
  v13 = a2 + v11;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  return result;
}

uint64_t sub_1CAFB5828()
{
  return 0x7571655261737255;
}

uint64_t (*sub_1CAFB5854())()
{
  return nullsub_1;
}

uint64_t sub_1CAFB5868()
{
  return sub_1CAFB54AC();
}

uint64_t sub_1CAFB587C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CAFB55D4(a1, a2, a3);
}

uint64_t sub_1CAFB5894()
{
  sub_1CAFB78E4(&qword_1EF997B40, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB386870);
  return sub_1CB360828();
}

uint64_t sub_1CAFB58E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1CAFB6D64(&qword_1EF9992E0, (uint64_t)qword_1EF99A470, a1);
}

uint64_t sub_1CAFB5904()
{
  sub_1CAFB78E4(&qword_1EF997920, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3867F8);
  return sub_1CB360888();
}

uint64_t sub_1CAFB5948()
{
  sub_1CAFB78E4(&qword_1EF997920, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3867F8);
  return sub_1CB360894();
}

uint64_t sub_1CAFB59A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1CB360900();
  __swift_allocate_value_buffer(v0, qword_1EF99A488);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF99A488);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B50);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CB3867C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "success";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1CB3608E8();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "failure_reason";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "issues";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "error_code";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return sub_1CB3608F4();
}

uint64_t sub_1CAFB5B74()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1CB360834();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for UrsaResponse(0);
          v4 = v3;
          sub_1CB360840();
          goto LABEL_5;
        case 2:
          type metadata accessor for UrsaResponse(0);
          v4 = v3;
          sub_1CB360864();
          goto LABEL_5;
        case 3:
          type metadata accessor for UrsaIssue(0);
          sub_1CAFB78E4(&qword_1EF997900, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386AC8);
          v4 = v3;
          sub_1CB360870();
          goto LABEL_5;
        case 4:
          type metadata accessor for UrsaResponse(0);
          v4 = v3;
          sub_1CB36084C();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_1CB360834();
    }
  }
  return result;
}

uint64_t sub_1CAFB5CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for UrsaResponse(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 24)) != 2)
    result = sub_1CB3608AC();
  if (!v1)
  {
    if (*(_QWORD *)(v0 + *(int *)(v3 + 28) + 8))
      sub_1CB3608D0();
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    {
      type metadata accessor for UrsaIssue(0);
      sub_1CAFB78E4(&qword_1EF997900, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386AC8);
      sub_1CB3608DC();
    }
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 32) + 4) & 1) == 0)
      sub_1CB3608B8();
    return sub_1CB3607F8();
  }
  return result;
}

uint64_t sub_1CAFB5E54@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  char *v7;

  *a2 = MEMORY[0x1E0DEE9D8];
  result = sub_1CB360804();
  v5 = a1[7];
  *((_BYTE *)a2 + a1[6]) = 2;
  v6 = (_QWORD *)((char *)a2 + v5);
  *v6 = 0;
  v6[1] = 0;
  v7 = (char *)a2 + a1[8];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  return result;
}

uint64_t sub_1CAFB5EB4()
{
  return 0x7073655261737255;
}

uint64_t sub_1CAFB5ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_1CB360810();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1CAFB5F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_1CB360810();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1CAFB5F54())()
{
  return nullsub_1;
}

uint64_t sub_1CAFB5F68()
{
  return sub_1CAFB5B74();
}

uint64_t sub_1CAFB5F7C()
{
  return sub_1CAFB5CD8();
}

uint64_t sub_1CAFB5F90()
{
  sub_1CAFB78E4(&qword_1EF997B38, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB3869D8);
  return sub_1CB360828();
}

uint64_t sub_1CAFB5FE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1CAFB6D64(&qword_1EF9992E8, (uint64_t)qword_1EF99A488, a1);
}

uint64_t sub_1CAFB5FFC()
{
  sub_1CAFB78E4(&qword_1EF997938, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386960);
  return sub_1CB360888();
}

uint64_t sub_1CAFB603C()
{
  sub_1CAFB78E4(&qword_1EF997938, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386960);
  return sub_1CB360894();
}

uint64_t sub_1CAFB6090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = sub_1CB360900();
  __swift_allocate_value_buffer(v0, qword_1EF99A4A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF99A4A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B50);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1CB3867D0;
  v5 = v31 + v4;
  v6 = v31 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v31 + v4) = 1;
  *(_QWORD *)v6 = "radar";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = sub_1CB3608E8();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "impact";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "timestamp_start";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "timestamp_end";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "hit_in";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "fixed_in";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "is_critical";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "timestamp_invalid";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "dri_message";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "notification_message";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "process";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "domain";
  *((_QWORD *)v29 + 1) = 6;
  v29[16] = 2;
  v9();
  return sub_1CB3608F4();
}

uint64_t sub_1CAFB6410()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1CB360834();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for UrsaIssue(0);
          v4 = v3;
          sub_1CB36084C();
          goto LABEL_9;
        case 3:
        case 4:
        case 8:
          type metadata accessor for UrsaIssue(0);
          v4 = v3;
          sub_1CB360858();
          goto LABEL_9;
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
          type metadata accessor for UrsaIssue(0);
          v4 = v3;
          sub_1CB360864();
          goto LABEL_9;
        case 7:
          type metadata accessor for UrsaIssue(0);
          v4 = v3;
          sub_1CB360840();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_1CB360834();
    }
  }
  return result;
}

uint64_t sub_1CAFB65B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for UrsaIssue(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = sub_1CB3608B8();
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 4) & 1) == 0)
      sub_1CB3608B8();
    if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
      sub_1CB3608C4();
    if ((*(_BYTE *)(v5 + v10[8] + 8) & 1) == 0)
      sub_1CB3608C4();
    sub_1CAFB67EC(v5, a1, a2, a3, type metadata accessor for UrsaIssue);
    sub_1CAFB6860(v5);
    sub_1CAFB68D4(v5);
    sub_1CAFB6948(v5);
    sub_1CAFB69BC(v5);
    sub_1CAFB6A30(v5);
    sub_1CAFB6AA4(v5);
    sub_1CAFB6B18(v5);
    return sub_1CB3607F8();
  }
  return result;
}

uint64_t sub_1CAFB67EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB6860(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 40) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB68D4(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return sub_1CB3608AC();
  return result;
}

uint64_t sub_1CAFB6948(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 8) & 1) == 0)
    return sub_1CB3608C4();
  return result;
}

uint64_t sub_1CAFB69BC(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 52) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB6A30(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 56) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB6AA4(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 60) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB6B18(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for UrsaIssue(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 64) + 8))
    return sub_1CB3608D0();
  return result;
}

uint64_t sub_1CAFB6B90@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  result = sub_1CB360804();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1[10];
  v12 = (_QWORD *)(a2 + a1[9]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(a2 + v11);
  *v13 = 0;
  v13[1] = 0;
  v14 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  v15 = a2 + v14;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a1[14];
  v17 = (_QWORD *)(a2 + a1[13]);
  *v17 = 0;
  v17[1] = 0;
  v18 = (_QWORD *)(a2 + v16);
  *v18 = 0;
  v18[1] = 0;
  v19 = a1[16];
  v20 = (_QWORD *)(a2 + a1[15]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (_QWORD *)(a2 + v19);
  *v21 = 0;
  v21[1] = 0;
  return result;
}

uint64_t sub_1CAFB6C44()
{
  return 0x7573734961737255;
}

uint64_t sub_1CAFB6C60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CB360810();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1CAFB6C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CB360810();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_1CAFB6CD0()
{
  return sub_1CAFB6410();
}

uint64_t sub_1CAFB6CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CAFB65B8(a1, a2, a3);
}

uint64_t sub_1CAFB6CF8()
{
  sub_1CAFB78E4(&qword_1EF997B30, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386B40);
  return sub_1CB360828();
}

uint64_t sub_1CAFB6D48@<X0>(uint64_t a1@<X8>)
{
  return sub_1CAFB6D64(qword_1EF9992F0, (uint64_t)qword_1EF99A4A0, a1);
}

uint64_t sub_1CAFB6D64@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1CB360900();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_1CAFB6DD0()
{
  sub_1CAFB78E4(&qword_1EF997900, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386AC8);
  return sub_1CB360888();
}

uint64_t sub_1CAFB6E10()
{
  sub_1CB360BA0();
  sub_1CB36093C();
  return sub_1CB360BAC();
}

uint64_t sub_1CAFB6E64()
{
  sub_1CAFB78E4(&qword_1EF997900, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386AC8);
  return sub_1CB360894();
}

uint64_t sub_1CAFB6EB4()
{
  sub_1CB360BA0();
  sub_1CB36093C();
  return sub_1CB360BAC();
}

uint64_t sub_1CAFB6F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for UrsaIssue(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1CAFB928C(a1 + v12, (uint64_t)v10);
        sub_1CAFB928C(a2 + v12, (uint64_t)v7);
        v15 = sub_1CAFB7024((uint64_t)v10, (uint64_t)v7);
        sub_1CAFB92D0((uint64_t)v7);
        sub_1CAFB92D0((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1CAFB7024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;
  _DWORD *v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  void (*v74)(char *, uint64_t, uint64_t);
  char v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;

  v4 = sub_1CB360810();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v77 - v9;
  v11 = (int *)type metadata accessor for UrsaIssue(0);
  v12 = v11;
  v13 = v11[5];
  v14 = (_DWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 4);
  v16 = (_DWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      return v17 & 1;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_78;
  }
  v18 = v11[6];
  v19 = (_DWORD *)(a1 + v18);
  v20 = *(_BYTE *)(a1 + v18 + 4);
  v21 = (_DWORD *)(a2 + v18);
  v17 = *(unsigned __int8 *)(a2 + v18 + 4);
  if ((v20 & 1) != 0)
  {
    if (!v17)
      return v17 & 1;
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_78;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v17 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v17)
      return v17 & 1;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_78;
  }
  v26 = v11[8];
  v27 = (double *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 8);
  v29 = (double *)(a2 + v26);
  v17 = *(unsigned __int8 *)(a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v17)
      return v17 & 1;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_78;
  }
  v30 = v11[9];
  v31 = (_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a1 + v30 + 8);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  if (!v32)
  {
    if (v34)
      goto LABEL_78;
    goto LABEL_32;
  }
  if (!v34)
    goto LABEL_78;
  if (*v31 == *v33 && v32 == v34 || (v35 = sub_1CB360B28(), LOBYTE(v17) = 0, (v35 & 1) != 0))
  {
LABEL_32:
    v36 = v12[10];
    v37 = (_QWORD *)(a1 + v36);
    v38 = *(_QWORD *)(a1 + v36 + 8);
    v39 = (_QWORD *)(a2 + v36);
    v40 = v39[1];
    if (v38)
    {
      if (!v40)
        goto LABEL_78;
      if (*v37 != *v39 || v38 != v40)
      {
        v41 = sub_1CB360B28();
        LOBYTE(v17) = 0;
        if ((v41 & 1) == 0)
          return v17 & 1;
      }
    }
    else if (v40)
    {
      goto LABEL_78;
    }
    v42 = v12[11];
    v43 = *(unsigned __int8 *)(a1 + v42);
    v44 = *(unsigned __int8 *)(a2 + v42);
    if (v43 == 2)
    {
      if (v44 != 2)
        goto LABEL_78;
    }
    else if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
    {
      goto LABEL_78;
    }
    v45 = v12[12];
    v46 = (double *)(a1 + v45);
    v47 = *(_BYTE *)(a1 + v45 + 8);
    v48 = (double *)(a2 + v45);
    v17 = *(unsigned __int8 *)(a2 + v45 + 8);
    if ((v47 & 1) != 0)
    {
      if (!v17)
        return v17 & 1;
    }
    else
    {
      if (*v46 != *v48)
        LOBYTE(v17) = 1;
      if ((v17 & 1) != 0)
        goto LABEL_78;
    }
    v49 = v12[13];
    v50 = (_QWORD *)(a1 + v49);
    v51 = *(_QWORD *)(a1 + v49 + 8);
    v52 = (_QWORD *)(a2 + v49);
    v53 = v52[1];
    if (v51)
    {
      if (!v53)
        goto LABEL_78;
      if (*v50 != *v52 || v51 != v53)
      {
        v54 = sub_1CB360B28();
        LOBYTE(v17) = 0;
        if ((v54 & 1) == 0)
          return v17 & 1;
      }
    }
    else if (v53)
    {
      goto LABEL_78;
    }
    v55 = v12[14];
    v56 = (_QWORD *)(a1 + v55);
    v57 = *(_QWORD *)(a1 + v55 + 8);
    v58 = (_QWORD *)(a2 + v55);
    v59 = v58[1];
    if (v57)
    {
      if (!v59)
        goto LABEL_78;
      if (*v56 != *v58 || v57 != v59)
      {
        v60 = sub_1CB360B28();
        LOBYTE(v17) = 0;
        if ((v60 & 1) == 0)
          return v17 & 1;
      }
    }
    else if (v59)
    {
      goto LABEL_78;
    }
    v61 = v12[15];
    v62 = (_QWORD *)(a1 + v61);
    v63 = *(_QWORD *)(a1 + v61 + 8);
    v64 = (_QWORD *)(a2 + v61);
    v65 = v64[1];
    if (v63)
    {
      if (!v65)
        goto LABEL_78;
      if (*v62 != *v64 || v63 != v65)
      {
        v66 = sub_1CB360B28();
        LOBYTE(v17) = 0;
        if ((v66 & 1) == 0)
          return v17 & 1;
      }
    }
    else if (v65)
    {
      goto LABEL_78;
    }
    v67 = v12[16];
    v68 = (_QWORD *)(a1 + v67);
    v69 = *(_QWORD *)(a1 + v67 + 8);
    v70 = (_QWORD *)(a2 + v67);
    v71 = v70[1];
    if (v69)
    {
      if (v71)
      {
        if (*v68 != *v70 || v69 != v71)
        {
          v72 = sub_1CB360B28();
          LOBYTE(v17) = 0;
          if ((v72 & 1) == 0)
            return v17 & 1;
        }
LABEL_80:
        v74 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v74(v10, a1, v4);
        v74(v8, a2, v4);
        sub_1CAFB78E4(&qword_1EF997B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v75 = sub_1CB360948();
        v76 = *(void (**)(char *, uint64_t))(v5 + 8);
        v76(v8, v4);
        v76(v10, v4);
        LOBYTE(v17) = v75;
        return v17 & 1;
      }
    }
    else if (!v71)
    {
      goto LABEL_80;
    }
LABEL_78:
    LOBYTE(v17) = 0;
  }
  return v17 & 1;
}

uint64_t sub_1CAFB7448(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  _DWORD *v26;
  int v27;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = sub_1CB360810();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v32 - v9;
  v11 = type metadata accessor for UrsaResponse(0);
  v12 = v11;
  v13 = *(int *)(v11 + 24);
  v14 = *((unsigned __int8 *)a1 + v13);
  v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2)
      goto LABEL_18;
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_18;
  }
  v16 = *(int *)(v11 + 28);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = *(uint64_t *)((char *)a1 + v16 + 8);
  v19 = (uint64_t *)((char *)a2 + v16);
  v20 = v19[1];
  if (!v18)
  {
    if (v20)
      goto LABEL_18;
LABEL_15:
    if ((sub_1CAFB6F08(*a1, *a2) & 1) != 0)
    {
      v23 = *(int *)(v12 + 32);
      v24 = (_DWORD *)((char *)a1 + v23);
      v25 = *((_BYTE *)a1 + v23 + 4);
      v26 = (_DWORD *)((char *)a2 + v23);
      v27 = *((unsigned __int8 *)a2 + v23 + 4);
      if ((v25 & 1) != 0)
      {
        if (!v27)
          goto LABEL_18;
      }
      else
      {
        if (*v24 != *v26)
          LOBYTE(v27) = 1;
        if ((v27 & 1) != 0)
          goto LABEL_18;
      }
      v29 = (char *)a1 + *(int *)(v12 + 20);
      v30 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v30(v10, v29, v4);
      v30(v8, (char *)a2 + *(int *)(v12 + 20), v4);
      sub_1CAFB78E4(&qword_1EF997B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v22 = sub_1CB360948();
      v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v8, v4);
      v31(v10, v4);
      return v22 & 1;
    }
LABEL_18:
    v22 = 0;
    return v22 & 1;
  }
  if (!v20)
    goto LABEL_18;
  if (*v17 == *v19 && v18 == v20)
    goto LABEL_15;
  v22 = 0;
  if ((sub_1CB360B28() & 1) != 0)
    goto LABEL_15;
  return v22 & 1;
}

uint64_t sub_1CAFB762C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  char v44;
  double *v45;
  int v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v50;

  v4 = sub_1CB360810();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  v11 = (int *)type metadata accessor for UrsaRequest(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_50;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_50;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (sub_1CB360B28() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_50;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((sub_1CB360B28() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_50;
    }
    v25 = v11[7];
    v26 = (_QWORD *)(a1 + v25);
    v27 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (_QWORD *)(a2 + v25);
    v29 = v28[1];
    if (v27)
    {
      if (!v29)
        goto LABEL_50;
      if (*v26 != *v28 || v27 != v29)
      {
        v18 = 0;
        if ((sub_1CB360B28() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v29)
    {
      goto LABEL_50;
    }
    v31 = v11[8];
    v32 = (_QWORD *)(a1 + v31);
    v33 = *(_QWORD *)(a1 + v31 + 8);
    v34 = (_QWORD *)(a2 + v31);
    v35 = v34[1];
    if (v33)
    {
      if (!v35)
        goto LABEL_50;
      if (*v32 != *v34 || v33 != v35)
      {
        v18 = 0;
        if ((sub_1CB360B28() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v35)
    {
      goto LABEL_50;
    }
    v37 = v11[9];
    v38 = (_QWORD *)(a1 + v37);
    v39 = *(_QWORD *)(a1 + v37 + 8);
    v40 = (_QWORD *)(a2 + v37);
    v41 = v40[1];
    if (v39)
    {
      if (!v41)
        goto LABEL_50;
      if (*v38 != *v40 || v39 != v41)
      {
        v18 = 0;
        if ((sub_1CB360B28() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v41)
    {
      goto LABEL_50;
    }
    v42 = v11[10];
    v43 = (double *)(a1 + v42);
    v44 = *(_BYTE *)(a1 + v42 + 8);
    v45 = (double *)(a2 + v42);
    v46 = *(unsigned __int8 *)(a2 + v42 + 8);
    if ((v44 & 1) != 0)
    {
      if (v46)
      {
LABEL_46:
        v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v47(v10, a1, v4);
        v47(v8, a2, v4);
        sub_1CAFB78E4(&qword_1EF997B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v18 = sub_1CB360948();
        v48 = *(void (**)(char *, uint64_t))(v5 + 8);
        v48(v8, v4);
        v48(v10, v4);
        return v18 & 1;
      }
    }
    else
    {
      if (*v43 != *v45)
        LOBYTE(v46) = 1;
      if ((v46 & 1) == 0)
        goto LABEL_46;
    }
LABEL_50:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1CAFB78E4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D179C8BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CAFB7924()
{
  return sub_1CAFB78E4(&qword_1EF997918, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3868D0);
}

uint64_t sub_1CAFB7950()
{
  return sub_1CAFB78E4(&qword_1EF997920, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3867F8);
}

uint64_t sub_1CAFB797C()
{
  return sub_1CAFB78E4(&qword_1EF9978F8, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3868F8);
}

uint64_t sub_1CAFB79A8()
{
  return sub_1CAFB78E4(&qword_1EF997928, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB386938);
}

uint64_t sub_1CAFB79D4()
{
  return sub_1CAFB78E4(&qword_1EF997930, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386A38);
}

uint64_t sub_1CAFB7A00()
{
  return sub_1CAFB78E4(&qword_1EF997938, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386960);
}

uint64_t sub_1CAFB7A2C()
{
  return sub_1CAFB78E4(&qword_1EF997908, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386A60);
}

uint64_t sub_1CAFB7A58()
{
  return sub_1CAFB78E4(&qword_1EF997940, type metadata accessor for UrsaResponse, (uint64_t)&unk_1CB386AA0);
}

uint64_t sub_1CAFB7A84()
{
  return sub_1CAFB78E4(&qword_1EF997948, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386BA0);
}

uint64_t sub_1CAFB7AB0()
{
  return sub_1CAFB78E4(&qword_1EF997900, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386AC8);
}

uint64_t sub_1CAFB7ADC()
{
  return sub_1CAFB78E4(&qword_1EF997910, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386BC8);
}

uint64_t sub_1CAFB7B08()
{
  return sub_1CAFB78E4(qword_1EF997950, type metadata accessor for UrsaIssue, (uint64_t)&unk_1CB386C08);
}

uint64_t *sub_1CAFB7B34(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CB360810();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (char *)a1 + v25;
    v30 = (char *)a2 + v25;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1CAFB7C50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CAFB7CD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a1 + v24;
  v29 = a2 + v24;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CAFB7DC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  return a1;
}

uint64_t sub_1CAFB7F10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  return a1;
}

uint64_t sub_1CAFB7FAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  return a1;
}

uint64_t sub_1CAFB80A4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CAFB80B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1CB360810();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1CAFB813C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CAFB8148(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CB360810();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_1CAFB81C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CB360810();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1CAFB8248(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1CB360810();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (_QWORD *)((char *)v7 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[8];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1CAFB832C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1CAFB838C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CB360810();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1CAFB8448(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CB360810();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[8];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_DWORD *)v15;
  v14[4] = v15[4];
  *(_DWORD *)v14 = v16;
  return a1;
}

_QWORD *sub_1CAFB8518(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CB360810();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[8];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)v12 = *(_DWORD *)v13;
  return a1;
}

_QWORD *sub_1CAFB85B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CB360810();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

uint64_t sub_1CAFB8668()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CAFB8674(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CB360810();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1CAFB86F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1CAFB86FC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1CB360810();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CAFB8770()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CB360810();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1CAFB8804(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CB360810();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = a3[9];
    v21 = a3[10];
    v22 = (_QWORD *)((char *)a1 + v20);
    v23 = (_QWORD *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (_QWORD *)((char *)a1 + v21);
    v26 = (_QWORD *)((char *)a2 + v21);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[13];
    v32 = a3[14];
    v33 = (_QWORD *)((char *)a1 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = (_QWORD *)((char *)a1 + v32);
    v37 = (_QWORD *)((char *)a2 + v32);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = a3[15];
    v40 = a3[16];
    v41 = (_QWORD *)((char *)a1 + v39);
    v42 = (_QWORD *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = (_QWORD *)((char *)a1 + v40);
    v45 = (_QWORD *)((char *)a2 + v40);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1CAFB89AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CAFB8A44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = (_QWORD *)(a1 + v19);
  v22 = (_QWORD *)(a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_QWORD *)(a1 + v20);
  v25 = (_QWORD *)(a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a3[13];
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (_QWORD *)(a1 + v31);
  v36 = (_QWORD *)(a2 + v31);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = a3[15];
  v39 = a3[16];
  v40 = (_QWORD *)(a1 + v38);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = (_QWORD *)(a1 + v39);
  v44 = (_QWORD *)(a2 + v39);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CAFB8BC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v10;
  v20 = a3[9];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a3[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  v30 = a3[13];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a3[14];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = a3[15];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = a3[16];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CAFB8DB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v24 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  return a1;
}

uint64_t sub_1CAFB8EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v29 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[13];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = a3[14];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = a3[15];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  v47 = a3[16];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CAFB904C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CAFB9058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1CB360810();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1CAFB90E4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CAFB90F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CB360810();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

uint64_t sub_1CAFB916C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CB360810();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D179C8B0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1CAFB928C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UrsaIssue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CAFB92D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UrsaIssue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1CAFB930C()
{
  qword_1EF999C38 = 0x6F6A614D61737255;
  qword_1EF999C40 = 0xEF302E315F645F72;
}

void sub_1CAFB9340()
{
  qword_1EF999C50 = 0x6F6A614D61737255;
  qword_1EF999C58 = 0xEF302E315F705F72;
}

uint64_t variable initialization expression of UrsaClient.currentTask()
{
  return 0;
}

id UrsaClient.__allocating_init(_:)(char a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UrsaClient.init(_:)(a1);
}

id UrsaClient.init(_:)(char a1)
{
  char *v1;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  objc_class *v23;
  uint64_t v25;
  objc_super v26;

  *(_QWORD *)&v1[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;
  v3 = v1;
  v4 = (void *)sub_1CB360954();
  v5 = objc_msgSend((id)objc_opt_self(), sel_containerWithIdentifier_, v4);

  *(_QWORD *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_container] = v5;
  if ((a1 & 1) == 0)
  {
    v8 = qword_1EF999C48;
    v9 = v5;
    if (v8 == -1)
      goto LABEL_5;
    goto LABEL_11;
  }
  v6 = qword_1EF999C30;
  v7 = v5;
  if (v6 != -1)
LABEL_11:
    swift_once();
LABEL_5:
  swift_bridgeObjectRetain();
  v10 = (void *)sub_1CB360954();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v5, sel_codeServiceWithName_, v10);

  v12 = OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_codeService;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_codeService] = v11;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_client] = nullsub_1(v11);
  if (qword_1EF999C60 != -1)
    swift_once();
  v13 = sub_1CB360924();
  __swift_project_value_buffer(v13, (uint64_t)qword_1EF99A4B8);
  v14 = v3;
  v15 = sub_1CB36090C();
  v16 = sub_1CB360A5C();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    *(_DWORD *)v17 = 136315138;
    v25 = v18;
    v19 = objc_msgSend(*(id *)&v3[v12], sel_serviceName);
    v20 = sub_1CB360960();
    v22 = v21;

    sub_1CAFBCB7C(v20, v22, &v25);
    sub_1CB360A80();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CAF47000, v15, v16, "running %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D179C910](v18, -1, -1);
    MEMORY[0x1D179C910](v17, -1, -1);
  }
  else
  {

  }
  v23 = (objc_class *)type metadata accessor for UrsaClient();
  v26.receiver = v14;
  v26.super_class = v23;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t UrsaClient.submitUrsa(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;

  v42 = a8;
  v41 = a7;
  v40 = a6;
  v39 = a5;
  v37 = a4;
  v45 = a12;
  v46 = a13;
  v38 = a11;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B80);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v19;
  v20 = type metadata accessor for UrsaRequest(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v37 - v25;
  v47 = a1;
  v48 = a2;
  v49 = a3;
  v50 = v37;
  v51 = v39;
  v52 = v40;
  v53 = v41;
  v54 = v42;
  v55 = a9;
  v56 = a10;
  v57 = v38;
  v28 = v27;
  sub_1CAFB78E4(&qword_1EF997920, v27, (uint64_t)&unk_1CB3867F8);
  sub_1CB3608A0();
  v29 = sub_1CB360A20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v19, 1, 1, v29);
  v30 = swift_allocObject();
  v31 = v44;
  swift_unknownObjectWeakInit();
  sub_1CAFBD490((uint64_t)v26, (uint64_t)v24, v28);
  v32 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v30;
  sub_1CAFBE320((uint64_t)v24, (uint64_t)v33 + v32, v28);
  v34 = (_QWORD *)((char *)v33 + ((v22 + v32 + 7) & 0xFFFFFFFFFFFFFFF8));
  v35 = v46;
  *v34 = v45;
  v34[1] = v35;
  swift_retain();
  *(_QWORD *)(v31 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask) = sub_1CAFBBA18((uint64_t)v43, (uint64_t)&unk_1EF997B90, (uint64_t)v33);
  swift_release();
  return sub_1CAFBD4D4((uint64_t)v26, v28);
}

uint64_t sub_1CAFB99B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  v8 = sub_1CB360924();
  v7[25] = v8;
  v7[26] = *(_QWORD *)(v8 - 8);
  v7[27] = swift_task_alloc();
  v9 = type metadata accessor for UrsaResponse(0);
  v7[28] = v9;
  v7[29] = *(_QWORD *)(v9 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997C08);
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = swift_task_alloc();
  v7[38] = type metadata accessor for UrsaRequest(0);
  v7[39] = swift_task_alloc();
  v7[40] = swift_task_alloc();
  v7[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B80);
  v7[42] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CAFB9B18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD *v23;
  void (*v25)(void *, _QWORD);
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  NSObject *v77;
  _QWORD *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD, void *);
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t buf;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  _QWORD *v116;
  uint64_t v117[2];

  v1 = (_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 168) + 16;
  v4 = sub_1CB360A20();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = swift_allocObject();
  swift_beginAccess();
  v6 = (void *)MEMORY[0x1D179C994](v3);
  swift_unknownObjectWeakInit();

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v5;
  *(_QWORD *)(v0 + 344) = sub_1CAFBB6E0(v2, (uint64_t)&unk_1EF997C18, (uint64_t)v7);
  if (qword_1EF999C60 != -1)
    swift_once();
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 352) = __swift_project_value_buffer(*(_QWORD *)(v0 + 200), (uint64_t)qword_1EF99A4B8);
  sub_1CAFBD490(v9, v8, type metadata accessor for UrsaRequest);
  v10 = sub_1CB36090C();
  v11 = sub_1CB360A5C();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 328);
  if (v12)
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v117[0] = v15;
    *(_DWORD *)v14 = 136315138;
    sub_1CAFB78E4(&qword_1EF997920, type metadata accessor for UrsaRequest, (uint64_t)&unk_1CB3867F8);
    v16 = sub_1CB360888();
    *(_QWORD *)(v0 + 160) = sub_1CAFBCB7C(v16, v17, v117);
    sub_1CB360A80();
    v1 = (_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease();
    sub_1CAFBD4D4(v13, type metadata accessor for UrsaRequest);
    _os_log_impl(&dword_1CAF47000, v10, v11, "Running request: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D179C910](v15, -1, -1);
    MEMORY[0x1D179C910](v14, -1, -1);
  }
  else
  {
    sub_1CAFBD4D4(*(_QWORD *)(v0 + 328), type metadata accessor for UrsaRequest);
  }

  v18 = *v1 + 16;
  swift_beginAccess();
  v19 = MEMORY[0x1D179C994](v18);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = *(void **)(v19 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_client);
    *(_QWORD *)(v0 + 360) = v21;
    v22 = v21;

    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 368) = v23;
    *v23 = v0;
    v23[1] = sub_1CAFBA8FC;
    return sub_1CAFBE720(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 176), (uint64_t)v22);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 56))(*(_QWORD *)(v0 + 296), 1, 1, *(_QWORD *)(v0 + 224));
  sub_1CB360A38();
  v29 = v1 - 2;
  v30 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 224);
  v32 = *(_QWORD *)(v0 + 232);
  sub_1CAFBE284(*(_QWORD *)(v0 + 296), v30, &qword_1EF997C08);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v30, 1, v31);
  v35 = v34;
  v36 = *(_QWORD *)(v0 + 288);
  if (v35 == 1)
  {
    sub_1CAFBE248(v36, &qword_1EF997C08);
LABEL_19:
    v48 = *(_QWORD *)(v0 + 280);
    v49 = *(_QWORD *)(v0 + 224);
    sub_1CAFBE284(*(_QWORD *)(v0 + 296), v48, &qword_1EF997C08);
    v50 = v33(v48, 1, v49);
    v51 = *(_QWORD *)(v0 + 352);
    v116 = v1;
    if (v50 == 1)
    {
      v115 = v33;
      v52 = *(_QWORD *)(v0 + 312);
      v53 = *(_QWORD *)(v0 + 296);
      v54 = *(_QWORD *)(v0 + 272);
      v55 = *(_QWORD *)(v0 + 208);
      v56 = *(_QWORD *)(v0 + 216);
      v57 = *(_QWORD *)(v0 + 200);
      v58 = *(_QWORD *)(v0 + 176);
      sub_1CAFBE248(*(_QWORD *)(v0 + 280), &qword_1EF997C08);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v51, v57);
      sub_1CAFBD490(v58, v52, type metadata accessor for UrsaRequest);
      sub_1CAFBE284(v53, v54, &qword_1EF997C08);
      v59 = sub_1CB36090C();
      v60 = sub_1CB360A68();
      v61 = os_log_type_enabled(v59, v60);
      v62 = *(_QWORD *)(v0 + 312);
      v63 = *(_QWORD *)(v0 + 272);
      if (v61)
      {
        buf = v60;
        v64 = *(_QWORD *)(v0 + 264);
        v109 = *(_QWORD *)(v0 + 224);
        v65 = swift_slowAlloc();
        v112 = swift_slowAlloc();
        v117[0] = v112;
        *(_DWORD *)v65 = 136315394;
        v66 = sub_1CAFB5014();
        *(_QWORD *)(v0 + 88) = sub_1CAFBCB7C(v66, v67, v117);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBD4D4(v62, type metadata accessor for UrsaRequest);
        *(_WORD *)(v65 + 12) = 2080;
        sub_1CAFBE284(v63, v64, &qword_1EF997C08);
        v68 = v115;
        v69 = v115(v64, 1, v109);
        v70 = *(_QWORD *)(v0 + 264);
        if (v69 == 1)
        {
          v71 = 0x206E776F6E6B6E55;
          sub_1CAFBE248(*(_QWORD *)(v0 + 264), &qword_1EF997C08);
          v72 = 0xEE006E6F73616572;
        }
        else
        {
          v71 = sub_1CAFB5098();
          v72 = v95;
          sub_1CAFBD4D4(v70, type metadata accessor for UrsaResponse);
        }
        v96 = *(_QWORD *)(v0 + 272);
        v97 = *(_QWORD *)(v0 + 208);
        v110 = *(_QWORD *)(v0 + 216);
        v98 = *(_QWORD *)(v0 + 200);
        *(_QWORD *)(v0 + 96) = sub_1CAFBCB7C(v71, v72, v117);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBE248(v96, &qword_1EF997C08);
        _os_log_impl(&dword_1CAF47000, v59, buf, "response for %s failed with: %s", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v112, -1, -1);
        MEMORY[0x1D179C910](v65, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v110, v98);
      }
      else
      {
        v87 = *(_QWORD *)(v0 + 208);
        v86 = *(_QWORD *)(v0 + 216);
        v88 = *(_QWORD *)(v0 + 200);
        sub_1CAFBD4D4(*(_QWORD *)(v0 + 312), type metadata accessor for UrsaRequest);
        sub_1CAFBE248(v63, &qword_1EF997C08);

        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
        v68 = v115;
      }
      v99 = *(_QWORD *)(v0 + 256);
      v100 = *(_QWORD *)(v0 + 224);
      sub_1CAFBE284(*(_QWORD *)(v0 + 296), v99, &qword_1EF997C08);
      v101 = v68(v99, 1, v100);
      v102 = *(_QWORD *)(v0 + 256);
      if (v101 == 1)
      {
        v103 = 0x206E776F6E6B6E55;
        sub_1CAFBE248(*(_QWORD *)(v0 + 256), &qword_1EF997C08);
        v104 = 0xEE006E6F73616572;
      }
      else
      {
        v103 = sub_1CAFB5098();
        v104 = v105;
        sub_1CAFBD4D4(v102, type metadata accessor for UrsaResponse);
      }
      v1 = v116;
      v106 = *(_QWORD *)(v0 + 296);
      sub_1CAFBE2C8();
      v90 = (void *)swift_allocError();
      *v107 = v103;
      v107[1] = v104;
      swift_willThrow();
      sub_1CAFBE248(v106, &qword_1EF997C08);
    }
    else
    {
      v73 = *(_QWORD *)(v0 + 320);
      v74 = *(_QWORD *)(v0 + 280);
      v75 = *(_QWORD *)(v0 + 176);
      v76 = sub_1CAFB513C();
      sub_1CAFBD4D4(v74, type metadata accessor for UrsaResponse);
      sub_1CAFBD490(v75, v73, type metadata accessor for UrsaRequest);
      v77 = sub_1CB36090C();
      v78 = v1;
      v79 = sub_1CB360A68();
      v80 = os_log_type_enabled(v77, v79);
      v81 = *(_QWORD *)(v0 + 320);
      if (v80)
      {
        v82 = swift_slowAlloc();
        v108 = (_QWORD *)swift_slowAlloc();
        v111 = swift_slowAlloc();
        v117[0] = v111;
        *(_DWORD *)v82 = 136315394;
        v83 = sub_1CAFB5014();
        *(v78 - 6) = sub_1CAFBCB7C(v83, v84, v117);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBD4D4(v81, type metadata accessor for UrsaRequest);
        *(_WORD *)(v82 + 12) = 2112;
        type metadata accessor for CKError(0);
        *(v78 - 4) = v76;
        sub_1CAFBC7CC(MEMORY[0x1E0DEE9D8]);
        sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
        sub_1CB3607C8();
        v85 = _swift_stdlib_bridgeErrorToNSError();
        *(v78 - 3) = v85;
        sub_1CB360A80();
        *v108 = v85;
        _os_log_impl(&dword_1CAF47000, v77, v79, "response for %s failed with: %@", (uint8_t *)v82, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997C28);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v108, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v111, -1, -1);
        MEMORY[0x1D179C910](v82, -1, -1);
      }
      else
      {
        sub_1CAFBD4D4(*(_QWORD *)(v0 + 320), type metadata accessor for UrsaRequest);
      }

      v89 = *(_QWORD *)(v0 + 296);
      type metadata accessor for CKError(0);
      *(_QWORD *)(v0 + 112) = v76;
      sub_1CAFBC7CC(MEMORY[0x1E0DEE9D8]);
      sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
      sub_1CB3607C8();
      v90 = *(void **)(v0 + 104);
      swift_willThrow();
      sub_1CAFBE248(v89, &qword_1EF997C08);
      v1 = v116;
    }
    v25 = *(void (**)(void *, _QWORD))(v0 + 184);
    v26 = v90;
    v25(v90, 0);

    goto LABEL_10;
  }
  sub_1CAFBE320(v36, *(_QWORD *)(v0 + 248), type metadata accessor for UrsaResponse);
  if ((sub_1CAFB5060() & 1) == 0)
  {
    sub_1CAFBD4D4(*(_QWORD *)(v0 + 248), type metadata accessor for UrsaResponse);
    goto LABEL_19;
  }
  sub_1CAFBD490(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240), type metadata accessor for UrsaResponse);
  v37 = sub_1CB36090C();
  v38 = sub_1CB360A5C();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 240);
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v114 = swift_slowAlloc();
    v117[0] = v114;
    *(_DWORD *)v41 = 136315138;
    v42 = v1;
    v43 = sub_1CAFBB814();
    v44 = sub_1CAFBE364();
    v45 = MEMORY[0x1D179AA80](v43, v44);
    v47 = v46;
    v1 = v42;
    swift_bridgeObjectRelease();
    *v29 = sub_1CAFBCB7C(v45, v47, v117);
    sub_1CB360A80();
    swift_bridgeObjectRelease();
    sub_1CAFBD4D4(v40, type metadata accessor for UrsaResponse);
    _os_log_impl(&dword_1CAF47000, v37, v38, "response prior to serialization: %s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D179C910](v114, -1, -1);
    MEMORY[0x1D179C910](v41, -1, -1);
  }
  else
  {
    sub_1CAFBD4D4(*(_QWORD *)(v0 + 240), type metadata accessor for UrsaResponse);
  }

  v91 = *(_QWORD *)(v0 + 296);
  v92 = *(_QWORD *)(v0 + 248);
  v93 = *(void (**)(_QWORD, void *))(v0 + 184);
  sub_1CAFBB814();
  sub_1CAFBE364();
  v94 = (void *)sub_1CB3609B4();
  swift_bridgeObjectRelease();
  v93(0, v94);

  sub_1CAFBD4D4(v92, type metadata accessor for UrsaResponse);
  sub_1CAFBE248(v91, &qword_1EF997C08);
LABEL_10:
  v27 = *v1 + 16;
  swift_beginAccess();
  v28 = (char *)MEMORY[0x1D179C994](v27);
  if (v28)
  {
    *(_QWORD *)&v28[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE8);
  sub_1CB360A2C();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBA8FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_1CAFBA968()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  int v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, void *);
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  void (*v78)(void *, _QWORD);
  id v79;
  uint64_t v80;
  char *v81;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91[2];

  v1 = *(void **)(v0 + 376);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 56))(*(_QWORD *)(v0 + 296), 0, 1, *(_QWORD *)(v0 + 224));
  sub_1CB360A38();
  v2 = *(_QWORD *)(v0 + 296);
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 232);
    sub_1CAFBE284(v2, v4, &qword_1EF997C08);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v8 = v7(v4, 1, v6);
    v9 = *(_QWORD *)(v0 + 288);
    if (v8 == 1)
    {
      sub_1CAFBE248(v9, &qword_1EF997C08);
    }
    else
    {
      sub_1CAFBE320(v9, *(_QWORD *)(v0 + 248), type metadata accessor for UrsaResponse);
      if ((sub_1CAFB5060() & 1) != 0)
      {
        sub_1CAFBD490(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240), type metadata accessor for UrsaResponse);
        v10 = sub_1CB36090C();
        v11 = sub_1CB360A5C();
        v12 = os_log_type_enabled(v10, v11);
        v13 = *(_QWORD *)(v0 + 240);
        if (v12)
        {
          v14 = (uint8_t *)swift_slowAlloc();
          v90 = swift_slowAlloc();
          v91[0] = v90;
          *(_DWORD *)v14 = 136315138;
          v15 = sub_1CAFBB814();
          v16 = sub_1CAFBE364();
          v17 = MEMORY[0x1D179AA80](v15, v16);
          v19 = v18;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 152) = sub_1CAFBCB7C(v17, v19, v91);
          sub_1CB360A80();
          swift_bridgeObjectRelease();
          sub_1CAFBD4D4(v13, type metadata accessor for UrsaResponse);
          _os_log_impl(&dword_1CAF47000, v10, v11, "response prior to serialization: %s", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D179C910](v90, -1, -1);
          MEMORY[0x1D179C910](v14, -1, -1);
        }
        else
        {
          sub_1CAFBD4D4(*(_QWORD *)(v0 + 240), type metadata accessor for UrsaResponse);
        }

        v62 = *(_QWORD *)(v0 + 296);
        v63 = *(_QWORD *)(v0 + 248);
        v64 = *(void (**)(_QWORD, void *))(v0 + 184);
        sub_1CAFBB814();
        sub_1CAFBE364();
        v65 = (void *)sub_1CB3609B4();
        swift_bridgeObjectRelease();
        v64(0, v65);

        sub_1CAFBD4D4(v63, type metadata accessor for UrsaResponse);
        sub_1CAFBE248(v62, &qword_1EF997C08);
        goto LABEL_28;
      }
      sub_1CAFBD4D4(*(_QWORD *)(v0 + 248), type metadata accessor for UrsaResponse);
    }
    v20 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD *)(v0 + 224);
    sub_1CAFBE284(*(_QWORD *)(v0 + 296), v20, &qword_1EF997C08);
    v22 = v7(v20, 1, v21);
    v23 = *(_QWORD *)(v0 + 352);
    if (v22 == 1)
    {
      v89 = v7;
      v24 = *(_QWORD *)(v0 + 312);
      v25 = *(_QWORD *)(v0 + 296);
      v26 = *(_QWORD *)(v0 + 272);
      v27 = *(_QWORD *)(v0 + 208);
      v28 = *(_QWORD *)(v0 + 216);
      v29 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 176);
      sub_1CAFBE248(*(_QWORD *)(v0 + 280), &qword_1EF997C08);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v28, v23, v29);
      sub_1CAFBD490(v30, v24, type metadata accessor for UrsaRequest);
      sub_1CAFBE284(v25, v26, &qword_1EF997C08);
      v31 = sub_1CB36090C();
      v32 = sub_1CB360A68();
      v33 = os_log_type_enabled(v31, v32);
      v34 = *(_QWORD *)(v0 + 312);
      v35 = *(_QWORD *)(v0 + 272);
      if (v33)
      {
        v88 = v32;
        v36 = *(_QWORD *)(v0 + 264);
        v83 = *(_QWORD *)(v0 + 224);
        v37 = swift_slowAlloc();
        v86 = swift_slowAlloc();
        v91[0] = v86;
        *(_DWORD *)v37 = 136315394;
        v38 = sub_1CAFB5014();
        *(_QWORD *)(v0 + 88) = sub_1CAFBCB7C(v38, v39, v91);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBD4D4(v34, type metadata accessor for UrsaRequest);
        *(_WORD *)(v37 + 12) = 2080;
        sub_1CAFBE284(v35, v36, &qword_1EF997C08);
        v40 = v89;
        v41 = v89(v36, 1, v83);
        v42 = *(_QWORD *)(v0 + 264);
        if (v41 == 1)
        {
          v43 = 0x206E776F6E6B6E55;
          sub_1CAFBE248(*(_QWORD *)(v0 + 264), &qword_1EF997C08);
          v44 = 0xEE006E6F73616572;
        }
        else
        {
          v43 = sub_1CAFB5098();
          v44 = v66;
          sub_1CAFBD4D4(v42, type metadata accessor for UrsaResponse);
        }
        v67 = *(_QWORD *)(v0 + 272);
        v68 = *(_QWORD *)(v0 + 208);
        v85 = *(_QWORD *)(v0 + 216);
        v69 = *(_QWORD *)(v0 + 200);
        *(_QWORD *)(v0 + 96) = sub_1CAFBCB7C(v43, v44, v91);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBE248(v67, &qword_1EF997C08);
        _os_log_impl(&dword_1CAF47000, v31, v88, "response for %s failed with: %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v86, -1, -1);
        MEMORY[0x1D179C910](v37, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v85, v69);
      }
      else
      {
        v58 = *(_QWORD *)(v0 + 208);
        v59 = *(_QWORD *)(v0 + 216);
        v60 = *(_QWORD *)(v0 + 200);
        sub_1CAFBD4D4(*(_QWORD *)(v0 + 312), type metadata accessor for UrsaRequest);
        sub_1CAFBE248(v35, &qword_1EF997C08);

        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
        v40 = v89;
      }
      v70 = *(_QWORD *)(v0 + 256);
      v71 = *(_QWORD *)(v0 + 224);
      sub_1CAFBE284(*(_QWORD *)(v0 + 296), v70, &qword_1EF997C08);
      v72 = v40(v70, 1, v71);
      v73 = *(_QWORD *)(v0 + 256);
      if (v72 == 1)
      {
        v74 = 0x206E776F6E6B6E55;
        sub_1CAFBE248(*(_QWORD *)(v0 + 256), &qword_1EF997C08);
        v75 = 0xEE006E6F73616572;
      }
      else
      {
        v74 = sub_1CAFB5098();
        v75 = v76;
        sub_1CAFBD4D4(v73, type metadata accessor for UrsaResponse);
      }
      v61 = *(_QWORD *)(v0 + 296);
      sub_1CAFBE2C8();
      v3 = (void *)swift_allocError();
      *v77 = v74;
      v77[1] = v75;
    }
    else
    {
      v45 = *(_QWORD *)(v0 + 320);
      v46 = *(_QWORD *)(v0 + 280);
      v47 = *(_QWORD *)(v0 + 176);
      v48 = sub_1CAFB513C();
      sub_1CAFBD4D4(v46, type metadata accessor for UrsaResponse);
      v49 = v48;
      sub_1CAFBD490(v47, v45, type metadata accessor for UrsaRequest);
      v50 = sub_1CB36090C();
      v51 = sub_1CB360A68();
      v52 = os_log_type_enabled(v50, v51);
      v53 = *(_QWORD *)(v0 + 320);
      if (v52)
      {
        v54 = swift_slowAlloc();
        v84 = (_QWORD *)swift_slowAlloc();
        v87 = swift_slowAlloc();
        v91[0] = v87;
        *(_DWORD *)v54 = 136315394;
        v55 = sub_1CAFB5014();
        *(_QWORD *)(v0 + 120) = sub_1CAFBCB7C(v55, v56, v91);
        sub_1CB360A80();
        swift_bridgeObjectRelease();
        sub_1CAFBD4D4(v53, type metadata accessor for UrsaRequest);
        *(_WORD *)(v54 + 12) = 2112;
        type metadata accessor for CKError(0);
        *(_QWORD *)(v0 + 136) = v49;
        sub_1CAFBC7CC(MEMORY[0x1E0DEE9D8]);
        sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
        sub_1CB3607C8();
        v57 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 144) = v57;
        sub_1CB360A80();
        *v84 = v57;
        _os_log_impl(&dword_1CAF47000, v50, v51, "response for %s failed with: %@", (uint8_t *)v54, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997C28);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v84, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1D179C910](v87, -1, -1);
        MEMORY[0x1D179C910](v54, -1, -1);

      }
      else
      {
        sub_1CAFBD4D4(*(_QWORD *)(v0 + 320), type metadata accessor for UrsaRequest);

      }
      v61 = *(_QWORD *)(v0 + 296);
      type metadata accessor for CKError(0);
      *(_QWORD *)(v0 + 112) = v49;
      sub_1CAFBC7CC(MEMORY[0x1E0DEE9D8]);
      sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
      sub_1CB3607C8();
      v3 = *(void **)(v0 + 104);
    }
    swift_willThrow();
    v2 = v61;
  }
  sub_1CAFBE248(v2, &qword_1EF997C08);
  v78 = *(void (**)(void *, _QWORD))(v0 + 184);
  v79 = v3;
  v78(v3, 0);

LABEL_28:
  v80 = *(_QWORD *)(v0 + 168) + 16;
  swift_beginAccess();
  v81 = (char *)MEMORY[0x1D179C994](v80);
  if (v81)
  {
    *(_QWORD *)&v81[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE8);
  sub_1CB360A2C();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBB410()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, _QWORD);
  id v3;
  uint64_t v4;
  char *v5;

  v1 = *(void **)(v0 + 376);
  v2 = *(void (**)(void *, _QWORD))(v0 + 184);
  v3 = v1;
  v2(v1, 0);

  v4 = *(_QWORD *)(v0 + 168) + 16;
  swift_beginAccess();
  v5 = (char *)MEMORY[0x1D179C994](v4);
  if (v5)
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE8);
  sub_1CB360A2C();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBB5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 40) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 48) = v5;
  *v5 = v4;
  v5[1] = sub_1CAFBB5FC;
  return sub_1CB360A44();
}

uint64_t sub_1CAFBB5FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_1CAFBB668()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x1D179C994](v1);
  if (v2)
  {
    v3 = v2;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x98))();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBB6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1CB360A20();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1CB360A14();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1CAFBE248(a1, &qword_1EF997B80);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CB3609F0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1CAFBB814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for UrsaIssue(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UrsaResponse(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  sub_1CAFBD490(v1, (uint64_t)v8, v10);
  if (v9)
  {
    sub_1CAFBD4D4((uint64_t)v8, type metadata accessor for UrsaResponse);
  }
  else
  {
    v11 = sub_1CAFB5060();
    sub_1CAFBD4D4((uint64_t)v8, type metadata accessor for UrsaResponse);
    if ((v11 & 1) == 0)
      return MEMORY[0x1E0DEE9D8];
  }
  result = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)v1;
  v14 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v14)
  {
    v15 = v13 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v16 = *(_QWORD *)(v3 + 72);
    v18 = v13;
    swift_bridgeObjectRetain();
    do
    {
      sub_1CAFBD490(v15, (uint64_t)v5, type metadata accessor for UrsaIssue);
      sub_1CAFBBEDC();
      sub_1CB360930();
      v17 = swift_bridgeObjectRelease();
      MEMORY[0x1D179AA68](v17);
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CB3609D8();
      sub_1CB3609E4();
      sub_1CB3609CC();
      sub_1CAFBD4D4((uint64_t)v5, type metadata accessor for UrsaIssue);
      v15 += v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

uint64_t sub_1CAFBBA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CB360A20();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1CB360A14();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1CAFBE248(a1, &qword_1EF997B80);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CB3609F0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_1CAFBBCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;

  if (a1)
    v4 = sub_1CB3607D4();
  else
    v4 = 0;
  v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

Swift::Void __swiftcall UrsaClient.cancel()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask))
  {
    swift_retain();
    sub_1CB360A2C();
    swift_release();
  }
}

id UrsaClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void UrsaClient.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UrsaClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UrsaClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CAFBBEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[3];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v32 = 0;
  v1 = sub_1CB360BD0();
  v29 = *(_QWORD *)(v1 - 8);
  v30 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v47 + 1) = type metadata accessor for UrsaIssue(0);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v46);
  sub_1CAFBD490(v0, (uint64_t)boxed_opaque_existential_0, type metadata accessor for UrsaIssue);
  sub_1CB360BB8();
  v28 = v3;
  v5 = sub_1CB360BC4();
  swift_retain();
  v6 = sub_1CB360ABC();
  v27 = v5;
  swift_release();
  v31 = v6;
  sub_1CB360B1C();
  if (*((_QWORD *)&v40 + 1))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v36 = v38;
      v37[0] = v39;
      v37[1] = v40;
      v9 = *((_QWORD *)&v38 + 1);
      v8 = v38;
      v46 = v38;
      sub_1CAFBE0D0((uint64_t)v37, (uint64_t)&v47);
      if (!v9)
        break;
      v10 = 0xE000000000000000;
      v41 = 0;
      v42 = 0xE000000000000000;
      v11 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v11 = v8 & 0xFFFFFFFFFFFFLL;
      v43 = v8;
      v44 = v9;
      *(_QWORD *)&v45 = 0;
      *((_QWORD *)&v45 + 1) = v11;
      swift_bridgeObjectRetain();
      v12 = sub_1CB360990();
      if (v13)
      {
        v14 = v12;
        v15 = v13;
        do
        {
          if ((v15 != 0xE100000000000000 || v14 != 95) && (sub_1CB360B28() & 1) == 0)
            MEMORY[0x1D179AA38](v14, v15);
          swift_bridgeObjectRelease();
          v14 = sub_1CB360990();
          v15 = v16;
        }
        while (v16);
        v8 = v41;
        v10 = v42;
      }
      else
      {
        v8 = 0;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
      if (v10 && (v8 == 0x466E776F6E6B6E75 && v10 == 0xED000073646C6569 || (sub_1CB360B28() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v8 = 0;
        goto LABEL_23;
      }
LABEL_24:
      v46 = v36;
      sub_1CAFBE0D0((uint64_t)v37, (uint64_t)&v47);
      v43 = v8;
      v44 = v10;
      sub_1CAFBE0A0(&v47, &v45);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BF0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
      }
      if (v32)
      {
        sub_1CAFBE248((uint64_t)&v36, &qword_1EF997BA0);
        swift_bridgeObjectRelease();
        swift_release();
        __break(1u);
        goto LABEL_40;
      }
      sub_1CAFBE248((uint64_t)&v36, &qword_1EF997BA0);
      if (*((_QWORD *)&v33 + 1))
      {
        v46 = v33;
        v47 = v34;
        v48 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1CAFBCA58(0, v7[2] + 1, 1, v7);
        v18 = v7[2];
        v17 = v7[3];
        if (v18 >= v17 >> 1)
          v7 = sub_1CAFBCA58((_QWORD *)(v17 > 1), v18 + 1, 1, v7);
        v7[2] = v18 + 1;
        v19 = &v7[6 * v18];
        v20 = v46;
        v21 = v48;
        v19[3] = v47;
        v19[4] = v21;
        v19[2] = v20;
      }
      else
      {
        sub_1CAFBE248((uint64_t)&v33, &qword_1EF997BA8);
      }
      sub_1CB360B1C();
      if (!*((_QWORD *)&v40 + 1))
        goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
LABEL_23:
    v10 = 0;
    goto LABEL_24;
  }
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_34:
  swift_release();
  swift_release();
  if (v7[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B98);
    v22 = sub_1CB360B04();
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9E0];
  }
  *(_QWORD *)&v46 = v22;
  v23 = swift_bridgeObjectRetain();
  v24 = v32;
  sub_1CAFBD54C(v23, 1, &v46);
  if (v24)
  {
LABEL_40:
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = v46;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    return v25;
  }
  return result;
}

uint64_t sub_1CAFBC364()
{
  uint64_t v0;

  v0 = sub_1CB360924();
  __swift_allocate_value_buffer(v0, qword_1EF99A4B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF99A4B8);
  return sub_1CB360918();
}

uint64_t type metadata accessor for UrsaClient()
{
  return objc_opt_self();
}

uint64_t sub_1CAFBC3F0()
{
  sub_1CAFB78E4(&qword_1EF997C58, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E3C);
  return sub_1CB360B64();
}

uint64_t sub_1CAFBC430()
{
  sub_1CAFB78E4(&qword_1EF997C58, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E3C);
  return sub_1CB360B58();
}

uint64_t sub_1CAFBC470()
{
  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  return sub_1CB360780();
}

id sub_1CAFBC4B0()
{
  id *v0;

  return *v0;
}

uint64_t sub_1CAFBC4B8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1CAFBC4C0()
{
  return sub_1CB360960();
}

uint64_t sub_1CAFBC4D0()
{
  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  return sub_1CB3607BC();
}

uint64_t sub_1CAFBC510()
{
  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  return sub_1CB360798();
}

uint64_t sub_1CAFBC550(void *a1)
{
  id v2;

  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  v2 = a1;
  return sub_1CB36078C();
}

uint64_t sub_1CAFBC5B4()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1CB360A74();

  return v2;
}

uint64_t sub_1CAFBC5E8()
{
  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  return sub_1CB3607B0();
}

uint64_t sub_1CAFBC638()
{
  sub_1CB360BA0();
  sub_1CB36093C();
  return sub_1CB360BAC();
}

_QWORD *sub_1CAFBC694@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1CAFBC6A4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1CAFBC6B0()
{
  sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
  return sub_1CB3607A4();
}

BOOL sub_1CAFBC708(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CAFBC71C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1CAFBC780;
  return v6(a1);
}

uint64_t sub_1CAFBC780()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1CAFBC7CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B98);
  v2 = sub_1CB360B04();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CAFBE284(v6, (uint64_t)&v15, &qword_1EF997BE0);
    v7 = v15;
    v8 = v16;
    result = sub_1CAFBD964(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CAFBC914);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1CAFBE0A0(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CAFBC914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1CB360B28() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1CB360B28() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1CB360B28() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

_QWORD *sub_1CAFBCA58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BD8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CAFBDF90(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CAFBCB7C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1CAFBCC4C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1CAFBE0D0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1CAFBE0D0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1CAFBCC4C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1CB360A8C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1CAFBCE04(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1CB360AB0();
  if (!v8)
  {
    sub_1CB360AD4();
    __break(1u);
LABEL_17:
    result = sub_1CB360B10();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1CAFBCE04(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1CAFBCE98(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CAFBD070(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CAFBD070(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1CAFBCE98(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1CAFBD00C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1CB360AA4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1CB360AD4();
      __break(1u);
LABEL_10:
      v2 = sub_1CB36099C();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1CB360B10();
    __break(1u);
LABEL_14:
    result = sub_1CB360AD4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1CAFBD00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997C38);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1CAFBD070(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997C38);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CB360B10();
  __break(1u);
  return result;
}

uint64_t sub_1CAFBD1BC()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  v4 = *((_QWORD *)v0 + 5);
  v5 = *((_QWORD *)v0 + 6);
  v6 = *((_QWORD *)v0 + 7);
  v7 = *((_QWORD *)v0 + 8);
  v8 = *((_QWORD *)v0 + 9);
  v9 = v0[10];
  v10 = *((_QWORD *)v0 + 12);
  v12 = *((_QWORD *)v0 + 11);
  swift_bridgeObjectRetain();
  sub_1CAFB4F3C(v1, v2);
  swift_bridgeObjectRetain();
  sub_1CAFB4F80(v3, v4);
  swift_bridgeObjectRetain();
  sub_1CAFB4FC4(v5, v6);
  swift_bridgeObjectRetain();
  sub_1CAFB4FD0(v7, v8);
  sub_1CAFB502C(v9);
  swift_bridgeObjectRetain();
  return sub_1CAFB5020(v12, v10);
}

uint64_t sub_1CAFBD29C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CAFBD2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UrsaRequest(0) - 8) + 80);
  v2 = (v1 + 40) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  v3 = sub_1CB360810();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CAFBD3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(type metadata accessor for UrsaRequest(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_1CAFBD448;
  return sub_1CAFB99B4((uint64_t)v9, v10, v11, v4, v5, v7, v8);
}

uint64_t sub_1CAFBD448()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CAFBD490(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CAFBD4D4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1CAFBD54C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  id v47;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  sub_1CAFBE284(a1 + 32, (uint64_t)&v44, &qword_1EF997BE0);
  v7 = v44;
  v8 = v45;
  v42 = v44;
  v43 = v45;
  sub_1CAFBE0A0(v46, v41);
  v9 = (_QWORD *)*a3;
  v11 = sub_1CAFBD964(v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CAFBDEB0);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1CAFBD9D0();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v8;
    sub_1CAFBE0A0(v41, (_OWORD *)(v20[7] + 32 * v11));
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 80;
    while (1)
    {
      sub_1CAFBE284(v26, (uint64_t)&v44, &qword_1EF997BE0);
      v28 = v44;
      v27 = v45;
      v42 = v44;
      v43 = v45;
      sub_1CAFBE0A0(v46, v41);
      v29 = (_QWORD *)*a3;
      v30 = sub_1CAFBD964(v28, v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CAFBDEB0);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        sub_1CAFBDBB4(v34, 1);
        v30 = sub_1CAFBD964(v28, v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CAFBDEB0);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = (uint64_t *)(v37[6] + 16 * v30);
      *v38 = v28;
      v38[1] = v27;
      sub_1CAFBE0A0(v41, (_OWORD *)(v37[7] + 32 * v30));
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 48;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1CAFBDBB4(v14, a2 & 1);
  v16 = sub_1CAFBD964(v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CAFBDEB0);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v47 = v18;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1CB360B4C();
  __break(1u);
LABEL_26:
  sub_1CB360A98();
  sub_1CB360984();
  sub_1CB360AC8();
  sub_1CB360984();
  sub_1CB360AE0();
  __break(1u);
}

uint64_t sub_1CAFBD938()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1CAFBD95C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CAFBBCBC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1CAFBD964(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;

  sub_1CB360BA0();
  sub_1CB36096C();
  v5 = sub_1CB360BAC();
  return a3(a1, a2, v5);
}

void *sub_1CAFBD9D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B98);
  v2 = *v0;
  v3 = sub_1CB360AEC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1CAFBE0D0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1CAFBE0A0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CAFBDBB4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997B98);
  v6 = sub_1CB360AF8();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1CAFBE0A0(v24, v35);
      }
      else
      {
        sub_1CAFBE0D0((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1CB360BA0();
      sub_1CB36096C();
      result = sub_1CB360BAC();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1CAFBE0A0(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1CAFBDEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1CB360B28() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1CB360B28() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1CAFBDF90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997BE0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CB360B10();
  __break(1u);
  return result;
}

_OWORD *sub_1CAFBE0A0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1CAFBE0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CAFBE10C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CAFBE130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CAFBE718;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF997BF8 + dword_1EF997BF8))(a1, v4);
}

uint64_t sub_1CAFBE1A0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CAFBE1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1CAFBD448;
  v3[5] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v3[6] = v4;
  *v4 = v3;
  v4[1] = sub_1CAFBB5FC;
  return sub_1CB360A44();
}

uint64_t sub_1CAFBE248(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CAFBE284(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1CAFBE2C8()
{
  unint64_t result;

  result = qword_1EF999C68[0];
  if (!qword_1EF999C68[0])
  {
    result = MEMORY[0x1D179C8BC](&unk_1CB386F90, &type metadata for UrsaClient.CustomUrsaError);
    atomic_store(result, qword_1EF999C68);
  }
  return result;
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_1CAFBE608(a1, &qword_1EF997C40);
}

uint64_t sub_1CAFBE320(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1CAFBE364()
{
  unint64_t result;

  result = qword_1EF997C30;
  if (!qword_1EF997C30)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF997C30);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UrsaClient.CustomUrsaError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UrsaClient.CustomUrsaError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for UrsaClient.CustomUrsaError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for UrsaClient.CustomUrsaError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UrsaClient.CustomUrsaError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UrsaClient.CustomUrsaError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1CAFBE4D4()
{
  return 0;
}

ValueMetadata *type metadata accessor for UrsaClient.CustomUrsaError()
{
  return &type metadata for UrsaClient.CustomUrsaError;
}

uint64_t sub_1CAFBE4EC()
{
  return sub_1CAFB78E4(&qword_1EF997C48, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386D54);
}

uint64_t sub_1CAFBE518()
{
  return sub_1CAFB78E4(&qword_1EF997C50, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386D80);
}

uint64_t sub_1CAFBE544()
{
  return sub_1CAFB78E4(&qword_1EF997C58, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E3C);
}

uint64_t sub_1CAFBE570()
{
  return sub_1CAFB78E4(&qword_1EF997C60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E08);
}

uint64_t sub_1CAFBE59C()
{
  return sub_1CAFB78E4(&qword_1EF997C68, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386DC4);
}

uint64_t sub_1CAFBE5C8()
{
  return sub_1CAFB78E4(&qword_1EF997C70, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CB386F28);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1CAFBE608(a1, &qword_1EF997C90);
}

void sub_1CAFBE608(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1CAFBE64C()
{
  return sub_1CAFB78E4(&qword_1EF997C78, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CB386EEC);
}

unint64_t sub_1CAFBE67C()
{
  unint64_t result;

  result = qword_1EF997C80;
  if (!qword_1EF997C80)
  {
    result = MEMORY[0x1D179C8BC](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF997C80);
  }
  return result;
}

uint64_t sub_1CAFBE6C0()
{
  return sub_1CAFB78E4(&qword_1EF997C88, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CB386F64);
}

uint64_t sub_1CAFBE6EC()
{
  return sub_1CAFB78E4(&qword_1EF997C20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1CB386E80);
}

uint64_t sub_1CAFBE720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CA0);
  v3[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CAFBE780()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[4];
  v1 = v0[5];
  sub_1CAFBE9A8(v0[3], v1);
  v3 = type metadata accessor for UrsaRequest(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 0, 1, v3);
  v4 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CA8));
  v5 = sub_1CB3607EC();
  v0[6] = v5;
  v6 = swift_task_alloc();
  v0[7] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = swift_task_alloc();
  v0[8] = v7;
  *(_QWORD *)(v7 + 16) = v5;
  v8 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v8;
  type metadata accessor for UrsaResponse(0);
  *v8 = v0;
  v8[1] = sub_1CAFBE8A0;
  return sub_1CB360B34();
}

uint64_t sub_1CAFBE8A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1CAFBE914()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBE950()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBE9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UrsaRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CAFBE9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CAFBEA08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  type metadata accessor for UrsaResponse(0);
  *v2 = v0;
  v2[1] = sub_1CAFBEAB0;
  return sub_1CB360B40();
}

uint64_t sub_1CAFBEAB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CAFBEB24()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CAFBEB58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1CAFBD448;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1CAFBEBC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CC8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1CB3607E0();
  return sub_1CB360A50();
}

uint64_t sub_1CAFBECA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];

  v2 = type metadata accessor for UrsaResponse(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CD0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (_QWORD *)((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1CAFBEEE8(a1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9[1] = *v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CC8);
    return sub_1CB3609FC();
  }
  else
  {
    sub_1CAFBEF30((uint64_t)v7, (uint64_t)v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CC8);
    return sub_1CB360A08();
  }
}

id sub_1CAFBEDB4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t sub_1CAFBEDC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CAFBD448;
  return sub_1CAFBE720(a1, a2, v6);
}

ValueMetadata *type metadata accessor for UrsaServiceAPIClient()
{
  return &type metadata for UrsaServiceAPIClient;
}

uint64_t sub_1CAFBEE3C(uint64_t a1)
{
  return sub_1CAFBEBC0(a1);
}

uint64_t sub_1CAFBEE44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CC8);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1CAFBEEA8(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CC8);
  return sub_1CAFBECA4(a1);
}

uint64_t sub_1CAFBEEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF997CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CAFBEF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UrsaResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t bq_sealed(mach_port_t a1)
{
  unsigned __int16 v2;

  v2 = 0;
  if (!controlReadU16(a1, 0, &v2))
    return (v2 >> 13) & 1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    bq_sealed_cold_1();
  return 0xFFFFFFFFLL;
}

uint64_t bq_sleep_mode(uint64_t a1, int a2, int a3)
{
  char v6;
  _BYTE inputStruct[32];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((readBlock(a1, 64, 0, inputStruct, 0) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (a2)
  {
    if ((inputStruct[0] & 0x20) == 0 || a3)
    {
      v6 = inputStruct[0] | 0x20;
      goto LABEL_11;
    }
    return 1;
  }
  if ((inputStruct[0] & 0x20) == 0 && !a3)
    return 1;
  v6 = inputStruct[0] & 0xDF;
LABEL_11:
  inputStruct[0] = v6;
  if ((writeBlock(a1, 64, 0, inputStruct) & 0x80000000) != 0)
    return 4294967294;
  if ((readBlock(a1, 64, 0, inputStruct, 0) & 0x80000000) != 0)
    return 4294967293;
  if (((inputStruct[0] & 0x20) == 0) != a2)
    return 0;
  return 4294967292;
}

uint64_t bq_write_dfchecksum(uint64_t a1, unsigned int a2)
{
  mach_port_t v3;
  _BYTE inputStruct[10];
  __int16 v6;
  uint64_t v7;

  v3 = a1;
  v7 = *MEMORY[0x1E0C80C00];
  if ((readBlock(a1, 57, 0, inputStruct, 0) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v6 = __rev16(a2);
  return ((int)writeBlock(v3, 57, 0, inputStruct) >> 31);
}

uint64_t bq_vlow_enable(uint64_t a1, int a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  uint64_t result;
  unsigned __int16 v12;
  int Block;
  unsigned __int16 v15;
  _BYTE inputStruct[8];
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = controlRead16(a1, 28);
  v5 = v4;
  if (v4 > 0xC602u)
  {
    if (v4 <= 0xCEC5u)
    {
      if (v4 > 0xC71Eu)
      {
        if (v4 > 0xCEBBu)
        {
          if (v4 == 52924)
            goto LABEL_60;
          v9 = 52933;
        }
        else
        {
          if (v4 == 50975)
            goto LABEL_60;
          v9 = 52923;
        }
      }
      else
      {
        if (v4 <= 0xC71Cu)
        {
          if (v4 != 50691)
          {
            v7 = 50692;
            goto LABEL_59;
          }
LABEL_47:
          v10 = (v4 & 0x7FFF) + a2;
          goto LABEL_64;
        }
        if (v4 == 50973)
          goto LABEL_47;
        v9 = 50974;
      }
LABEL_46:
      if (v4 != v9)
        goto LABEL_89;
      goto LABEL_47;
    }
    if (v4 > 0xD401u)
    {
      if (v4 > 0xD743u)
      {
        if (v4 == 55108)
          goto LABEL_47;
        v7 = 55109;
      }
      else
      {
        if (v4 == 54274)
          goto LABEL_47;
        v7 = 54275;
      }
    }
    else
    {
      if (v4 <= 0xD0ABu)
      {
        if (v4 == 52934)
          goto LABEL_60;
        v9 = 53419;
        goto LABEL_46;
      }
      if (v4 == 53420)
        goto LABEL_47;
      v7 = 53421;
    }
LABEL_59:
    if (v4 != v7)
      goto LABEL_89;
LABEL_60:
    v10 = (v4 & 0x7FFF) - (a2 ^ 1);
    goto LABEL_64;
  }
  if (v4 > 0x4EC5u)
  {
    if (v4 > 0x5401u)
    {
      if (v4 > 0x5743u)
      {
        if (v4 == 22340)
          goto LABEL_53;
        v6 = 22341;
      }
      else
      {
        if (v4 == 21506)
          goto LABEL_53;
        v6 = 21507;
      }
    }
    else
    {
      if (v4 <= 0x50ABu)
      {
        if (v4 != 20166)
        {
          v8 = 20651;
          goto LABEL_42;
        }
        goto LABEL_51;
      }
      if (v4 == 20652)
        goto LABEL_61;
      v6 = 20653;
    }
LABEL_50:
    if (v4 == v6)
      goto LABEL_51;
LABEL_89:
    if ((v4 & 0x8000u) != 0)
      return 4294967289;
    else
      return 4294967290;
  }
  if (v4 > 0x471Eu)
  {
    if (v4 > 0x4EBBu)
    {
      if (v4 != 20156)
      {
        v8 = 20165;
LABEL_42:
        if (v4 != v8)
          goto LABEL_89;
        goto LABEL_53;
      }
    }
    else if (v4 != 18207)
    {
      v8 = 20155;
      goto LABEL_42;
    }
LABEL_51:
    if ((a2 & 1) != 0)
      return 1;
    v10 = v4 - 1;
    goto LABEL_64;
  }
  if (v4 > 0x471Cu)
  {
    if (v4 == 18205)
      goto LABEL_53;
LABEL_61:
    if (a2)
      v10 = v4 + 1;
    else
      v10 = v4 - 1;
    goto LABEL_64;
  }
  if (v4 != 17923)
  {
    v6 = 17924;
    goto LABEL_50;
  }
LABEL_53:
  if (!a2)
    return 4294967292;
  v10 = v4 + 1;
LABEL_64:
  if ((readBlock(a1, 49, 0, inputStruct, 0) & 0x80000000) != 0)
    return 4294967294;
  if (v18 != a2)
  {
    v18 = a2;
    if ((writeBlock(a1, 49, 0, inputStruct) & 0x80000000) == 0)
    {
      Block = readBlock(a1, 49, 0, inputStruct, 0);
      result = 4294967294;
      if (Block < 0 || v18 != a2)
        return result;
      goto LABEL_78;
    }
    return 4294967294;
  }
  if ((v5 & 0x8000) == 0)
  {
    if (v5 != 20652 && v5 != 18206)
      return 4294967290;
    v12 = controlRead16(a1, 28);
    if (v12 != v5 || (__int16)v12 <= -1)
      return 4294967293;
    else
      return 1;
  }
LABEL_78:
  if ((bq_write_dfchecksum(a1, v10) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v15 = controlRead16(a1, 28);
  if (v10 != v15 || (__int16)v15 <= -1)
    return 4294967293;
  else
    return 0;
}

uint64_t gasgauge_swupdate()
{
  return gasgauge_swupdate_log(0);
}

uint64_t gasgauge_swupdate_log(uint64_t (*a1)())
{
  uint64_t (*v1)();
  uint8_t v3[16];
  size_t v4;
  _BYTE v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1;
  else
    v1 = log_default;
  v4 = 64;
  if (sysctlbyname("hw.model", v5, &v4, 0, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      gasgauge_swupdate_log_cold_1();
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "No gas gauge update for this platform.", v3, 2u);
    }
    ((void (*)(const char *))v1)("No gas gauge update for this platform.");
    return 0;
  }
}

uint64_t log_default()
{
  return 0;
}

uint64_t gasgauge_start_update_thread()
{
  return startUpdateThread(0);
}

uint64_t gasgauge_info(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 24);
  *a4 = *(_DWORD *)(result + 4);
  *a3 = *(_DWORD *)(result + 16);
  return result;
}

unsigned int *gasgauge_open()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[9];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (!okToLoad())
    return 0;
  v0 = (unsigned int *)malloc(0x18uLL);
  if (v0)
  {
    v1 = ggctl_connect(0);
    *v0 = v1;
    if ((_DWORD)v1)
    {
      v2 = v1;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v5 = 0u;
      memset(v4, 0, sizeof(v4));
      ggctl_get_device_configuration(v1, v4);
      if (!ggctl_map_currentlog(v2, (_QWORD *)v0 + 1))
      {
        v0[4] = 0;
        v0[1] = HIDWORD(v5);
        return v0;
      }
      ggctl_disconnect(*v0);
    }
    free(v0);
    return 0;
  }
  return v0;
}

void gasgauge_close(_QWORD *a1)
{
  if (a1)
  {
    if (a1[1])
    {
      MEMORY[0x1D179B1B8](*(unsigned int *)a1, 0, *MEMORY[0x1E0C83DA0]);
      a1[1] = 0;
    }
    ggctl_disconnect(*(unsigned int *)a1);
    free(a1);
  }
}

uint64_t gasgauge_currentlog_interval(uint64_t a1)
{
  _BYTE *v1;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (!*(_DWORD *)a1)
    return 0xFFFFFFFFLL;
  v1 = *(_BYTE **)(a1 + 8);
  if (!v1)
    return 0xFFFFFFFFLL;
  if (*v1)
    return *(unsigned int *)(a1 + 4);
  return 1;
}

uint64_t gasgauge_currentlog_sleepinterval(uint64_t a1)
{
  _BYTE *v1;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (!*(_DWORD *)a1)
    return 0xFFFFFFFFLL;
  v1 = *(_BYTE **)(a1 + 8);
  if (!v1)
    return 0xFFFFFFFFLL;
  if (*v1)
    return 30;
  return 0;
}

uint64_t gasgauge_currentlog_start__(unsigned int *a1, int a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  v4 = *a1;
  if (!(_DWORD)v4)
    return 0xFFFFFFFFLL;
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  if (!v5)
    return 0xFFFFFFFFLL;
  if (a2)
    *v5 = 1;
  if (!*v5)
    goto LABEL_17;
  v6 = a3 & 3;
  v7 = ggctl_open_device(v4, 1, v6 == 1);
  if ((v7 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v8 = v7;
  if (v6 == 1)
  {
    v9 = ggctl_drainDataLog(v7);
    if ((_DWORD)v9)
    {
      v10 = v9;
      ggctl_close_device(*a1, v8);
      goto LABEL_14;
    }
  }
  v10 = ggctl_enable_currentlog(*a1, 1u);
  ggctl_close_device(*a1, v8);
  if ((_DWORD)v10)
  {
LABEL_14:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      gasgauge_currentlog_start___cold_1();
    return v10;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
LABEL_17:
  a1[4] = *((_DWORD *)v5 + 6);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v12 = *v5;
    v15 = 67109120;
    v16 = v12;
    _os_log_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "data log supported: %d", (uint8_t *)&v15, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v13 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 4);
    v15 = 67109120;
    v16 = v13;
    _os_log_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "data log clients: %d", (uint8_t *)&v15, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v14 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 24);
    v15 = 67109120;
    v16 = v14;
    _os_log_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "data log entries: %u", (uint8_t *)&v15, 8u);
  }
  return 0;
}

uint64_t gasgauge_currentlog_start(unsigned int *a1)
{
  return gasgauge_currentlog_start__(a1, 0, 1);
}

uint64_t gasgauge_currentlog_start_collection(unsigned int *a1, char a2)
{
  return gasgauge_currentlog_start__(a1, 0, a2);
}

uint64_t gasgauge_currentlog_stop(uint64_t a1)
{
  mach_port_t v2;
  _BYTE *v3;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = *(_DWORD *)a1;
  if (!v2)
    return 4294967293;
  v3 = *(_BYTE **)(a1 + 8);
  if (!v3)
    return 4294967293;
  if (!*v3)
    return 0;
  result = ggctl_enable_currentlog(v2, 0);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      gasgauge_currentlog_stop_cold_1();
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gasgauge_currentlog_entries(unsigned int *a1, uint64_t a2, unint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;

  v4 = 4294967294;
  if (!a1 || !a3)
    return v4;
  v7 = *a1;
  if (!(_DWORD)v7)
    return 4294967293;
  v8 = *((_QWORD *)a1 + 1);
  if (!v8)
    return 4294967293;
  v9 = a2;
  v10 = a4 & 3;
  if (!*(_BYTE *)v8)
  {
    if (v10 != 1)
      return v4;
    if (!a2)
    {
      v4 = 0;
      *a3 = 1;
      return v4;
    }
    if (!*a3)
      return 0;
    v17 = ggctl_open_device(v7, 1, 1);
    if ((v17 & 0x80000000) == 0)
    {
      v12 = v17;
      v18 = ggctl_hdqRead16(v17, 20);
      if (v18 < 0)
      {
        v4 = v18 & (v18 >> 31);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          gasgauge_currentlog_entries_cold_1();
      }
      else
      {
        *(_DWORD *)v9 = 0;
        gettimeofday((timeval *)(v9 + 8), 0);
        v4 = 0;
        --*(_QWORD *)(v9 + 8);
        *a3 = 1;
      }
      goto LABEL_38;
    }
    return 0xFFFFFFFFLL;
  }
  if (v10 == 1)
  {
    v11 = ggctl_open_device(v7, 1, 1);
    if ((v11 & 0x80000000) == 0)
    {
      v12 = v11;
      v13 = ggctl_drainDataLog(v11);
      v14 = a1[4];
      v8 = *((_QWORD *)a1 + 1);
      v15 = (_DWORD *)(v8 + 24);
      if (v14 <= *(_DWORD *)(v8 + 24))
      {
        v4 = v13;
        if ((_DWORD)v13)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            gasgauge_currentlog_entries_cold_2();
LABEL_38:
          ggctl_close_device(*a1, v12);
          return v4;
        }
        goto LABEL_23;
      }
      return 4294967292;
    }
    return 0xFFFFFFFFLL;
  }
  v14 = a1[4];
  v15 = (_DWORD *)(v8 + 24);
  if (v14 > *(_DWORD *)(v8 + 24))
    return 4294967292;
  v12 = 0xFFFFFFFFLL;
LABEL_23:
  if (v9)
  {
    v19 = (_DWORD *)(v8 + 24);
    if (v14 >= *(_DWORD *)(v8 + 24))
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      do
      {
        if (v20 >= *a3)
          break;
        v21 = a1[1];
        if (*v19 - v14 > v21)
          v14 = *v19 - v21;
        a1[4] = v14 + 1;
        ++v20;
        v22 = v8 + 24 * (int)(v14 % v21);
        v23 = *(_OWORD *)(v22 + 32);
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(v22 + 48);
        *(_OWORD *)v9 = v23;
        v9 += 24;
        v14 = a1[4];
        v8 = *((_QWORD *)a1 + 1);
        v19 = (_DWORD *)(v8 + 24);
      }
      while (v14 < *(_DWORD *)(v8 + 24));
    }
  }
  else
  {
    v24 = a1[1];
    if (*v15 - v14 < v24)
      v24 = *v15 - v14;
    v20 = v24;
  }
  v4 = 0;
  *a3 = v20;
  if ((_DWORD)v12 != -1)
    goto LABEL_38;
  return v4;
}

uint64_t gasgauge_currentlog_get_entries(unsigned int *a1, uint64_t a2, unint64_t *a3)
{
  return gasgauge_currentlog_entries(a1, a2, a3, 1);
}

uint64_t gasgauge_sn(mach_port_t *a1, char *a2, unsigned int a3)
{
  uint64_t Block;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _OWORD v12[22];
  char __src[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, sizeof(v12));
  if (ggctl_get_device_configuration(*a1, v12))
    return 4294967274;
  v7 = ggctl_open_device(*a1, 1, 1);
  if ((v7 & 0x80000000) != 0)
    return 4294967277;
  v8 = v7;
  if (LODWORD(v12[0]))
    v9 = LODWORD(v12[0]);
  else
    v9 = 2;
  Block = readBlock(v7, 0xFFFFFFFFLL, v9, __src, 0);
  if ((Block & 0x80000000) != 0)
  {
    memset(__src, 48, 6);
    Block = 4294967291;
  }
  ggctl_close_device(*a1, v8);
  if (a3 >= 0x12)
    v10 = 18;
  else
    v10 = a3;
  strncpy(a2, __src, v10);
  return Block;
}

uint64_t gasgauge_disconnect(mach_port_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[21];
  __int128 v6;

  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  if (ggctl_get_device_configuration(*a1, v5))
    return 4294967274;
  if (!DWORD1(v6))
    return 0;
  v3 = ggctl_open_device(*a1, 1, 1);
  if ((v3 & 0x80000000) != 0)
    return 4294967277;
  v4 = v3;
  result = gaugeDisconnect(v3);
  if ((result & 0x80000000) == 0)
  {
    ggctl_close_device(*a1, v4);
    return 4294967282;
  }
  return result;
}

uint64_t gasgauge_watch()
{
  return 0xFFFFFFFFLL;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void bq_sealed_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "could not read gas gauge control status", v0, 2u);
  OUTLINED_FUNCTION_1();
}

void gasgauge_swupdate_log_cold_1()
{
  int *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = __error();
  v1 = strerror(*v0);
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_1CAF47000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "could not find hw.model: %s", (uint8_t *)&v2, 0xCu);
}

void gasgauge_currentlog_start___cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1CAF47000, MEMORY[0x1E0C81028], v0, "cannot enable current log (%d)", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

void gasgauge_currentlog_stop_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1CAF47000, MEMORY[0x1E0C81028], v0, "cannot disable currentlog %#x", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

void gasgauge_currentlog_entries_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1CAF47000, MEMORY[0x1E0C81028], v0, "cannot read average current (%d)", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

void gasgauge_currentlog_entries_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1CAF47000, MEMORY[0x1E0C81028], v0, "cannot drain data log (%d)", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

uint64_t ggctl_connect(io_object_t *a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  io_object_t v5;
  kern_return_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  io_connect_t connect;

  connect = 0;
  v2 = *MEMORY[0x1E0CBBAA8];
  v3 = IOServiceMatching("AppleHDQGasGaugeControl");
  MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    v5 = MatchingService;
    v6 = IOServiceOpen(MatchingService, *MEMORY[0x1E0C83DA0], 0, &connect);
    if (v6)
    {
      v7 = v6;
      v8 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
        ggctl_connect_cold_2(v7, v8, v9);
      connect = 0;
    }
    if (a1)
      *a1 = v5;
    else
      IOObjectRelease(v5);
    return connect;
  }
  else
  {
    v10 = logger;
    result = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      ggctl_connect_cold_1(v10, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t ggctl_disconnect(uint64_t connect)
{
  if ((_DWORD)connect)
    return IOServiceClose(connect);
  return connect;
}

void ggctl_reset(mach_port_t a1, unsigned int a2)
{
  kern_return_t v2;
  NSObject *v3;
  uint8_t buf[8];
  uint64_t input;

  input = a2;
  v2 = IOConnectCallMethod(a1, 0, &input, 1u, 0, 0, 0, 0, 0, 0);
  v3 = logger;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      ggctl_reset_cold_1();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CAF47000, v3, OS_LOG_TYPE_DEFAULT, "gas gauge: reset", buf, 2u);
    }
    ++gauge_reset_count;
  }
}

uint64_t ggctl_get_hdq_state(mach_port_t a1)
{
  kern_return_t v1;
  uint32_t outputCnt;
  uint64_t output;

  output = 0;
  outputCnt = 1;
  v1 = IOConnectCallMethod(a1, 1u, 0, 0, 0, 0, &output, &outputCnt, 0, 0);
  if (v1 == -536870183)
    return 4294967294;
  if (v1)
    return 0xFFFFFFFFLL;
  return output != 0;
}

uint64_t ggctl_get_device_configuration(mach_port_t a1, void *outputStruct)
{
  size_t outputStructCnt;

  outputStructCnt = 352;
  return IOConnectCallStructMethod(a1, 2u, 0, 0, outputStruct, &outputStructCnt);
}

uint64_t ggctl_enable_currentlog(mach_port_t a1, unsigned int a2)
{
  uint64_t input;

  input = a2;
  return IOConnectCallScalarMethod(a1, 3u, &input, 1u, 0, 0);
}

uint64_t ggctl_map_currentlog(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  result = MEMORY[0x1D179B1AC](a1, 0, *MEMORY[0x1E0C83DA0], &v6, &v5, 1);
  v4 = v6;
  if ((_DWORD)result)
    v4 = 0;
  *a2 = v4;
  return result;
}

uint64_t ggctl_open_device(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int hdq_state;
  NSObject *v5;

  v3 = a1;
  if (!a3)
    return v3;
  hdq_state = ggctl_get_hdq_state(a1);
  if (hdq_state < 0)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      ggctl_open_device_cold_2();
  }
  else
  {
    if (hdq_state)
    {
      if (IOConnectCallScalarMethod(v3, 6u, 0, 0, 0, 0)
        && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      {
        ggctl_open_device_cold_4();
      }
      return v3;
    }
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      ggctl_open_device_cold_3();
    ggctl_reset(v3, 1u);
  }
  v5 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    ggctl_open_device_cold_1(v5);
  return 0xFFFFFFFFLL;
}

uint64_t hdqBreak(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;

  v1 = IOConnectCallScalarMethod(a1, 6u, 0, 0, 0, 0);
  if (v1 == -536870183)
    v2 = -2;
  else
    v2 = -1;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t ggctl_hdqBreak(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;

  v1 = IOConnectCallScalarMethod(a1, 6u, 0, 0, 0, 0);
  if (v1 == -536870183)
    v2 = -2;
  else
    v2 = -1;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t ggctl_hdqRead8(mach_port_t a1, int a2)
{
  uint32_t outputCnt;
  uint64_t input;
  int64x2_t v5;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  input = a2;
  v5 = vdupq_n_s64(8uLL);
  outputCnt = 1;
  if (IOConnectCallScalarMethod(a1, 7u, &input, 3u, output, &outputCnt))
    return 0xFFFFFFFFLL;
  else
    return LODWORD(output[0]);
}

uint64_t ggctl_hdqRead16(mach_port_t a1, int a2)
{
  uint64_t v3;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v3 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v3, 1u, output, &outputCnt))
    return 0xFFFFFFFFLL;
  else
    return LODWORD(output[0]);
}

uint64_t ggctl_hdqWrite8(mach_port_t a1, char a2, unsigned __int8 a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = a2 & 0x7F | (a3 << 8) | 0x80u;
  v5 = xmmword_1CB387050;
  if (IOConnectCallScalarMethod(a1, 7u, &v4, 3u, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t ggctl_controlRead16(mach_port_t a1, int a2)
{
  uint64_t v3;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v3 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v3, 1u, output, &outputCnt))
    return 0xFFFFFFFFLL;
  else
    return LODWORD(output[0]);
}

uint64_t ggctl_controlWrite16(mach_port_t a1, int a2, int a3)
{
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t ggctl_readBlock(mach_port_t a1, int a2, int a3, void *outputStruct, _BYTE *a5)
{
  uint64_t result;
  size_t v7;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  output = 0;
  outputCnt = 1;
  v7 = 32;
  if (IOConnectCallMethod(a1, 9u, input, 2u, 0, 0, &output, &outputCnt, outputStruct, &v7))
    return 0xFFFFFFFFLL;
  result = 0;
  if (a5)
    *a5 = output;
  return result;
}

uint64_t ggctl_writeBlock(mach_port_t a1, int a2, int a3, void *inputStruct)
{
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallMethod(a1, 0xFu, input, 2u, inputStruct, 0x20uLL, 0, 0, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t ggctl_drainDataLog(mach_port_t a1)
{
  if (IOConnectCallMethod(a1, 0xEu, 0, 0, 0, 0, 0, 0, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t ggctl_gaugeInterrupts(mach_port_t a1, unsigned int a2)
{
  kern_return_t v2;
  unsigned int v3;
  uint64_t input;

  input = a2;
  v2 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v2 == -536870183)
    v3 = -2;
  else
    v3 = -1;
  if (v2)
    return v3;
  else
    return 0;
}

CFDictionaryRef pmps_service()
{
  CFDictionaryRef result;
  CFDictionaryRef v1;
  __CFDictionary *v2;
  void *keys;

  keys = CFSTR("built-in");
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (result)
  {
    v1 = result;
    v2 = IOServiceMatching("IOPMPowerSource");
    CFDictionarySetValue(v2, CFSTR("IOPropertyMatch"), v1);
    CFRelease(v1);
    return (CFDictionaryRef)IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v2);
  }
  return result;
}

uint64_t uart_open_device(uint64_t a1, uint64_t a2, int a3)
{
  return ggctl_open_device(a1, 0, a3);
}

uint64_t hdqRead16(mach_port_t a1, int a2)
{
  uint64_t v3;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v3 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v3, 1u, output, &outputCnt))
    return 0xFFFFFFFFLL;
  else
    return LODWORD(output[0]);
}

uint64_t hdqWrite8(mach_port_t a1, char a2, unsigned __int8 a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = a2 & 0x7F | (a3 << 8) | 0x80u;
  v5 = xmmword_1CB387050;
  if (IOConnectCallScalarMethod(a1, 7u, &v4, 3u, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t controlOp16(mach_port_t a1, int a2)
{
  uint64_t input;

  input = a2;
  if (IOConnectCallScalarMethod(a1, 0xAu, &input, 1u, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t controlRead16(mach_port_t a1, int a2)
{
  uint64_t v3;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v3 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v3, 1u, output, &outputCnt))
    return 0xFFFFFFFFLL;
  else
    return LODWORD(output[0]);
}

uint64_t controlWrite16(mach_port_t a1, int a2, int a3)
{
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t writeBlock(mach_port_t a1, int a2, int a3, void *inputStruct)
{
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallMethod(a1, 0xFu, input, 2u, inputStruct, 0x20uLL, 0, 0, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t drainDataLog(mach_port_t a1)
{
  if (IOConnectCallMethod(a1, 0xEu, 0, 0, 0, 0, 0, 0, 0, 0))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t gaugeEnableInterrupts(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;
  uint64_t input;

  input = 1;
  v1 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v1 == -536870183)
    v2 = -2;
  else
    v2 = -1;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t gaugeDisableInterrupts(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;
  uint64_t input;

  input = 0;
  v1 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v1 == -536870183)
    v2 = -2;
  else
    v2 = -1;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t gaugeDisconnect(mach_port_t a1)
{
  int i;
  int v3;
  NSObject *v4;
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  uint32_t outputCnt;
  uint64_t input[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)input = xmmword_1CB387060;
  IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0);
  for (i = 0; i != 3; ++i)
  {
    input[0] = 0;
    outputCnt = 1;
    v8 = 23;
    if (IOConnectCallScalarMethod(a1, 0xBu, &v8, 1u, input, &outputCnt))
      v3 = -1;
    else
      v3 = input[0];
    if (!v3)
      break;
    v4 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      LODWORD(input[0]) = 67109376;
      HIDWORD(input[0]) = i;
      LOWORD(input[1]) = 1024;
      *(_DWORD *)((char *)&input[1] + 2) = v3;
      _os_log_error_impl(&dword_1CAF47000, v4, OS_LOG_TYPE_ERROR, "%d: retry OpenProtector (%d)", (uint8_t *)input, 0xEu);
    }
    usleep(0xF4240u);
  }
  v7 = 0;
  input[0] = 0;
  outputCnt = 1;
  v8 = 32;
  IOConnectCallScalarMethod(a1, 0xBu, &v8, 1u, input, &outputCnt);
  if (controlReadU16(a1, 0, &v7))
    return 4294967291;
  if (v3)
    v6 = -36;
  else
    v6 = 0;
  if ((v7 & 0x2000) != 0)
    return v6;
  else
    return 0xFFFFFFFFLL;
}

uint64_t controlReadU16(mach_port_t a1, int a2, _WORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v5 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v5, 1u, output, &outputCnt))
    result = 0xFFFFFFFFLL;
  else
    result = LODWORD(output[0]);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t hdqReadS16(mach_port_t a1, int a2, _WORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v5 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v5, 1u, output, &outputCnt))
    result = 0xFFFFFFFFLL;
  else
    result = LODWORD(output[0]);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t hdqReadU16(mach_port_t a1, int a2, _WORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v5 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v5, 1u, output, &outputCnt))
    result = 0xFFFFFFFFLL;
  else
    result = LODWORD(output[0]);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t hdqReadS8(mach_port_t a1, int a2, _BYTE *a3)
{
  uint64_t result;

  result = ggctl_hdqRead8(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t hdqReadU8(mach_port_t a1, int a2, _BYTE *a3)
{
  uint64_t result;

  result = ggctl_hdqRead8(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t controlReadS16(mach_port_t a1, int a2, _WORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x1E0C80C00];
  output[0] = 0;
  outputCnt = 1;
  v5 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v5, 1u, output, &outputCnt))
    result = 0xFFFFFFFFLL;
  else
    result = LODWORD(output[0]);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = result;
    return 0;
  }
  return result;
}

uint64_t dumpBuffer(unsigned __int8 *a1, int a2)
{
  uint64_t v3;
  int v4;

  if (a2 >= 1)
  {
    v3 = a2;
    do
    {
      v4 = *a1++;
      printf(" %02x", v4);
      --v3;
    }
    while (v3);
  }
  return putchar(10);
}

uint64_t registerName(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0x600)
  {
    if (a2 - 1281 > 1 || (*(_DWORD *)a1 | 4) != 0x1E)
      goto LABEL_8;
    return 0;
  }
  if ((*(_DWORD *)a1 | 2) == 0xE)
    return 0;
LABEL_8:
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2
    && (a2 < 0x600 || (v2 = *(_QWORD *)(a1 + 48)) == 0)
    && (a2 < 0x501 || (v2 = *(_QWORD *)(a1 + 40)) == 0)
    && (a2 < 0x313 || (v2 = *(_QWORD *)(a1 + 32)) == 0)
    && (a2 < 0x132 || (v2 = *(_QWORD *)(a1 + 24)) == 0))
  {
    if (a2 < 0x119)
      return *(_QWORD *)(a1 + 8);
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2)
      return *(_QWORD *)(a1 + 8);
  }
  return v2;
}

uint64_t readRegister(_WORD *a1, uint64_t a2, mach_port_t a3)
{
  int v4;
  uint64_t result;
  uint64_t (*v6)(_WORD *);

  v4 = *(_DWORD *)(a2 + 4);
  result = 0xFFFFFFFFLL;
  if (v4 <= 1)
  {
    if (v4)
    {
      if (v4 == 1)
        return hdqReadU16(a3, *(_DWORD *)a2, a1);
    }
    else
    {
      return hdqReadS16(a3, *(_DWORD *)a2, a1);
    }
  }
  else
  {
    switch(v4)
    {
      case 100:
        v6 = *(uint64_t (**)(_WORD *))(a2 + 64);
        if (v6)
          return v6(a1);
        break;
      case 10:
        return controlReadU16(a3, *(_DWORD *)a2, a1);
      case 2:
        result = ggctl_hdqRead8(a3, *(_DWORD *)a2);
        if ((result & 0x80000000) == 0)
        {
          if (a1)
            *(_BYTE *)a1 = result;
          return 0;
        }
        break;
    }
  }
  return result;
}

uint64_t getFWVersion(mach_port_t a1, __int16 *a2)
{
  __int16 v3;
  uint64_t result;

  v3 = getFWVersion_gFWVersion;
  if (getFWVersion_gFWVersion)
    goto LABEL_2;
  if (!controlReadU16(a1, 2, &getFWVersion_gFWVersion))
  {
    v3 = getFWVersion_gFWVersion;
    if (getFWVersion_gFWVersion == 256)
    {
      v3 = 1536;
      getFWVersion_gFWVersion = 1536;
    }
LABEL_2:
    result = 0;
    *a2 = v3;
    return result;
  }
  return 0xFFFFFFFFLL;
}

double readLifetimeData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  double result;
  __int128 v6;
  __int128 v7;
  unsigned __int16 v8;
  __int128 outputStruct;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  if ((getFWVersion(a3, (__int16 *)&v8) & 0x80000000) == 0
    && v8 >= 0x313u
    && !ggctl_readBlock(a3, -1, 4, &outputStruct, 0))
  {
    v6 = v10;
    *a1 = outputStruct;
    a1[1] = v6;
    if (!ggctl_readBlock(a3, -1, 6, &outputStruct, 0))
    {
      result = *(double *)&outputStruct;
      v7 = v10;
      a1[2] = outputStruct;
      a1[3] = v7;
    }
  }
  return result;
}

double readRaTableData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  double result;
  __int128 v6;
  unsigned __int16 v7;
  _OWORD outputStruct[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  if ((getFWVersion(a3, (__int16 *)&v7) & 0x80000000) == 0
    && v7 >= 0x600u
    && !ggctl_readBlock(a3, -1, 7, outputStruct, 0))
  {
    result = *(double *)outputStruct;
    v6 = outputStruct[1];
    *a1 = outputStruct[0];
    a1[1] = v6;
  }
  return result;
}

double readIMAXAndSOCSmoothData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  double result;
  __int128 v6;
  unsigned __int16 v7;
  _OWORD outputStruct[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  if ((getFWVersion(a3, (__int16 *)&v7) & 0x80000000) == 0
    && v7 >= 0x600u
    && !ggctl_readBlock(a3, -1, 8, outputStruct, 0))
  {
    result = *(double *)outputStruct;
    v6 = outputStruct[1];
    *a1 = outputStruct[0];
    a1[1] = v6;
  }
  return result;
}

uint64_t findRaWeightMulitplier(int a1)
{
  uint64_t v1;

  v1 = 0;
  while ((unsigned __int16)battery_health_metric_config[v1] != a1)
  {
    v1 += 4;
    if (v1 == 68)
      return 0;
  }
  return *(unsigned int *)&battery_health_metric_config[v1 + 2];
}

float calculateWra(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int16 a9)
{
  return (double)a2 * 0.137995
       + (double)a1 * 0.0693069
       + (double)a3 * 0.137376
       + (double)a4 * 0.137376
       + (double)a5 * 0.137376
       + (double)a6 * 0.137376
       + (double)a7 * 0.137376
       + (double)a8 * 0.0872525
       + (double)a9 * 0.0185644;
}

float calculateChemicalWeightedRa(unsigned int a1, float a2)
{
  return (float)((float)a1 * a2) / 1000.0;
}

CFDictionaryRef readShutdownReasonData(mach_port_t a1)
{
  NSObject *v2;
  const char *v3;
  _OWORD v5[2];
  __int128 v6;
  int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  _OWORD v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  memset(v12, 0, sizeof(v12));
  if (ggctl_logShutdownReason(a1, (uint64_t)v5, 1u))
  {
    v2 = logger;
    if (!os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)buf = 136315394;
    v9 = "readShutdownReasonData";
    v10 = 1024;
    v11 = 2502;
    v3 = "%s:%d cannot read data";
LABEL_4:
    _os_log_impl(&dword_1CAF47000, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x12u);
    return 0;
  }
  if (!*((_QWORD *)&v6 + 1))
  {
    v2 = logger;
    if (!os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)buf = 136315394;
    v9 = "readShutdownReasonData";
    v10 = 1024;
    v11 = 2506;
    v3 = "%s:%d invalid timestamp";
    goto LABEL_4;
  }
  return parseShutdownReason((__int16 *)v5, (const UInt8 *)v12, a1);
}

uint64_t ggctl_logShutdownReason(mach_port_t a1, uint64_t a2, unsigned int a3)
{
  kern_return_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t input;
  uint64_t v9;
  size_t v10;
  __int128 outputStruct;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD inputStruct[3];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = 64;
  if (!a2)
    return 0xFFFFFFFFLL;
  if ((a3 & 1) != 0)
  {
    v13 = 0u;
    v14 = 0u;
    outputStruct = 0u;
    v12 = 0u;
    input = a3;
    v4 = IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x40uLL, 0, 0, &outputStruct, &v10);
    if (!v4)
    {
      v5 = v12;
      *(_OWORD *)a2 = outputStruct;
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v13;
      *(_DWORD *)(a2 + 48) = v14;
    }
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    inputStruct[0] = *(_OWORD *)a2;
    inputStruct[1] = v7;
    inputStruct[2] = *(_OWORD *)(a2 + 32);
    v16 = *(_DWORD *)(a2 + 48);
    v9 = a3;
    v4 = IOConnectCallMethod(a1, 0x11u, &v9, 1u, inputStruct, 0x40uLL, 0, 0, &outputStruct, &v10);
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

CFDictionaryRef parseShutdownReason(__int16 *a1, const UInt8 *a2, mach_port_t a3)
{
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t valuePtr;
  uint64_t input;
  size_t v37;
  void *keys[23];
  __int128 v39;
  __int128 v40;
  const __CFString *v41;
  void *values[22];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  UInt8 bytes[16];
  __int128 v47;
  uint64_t v48;
  __int128 outputStruct;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  keys[0] = CFSTR("ShutDownTimestamp");
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *((_QWORD *)a1 + 5);
  values[0] = CFNumberCreate(v6, kCFNumberLongType, &valuePtr);
  keys[1] = CFSTR("ShutDownUISoc");
  v34 = *((_DWORD *)a1 + 12);
  values[1] = CFNumberCreate(v6, kCFNumberFloatType, &v34);
  keys[2] = CFSTR("ShutDownTemperature");
  v33 = *a1;
  values[2] = CFNumberCreate(v6, kCFNumberIntType, &v33);
  keys[3] = CFSTR("ShutDownPresentDOD");
  v32 = a1[1];
  values[3] = CFNumberCreate(v6, kCFNumberIntType, &v32);
  keys[4] = CFSTR("ShutDownMaxRa08");
  v31 = a1[2];
  values[4] = CFNumberCreate(v6, kCFNumberIntType, &v31);
  keys[5] = CFSTR("ShutDownNominalChargeCapacity");
  v30 = (unsigned __int16)a1[3];
  values[5] = CFNumberCreate(v6, kCFNumberIntType, &v30);
  keys[6] = CFSTR("ShutDownPrevNominalChargeCapacity");
  v29 = (unsigned __int16)a1[4];
  values[6] = CFNumberCreate(v6, kCFNumberIntType, &v29);
  keys[7] = CFSTR("ShutDownFullChargeCapacity");
  v28 = a1[5];
  values[7] = CFNumberCreate(v6, kCFNumberIntType, &v28);
  keys[8] = CFSTR("ShutDownPrevFullChargeCapacity");
  v27 = a1[6];
  values[8] = CFNumberCreate(v6, kCFNumberIntType, &v27);
  keys[9] = CFSTR("ShutDownRemainingCapacity");
  v26 = a1[7];
  values[9] = CFNumberCreate(v6, kCFNumberIntType, &v26);
  keys[10] = CFSTR("ShutDownPrevRemainingCapacity");
  v25 = a1[8];
  values[10] = CFNumberCreate(v6, kCFNumberIntType, &v25);
  keys[11] = CFSTR("ShutDownCycleCount");
  v24 = (unsigned __int16)a1[9];
  values[11] = CFNumberCreate(v6, kCFNumberIntType, &v24);
  keys[12] = CFSTR("ShutDownMaxDischargeCurrent");
  v23 = a1[10];
  values[12] = CFNumberCreate(v6, kCFNumberIntType, &v23);
  keys[13] = CFSTR("ShutDownTimeAbove95");
  v22 = *((unsigned __int8 *)a1 + 22);
  values[13] = CFNumberCreate(v6, kCFNumberIntType, &v22);
  keys[14] = CFSTR("ShutDownVoltage");
  v21 = *(__int16 *)((char *)a1 + 23);
  values[14] = CFNumberCreate(v6, kCFNumberIntType, &v21);
  keys[15] = CFSTR("ShutDownPrevVoltage");
  v20 = *(__int16 *)((char *)a1 + 25);
  values[15] = CFNumberCreate(v6, kCFNumberIntType, &v20);
  keys[16] = CFSTR("ShutDownAverageCurrent");
  v19 = *(__int16 *)((char *)a1 + 27);
  values[16] = CFNumberCreate(v6, kCFNumberIntType, &v19);
  keys[17] = CFSTR("ShutDownPrevAverageCurrent");
  v18 = *(__int16 *)((char *)a1 + 29);
  values[17] = CFNumberCreate(v6, kCFNumberIntType, &v18);
  keys[18] = CFSTR("ShutDownCycleCountLastQmax");
  v17 = *((unsigned __int8 *)a1 + 31);
  values[18] = CFNumberCreate(v6, kCFNumberIntType, &v17);
  keys[19] = CFSTR("ShutDownResScale");
  v16 = (unsigned __int16)a1[16];
  values[19] = CFNumberCreate(v6, kCFNumberIntType, &v16);
  keys[20] = CFSTR("ShutDownQstart");
  v15 = a1[17];
  values[20] = CFNumberCreate(v6, kCFNumberIntType, &v15);
  keys[21] = CFSTR("ShutDownPassedCharge");
  v14 = a1[18];
  values[21] = CFNumberCreate(v6, kCFNumberIntType, &v14);
  keys[22] = CFSTR("ShutDownDOD0");
  v13 = (unsigned __int16)a1[19];
  *(_QWORD *)&v43 = CFNumberCreate(v6, kCFNumberIntType, &v13);
  *(_QWORD *)&v39 = CFSTR("Raw");
  *((_QWORD *)&v43 + 1) = CFDataCreate(v6, (const UInt8 *)a1, 52);
  v48 = 0;
  *(_OWORD *)bytes = 0u;
  v47 = 0u;
  v37 = 40;
  v51 = 0;
  outputStruct = 0u;
  v50 = 0u;
  input = 1;
  if (!IOConnectCallMethod(a3, 0x12u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v37))
  {
    *(_OWORD *)bytes = outputStruct;
    v47 = v50;
    v48 = v51;
  }
  *((_QWORD *)&v39 + 1) = CFSTR("ShutDownDLog");
  *(_QWORD *)&v44 = CFDataCreate(v6, bytes, 40);
  *(_QWORD *)&v40 = CFSTR("timeSinceAwake");
  v12 = *(_QWORD *)a2;
  *((_QWORD *)&v44 + 1) = CFNumberCreate(v6, kCFNumberLongType, &v12);
  *((_QWORD *)&v40 + 1) = CFSTR("ShutDownRaTableRaw");
  *(_QWORD *)&v45 = CFDataCreate(v6, a2 + 8, 32);
  v41 = CFSTR("ShutDownRSS");
  v11 = *((unsigned __int16 *)a2 + 20);
  *((_QWORD *)&v45 + 1) = CFNumberCreate(v6, kCFNumberIntType, &v11);
  v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 28, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = 27;
  do
  {
    CFRelease(values[v8]);
    v9 = v8-- + 1;
  }
  while (v9 > 1);
  return v7;
}

uint64_t writeBatteryDiagnosticData(mach_port_t a1)
{
  size_t outputStructCnt;
  _BYTE v4[248];
  _QWORD v5[45];

  v5[44] = *MEMORY[0x1E0C80C00];
  bzero(v4, 0x258uLL);
  outputStructCnt = 352;
  return IOConnectCallStructMethod(a1, 2u, 0, 0, v5, &outputStructCnt);
}

BOOL okToLoad()
{
  stat v1;

  memset(&v1, 0, sizeof(v1));
  return stat("/dev/cu.gas-gauge", &v1) == 0;
}

uint64_t startUpdateThread(unsigned int a1)
{
  uint64_t v2;
  NSObject *v4;
  uint8_t v5[8];
  pthread_t v6;
  stat v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(&v7, 0, sizeof(v7));
  if (stat("/dev/cu.gas-gauge", &v7))
    return 0xFFFFFFFFLL;
  v6 = 0;
  memset(&v7, 0, 64);
  pthread_attr_init((pthread_attr_t *)&v7);
  pthread_attr_setdetachstate((pthread_attr_t *)&v7, 2);
  logger = (uint64_t)os_log_create("com.apple.AppleHDQGasGauge", "battery");
  if (!logger)
    return 0xFFFFFFFFLL;
  v2 = pthread_create(&v6, (const pthread_attr_t *)&v7, (void *(__cdecl *)(void *))updateThread, (void *)a1);
  if ((_DWORD)v2)
  {
    v4 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_1CAF47000, v4, OS_LOG_TYPE_ERROR, "pthread_create", v5, 2u);
      v4 = logger;
    }
    os_release(v4);
  }
  else
  {
    pthread_attr_destroy((pthread_attr_t *)&v7);
  }
  return v2;
}

uint64_t updateThread(uint64_t a1)
{
  _DWORD *v2;
  void **p_vtable;
  NSObject *v4;
  unsigned int v5;
  io_service_t v6;
  mach_port_t v7;
  IONotificationPort *v8;
  __CFRunLoop *Current;
  __CFRunLoopSource *RunLoopSource;
  const __CFString *v11;
  __CFRunLoop *v12;
  __CFRunLoopSource *v13;
  uint64_t v14;
  io_connect_t v15;
  mach_error_t v16;
  BOOL *v17;
  mach_error_t v18;
  NSObject *v19;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  NSObject *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  int Value;
  const __CFBoolean *v29;
  const __CFBoolean *v30;
  CFTypeID v31;
  NSObject *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID v35;
  NSObject *v36;
  const __CFBoolean *v37;
  const __CFBoolean *v38;
  CFTypeID v39;
  NSObject *v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  CFTypeID v43;
  NSObject *v44;
  IONotificationPort *v45;
  kern_return_t v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  __CFRunLoop *v50;
  __CFRunLoopSource *v51;
  NSObject *v52;
  __darwin_time_t v53;
  NSObject *v54;
  int v55;
  char v56;
  int v57;
  int v58;
  double v59;
  double v60;
  int v61;
  mach_port_t v62;
  kern_return_t v63;
  int v64;
  NSObject *v65;
  int v66;
  int v67;
  NSObject *v68;
  CFAbsoluteTime v69;
  _BOOL4 v70;
  _BOOL4 v71;
  char v72;
  double v73;
  double v74;
  NSObject *v75;
  NSObject *v76;
  int v77;
  int v78;
  int v79;
  NSObject *v80;
  int v81;
  NSObject *v82;
  int v83;
  CFTypeRef CFProperty;
  CFTypeRef v85;
  CFTypeID v86;
  int v87;
  unsigned __int8 v88;
  NSObject *v89;
  int v90;
  int hdq_state;
  CFPropertyListRef v92;
  _BOOL4 v93;
  mach_port_t v94;
  int v95;
  void **v96;
  int v97;
  NSObject *v98;
  unsigned int v99;
  int v100;
  int v101;
  NSObject *v102;
  NSObject *v103;
  int v104;
  _BOOL4 v105;
  uint64_t v106;
  int v107;
  int v108;
  CFNumberRef v109;
  CFNumberRef v110;
  int v111;
  BOOL v112;
  NSObject *v113;
  int v114;
  int Block;
  NSObject *v116;
  __darwin_time_t v117;
  unint64_t v118;
  NSObject *v119;
  __darwin_time_t v120;
  int v121;
  NSObject *v122;
  __darwin_time_t v123;
  unint64_t v124;
  NSObject *v125;
  NSObject *v126;
  __darwin_time_t v127;
  char v128;
  NSObject *v129;
  unint64_t v130;
  _BOOL4 v131;
  _BOOL4 v132;
  unint64_t v133;
  _BOOL4 v134;
  NSObject *v135;
  int v136;
  int v137;
  NSObject *v138;
  NSObject *v139;
  int v140;
  NSObject *v141;
  uint64_t v142;
  int BatteryData;
  CFDictionaryRef ChargerData;
  _BOOL4 v145;
  int v146;
  int v147;
  BOOL v148;
  int v149;
  int v150;
  __int16 v151;
  NSObject *v152;
  BOOL v153;
  __int16 v154;
  int v155;
  unsigned int v156;
  NSObject *v157;
  NSObject *v158;
  BOOL v159;
  int v160;
  BOOL v161;
  NSObject *v162;
  NSObject *v163;
  _BOOL4 v164;
  CFDictionaryRef v165;
  NSObject *v166;
  const __CFAllocator *v167;
  int v168;
  const __CFString *v169;
  int v170;
  int v171;
  NSObject *v172;
  _BOOL4 v173;
  unsigned int v174;
  int v176;
  CFNumberRef v177;
  uint64_t v178;
  uint64_t v179;
  int U16;
  _BOOL4 v181;
  NSObject *v182;
  unint64_t v183;
  NSObject *v184;
  CFNumberRef v185;
  uint64_t v186;
  uint64_t v187;
  CFNumberRef v188;
  uint64_t v189;
  CFNumberRef v190;
  uint64_t v191;
  CFNumberRef v192;
  uint64_t v193;
  CFNumberRef v194;
  uint64_t v195;
  unsigned int v196;
  CFNumberRef v197;
  uint64_t v198;
  const void *v199;
  uint64_t v200;
  CFNumberRef v201;
  uint64_t v202;
  char *v203;
  CFNumberRef v204;
  uint64_t v205;
  CFNumberRef v206;
  uint64_t v207;
  CFNumberRef v208;
  uint64_t v209;
  CFNumberRef v210;
  uint64_t v211;
  CFDictionaryRef v212;
  CFDictionaryRef v213;
  CFDictionaryRef v214;
  NSObject *v215;
  CFDictionaryRef v216;
  CFDictionaryRef v217;
  NSObject *v218;
  CFDictionaryRef v219;
  NSObject *v220;
  int S16;
  int v223;
  NSObject *v224;
  time_t v225;
  uint64_t v226;
  NSObject *v227;
  const char *v228;
  char v229;
  time_t v230;
  char v231;
  uint64_t v232;
  _BOOL4 v233;
  NSObject *v234;
  const char *v235;
  int v236;
  int v237;
  NSObject *v238;
  __int16 v239;
  _BOOL4 v240;
  NSObject *v241;
  int v242;
  int v243;
  int v244;
  NSObject *v245;
  char v246;
  NSObject *v247;
  int v248;
  NSObject *v249;
  int v250;
  int v251;
  int v252;
  NSObject *v253;
  NSObject *v254;
  uint64_t v255;
  _BOOL4 v256;
  NSObject *v257;
  const char *v258;
  uint32_t v259;
  CFAbsoluteTime v260;
  NSObject *v261;
  NSObject *v262;
  int v263;
  _BOOL4 v264;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  int v269;
  int v270;
  _BOOL4 v271;
  int v272;
  int v273;
  int v274;
  uint64_t v275;
  os_log_t v276;
  _BOOL4 v277;
  NSObject *v278;
  time_t v279;
  _BOOL4 v280;
  char v281;
  _BOOL4 v282;
  int v283;
  uint64_t v284;
  BOOL v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  CFPropertyListRef v291;
  int v292;
  BOOL *v293;
  unsigned int v294;
  _BOOL4 v295;
  BOOL v296;
  const __CFString *v297;
  const __CFString *v298;
  const __CFString *mode;
  io_connect_t v300;
  BOOL v301;
  _BOOL4 v302;
  const __CFAllocator *allocator;
  io_connect_t kernelPort;
  CFTypeRef v305;
  BOOL v306;
  int v307;
  char v308;
  char v309;
  char v310[7];
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  _BOOL4 v327;
  int v328;
  char v329;
  char v330[15];
  char v331;
  char v332[15];
  char v333;
  char v334[15];
  size_t v335;
  int valuePtr;
  uint64_t refCon;
  intptr_t notificationID;
  io_object_t notifier;
  IONotificationPortRef thePortRef;
  unsigned __int16 v341;
  int v342;
  io_object_t notification[2];
  uint8_t v344[4];
  int v345[3];
  uint8_t v346[4];
  const char *v347;
  __int16 v348;
  int v349;
  void *keys[2];
  __int128 v351;
  __int128 v352;
  _BYTE input[52];
  double v354;
  int v355;
  void *v356[2];
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  uint8_t buf[32];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  char v399[64];
  uint64_t v400;

  v400 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)notification = 0;
  v342 = 0;
  v341 = 0;
  thePortRef = 0;
  notifier = 0;
  notificationID = 0;
  refCon = 0;
  pthread_setname_np("GasGauge-updateThread");
  v2 = &unk_1EF99A000;
  gRestrictLogMessagesCounter = 0;
  p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
  v4 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CAF47000, v4, OS_LOG_TYPE_DEFAULT, "gasgauge: updateThread start", buf, 2u);
  }
  v5 = pmps_service();
  if (v5)
  {
    v6 = v5;
    v7 = *MEMORY[0x1E0CBBAA8];
    v8 = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
    if (IOServiceAddInterestNotification(v8, v6, "IOGeneralInterest", (IOServiceInterestCallback)iokit_callback, &refCon, notification))
    {
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
        updateThread_cold_10();
      return 0;
    }
    Current = CFRunLoopGetCurrent();
    RunLoopSource = IONotificationPortGetRunLoopSource(v8);
    v11 = (const __CFString *)*MEMORY[0x1E0C9B280];
    CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    kernelPort = IORegisterForSystemPower(&refCon, &thePortRef, (IOServiceInterestCallback)iokit_callback, &notifier);
    if (kernelPort && thePortRef)
    {
      v12 = CFRunLoopGetCurrent();
      v13 = IONotificationPortGetRunLoopSource(thePortRef);
      CFRunLoopAddSource(v12, v13, v11);
      v14 = ggctl_connect(&notification[1]);
      if (!(_DWORD)v14)
        return 0;
      v15 = v14;
      *(_QWORD *)buf = 0;
      v356[0] = 0;
      v16 = MEMORY[0x1D179B1AC](v14, 0, *MEMORY[0x1E0C83DA0], buf, v356, 1);
      if (v16)
        v17 = 0;
      else
        v17 = *(BOOL **)buf;
      if (v16)
      {
        v18 = v16;
        v19 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
          updateThread_cold_9(v18, v19);
        IOServiceClose(v15);
        return 0;
      }
      v289 = *(_QWORD *)buf;
      v293 = v17;
      mode = v11;
      *(_QWORD *)buf = 352;
      IOConnectCallStructMethod(v15, 2u, 0, 0, &dword_1EF99A278, (size_t *)buf);
      byte_1EF99A1C4 = dword_1EF99A31C != 0;
      v341 = word_1EF99A306;
      v286 = dword_1EF99A3D0;
      valuePtr = dword_1EF99A30C;
      v297 = (const __CFString *)*MEMORY[0x1E0C9B250];
      v298 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v21 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("UpdateSampleConfig"), CFSTR("com.apple.gasgauge"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
      if (v21)
      {
        v22 = v21;
        v23 = CFGetTypeID(v21);
        if (v23 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
          v24 = logger;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = valuePtr;
            _os_log_impl(&dword_1CAF47000, v24, OS_LOG_TYPE_DEFAULT, "changed updateSampleConfig=%#x", buf, 8u);
          }
        }
        CFRelease(v22);
      }
      v294 = valuePtr;
      v25 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("CriticalBattery"), CFSTR("com.apple.gasgauge"), v298, v297);
      if (v25)
      {
        v26 = v25;
        v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v26, kCFNumberSInt32Type, &word_1EF99A304);
          CFRelease(v26);
        }
        else
        {
          Value = CFBooleanGetValue(v26);
          CFRelease(v26);
          if (!Value)
          {
            v262 = logger;
            v292 = 0;
            if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1CAF47000, v262, OS_LOG_TYPE_DEFAULT, "Critical battery shutdown disabled", buf, 2u);
              v292 = 0;
            }
            goto LABEL_30;
          }
        }
      }
      v292 = 1;
LABEL_30:
      v29 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("UserMode"), CFSTR("com.apple.gasgauge"), v298, v297);
      if (v29)
      {
        v30 = v29;
        v31 = CFGetTypeID(v29);
        v295 = v31 == CFBooleanGetTypeID() && CFBooleanGetValue(v30) != 0;
        CFRelease(v30);
        v32 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v295;
          _os_log_impl(&dword_1CAF47000, v32, OS_LOG_TYPE_DEFAULT, "gas gauge: userModeEnabled=%d", buf, 8u);
        }
      }
      else
      {
        v295 = 0;
      }
      v33 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("CriticalFlagDelay"), CFSTR("com.apple.gasgauge"), v298, v297);
      if (v33)
      {
        v34 = v33;
        v35 = CFGetTypeID(v33);
        if (v35 == CFNumberGetTypeID())
          CFNumberGetValue(v34, kCFNumberSInt32Type, &v341);
        CFRelease(v34);
        v36 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v341;
          _os_log_impl(&dword_1CAF47000, v36, OS_LOG_TYPE_DEFAULT, "gas gauge: critical flag delay %d", buf, 8u);
        }
      }
      v37 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("DebugPolling"), CFSTR("com.apple.gasgauge"), v298, v297);
      if (v37)
      {
        v38 = v37;
        v39 = CFGetTypeID(v37);
        if (v39 == CFBooleanGetTypeID())
          debug_polling = CFBooleanGetValue(v38) != 0;
        CFRelease(v38);
        v40 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = debug_polling;
          _os_log_impl(&dword_1CAF47000, v40, OS_LOG_TYPE_DEFAULT, "gas gauge: debug_polling=%d", buf, 8u);
        }
      }
      v41 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("RestricLogCounter"), CFSTR("com.apple.gasgauge"), v298, v297);
      if (v41)
      {
        v42 = v41;
        v43 = CFGetTypeID(v41);
        if (v43 == CFNumberGetTypeID())
          CFNumberGetValue(v42, kCFNumberSInt32Type, &gRestrictLogCounter);
        CFRelease(v42);
        v44 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = gRestrictLogCounter;
          _os_log_impl(&dword_1CAF47000, v44, OS_LOG_TYPE_DEFAULT, "gas gauge: log counter %d", buf, 8u);
        }
      }
      v307 = dword_1EF99A310;
      if (dword_1EF99A310)
      {
        v45 = IONotificationPortCreate(v7);
        v46 = IOServiceAddInterestNotification(v45, notification[1], "IOGeneralInterest", (IOServiceInterestCallback)iokit_callback, &refCon, notification);
        v47 = logger;
        if (v46)
        {
          v48 = v46;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
            updateThread_cold_8(v48, v47, v49);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1CAF47000, v47, OS_LOG_TYPE_DEFAULT, "gasgauge: listening for battery interrupts", buf, 2u);
          }
          v50 = CFRunLoopGetCurrent();
          v51 = IONotificationPortGetRunLoopSource(v45);
          CFRunLoopAddSource(v50, v51, v11);
        }
      }
      v342 = 0;
      getUPOData(CFSTR("IOPMUBootUPOState"), &v342);
      v301 = v342 != 0;
      getUPOData(CFSTR("IOPMUBootBatteryHealthMetric"), &dword_1EF99A270);
      v335 = 64;
      if (sysctlbyname("hw.model", v399, &v335, 0, 0))
      {
        v52 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
          updateThread_cold_7(v52);
      }
      v300 = v15;
      v53 = UpSeconds();
      v54 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134219776;
        *(_QWORD *)&buf[4] = v53;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v292;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (unsigned __int16)word_1EF99A304;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = valuePtr;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v379) = byte_1EF99A1C4;
        WORD2(v379) = 1024;
        *(_DWORD *)((char *)&v379 + 6) = v341;
        WORD5(v379) = 1024;
        HIDWORD(v379) = dword_1EF99A308;
        LOWORD(v380) = 1024;
        *(_DWORD *)((char *)&v380 + 2) = v342;
        _os_log_impl(&dword_1CAF47000, v54, OS_LOG_TYPE_DEFAULT, "gasgauge: %llu updateThread critical(%d, 0x%x), uscfg=0x%x, dyn=%d cfd=%d cfd-voltage=%d, upos=%x", buf, 0x36u);
      }
      v284 = a1;
      v280 = a1 != 0;
      LOBYTE(v55) = 0;
      v285 = 0;
      v306 = 0;
      v302 = 0;
      v296 = 0;
      v56 = 0;
      v308 = 0;
      v281 = 0;
      v279 = 0;
      v57 = 0;
      v290 = 0;
      v58 = 0;
      qword_1EF99A268 = time(0);
      v282 = (dword_1EF99A320 | dword_1EF99A364) != 0;
      v288 = (v294 >> 2) & 1;
      v287 = (v294 >> 3) & 1;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v305 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      v291 = (CFPropertyListRef)*MEMORY[0x1E0C9AE40];
      v59 = 0.0;
      v60 = 0.0;
      LOBYTE(v283) = 1;
      v61 = -1;
      v62 = -1;
      while (1)
      {
        v398 = 0u;
        v397 = 0u;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        v392 = 0u;
        v391 = 0u;
        v390 = 0u;
        v389 = 0u;
        v388 = 0u;
        v387 = 0u;
        v386 = 0u;
        v385 = 0u;
        v384 = 0u;
        v383 = 0u;
        v382 = 0u;
        v381 = 0u;
        v380 = 0u;
        v379 = 0u;
        memset(buf, 0, sizeof(buf));
        v377 = 0u;
        v376 = 0u;
        v375 = 0u;
        v374 = 0u;
        v373 = 0u;
        v372 = 0u;
        v371 = 0u;
        v370 = 0u;
        v369 = 0u;
        v368 = 0u;
        v367 = 0u;
        v365 = 0u;
        v366 = 0u;
        v363 = 0u;
        v364 = 0u;
        v361 = 0u;
        v362 = 0u;
        v359 = 0u;
        v360 = 0u;
        v357 = 0u;
        v358 = 0u;
        *(_OWORD *)v356 = 0u;
        if (v307 && v62 != -1)
        {
          *(_QWORD *)input = 1;
          v63 = IOConnectCallScalarMethod(v62, 0x10u, (const uint64_t *)input, 1u, 0, 0);
          v64 = v63 == -536870183 ? -2 : -1;
          if (v63)
          {
            v65 = p_vtable[411];
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)input = 67109120;
              *(_DWORD *)&input[4] = v64;
              _os_log_impl(&dword_1CAF47000, v65, OS_LOG_TYPE_DEFAULT, "cannot enable gauge interrupts (%d)", input, 8u);
            }
          }
        }
        LODWORD(refCon) = 0;
        if (v57)
        {
          v66 = v2[246];
          if (v66)
          {
            v67 = v66 - 1;
          }
          else
          {
            if (v59 == 0.0)
              goto LABEL_81;
            v68 = p_vtable[411];
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              v69 = CFAbsoluteTimeGetCurrent();
              *(_DWORD *)input = 67109632;
              *(_DWORD *)&input[4] = v57;
              *(_WORD *)&input[8] = 2048;
              *(double *)&input[10] = v69 - v59;
              *(_WORD *)&input[18] = 1024;
              *(_DWORD *)&input[20] = gRestrictLogCounter;
              _os_log_impl(&dword_1CAF47000, v68, OS_LOG_TYPE_DEFAULT, "failure last_update_failed_counter=%d last_success at %g, supressing %d subsequent errors", input, 0x18u);
            }
            v67 = gRestrictLogCounter;
          }
          v2[246] = v67;
        }
LABEL_81:
        v70 = v61 != -1;
        v71 = v61 < 50;
        v72 = v70 && v71;
        if (v70 && v71)
          v73 = 5.0;
        else
          v73 = 20.0;
        if ((v56 & 1) != 0)
        {
LABEL_527:
          IOObjectRelease(v6);
          MEMORY[0x1D179B1B8](v300, 0, *MEMORY[0x1E0C83DA0], v293);
          IOServiceClose(v300);
          v2[246] = 0;
          v261 = p_vtable[411];
          if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1CAF47000, v261, OS_LOG_TYPE_DEFAULT, "gasgauge: updateThread terminated", buf, 2u);
          }
          return 0;
        }
        if (!(v58 | v57))
          goto LABEL_122;
        v74 = CFAbsoluteTimeGetCurrent();
        if (debug_polling && (v75 = p_vtable[411], os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)))
        {
          *(_DWORD *)input = 136316418;
          *(_QWORD *)&input[4] = "updateThread";
          *(_WORD *)&input[12] = 1024;
          *(_DWORD *)&input[14] = 2802;
          *(_WORD *)&input[18] = 1024;
          *(_DWORD *)&input[20] = v58;
          *(_WORD *)&input[24] = 1024;
          *(_DWORD *)&input[26] = v55 & 1;
          *(_WORD *)&input[30] = 2048;
          *(double *)&input[32] = v74;
          *(_WORD *)&input[40] = 2048;
          *(double *)&input[42] = v60;
          _os_log_debug_impl(&dword_1CAF47000, v75, OS_LOG_TYPE_DEBUG, "*** %s:%d updatesDone=%d last_update_ignored=%d now=%f deadline=%f *** ", input, 0x32u);
          if ((v55 & 1) == 0)
          {
LABEL_92:
            v60 = v73 + v74;
            goto LABEL_93;
          }
        }
        else if ((v55 & 1) == 0)
        {
          goto LABEL_92;
        }
        v73 = 0.0;
        if (v74 < v60)
          v73 = v60 - v74;
LABEL_93:
        if (debug_polling)
        {
          v76 = p_vtable[411];
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)input = 136316674;
            *(_QWORD *)&input[4] = "updateThread";
            *(_WORD *)&input[12] = 1024;
            *(_DWORD *)&input[14] = 2860;
            *(_WORD *)&input[18] = 1024;
            *(_DWORD *)&input[20] = v58;
            *(_WORD *)&input[24] = 1024;
            *(_DWORD *)&input[26] = v55 & 1;
            *(_WORD *)&input[30] = 2048;
            *(double *)&input[32] = v74;
            *(_WORD *)&input[40] = 2048;
            *(double *)&input[42] = v60;
            *(_WORD *)&input[50] = 2048;
            v354 = v73;
            _os_log_error_impl(&dword_1CAF47000, v76, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d last_update_ignored=%d now=%f deadline=%f update_interval=%f *** ", input, 0x3Cu);
          }
        }
        if (v73 == 0.0)
        {
          v55 = 0;
          LODWORD(refCon) = 0;
LABEL_121:
          LOBYTE(v55) = v55 != 0;
          goto LABEL_122;
        }
        if (CFRunLoopRunInMode(mode, v73, 1u) != kCFRunLoopRunHandledSource)
        {
          v55 = 0;
          goto LABEL_121;
        }
        v55 = 0;
        v77 = refCon;
        v78 = 1;
        if ((int)refCon > -536870145)
        {
          if ((_DWORD)refCon == -536870144 || (_DWORD)refCon == -536723200)
            goto LABEL_113;
          v79 = -469794560;
        }
        else
        {
          if ((refCon + 536870288) <= 0x20
            && ((1 << (refCon - 112)) & 0x100010001) != 0)
          {
            goto LABEL_113;
          }
          v79 = -536870320;
        }
        if ((_DWORD)refCon != v79)
        {
          v78 = debug_polling;
          if (debug_polling)
          {
            v80 = p_vtable[411];
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)input = 136315906;
              *(_QWORD *)&input[4] = "updateThread";
              *(_WORD *)&input[12] = 1024;
              *(_DWORD *)&input[14] = 2879;
              *(_WORD *)&input[18] = 1024;
              *(_DWORD *)&input[20] = v58;
              *(_WORD *)&input[24] = 1024;
              *(_DWORD *)&input[26] = v77;
              _os_log_error_impl(&dword_1CAF47000, v80, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d message.messageType=%#x  (ign) *** ", input, 0x1Eu);
            }
            v78 = 0;
            v55 = 1;
          }
          else
          {
            v55 = 1;
          }
        }
LABEL_113:
        if (v77 > -536870145)
        {
          if (v77 == -536870144 || v77 == -469794560)
            goto LABEL_121;
          v81 = -536723200;
        }
        else
        {
          if ((v77 + 536870288) <= 0x20 && ((1 << (v77 - 112)) & 0x100010001) != 0)
            goto LABEL_121;
          v81 = -536870320;
        }
        if (v77 == v81)
          goto LABEL_121;
        if (v78)
        {
LABEL_122:
          if (debug_polling && (v82 = p_vtable[411], os_log_type_enabled(v82, OS_LOG_TYPE_ERROR)))
          {
            *(_DWORD *)input = 136316162;
            *(_QWORD *)&input[4] = "updateThread";
            *(_WORD *)&input[12] = 1024;
            *(_DWORD *)&input[14] = 2897;
            *(_WORD *)&input[18] = 1024;
            *(_DWORD *)&input[20] = v58;
            *(_WORD *)&input[24] = 1024;
            *(_DWORD *)&input[26] = refCon;
            *(_WORD *)&input[30] = 1024;
            *(_DWORD *)&input[32] = v308 & 1;
            _os_log_error_impl(&dword_1CAF47000, v82, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d message.messageType=%#x system_sleep=%d *** ", input, 0x24u);
            if (v58)
              goto LABEL_125;
LABEL_126:
            CFProperty = IORegistryEntryCreateCFProperty(v6, CFSTR("AdapterInfo"), allocator, 0);
            v85 = IORegistryEntryCreateCFProperty(v6, CFSTR("AppleRawExternalConnected"), allocator, 0);
            LODWORD(keys[0]) = 0;
            if (CFProperty)
            {
              v86 = CFGetTypeID(CFProperty);
              if (v86 == CFNumberGetTypeID())
                CFNumberGetValue((CFNumberRef)CFProperty, kCFNumberSInt32Type, keys);
              CFRelease(CFProperty);
              v87 = (int)keys[0];
              if (v306 != (LODWORD(keys[0]) == 0))
              {
LABEL_132:
                v88 = v302 ^ (v85 != v305);
                goto LABEL_133;
              }
              v88 = 0;
            }
            else
            {
              v87 = 0;
              v88 = 0;
              if (!v306)
                goto LABEL_132;
            }
LABEL_133:
            if (debug_polling)
            {
              v89 = logger;
              if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)input = 136316418;
                *(_QWORD *)&input[4] = "updateThread";
                *(_WORD *)&input[12] = 1024;
                *(_DWORD *)&input[14] = 2921;
                *(_WORD *)&input[18] = 1024;
                *(_DWORD *)&input[20] = v58;
                *(_WORD *)&input[24] = 1024;
                *(_DWORD *)&input[26] = v88 & 1;
                *(_WORD *)&input[30] = 1024;
                *(_DWORD *)&input[32] = v87;
                *(_WORD *)&input[36] = 1024;
                *(_DWORD *)&input[38] = v85 == v305;
                _os_log_impl(&dword_1CAF47000, v89, OS_LOG_TYPE_DEFAULT, "*** %s:%d updatesDone=%d same_adaptor=%d adaptor_type=%d external_connected=%d *** ", input, 0x2Au);
              }
            }
            if ((v88 & (v58 != 0)) != 1 || v73 == 0.0)
            {
              v90 = (int)keys[0];
              v306 = LODWORD(keys[0]) != 0;
              v302 = v85 == v305;
              v2 = (_DWORD *)&unk_1EF99A000;
              if (v85)
                CFRelease(v85);
              if (v90 != 0 && v301)
              {
                setUPOData(CFSTR("IOPMUBootUPOState"), 0);
                v301 = 0;
              }
              ++debug_cnt_ut_recv;
              v83 = refCon;
              p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
              goto LABEL_147;
            }
            v2 = (_DWORD *)&unk_1EF99A000;
            if (v85)
              CFRelease(v85);
            v56 = 0;
            v62 = -1;
            LOBYTE(v55) = 1;
LABEL_141:
            p_vtable = (void **)(AWDMETRICSCellularPowerLogNRDCEvent + 24);
          }
          else
          {
            if (!v58)
              goto LABEL_126;
LABEL_125:
            v83 = refCon;
            if ((_DWORD)refCon == -536723200)
              goto LABEL_126;
LABEL_147:
            if (v83 == -469794560)
            {
              LOBYTE(v55) = 1;
              if (v73 != 0.0)
                v72 = 1;
            }
            if ((v308 & (v83 != -536870144)) != 0)
            {
LABEL_156:
              v56 = 0;
              v62 = -1;
              v308 = 1;
            }
            else if (v83 == -536870288)
            {
              IOAllowPowerChange(kernelPort, notificationID);
              v56 = 0;
              v62 = -1;
              LOBYTE(v55) = 1;
            }
            else
            {
              if (v57 && v83 == -536870272)
              {
                IOAllowPowerChange(kernelPort, notificationID);
                goto LABEL_156;
              }
              if (v300 == -1)
              {
                v56 = 0;
                ++v57;
                goto LABEL_166;
              }
              if (v83 == -536870144)
              {
                if (v296)
                  updateThermalCoolDownState(notification[1], 0);
                v296 = 0;
                if ((v308 & 1) != 0)
                {
                  v308 = 0;
                  qword_1EF99A268 = time(0);
                }
                else
                {
                  v308 = 0;
                }
              }
              hdq_state = ggctl_get_hdq_state(v300);
              if (hdq_state == -2)
              {
                v56 = 1;
                goto LABEL_445;
              }
              if (hdq_state)
              {
                if (hdq_state < 0)
                {
                  if (os_log_type_enabled((os_log_t)p_vtable[411], OS_LOG_TYPE_ERROR))
                    updateThread_cold_2(&v329, v330);
                  v56 = 0;
                  goto LABEL_444;
                }
                v95 = hdqBreak(v300);
                if (v95 != -2)
                {
                  if (v95 < 0)
                  {
                    v96 = p_vtable;
                    v97 = ++updateThread_debug_break_failures;
                    v98 = v96[411];
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)input = 136315906;
                      *(_QWORD *)&input[4] = "updateThread";
                      *(_WORD *)&input[12] = 1024;
                      *(_DWORD *)&input[14] = 3024;
                      *(_WORD *)&input[18] = 1024;
                      *(_DWORD *)&input[20] = v97;
                      *(_WORD *)&input[24] = 1024;
                      *(_DWORD *)&input[26] = -1;
                      _os_log_error_impl(&dword_1CAF47000, v98, OS_LOG_TYPE_ERROR, "%s:%d break failed break_failures=%d (%d)", input, 0x1Eu);
                      v97 = updateThread_debug_break_failures;
                    }
                    if ((-858993459 * v97) <= 0x33333333)
                    {
                      statsAndLogs(notification[1], 0);
                      p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                    }
                    else
                    {
                      v99 = -1227133513 * v97;
                      p_vtable = (void **)(AWDMETRICSCellularPowerLogNRDCEvent + 24);
                      if (v99 <= 0x24924924)
                        debugLog(notification[1], 63);
                    }
                  }
                  else if (updateThread_debug_break_failures)
                  {
                    statsAndLogs(notification[1], 1);
                    debugLog(notification[1], 0);
                    updateThread_debug_break_failures = 0;
                  }
                }
                if (v307)
                {
                  if (v58)
                  {
                    v100 = gaugeDisableInterrupts(v300);
                    if (v100 < 0)
                    {
                      v101 = v100;
                      v102 = p_vtable[411];
                      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)input = 136315650;
                        *(_QWORD *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3044;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v101;
                        _os_log_error_impl(&dword_1CAF47000, v102, OS_LOG_TYPE_ERROR, "%s:%d cannot disable gauge interrupts (%d)", input, 0x18u);
                      }
                    }
                  }
                }
                if ((_DWORD)refCon == -536870272)
                {
                  v108 = OSThermalNotificationCurrentLevel();
                  v296 = v108 > 14;
                  v2 = (_DWORD *)&unk_1EF99A000;
                  if (v108 >= 15)
                    updateThermalCoolDownState(notification[1], 1);
                  IOAllowPowerChange(kernelPort, notificationID);
                  v56 = 0;
                  v308 = 1;
                  goto LABEL_445;
                }
                v2 = (_DWORD *)&unk_1EF99A000;
                if ((_DWORD)refCon == -536870320)
                  goto LABEL_527;
                if (v58)
                {
                  v275 = 0;
                  goto LABEL_203;
                }
                if ((getFWVersion(v300, &word_1EF99A1A6) & 0x80000000) != 0)
                {
                  v56 = 0;
                  v58 = 0;
                  ++v57;
                  v62 = v300;
                }
                else
                {
                  v109 = CFNumberCreate(allocator, kCFNumberIntType, &word_1EF99A1A6);
                  if (v109)
                  {
                    v110 = v109;
                    IORegistryEntrySetCFProperty(v6, CFSTR("GasGaugeFirmwareVersion"), v109);
                    CFRelease(v110);
                  }
                  v111 = (unsigned __int16)word_1EF99A1A6;
                  v112 = (unsigned __int16)word_1EF99A1A6 - 1281 < 2;
                  *v293 = (unsigned __int16)word_1EF99A1A6 > 0x131u;
                  if (v111 == 265)
                  {
                    v113 = logger;
                    v292 = 0;
                    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)input = 0;
                      _os_log_impl(&dword_1CAF47000, v113, OS_LOG_TYPE_DEFAULT, "gas gauge firmware 1.09: disabling critical battery shutdown", input, 2u);
                      v292 = 0;
                    }
                  }
                  LOBYTE(v288) = v288 | v112;
                  keys[0] = 0;
                  if ((readChargeTable(v300, (__CFData **)keys) & 0x80000000) != 0)
                  {
                    v56 = 0;
                    v58 = 0;
                    ++v57;
                    v62 = v300;
                    goto LABEL_141;
                  }
                  p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                  if (keys[0])
                  {
                    *(void **)buf = keys[0];
                    v356[0] = CFSTR("ChargeTable");
                    v275 = 1;
                  }
                  else
                  {
                    v275 = 0;
                  }
                  if (dword_1EF99A278)
                    v114 = dword_1EF99A278;
                  else
                    v114 = 2;
                  Block = ggctl_readBlock(v300, -1, v114, updateThread_batteryInfo, 0);
                  if (Block < 0)
                    strcpy((char *)updateThread_batteryInfo, "000000");
                  if ((v287 & 1) != 0)
                  {
                    byte_1EF99A1A8 = dword_1EF99A318;
                    if ((_BYTE)dword_1EF99A318)
                    {
                      LOBYTE(v287) = 1;
                    }
                    else
                    {
                      v158 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                      {
                        *(_QWORD *)input = 67109376;
                        *(_WORD *)&input[8] = 1024;
                        *(_DWORD *)&input[10] = Block;
                        _os_log_error_impl(&dword_1CAF47000, v158, OS_LOG_TYPE_ERROR, "disabled passedCharge PCFF=%d err=%d", input, 0xEu);
                      }
                      LOBYTE(v287) = 0;
                      v2 = (_DWORD *)&unk_1EF99A000;
                    }
                  }
                  else
                  {
                    LOBYTE(v287) = 0;
                  }
                  if (byte_1EF99A1C4)
                    word_1EF99A1A4 = 136;
                  if (hdqReadS16(v300, 60, &word_1EF99A1A2))
                    word_1EF99A1A2 = 0;
                  if (controlReadU16(v300, 8, &word_1EF99A1A0))
                  {
                    word_1EF99A1A0 = 0;
                    v271 = 0;
                    v272 = 1;
                    v106 = v275;
LABEL_280:
                    v327 = v58 < 16;
                    *(_QWORD *)&buf[8 * v106] = CFNumberCreate(allocator, kCFNumberIntType, &v327);
                    v356[v106] = CFSTR("ForceFullGGUpdateOnBoot");
                    HIDWORD(v130) = -1431655764 * v58 + 143165576;
                    LODWORD(v130) = HIDWORD(v130);
                    v131 = (v130 >> 2) < 0x4444445 && v58 < 16;
                    if (v131)
                    {
                      v132 = 1;
                    }
                    else
                    {
                      HIDWORD(v133) = -1813430636 * v58 + 9544368;
                      LODWORD(v133) = HIDWORD(v133);
                      v132 = (v133 >> 4) < 0x123457;
                    }
                    v276 = (os_log_t)v106;
                    if (debug_polling)
                    {
                      v134 = v132;
                      v135 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)input = 136316418;
                        *(_QWORD *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3254;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v58;
                        *(_WORD *)&input[24] = 1024;
                        *(_DWORD *)&input[26] = v134;
                        *(_WORD *)&input[30] = 1024;
                        *(_DWORD *)&input[32] = v131;
                        *(_WORD *)&input[36] = 1024;
                        *(_DWORD *)&input[38] = v58 < 16;
                        _os_log_impl(&dword_1CAF47000, v135, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d, fullUpdate=%d, bootFullUpdate=%d, forceFullUpdate=%d] ", input, 0x2Au);
                        v136 = debug_polling;
                      }
                      else
                      {
                        v136 = 1;
                      }
                      if (v58)
                        v137 = v134;
                      else
                        v137 = 0;
                      p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                      v132 = v134;
                      if (v136)
                      {
                        v106 = (uint64_t)v276;
                        if (v137)
                        {
                          v137 = 1;
                          statsAndLogs(notification[1], 1);
                        }
                      }
                      else
                      {
                        v106 = (uint64_t)v276;
                      }
                    }
                    else
                    {
                      if (v58)
                        v137 = v132;
                      else
                        v137 = 0;
                      p_vtable = (void **)(AWDMETRICSCellularPowerLogNRDCEvent + 24);
                    }
                    if (v272)
                    {
LABEL_440:
                      if (*v293 && *(_DWORD *)(v289 + 4))
                        ++*(_DWORD *)(v289 + 28);
                      v56 = 0;
                      ++debug_cnt_ut_err;
LABEL_444:
                      ++v57;
                      goto LABEL_445;
                    }
                    v264 = v132;
                    if (debug_polling)
                    {
                      v138 = p_vtable[411];
                      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)input = 136315650;
                        *(_QWORD *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3295;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v58;
                        _os_log_impl(&dword_1CAF47000, v138, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d POLLING THE BATTERY", input, 0x18u);
                      }
                    }
                    v139 = (v106 + 1);
                    v140 = !v295;
                    if (!v58)
                      v140 = 1;
                    v269 = v140;
                    if (v140 != 1)
                      goto LABEL_317;
                    v141 = (v106 + 1);
                    if (v264)
                      v142 = 18;
                    else
                      v142 = 10;
                    BatteryData = readBatteryData((uint64_t)&updateThread_updates, v142, v300);
                    if (BatteryData == (_DWORD)v142)
                    {
                      calculateBatteryHealthMetric();
                      v139 = v141;
                      goto LABEL_317;
                    }
                    v273 = BatteryData;
                    log = p_vtable[411];
                    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)input = 67109376;
                      *(_DWORD *)&input[4] = v142;
                      *(_WORD *)&input[8] = 1024;
                      *(_DWORD *)&input[10] = v273;
                      _os_log_impl(&dword_1CAF47000, log, OS_LOG_TYPE_DEFAULT, "cannot read battery data count=%d (err=%d)", input, 0xEu);
                    }
                    calculateBatteryHealthMetric();
                    v139 = v141;
                    LODWORD(ChargerData) = v273;
                    if (v273)
                    {
                      v145 = 0;
                    }
                    else
                    {
LABEL_317:
                      v146 = word_1EF99A1AA;
                      v147 = word_1EF99A1B2;
                      if (word_1EF99A1B2)
                        v148 = 0;
                      else
                        v148 = word_1EF99A1AA == 3600;
                      v149 = (unsigned __int16)word_1EF99A1DA;
                      if (v148 || (unsigned __int16)word_1EF99A1DA == 0xFFFF)
                      {
                        logb = v139;
                        v157 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)input = 67110144;
                          *(_DWORD *)&input[4] = v149;
                          *(_WORD *)&input[8] = 1024;
                          *(_DWORD *)&input[10] = word_1EF99A1B4;
                          *(_WORD *)&input[14] = 1024;
                          *(_DWORD *)&input[16] = word_1EF99A1AC;
                          *(_WORD *)&input[20] = 1024;
                          *(_DWORD *)&input[22] = v146;
                          *(_WORD *)&input[26] = 1024;
                          *(_DWORD *)&input[28] = v147;
                          _os_log_impl(&dword_1CAF47000, v157, OS_LOG_TYPE_DEFAULT, "gas gauge reset detected (flags %#x capacity %d/%dmAh voltage %dmV current %dmA)", input, 0x20u);
                        }
                        v145 = 0;
                        LODWORD(ChargerData) = -1;
                        p_vtable = (void **)(AWDMETRICSCellularPowerLogNRDCEvent + 24);
                        v139 = logb;
                      }
                      else
                      {
                        if (!v58 && v342)
                        {
                          loga = v139;
                          v342 = 0;
                          v150 = word_1EF99A1AC;
                          v151 = 100 * (word_1EF99A1AC / 100) + 100;
                          v152 = logger;
                          v153 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                          v154 = v151;
                          v155 = v151;
                          if (v153)
                          {
                            *(_QWORD *)input = 67110144;
                            v156 = ((26215 * v151) >> 18) + ((26215 * v151) >> 31);
                            *(_WORD *)&input[8] = 1024;
                            *(_DWORD *)&input[10] = v150;
                            *(_WORD *)&input[14] = 1024;
                            *(_DWORD *)&input[16] = word_1EF99A1B4;
                            *(_WORD *)&input[20] = 1024;
                            *(_DWORD *)&input[22] = v155;
                            *(_WORD *)&input[26] = 1024;
                            *(_DWORD *)&input[28] = ((26215 * v155) >> 18) + ((26215 * v155) >> 31);
                            _os_log_impl(&dword_1CAF47000, v152, OS_LOG_TYPE_DEFAULT, "mask real UPOState=%x FCC=%d RemCap=%d new FCC=%d new RemCap=%d", input, 0x20u);
                          }
                          else
                          {
                            v156 = ((26215 * v151) >> 18) + ((26215 * v151) >> 31);
                          }
                          word_1EF99A1AC = v154;
                          word_1EF99A1B4 = v156;
                          v139 = loga;
                        }
                        if (((v269 ^ 1) & 1) != 0)
                        {
                          LODWORD(ChargerData) = 0;
                          v159 = v302;
                        }
                        else
                        {
                          v159 = v302;
                          if (v302)
                            v160 = 24;
                          else
                            v160 = 22;
                          LODWORD(ChargerData) = hdqReadS16(v300, v160, &word_1EF99A1B6);
                        }
                        v145 = (_DWORD)ChargerData == 0;
                        v161 = (_DWORD)ChargerData != 0;
                        if ((v294 & 2) == 0)
                          v161 = 1;
                        if ((v161 || !v159) | (v269 ^ 1) & 1)
                        {
                          p_vtable = (void **)(AWDMETRICSCellularPowerLogNRDCEvent + 24);
                        }
                        else
                        {
                          ChargerData = readChargerData(v288 & 1, v287 & 1, v300);
                          *(_QWORD *)&buf[8 * (_QWORD)v139] = ChargerData;
                          p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                          if (ChargerData)
                          {
                            if (v284)
                              CFShow(ChargerData);
                            LODWORD(ChargerData) = 0;
                            v356[(_QWORD)v139] = CFSTR("ChargerData");
                            v139 = ((char *)&v276->isa + 2);
                          }
                        }
                      }
                    }
                    v274 = (int)ChargerData;
                    v277 = v145;
                    if (v145 && (unsigned __int16)word_1EF99A1A6 >= 0x501u)
                    {
                      v326 = (unsigned __int16)word_1EF99A1AE;
                      *(_QWORD *)&buf[8 * (_QWORD)v139] = CFNumberCreate(allocator, kCFNumberIntType, &v326);
                      v356[(_QWORD)v139] = CFSTR("NominalChargeCapacity");
                      v162 = ((char *)&v139->isa + 1);
                    }
                    else
                    {
                      v162 = v139;
                    }
                    if (debug_polling)
                    {
                      v163 = p_vtable[411];
                      if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)input = 67109376;
                        *(_DWORD *)&input[4] = dword_1EF99A320;
                        *(_WORD *)&input[8] = 1024;
                        *(_DWORD *)&input[10] = dword_1EF99A364;
                        _os_log_impl(&dword_1CAF47000, v163, OS_LOG_TYPE_DEFAULT, "determineVACVoltage, vacLevelCount=%d, vac95LevelCount=%d", input, 0xEu);
                      }
                    }
                    v164 = v302;
                    v263 = v137;
                    if (!byte_1EF99A1C4 || v58 != 0 && !v302)
                    {
                      if (v282 && (v58 == 0 || v302))
                      {
                        v170 = determineVACVoltage();
                        if (v170 != dword_1EF99A1C8)
                        {
                          v171 = v170;
                          dword_1EF99A1C8 = v170;
                          v172 = p_vtable[411];
                          if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)input = 67109120;
                            *(_DWORD *)&input[4] = v171;
                            _os_log_impl(&dword_1CAF47000, v172, OS_LOG_TYPE_DEFAULT, "Added atvAbsMaxVoltageMV=%u to battery dict", input, 8u);
                            v171 = dword_1EF99A1C8;
                          }
                          v167 = allocator;
                          v325 = v171;
                          v166 = v162;
                          *(_QWORD *)&buf[8 * (_QWORD)v162] = CFNumberCreate(allocator, kCFNumberIntType, &v325);
                          v169 = CFSTR("atvAbsMaxVoltageMV");
                          v164 = v302;
                          v168 = v269;
LABEL_375:
                          v356[(_QWORD)v166] = (void *)v169;
                          v166 = ((char *)v166 + 1);
                          goto LABEL_376;
                        }
                        v164 = v302;
                      }
                      v167 = allocator;
                      v166 = v162;
                      goto LABEL_371;
                    }
                    v165 = dynamicATV(v300);
                    v166 = v162;
                    *(_QWORD *)&buf[8 * (_QWORD)v162] = v165;
                    v167 = allocator;
                    if (v165)
                    {
                      v168 = v269;
                      if (v284)
                        CFShow(v165);
                      v169 = CFSTR("AppleDynamicATV");
                      goto LABEL_375;
                    }
LABEL_371:
                    v168 = v269;
LABEL_376:
                    v173 = v277;
                    if ((v294 & 2) != 0)
                      v173 = 0;
                    if ((v168 & (v173 && v164)) == 1)
                    {
                      *(_QWORD *)input = 0;
                      keys[0] = 0;
                      *(_QWORD *)input = CFNumberCreate(v167, kCFNumberIntType, &dword_1EF99A1C8);
                      keys[0] = CFSTR("ChargingVoltage");
                      *(_QWORD *)&buf[8 * (_QWORD)v166] = CFDictionaryCreate(v167, (const void **)keys, (const void **)input, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      v356[(_QWORD)v166] = CFSTR("ChargerData");
                      v166 = ((char *)v166 + 1);
                      CFRelease(*(CFTypeRef *)input);
                    }
                    if (dword_1EF99A3A8)
                    {
                      v174 = determinePoSMThreshold();
                      if (v174 != dword_1EF99A1D0)
                        dword_1EF99A1D0 = v174;
                      *(_DWORD *)input = HIWORD(v174);
                      LODWORD(keys[0]) = (unsigned __int16)v174;
                      if ((unsigned __int16)v174 == 0xFFFF || HIWORD(v174) == 0xFFFF)
                        v176 = 0;
                      else
                        v176 = dword_1EF99A3A8;
                      *(_DWORD *)v346 = v176;
                      *(_QWORD *)&buf[8 * (_QWORD)v166] = CFNumberCreate(v167, kCFNumberIntType, v346);
                      v356[(_QWORD)v166] = CFSTR("PoSMEnabled");
                      v177 = CFNumberCreate(allocator, kCFNumberIntType, input);
                      v178 = 8 * (_QWORD)v166 + 8;
                      *(_QWORD *)&buf[v178] = v177;
                      *(void **)((char *)v356 + v178) = CFSTR("PoSMUpperThreshold");
                      v166 = ((char *)v166 + 2);
                      *(_QWORD *)&buf[8 * (_QWORD)v166] = CFNumberCreate(allocator, kCFNumberIntType, keys);
                      v356[(_QWORD)v166] = CFSTR("PoSMLowerThreshold");
                    }
                    else
                    {
                      *(_DWORD *)input = 0;
                      *(_QWORD *)&buf[8 * (_QWORD)v166] = CFNumberCreate(v167, kCFNumberIntType, input);
                      v356[(_QWORD)v166] = CFSTR("PoSMEnabled");
                    }
                    if ((v277 & v294) != 0)
                      U16 = 0;
                    else
                      U16 = v274;
                    if ((v168 & v277 & v294) == 1)
                      U16 = hdqReadU16(v300, 110, &word_1EF99A1B8);
                    p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                    v2 = (_DWORD *)&unk_1EF99A000;
                    v181 = v271;
                    v182 = v166;
                    v183 = (unint64_t)&v166->isa + 1;
                    if (!U16)
                    {
                      v184 = v182;
                      logc = v182;
                      v324 = 10 * word_1EF99A1B0 - 27320;
                      *(_QWORD *)&buf[8 * v183] = CFNumberCreate(allocator, kCFNumberIntType, &v324);
                      v356[v183] = CFSTR("Temperature");
                      v323 = word_1EF99A1B2;
                      v185 = CFNumberCreate(allocator, kCFNumberIntType, &v323);
                      v186 = 8 * (_QWORD)v184;
                      v187 = 8 * (_QWORD)v184 + 16;
                      *(_QWORD *)&buf[v187] = v185;
                      *(void **)((char *)v356 + v187) = CFSTR("Amperage");
                      v322 = word_1EF99A1AA;
                      v188 = CFNumberCreate(allocator, kCFNumberIntType, &v322);
                      v189 = 8 * (_QWORD)v184 + 24;
                      *(_QWORD *)&buf[v189] = v188;
                      *(void **)((char *)v356 + v189) = CFSTR("Voltage");
                      v321 = word_1EF99A1B6;
                      v190 = CFNumberCreate(allocator, kCFNumberIntType, &v321);
                      v191 = 8 * (_QWORD)v184 + 32;
                      *(_QWORD *)&buf[v191] = v190;
                      *(void **)((char *)v356 + v191) = CFSTR("TimeRemaining");
                      v61 = word_1EF99A1B4;
                      v320 = word_1EF99A1B4;
                      v192 = CFNumberCreate(allocator, kCFNumberIntType, &v320);
                      v193 = v186 + 40;
                      *(_QWORD *)&buf[v193] = v192;
                      *(void **)((char *)v356 + v193) = CFSTR("CurrentCapacity");
                      v319 = word_1EF99A1AC;
                      v194 = CFNumberCreate(allocator, kCFNumberIntType, &v319);
                      v195 = v186 + 48;
                      *(_QWORD *)&buf[v195] = v194;
                      *(void **)((char *)v356 + v195) = CFSTR("MaxCapacity");
                      HIWORD(v196) = -18304;
                      LOWORD(v196) = word_1EF99A1D6;
                      *(_DWORD *)input = llroundf((float)((float)((float)word_1EF99A1BA * -0.000061035) + 1.0) * (float)v196);
                      v197 = CFNumberCreate(allocator, kCFNumberIntType, input);
                      v198 = v186 + 56;
                      *(_QWORD *)&buf[v198] = v197;
                      *(void **)((char *)v356 + v198) = CFSTR("AbsoluteCapacity");
                      v199 = v305;
                      if (!v271)
                        v199 = v291;
                      v200 = v186 + 64;
                      *(_QWORD *)&buf[v200] = v199;
                      *(void **)((char *)v356 + v200) = CFSTR("AtCriticalLevel");
                      v318 = (unsigned __int16)word_1EF99A1DA;
                      v201 = CFNumberCreate(allocator, kCFNumberIntType, &v318);
                      v202 = v186 + 72;
                      *(_QWORD *)&buf[v202] = v201;
                      *(void **)((char *)v356 + v202) = CFSTR("AppleRawBatteryFlags");
                      v203 = (char *)&logc[1].isa + 2;
                      if ((v294 & 1) != 0)
                      {
                        v317 = (unsigned __int16)word_1EF99A1B8;
                        *(_QWORD *)&buf[8 * (_QWORD)v203] = CFNumberCreate(allocator, kCFNumberIntType, &v317);
                        v356[(_QWORD)v203] = CFSTR("ITMiscStatus");
                        v316 = word_1EF99A1B8 & 3;
                        v204 = CFNumberCreate(allocator, kCFNumberIntType, &v316);
                        v205 = v186 + 88;
                        *(_QWORD *)&buf[v205] = v204;
                        *(void **)((char *)v356 + v205) = CFSTR("ITSimulationCounter");
                        v315 = ((unsigned __int16)word_1EF99A1B8 >> 2) & 3;
                        v206 = CFNumberCreate(allocator, kCFNumberIntType, &v315);
                        v207 = v186 + 96;
                        *(_QWORD *)&buf[v207] = v206;
                        *(void **)((char *)v356 + v207) = CFSTR("RaUpdateCounter");
                        v203 = (char *)&logc[1].isa + 5;
                      }
                      v314 = word_1EF99A1DA & 0x80;
                      *(_QWORD *)&buf[8 * (_QWORD)v203] = CFNumberCreate(allocator, kCFNumberIntType, &v314);
                      v356[(_QWORD)v203] = CFSTR("OCVTakenFlag");
                      v313 = word_1EF99A1DA & 0x200;
                      v208 = CFNumberCreate(allocator, kCFNumberIntType, &v313);
                      v209 = 8 * (_QWORD)v203 + 8;
                      *(_QWORD *)&buf[v209] = v208;
                      *(void **)((char *)v356 + v209) = CFSTR("FCFlag");
                      v183 = (unint64_t)(v203 + 2);
                      if (!v264)
                        goto LABEL_406;
                      v312 = (unsigned __int16)word_1EF99A1D4;
                      *(_QWORD *)&buf[8 * v183] = CFNumberCreate(allocator, kCFNumberIntType, &v312);
                      v356[v183] = CFSTR("CycleCount");
                      v311 = word_1EF99A1A2;
                      v210 = CFNumberCreate(allocator, kCFNumberIntType, &v311);
                      v211 = 8 * (_QWORD)v203 + 24;
                      *(_QWORD *)&buf[v211] = v210;
                      *(void **)((char *)v356 + v211) = CFSTR("DesignCapacity");
                      v183 = (unint64_t)(v203 + 4);
                      v212 = parseBatteryData(v294 & 1, v280);
                      *(_QWORD *)&buf[8 * (_QWORD)(v203 + 4)] = v212;
                      if (v212)
                      {
                        U16 = 0;
                        if (v284)
                          CFShow(v212);
                        v356[v183] = CFSTR("BatteryData");
                        v183 = (unint64_t)(v203 + 5);
                        v181 = v271;
                      }
                      else
                      {
LABEL_406:
                        v181 = v271;
                        U16 = 0;
                      }
                      v2 = (_DWORD *)&unk_1EF99A000;
                    }
                    if (v286 && (updateThread_oneTime & 1) == 0)
                    {
                      v352 = 0u;
                      memset(input, 0, sizeof(input));
                      *(_OWORD *)keys = 0u;
                      v351 = 0u;
                      if (ggctl_logShutdownReason(v300, (uint64_t)input, 1u) || !*(_QWORD *)&input[40])
                      {
                        v215 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)v346 = 136315394;
                          v347 = "updateThread";
                          v348 = 1024;
                          v349 = 3577;
                          _os_log_impl(&dword_1CAF47000, v215, OS_LOG_TYPE_DEFAULT, "%s:%d  Error Reading Shutdown reason", v346, 0x12u);
                        }
                        v2 = (_DWORD *)&unk_1EF99A000;
                      }
                      else
                      {
                        ggctl_logShutdownReason2(v300, keys, 1u);
                        v213 = parseShutdownReason((__int16 *)input, (const UInt8 *)keys, v300);
                        if (v213)
                        {
                          v214 = v213;
                          if (v284)
                            CFShow(v213);
                          *(_QWORD *)&buf[8 * v183] = v214;
                          v356[v183++] = CFSTR("BatteryShutdownReason");
                        }
                        memset(input, 0, sizeof(input));
                        ggctl_logShutdownReason(v300, (uint64_t)input, 0);
                        *(_OWORD *)keys = 0u;
                        v351 = 0u;
                        v352 = 0u;
                        ggctl_logShutdownReason2(v300, keys, 0);
                        v2 = (_DWORD *)&unk_1EF99A000;
                      }
                      updateThread_oneTime = 1;
                      v181 = v271;
                    }
                    if (v181)
                      readIMAXAndSOCSmoothData(byte_1EF99A23E, v179, v300);
                    if (!U16)
                    {
                      v216 = CFDictionaryCreate(allocator, (const void **)v356, (const void **)buf, v183, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (v216)
                      {
                        v217 = v216;
                        if (v284)
                          CFShow(v216);
                        if (debug_polling)
                        {
                          v218 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)input = 136315650;
                            *(_QWORD *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3600;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v58;
                            _os_log_impl(&dword_1CAF47000, v218, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d PUBLISHING BATTERY data", input, 0x18u);
                          }
                        }
                        v219 = v217;
                        U16 = IORegistryEntrySetCFProperties(v6, v217);
                        if (U16)
                        {
                          v278 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)input = 67109120;
                            *(_DWORD *)&input[4] = U16;
                            _os_log_error_impl(&dword_1CAF47000, v278, OS_LOG_TYPE_ERROR, "IORegistryEntrySetCFProperties(0x%x)", input, 8u);
                          }
                        }
                        CFRelease(v219);
                        ++debug_cnt_ut_sent;
                      }
                      else
                      {
                        v220 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)input = 136315650;
                          *(_QWORD *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3608;
                          *(_WORD *)&input[18] = 1024;
                          *(_DWORD *)&input[20] = v58;
                          _os_log_error_impl(&dword_1CAF47000, v220, OS_LOG_TYPE_ERROR, "%s:%d  updatesDone=%d dictionary failed", input, 0x18u);
                        }
                        U16 = 0;
                      }
                      v2 = (_DWORD *)&unk_1EF99A000;
                    }
                    do
                      CFRelease(*(CFTypeRef *)&buf[8 * v183 - 8]);
                    while (v183-- > 1);
                    if (U16)
                      goto LABEL_440;
                    if (v295)
                    {
                      if ((v283 & 1) != 0)
                      {
                        S16 = controlReadS16(v300, 25, 0);
                        if (S16)
                        {
                          v223 = S16;
                          v224 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)input = 67109120;
                            *(_DWORD *)&input[4] = v223;
                            _os_log_error_impl(&dword_1CAF47000, v224, OS_LOG_TYPE_ERROR, "CCA: usermode cannot disable DLOG (%#x)", input, 8u);
                          }
                          LOBYTE(v283) = 1;
                        }
                        else
                        {
                          LOBYTE(v283) = 0;
                          *(_DWORD *)(v289 + 24) = 0;
                          *(_DWORD *)(v289 + 16) = 0;
                          *(_QWORD *)(v289 + 8) = 0;
                        }
                        goto LABEL_517;
                      }
                      LOBYTE(v283) = 0;
LABEL_518:
                      if (v2[246])
                      {
                        v2[246] = 0;
                        v255 = logger;
                        v256 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if (v59 == 0.0)
                        {
                          if (v256)
                          {
                            *(_WORD *)input = 0;
                            v257 = v255;
                            v258 = "gasgauge success after previous failure";
                            v259 = 2;
                            goto LABEL_524;
                          }
                        }
                        else if (v256)
                        {
                          v260 = CFAbsoluteTimeGetCurrent();
                          *(_DWORD *)input = 134217984;
                          *(double *)&input[4] = v260 - v59;
                          v257 = v255;
                          v258 = "gasgauge success after previous %gs failure";
                          v259 = 12;
LABEL_524:
                          _os_log_impl(&dword_1CAF47000, v257, OS_LOG_TYPE_DEFAULT, v258, input, v259);
                        }
                      }
                      v59 = CFAbsoluteTimeGetCurrent();
                      v56 = 0;
                      v57 = 0;
                      word_1EF99A25E = word_1EF99A1AA;
                      word_1EF99A260 = word_1EF99A1B2;
                      dword_1EF99A262 = *(_DWORD *)&word_1EF99A1AC;
                      word_1EF99A266 = word_1EF99A1B4;
                      ++v58;
                      goto LABEL_445;
                    }
                    if ((unsigned __int16)word_1EF99A1A6 < 0x132u)
                      goto LABEL_518;
                    if ((v281 & 1) != 0)
                    {
                      v225 = time(0);
                      if (v225 < v279)
                      {
                        v226 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)input = 134217984;
                          *(_QWORD *)&input[4] = v279;
                          v227 = v226;
                          v228 = "CCA: wait for deadline now=%lu";
                          goto LABEL_476;
                        }
                        goto LABEL_477;
                      }
                      v230 = v225;
                      if ((unsigned __int16)word_1EF99A1A6 < 0x600u)
                      {
                        LOWORD(keys[0]) = 0;
                        v236 = controlReadU16(v300, 0, keys);
                        if (v236)
                        {
                          v237 = v236;
                          v238 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)input = 67109120;
                            *(_DWORD *)&input[4] = v237;
                            _os_log_error_impl(&dword_1CAF47000, v238, OS_LOG_TYPE_ERROR, "CCA: cannot read DLOG status (%#x)", input, 8u);
                          }
                          goto LABEL_477;
                        }
                        v239 = (__int16)keys[0];
                        v232 = logger;
                        v240 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if ((v239 & 0x800) != 0)
                        {
                          if (!v240)
                            goto LABEL_477;
                          goto LABEL_475;
                        }
                        if (v240)
                        {
                          *(_DWORD *)input = 67109376;
                          *(_DWORD *)&input[4] = v58;
                          *(_WORD *)&input[8] = 2048;
                          *(_QWORD *)&input[10] = v230;
                          v234 = v232;
                          v235 = "CCA: re-enable DLOG updatesDone=%d, now=%lu";
LABEL_472:
                          _os_log_impl(&dword_1CAF47000, v234, OS_LOG_TYPE_DEFAULT, v235, input, 0x12u);
                        }
LABEL_473:
                        v229 = 0;
                        v279 = 0;
                      }
                      else
                      {
                        v231 = word_1EF99A1DA;
                        v232 = logger;
                        v233 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if ((v231 & 0x20) == 0)
                        {
                          if (v233)
                          {
                            *(_DWORD *)input = 67109376;
                            *(_DWORD *)&input[4] = v58;
                            *(_WORD *)&input[8] = 2048;
                            *(_QWORD *)&input[10] = v230;
                            v234 = v232;
                            v235 = "CCA: re-enable DLOG updatesDone=%u, now=%lu";
                            goto LABEL_472;
                          }
                          goto LABEL_473;
                        }
                        if (!v233)
                          goto LABEL_477;
LABEL_475:
                        *(_DWORD *)input = 134217984;
                        *(_QWORD *)&input[4] = v230;
                        v227 = v232;
                        v228 = "CCA: GasGauge still calibrating now=%lu";
LABEL_476:
                        _os_log_impl(&dword_1CAF47000, v227, OS_LOG_TYPE_DEFAULT, v228, input, 0xCu);
LABEL_477:
                        v229 = 1;
                      }
                    }
                    else
                    {
                      v229 = 0;
                    }
                    if ((v283 & 1) != 0)
                    {
                      if (*(_DWORD *)(v289 + 4))
                        goto LABEL_485;
                      v241 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                      {
                        v242 = *(_DWORD *)(v289 + 4);
                        *(_DWORD *)input = 67109120;
                        *(_DWORD *)&input[4] = v242;
                        _os_log_impl(&dword_1CAF47000, v241, OS_LOG_TYPE_DEFAULT, "disabling DLOG (num_clients=%i)", input, 8u);
                      }
                      v243 = controlReadS16(v300, 25, 0);
                      if (v243)
                      {
                        v244 = v243;
                        v245 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)input = 67109120;
                          *(_DWORD *)&input[4] = v244;
                          _os_log_error_impl(&dword_1CAF47000, v245, OS_LOG_TYPE_ERROR, "cannot disable DLOG (%#x)", input, 8u);
                        }
LABEL_485:
                        v283 = 1;
                      }
                      else
                      {
                        v283 = 0;
                        *(_DWORD *)(v289 + 24) = 0;
                        *(_DWORD *)(v289 + 16) = 0;
                        *(_QWORD *)(v289 + 8) = 0;
                      }
                    }
                    else
                    {
                      v283 = 0;
                    }
                    if (*(_DWORD *)(v289 + 4))
                      v246 = v229;
                    else
                      v246 = 1;
                    if ((v246 & 1) == 0)
                    {
                      if (!v58 || v283 != 1)
                      {
                        v247 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          v248 = *(_DWORD *)(v289 + 4);
                          *(_DWORD *)input = 67109376;
                          *(_DWORD *)&input[4] = v58;
                          *(_WORD *)&input[8] = 1024;
                          *(_DWORD *)&input[10] = v248;
                          _os_log_impl(&dword_1CAF47000, v247, OS_LOG_TYPE_DEFAULT, "gathering data log updatesDone=%d num_clients=%d", input, 0xEu);
                        }
                      }
                      if ((*(_DWORD *)(v289 + 4) & 0x80000000) != 0
                        && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                      {
                        updateThread_cold_4(&v309, v310);
                      }
                      if (drainDataLog(v300))
                      {
                        v249 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          updateThread_cold_3(v344, v345, v249);
                      }
                      v283 = 1;
                    }
                    if ((v229 & 1) != 0)
                    {
                      v250 = 1;
                    }
                    else if ((unsigned __int16)word_1EF99A1A6 < 0x600u)
                    {
                      v250 = v263;
                      if ((unsigned __int16)word_1EF99A1A6 <= 0x501u)
                        v250 = 0;
                    }
                    else
                    {
                      v250 = ((unsigned __int16)word_1EF99A1DA >> 5) & 1;
                    }
                    v281 = v250;
                    if ((v283 & v250) == 1)
                    {
                      v251 = controlReadS16(v300, 25, 0);
                      if (v251)
                      {
                        v252 = v251;
                        v253 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)input = 67109120;
                          *(_DWORD *)&input[4] = v252;
                          _os_log_error_impl(&dword_1CAF47000, v253, OS_LOG_TYPE_ERROR, "CCA: cannot disable DLOG (%#x)", input, 8u);
                        }
                        v281 = 0;
                        LOBYTE(v283) = 1;
                      }
                      else
                      {
                        *(_DWORD *)(v289 + 16) = 0;
                        *(_QWORD *)(v289 + 8) = 0;
                        v279 = time(0) + 20;
                        v254 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)input = 67109376;
                          *(_DWORD *)&input[4] = v58;
                          *(_WORD *)&input[8] = 2048;
                          *(_QWORD *)&input[10] = v279;
                          _os_log_impl(&dword_1CAF47000, v254, OS_LOG_TYPE_DEFAULT, "CCA: disabled DLOG updatesDone=%d ccaDeadline=%lu", input, 0x12u);
                        }
                        LOBYTE(v283) = 0;
                        v281 = 1;
                      }
                    }
                    p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
LABEL_517:
                    v2 = &unk_1EF99A000;
                    goto LABEL_518;
                  }
LABEL_203:
                  if (debug_polling)
                  {
                    v103 = p_vtable[411];
                    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)input = 136315650;
                      *(_QWORD *)&input[4] = "updateThread";
                      *(_WORD *)&input[12] = 1024;
                      *(_DWORD *)&input[14] = 3146;
                      *(_WORD *)&input[18] = 1024;
                      *(_DWORD *)&input[20] = v58;
                      _os_log_impl(&dword_1CAF47000, v103, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d READING FLAGS", input, 0x18u);
                    }
                  }
                  v104 = hdqReadU16(v300, 10, &word_1EF99A1DA);
                  v105 = 0;
                  v272 = v104;
                  if (v104 || (unsigned __int16)word_1EF99A1DA == 0xFFFF)
                  {
                    v106 = v275;
                  }
                  else
                  {
                    v106 = v275;
                    if (((v292 ^ 1) & 1) == 0)
                    {
                      if (word_1EF99A304)
                      {
                        v270 = 0;
                        if ((v294 & 0x20) != 0)
                        {
                          v107 = v285
                              && (unsigned __int16)(word_1EF99A304 & word_1EF99A1DA) == (unsigned __int16)word_1EF99A304;
                          v285 = (unsigned __int16)(word_1EF99A304 & word_1EF99A1DA) == (unsigned __int16)word_1EF99A304;
                        }
                        else
                        {
                          v107 = (unsigned __int16)(word_1EF99A304 & word_1EF99A1DA) == (unsigned __int16)word_1EF99A304;
                        }
                      }
                      else if (v58 && dword_1EF99A308 >= word_1EF99A1AA)
                      {
                        v270 = 0;
                        v107 = 1;
                      }
                      else
                      {
                        v107 = ((unsigned __int16)word_1EF99A1DA >> 2) & 1;
                        v270 = 1;
                      }
                      if (debug_polling)
                      {
                        v116 = p_vtable[411];
                        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                        {
                          v117 = UpSeconds();
                          *(_DWORD *)input = 136317186;
                          *(_QWORD *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3178;
                          *(_WORD *)&input[18] = 1024;
                          *(_DWORD *)&input[20] = v58;
                          *(_WORD *)&input[24] = 1024;
                          *(_DWORD *)&input[26] = v107;
                          *(_WORD *)&input[30] = 1024;
                          *(_DWORD *)&input[32] = v302;
                          p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                          *(_WORD *)&input[36] = 2048;
                          *(_QWORD *)&input[38] = v117;
                          *(_WORD *)&input[46] = 1024;
                          *(_DWORD *)&input[48] = v341;
                          LOWORD(v354) = 1024;
                          *(_DWORD *)((char *)&v354 + 2) = dword_1EF99A308;
                          HIWORD(v354) = 1024;
                          v355 = word_1EF99A1AA;
                          _os_log_impl(&dword_1CAF47000, v116, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d criticalValue=%d external_connected=%d UpSeconds=%llu cfd=%d cfd-voltage=%d batteryInfo.voltage=%d", input, 0x40u);
                        }
                      }
                      if (!v341)
                        goto LABEL_263;
                      v118 = UpSeconds();
                      if (v118 <= v341)
                      {
                        if (!v58)
                          goto LABEL_533;
                        v121 = word_1EF99A1AA;
                        if (dword_1EF99A308 >= word_1EF99A1AA)
                        {
                          v124 = v118;
                          v125 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)input = 136316162;
                            *(_QWORD *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3201;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v58;
                            *(_WORD *)&input[24] = 2048;
                            *(_QWORD *)&input[26] = v124;
                            *(_WORD *)&input[34] = 1024;
                            *(_DWORD *)&input[36] = v121;
                            _os_log_impl(&dword_1CAF47000, v125, OS_LOG_TYPE_DEFAULT, "%s:%d updatesDone=%d UpSeconds=%llu voltage=%d (low)", input, 0x28u);
                          }
                          v270 = 0;
                          v107 = 1;
                          p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                          goto LABEL_263;
                        }
                        p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                        if (v302)
                        {
LABEL_533:
                          if (debug_polling)
                          {
                            if (v107)
                            {
                              v122 = p_vtable[411];
                              if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
                              {
                                v123 = UpSeconds();
                                *(_DWORD *)input = 136315906;
                                *(_QWORD *)&input[4] = "updateThread";
                                *(_WORD *)&input[12] = 1024;
                                *(_DWORD *)&input[14] = 3209;
                                *(_WORD *)&input[18] = 2048;
                                *(_QWORD *)&input[20] = v123;
                                *(_WORD *)&input[28] = 1024;
                                *(_DWORD *)&input[30] = v341;
                                _os_log_impl(&dword_1CAF47000, v122, OS_LOG_TYPE_DEFAULT, "%s:%d UpSeconds=%llu (cfd = %u) forcing critical to 0", input, 0x22u);
                              }
                            }
                          }
                          if (!v270)
                            v107 = 0;
                          v270 = v270 << 31 >> 31;
                        }
                      }
                      else if (debug_polling)
                      {
                        v119 = p_vtable[411];
                        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                        {
                          v120 = UpSeconds();
                          *(_DWORD *)input = 136315906;
                          *(_QWORD *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3191;
                          *(_WORD *)&input[18] = 2048;
                          *(_QWORD *)&input[20] = v120;
                          *(_WORD *)&input[28] = 1024;
                          *(_DWORD *)&input[30] = v341;
                          _os_log_impl(&dword_1CAF47000, v119, OS_LOG_TYPE_DEFAULT, "%s:%d deadline expired at UpSeconds=%llu (cfd = %u)", input, 0x22u);
                        }
                      }
LABEL_263:
                      if (!word_1EF99A304)
                      {
                        v328 = v270;
                        *(_QWORD *)((unint64_t)buf | (8 * v275)) = CFNumberCreate(allocator, kCFNumberIntType, &v328);
                        *(_QWORD *)((unint64_t)v356 & 0xFFFFFFFFFFFFFFF7 | (8 * (v275 & 1))) = CFSTR("SOCBasedShutdown");
                        v106 = v275 + 1;
                      }
                      if (debug_polling)
                      {
                        if (v107)
                        {
                          v126 = p_vtable[411];
                          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                          {
                            v127 = UpSeconds();
                            *(_DWORD *)input = 136316674;
                            *(_QWORD *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3227;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v58;
                            *(_WORD *)&input[24] = 1024;
                            *(_DWORD *)&input[26] = 1;
                            *(_WORD *)&input[30] = 1024;
                            *(_DWORD *)&input[32] = v302;
                            p_vtable = AWDMETRICSCellularPowerLogNRDCEvent.vtable;
                            *(_WORD *)&input[36] = 2048;
                            *(_QWORD *)&input[38] = v127;
                            *(_WORD *)&input[46] = 1024;
                            *(_DWORD *)&input[48] = word_1EF99A1AA;
                            _os_log_impl(&dword_1CAF47000, v126, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d criticalValue=%d external_connected=%d UpSeconds=%llu batteryInfo.voltage=%d", input, 0x34u);
                          }
                        }
                      }
                      v105 = v107 != 0;
                      v2 = (_DWORD *)&unk_1EF99A000;
                    }
                  }
                  if ((v72 & 1) == 0 || (v290 > 2 ? (v128 = 1) : (v128 = v105), (v128 & 1) != 0 || v57))
                  {
                    v271 = v105;
                    v290 = 0;
                    goto LABEL_280;
                  }
                  ++v290;
                  v129 = p_vtable[411];
                  if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)input = 0;
                    _os_log_impl(&dword_1CAF47000, v129, OS_LOG_TYPE_INFO, "flags update only", input, 2u);
                  }
                  v56 = 0;
                  v57 = 0;
LABEL_445:
                  v62 = v300;
                }
              }
              else
              {
                v92 = CFPreferencesCopyValue(CFSTR("ResetEnabled"), CFSTR("com.apple.gasgauge"), v298, v297);
                v93 = os_log_type_enabled((os_log_t)p_vtable[411], OS_LOG_TYPE_ERROR);
                if (v92 == v291)
                {
                  v94 = v300;
                  if (v93)
                    updateThread_cold_5(&v333, v334);
                }
                else
                {
                  if (v93)
                    updateThread_cold_6(&v331, v332);
                  v94 = v300;
                  ggctl_reset(v300, 1u);
                }
                v56 = 0;
                ++v57;
                v62 = v94;
              }
            }
          }
        }
        else
        {
          v56 = 0;
LABEL_166:
          v62 = -1;
        }
      }
    }
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      updateThread_cold_1();
  }
  return 0;
}

uint64_t batteryThread(unsigned int a1)
{
  updateThread(a1);
  return 0;
}

uint64_t iokit_callback(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_DWORD *)result = a3;
  *(_QWORD *)(result + 8) = a4;
  return result;
}

void getUPOData(CFStringRef key, void *a2)
{
  io_registry_entry_t v4;
  CFAllocatorRef *v5;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  CFTypeRef CFProperty;
  const void *v12;
  CFTypeID TypeID;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = find_pmu_pmu_service;
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (find_pmu_pmu_service)
    goto LABEL_7;
  v6 = IOServiceMatching("IOService");
  if (v6)
  {
    v7 = v6;
    v15 = 0;
    v8 = *v5;
    find_pmu_zero_number = (uint64_t)CFNumberCreate(*v5, kCFNumberSInt32Type, &v15);
    v9 = CFDictionaryCreate(v8, (const void **)find_pmu_tmp, (const void **)&find_pmu_zero_number, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v9)
    {
      v10 = v9;
      CFDictionarySetValue(v7, CFSTR("IOPropertyMatch"), v9);
      CFRelease(v10);
      find_pmu_pmu_service = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v7);
    }
    else
    {
      CFRelease(v7);
    }
  }
  v4 = find_pmu_pmu_service;
  if (find_pmu_pmu_service)
  {
LABEL_7:
    CFProperty = IORegistryEntryCreateCFProperty(v4, key, *v5, 0);
    if (CFProperty)
    {
      v12 = CFProperty;
      TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(v12) || !CFNumberGetValue((CFNumberRef)v12, kCFNumberSInt32Type, a2))
      {
        v14 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 136315394;
          v16 = "/Library/Caches/com.apple.xbs/Sources/AppleHDQGasGauge/AppleHDQGasGauge.c";
          v17 = 1024;
          v18 = 2348;
          _os_log_impl(&dword_1CAF47000, v14, OS_LOG_TYPE_DEFAULT, "%s:%d cannot read upo data", (uint8_t *)&v15, 0x12u);
        }
      }
      CFRelease(v12);
    }
  }
}

void setUPOData(const __CFString *a1, int a2)
{
  CFMutableDictionaryRef v3;
  __CFDictionary *v4;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  io_service_t MatchingService;
  io_registry_entry_t v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  int valuePtr;
  int v14;

  v14 = a2;
  v3 = IOServiceMatching("IOService");
  if (v3)
  {
    v4 = v3;
    valuePtr = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    v6 = CFDictionaryCreate(v5, (const void **)&setUPOData_tmp, (const void **)&v12, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(v4, CFSTR("IOPropertyMatch"), v6);
      CFRelease(v7);
      MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v4);
      if (!MatchingService)
        return;
      v9 = MatchingService;
      v10 = CFNumberCreate(v5, kCFNumberSInt32Type, &v14);
      IORegistryEntrySetCFProperty(v9, a1, v10);
      IOObjectRelease(v9);
      v11 = v10;
    }
    else
    {
      v11 = v4;
    }
    CFRelease(v11);
  }
}

void updateThermalCoolDownState(io_registry_entry_t a1, int a2)
{
  const __CFAllocator *v4;
  void **v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  keys[0] = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "ThermalCoolDown", 0x8000100u);
  v5 = (void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v5 = (void **)MEMORY[0x1E0C9AE40];
  values = *v5;
  v6 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    v7 = v6;
    IORegistryEntrySetCFProperties(a1, v6);
    CFRelease(v7);
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    updateThermalCoolDownState_cold_1();
  }
}

void statsAndLogs(io_registry_entry_t a1, int a2)
{
  const __CFAllocator *v4;
  const void *v5;
  CFIndex v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  void *values;
  CFTypeRef cf;
  void *keys;
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  cf = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  keys = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "stats", 0x8000100u);
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  values = (void *)*MEMORY[0x1E0C9AE40];
  if (a2)
  {
    v12 = CFStringCreateWithCString(v4, "log", 0x8000100u);
    cf = v5;
    v6 = 2;
  }
  else
  {
    v6 = 1;
  }
  v7 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v7)
  {
    v8 = v7;
    if (IORegistryEntrySetCFProperties(a1, v7) && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      statsAndLogs_cold_2();
    CFRelease(v8);
    CFRelease(values);
    if (a2)
      CFRelease(cf);
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    statsAndLogs_cold_1();
  }
}

void debugLog(io_registry_entry_t a1, int a2)
{
  const __CFAllocator *v3;
  CFDictionaryRef v4;
  CFDictionaryRef v5;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  keys[0] = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "debug", 0x8000100u);
  values = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  v4 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v4)
  {
    v5 = v4;
    if (IORegistryEntrySetCFProperties(a1, v4))
    {
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
        debugLog_cold_2();
    }
    CFRelease(v5);
    CFRelease(values);
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    debugLog_cold_1();
  }
}

uint64_t readChargeTable(mach_port_t a1, __CFData **a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char *p_outputStruct;
  char v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  __CFData *Mutable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  UInt8 *MutableBytePtr;
  UInt8 *v28;
  char *v29;
  UInt8 *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  unsigned __int8 outputStruct;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  _BYTE v48[34];

  *(_QWORD *)&v48[26] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  if (!dword_1EF99A27C)
    return 0;
  v3 = 0xFFFFFFFFLL;
  if (!ggctl_readBlock(a1, -1, dword_1EF99A27C, &outputStruct, 0))
  {
    v4 = v47;
    if (v47 == 255)
    {
      v9 = outputStruct;
      v10 = (unint64_t)outputStruct >> 4;
      v11 = 6 * v10 + 4;
      if (outputStruct <= 0x4FuLL)
      {
        v13 = 0;
        v37 = v46;
        p_outputStruct = (char *)&outputStruct;
        do
        {
          v15 = *p_outputStruct++;
          v13 += v15;
          --v11;
        }
        while (v11);
        v16 = v13;
        if (v13)
        {
          v17 = logger;
          v3 = 0;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            v39 = v16;
            v40 = 1024;
            v41 = v45;
            v42 = 1024;
            v43 = 256 - (v16 - v45);
            v6 = "gas gauge charge table bad checksum: checksum %#x checksum byte %#x expecting %#x";
            v7 = v17;
            v8 = 20;
            goto LABEL_14;
          }
        }
        else
        {
          v19 = (unint64_t)v46 >> 4;
          v20 = 4 * v19 + 8;
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20 * (unint64_t)v10);
          CFDataSetLength(Mutable, v20 * (unint64_t)v10);
          if (v9 >= 0x10)
          {
            v22 = 0;
            if (v19 <= 1)
              v23 = 1;
            else
              v23 = v19;
            v36 = v23;
            if (v10 <= 1)
              v24 = 1;
            else
              v24 = v10;
            v25 = v48;
            v26 = 10;
            do
            {
              MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
              v28 = &MutableBytePtr[v22 * v20];
              v29 = (char *)(&outputStruct + 6 * v22);
              *(_WORD *)v28 = 100 * v29[4];
              *((_WORD *)v28 + 1) = 100 * v29[5];
              *((_DWORD *)v28 + 1) = v19;
              if (v37 >= 0x10)
              {
                v30 = &MutableBytePtr[v26];
                v31 = v19 - 1;
                v32 = v36;
                v33 = v25;
                do
                {
                  if (v31)
                    v34 = updateThread_batteryInfo[(*v33 & 0xF) + 64];
                  else
                    LOWORD(v34) = -1;
                  *((_WORD *)v30 - 1) = v34;
                  v35 = *v33++;
                  *(_WORD *)v30 = *(int *)((char *)&updateThread_batteryInfo[80] + (((unint64_t)v35 >> 2) & 0x3C));
                  v30 += 4;
                  --v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v26 += v20;
              v25 += 6;
            }
            while (v22 != v24);
          }
          v3 = 0;
          *a2 = Mutable;
        }
      }
      else
      {
        v12 = logger;
        v3 = 0;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v39 = v10;
          v40 = 1024;
          v41 = 6 * v10 + 4;
          v6 = "gas gauge charge table inconsistent: %d data entries, %d bytes";
          v7 = v12;
          v8 = 14;
          goto LABEL_14;
        }
      }
    }
    else
    {
      v5 = logger;
      v3 = 0;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v39 = v4;
        v6 = "gas gauge charge table invalid type: %#x";
        v7 = v5;
        v8 = 8;
LABEL_14:
        _os_log_impl(&dword_1CAF47000, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t readRemainingCapacity__(_WORD *a1, int *a2, mach_port_t a3)
{
  int v6;
  unsigned __int16 v8;

  v8 = 0;
  if ((getFWVersion(a3, (__int16 *)&v8) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (v8 <= 0x118u)
    v6 = *a2;
  else
    v6 = 50;
  return hdqReadS16(a3, v6, a1);
}

uint64_t readFAC__(_WORD *a1, uint64_t a2, mach_port_t a3)
{
  __int16 v6;

  v6 = 0;
  if ((getFWVersion(a3, &v6) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (v6 == 1536)
    return 0;
  return hdqReadU16(a3, 14, a1);
}

uint64_t readBatteryData(uint64_t a1, uint64_t a2, mach_port_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t Register;
  unsigned __int16 v10;

  v10 = 0;
  if ((getFWVersion(a3, (__int16 *)&v10) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if ((int)a2 >= 1)
  {
    v6 = 0;
    v7 = v10;
    while (1)
    {
      if (*(_DWORD *)(a1 + 4) == -1)
        return v6;
      if (registerName(a1, v7))
      {
        Register = readRegister(*(_WORD **)(a1 + 56), a1, a3);
        if ((Register & 0x80000000) != 0)
          break;
      }
      ++v6;
      a1 += 80;
      if (a2 == v6)
        return a2;
    }
    return Register;
  }
  return a2;
}

void calculateBatteryHealthMetric()
{
  uint64_t v0;
  float v1;
  float v2;
  float v3;

  if ((unsigned __int16)word_1EF99A1A6 >= 0x600u)
  {
    v0 = 0;
    v1 = (double)(bswap32((unsigned __int16)word_1EF99A220) >> 16) * 0.137995
       + (double)(bswap32((unsigned __int16)word_1EF99A21E) >> 16) * 0.0693069
       + (double)(bswap32((unsigned __int16)word_1EF99A222) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EF99A224) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EF99A226) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EF99A228) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EF99A22A) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EF99A22C) >> 16) * 0.0872525
       + (double)(bswap32((unsigned __int16)word_1EF99A22E) >> 16) * 0.0185644;
    word_1EF99A274 = (int)v1;
    while (battery_health_metric_config[v0] != word_1EF99A1A0)
    {
      v0 += 4;
      if (v0 == 68)
      {
        v2 = 0.0;
        goto LABEL_7;
      }
    }
    v2 = (float)*(unsigned int *)&battery_health_metric_config[v0 + 2];
LABEL_7:
    v3 = (float)(v2 * v1) / 1000.0;
    word_1EF99A276 = (int)v3;
    if (dword_1EF99A270 < (int)v3)
    {
      dword_1EF99A270 = (int)v3;
      setUPOData(CFSTR("IOPMUBootBatteryHealthMetric"), (int)v3);
    }
  }
}

CFDictionaryRef readChargerData(int a1, int a2, mach_port_t a3)
{
  const __CFAllocator *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CFDictionaryRef v10;
  CFNumberRef v11;
  uint64_t v12;
  CFNumberRef v13;
  uint64_t v14;
  CFNumberRef v15;
  uint64_t v16;
  unint64_t v17;
  time_t v19;
  void *keys[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *values[9];

  values[8] = *(void **)MEMORY[0x1E0C80C00];
  if (readBatteryData((uint64_t)&readChargerData_chargerRegs, 5, a3) != 5)
    return 0;
  memset(&values[2], 0, 48);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt8Type, &readChargerData_notChargingReason);
  keys[0] = CFSTR("NotChargingReason");
  values[1] = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargerAlert);
  keys[1] = CFSTR("ChargerAlert");
  if (!a1)
    goto LABEL_11;
  v7 = readChargerData_notChargingReason & 0x10;
  if (a2)
  {
    if ((readChargerData_notChargingReason & 0x10) != 0)
    {
      v7 = (readChargerData_notChargingReason >> 4) & 1;
      LOWORD(v19) = 0;
      if ((hdqReadU16(a3, 52, &v19) & 0x80000000) == 0)
      {
        v8 = 1717986919 * byte_1EF99A1A8 * word_1EF99A1A2;
        if ((int)((v8 >> 34) + ((unint64_t)v8 >> 63)) > (unsigned __int16)v19)
          v7 = 0;
      }
    }
  }
  if (v7)
  {
    values[2] = *(void **)MEMORY[0x1E0C9AE50];
    *(_QWORD *)&v21 = CFSTR("ChargerTimeout");
    v9 = 3;
  }
  else
  {
LABEL_11:
    v9 = 2;
  }
  if ((readChargerData_notChargingReason & 0x20) != 0)
  {
    values[v9] = (void *)*MEMORY[0x1E0C9AE50];
    keys[v9++] = CFSTR("ChargerWatchdogTimeout");
  }
  values[v9] = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargingCurrent);
  keys[v9] = CFSTR("ChargingCurrent");
  v11 = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargingVoltage);
  v12 = 8 * v9 + 8;
  *(void **)((char *)values + v12) = v11;
  *(void **)((char *)keys + v12) = CFSTR("ChargingVoltage");
  v13 = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargerStatus);
  v14 = 8 * v9 + 16;
  *(void **)((char *)values + v14) = v13;
  *(void **)((char *)keys + v14) = CFSTR("ChargerStatus");
  v19 = time(0);
  v15 = CFNumberCreate(v6, kCFNumberLongType, &v19);
  v16 = 8 * v9 + 24;
  *(void **)((char *)values + v16) = v15;
  *(void **)((char *)keys + v16) = CFSTR("UpdateTime");
  v10 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v9 + 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
  {
    CFRelease(values[v9 + 3]);
    v17 = v9 + 4;
    --v9;
  }
  while (v17 > 1);
  return v10;
}

CFDictionaryRef dynamicATV(mach_port_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  const __CFAllocator *v7;
  int v8;
  unint64_t v9;
  CFDictionaryRef v10;
  const __CFString *v13;
  const __CFString *v14;
  void *values;
  CFNumberRef v16;
  uint64_t input[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v14 = 0;
  *(_OWORD *)input = xmmword_1CB387070;
  v18 = 0;
  if (IOConnectCallScalarMethod(a1, 7u, input, 3u, 0, 0))
  {
    v1 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      dynamicATV_cold_1(v1, v2, v3);
  }
  v4 = word_1EF99A1A4 + (unsigned __int16)word_1EF99A1AE;
  v5 = word_1EF99A1A2;
  if (v4 <= (__int16)(v5 + ((unsigned __int16)(v5 & 0x8000) >> 15)) >> 1)
    v6 = (__int16)(word_1EF99A1A2 + ((word_1EF99A1A2 & 0x8000u) >> 15)) >> 1;
  else
    v6 = word_1EF99A1A4 + (unsigned __int16)word_1EF99A1AE;
  if (v4 <= word_1EF99A1A2)
    v5 = v6;
  dword_1EF99A1CC = v5;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &dword_1EF99A1CC);
  v13 = CFSTR("atvBatteryCapacityMA");
  if (dword_1EF99A320)
  {
    v8 = determineVACVoltage();
    if (v8 != dword_1EF99A1C8)
      dword_1EF99A1C8 = v8;
    v16 = CFNumberCreate(v7, kCFNumberIntType, &dword_1EF99A1C8);
    v14 = CFSTR("atvAbsMaxVoltageMV");
    v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  v10 = CFDictionaryCreate(v7, (const void **)&v13, (const void **)&values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    CFRelease(*(&v14 + v9));
  while (v9-- > 1);
  return v10;
}

uint64_t determineVACVoltage()
{
  unsigned int v0;
  uint64_t v1;
  int *v3;
  unsigned __int16 v4;
  unsigned int v5;
  unsigned int v6;
  int v8;
  NSObject *v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unsigned __int8 *v14;
  unsigned __int16 v15;
  BOOL v17;
  unint64_t v18;
  int *v19;
  unsigned __int16 v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  NSObject *v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  NSObject *v34;
  int v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v0 = dword_1EF99A1C8;
  v1 = dword_1EF99A320;
  if (dword_1EF99A320)
  {
    if (determineVACVoltage_lastBatteryCycleCount != (unsigned __int16)word_1EF99A1D4 || dword_1EF99A1C8 == 0)
    {
      determineVACVoltage_lastBatteryCycleCount = (unsigned __int16)word_1EF99A1D4;
      v3 = &dword_1EF99A324;
      while (1)
      {
        v5 = *v3++;
        v4 = v5;
        v6 = HIWORD(v5);
        if (v5 < 0x10000 || v6 > (unsigned __int16)word_1EF99A1D4)
          break;
        if (!--v1)
        {
          v8 = determineVACVoltage_vacBasedVoltageMV;
          if (determineVACVoltage_vacBasedVoltageMV)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      v8 = v4;
      if (v4)
        goto LABEL_17;
LABEL_16:
      v8 = LOWORD(updateThread_batteryInfo[dword_1EF99A320 + 104]);
LABEL_17:
      determineVACVoltage_vacBasedVoltageMV = v8;
      v9 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 67109120;
        v38 = v8;
        _os_log_impl(&dword_1CAF47000, v9, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: vacBasedVoltageMV=%d", (uint8_t *)&v37, 8u);
        v8 = determineVACVoltage_vacBasedVoltageMV;
      }
      if (v0)
        v10 = 1;
      else
        v10 = v8 == 0;
      if (!v10)
        v0 = v8;
    }
  }
  v11 = dword_1EF99A364;
  if (dword_1EF99A364 && (unsigned __int16)word_1EF99A1A6 >= 0x313u)
  {
    v12 = word_1EF99A20E;
    if ((unsigned __int16)word_1EF99A1A6 <= 0x500u)
      v13 = word_1EF99A20E;
    else
      v13 = word_1EF99A20C;
    v14 = (unsigned __int8 *)&word_1EF99A20E + 1;
    if ((unsigned __int16)word_1EF99A1A6 > 0x500u)
      v14 = (unsigned __int8 *)&word_1EF99A20C + 1;
    v15 = *v14 | (unsigned __int16)(v13 << 8);
    if ((unsigned __int16)word_1EF99A1A6 <= 0x500u)
      v12 = byte_1EF99A210;
    if (v12 && v15 != 0)
    {
      if (determineVACVoltage_lastTimeAbove95 != v12
        || ((unsigned __int16)determineVACVoltage_lastToT == v15 ? (v17 = v0 == 0) : (v17 = 1), v17))
      {
        determineVACVoltage_lastTimeAbove95 = v12;
        determineVACVoltage_lastToT = v15;
        v18 = (42949673 * (unint64_t)(v12 * v15)) >> 32;
        v19 = &dword_1EF99A368;
        while (1)
        {
          v21 = *v19++;
          v20 = v21;
          v22 = HIWORD(v21);
          if (v21 < 0x10000 || v18 < v22)
            break;
          if (!--v11)
          {
            v24 = determineVACVoltage_vac95BasedVoltageMV;
            if (determineVACVoltage_vac95BasedVoltageMV)
              goto LABEL_54;
            goto LABEL_53;
          }
        }
        v24 = v20;
        if (v20)
          goto LABEL_54;
LABEL_53:
        v24 = LOWORD(updateThread_batteryInfo[dword_1EF99A364 + 121]);
LABEL_54:
        determineVACVoltage_vac95BasedVoltageMV = v24;
        v25 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 67109376;
          v38 = v24;
          v39 = 1024;
          v40 = v0;
          _os_log_impl(&dword_1CAF47000, v25, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: vac95BasedVoltageMV=%d absMaxVoltageMV=%d", (uint8_t *)&v37, 0xEu);
          v24 = determineVACVoltage_vac95BasedVoltageMV;
        }
        if (v0)
          v26 = 1;
        else
          v26 = v24 == 0;
        if (!v26)
          v0 = v24;
      }
    }
  }
  v27 = determineVACVoltage_vacBasedVoltageMV;
  if (determineVACVoltage_vacBasedVoltageMV >= v0 || determineVACVoltage_vacBasedVoltageMV == 0)
    v27 = v0;
  if (determineVACVoltage_vac95BasedVoltageMV >= v27 || determineVACVoltage_vac95BasedVoltageMV == 0)
    v30 = v27;
  else
    v30 = determineVACVoltage_vac95BasedVoltageMV;
  v31 = dword_1EF99A1C8;
  v32 = word_1EF99A1AA;
  if (dword_1EF99A1C8)
    v33 = v30 >= word_1EF99A1AA;
  else
    v33 = 1;
  if (v33)
    return v30;
  v34 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    v37 = 67109376;
    v38 = v32;
    v39 = 1024;
    v40 = v30;
    _os_log_impl(&dword_1CAF47000, v34, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: waiting for vbat(%d) < vac(%d)", (uint8_t *)&v37, 0xEu);
    return dword_1EF99A1C8;
  }
  return v31;
}

uint64_t determinePoSMThreshold()
{
  __int16 *v0;
  unsigned __int8 *v1;
  __int16 *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v26;
  NSObject *v29;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  uint8_t buf[4];
  _BOOL4 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)word_1EF99A1A6 <= 0x500u)
  {
    if ((unsigned __int16)word_1EF99A1A6 < 0x313u)
      return 0xFFFFFFFFLL;
    v2 = &word_1EF99A20E;
    v0 = (__int16 *)&byte_1EF99A210;
    v1 = (unsigned __int8 *)&word_1EF99A20E + 1;
  }
  else
  {
    v0 = &word_1EF99A20E;
    v1 = (unsigned __int8 *)&word_1EF99A20C + 1;
    v2 = &word_1EF99A20C;
  }
  v3 = *v1 | (*(unsigned __int8 *)v2 << 8);
  v4 = *(unsigned __int8 *)v0;
  v5 = (unsigned __int16)dword_1EF99A3AC;
  v6 = (unsigned __int16)dword_1EF99A3AC != 0;
  v7 = (unsigned __int16)word_1EF99A3B0;
  v8 = word_1EF99A3B0 != 0;
  v9 = (unsigned __int16)word_1EF99A3B8;
  v10 = word_1EF99A3B8 != 0;
  v11 = determinePoSMThreshold_lastBatteryCycleCount != (unsigned __int16)word_1EF99A1D4
     && (unsigned __int16)dword_1EF99A3AC != 0;
  v12 = (unsigned __int16)determinePoSMThreshold_lastToT != v3 && word_1EF99A3B0 != 0;
  v13 = determinePoSMThreshold_lastAbove95 != v4
     || (unsigned __int16)determinePoSMThreshold_lastToT != v3;
  v14 = determinePoSMThreshold_lastAbove95 != v4 && word_1EF99A3B8 != 0;
  v32 = v11;
  v33 = v14;
  v15 = (unsigned __int16)dword_1EF99A3B4;
  v31 = (unsigned __int16)dword_1EF99A3B4 != 0;
  if ((_WORD)dword_1EF99A3B4)
    v16 = v13;
  else
    v16 = 0;
  if (v11)
  {
    determinePoSMThreshold_lastBatteryCycleCount = (unsigned __int16)word_1EF99A1D4;
    if ((unsigned __int16)word_1EF99A1D4 <= HIWORD(dword_1EF99A3AC))
      v17 = -1;
    else
      v17 = dword_1EF99A3BC;
    determinePoSMThreshold_vacThreshold = v17;
  }
  if (v12)
  {
    determinePoSMThreshold_lastToT = v3;
    if (v3 <= HIWORD(*(_DWORD *)&word_1EF99A3B0))
      v18 = -1;
    else
      v18 = dword_1EF99A3C0;
    determinePoSMThreshold_vacpThreshold = v18;
  }
  if (v16)
  {
    determinePoSMThreshold_lastToT = v3;
    determinePoSMThreshold_lastAbove95 = v4;
    if ((42949673 * (unint64_t)(v4 * v3)) >> 32 <= HIWORD(dword_1EF99A3B4))
      v19 = -1;
    else
      v19 = dword_1EF99A3C4;
    determinePoSMThreshold_vac95Threshold = v19;
  }
  v34 = (unsigned __int16)word_1EF99A1D4;
  if (word_1EF99A3B8)
  {
    determinePoSMThreshold_lastAbove95 = v4;
    if (v4 <= HIWORD(*(_DWORD *)&word_1EF99A3B8))
    {
      v21 = &unk_1EF99A000;
      v20 = -1;
    }
    else
    {
      v20 = dword_1EF99A3C8;
      v21 = (_DWORD *)&unk_1EF99A000;
    }
    v21[275] = v20;
  }
  else
  {
    v20 = determinePoSMThreshold_vac95pThreshold;
  }
  if (determinePoSMThreshold_vacThreshold == -1 || v5 == 0)
    v24 = -1;
  else
    v24 = determinePoSMThreshold_vacThreshold;
  if (determinePoSMThreshold_vacpThreshold >= v24 || v7 == 0)
    v26 = v24;
  else
    v26 = determinePoSMThreshold_vacpThreshold;
  if (determinePoSMThreshold_vac95Threshold < v26 && v15 != 0)
    v26 = determinePoSMThreshold_vac95Threshold;
  if (v20 >= v26 || v9 == 0)
    v22 = v26;
  else
    v22 = v20;
  v29 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v36 = v6;
    v37 = 1024;
    v38 = v8;
    v39 = 1024;
    v40 = v31;
    v41 = 1024;
    v42 = v10;
    _os_log_impl(&dword_1CAF47000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, enabled:%d %d %d %d ", buf, 0x1Au);
    v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v36 = v32;
    v37 = 1024;
    v38 = v12;
    v39 = 1024;
    v40 = v16;
    v41 = 1024;
    v42 = v33;
    _os_log_impl(&dword_1CAF47000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, changed:%d %d %d %d ", buf, 0x1Au);
    v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110912;
    v36 = v34;
    v37 = 1024;
    v38 = HIWORD(dword_1EF99A3AC);
    v39 = 1024;
    v40 = v3;
    v41 = 1024;
    v42 = (unsigned __int16)word_1EF99A3B2;
    v43 = 1024;
    v44 = (42949673 * (unint64_t)(v4 * v3)) >> 32;
    v45 = 1024;
    v46 = HIWORD(dword_1EF99A3B4);
    v47 = 1024;
    v48 = v4;
    v49 = 1024;
    v50 = (unsigned __int16)word_1EF99A3BA;
    _os_log_impl(&dword_1CAF47000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, cmp:%d>%u %d>%u %d>%u %d>%u", buf, 0x32u);
    v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    v36 = v22;
    v37 = 1024;
    v38 = determinePoSMThreshold_vacThreshold;
    v39 = 1024;
    v40 = determinePoSMThreshold_vacpThreshold;
    v41 = 1024;
    v42 = determinePoSMThreshold_vac95Threshold;
    v43 = 1024;
    v44 = determinePoSMThreshold_vac95pThreshold;
    _os_log_impl(&dword_1CAF47000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold,minThreshold=%u threshold:%u %u %u %u", buf, 0x20u);
  }
  return v22;
}

CFDictionaryRef parseBatteryData(int a1, int a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  CFNumberRef v6;
  uint64_t v7;
  CFNumberRef v8;
  uint64_t v9;
  CFNumberRef v10;
  uint64_t v11;
  CFNumberRef v12;
  uint64_t v13;
  CFStringRef StringWithBytes;
  uint64_t v15;
  CFNumberRef v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  CFDictionaryRef v23;
  unint64_t v24;
  CFNumberRef v25;
  uint64_t v26;
  CFNumberRef v27;
  uint64_t v28;
  CFNumberRef v29;
  uint64_t v30;
  uint64_t v31;
  CFNumberRef v32;
  uint64_t v33;
  CFNumberRef v34;
  uint64_t v35;
  CFNumberRef v36;
  uint64_t v37;
  uint64_t v38;
  CFNumberRef v39;
  uint64_t v40;
  CFDictionaryRef v41;
  unint64_t v42;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int16 v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BYTE valuePtr[12];
  void *values;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  time_t v92;
  void *v93[3];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void *keys[22];
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  void *v126[21];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&valuePtr[4] = 0;
  v121 = 0;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v107 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)updateThread_batteryInfo, 32);
  v93[0] = CFSTR("MfgData");
  v108[0] = createStringWithBytes((UInt8 *)updateThread_batteryInfo, 0x12uLL);
  v93[1] = CFSTR("Serial");
  *(_QWORD *)valuePtr = word_1EF99A1A2;
  v108[1] = CFNumberCreate(v4, kCFNumberIntType, valuePtr);
  v93[2] = CFSTR("DesignCapacity");
  v64 = (unsigned __int16)word_1EF99A1D6;
  values = CFNumberCreate(v4, kCFNumberIntType, &v64);
  if (values)
  {
    *(_QWORD *)&v109 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    *(_QWORD *)&v94 = CFSTR("Qmax");
    CFRelease(values);
    v5 = 4;
  }
  else
  {
    v5 = 3;
  }
  v63 = word_1EF99A1AC;
  v108[v5 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v63);
  v93[v5] = CFSTR("MaxCapacity");
  v62 = (unsigned __int16)word_1EF99A1D4;
  v6 = CFNumberCreate(v4, kCFNumberIntType, &v62);
  v7 = 8 * v5 + 8;
  *(_QWORD *)((char *)&v108[-1] + v7) = v6;
  *(void **)((char *)v93 + v7) = CFSTR("CycleCount");
  v61 = (unsigned __int16)word_1EF99A1D8;
  v8 = CFNumberCreate(v4, kCFNumberIntType, &v61);
  v9 = 8 * v5 + 16;
  *(_QWORD *)((char *)&v108[-1] + v9) = v8;
  *(void **)((char *)v93 + v9) = CFSTR("StateOfCharge");
  v60 = word_1EF99A1AA;
  v10 = CFNumberCreate(v4, kCFNumberIntType, &v60);
  v11 = 8 * v5 + 24;
  *(_QWORD *)((char *)&v108[-1] + v11) = v10;
  *(void **)((char *)v93 + v11) = CFSTR("Voltage");
  v59 = (unsigned __int16)word_1EF99A1DA;
  v12 = CFNumberCreate(v4, kCFNumberIntType, &v59);
  v13 = 8 * v5 + 32;
  *(_QWORD *)((char *)&v108[-1] + v13) = v12;
  *(void **)((char *)v93 + v13) = CFSTR("Flags");
  StringWithBytes = createStringWithBytes((UInt8 *)updateThread_batteryInfo + 2, 4uLL);
  v15 = 8 * v5 + 40;
  *(_QWORD *)((char *)&v108[-1] + v15) = StringWithBytes;
  *(void **)((char *)v93 + v15) = CFSTR("ManufactureDate");
  v58 = word_1EF99A1A0;
  v16 = CFNumberCreate(v4, kCFNumberSInt16Type, &v58);
  v17 = 8 * v5 + 48;
  *(_QWORD *)((char *)&v108[-1] + v17) = v16;
  *(void **)((char *)v93 + v17) = CFSTR("ChemID");
  v18 = v5 + 7;
  if (word_1EF99A1A6 != 1536)
  {
    v57 = (unsigned __int16)word_1EF99A1DC;
    v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v57);
    v93[v18] = CFSTR("FullAvailableCapacity");
    v18 = v5 | 8;
    if ((unsigned __int16)word_1EF99A1A6 < 0x313u)
      goto LABEL_20;
  }
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  v92 = time(0);
  keys[0] = CFSTR("UpdateTime");
  v126[0] = CFNumberCreate(v4, kCFNumberLongType, &v92);
  keys[1] = CFSTR("MaximumTemperature");
  v91 = (__int16)(byte_1EF99A1DE << 8) | byte_1EF99A1DF;
  v126[1] = CFNumberCreate(v4, kCFNumberIntType, &v91);
  keys[2] = CFSTR("MinimumTemperature");
  v90 = (__int16)(byte_1EF99A1E0 << 8) | byte_1EF99A1E1;
  v126[2] = CFNumberCreate(v4, kCFNumberIntType, &v90);
  keys[3] = CFSTR("MaximumPackVoltage");
  v89 = (__int16)(byte_1EF99A1E2 << 8) | byte_1EF99A1E3;
  v126[3] = CFNumberCreate(v4, kCFNumberIntType, &v89);
  keys[4] = CFSTR("MinimumPackVoltage");
  v88 = (__int16)(byte_1EF99A1E4 << 8) | byte_1EF99A1E5;
  v126[4] = CFNumberCreate(v4, kCFNumberIntType, &v88);
  keys[5] = CFSTR("MaximumChargeCurrent");
  v87 = (__int16)(byte_1EF99A1E6 << 8) | byte_1EF99A1E7;
  v126[5] = CFNumberCreate(v4, kCFNumberIntType, &v87);
  keys[6] = CFSTR("MaximumDischargeCurrent");
  v86 = (__int16)(byte_1EF99A1E8 << 8) | byte_1EF99A1E9;
  v126[6] = CFNumberCreate(v4, kCFNumberIntType, &v86);
  keys[7] = CFSTR("MaximumOverChargedCapacity");
  v85 = (__int16)(byte_1EF99A1EA << 8) | byte_1EF99A1EB;
  v126[7] = CFNumberCreate(v4, kCFNumberIntType, &v85);
  keys[8] = CFSTR("MaximumOverDischargedCapacity");
  v84 = (__int16)(byte_1EF99A1EC << 8) | byte_1EF99A1ED;
  v126[8] = CFNumberCreate(v4, kCFNumberIntType, &v84);
  keys[9] = CFSTR("MaximumFCC");
  v83 = (__int16)(byte_1EF99A1EE << 8) | byte_1EF99A1EF;
  v126[9] = CFNumberCreate(v4, kCFNumberIntType, &v83);
  keys[10] = CFSTR("MinimumFCC");
  v82 = (__int16)(byte_1EF99A1F0 << 8) | byte_1EF99A1F1;
  v126[10] = CFNumberCreate(v4, kCFNumberIntType, &v82);
  keys[11] = CFSTR("MaximumDeltaVoltage");
  v81 = (__int16)(byte_1EF99A1F2 << 8) | byte_1EF99A1F3;
  v126[11] = CFNumberCreate(v4, kCFNumberIntType, &v81);
  keys[12] = CFSTR("MinimumDeltaVoltage");
  v80 = (__int16)(byte_1EF99A1F4 << 8) | byte_1EF99A1F5;
  v126[12] = CFNumberCreate(v4, kCFNumberIntType, &v80);
  keys[13] = CFSTR("LowAvgCurrentLastRun");
  v79 = (__int16)(byte_1EF99A1F6 << 8) | byte_1EF99A1F7;
  v126[13] = CFNumberCreate(v4, kCFNumberIntType, &v79);
  keys[14] = CFSTR("HighAvgCurrentLastRun");
  v78 = (__int16)(byte_1EF99A1F8 << 8) | byte_1EF99A1F9;
  v126[14] = CFNumberCreate(v4, kCFNumberIntType, &v78);
  keys[15] = CFSTR("MaximumQmax");
  v77 = (__int16)(byte_1EF99A1FA << 8) | byte_1EF99A1FB;
  v126[15] = CFNumberCreate(v4, kCFNumberIntType, &v77);
  keys[16] = CFSTR("MinimumQmax");
  v76 = (__int16)(byte_1EF99A1FC << 8) | byte_1EF99A1FD;
  v126[16] = CFNumberCreate(v4, kCFNumberIntType, &v76);
  keys[17] = CFSTR("MaximumRa0-8");
  v75 = (__int16)(byte_1EF99A1FE << 8) | byte_1EF99A1FF;
  v126[17] = CFNumberCreate(v4, kCFNumberIntType, &v75);
  keys[18] = CFSTR("MinimumRa0-8");
  v74 = (__int16)(byte_1EF99A200 << 8) | byte_1EF99A201;
  v126[18] = CFNumberCreate(v4, kCFNumberIntType, &v74);
  keys[19] = CFSTR("AverageTemperature");
  v73 = byte_1EF99A202;
  v126[19] = CFNumberCreate(v4, kCFNumberIntType, &v73);
  keys[20] = CFSTR("TemperatureSamples");
  v72 = bswap32(unk_1EF99A203);
  v126[20] = CFNumberCreate(v4, kCFNumberIntType, &v72);
  keys[21] = CFSTR("FlashWriteCount");
  v71 = __rev16(unk_1EF99A207);
  *(_QWORD *)&v127 = CFNumberCreate(v4, kCFNumberIntType, &v71);
  *(_QWORD *)&v123 = CFSTR("RDISCnt");
  v70 = __rev16(unk_1EF99A209);
  *((_QWORD *)&v127 + 1) = CFNumberCreate(v4, kCFNumberIntType, &v70);
  *((_QWORD *)&v123 + 1) = CFSTR("CycleCountLastQmax");
  v69 = byte_1EF99A20B;
  *(_QWORD *)&v128 = CFNumberCreate(v4, kCFNumberIntType, &v69);
  if ((unsigned __int16)word_1EF99A1A6 < 0x501u)
  {
    if ((unsigned __int16)word_1EF99A1A6 < 0x313u)
    {
      v22 = 24;
      goto LABEL_12;
    }
    v19 = &word_1EF99A20E;
  }
  else
  {
    v19 = &word_1EF99A20C;
  }
  v20 = __rev16((unsigned __int16)*v19);
  *(_QWORD *)&v124 = CFSTR("TotalOperatingTime");
  v68 = v20;
  *((_QWORD *)&v128 + 1) = CFNumberCreate(v4, kCFNumberIntType, &v68);
  v21 = *((unsigned __int8 *)v19 + 2);
  *((_QWORD *)&v124 + 1) = CFSTR("TimeAbove95Perc");
  v67 = v21;
  *(_QWORD *)&v129 = CFNumberCreate(v4, kCFNumberIntType, &v67);
  v22 = 26;
LABEL_12:
  keys[v22] = CFSTR("Raw");
  v126[v22] = CFDataCreate(v4, (const UInt8 *)&byte_1EF99A1DE, 64);
  v23 = CFDictionaryCreate(v4, (const void **)keys, (const void **)v126, v22 | 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
  {
    CFRelease(v126[v22]);
    v24 = v22-- + 1;
  }
  while (v24 > 1);
  if (!v23)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      parseBatteryData_cold_2();
      if (!a1)
        goto LABEL_22;
LABEL_21:
      v56 = (unsigned __int16)word_1EF99A1B8;
      v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v56);
      v93[v18] = CFSTR("ITMiscStatus");
      v55 = word_1EF99A1B8 & 3;
      v25 = CFNumberCreate(v4, kCFNumberIntType, &v55);
      v26 = 8 * v18 + 8;
      *(_QWORD *)((char *)&v108[-1] + v26) = v25;
      *(void **)((char *)v93 + v26) = CFSTR("ITSimulationCounter");
      v18 += 2;
      goto LABEL_22;
    }
LABEL_20:
    if (!a1)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (a2)
    CFShow(v23);
  v108[v18 - 1] = v23;
  v93[v18++] = CFSTR("LifetimeData");
  if (a1)
    goto LABEL_21;
LABEL_22:
  if ((unsigned __int16)word_1EF99A1A6 >= 0x600u)
  {
    *(_QWORD *)&valuePtr[4] = CFDataCreate(v4, (const UInt8 *)&word_1EF99A21E, 32);
    if (*(_QWORD *)&valuePtr[4])
    {
      v108[v18 - 1] = CFArrayCreate(v4, (const void **)&valuePtr[4], 1, MEMORY[0x1E0C9B378]);
      v93[v18++] = CFSTR("RaTableRaw");
      CFRelease(*(CFTypeRef *)&valuePtr[4]);
    }
    v54 = (unsigned __int16)word_1EF99A274;
    v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v54);
    v93[v18] = CFSTR("WeightedRa");
    v53 = (unsigned __int16)word_1EF99A276;
    v27 = CFNumberCreate(v4, kCFNumberIntType, &v53);
    v28 = 8 * v18 + 8;
    *(_QWORD *)((char *)&v108[-1] + v28) = v27;
    *(void **)((char *)v93 + v28) = CFSTR("ChemicalWeightedRa");
    v52 = dword_1EF99A270;
    v29 = CFNumberCreate(v4, kCFNumberIntType, &v52);
    v30 = 8 * v18 + 16;
    *(_QWORD *)((char *)&v108[-1] + v30) = v29;
    *(void **)((char *)v93 + v30) = CFSTR("BatteryHealthMetric");
    v31 = v18 + 3;
    if ((unsigned __int16)word_1EF99A1A6 < 0x600u)
    {
      v18 += 3;
    }
    else
    {
      v108[v31 - 1] = CFDataCreate(v4, byte_1EF99A23E, 32);
      v93[v31] = CFSTR("iMaxAndSocSmoothTable");
      v51 = __rev16(*(unsigned __int16 *)&byte_1EF99A23E[1]);
      v32 = CFNumberCreate(v4, kCFNumberIntType, &v51);
      v33 = 8 * v18 + 32;
      *(_QWORD *)((char *)&v108[-1] + v33) = v32;
      *(void **)((char *)v93 + v33) = CFSTR("RSS");
      v18 += 5;
    }
  }
  v50 = (unsigned __int16)word_1EF99A1BC;
  v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v50);
  v93[v18] = CFSTR("ResScale");
  v49 = word_1EF99A1BE;
  v34 = CFNumberCreate(v4, kCFNumberIntType, &v49);
  v35 = 8 * v18 + 8;
  *(_QWORD *)((char *)&v108[-1] + v35) = v34;
  *(void **)((char *)v93 + v35) = CFSTR("Qstart");
  v48 = word_1EF99A1C0;
  v36 = CFNumberCreate(v4, kCFNumberIntType, &v48);
  v37 = 8 * v18 + 16;
  *(_QWORD *)((char *)&v108[-1] + v37) = v36;
  *(void **)((char *)v93 + v37) = CFSTR("PassedCharge");
  v38 = v18 + 3;
  v47 = (unsigned __int16)word_1EF99A1C2;
  values = CFNumberCreate(v4, kCFNumberIntType, &v47);
  if (values)
  {
    v108[v38 - 1] = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v93[v38] = CFSTR("DOD0");
    v38 = v18 + 4;
    CFRelease(values);
  }
  v46 = word_1EF99A1BA;
  values = CFNumberCreate(v4, kCFNumberIntType, &v46);
  if (values)
  {
    v108[v38 - 1] = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v93[v38++] = CFSTR("PresentDOD");
    CFRelease(values);
  }
  v45 = (unsigned __int16)word_1EF99A1DA;
  v108[v38 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v45);
  v93[v38] = CFSTR("GaugeFlagRaw");
  v44 = gauge_reset_count;
  v39 = CFNumberCreate(v4, kCFNumberLongLongType, &v44);
  v40 = 8 * v38 + 8;
  *(_QWORD *)((char *)&v108[-1] + v40) = v39;
  *(void **)((char *)v93 + v40) = CFSTR("GaugeResetCounter");
  if (v38 >= 27)
    parseBatteryData_cold_1();
  v41 = CFDictionaryCreate(v4, (const void **)v93, (const void **)&v107, v38 + 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v38 >= -1)
  {
    do
    {
      CFRelease((CFTypeRef)v108[v38]);
      v42 = v38 + 2;
      --v38;
    }
    while (v42 > 1);
  }
  return v41;
}

uint64_t ggctl_logShutdownReason2(uint64_t result, _OWORD *a2, unsigned int a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t input;
  uint64_t v7;
  size_t v8;
  __int128 outputStruct;
  __int128 v10;
  __int128 v11;
  _OWORD inputStruct[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 48;
  if (a2)
  {
    if ((a3 & 1) != 0)
    {
      v10 = 0u;
      v11 = 0u;
      outputStruct = 0u;
      input = a3;
      result = IOConnectCallMethod(result, 0x13u, &input, 1u, inputStruct, 0x30uLL, 0, 0, &outputStruct, &v8);
      if (!(_DWORD)result)
      {
        v4 = v10;
        *a2 = outputStruct;
        a2[1] = v4;
        a2[2] = v11;
      }
    }
    else
    {
      v5 = a2[1];
      inputStruct[0] = *a2;
      inputStruct[1] = v5;
      inputStruct[2] = a2[2];
      v7 = a3;
      return IOConnectCallMethod(result, 0x13u, &v7, 1u, inputStruct, 0x30uLL, 0, 0, &outputStruct, &v8);
    }
  }
  return result;
}

__darwin_time_t UpSeconds()
{
  timeval v1;

  if (!UpSeconds_boottime)
  {
    v1.tv_sec = 16;
    sysctlbyname("kern.boottime", &UpSeconds_boottime, (size_t *)&v1, 0, 0);
  }
  v1.tv_sec = 0;
  *(_QWORD *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec - UpSeconds_boottime;
}

CFStringRef createStringWithBytes(UInt8 *bytes, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = 0;
  if (a2)
  {
    v3 = 1;
    do
    {
      if (!bytes[v2])
        break;
      v2 = v3++;
    }
    while (v2 < a2);
  }
  return CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, v2, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

_BYTE *OUTLINED_FUNCTION_7(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void ggctl_connect_cold_1(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "AppleHDQGasGaugeControl";
  OUTLINED_FUNCTION_8(&dword_1CAF47000, a1, a3, "could not find %s service", (uint8_t *)&v3);
  OUTLINED_FUNCTION_6();
}

void ggctl_connect_cold_2(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109120;
  v3[1] = a1;
  OUTLINED_FUNCTION_3(&dword_1CAF47000, a2, a3, "could not open service: %#x", (uint8_t *)v3);
  OUTLINED_FUNCTION_1();
}

void ggctl_reset_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "gas gauge: cannot issue a reset", v2);
  OUTLINED_FUNCTION_1();
}

void ggctl_open_device_cold_1(NSObject *a1)
{
  int *v2;
  char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = __error();
  v3 = strerror(*v2);
  v4 = 136315394;
  v5 = "checkreset";
  v6 = 2080;
  v7 = v3;
  _os_log_error_impl(&dword_1CAF47000, a1, OS_LOG_TYPE_ERROR, "%s: %s", (uint8_t *)&v4, 0x16u);
  OUTLINED_FUNCTION_10();
}

void ggctl_open_device_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "gas gauge: cannot determine the state of SWI line", v2);
  OUTLINED_FUNCTION_1();
}

void ggctl_open_device_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "gas gauge: SWI line low, issuing reset", v2);
  OUTLINED_FUNCTION_1();
}

void ggctl_open_device_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_4(&dword_1CAF47000, v0, v1, "%s:%d break failed (%d)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void updateThread_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "gasgauge: could not register for system power notifications", v2);
  OUTLINED_FUNCTION_1();
}

void updateThread_cold_2(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_7(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v2, (uint64_t)v2, "gasgauge: SWI line, cannot determine the state of line", v3);
}

void updateThread_cold_3(uint8_t *a1, _DWORD *a2, NSObject *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = -1;
  OUTLINED_FUNCTION_3(&dword_1CAF47000, a3, (uint64_t)a3, "cannot drain the data log (%d)", a1);
}

void updateThread_cold_4(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_7(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v2, (uint64_t)v2, "num_client<0, client error?", v3);
}

void updateThread_cold_5(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_7(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v2, (uint64_t)v2, "gasgauge: SWI line low reset disabled, ignoring", v3);
}

void updateThread_cold_6(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_7(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v2, (uint64_t)v2, "gasgauge: SWI line low issuing reset", v3);
}

void updateThread_cold_7(NSObject *a1)
{
  int *v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = __error();
  v3 = strerror(*v2);
  v5 = 136315138;
  v6 = v3;
  OUTLINED_FUNCTION_8(&dword_1CAF47000, a1, v4, "could not find hw.model: %s", (uint8_t *)&v5);
  OUTLINED_FUNCTION_10();
}

void updateThread_cold_8(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109120;
  v3[1] = a1;
  OUTLINED_FUNCTION_3(&dword_1CAF47000, a2, a3, "gasgauge: could not register for battery events err=%x", (uint8_t *)v3);
  OUTLINED_FUNCTION_1();
}

void updateThread_cold_9(mach_error_t a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 136315138;
  v5 = mach_error_string(a1);
  OUTLINED_FUNCTION_8(&dword_1CAF47000, a2, v3, "gasgauge: could not map data log: %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_10();
}

void updateThread_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "gasgauge: could not register for power source events", v2);
  OUTLINED_FUNCTION_1();
}

void updateThermalCoolDownState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1CAF47000, v0, v1, "%s:%d cannot update thermal state", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void statsAndLogs_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1CAF47000, v0, v1, "%s:%d cannot create dictionary", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void statsAndLogs_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_4(&dword_1CAF47000, v0, v1, "%s:%d cannot dump stats and logs (%x)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void debugLog_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1CAF47000, v0, v1, "%s:%d cannot create dictionary", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void debugLog_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_4(&dword_1CAF47000, v0, v1, "%s:%d cannot dump stats and logs (%x)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_6();
}

void dynamicATV_cold_1(NSObject *a1, uint64_t a2, uint64_t a3)
{
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109120;
  v3[1] = -1;
  OUTLINED_FUNCTION_3(&dword_1CAF47000, a1, a3, "dynATV: cannot write to charger startus (%d)", (uint8_t *)v3);
  OUTLINED_FUNCTION_1();
}

void parseBatteryData_cold_1()
{
  __assert_rtn("parseBatteryData", "AppleHDQGasGauge.c", 1565, "batteryDataCount<=kNumBatteryDataUpdateKeys");
}

void parseBatteryData_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_0_0(&dword_1CAF47000, v0, v1, "Cannot create the lifetime dictionary", v2);
  OUTLINED_FUNCTION_1();
}

void SetAPIErrorMessage(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char __str[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x400uLL);
  if (!GlobalAPIErrorMessage)
  {
    GlobalAPIErrorMessage = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
    vsnprintf(__str, 0x400uLL, a1, &a9);
    snprintf((char *)GlobalAPIErrorMessage, 0x400uLL, "%s", __str);
  }
}

uint64_t ASPParseBufferToCxt(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  int v22;

  *(_DWORD *)(a1 + 36) = -1;
  if (a3 < 8)
    return 0;
  v6 = a3 >> 3;
  while (2)
  {
    v9 = *a2;
    v8 = a2 + 1;
    v7 = v9;
    v10 = HIDWORD(v9);
    v11 = v6 - 1;
    if (v9 > 0x30000000 || v11 < v10)
    {
      result = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return result;
    }
    v13 = (v7 - 1);
    if (v13 <= 0x47)
      __asm { BR              X10 }
    v17 = (v7 - 73);
    if (v17 <= 0x46)
      __asm { BR              X10 }
    switch(v7)
    {
      case 144:
        v18 = *v8;
        v19 = "numMemExtreme";
        goto LABEL_13;
      case 145:
        v18 = *v8;
        v19 = "maxMemExtremeDuration";
        goto LABEL_13;
      case 146:
        v18 = *v8;
        v19 = "memExtremeDuration";
        goto LABEL_13;
      case 147:
        v18 = *v8;
        v19 = "bandGetsExtreme";
        goto LABEL_13;
      case 148:
        v18 = *v8;
        v19 = "bandGetsLow";
        goto LABEL_13;
      case 149:
        v18 = *v8;
        v19 = "numHostChoke";
        goto LABEL_13;
      case 152:
        v18 = *v8;
        v19 = "AbortSkip_ProgramError";
        goto LABEL_13;
      case 153:
        v18 = *v8;
        v19 = "AbortSkip_ReadErrorOpenBand";
        goto LABEL_13;
      case 154:
        v18 = *v8;
        v19 = "AbortSkip_FailedRebuildingParity";
        goto LABEL_13;
      case 155:
        v18 = *v8;
        v19 = "AbortPad_OpenRefreshBand";
        goto LABEL_13;
      case 156:
        v18 = *v8;
        v19 = "AbortPad_CloseBands";
        goto LABEL_13;
      case 157:
        v18 = *v8;
        v19 = "AbortPad_SetPhoto";
        goto LABEL_13;
      case 158:
        v18 = *v8;
        v19 = "AbortPad_GcNoSource";
        goto LABEL_13;
      case 159:
        v18 = *v8;
        v19 = "AbortPad_Format";
        goto LABEL_13;
      case 160:
        v18 = *v8;
        v19 = "nandDiscoveryDuration";
        goto LABEL_13;
      case 161:
        v18 = *v8;
        v19 = "coreCCEnableDuration";
        goto LABEL_13;
      case 163:
        v18 = *v8;
        v19 = "coreOpenDuration";
        goto LABEL_13;
      case 164:
        v18 = *v8;
        v19 = "coreWritableDuration";
        goto LABEL_13;
      case 165:
        v18 = *v8;
        v19 = "coreClogLoadDuration";
        goto LABEL_13;
      case 167:
        v18 = *v8;
        v19 = "bulkPFail";
        goto LABEL_13;
      case 169:
        v18 = *v8;
        v19 = "bulkRFail";
        goto LABEL_13;
      case 172:
        v18 = *v8;
        v19 = "raidSmartErrors";
        goto LABEL_13;
      case 182:
        v18 = *v8;
        v19 = "internalUeccs";
        goto LABEL_13;
      case 183:
        v18 = *v8;
        v19 = "e2eFail";
        goto LABEL_13;
      case 184:
        v18 = *v8;
        v19 = "TempSensorMax";
        goto LABEL_13;
      case 185:
        v18 = *v8;
        v19 = "TempSensorMin";
        goto LABEL_13;
      case 186:
        v18 = *v8;
        v19 = "powerUpFromDDR";
        goto LABEL_13;
      case 187:
        v18 = *v8;
        v19 = "numMemLow";
        goto LABEL_13;
      case 188:
        v18 = *v8;
        v19 = "maxMemLowDuration";
        goto LABEL_13;
      case 189:
        v18 = *v8;
        v19 = "memLowDuration";
        goto LABEL_13;
      case 190:
        v18 = *v8;
        v19 = "numFences";
        goto LABEL_13;
      case 191:
        v18 = *v8;
        v19 = "hostPassiveIO";
        goto LABEL_13;
      case 192:
        v18 = *v8;
        v19 = "odtsMax";
        goto LABEL_13;
      case 193:
        v18 = *v8;
        v19 = "defragMFromOrphans";
        goto LABEL_13;
      case 194:
        v18 = *v8;
        v19 = "defragMFromFragments";
        goto LABEL_13;
      case 195:
        v18 = *v8;
        v19 = "defragMTime";
        goto LABEL_13;
      case 196:
        v18 = *v8;
        v19 = "defragMMaxTime";
        goto LABEL_13;
      case 197:
        v18 = *v8;
        v19 = "raidFailedLbaMismatch";
        goto LABEL_13;
      case 198:
        v18 = *v8;
        v19 = "numSyscfgWrites";
        goto LABEL_13;
      case 199:
        v18 = *v8;
        v19 = "indmbUnitsXfer";
        goto LABEL_13;
      case 200:
        v18 = *v8;
        v19 = "indmbUnitsCache";
        goto LABEL_13;
      case 201:
        v18 = *v8;
        v19 = "indmbUnitsInd";
        goto LABEL_13;
      case 202:
        v18 = *v8;
        v19 = "wcacheFS_Mbytes";
        goto LABEL_13;
      case 203:
        v18 = *v8;
        v19 = "wcacheDS_Mbytes";
        goto LABEL_13;
      case 204:
        v18 = *v8;
        v19 = "powerOnSeconds";
        goto LABEL_13;
      case 205:
        v18 = *v8;
        v19 = "numUnknownTokenHostRead";
        goto LABEL_13;
      case 206:
        v18 = *v8;
        v19 = "numUnmmapedTokenHostRead";
        goto LABEL_13;
      case 207:
        v20 = "numOfThrottlingEntriesPerLevel";
        v21 = a1;
        v22 = 207;
LABEL_85:
        v14 = v8;
        v15 = 16;
        goto LABEL_12;
      case 208:
        v18 = *v8;
        v19 = "wcacheFS_MbytesMin";
        goto LABEL_13;
      case 209:
        v18 = *v8;
        v19 = "wcacheFS_MbytesMax";
        goto LABEL_13;
      case 210:
        v18 = *v8;
        v19 = "prepareForShutdownFailCounter";
        goto LABEL_13;
      case 211:
        v18 = *v8;
        v19 = "lpsrEntry";
        goto LABEL_13;
      case 212:
        v18 = *v8;
        v19 = "lpsrExit";
        goto LABEL_13;
      case 213:
        v20 = "crcInternalReadFail";
        v21 = a1;
        v22 = 213;
LABEL_23:
        v14 = v8;
        v15 = 8;
        goto LABEL_12;
      case 214:
        v18 = *v8;
        v19 = "wcacheFSEvictCnt";
        goto LABEL_13;
      case 215:
        v18 = *v8;
        v19 = "wcacheFSEvictSize";
        goto LABEL_13;
      case 216:
        v18 = *v8;
        v19 = "wcacheFSWr";
        goto LABEL_13;
      case 217:
        v18 = *v8;
        v19 = "wcacheDSWr";
        goto LABEL_13;
      case 218:
        v20 = "wcacheFSEvictSizeLogDist";
        v21 = a1;
        v22 = 218;
        goto LABEL_11;
      case 219:
        v18 = *v8;
        v19 = "prepareForShutdownTimeoutCounter";
        goto LABEL_13;
      case 220:
        v18 = *v8;
        v19 = "prepareForShutdownCancelCounter";
        goto LABEL_13;
      case 221:
        v18 = *v8;
        v19 = "RD_openBandCount";
        goto LABEL_13;
      case 222:
        v18 = *v8;
        v19 = "RD_openBandNops";
        goto LABEL_13;
      case 223:
        v18 = *v8;
        v19 = "RD_closedBandEvictCount";
LABEL_13:
        v16 = (_QWORD *)a1;
LABEL_14:
        AddSingleValue(v16, "", v19, v18);
        goto LABEL_15;
      default:
        switch(v7)
        {
          case 224:
            v18 = *v8;
            v19 = "RD_closedBandEvictSectors";
            goto LABEL_13;
          case 225:
            v18 = *v8;
            v19 = "RD_closedBandFragmentCount";
            goto LABEL_13;
          case 226:
            v18 = *v8;
            v19 = "RD_closedBandFragmentSectors";
            goto LABEL_13;
          case 227:
            v20 = "wcacheFSOverWrLogSizeCnts";
            v21 = a1;
            v22 = 227;
            goto LABEL_11;
          case 228:
            v20 = "wcacheFSOverWrSizeByFlow";
            v21 = a1;
            v22 = 228;
            goto LABEL_22;
          case 229:
            v20 = "indmbXferCountTo";
            v21 = a1;
            v22 = 229;
            goto LABEL_20;
          case 230:
            v20 = "indmbAccumulatedTimeBetweenXfers";
            v21 = a1;
            v22 = 230;
LABEL_20:
            v14 = v8;
            v15 = 2;
            goto LABEL_12;
          case 231:
            v18 = *v8;
            v19 = "maxGracefulBootTimeMs";
            goto LABEL_13;
          case 232:
            v18 = *v8;
            v19 = "maxUngracefulBootTimeMs";
            goto LABEL_13;
          case 233:
            v18 = *v8;
            v19 = "averageGracefulBootTimeMs";
            goto LABEL_13;
          case 234:
            v18 = *v8;
            v19 = "averageUngracefulBootTimeMs";
            goto LABEL_13;
          case 235:
            v20 = "gracefulBootTimeLogMs";
            v21 = a1;
            v22 = 235;
            goto LABEL_23;
          case 236:
            v20 = "ungracefulBootTimeLogMs";
            v21 = a1;
            v22 = 236;
            goto LABEL_23;
          case 237:
            v20 = "CalibrationCount";
            v21 = a1;
            v22 = 237;
            goto LABEL_22;
          case 238:
            v18 = *v8;
            v19 = "CalibrationLastTmp";
            goto LABEL_13;
          case 239:
            v18 = *v8;
            v19 = "CalibrationMaxTmp";
            goto LABEL_13;
          case 240:
            v18 = *v8;
            v19 = "CalibrationMinTmp";
            goto LABEL_13;
          case 241:
            v18 = *v8;
            v19 = "ungracefulBootWorstIndicator";
            goto LABEL_13;
          case 242:
            v18 = *v8;
            v19 = "metaMismatchReread";
            goto LABEL_13;
          case 243:
            v18 = *v8;
            v19 = "numS3SleepOps";
            goto LABEL_13;
          case 244:
            v18 = *v8;
            v19 = "odtsCurrent";
            goto LABEL_13;
          case 245:
            v18 = *v8;
            v19 = "prefetchReads";
            goto LABEL_13;
          case 246:
            v18 = *v8;
            v19 = "prefetchHits";
            goto LABEL_13;
          case 247:
            v18 = *v8;
            v19 = "prefetchWritesInvalidation";
            goto LABEL_13;
          case 248:
            v18 = *v8;
            v19 = "indmbUnitsTotal";
            goto LABEL_13;
          case 249:
            v18 = *v8;
            v19 = "selfThrottlingEngage";
            goto LABEL_13;
          case 250:
            v18 = *v8;
            v19 = "selfThrottlingDisengage";
            goto LABEL_13;
          case 252:
            v18 = *v8;
            v19 = "AbortSkip_WlpMode";
            goto LABEL_13;
          case 253:
            v18 = *v8;
            v19 = "hostWritesWlpMode";
            goto LABEL_13;
          case 254:
            v18 = *v8;
            v19 = "numClogDoubleUnc";
            goto LABEL_13;
          case 256:
            v18 = *v8;
            v19 = "AbortPad_WlpMode";
            goto LABEL_13;
          case 257:
            v18 = *v8;
            v19 = "bonfireIntermediateBandErases";
            goto LABEL_13;
          case 258:
            v18 = *v8;
            v19 = "bonfireUserBandErases";
            goto LABEL_13;
          case 259:
            v18 = *v8;
            v19 = "bonfireIntermediateBandProgs";
            goto LABEL_13;
          case 260:
            v18 = *v8;
            v19 = "bonfireUserBandProgs";
            goto LABEL_13;
          case 261:
            v18 = *v8;
            v19 = "bonfireIntermediatePageReads";
            goto LABEL_13;
          case 262:
            v18 = *v8;
            v19 = "bonfireUserPageReads";
            goto LABEL_13;
          case 263:
            v18 = *v8;
            v19 = "refreshUtil00";
            goto LABEL_13;
          case 264:
            v18 = *v8;
            v19 = "failToReadUtil00";
            goto LABEL_13;
          case 265:
            v20 = "readCountHisto";
            v21 = a1;
            v22 = 265;
LABEL_19:
            v14 = v8;
            v15 = 5;
            goto LABEL_12;
          case 266:
            v20 = "readAmpHisto";
            v21 = a1;
            v22 = 266;
            goto LABEL_85;
          case 267:
            v18 = *v8;
            v19 = "totalReadAmp";
            goto LABEL_13;
          case 268:
            v20 = "nvmeModeSelect";
            v21 = a1;
            v22 = 268;
            goto LABEL_22;
          case 269:
            v20 = "numBootBlockRefreshSuccess";
            v21 = a1;
            v22 = 269;
            goto LABEL_23;
          case 270:
            v20 = "numBootBlockRefreshFail";
            v21 = a1;
            v22 = 270;
            goto LABEL_23;
          case 271:
            v18 = *v8;
            v19 = "numUnsupportedAsi";
            goto LABEL_13;
          case 272:
            v18 = *v8;
            v19 = "NumTerminatedProgramSegs";
            goto LABEL_13;
          case 273:
            v18 = *v8;
            v19 = "indParityPagesDrops";
            goto LABEL_13;
          case 274:
            v18 = *v8;
            v19 = "indFlowPrograms";
            goto LABEL_13;
          case 277:
            v20 = "powerBudgetSelect";
            v21 = a1;
            v22 = 277;
LABEL_22:
            v14 = v8;
            v15 = 4;
            goto LABEL_12;
          case 279:
            v18 = *v8;
            v19 = "RxBurnNandWrites";
            goto LABEL_13;
          case 280:
            v20 = "E2EDPErrorCounters";
            v21 = a1;
            v22 = 280;
LABEL_153:
            v14 = v8;
            v15 = 12;
            goto LABEL_12;
          case 281:
            v18 = *v8;
            v19 = "wcacheSectorsMax";
            goto LABEL_13;
          case 282:
            v18 = *v8;
            v19 = "wcacheSectorsMin";
            goto LABEL_13;
          case 283:
            v18 = *v8;
            v19 = "wcacheSectorsCur";
            goto LABEL_13;
          case 284:
            v18 = *v8;
            v19 = "wcacheDS_SectorsMax";
            goto LABEL_13;
          case 285:
            v18 = *v8;
            v19 = "wcacheDS_SectorsMin";
            goto LABEL_13;
          case 286:
            v18 = *v8;
            v19 = "wcacheDS_SectorsCur";
            goto LABEL_13;
          case 287:
            v18 = *v8;
            v19 = "wcacheFS_Reads";
            goto LABEL_13;
          case 288:
            v18 = *v8;
            v19 = "wcacheDS_Reads";
            goto LABEL_13;
          case 289:
            v20 = "mspBootBlockReadFail";
            v21 = a1;
            v22 = 289;
            goto LABEL_155;
          case 290:
            v20 = "mspBootBlockProgFail";
            v21 = a1;
            v22 = 290;
            goto LABEL_155;
          case 291:
            v20 = "mspBootBlockEraseFail";
            v21 = a1;
            v22 = 291;
LABEL_155:
            v14 = v8;
            v15 = 32;
            goto LABEL_12;
          case 292:
            v18 = *v8;
            v19 = "bandsRefreshedOnError";
            goto LABEL_13;
          default:
            switch(v7)
            {
              case 298:
                v20 = "perHostReads";
                v21 = a1;
                v22 = 298;
                goto LABEL_20;
              case 299:
                v20 = "perHostReadXacts";
                v21 = a1;
                v22 = 299;
                goto LABEL_20;
              case 300:
                v20 = "perHostWrites";
                v21 = a1;
                v22 = 300;
                goto LABEL_20;
              case 301:
                v20 = "perHostWriteXacts";
                v21 = a1;
                v22 = 301;
                goto LABEL_20;
              case 302:
                v20 = "perHostNumFlushes";
                v21 = a1;
                v22 = 302;
                goto LABEL_20;
              case 303:
                v20 = "perHostNumFences";
                v21 = a1;
                v22 = 303;
                goto LABEL_20;
              case 304:
                v20 = "commitPadSectorsPerFlow";
                v21 = a1;
                v22 = 304;
                goto LABEL_11;
              case 305:
                v20 = "wcacheDSOverWrLogSizeCnts";
                v21 = a1;
                v22 = 305;
                goto LABEL_11;
              case 306:
                v20 = "wcacheDSOverWrSizeByFlow";
                v21 = a1;
                v22 = 306;
                goto LABEL_22;
              case 307:
                v20 = "CmdRaisePrioiryEvents";
                v21 = a1;
                v22 = 307;
                goto LABEL_11;
              case 308:
                v18 = *v8;
                v19 = "utilNumVerification";
                goto LABEL_13;
              case 309:
                v18 = *v8;
                v19 = "utilRefreshes";
                goto LABEL_13;
              case 310:
                v18 = *v8;
                v19 = "utilBDRErrors";
                goto LABEL_13;
              case 311:
                v18 = *v8;
                v19 = "indBandsPerFlow";
                goto LABEL_13;
              case 312:
                v18 = *v8;
                v19 = "secsPerIndFlow";
                goto LABEL_13;
              case 313:
                v18 = *v8;
                v19 = "indDecodedECC";
                goto LABEL_13;
              case 314:
                v20 = "numBootBlockValidateSuccess";
                v21 = a1;
                v22 = 314;
                goto LABEL_23;
              case 315:
                v20 = "numBootBlockValidateFail";
                v21 = a1;
                v22 = 315;
                goto LABEL_23;
              case 316:
                v20 = "clogPagesFillingPercentage";
                v21 = a1;
                v22 = 316;
                goto LABEL_22;
              case 317:
                v18 = *v8;
                v19 = "bdrCalTimeAccFactor";
                goto LABEL_13;
              case 318:
                v18 = *v8;
                v19 = "bootChainRdError";
                goto LABEL_13;
              case 319:
                v18 = *v8;
                v19 = "bootChainBlankError";
                goto LABEL_13;
              case 320:
                v18 = *v8;
                v19 = "bootChainRefreshError";
                goto LABEL_13;
              case 321:
                v18 = *v8;
                v19 = "bootChainVersionError";
                goto LABEL_13;
              case 322:
                v18 = *v8;
                v19 = "mspBootBlockMismatch";
                goto LABEL_13;
              case 323:
                v18 = *v8;
                v19 = "mspBootBlockMismatchErr";
                goto LABEL_13;
              case 324:
                v20 = "bitflipAddr";
                v21 = a1;
                v22 = 324;
                goto LABEL_19;
              case 325:
                v20 = "bitflipCount";
                v21 = a1;
                v22 = 325;
                goto LABEL_19;
              case 326:
                v20 = "bitflipDupes";
                v21 = a1;
                v22 = 326;
                goto LABEL_19;
              case 327:
                v20 = "bandsMaxTempHisto";
                v21 = a1;
                v22 = 327;
                goto LABEL_217;
              case 328:
                v20 = "bandsMinTempHisto";
                v21 = a1;
                v22 = 328;
                goto LABEL_217;
              case 329:
                v20 = "bandsLifeTimeTempHisto";
                v21 = a1;
                v22 = 329;
                v14 = v8;
                v15 = 30;
                goto LABEL_12;
              case 330:
                v20 = "bandsDeltaTempHisto";
                v21 = a1;
                v22 = 330;
LABEL_217:
                v14 = v8;
                v15 = 22;
                goto LABEL_12;
              case 331:
                v20 = "bandsCrossTempHisto";
                v21 = a1;
                v22 = 331;
                v14 = v8;
                v15 = 45;
                goto LABEL_12;
              case 332:
                v20 = "wcacheWaitLogMs";
                v21 = a1;
                v22 = 332;
                goto LABEL_11;
              case 333:
                v20 = "wcacheDS_segsSortedLogSize";
                v21 = a1;
                v22 = 333;
                goto LABEL_11;
              case 334:
                v18 = *v8;
                v19 = "numFirmwareWrites";
                goto LABEL_13;
              case 335:
                v18 = *v8;
                v19 = "numBisWrites";
                goto LABEL_13;
              case 336:
                v18 = *v8;
                v19 = "numBootChainUpdates";
                goto LABEL_13;
              case 337:
                v18 = *v8;
                v19 = "cntCalTimeWentBackWard";
                goto LABEL_13;
              case 338:
                v18 = *v8;
                v19 = "indBoRecoveries";
                goto LABEL_13;
              case 340:
                v18 = *v8;
                v19 = "numCrossTempUecc";
                goto LABEL_13;
              case 341:
                v18 = *v8;
                v19 = "latencyMonitorError";
                goto LABEL_13;
              case 343:
                v18 = *v8;
                v19 = "utilUeccReads";
                goto LABEL_13;
              case 344:
                v18 = *v8;
                v19 = "numOfAvoidedGCDueToTemp";
                goto LABEL_13;
              case 345:
                v18 = *v8;
                v19 = "forceShutdowns";
                goto LABEL_13;
              case 346:
                v18 = *v8;
                v19 = "gcSlcDestinations";
                goto LABEL_13;
              case 347:
                v18 = *v8;
                v19 = "indReplayExtUsed";
                goto LABEL_13;
              case 348:
                v18 = *v8;
                v19 = "defectsPerPackageOverflow";
                goto LABEL_13;
              case 349:
                v18 = *v8;
                v19 = "RxBurnIntBandsProgrammed";
                goto LABEL_13;
              case 350:
                v18 = *v8;
                v19 = "RxBurnUsrBandsProgrammed";
                goto LABEL_13;
              case 351:
                v18 = *v8;
                v19 = "RxBurnIntNandWrites";
                goto LABEL_13;
              case 352:
                v18 = *v8;
                v19 = "RxBurnUsrNandWrites";
                goto LABEL_13;
              case 353:
                v18 = *v8;
                v19 = "clogLastStripeUeccs";
                goto LABEL_13;
              case 354:
                v18 = *v8;
                v19 = "GC_MidDestSrcSwitchSLC2TLC";
                goto LABEL_13;
              case 355:
                v18 = *v8;
                v19 = "GC_MidDestSrcSwitchTLC2SLC";
                goto LABEL_13;
              case 356:
                v18 = *v8;
                v19 = "nvme_stats_shutdown_count_host0_normal";
                goto LABEL_13;
              case 357:
                v18 = *v8;
                v19 = "nvme_stats_shutdown_count_host1_normal";
                goto LABEL_13;
              case 358:
                v18 = *v8;
                v19 = "nvme_stats_shutdown_count_host0_s2r";
                goto LABEL_13;
              case 359:
                v18 = *v8;
                v19 = "nvme_stats_shutdown_count_host1_s2r";
                goto LABEL_13;
              case 360:
                v20 = "gcPDusterIntrSrcValidityHisto";
                v21 = a1;
                v22 = 360;
                goto LABEL_85;
              case 361:
                v20 = "gcPDusterUserSrcValidityHisto";
                v21 = a1;
                v22 = 361;
                goto LABEL_85;
              case 362:
                v18 = *v8;
                v19 = "raidFailedReadParity";
                goto LABEL_13;
              case 364:
                v18 = *v8;
                v19 = "lhotNumSkipes";
                goto LABEL_13;
              default:
                switch(v7)
                {
                  case 365:
                    v18 = *v8;
                    v19 = "lhotNumIsHotCalls";
                    goto LABEL_13;
                  case 366:
                    v18 = *v8;
                    v19 = "lhotFullLap";
                    goto LABEL_13;
                  case 367:
                    v18 = *v8;
                    v19 = "lhotSkipPrecent";
                    goto LABEL_13;
                  case 368:
                    v18 = *v8;
                    v19 = "eraseSuspendEvents";
                    goto LABEL_13;
                  case 369:
                    v18 = *v8;
                    v19 = "eraseSuspendedStatuses";
                    goto LABEL_13;
                  case 370:
                    v18 = *v8;
                    v19 = "eraseSuspendedBands";
                    goto LABEL_13;
                  case 371:
                    v18 = *v8;
                    v19 = "eraseSuspendSituationsBelowThreshold";
                    goto LABEL_13;
                  case 372:
                    v18 = *v8;
                    v19 = "eraseSuspendSituationsAboveThreshold";
                    goto LABEL_13;
                  case 373:
                    v18 = *v8;
                    v19 = "eraseSuspendReadChainsProcessed";
                    goto LABEL_13;
                  case 374:
                    v18 = *v8;
                    v19 = "bdrLastDoneHr";
                    goto LABEL_13;
                  case 375:
                    v18 = *v8;
                    v19 = "bdrBackupThreshHrs";
                    goto LABEL_13;
                  case 376:
                    v18 = *v8;
                    v19 = "clogPortableProgBufs";
                    goto LABEL_13;
                  case 377:
                    v18 = *v8;
                    v19 = "clogPortableDropBufs";
                    goto LABEL_13;
                  case 378:
                    v18 = *v8;
                    v19 = "clogPortablePadSectors";
                    goto LABEL_13;
                  case 379:
                    v18 = *v8;
                    v19 = "numRetiredBlocks";
                    goto LABEL_13;
                  case 381:
                    v18 = *v8;
                    v19 = "numRefreshOnErrNandRefreshPerf";
                    goto LABEL_13;
                  case 382:
                    v18 = *v8;
                    v19 = "raidReconstructReads";
                    goto LABEL_13;
                  case 383:
                    v18 = *v8;
                    v19 = "gcReadsNoBlog";
                    goto LABEL_13;
                  case 384:
                    v18 = *v8;
                    v19 = "AbortSkip_MPBXReadVerifyClosedBand";
                    goto LABEL_13;
                  case 385:
                    v18 = *v8;
                    v19 = "openBandReadFail";
                    goto LABEL_13;
                  case 386:
                    v18 = *v8;
                    v19 = "AbortSkip_MPBXReadVerifyOpenBand";
                    goto LABEL_13;
                  case 387:
                    v18 = *v8;
                    v19 = "AbortSkip_MBPXFailedRebuildingParity";
                    goto LABEL_13;
                  case 388:
                    v18 = *v8;
                    v19 = "raidSuccessfulPMXReconstructionInternal";
                    goto LABEL_13;
                  case 389:
                    v18 = *v8;
                    v19 = "raidSuccessfulPMXReconstructionHost";
                    goto LABEL_13;
                  case 390:
                    v18 = *v8;
                    v19 = "raidFailedPMXReconstructionInternal";
                    goto LABEL_13;
                  case 391:
                    v18 = *v8;
                    v19 = "raidFailedPMXReconstructionHost";
                    goto LABEL_13;
                  case 392:
                    v18 = *v8;
                    v19 = "raidSuccessfulRMXReconstructionInternal";
                    goto LABEL_13;
                  case 393:
                    v18 = *v8;
                    v19 = "raidSuccessfulRMXReconstructionHost";
                    goto LABEL_13;
                  case 394:
                    v18 = *v8;
                    v19 = "raidFailedRMXReconstructionInternal";
                    goto LABEL_13;
                  case 395:
                    v18 = *v8;
                    v19 = "raidFailedRMXReconstructionHost";
                    goto LABEL_13;
                  case 396:
                    v18 = *v8;
                    v19 = "raidFailedReadParityInternal";
                    goto LABEL_13;
                  case 397:
                    v18 = *v8;
                    v19 = "raidFailedReadQParityInternal";
                    goto LABEL_13;
                  case 398:
                    v18 = *v8;
                    v19 = "raidFailedReadQParity";
                    goto LABEL_13;
                  case 399:
                    v18 = *v8;
                    v19 = "raidFailedReadQCopy";
                    goto LABEL_13;
                  case 400:
                    v18 = *v8;
                    v19 = "raidFailedReconstructionQParity";
                    goto LABEL_13;
                  case 401:
                    v18 = *v8;
                    v19 = "offlineBlocksCnt";
                    goto LABEL_13;
                  case 402:
                    v18 = *v8;
                    v19 = "bork0Revectors";
                    goto LABEL_13;
                  case 403:
                    v18 = *v8;
                    v19 = "raidFailedReadBlog";
                    goto LABEL_13;
                  case 404:
                    v18 = *v8;
                    v19 = "numReliabilityRefreshes";
                    goto LABEL_13;
                  case 405:
                    v18 = *v8;
                    v19 = "raidFailedReadQCopyInternal";
                    goto LABEL_13;
                  case 406:
                    v20 = "raidReconstructSuccessFlow";
                    v21 = a1;
                    v22 = 406;
                    goto LABEL_19;
                  case 407:
                    v20 = "raidReconstructFailFlow";
                    v21 = a1;
                    v22 = 407;
                    goto LABEL_19;
                  case 408:
                    v18 = *v8;
                    v19 = "raidReconstructFailP";
                    goto LABEL_13;
                  case 409:
                    v18 = *v8;
                    v19 = "raidReconstructFailQ";
                    goto LABEL_13;
                  case 410:
                    v18 = *v8;
                    v19 = "raidReconstructFailUECC";
                    goto LABEL_13;
                  case 411:
                    v18 = *v8;
                    v19 = "raidReconstructFailUnsupp";
                    goto LABEL_13;
                  case 412:
                    v18 = *v8;
                    v19 = "raidUECCOpenBand";
                    goto LABEL_13;
                  case 414:
                    v18 = *v8;
                    v19 = "ueccReads";
                    goto LABEL_13;
                  case 416:
                    v18 = *v8;
                    v19 = "raidSuccessfulVerify";
                    goto LABEL_13;
                  case 417:
                    v18 = *v8;
                    v19 = "raidFailedVerify";
                    goto LABEL_13;
                  case 418:
                    v18 = *v8;
                    v19 = "numBandsVerified";
                    goto LABEL_13;
                  case 419:
                    v18 = *v8;
                    v19 = "cache_heads";
                    goto LABEL_13;
                  case 420:
                    v18 = *v8;
                    v19 = "AbortSkip_RMXtoMPBX";
                    goto LABEL_13;
                  case 421:
                    v18 = *v8;
                    v19 = "s3eFwVer";
                    goto LABEL_13;
                  case 422:
                    v18 = *v8;
                    v19 = "readVerifyNative";
                    goto LABEL_13;
                  case 423:
                    v18 = *v8;
                    v19 = "reducedReadVerifyNative";
                    goto LABEL_13;
                  case 424:
                    v18 = *v8;
                    v19 = "readVerifySlc";
                    goto LABEL_13;
                  case 425:
                    v18 = *v8;
                    v19 = "reducedReadVerifySlc";
                    goto LABEL_13;
                  case 426:
                    v18 = *v8;
                    v19 = "RxBurnEvictions";
                    goto LABEL_13;
                  case 427:
                    v18 = *v8;
                    v19 = "directToTLCBands";
                    goto LABEL_13;
                  case 428:
                    v18 = *v8;
                    v19 = "nandDesc";
                    goto LABEL_13;
                  case 429:
                    v18 = *v8;
                    v19 = "fwUpdatesPercentUsed";
                    goto LABEL_13;
                  case 430:
                    v18 = *v8;
                    v19 = "slcPercentUsed";
                    goto LABEL_13;
                  case 431:
                    v18 = *v8;
                    v19 = "percentUsed";
                    goto LABEL_13;
                  default:
                    switch(v7)
                    {
                      case 432:
                        v18 = *v8;
                        v19 = "hostAutoWrites";
                        goto LABEL_13;
                      case 433:
                        v18 = *v8;
                        v19 = "hostAutoWriteXacts";
                        goto LABEL_13;
                      case 434:
                        v18 = *v8;
                        v19 = "gcDestDynamic";
                        goto LABEL_13;
                      case 435:
                        v18 = *v8;
                        v19 = "gcDestStatic";
                        goto LABEL_13;
                      case 436:
                        v18 = *v8;
                        v19 = "gcDestWearlevel";
                        goto LABEL_13;
                      case 437:
                        v18 = *v8;
                        v19 = "gcDestParity";
                        goto LABEL_13;
                      case 438:
                        v18 = *v8;
                        v19 = "AbortSkip_Format";
                        goto LABEL_13;
                      case 440:
                        v18 = *v8;
                        v19 = "raidSLCPadding";
                        goto LABEL_13;
                      case 441:
                        v18 = *v8;
                        v19 = "raidGCBands";
                        goto LABEL_13;
                      case 442:
                        v18 = *v8;
                        v19 = "raidGCSectors";
                        goto LABEL_13;
                      case 443:
                        v18 = *v8;
                        v19 = "raidGCPadding";
                        goto LABEL_13;
                      case 444:
                        v18 = *v8;
                        v19 = "raidSLCBandsPerHostFlow";
                        goto LABEL_13;
                      case 445:
                        v18 = *v8;
                        v19 = "raidSLCSecsPerHostFlow";
                        goto LABEL_13;
                      case 446:
                        v18 = *v8;
                        v19 = "rxBurnMinCycleRuns";
                        goto LABEL_13;
                      case 447:
                        v18 = *v8;
                        v19 = "clogNumFastCxt";
                        goto LABEL_13;
                      case 448:
                        v18 = *v8;
                        v19 = "clogNumRapidReboots";
                        goto LABEL_13;
                      case 449:
                        v18 = *v8;
                        v19 = "clogFastCxtAbvThr";
                        goto LABEL_13;
                      case 450:
                        v18 = *v8;
                        v19 = "rxBurnDiffModeRuns";
                        goto LABEL_13;
                      case 452:
                        v18 = *v8;
                        v19 = "indReadVerifyFail";
                        goto LABEL_13;
                      case 453:
                        v20 = "numOfThrottlingEntriesPerReadLevel";
                        v21 = a1;
                        v22 = 453;
                        goto LABEL_85;
                      case 454:
                        v20 = "numOfThrottlingEntriesPerWriteLevel";
                        v21 = a1;
                        v22 = 454;
                        goto LABEL_85;
                      case 456:
                        v20 = "slcFifoDepth";
                        v21 = a1;
                        v22 = 456;
                        goto LABEL_11;
                      case 457:
                        v18 = *v8;
                        v19 = "wcacheSectorsDirtyIdle";
                        goto LABEL_13;
                      case 458:
                        v18 = *v8;
                        v19 = "wcacheDS_SectorsDirtyIdle";
                        goto LABEL_13;
                      case 459:
                        v18 = *v8;
                        v19 = "wcacheFS_MbytesDirtyIdle";
                        goto LABEL_13;
                      case 460:
                        v20 = "CacheDepthVsThroughput";
                        v21 = a1;
                        v22 = 460;
                        v14 = v8;
                        v15 = 256;
                        goto LABEL_12;
                      case 461:
                        v18 = *v8;
                        v19 = "directToTLCSectors";
                        goto LABEL_13;
                      case 462:
                        v18 = *v8;
                        v19 = "fallbackToWaterfall";
                        goto LABEL_13;
                      case 463:
                        v20 = "balanceProportionBucketsHistogram";
                        v21 = a1;
                        v22 = 463;
LABEL_320:
                        v14 = v8;
                        v15 = 11;
                        goto LABEL_12;
                      case 464:
                        v18 = *v8;
                        v19 = "lockToTlc";
                        goto LABEL_13;
                      case 465:
                        v20 = "burstSizeHistogram";
                        v21 = a1;
                        v22 = 465;
                        goto LABEL_11;
                      case 466:
                        v20 = "qosDirectToTLC";
                        v21 = a1;
                        v22 = 466;
                        goto LABEL_342;
                      case 467:
                        v20 = "maxQosDirectToTLC";
                        v21 = a1;
                        v22 = 467;
                        goto LABEL_22;
                      case 468:
                        v20 = "wcacheDirtyAtFlush";
                        v21 = a1;
                        v22 = 468;
                        goto LABEL_85;
                      case 469:
                        v20 = "raidReconstructSuccessPartition";
                        v21 = a1;
                        v22 = 469;
                        goto LABEL_20;
                      case 470:
                        v20 = "raidReconstructFailPartition";
                        v21 = a1;
                        v22 = 470;
                        goto LABEL_20;
                      case 471:
                        v18 = *v8;
                        v19 = "raidUncleanBootBandFail";
                        goto LABEL_13;
                      case 472:
                        v18 = *v8;
                        v19 = "raidReconstructFailBandFlowHost";
                        goto LABEL_13;
                      case 473:
                        v18 = *v8;
                        v19 = "raidReconstructFailBandFlowGC";
                        goto LABEL_13;
                      case 476:
                        v20 = "raidSuccessfulRecoLbaRange";
                        v21 = a1;
                        v22 = 476;
                        goto LABEL_20;
                      case 477:
                        v20 = "raidFailedRecoLbaRange";
                        v21 = a1;
                        v22 = 477;
                        goto LABEL_20;
                      case 481:
                        v20 = "skinnyBandErases_481";
                        v21 = a1;
                        v22 = 481;
                        goto LABEL_155;
                      case 483:
                        v18 = *v8;
                        v19 = "tlcOverHeatWaterfall";
                        goto LABEL_13;
                      case 484:
                        v18 = *v8;
                        v19 = "skinnyCyclesConvert";
                        goto LABEL_13;
                      case 485:
                        v18 = *v8;
                        v19 = "non_proportional_directToTLCSectors";
                        goto LABEL_13;
                      case 486:
                        v18 = *v8;
                        v19 = "maxFailedFastCxtSync";
                        goto LABEL_13;
                      case 487:
                        v18 = *v8;
                        v19 = "numFormatUserArea";
                        goto LABEL_13;
                      case 488:
                        v18 = *v8;
                        v19 = "clogFastCxtSyncAborted";
                        goto LABEL_13;
                      case 489:
                        v20 = "clogOccupationSectors";
                        v21 = a1;
                        v22 = 489;
                        goto LABEL_19;
                      case 490:
                        v20 = "bdrTmpHist";
                        v21 = a1;
                        v22 = 490;
LABEL_342:
                        v14 = v8;
                        v15 = 64;
                        goto LABEL_12;
                      case 491:
                        v18 = *v8;
                        v19 = "numFWUpdates";
                        goto LABEL_13;
                      case 492:
                        v18 = *v8;
                        v19 = "numClogLoadFails";
                        goto LABEL_13;
                      case 493:
                        v18 = *v8;
                        v19 = "rxBurnNumForcedDiffMode";
                        goto LABEL_13;
                      case 494:
                        v18 = *v8;
                        v19 = "RD_numSaves";
                        goto LABEL_13;
                      case 495:
                        v18 = *v8;
                        v19 = "eanCompressWrites";
                        goto LABEL_13;
                      case 496:
                        v18 = *v8;
                        v19 = "eanHostWrites";
                        goto LABEL_13;
                      case 497:
                        v18 = *v8;
                        v19 = "bandPreErases";
                        goto LABEL_13;
                      case 498:
                        v18 = *v8;
                        v19 = "eanHostUnmaps";
                        goto LABEL_13;
                      case 499:
                        v18 = *v8;
                        v19 = "eanHostFlushes";
                        goto LABEL_13;
                      case 500:
                        v18 = *v8;
                        v19 = "eanFastWrites";
                        goto LABEL_13;
                      case 501:
                        v18 = *v8;
                        v19 = "autowriteDS2FSCollisions";
                        goto LABEL_13;
                      case 502:
                        v18 = *v8;
                        v19 = "autowriteWaitTransferTaskBlocks";
                        goto LABEL_13;
                      case 503:
                        v20 = "avgCycle";
                        v21 = a1;
                        v22 = 503;
                        goto LABEL_20;
                      case 504:
                        v18 = *v8;
                        v19 = "RD_DeferredClearsOverflowCnt";
                        goto LABEL_13;
                      default:
                        switch(v7)
                        {
                          case 505:
                            v18 = *v8;
                            v19 = "maxVerticsInBand";
                            goto LABEL_13;
                          case 506:
                            v18 = *v8;
                            v19 = "numVertics";
                            goto LABEL_13;
                          case 507:
                            v18 = *v8;
                            v19 = "exceededCVertics";
                            goto LABEL_13;
                          case 510:
                            v18 = *v8;
                            v19 = "raidReconstructFailMismatch";
                            goto LABEL_13;
                          case 511:
                            v20 = "mspbootBlockRefreshCnt";
                            v21 = a1;
                            v22 = 511;
                            goto LABEL_155;
                          case 516:
                            v20 = "mspBootBlockRefreshTime";
                            v21 = a1;
                            v22 = 516;
                            goto LABEL_155;
                          case 517:
                            v18 = *v8;
                            v19 = "mspBootBlockCountPerMsp";
                            goto LABEL_13;
                          case 518:
                            v18 = *v8;
                            v19 = "skinnyRevectorSLC";
                            goto LABEL_13;
                          case 519:
                            v18 = *v8;
                            v19 = "skinnyRevectorTLC";
                            goto LABEL_13;
                          case 520:
                            v18 = *v8;
                            v19 = "perfSetupAttempts";
                            goto LABEL_13;
                          case 521:
                            v18 = *v8;
                            v19 = "perfSetupSuccesses";
                            goto LABEL_13;
                          case 522:
                            v18 = *v8;
                            v19 = "perfWriteAttempts";
                            goto LABEL_13;
                          case 523:
                            v18 = *v8;
                            v19 = "perfWriteSuccesses";
                            goto LABEL_13;
                          case 524:
                            v18 = *v8;
                            v19 = "perfReadAttempts";
                            goto LABEL_13;
                          case 525:
                            v18 = *v8;
                            v19 = "perfReadSuccesses";
                            goto LABEL_13;
                          case 526:
                            v18 = *v8;
                            v19 = "perfCleanupAttempts";
                            goto LABEL_13;
                          case 527:
                            v18 = *v8;
                            v19 = "perfCleanupSuccesses";
                            goto LABEL_13;
                          case 530:
                            v18 = *v8;
                            v19 = "firstFailedDieId";
                            goto LABEL_13;
                          case 531:
                            v18 = *v8;
                            v19 = "numDieFailures";
                            goto LABEL_13;
                          case 532:
                            v18 = *v8;
                            v19 = "spareAvailablePercent";
                            goto LABEL_13;
                          case 533:
                            v18 = *v8;
                            v19 = "dataFabricErr";
                            goto LABEL_13;
                          case 534:
                            v18 = *v8;
                            v19 = "downlinkFabricErr";
                            goto LABEL_13;
                          case 535:
                            v18 = *v8;
                            v19 = "prpAccTimeoutErr";
                            goto LABEL_13;
                          case 537:
                            v18 = *v8;
                            v19 = "uplinkFabricErr";
                            goto LABEL_13;
                          case 538:
                            v18 = *v8;
                            v19 = "skinnyBandsGBB";
                            goto LABEL_13;
                          case 539:
                            v18 = *v8;
                            v19 = "AbortPad_GcMustPadBand";
                            goto LABEL_13;
                          case 540:
                            v18 = *v8;
                            v19 = "AbortPad_GcMustPadSkinny";
                            goto LABEL_13;
                          case 541:
                            v18 = *v8;
                            v19 = "bdrHostPingInitial";
                            goto LABEL_13;
                          case 542:
                            v18 = *v8;
                            v19 = "bdrHostPingMoreNeeded";
                            goto LABEL_13;
                          case 543:
                            v18 = *v8;
                            v19 = "bandParityAllocationFailed";
                            goto LABEL_13;
                          case 544:
                            v18 = *v8;
                            v19 = "fastHwBurstToSlc";
                            goto LABEL_13;
                          case 545:
                            v18 = *v8;
                            v19 = "slowHwToTlc";
                            goto LABEL_13;
                          case 546:
                            v20 = "slcDemandBurstSizeDetected";
                            v21 = a1;
                            v22 = 546;
                            goto LABEL_11;
                          case 547:
                            v20 = "slcDemandBurstDur";
                            v21 = a1;
                            v22 = 547;
                            goto LABEL_11;
                          case 548:
                            v18 = *v8;
                            v19 = "fastHwToTlcBurst";
                            goto LABEL_13;
                          case 549:
                            v20 = "slcDemandBurstSizeSlc";
                            v21 = a1;
                            v22 = 549;
                            goto LABEL_11;
                          case 551:
                            v20 = "balanceProportionBucketsHistogramTlc";
                            v21 = a1;
                            v22 = 551;
                            goto LABEL_320;
                          case 553:
                            v18 = *v8;
                            v19 = "slowHwFlushToSlc";
                            goto LABEL_13;
                          case 557:
                            v18 = *v8;
                            v19 = "slowHwToSlc";
                            goto LABEL_13;
                          case 558:
                            v18 = *v8;
                            v19 = "flushNwToSlc";
                            goto LABEL_13;
                          case 559:
                            v18 = *v8;
                            v19 = "flushNwToTlc";
                            goto LABEL_13;
                          case 560:
                            v18 = *v8;
                            v19 = "oslcHw";
                            goto LABEL_13;
                          case 561:
                            v18 = *v8;
                            v19 = "oslcTransitions";
                            goto LABEL_13;
                          case 563:
                            v18 = *v8;
                            v19 = "slcDemandFlushCount";
                            goto LABEL_13;
                          case 564:
                            v18 = *v8;
                            v19 = "slcDemandBurstCount";
                            goto LABEL_13;
                          case 565:
                            v18 = *v8;
                            v19 = "oslcBaseAvgPE";
                            goto LABEL_13;
                          case 566:
                            v18 = *v8;
                            v19 = "raidReconstructFailNoSPBX";
                            goto LABEL_13;
                          case 567:
                            v18 = *v8;
                            v19 = "raidReconstructFailDouble";
                            goto LABEL_13;
                          case 568:
                            v18 = *v8;
                            v19 = "oslcFastWAmpUOnOff";
                            goto LABEL_13;
                          case 569:
                            v18 = *v8;
                            v19 = "oslcSlowWAmpUOnOff";
                            goto LABEL_13;
                          case 570:
                            v18 = *v8;
                            v19 = "raidReconstructFailInvalid";
                            goto LABEL_13;
                          case 572:
                            v18 = *v8;
                            v19 = "oslcLastWAmpUx10";
                            goto LABEL_13;
                          case 573:
                            v18 = *v8;
                            v19 = "raidFailedReadNoBlog";
                            goto LABEL_13;
                          case 574:
                            v18 = *v8;
                            v19 = "raidReconstructFailBlank";
                            goto LABEL_13;
                          case 575:
                            v18 = *v8;
                            v19 = "oslcHotTLCOnOff";
                            goto LABEL_13;
                          case 576:
                            v18 = *v8;
                            v19 = "gcVPackDestinations";
                            goto LABEL_13;
                          case 581:
                            v18 = *v8;
                            v19 = "averageTLCPECycles";
                            goto LABEL_13;
                          case 582:
                            v18 = *v8;
                            v19 = "averageSLCPECycles";
                            goto LABEL_13;
                          case 583:
                            v18 = *v8;
                            v19 = "numAtomicBoots";
                            goto LABEL_13;
                          case 584:
                            v18 = *v8;
                            v19 = "clogMinorMismatch";
                            goto LABEL_13;
                          case 586:
                            v18 = *v8;
                            v19 = "raidExpectedFailRMXReconstructionInternal";
                            goto LABEL_13;
                          case 587:
                            v18 = *v8;
                            v19 = "raidExpectedFailRMXReconstructionHost";
                            goto LABEL_13;
                          case 588:
                            v18 = *v8;
                            v19 = "oslcGCinvalidations";
                            goto LABEL_13;
                          case 589:
                            v18 = *v8;
                            v19 = "oslcGCActivateReason";
                            goto LABEL_13;
                          default:
                            switch(v7)
                            {
                              case 590:
                                v18 = *v8;
                                v19 = "oslcLowCleanBandsUOnOff";
                                goto LABEL_13;
                              case 591:
                                v18 = *v8;
                                v19 = "oslcTooManyGCMustOnOff";
                                goto LABEL_13;
                              case 592:
                                v18 = *v8;
                                v19 = "oslcBaseHostWrites";
                                goto LABEL_13;
                              case 593:
                                v18 = *v8;
                                v19 = "oslcBaseBandErases";
                                goto LABEL_13;
                              case 594:
                                v18 = *v8;
                                v19 = "oslcBdrBands";
                                goto LABEL_13;
                              case 595:
                                v18 = *v8;
                                v19 = "oslcBdrValid";
                                goto LABEL_13;
                              case 596:
                                v18 = *v8;
                                v19 = "unexpectedBlanks";
                                goto LABEL_13;
                              case 597:
                                v18 = *v8;
                                v19 = "unexpectedBlanksOnRV";
                                goto LABEL_13;
                              case 601:
                                v18 = *v8;
                                v19 = "waterfallLockSectors";
                                goto LABEL_13;
                              case 602:
                                v18 = *v8;
                                v19 = "oslcGCActiveWrites";
                                goto LABEL_13;
                              case 603:
                                v18 = *v8;
                                v19 = "chipIdTemperatureSample";
                                goto LABEL_13;
                              case 604:
                                v18 = *v8;
                                v19 = "gcVPackWrites";
                                goto LABEL_13;
                              case 605:
                                v20 = "gcActiveReasons";
                                v21 = a1;
                                v22 = 605;
                                goto LABEL_11;
                              case 606:
                                v18 = *v8;
                                v19 = "eanMaxInitTimeMs";
                                goto LABEL_13;
                              case 607:
                                v18 = *v8;
                                v19 = "eanMinToFirstReadTimeMs";
                                goto LABEL_13;
                              case 608:
                                v18 = *v8;
                                v19 = "skinnyAPGMRetire";
                                goto LABEL_13;
                              case 609:
                                v18 = *v8;
                                v19 = "unexpectedBlanksHost";
                                goto LABEL_13;
                              case 610:
                                v20 = "pcieAerCounters";
                                v21 = a1;
                                v22 = 610;
                                goto LABEL_342;
                              case 611:
                                v18 = *v8;
                                v19 = "fastHwToTlcBalance";
                                goto LABEL_13;
                              case 612:
                                v18 = *v8;
                                v19 = "perfOSLCRuns";
                                goto LABEL_13;
                              case 613:
                                v18 = *v8;
                                v19 = "slcDemandBurstWritesInGC";
                                goto LABEL_13;
                              case 614:
                                v18 = *v8;
                                v19 = "slcDemandBurstWritesInTT";
                                goto LABEL_13;
                              case 615:
                                v18 = *v8;
                                v19 = "slcDemandBurstWritesInNRP";
                                goto LABEL_13;
                              case 616:
                                v18 = *v8;
                                v19 = "perfTotalDmaMb";
                                goto LABEL_13;
                              case 617:
                                v18 = *v8;
                                v19 = "eanAvgInitTimeMs";
                                goto LABEL_13;
                              case 618:
                                v18 = *v8;
                                v19 = "eanAvgToFirstReadTimeMs";
                                goto LABEL_13;
                              case 619:
                                v18 = *v8;
                                v19 = "eanMaxBootReadTimeMs";
                                goto LABEL_13;
                              case 620:
                                v18 = *v8;
                                v19 = "eanAvgBootReadTimeMs";
                                goto LABEL_13;
                              case 621:
                                v20 = "eanBootReadsHist";
                                v21 = a1;
                                v22 = 621;
                                goto LABEL_11;
                              case 622:
                                v18 = *v8;
                                v19 = "maxBgInitTimeMs";
                                goto LABEL_13;
                              case 623:
                                v18 = *v8;
                                v19 = "avgBgInitTimeMs";
                                goto LABEL_13;
                              case 624:
                                v20 = "clogFailReason";
                                v21 = a1;
                                v22 = 624;
                                goto LABEL_85;
                              case 625:
                                v18 = *v8;
                                v19 = "eanMinBootReadMBPerSec";
                                goto LABEL_13;
                              case 626:
                                v18 = *v8;
                                v19 = "eanAvgBootReadMBPerSec";
                                goto LABEL_13;
                              case 627:
                                v18 = *v8;
                                v19 = "minSkinnyPECycles";
                                goto LABEL_13;
                              case 628:
                                v18 = *v8;
                                v19 = "maxSkinnyPECycles";
                                goto LABEL_13;
                              case 629:
                                v18 = *v8;
                                v19 = "averageSkinnyPECycles";
                                goto LABEL_13;
                              case 630:
                                v20 = "raidSuccessfulRecoEAN";
                                v21 = a1;
                                v22 = 630;
                                goto LABEL_463;
                              case 631:
                                v20 = "raidFailedRecoEAN";
                                v21 = a1;
                                v22 = 631;
                                goto LABEL_463;
                              case 632:
                                v20 = "eanFirstReadMode";
                                v21 = a1;
                                v22 = 632;
LABEL_463:
                                v14 = v8;
                                v15 = 6;
                                goto LABEL_12;
                              case 635:
                                v18 = *v8;
                                v19 = "oslcHwGC";
                                goto LABEL_13;
                              case 636:
                                v18 = *v8;
                                v19 = "oslcHwTT";
                                goto LABEL_13;
                              case 637:
                                v18 = *v8;
                                v19 = "oslcHwNRP";
                                goto LABEL_13;
                              case 638:
                                v20 = "oslcDemandBurstSize";
                                v21 = a1;
                                v22 = 638;
                                goto LABEL_11;
                              case 639:
                                v18 = *v8;
                                v19 = "raidReconstructSuccessBandFlowOslc";
                                goto LABEL_13;
                              case 640:
                                v18 = *v8;
                                v19 = "raidReconstructFailBandFlowOslc";
                                goto LABEL_13;
                              case 641:
                                v18 = *v8;
                                v19 = "raidFailSectors";
                                goto LABEL_13;
                              case 642:
                                v18 = *v8;
                                v19 = "eanFailSectors";
                                goto LABEL_13;
                              case 643:
                                v18 = *v8;
                                v19 = "bdrTimeMode";
                                goto LABEL_13;
                              case 644:
                                v18 = *v8;
                                v19 = "raidParityNotSavedP";
                                goto LABEL_13;
                              case 645:
                                v18 = *v8;
                                v19 = "raidParityNotSavedQ";
                                goto LABEL_13;
                              case 646:
                                v18 = *v8;
                                v19 = "raidParityInvalid";
                                goto LABEL_13;
                              case 647:
                                v18 = *v8;
                                v19 = "raidParityUnknown";
                                goto LABEL_13;
                              case 648:
                                v18 = *v8;
                                v19 = "raidParityUnmapped";
                                goto LABEL_13;
                              case 649:
                                v18 = *v8;
                                v19 = "raidParityGCUnc";
                                goto LABEL_13;
                              case 657:
                                v18 = *v8;
                                v19 = "AbortSkip_MPBXProbational";
                                goto LABEL_13;
                              case 659:
                                v18 = *v8;
                                v19 = "raidVerificationReads";
                                goto LABEL_13;
                              case 666:
                                v18 = *v8;
                                v19 = "nofDies";
                                goto LABEL_13;
                              case 671:
                                v18 = *v8;
                                v19 = "skinnyBandsNum";
                                goto LABEL_13;
                              case 672:
                                v18 = *v8;
                                v19 = "skinnyBandsNumDips";
                                goto LABEL_13;
                              case 674:
                                v20 = "oslcNoVotesHw";
                                v21 = a1;
                                v22 = 674;
                                goto LABEL_23;
                              case 675:
                                v18 = *v8;
                                v19 = "totalLbas";
                                goto LABEL_13;
                              case 676:
                                v18 = *v8;
                                v19 = "bdrHostPingExtra";
                                goto LABEL_13;
                              case 677:
                                v18 = *v8;
                                v19 = "magazineInstanceMeta";
                                goto LABEL_13;
                              default:
                                switch(v7)
                                {
                                  case 680:
                                    v20 = "magazineFWVersion";
                                    v21 = a1;
                                    v22 = 680;
                                    goto LABEL_21;
                                  case 681:
                                    v18 = *v8;
                                    v19 = "raidReconstructFailPMXUnsup";
                                    goto LABEL_13;
                                  case 682:
                                    v18 = *v8;
                                    v19 = "raidReconstructFailBMXUnsup";
                                    goto LABEL_13;
                                  case 683:
                                    v18 = *v8;
                                    v19 = "iBootNANDResets";
                                    goto LABEL_13;
                                  case 684:
                                    v18 = *v8;
                                    v19 = "pcieClkreqHighTimeout";
                                    goto LABEL_13;
                                  case 687:
                                    v20 = "cbdrInitSent";
                                    v21 = a1;
                                    v22 = 687;
LABEL_21:
                                    v14 = v8;
                                    v15 = 3;
                                    goto LABEL_12;
                                  case 688:
                                    v18 = *v8;
                                    v19 = "cbdrPauseSent";
                                    goto LABEL_13;
                                  case 689:
                                    v18 = *v8;
                                    v19 = "cbdrResumeSent";
                                    goto LABEL_13;
                                  case 690:
                                    v18 = *v8;
                                    v19 = "cbdrGetResultSent";
                                    goto LABEL_13;
                                  case 691:
                                    v18 = *v8;
                                    v19 = "cbdrEarlyExits";
                                    goto LABEL_13;
                                  case 694:
                                    v20 = "cbdrRefreshGrades";
                                    v21 = a1;
                                    v22 = 694;
                                    goto LABEL_11;
                                  case 695:
                                    v18 = *v8;
                                    v19 = "cbdrNotEnoughReads";
                                    goto LABEL_13;
                                  case 696:
                                    v18 = *v8;
                                    v19 = "cbdrAborts";
                                    goto LABEL_13;
                                  case 697:
                                    v18 = *v8;
                                    v19 = "TurboRaidHostClassifications";
                                    goto LABEL_13;
                                  case 698:
                                    v18 = *v8;
                                    v19 = "TurboRaidInternalClassifications";
                                    goto LABEL_13;
                                  case 699:
                                    v18 = *v8;
                                    v19 = "cbdrFullyDone";
                                    goto LABEL_13;
                                  case 702:
                                    v20 = "vcurve";
                                    v21 = a1;
                                    v22 = 702;
                                    goto LABEL_155;
                                  case 703:
                                    v20 = "injDepth";
                                    v21 = a1;
                                    v22 = 703;
                                    goto LABEL_153;
                                  case 704:
                                    v18 = *v8;
                                    v19 = "logical_disk_occupied_promiles";
                                    goto LABEL_13;
                                  case 711:
                                    v18 = *v8;
                                    v19 = "raidPrevFailedReconstructSkip";
                                    goto LABEL_13;
                                  case 712:
                                    v18 = *v8;
                                    v19 = "TurboRaidSuccessfulHostAuxReads";
                                    goto LABEL_13;
                                  case 713:
                                    v18 = *v8;
                                    v19 = "TurboRaidSuccessfulInternalAuxReads";
                                    goto LABEL_13;
                                  case 714:
                                    v18 = *v8;
                                    v19 = "turboRaidClassificationReliabilityHost";
                                    goto LABEL_13;
                                  case 715:
                                    v18 = *v8;
                                    v19 = "turboRaidClassificationReliabilityInternal";
                                    goto LABEL_13;
                                  case 716:
                                    v18 = *v8;
                                    v19 = "turboRaidClassificationQualityHost";
                                    goto LABEL_13;
                                  case 717:
                                    v18 = *v8;
                                    v19 = "turboRaidClassificationQualityInternal";
                                    goto LABEL_13;
                                  case 719:
                                    v18 = *v8;
                                    v19 = "skinnyBandErases";
                                    goto LABEL_13;
                                  case 721:
                                    v18 = *v8;
                                    v19 = "gcPDusterDestinations";
                                    goto LABEL_13;
                                  case 722:
                                    v18 = *v8;
                                    v19 = "gcPDusterWrites";
                                    goto LABEL_13;
                                  case 730:
                                    v18 = *v8;
                                    v19 = "rvFails";
                                    goto LABEL_13;
                                  case 737:
                                    v18 = *v8;
                                    v19 = "TurboRaidFailedHostAuxReads";
                                    goto LABEL_13;
                                  case 738:
                                    v18 = *v8;
                                    v19 = "TurboRaidFailedInternalAuxReads";
                                    goto LABEL_13;
                                  case 741:
                                    v18 = *v8;
                                    v19 = "autoSkipTriggers";
                                    goto LABEL_13;
                                  case 742:
                                    v18 = *v8;
                                    v19 = "autoSkipPlanes";
                                    goto LABEL_13;
                                  case 744:
                                    v20 = "raidReconstructDurationHisto";
                                    v21 = a1;
                                    v22 = 744;
                                    goto LABEL_23;
                                  case 745:
                                    v20 = "failsOnReconstructHisto";
                                    v21 = a1;
                                    v22 = 745;
                                    goto LABEL_23;
                                  case 746:
                                    v18 = *v8;
                                    v19 = "bandKill_userFlattenExcessive";
                                    goto LABEL_13;
                                  case 747:
                                    v18 = *v8;
                                    v19 = "bandKill_IntFlattenExcessive";
                                    goto LABEL_13;
                                  case 748:
                                    v18 = *v8;
                                    v19 = "bandKill_userFlattenBalance";
                                    goto LABEL_13;
                                  case 749:
                                    v18 = *v8;
                                    v19 = "bandKill_intFlattenBalance";
                                    goto LABEL_13;
                                  case 750:
                                    v18 = *v8;
                                    v19 = "bandKill_formatVertExcessive";
                                    goto LABEL_13;
                                  case 751:
                                    v18 = *v8;
                                    v19 = "bandKill_formatVertBalance";
                                    goto LABEL_13;
                                  case 753:
                                    v18 = *v8;
                                    v19 = "cbdrNumSlowRefreshes";
                                    goto LABEL_13;
                                  case 754:
                                    v18 = *v8;
                                    v19 = "cbdrNumFastRefreshes";
                                    goto LABEL_13;
                                  case 755:
                                    v18 = *v8;
                                    v19 = "cbdrTotalRefreshValidity";
                                    goto LABEL_13;
                                  case 756:
                                    v20 = "cbdrRefreshedAges";
                                    v21 = a1;
                                    v22 = 756;
                                    goto LABEL_544;
                                  case 758:
                                    v18 = *v8;
                                    v19 = "cbdrSkippedBlocks";
                                    goto LABEL_13;
                                  case 759:
                                    v20 = "cbdrScanPct";
                                    v21 = a1;
                                    v22 = 759;
                                    goto LABEL_19;
                                  case 760:
                                    v18 = *v8;
                                    v19 = "raidSuccessfulBMXReconstructionInternal";
                                    goto LABEL_13;
                                  case 761:
                                    v18 = *v8;
                                    v19 = "raidSuccessfulBMXReconstructionHost";
                                    goto LABEL_13;
                                  case 762:
                                    v18 = *v8;
                                    v19 = "raidFailedBMXReconstructionInternal";
                                    goto LABEL_13;
                                  case 763:
                                    v18 = *v8;
                                    v19 = "raidFailedBMXReconstructionHost";
                                    goto LABEL_13;
                                  case 764:
                                    v18 = *v8;
                                    v19 = "ricSPRVFail";
                                    goto LABEL_13;
                                  case 765:
                                    v18 = *v8;
                                    v19 = "ricMPRVFail";
                                    goto LABEL_13;
                                  case 768:
                                    v20 = "cbdrRefreshedAgesSLC";
                                    v21 = a1;
                                    v22 = 768;
LABEL_544:
                                    v14 = v8;
                                    v15 = 9;
                                    goto LABEL_12;
                                  case 770:
                                    v20 = "cpuBurstLength";
                                    v21 = a1;
                                    v22 = 770;
                                    goto LABEL_23;
                                  case 771:
                                    v18 = *v8;
                                    v19 = "autoSkipRaidRecoFail";
                                    goto LABEL_13;
                                  case 772:
                                    v20 = "dmReasonsSlc";
                                    v21 = a1;
                                    v22 = 772;
                                    goto LABEL_155;
                                  case 773:
                                    v20 = "dmReasonsTlc";
                                    v21 = a1;
                                    v22 = 773;
                                    goto LABEL_155;
                                  case 774:
                                    v18 = *v8;
                                    v19 = "raidReconstructFailBMXAbort";
                                    goto LABEL_13;
                                  case 775:
                                    v18 = *v8;
                                    v19 = "bandKill_fatBindingNoBlocks";
                                    goto LABEL_13;
                                  case 776:
                                    v18 = *v8;
                                    v19 = "bandKill_fatBindingFewBlocks";
                                    goto LABEL_13;
                                  case 777:
                                    v18 = *v8;
                                    v19 = "numBadBootBlocks";
                                    goto LABEL_13;
                                  case 778:
                                    v18 = *v8;
                                    v19 = "snapshotCPUHigh";
                                    goto LABEL_13;
                                  default:
                                    switch(v7)
                                    {
                                      case 779:
                                        v18 = *v8;
                                        v19 = "snapshotCPULow";
                                        goto LABEL_13;
                                      case 780:
                                        v18 = *v8;
                                        v19 = "gcWithoutBMs";
                                        goto LABEL_13;
                                      case 781:
                                        v20 = "gcSearchTimeHistory";
                                        v21 = a1;
                                        v22 = 781;
                                        goto LABEL_11;
                                      case 785:
                                        v20 = "gcSearchPortion";
                                        v21 = a1;
                                        v22 = 785;
                                        goto LABEL_85;
                                      case 786:
                                        v18 = *v8;
                                        v19 = "raidReconstructFailBmxMp";
                                        goto LABEL_13;
                                      case 787:
                                        v18 = *v8;
                                        v19 = "raidReconstructFailBmx";
                                        goto LABEL_13;
                                      case 788:
                                        v18 = *v8;
                                        v19 = "raidReconstructFailBMXUECC";
                                        goto LABEL_13;
                                      case 789:
                                        v18 = *v8;
                                        v19 = "raidReconstructFailBMXBlank";
                                        goto LABEL_13;
                                      case 790:
                                        v18 = *v8;
                                        v19 = "raidPrevFailedReconstructBmxMpSkip";
                                        goto LABEL_13;
                                      case 792:
                                        v18 = *v8;
                                        v19 = "numTLCFatBands";
                                        goto LABEL_13;
                                      case 793:
                                        v18 = *v8;
                                        v19 = "fatValidity";
                                        goto LABEL_13;
                                      case 794:
                                        v18 = *v8;
                                        v19 = "fatTotal";
                                        goto LABEL_13;
                                      case 798:
                                        v20 = "raidBMXFailP";
                                        v21 = a1;
                                        v22 = 798;
                                        goto LABEL_22;
                                      case 799:
                                        v20 = "raidBMXFailUECC";
                                        v21 = a1;
                                        v22 = 799;
                                        goto LABEL_22;
                                      case 804:
                                        v20 = "raidBMXFailNoSPBX";
                                        v21 = a1;
                                        v22 = 804;
                                        goto LABEL_22;
                                      case 806:
                                        v20 = "raidBMXFailBlank";
                                        v21 = a1;
                                        v22 = 806;
                                        goto LABEL_22;
                                      case 809:
                                        v20 = "raidBMXFailUnsup";
                                        v21 = a1;
                                        v22 = 809;
                                        goto LABEL_22;
                                      case 811:
                                        v20 = "raidBMXFailMpSkip";
                                        v21 = a1;
                                        v22 = 811;
                                        goto LABEL_22;
                                      case 812:
                                        v20 = "raidBMXFailAbort";
                                        v21 = a1;
                                        v22 = 812;
                                        goto LABEL_22;
                                      case 813:
                                        v18 = *v8;
                                        v19 = "TurboRaidIsEnabled";
                                        goto LABEL_13;
                                      case 814:
                                        v20 = "raidBMXFailOther";
                                        v21 = a1;
                                        v22 = 814;
                                        goto LABEL_22;
                                      case 815:
                                        v20 = "raidBMXSuccess";
                                        v21 = a1;
                                        v22 = 815;
                                        goto LABEL_22;
                                      case 816:
                                        v18 = *v8;
                                        v19 = "skinnyBandsExtraDip";
                                        goto LABEL_13;
                                      case 821:
                                        v18 = *v8;
                                        v19 = "writeAmp";
                                        goto LABEL_13;
                                      case 822:
                                        v18 = *v8;
                                        v19 = "ricMaxClogOnlyPages";
                                        goto LABEL_13;
                                      case 823:
                                        v20 = "readClassifyStatusesHisto";
                                        v21 = a1;
                                        v22 = 823;
                                        goto LABEL_21;
                                      case 824:
                                        v20 = "readWithAuxStatusesHisto";
                                        v21 = a1;
                                        v22 = 824;
                                        goto LABEL_11;
                                      case 825:
                                        v20 = "readReconstructStatusesHisto";
                                        v21 = a1;
                                        v22 = 825;
                                        goto LABEL_11;
                                      case 826:
                                        v18 = *v8;
                                        v19 = "bdrBackupChecks";
                                        goto LABEL_13;
                                      case 827:
                                        v18 = *v8;
                                        v19 = "ricExceedClogOnlyPagesTH";
                                        goto LABEL_13;
                                      case 828:
                                        v18 = *v8;
                                        v19 = "numDipFailures";
                                        goto LABEL_13;
                                      case 862:
                                        v18 = *v8;
                                        v19 = "raidSuccessfulSkip";
                                        goto LABEL_13;
                                      case 863:
                                        v18 = *v8;
                                        v19 = "raidFailedSkip";
                                        goto LABEL_13;
                                      case 864:
                                        v18 = *v8;
                                        v19 = "raidSkipAttempts";
                                        goto LABEL_13;
                                      case 865:
                                        v20 = "timeOfThrottlingPerLevel";
                                        v21 = a1;
                                        v22 = 865;
                                        goto LABEL_85;
                                      case 866:
                                        v20 = "timeOfThrottlingPerReadLevel";
                                        v21 = a1;
                                        v22 = 866;
                                        goto LABEL_85;
                                      case 867:
                                        v20 = "timeOfThrottlingPerWriteLevel";
                                        v21 = a1;
                                        v22 = 867;
                                        goto LABEL_85;
                                      case 868:
                                        v20 = "dmReasonsSlc_1bc";
                                        v21 = a1;
                                        v22 = 868;
                                        goto LABEL_155;
                                      case 869:
                                        v20 = "dmReasonsTlc_1bc";
                                        v21 = a1;
                                        v22 = 869;
                                        goto LABEL_155;
                                      case 870:
                                        v20 = "dmReasonsSlc_1bc_he";
                                        v21 = a1;
                                        v22 = 870;
                                        goto LABEL_155;
                                      case 871:
                                        v20 = "dmReasonsTlc_1bc_he";
                                        v21 = a1;
                                        v22 = 871;
                                        goto LABEL_155;
                                      case 876:
                                        v20 = "dmReasonsSlc_mbc";
                                        v21 = a1;
                                        v22 = 876;
                                        goto LABEL_155;
                                      case 877:
                                        v20 = "dmReasonsTlc_mbc";
                                        v21 = a1;
                                        v22 = 877;
                                        goto LABEL_155;
                                      case 883:
                                        v18 = *v8;
                                        v19 = "clogEmptyProgramms";
                                        goto LABEL_13;
                                      case 884:
                                        v18 = *v8;
                                        v19 = "oslcHwCloseBand";
                                        goto LABEL_13;
                                      case 891:
                                        v20 = "turboRaidSuccessAuxPartition";
                                        v21 = a1;
                                        v22 = 891;
                                        goto LABEL_20;
                                      case 892:
                                        v20 = "turboRaidFailAuxPartition";
                                        v21 = a1;
                                        v22 = 892;
                                        goto LABEL_20;
                                      case 893:
                                        v20 = "turboRaidClassifyQualPartition";
                                        v21 = a1;
                                        v22 = 893;
                                        goto LABEL_20;
                                      case 894:
                                        v20 = "turboRaidClassifyRelPartition";
                                        v21 = a1;
                                        v22 = 894;
                                        goto LABEL_20;
                                      case 895:
                                        v18 = *v8;
                                        v19 = "IND_pool_freeMinSilo";
                                        goto LABEL_13;
                                      case 896:
                                        v18 = *v8;
                                        v19 = "autoSweepBlocks";
                                        goto LABEL_13;
                                      case 897:
                                        v20 = "wcWrFragSizes";
                                        v21 = a1;
                                        v22 = 897;
                                        goto LABEL_85;
                                      case 898:
                                        v20 = "indStateAcrossGcDidNoL";
                                        v21 = a1;
                                        v22 = 898;
                                        goto LABEL_85;
                                      case 899:
                                        v20 = "indStateAcrossGcDidL";
                                        v21 = a1;
                                        v22 = 899;
                                        goto LABEL_85;
                                      case 900:
                                        v18 = *v8;
                                        v19 = "turboRaidNoClassifyDueToWasRetire";
                                        goto LABEL_13;
                                      case 901:
                                        v18 = *v8;
                                        v19 = "turboRaidNoClassifyDueToOpenBand";
                                        goto LABEL_13;
                                      case 902:
                                        v18 = *v8;
                                        v19 = "turboRaidNoClassifyDueToQualityBlock";
                                        goto LABEL_13;
                                      case 903:
                                        v18 = *v8;
                                        v19 = "turboRaidGbbOpenBand";
                                        goto LABEL_13;
                                      case 904:
                                        v18 = *v8;
                                        v19 = "turboRaidGbbShouldRetireOnRefresh";
                                        goto LABEL_13;
                                      case 905:
                                        v20 = "turboRaidRelPerBlock";
                                        v21 = a1;
                                        v22 = 905;
                                        goto LABEL_85;
                                      case 906:
                                        v20 = "turboRaidRelBetweenRefreshesPerBlock";
                                        v21 = a1;
                                        v22 = 906;
                                        goto LABEL_85;
                                      case 907:
                                        v20 = "turboRaidMaxRelBetweenRefreshesPerBlock";
                                        v21 = a1;
                                        v22 = 907;
                                        goto LABEL_85;
                                      case 908:
                                        v20 = "turboRaidMinRelBetweenRefreshesPerBlock";
                                        v21 = a1;
                                        v22 = 908;
                                        goto LABEL_85;
                                      case 918:
                                        v20 = "turboRaidMaxCyclesBetweenRel";
                                        v21 = a1;
                                        v22 = 918;
                                        goto LABEL_85;
                                      default:
                                        if (v7 <= 1039)
                                        {
                                          switch(v7)
                                          {
                                            case 919:
                                              v20 = "turboRaidMinCyclesBetweenRel";
                                              v21 = a1;
                                              v22 = 919;
                                              goto LABEL_85;
                                            case 920:
                                              v20 = "turboRaidAuxPerBlock";
                                              v21 = a1;
                                              v22 = 920;
                                              goto LABEL_85;
                                            case 921:
                                              v20 = "turboRaidAuxBetweenRefreshesPerBlock";
                                              v21 = a1;
                                              v22 = 921;
                                              goto LABEL_85;
                                            case 922:
                                              v18 = *v8;
                                              v19 = "turboRaidRelLockMark";
                                              goto LABEL_13;
                                            case 923:
                                              v18 = *v8;
                                              v19 = "turboRaidAuxLockMark";
                                              goto LABEL_13;
                                            case 924:
                                            case 925:
                                            case 926:
                                            case 927:
                                            case 928:
                                            case 929:
                                            case 936:
                                            case 941:
                                            case 945:
                                            case 946:
                                            case 947:
                                            case 949:
                                            case 950:
                                            case 952:
                                            case 954:
                                            case 955:
                                            case 956:
                                            case 957:
                                            case 958:
                                            case 959:
                                            case 960:
                                            case 963:
                                            case 964:
                                            case 965:
                                            case 966:
                                            case 968:
                                            case 969:
                                            case 970:
                                              goto LABEL_696;
                                            case 930:
                                              v20 = "turboRaidMaxCyclesBetweenAux";
                                              v21 = a1;
                                              v22 = 930;
                                              goto LABEL_85;
                                            case 931:
                                              v20 = "turboRaidMinCyclesBetweenAux";
                                              v21 = a1;
                                              v22 = 931;
                                              goto LABEL_85;
                                            case 932:
                                              v20 = "turboRaidLastRelPECycles";
                                              v21 = a1;
                                              v22 = 932;
                                              goto LABEL_85;
                                            case 933:
                                              v20 = "turboRaidRelQualPECycles";
                                              v21 = a1;
                                              v22 = 933;
                                              goto LABEL_85;
                                            case 934:
                                              v20 = "turboRaidLastAuxPECycles";
                                              v21 = a1;
                                              v22 = 934;
                                              goto LABEL_85;
                                            case 935:
                                              v20 = "turboRaidAuxQualPECycles";
                                              v21 = a1;
                                              v22 = 935;
                                              goto LABEL_85;
                                            case 937:
                                              v18 = *v8;
                                              v19 = "turboRaidPEFailAfterRel";
                                              goto LABEL_13;
                                            case 938:
                                              v18 = *v8;
                                              v19 = "turboRaidPEFailAfterAux";
                                              goto LABEL_13;
                                            case 939:
                                              v18 = *v8;
                                              v19 = "dvfmVotesCPU";
                                              goto LABEL_13;
                                            case 940:
                                              v18 = *v8;
                                              v19 = "dvfmVotesBandwidth";
                                              goto LABEL_13;
                                            case 942:
                                              v18 = *v8;
                                              v19 = "maxSLCEndurance";
                                              goto LABEL_13;
                                            case 943:
                                              v18 = *v8;
                                              v19 = "maxMixedEndurance";
                                              goto LABEL_13;
                                            case 944:
                                              v18 = *v8;
                                              v19 = "maxNativeEndurance";
                                              goto LABEL_13;
                                            case 948:
                                              v20 = "assertHistory";
                                              v21 = a1;
                                              v22 = 948;
                                              v14 = v8;
                                              v15 = 40;
                                              goto LABEL_12;
                                            case 951:
                                              v18 = *v8;
                                              v19 = "asp3Support";
                                              goto LABEL_13;
                                            case 953:
                                              v18 = *v8;
                                              v19 = "numCrossTempRaidUecc";
                                              goto LABEL_13;
                                            case 961:
                                              v18 = *v8;
                                              v19 = "osBuildStr";
                                              goto LABEL_13;
                                            case 962:
                                              v18 = *v8;
                                              v19 = "raidConfig";
                                              goto LABEL_13;
                                            case 967:
                                              v20 = "indTrimFrags";
                                              v21 = a1;
                                              v22 = 967;
                                              goto LABEL_153;
                                            case 971:
                                              v20 = "indUsedFrags";
                                              v21 = a1;
                                              v22 = 971;
                                              goto LABEL_153;
                                            default:
                                              switch(v7)
                                              {
                                                case 996:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogFindFail";
                                                  goto LABEL_14;
                                                case 997:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogFindBlank";
                                                  goto LABEL_14;
                                                case 998:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogFindUnc";
                                                  goto LABEL_14;
                                                case 999:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogFindUnexpected";
                                                  goto LABEL_14;
                                                case 1001:
                                                  v21 = a1;
                                                  v22 = 1001;
                                                  v20 = "clogReplayFailReason";
                                                  goto LABEL_23;
                                                case 1002:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogReplayTransientError";
                                                  goto LABEL_14;
                                                case 1003:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "clogReplaySpfError";
                                                  goto LABEL_14;
                                                case 1015:
                                                  v21 = a1;
                                                  v22 = 1015;
                                                  v20 = "eanEarlyBootUeccPage";
                                                  goto LABEL_22;
                                                case 1016:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "eanEarlyBootNumUeccPages";
                                                  goto LABEL_14;
                                                case 1017:
                                                  v18 = *v8;
                                                  v16 = (_QWORD *)a1;
                                                  v19 = "eanEarlyBootUeccMultiplane";
                                                  goto LABEL_14;
                                                default:
                                                  goto LABEL_696;
                                              }
                                          }
                                        }
                                        if (v7 > 1146)
                                        {
                                          switch(v7)
                                          {
                                            case 1147:
                                              v21 = a1;
                                              v22 = 1147;
                                              v20 = "gc_concurrent_dw_gc12";
                                              goto LABEL_713;
                                            case 1148:
                                              v21 = a1;
                                              v22 = 1148;
                                              v20 = "gc_concurrent_dw_gc1";
                                              goto LABEL_713;
                                            case 1149:
                                              v21 = a1;
                                              v22 = 1149;
                                              v20 = "gc_concurrent_dw_gc2";
LABEL_713:
                                              v14 = v8;
                                              v15 = 24;
                                              goto LABEL_12;
                                            case 1150:
                                            case 1151:
                                            case 1152:
                                            case 1153:
                                            case 1154:
                                            case 1155:
                                            case 1156:
                                            case 1159:
                                            case 1160:
                                            case 1161:
                                            case 1162:
                                            case 1163:
                                            case 1164:
                                            case 1165:
                                            case 1166:
                                            case 1167:
                                            case 1170:
                                            case 1173:
                                            case 1174:
                                            case 1175:
                                            case 1176:
                                            case 1177:
                                            case 1178:
                                            case 1186:
                                            case 1187:
                                            case 1188:
                                              goto LABEL_696;
                                            case 1157:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "eanMaxForceROTimeMs";
                                              goto LABEL_14;
                                            case 1158:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "eanMaxForceRORecoTimeMs";
                                              goto LABEL_14;
                                            case 1168:
                                              v21 = a1;
                                              v22 = 1168;
                                              v20 = "poDetectPERemovalTotalCost";
                                              goto LABEL_20;
                                            case 1169:
                                              v21 = a1;
                                              v22 = 1169;
                                              v20 = "poDetectEmptySpotRemovalTotalCost";
                                              goto LABEL_20;
                                            case 1171:
                                              v21 = a1;
                                              v22 = 1171;
                                              v20 = "poDetectEmptySpotRemovalAge";
                                              break;
                                            case 1172:
                                              v21 = a1;
                                              v22 = 1172;
                                              v20 = "poDetectGBBedMostSevereCost";
                                              goto LABEL_21;
                                            case 1179:
                                              v21 = a1;
                                              v22 = 1179;
                                              v20 = "gc_cur_dw_gc1";
                                              goto LABEL_22;
                                            case 1180:
                                              v21 = a1;
                                              v22 = 1180;
                                              v20 = "gc_cur_dw_gc2";
                                              goto LABEL_22;
                                            case 1181:
                                              v21 = a1;
                                              v22 = 1181;
                                              v20 = "gc_cur_dw_gc3";
                                              goto LABEL_22;
                                            case 1182:
                                              v21 = a1;
                                              v22 = 1182;
                                              v20 = "gc_tot_dw_gc1";
                                              goto LABEL_22;
                                            case 1183:
                                              v21 = a1;
                                              v22 = 1183;
                                              v20 = "gc_tot_dw_gc2";
                                              goto LABEL_22;
                                            case 1184:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "unhappy_state";
                                              goto LABEL_14;
                                            case 1185:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "unhappy_level";
                                              goto LABEL_14;
                                            case 1189:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "lastLbaFormatTime";
                                              goto LABEL_14;
                                            case 1190:
                                              v21 = a1;
                                              v22 = 1190;
                                              v20 = "powerDownTime";
                                              goto LABEL_153;
                                            default:
                                              if (v7 == 1196)
                                              {
                                                v21 = a1;
                                                v22 = 1196;
                                                v20 = "poDetectGBBedTotalCost";
                                                goto LABEL_19;
                                              }
                                              if (v7 != 1197)
                                                goto LABEL_696;
                                              v21 = a1;
                                              v22 = 1197;
                                              v20 = "poDetectGBBedAge";
                                              break;
                                          }
LABEL_11:
                                          v14 = v8;
                                          v15 = 10;
                                          goto LABEL_12;
                                        }
                                        if (v7 > 1104)
                                        {
                                          if (v7 <= 1115)
                                          {
                                            if (v7 == 1105)
                                            {
                                              v21 = a1;
                                              v22 = 1105;
                                              v20 = "hostReadSequential";
                                              goto LABEL_705;
                                            }
                                            if (v7 == 1106)
                                            {
                                              v21 = a1;
                                              v22 = 1106;
                                              v20 = "GCReadSequential";
LABEL_705:
                                              v14 = v8;
                                              v15 = 14;
                                              goto LABEL_12;
                                            }
                                          }
                                          else
                                          {
                                            switch(v7)
                                            {
                                              case 1116:
                                                v21 = a1;
                                                v22 = 1116;
                                                v20 = "gcwamp";
                                                goto LABEL_155;
                                              case 1137:
                                                v18 = *v8;
                                                v16 = (_QWORD *)a1;
                                                v19 = "numOfToUnhappySwitches";
                                                goto LABEL_14;
                                              case 1138:
                                                v18 = *v8;
                                                v16 = (_QWORD *)a1;
                                                v19 = "numOfToHappySwitches";
                                                goto LABEL_14;
                                            }
                                          }
                                          goto LABEL_696;
                                        }
                                        if (v7 <= 1041)
                                        {
                                          v21 = a1;
                                          if (v7 == 1040)
                                          {
                                            v22 = 1040;
                                            v20 = "bandsAgeBinsV2";
                                          }
                                          else
                                          {
                                            v22 = 1041;
                                            v20 = "bandsAgeBinsSnapshot";
                                          }
                                          v14 = v8;
                                          v15 = 31;
                                          goto LABEL_12;
                                        }
                                        if (v7 == 1042)
                                        {
                                          v21 = a1;
                                          v22 = 1042;
                                          v20 = "bandsAgeBinsReadSectors";
                                          v14 = v8;
                                          v15 = 15;
LABEL_12:
                                          AddFieldToContext(v21, v22, v20, v14, v15);
                                          goto LABEL_15;
                                        }
                                        if (v7 == 1080)
                                        {
                                          v18 = *v8;
                                          v16 = (_QWORD *)a1;
                                          v19 = "raidForceClogLoad";
                                          goto LABEL_14;
                                        }
LABEL_696:
                                        if (v7 > 1231)
                                        {
                                          switch(v7)
                                          {
                                            case 1232:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "eanFastSize";
                                              goto LABEL_14;
                                            case 1233:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "eanNumSlcEvictions";
                                              goto LABEL_14;
                                            case 1234:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "eanNumForcedCompress";
                                              goto LABEL_14;
                                            case 1241:
                                              v21 = a1;
                                              v22 = 1241;
                                              v20 = "s2rTimeHisto";
                                              goto LABEL_11;
                                            case 1244:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "calendarTimeWentBackward";
                                              goto LABEL_14;
                                            case 1246:
                                              v21 = a1;
                                              v22 = 1246;
                                              v20 = "bandsUeccCrossTempHisto";
                                              goto LABEL_23;
                                            default:
                                              break;
                                          }
                                        }
                                        else
                                        {
                                          switch(v7)
                                          {
                                            case 1198:
                                              v21 = a1;
                                              v22 = 1198;
                                              v20 = "poDetectPERemovalMostSevereCost";
                                              goto LABEL_21;
                                            case 1199:
                                              v18 = *v8;
                                              v16 = (_QWORD *)a1;
                                              v19 = "poDetectCurrentSize";
                                              goto LABEL_14;
                                            case 1200:
                                              break;
                                            case 1201:
                                              v21 = a1;
                                              v22 = 1201;
                                              v20 = "gcVerticalSuccssfulAlignments";
                                              goto LABEL_22;
                                            case 1202:
                                              v21 = a1;
                                              v22 = 1202;
                                              v20 = "gcVerticalNoAlignmentDueToMissingSegs";
                                              goto LABEL_22;
                                            default:
                                              switch(v7)
                                              {
                                                case 1216:
                                                  v21 = a1;
                                                  v22 = 1216;
                                                  v20 = "tlcWLPerDipAvgPEC";
                                                  goto LABEL_713;
                                                case 1217:
                                                  v21 = a1;
                                                  v22 = 1217;
                                                  v20 = "tlcWLPerDipMaxPEC";
                                                  goto LABEL_713;
                                                case 1218:
                                                  v21 = a1;
                                                  v22 = 1218;
                                                  v20 = "tlcWLPerDipMinPEC";
                                                  goto LABEL_713;
                                                case 1219:
                                                case 1220:
                                                case 1221:
                                                case 1222:
                                                case 1223:
                                                  goto LABEL_15;
                                                case 1224:
                                                  v21 = a1;
                                                  v22 = 1224;
                                                  v20 = "apfsValidLbaOvershoot";
                                                  v14 = v8;
                                                  v15 = 20;
                                                  goto LABEL_12;
                                                default:
                                                  if (v7 != 1211)
                                                    goto LABEL_15;
                                                  v21 = a1;
                                                  v22 = 1211;
                                                  v20 = "forcedAllocationSmallEraseQ";
                                                  break;
                                              }
                                              goto LABEL_713;
                                          }
                                        }
LABEL_15:
                                        a2 = &v8[v10];
                                        v6 = v11 - v10;
                                        if (v11 != (_DWORD)v10)
                                          continue;
                                        return 1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
  }
}

uint64_t AddFieldToContext(uint64_t result, int a2, const char *a3, uint64_t *a4, unsigned int a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char __str[101];
  uint64_t v16;

  v7 = (_QWORD *)result;
  v16 = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  if (a2 <= 44)
  {
    switch(a2)
    {
      case 4:
        *(_QWORD *)(result + 72) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
        goto LABEL_41;
      case 7:
        *(_QWORD *)(result + 64) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 12:
        *(_QWORD *)(result + 144) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 13:
        *(_QWORD *)(result + 152) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 17:
        *(_QWORD *)(result + 88) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 18:
        *(_QWORD *)(result + 104) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 19:
        *(_QWORD *)(result + 96) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      case 20:
        *(_QWORD *)(result + 112) = v8;
        if (a5)
          goto LABEL_42;
        return result;
      default:
        if (a2 != 28)
          goto LABEL_41;
        *(_QWORD *)(result + 168) = v8;
        if (!a5)
          return result;
        goto LABEL_42;
    }
  }
  switch(a2)
  {
    case '-':
      *(_QWORD *)(result + 176) = v8;
      if (a5)
        goto LABEL_42;
      return result;
    case '.':
    case '/':
    case '6':
    case '7':
      goto LABEL_41;
    case '0':
      *(_QWORD *)(result + 80) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    case '1':
      *(_DWORD *)(result + 56) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    case '2':
      *(_DWORD *)(result + 52) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    case '3':
      *(_DWORD *)(result + 48) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    case '4':
      *(_DWORD *)(result + 44) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    case '5':
      *(_DWORD *)(result + 32) = v8;
      goto LABEL_41;
    case '8':
      *(_QWORD *)(result + 160) = v8;
      if (!a5)
        return result;
      goto LABEL_42;
    default:
      if (a2 != 265)
        goto LABEL_41;
      if (a5)
      {
        v9 = a5;
        v10 = (_QWORD *)(result + 184);
        v11 = a4;
        do
        {
          v12 = *v11++;
          *v10++ = v12;
          --v9;
        }
        while (v9);
LABEL_41:
        if (a5)
        {
LABEL_42:
          if (a5 == 1)
          {
            return AddSingleValue((_QWORD *)result, "", a3, v8);
          }
          else
          {
            v13 = 0;
            v14 = a5;
            do
            {
              snprintf(__str, 0x64uLL, "%d", v13);
              __str[100] = 0;
              result = AddSingleValue(v7, a3, __str, a4[v13++]);
            }
            while (v14 != v13);
          }
        }
      }
      return result;
  }
}

double ASPReleaseContext(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[14];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(_QWORD **)(a1 + 16);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)v4[14];
      free(v4);
      v4 = v5;
    }
    while (v5);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t ASPFTLParseBufferToCxt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  const char *v22;
  char v23;
  char __str[16];
  __int128 v25;
  uint64_t v26;

  v8 = (unint64_t *)a2;
  v10 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v11 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  v25 = 0u;
  do
  {
LABEL_2:
    if (!v11)
      return v10;
    v13 = *v8++;
    v12 = v13;
    v14 = HIDWORD(v13);
    --v11;
  }
  while (!HIDWORD(v13));
  if (v12 == 0xFFFF || v12 > 0x30000000 || v11 < v14)
    return v10;
  v17 = (v12 - 1);
  if (v17 <= 0x47)
    __asm { BR              X9 }
  v18 = (v12 - 73);
  if (v18 <= 0x46)
    __asm { BR              X9 }
  switch(v12)
  {
    case 144:
      if ((AddMultipleFieldsToGenericContext(a1, "numMemExtreme", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numMemExtreme(144) cannot add 1 element to context";
      goto LABEL_15;
    case 145:
      if ((AddMultipleFieldsToGenericContext(a1, "maxMemExtremeDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: maxMemExtremeDuration(145) cannot add 1 element to context";
      goto LABEL_15;
    case 146:
      if ((AddMultipleFieldsToGenericContext(a1, "memExtremeDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: memExtremeDuration(146) cannot add 1 element to context";
      goto LABEL_15;
    case 147:
      if ((AddMultipleFieldsToGenericContext(a1, "bandGetsExtreme", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: bandGetsExtreme(147) cannot add 1 element to context";
      goto LABEL_15;
    case 148:
      if ((AddMultipleFieldsToGenericContext(a1, "bandGetsLow", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: bandGetsLow(148) cannot add 1 element to context";
      goto LABEL_15;
    case 149:
      if ((AddMultipleFieldsToGenericContext(a1, "numHostChoke", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numHostChoke(149) cannot add 1 element to context";
      goto LABEL_15;
    case 152:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_ProgramError", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortSkip_ProgramError(152) cannot add 1 element to context";
      goto LABEL_15;
    case 153:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_ReadErrorOpenBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortSkip_ReadErrorOpenBand(153) cannot add 1 element to context";
      goto LABEL_15;
    case 154:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_FailedRebuildingParity", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortSkip_FailedRebuildingParity(154) cannot add 1 element to context";
      goto LABEL_15;
    case 155:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_OpenRefreshBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortPad_OpenRefreshBand(155) cannot add 1 element to context";
      goto LABEL_15;
    case 156:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_CloseBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortPad_CloseBands(156) cannot add 1 element to context";
      goto LABEL_15;
    case 157:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_SetPhoto", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortPad_SetPhoto(157) cannot add 1 element to context";
      goto LABEL_15;
    case 158:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_GcNoSource", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortPad_GcNoSource(158) cannot add 1 element to context";
      goto LABEL_15;
    case 159:
      if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_Format", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: AbortPad_Format(159) cannot add 1 element to context";
      goto LABEL_15;
    case 160:
      if ((AddMultipleFieldsToGenericContext(a1, "nandDiscoveryDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: nandDiscoveryDuration(160) cannot add 1 element to context";
      goto LABEL_15;
    case 161:
      if ((AddMultipleFieldsToGenericContext(a1, "coreCCEnableDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: coreCCEnableDuration(161) cannot add 1 element to context";
      goto LABEL_15;
    case 163:
      if ((AddMultipleFieldsToGenericContext(a1, "coreOpenDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: coreOpenDuration(163) cannot add 1 element to context";
      goto LABEL_15;
    case 164:
      if ((AddMultipleFieldsToGenericContext(a1, "coreWritableDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: coreWritableDuration(164) cannot add 1 element to context";
      goto LABEL_15;
    case 165:
      if ((AddMultipleFieldsToGenericContext(a1, "coreClogLoadDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: coreClogLoadDuration(165) cannot add 1 element to context";
      goto LABEL_15;
    case 167:
      if ((AddMultipleFieldsToGenericContext(a1, "bulkPFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: bulkPFail(167) cannot add 1 element to context";
      goto LABEL_15;
    case 169:
      if ((AddMultipleFieldsToGenericContext(a1, "bulkRFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: bulkRFail(169) cannot add 1 element to context";
      goto LABEL_15;
    case 172:
      if ((AddMultipleFieldsToGenericContext(a1, "raidSmartErrors", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: raidSmartErrors(172) cannot add 1 element to context";
      goto LABEL_15;
    case 182:
      if ((AddMultipleFieldsToGenericContext(a1, "internalUeccs", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: internalUeccs(182) cannot add 1 element to context";
      goto LABEL_15;
    case 183:
      if ((AddMultipleFieldsToGenericContext(a1, "e2eFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: e2eFail(183) cannot add 1 element to context";
      goto LABEL_15;
    case 184:
      if ((AddMultipleFieldsToGenericContext(a1, "TempSensorMax", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: TempSensorMax(184) cannot add 1 element to context";
      goto LABEL_15;
    case 185:
      if ((AddMultipleFieldsToGenericContext(a1, "TempSensorMin", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: TempSensorMin(185) cannot add 1 element to context";
      goto LABEL_15;
    case 186:
      if ((AddMultipleFieldsToGenericContext(a1, "powerUpFromDDR", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: powerUpFromDDR(186) cannot add 1 element to context";
      goto LABEL_15;
    case 187:
      if ((AddMultipleFieldsToGenericContext(a1, "numMemLow", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numMemLow(187) cannot add 1 element to context";
      goto LABEL_15;
    case 188:
      if ((AddMultipleFieldsToGenericContext(a1, "maxMemLowDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: maxMemLowDuration(188) cannot add 1 element to context";
      goto LABEL_15;
    case 189:
      if ((AddMultipleFieldsToGenericContext(a1, "memLowDuration", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: memLowDuration(189) cannot add 1 element to context";
      goto LABEL_15;
    case 190:
      if ((AddMultipleFieldsToGenericContext(a1, "numFences", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numFences(190) cannot add 1 element to context";
      goto LABEL_15;
    case 191:
      if ((AddMultipleFieldsToGenericContext(a1, "hostPassiveIO", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: hostPassiveIO(191) cannot add 1 element to context";
      goto LABEL_15;
    case 192:
      if ((AddMultipleFieldsToGenericContext(a1, "odtsMax", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: odtsMax(192) cannot add 1 element to context";
      goto LABEL_15;
    case 193:
      if ((AddMultipleFieldsToGenericContext(a1, "defragMFromOrphans", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: defragMFromOrphans(193) cannot add 1 element to context";
      goto LABEL_15;
    case 194:
      if ((AddMultipleFieldsToGenericContext(a1, "defragMFromFragments", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: defragMFromFragments(194) cannot add 1 element to context";
      goto LABEL_15;
    case 195:
      if ((AddMultipleFieldsToGenericContext(a1, "defragMTime", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: defragMTime(195) cannot add 1 element to context";
      goto LABEL_15;
    case 196:
      if ((AddMultipleFieldsToGenericContext(a1, "defragMMaxTime", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: defragMMaxTime(196) cannot add 1 element to context";
      goto LABEL_15;
    case 197:
      if ((AddMultipleFieldsToGenericContext(a1, "raidFailedLbaMismatch", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: raidFailedLbaMismatch(197) cannot add 1 element to context";
      goto LABEL_15;
    case 198:
      if ((AddMultipleFieldsToGenericContext(a1, "numSyscfgWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numSyscfgWrites(198) cannot add 1 element to context";
      goto LABEL_15;
    case 199:
      if ((AddMultipleFieldsToGenericContext(a1, "indmbUnitsXfer", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: indmbUnitsXfer(199) cannot add 1 element to context";
      goto LABEL_15;
    case 200:
      if ((AddMultipleFieldsToGenericContext(a1, "indmbUnitsCache", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: indmbUnitsCache(200) cannot add 1 element to context";
      goto LABEL_15;
    case 201:
      if ((AddMultipleFieldsToGenericContext(a1, "indmbUnitsInd", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: indmbUnitsInd(201) cannot add 1 element to context";
      goto LABEL_15;
    case 202:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFS_Mbytes", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFS_Mbytes(202) cannot add 1 element to context";
      goto LABEL_15;
    case 203:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_Mbytes", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheDS_Mbytes(203) cannot add 1 element to context";
      goto LABEL_15;
    case 204:
      if ((AddMultipleFieldsToGenericContext(a1, "powerOnSeconds", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: powerOnSeconds(204) cannot add 1 element to context";
      goto LABEL_15;
    case 205:
      if ((AddMultipleFieldsToGenericContext(a1, "numUnknownTokenHostRead", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numUnknownTokenHostRead(205) cannot add 1 element to context";
      goto LABEL_15;
    case 206:
      if ((AddMultipleFieldsToGenericContext(a1, "numUnmmapedTokenHostRead", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: numUnmmapedTokenHostRead(206) cannot add 1 element to context";
      goto LABEL_15;
    case 207:
      if ((_DWORD)v14 != 16)
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      if (v14 >= 0x10)
        v20 = 16;
      else
        v20 = v14;
      if ((AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)
        goto LABEL_14;
      v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): Cannot add 16 elements to context";
      goto LABEL_2228;
    case 208:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesMin", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMin(208) cannot add 1 element to context";
      goto LABEL_15;
    case 209:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesMax", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMax(209) cannot add 1 element to context";
      goto LABEL_15;
    case 210:
      if ((AddMultipleFieldsToGenericContext(a1, "prepareForShutdownFailCounter", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: prepareForShutdownFailCounter(210) cannot add 1 element to context";
      goto LABEL_15;
    case 211:
      if ((AddMultipleFieldsToGenericContext(a1, "lpsrEntry", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: lpsrEntry(211) cannot add 1 element to context";
      goto LABEL_15;
    case 212:
      if ((AddMultipleFieldsToGenericContext(a1, "lpsrExit", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: lpsrExit(212) cannot add 1 element to context";
      goto LABEL_15;
    case 213:
      if ((_DWORD)v14 != 8)
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: crcInternalReadFail(213): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      if (v14 >= 8)
        v20 = 8;
      else
        v20 = v14;
      if ((AddMultipleFieldsToGenericContext(a1, "crcInternalReadFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
        goto LABEL_14;
      v22 = "ASPFTLParseBufferToCxt: crcInternalReadFail(213): Cannot add 8 elements to context";
      goto LABEL_2228;
    case 214:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictCnt", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictCnt(214) cannot add 1 element to context";
      goto LABEL_15;
    case 215:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictSize", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictSize(215) cannot add 1 element to context";
      goto LABEL_15;
    case 216:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSWr", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheFSWr(216) cannot add 1 element to context";
      goto LABEL_15;
    case 217:
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheDSWr", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: wcacheDSWr(217) cannot add 1 element to context";
      goto LABEL_15;
    case 218:
      if ((_DWORD)v14 != 10)
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      if (v14 >= 0xA)
        v20 = 10;
      else
        v20 = v14;
      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictSizeLogDist_", (uint64_t)v8, 8u, v20) & 1) != 0)
        goto LABEL_14;
      v22 = "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): Cannot add 10 elements to context";
      goto LABEL_2228;
    case 219:
      if ((AddMultipleFieldsToGenericContext(a1, "prepareForShutdownTimeoutCounter", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: prepareForShutdownTimeoutCounter(219) cannot add 1 element to context";
      goto LABEL_15;
    case 220:
      if ((AddMultipleFieldsToGenericContext(a1, "prepareForShutdownCancelCounter", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: prepareForShutdownCancelCounter(220) cannot add 1 element to context";
      goto LABEL_15;
    case 221:
      if ((AddMultipleFieldsToGenericContext(a1, "RD_openBandCount", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: RD_openBandCount(221) cannot add 1 element to context";
      goto LABEL_15;
    case 222:
      if ((AddMultipleFieldsToGenericContext(a1, "RD_openBandNops", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: RD_openBandNops(222) cannot add 1 element to context";
      goto LABEL_15;
    case 223:
      if ((AddMultipleFieldsToGenericContext(a1, "RD_closedBandEvictCount", (uint64_t)v8, 8u, 1u) & 1) != 0)
        goto LABEL_16;
      v19 = "ASPFTLParseBufferToCxt: RD_closedBandEvictCount(223) cannot add 1 element to context";
      goto LABEL_15;
    default:
      switch(v12)
      {
        case 224:
          if ((AddMultipleFieldsToGenericContext(a1, "RD_closedBandEvictSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: RD_closedBandEvictSectors(224) cannot add 1 element to context";
          goto LABEL_15;
        case 225:
          if ((AddMultipleFieldsToGenericContext(a1, "RD_closedBandFragmentCount", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentCount(225) cannot add 1 element to context";
          goto LABEL_15;
        case 226:
          if ((AddMultipleFieldsToGenericContext(a1, "RD_closedBandFragmentSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentSectors(226) cannot add 1 element to context";
          goto LABEL_15;
        case 227:
          if ((_DWORD)v14 != 10)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0xA)
            v20 = 10;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): Cannot add 10 elements to context";
          goto LABEL_2228;
        case 228:
          if ((_DWORD)v14 != 4)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 4)
            v20 = 4;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheFSOverWrSizeByFlow_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): Cannot add 4 elements to context";
          goto LABEL_2228;
        case 229:
          if ((_DWORD)v14 != 2)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: indmbXferCountTo(229): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 2)
            v20 = 2;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "indmbXferCountTo_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: indmbXferCountTo(229): Cannot add 2 elements to context";
          goto LABEL_2228;
        case 230:
          if ((_DWORD)v14 != 2)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 2)
            v20 = 2;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "indmbAccumulatedTimeBetweenXfers_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): Cannot add 2 elements to context";
          goto LABEL_2228;
        case 231:
          if ((AddMultipleFieldsToGenericContext(a1, "maxGracefulBootTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: maxGracefulBootTimeMs(231) cannot add 1 element to context";
          goto LABEL_15;
        case 232:
          if ((AddMultipleFieldsToGenericContext(a1, "maxUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: maxUngracefulBootTimeMs(232) cannot add 1 element to context";
          goto LABEL_15;
        case 233:
          if ((AddMultipleFieldsToGenericContext(a1, "averageGracefulBootTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: averageGracefulBootTimeMs(233) cannot add 1 element to context";
          goto LABEL_15;
        case 234:
          if ((AddMultipleFieldsToGenericContext(a1, "averageUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: averageUngracefulBootTimeMs(234) cannot add 1 element to context";
          goto LABEL_15;
        case 235:
          if ((_DWORD)v14 != 8)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 8)
            v20 = 8;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "gracefulBootTimeLogMs_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): Cannot add 8 elements to context";
          goto LABEL_2228;
        case 236:
          if ((_DWORD)v14 != 8)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 8)
            v20 = 8;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "ungracefulBootTimeLogMs_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): Cannot add 8 elements to context";
          goto LABEL_2228;
        case 237:
          if ((_DWORD)v14 != 4)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: CalibrationCount(237): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 4)
            v20 = 4;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "CalibrationCount_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: CalibrationCount(237): Cannot add 4 elements to context";
          goto LABEL_2228;
        case 238:
          if ((AddMultipleFieldsToGenericContext(a1, "CalibrationLastTmp", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: CalibrationLastTmp(238) cannot add 1 element to context";
          goto LABEL_15;
        case 239:
          if ((AddMultipleFieldsToGenericContext(a1, "CalibrationMaxTmp", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: CalibrationMaxTmp(239) cannot add 1 element to context";
          goto LABEL_15;
        case 240:
          if ((AddMultipleFieldsToGenericContext(a1, "CalibrationMinTmp", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: CalibrationMinTmp(240) cannot add 1 element to context";
          goto LABEL_15;
        case 241:
          if ((AddMultipleFieldsToGenericContext(a1, "ungracefulBootWorstIndicator", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: ungracefulBootWorstIndicator(241) cannot add 1 element to context";
          goto LABEL_15;
        case 242:
          if ((AddMultipleFieldsToGenericContext(a1, "metaMismatchReread", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: metaMismatchReread(242) cannot add 1 element to context";
          goto LABEL_15;
        case 243:
          if ((AddMultipleFieldsToGenericContext(a1, "numS3SleepOps", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: numS3SleepOps(243) cannot add 1 element to context";
          goto LABEL_15;
        case 244:
          if ((AddMultipleFieldsToGenericContext(a1, "odtsCurrent", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: odtsCurrent(244) cannot add 1 element to context";
          goto LABEL_15;
        case 245:
          if ((AddMultipleFieldsToGenericContext(a1, "prefetchReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: prefetchReads(245) cannot add 1 element to context";
          goto LABEL_15;
        case 246:
          if ((AddMultipleFieldsToGenericContext(a1, "prefetchHits", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: prefetchHits(246) cannot add 1 element to context";
          goto LABEL_15;
        case 247:
          if ((AddMultipleFieldsToGenericContext(a1, "prefetchWritesInvalidation", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: prefetchWritesInvalidation(247) cannot add 1 element to context";
          goto LABEL_15;
        case 248:
          if ((AddMultipleFieldsToGenericContext(a1, "indmbUnitsTotal", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: indmbUnitsTotal(248) cannot add 1 element to context";
          goto LABEL_15;
        case 249:
          if ((AddMultipleFieldsToGenericContext(a1, "selfThrottlingEngage", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: selfThrottlingEngage(249) cannot add 1 element to context";
          goto LABEL_15;
        case 250:
          if ((AddMultipleFieldsToGenericContext(a1, "selfThrottlingDisengage", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: selfThrottlingDisengage(250) cannot add 1 element to context";
          goto LABEL_15;
        case 252:
          if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_WlpMode", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: AbortSkip_WlpMode(252) cannot add 1 element to context";
          goto LABEL_15;
        case 253:
          if ((AddMultipleFieldsToGenericContext(a1, "hostWritesWlpMode", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: hostWritesWlpMode(253) cannot add 1 element to context";
          goto LABEL_15;
        case 254:
          if ((AddMultipleFieldsToGenericContext(a1, "numClogDoubleUnc", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: numClogDoubleUnc(254) cannot add 1 element to context";
          goto LABEL_15;
        case 256:
          if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_WlpMode", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: AbortPad_WlpMode(256) cannot add 1 element to context";
          goto LABEL_15;
        case 257:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireIntermediateBandErases", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandErases(257) cannot add 1 element to context";
          goto LABEL_15;
        case 258:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireUserBandErases", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireUserBandErases(258) cannot add 1 element to context";
          goto LABEL_15;
        case 259:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireIntermediateBandProgs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandProgs(259) cannot add 1 element to context";
          goto LABEL_15;
        case 260:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireUserBandProgs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireUserBandProgs(260) cannot add 1 element to context";
          goto LABEL_15;
        case 261:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireIntermediatePageReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireIntermediatePageReads(261) cannot add 1 element to context";
          goto LABEL_15;
        case 262:
          if ((AddMultipleFieldsToGenericContext(a1, "bonfireUserPageReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bonfireUserPageReads(262) cannot add 1 element to context";
          goto LABEL_15;
        case 263:
          if ((AddMultipleFieldsToGenericContext(a1, "refreshUtil00", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: refreshUtil00(263) cannot add 1 element to context";
          goto LABEL_15;
        case 264:
          if ((AddMultipleFieldsToGenericContext(a1, "failToReadUtil00", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: failToReadUtil00(264) cannot add 1 element to context";
          goto LABEL_15;
        case 265:
          if ((_DWORD)v14 != 5)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: readCountHisto(265): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 5)
            v20 = 5;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "readCountHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: readCountHisto(265): Cannot add 5 elements to context";
          goto LABEL_2228;
        case 266:
          if ((_DWORD)v14 != 16)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: readAmpHisto(266): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0x10)
            v20 = 16;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "readAmpHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: readAmpHisto(266): Cannot add 16 elements to context";
          goto LABEL_2228;
        case 267:
          if ((AddMultipleFieldsToGenericContext(a1, "totalReadAmp", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: totalReadAmp(267) cannot add 1 element to context";
          goto LABEL_15;
        case 268:
          if ((_DWORD)v14 != 4)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: nvmeModeSelect(268): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 4)
            v20 = 4;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "nvmeModeSelect_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: nvmeModeSelect(268): Cannot add 4 elements to context";
          goto LABEL_2228;
        case 269:
          if ((_DWORD)v14 != 8)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 8)
            v20 = 8;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "numBootBlockRefreshSuccess_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): Cannot add 8 elements to context";
          goto LABEL_2228;
        case 270:
          if ((_DWORD)v14 != 8)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 8)
            v20 = 8;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "numBootBlockRefreshFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): Cannot add 8 elements to context";
          goto LABEL_2228;
        case 271:
          if ((AddMultipleFieldsToGenericContext(a1, "numUnsupportedAsi", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: numUnsupportedAsi(271) cannot add 1 element to context";
          goto LABEL_15;
        case 272:
          if ((AddMultipleFieldsToGenericContext(a1, "NumTerminatedProgramSegs", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: NumTerminatedProgramSegs(272) cannot add 1 element to context";
          goto LABEL_15;
        case 273:
          if ((AddMultipleFieldsToGenericContext(a1, "indParityPagesDrops", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: indParityPagesDrops(273) cannot add 1 element to context";
          goto LABEL_15;
        case 274:
          if ((AddMultipleFieldsToGenericContext(a1, "indFlowPrograms", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: indFlowPrograms(274) cannot add 1 element to context";
          goto LABEL_15;
        case 277:
          if ((_DWORD)v14 != 4)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: powerBudgetSelect(277): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 4)
            v20 = 4;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "powerBudgetSelect_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: powerBudgetSelect(277): Cannot add 4 elements to context";
          goto LABEL_2228;
        case 279:
          if ((AddMultipleFieldsToGenericContext(a1, "RxBurnNandWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: RxBurnNandWrites(279) cannot add 1 element to context";
          goto LABEL_15;
        case 280:
          if ((_DWORD)v14 != 12)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0xC)
            v20 = 12;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "E2EDPErrorCounters_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): Cannot add 12 elements to context";
          goto LABEL_2228;
        case 281:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheSectorsMax", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheSectorsMax(281) cannot add 1 element to context";
          goto LABEL_15;
        case 282:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheSectorsMin", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheSectorsMin(282) cannot add 1 element to context";
          goto LABEL_15;
        case 283:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheSectorsCur", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheSectorsCur(283) cannot add 1 element to context";
          goto LABEL_15;
        case 284:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsMax", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMax(284) cannot add 1 element to context";
          goto LABEL_15;
        case 285:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsMin", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMin(285) cannot add 1 element to context";
          goto LABEL_15;
        case 286:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsCur", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsCur(286) cannot add 1 element to context";
          goto LABEL_15;
        case 287:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheFS_Reads", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheFS_Reads(287) cannot add 1 element to context";
          goto LABEL_15;
        case 288:
          if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_Reads", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: wcacheDS_Reads(288) cannot add 1 element to context";
          goto LABEL_15;
        case 289:
          if ((_DWORD)v14 != 32)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0x20)
            v20 = 32;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockReadFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): Cannot add 32 elements to context";
          goto LABEL_2228;
        case 290:
          if ((_DWORD)v14 != 32)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0x20)
            v20 = 32;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockProgFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): Cannot add 32 elements to context";
          goto LABEL_2228;
        case 291:
          if ((_DWORD)v14 != 32)
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          if (v14 >= 0x20)
            v20 = 32;
          else
            v20 = v14;
          if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockEraseFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
            goto LABEL_14;
          v22 = "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): Cannot add 32 elements to context";
          goto LABEL_2228;
        case 292:
          if ((AddMultipleFieldsToGenericContext(a1, "bandsRefreshedOnError", (uint64_t)v8, 8u, 1u) & 1) != 0)
            goto LABEL_16;
          v19 = "ASPFTLParseBufferToCxt: bandsRefreshedOnError(292) cannot add 1 element to context";
          goto LABEL_15;
        default:
          switch(v12)
          {
            case 298:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostReads(298): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostReads_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostReads(298): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 299:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostReadXacts(299): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostReadXacts_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostReadXacts(299): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 300:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostWrites(300): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostWrites_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostWrites(300): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 301:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostWriteXacts(301): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostWriteXacts_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostWriteXacts(301): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 302:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostNumFlushes(302): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostNumFlushes_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostNumFlushes(302): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 303:
              if ((_DWORD)v14 != 2)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostNumFences(303): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 2)
                v20 = 2;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "perHostNumFences_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: perHostNumFences(303): Cannot add 2 elements to context";
              goto LABEL_2228;
            case 304:
              if ((_DWORD)v14 != 10)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0xA)
                v20 = 10;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "commitPadSectorsPerFlow_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): Cannot add 10 elements to context";
              goto LABEL_2228;
            case 305:
              if ((_DWORD)v14 != 10)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0xA)
                v20 = 10;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "wcacheDSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): Cannot add 10 elements to context";
              goto LABEL_2228;
            case 306:
              if ((_DWORD)v14 != 4)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 4)
                v20 = 4;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "wcacheDSOverWrSizeByFlow_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): Cannot add 4 elements to context";
              goto LABEL_2228;
            case 307:
              if ((_DWORD)v14 != 10)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0xA)
                v20 = 10;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "CmdRaisePrioiryEvents_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): Cannot add 10 elements to context";
              goto LABEL_2228;
            case 308:
              if ((AddMultipleFieldsToGenericContext(a1, "utilNumVerification", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: utilNumVerification(308) cannot add 1 element to context";
              goto LABEL_15;
            case 309:
              if ((AddMultipleFieldsToGenericContext(a1, "utilRefreshes", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: utilRefreshes(309) cannot add 1 element to context";
              goto LABEL_15;
            case 310:
              if ((AddMultipleFieldsToGenericContext(a1, "utilBDRErrors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: utilBDRErrors(310) cannot add 1 element to context";
              goto LABEL_15;
            case 311:
              if ((AddMultipleFieldsToGenericContext(a1, "indBandsPerFlow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: indBandsPerFlow(311) cannot add 1 element to context";
              goto LABEL_15;
            case 312:
              if ((AddMultipleFieldsToGenericContext(a1, "secsPerIndFlow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: secsPerIndFlow(312) cannot add 1 element to context";
              goto LABEL_15;
            case 313:
              if ((AddMultipleFieldsToGenericContext(a1, "indDecodedECC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: indDecodedECC(313) cannot add 1 element to context";
              goto LABEL_15;
            case 314:
              if ((_DWORD)v14 != 8)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 8)
                v20 = 8;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "numBootBlockValidateSuccess_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): Cannot add 8 elements to context";
              goto LABEL_2228;
            case 315:
              if ((_DWORD)v14 != 8)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 8)
                v20 = 8;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "numBootBlockValidateFail_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): Cannot add 8 elements to context";
              goto LABEL_2228;
            case 316:
              if ((_DWORD)v14 != 4)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 4)
                v20 = 4;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "clogPagesFillingPercentage_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): Cannot add 4 elements to context";
              goto LABEL_2228;
            case 317:
              if ((AddMultipleFieldsToGenericContext(a1, "bdrCalTimeAccFactor", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: bdrCalTimeAccFactor(317) cannot add 1 element to context";
              goto LABEL_15;
            case 318:
              if ((AddMultipleFieldsToGenericContext(a1, "bootChainRdError", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: bootChainRdError(318) cannot add 1 element to context";
              goto LABEL_15;
            case 319:
              if ((AddMultipleFieldsToGenericContext(a1, "bootChainBlankError", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: bootChainBlankError(319) cannot add 1 element to context";
              goto LABEL_15;
            case 320:
              if ((AddMultipleFieldsToGenericContext(a1, "bootChainRefreshError", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: bootChainRefreshError(320) cannot add 1 element to context";
              goto LABEL_15;
            case 321:
              if ((AddMultipleFieldsToGenericContext(a1, "bootChainVersionError", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: bootChainVersionError(321) cannot add 1 element to context";
              goto LABEL_15;
            case 322:
              if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockMismatch", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: mspBootBlockMismatch(322) cannot add 1 element to context";
              goto LABEL_15;
            case 323:
              if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockMismatchErr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: mspBootBlockMismatchErr(323) cannot add 1 element to context";
              goto LABEL_15;
            case 324:
              if ((_DWORD)v14 != 5)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipAddr(324): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 5)
                v20 = 5;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bitflipAddr_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bitflipAddr(324): Cannot add 5 elements to context";
              goto LABEL_2228;
            case 325:
              if ((_DWORD)v14 != 5)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipCount(325): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 5)
                v20 = 5;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bitflipCount_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bitflipCount(325): Cannot add 5 elements to context";
              goto LABEL_2228;
            case 326:
              if ((_DWORD)v14 != 5)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipDupes(326): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 5)
                v20 = 5;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bitflipDupes_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bitflipDupes(326): Cannot add 5 elements to context";
              goto LABEL_2228;
            case 327:
              if ((_DWORD)v14 != 22)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x16)
                v20 = 22;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bandsMaxTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): Cannot add 22 elements to context";
              goto LABEL_2228;
            case 328:
              if ((_DWORD)v14 != 22)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsMinTempHisto(328): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x16)
                v20 = 22;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bandsMinTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): Cannot add 22 elements to context";
              goto LABEL_2228;
            case 329:
              if ((_DWORD)v14 != 30)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x1E)
                v20 = 30;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bandsLifeTimeTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): Cannot add 30 elements to context";
              goto LABEL_2228;
            case 330:
              if ((_DWORD)v14 != 22)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x16)
                v20 = 22;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bandsDeltaTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): Cannot add 22 elements to context";
              goto LABEL_2228;
            case 331:
              if ((_DWORD)v14 != 45)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): (#45) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x2D)
                v20 = 45;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "bandsCrossTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): Cannot add 45 elements to context";
              goto LABEL_2228;
            case 332:
              if ((_DWORD)v14 != 10)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0xA)
                v20 = 10;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "wcacheWaitLogMs_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): Cannot add 10 elements to context";
              goto LABEL_2228;
            case 333:
              if ((_DWORD)v14 != 10)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0xA)
                v20 = 10;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_segsSortedLogSize_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): Cannot add 10 elements to context";
              goto LABEL_2228;
            case 334:
              if ((AddMultipleFieldsToGenericContext(a1, "numFirmwareWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: numFirmwareWrites(334) cannot add 1 element to context";
              goto LABEL_15;
            case 335:
              if ((AddMultipleFieldsToGenericContext(a1, "numBisWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: numBisWrites(335) cannot add 1 element to context";
              goto LABEL_15;
            case 336:
              if ((AddMultipleFieldsToGenericContext(a1, "numBootChainUpdates", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: numBootChainUpdates(336) cannot add 1 element to context";
              goto LABEL_15;
            case 337:
              if ((AddMultipleFieldsToGenericContext(a1, "cntCalTimeWentBackWard", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: cntCalTimeWentBackWard(337) cannot add 1 element to context";
              goto LABEL_15;
            case 338:
              if ((AddMultipleFieldsToGenericContext(a1, "indBoRecoveries", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: indBoRecoveries(338) cannot add 1 element to context";
              goto LABEL_15;
            case 340:
              if ((AddMultipleFieldsToGenericContext(a1, "numCrossTempUecc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: numCrossTempUecc(340) cannot add 1 element to context";
              goto LABEL_15;
            case 341:
              if ((AddMultipleFieldsToGenericContext(a1, "latencyMonitorError", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: latencyMonitorError(341) cannot add 1 element to context";
              goto LABEL_15;
            case 343:
              if ((AddMultipleFieldsToGenericContext(a1, "utilUeccReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: utilUeccReads(343) cannot add 1 element to context";
              goto LABEL_15;
            case 344:
              if ((AddMultipleFieldsToGenericContext(a1, "numOfAvoidedGCDueToTemp", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: numOfAvoidedGCDueToTemp(344) cannot add 1 element to context";
              goto LABEL_15;
            case 345:
              if ((AddMultipleFieldsToGenericContext(a1, "forceShutdowns", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: forceShutdowns(345) cannot add 1 element to context";
              goto LABEL_15;
            case 346:
              if ((AddMultipleFieldsToGenericContext(a1, "gcSlcDestinations", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: gcSlcDestinations(346) cannot add 1 element to context";
              goto LABEL_15;
            case 347:
              if ((AddMultipleFieldsToGenericContext(a1, "indReplayExtUsed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: indReplayExtUsed(347) cannot add 1 element to context";
              goto LABEL_15;
            case 348:
              if ((AddMultipleFieldsToGenericContext(a1, "defectsPerPackageOverflow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: defectsPerPackageOverflow(348) cannot add 1 element to context";
              goto LABEL_15;
            case 349:
              if ((AddMultipleFieldsToGenericContext(a1, "RxBurnIntBandsProgrammed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: RxBurnIntBandsProgrammed(349) cannot add 1 element to context";
              goto LABEL_15;
            case 350:
              if ((AddMultipleFieldsToGenericContext(a1, "RxBurnUsrBandsProgrammed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: RxBurnUsrBandsProgrammed(350) cannot add 1 element to context";
              goto LABEL_15;
            case 351:
              if ((AddMultipleFieldsToGenericContext(a1, "RxBurnIntNandWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: RxBurnIntNandWrites(351) cannot add 1 element to context";
              goto LABEL_15;
            case 352:
              if ((AddMultipleFieldsToGenericContext(a1, "RxBurnUsrNandWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: RxBurnUsrNandWrites(352) cannot add 1 element to context";
              goto LABEL_15;
            case 353:
              if ((AddMultipleFieldsToGenericContext(a1, "clogLastStripeUeccs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: clogLastStripeUeccs(353) cannot add 1 element to context";
              goto LABEL_15;
            case 354:
              if ((AddMultipleFieldsToGenericContext(a1, "GC_MidDestSrcSwitchSLC2TLC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchSLC2TLC(354) cannot add 1 element to context";
              goto LABEL_15;
            case 355:
              if ((AddMultipleFieldsToGenericContext(a1, "GC_MidDestSrcSwitchTLC2SLC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchTLC2SLC(355) cannot add 1 element to context";
              goto LABEL_15;
            case 356:
              if ((AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host0_normal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_normal(356) cannot add 1 element to context";
              goto LABEL_15;
            case 357:
              if ((AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host1_normal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_normal(357) cannot add 1 element to context";
              goto LABEL_15;
            case 358:
              if ((AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host0_s2r", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_s2r(358) cannot add 1 element to context";
              goto LABEL_15;
            case 359:
              if ((AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host1_s2r", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_s2r(359) cannot add 1 element to context";
              goto LABEL_15;
            case 360:
              if ((_DWORD)v14 != 16)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x10)
                v20 = 16;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "gcPDusterIntrSrcValidityHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): Cannot add 16 elements to context";
              goto LABEL_2228;
            case 361:
              if ((_DWORD)v14 != 16)
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              if (v14 >= 0x10)
                v20 = 16;
              else
                v20 = v14;
              if ((AddMultipleFieldsToGenericContext(a1, "gcPDusterUserSrcValidityHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)
                goto LABEL_14;
              v22 = "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): Cannot add 16 elements to context";
              goto LABEL_2228;
            case 362:
              if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadParity", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: raidFailedReadParity(362) cannot add 1 element to context";
              goto LABEL_15;
            case 364:
              if ((AddMultipleFieldsToGenericContext(a1, "lhotNumSkipes", (uint64_t)v8, 8u, 1u) & 1) != 0)
                goto LABEL_16;
              v19 = "ASPFTLParseBufferToCxt: lhotNumSkipes(364) cannot add 1 element to context";
              goto LABEL_15;
            default:
              switch(v12)
              {
                case 365:
                  if ((AddMultipleFieldsToGenericContext(a1, "lhotNumIsHotCalls", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: lhotNumIsHotCalls(365) cannot add 1 element to context";
                  goto LABEL_15;
                case 366:
                  if ((AddMultipleFieldsToGenericContext(a1, "lhotFullLap", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: lhotFullLap(366) cannot add 1 element to context";
                  goto LABEL_15;
                case 367:
                  if ((AddMultipleFieldsToGenericContext(a1, "lhotSkipPrecent", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: lhotSkipPrecent(367) cannot add 1 element to context";
                  goto LABEL_15;
                case 368:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendEvents", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendEvents(368) cannot add 1 element to context";
                  goto LABEL_15;
                case 369:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendedStatuses", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendedStatuses(369) cannot add 1 element to context";
                  goto LABEL_15;
                case 370:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendedBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendedBands(370) cannot add 1 element to context";
                  goto LABEL_15;
                case 371:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendSituationsBelowThreshold", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsBelowThreshold(371) cannot add 1 element to context";
                  goto LABEL_15;
                case 372:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendSituationsAboveThreshold", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsAboveThreshold(372) cannot add 1 element to context";
                  goto LABEL_15;
                case 373:
                  if ((AddMultipleFieldsToGenericContext(a1, "eraseSuspendReadChainsProcessed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: eraseSuspendReadChainsProcessed(373) cannot add 1 element to context";
                  goto LABEL_15;
                case 374:
                  if ((AddMultipleFieldsToGenericContext(a1, "bdrLastDoneHr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: bdrLastDoneHr(374) cannot add 1 element to context";
                  goto LABEL_15;
                case 375:
                  if ((AddMultipleFieldsToGenericContext(a1, "bdrBackupThreshHrs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: bdrBackupThreshHrs(375) cannot add 1 element to context";
                  goto LABEL_15;
                case 376:
                  if ((AddMultipleFieldsToGenericContext(a1, "clogPortableProgBufs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: clogPortableProgBufs(376) cannot add 1 element to context";
                  goto LABEL_15;
                case 377:
                  if ((AddMultipleFieldsToGenericContext(a1, "clogPortableDropBufs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: clogPortableDropBufs(377) cannot add 1 element to context";
                  goto LABEL_15;
                case 378:
                  if ((AddMultipleFieldsToGenericContext(a1, "clogPortablePadSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: clogPortablePadSectors(378) cannot add 1 element to context";
                  goto LABEL_15;
                case 379:
                  if ((AddMultipleFieldsToGenericContext(a1, "numRetiredBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: numRetiredBlocks(379) cannot add 1 element to context";
                  goto LABEL_15;
                case 381:
                  if ((AddMultipleFieldsToGenericContext(a1, "numRefreshOnErrNandRefreshPerf", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshPerf(381) cannot add 1 element to context";
                  goto LABEL_15;
                case 382:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidReconstructReads(382) cannot add 1 element to context";
                  goto LABEL_15;
                case 383:
                  if ((AddMultipleFieldsToGenericContext(a1, "gcReadsNoBlog", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: gcReadsNoBlog(383) cannot add 1 element to context";
                  goto LABEL_15;
                case 384:
                  if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXReadVerifyClosedBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyClosedBand(384) cannot add 1 element to context";
                  goto LABEL_15;
                case 385:
                  if ((AddMultipleFieldsToGenericContext(a1, "openBandReadFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: openBandReadFail(385) cannot add 1 element to context";
                  goto LABEL_15;
                case 386:
                  if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXReadVerifyOpenBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyOpenBand(386) cannot add 1 element to context";
                  goto LABEL_15;
                case 387:
                  if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_MBPXFailedRebuildingParity", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: AbortSkip_MBPXFailedRebuildingParity(387) cannot add 1 element to context";
                  goto LABEL_15;
                case 388:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulPMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionInternal(388) cannot add 1 element to context";
                  goto LABEL_15;
                case 389:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulPMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionHost(389) cannot add 1 element to context";
                  goto LABEL_15;
                case 390:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedPMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionInternal(390) cannot add 1 element to context";
                  goto LABEL_15;
                case 391:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedPMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionHost(391) cannot add 1 element to context";
                  goto LABEL_15;
                case 392:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionInternal(392) cannot add 1 element to context";
                  goto LABEL_15;
                case 393:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionHost(393) cannot add 1 element to context";
                  goto LABEL_15;
                case 394:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedRMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionInternal(394) cannot add 1 element to context";
                  goto LABEL_15;
                case 395:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedRMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionHost(395) cannot add 1 element to context";
                  goto LABEL_15;
                case 396:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadParityInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadParityInternal(396) cannot add 1 element to context";
                  goto LABEL_15;
                case 397:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadQParityInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadQParityInternal(397) cannot add 1 element to context";
                  goto LABEL_15;
                case 398:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadQParity", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadQParity(398) cannot add 1 element to context";
                  goto LABEL_15;
                case 399:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadQCopy", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadQCopy(399) cannot add 1 element to context";
                  goto LABEL_15;
                case 400:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReconstructionQParity", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReconstructionQParity(400) cannot add 1 element to context";
                  goto LABEL_15;
                case 401:
                  if ((AddMultipleFieldsToGenericContext(a1, "offlineBlocksCnt", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: offlineBlocksCnt(401) cannot add 1 element to context";
                  goto LABEL_15;
                case 402:
                  if ((AddMultipleFieldsToGenericContext(a1, "bork0Revectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: bork0Revectors(402) cannot add 1 element to context";
                  goto LABEL_15;
                case 403:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadBlog", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadBlog(403) cannot add 1 element to context";
                  goto LABEL_15;
                case 404:
                  if ((AddMultipleFieldsToGenericContext(a1, "numReliabilityRefreshes", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: numReliabilityRefreshes(404) cannot add 1 element to context";
                  goto LABEL_15;
                case 405:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadQCopyInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedReadQCopyInternal(405) cannot add 1 element to context";
                  goto LABEL_15;
                case 406:
                  if ((_DWORD)v14 != 5)
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  if (v14 >= 5)
                    v20 = 5;
                  else
                    v20 = v14;
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessFlow_", (uint64_t)v8, 8u, v20) & 1) != 0)
                    goto LABEL_14;
                  v22 = "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): Cannot add 5 elements to context";
                  goto LABEL_2228;
                case 407:
                  if ((_DWORD)v14 != 5)
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  if (v14 >= 5)
                    v20 = 5;
                  else
                    v20 = v14;
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailFlow_", (uint64_t)v8, 8u, v20) & 1) != 0)
                    goto LABEL_14;
                  v22 = "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): Cannot add 5 elements to context";
                  goto LABEL_2228;
                case 408:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailP", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailP(408) cannot add 1 element to context";
                  goto LABEL_15;
                case 409:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailQ", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailQ(409) cannot add 1 element to context";
                  goto LABEL_15;
                case 410:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailUECC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailUECC(410) cannot add 1 element to context";
                  goto LABEL_15;
                case 411:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailUnsupp", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailUnsupp(411) cannot add 1 element to context";
                  goto LABEL_15;
                case 412:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidUECCOpenBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidUECCOpenBand(412) cannot add 1 element to context";
                  goto LABEL_15;
                case 414:
                  if ((AddMultipleFieldsToGenericContext(a1, "ueccReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: ueccReads(414) cannot add 1 element to context";
                  goto LABEL_15;
                case 416:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulVerify", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulVerify(416) cannot add 1 element to context";
                  goto LABEL_15;
                case 417:
                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedVerify", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: raidFailedVerify(417) cannot add 1 element to context";
                  goto LABEL_15;
                case 418:
                  if ((AddMultipleFieldsToGenericContext(a1, "numBandsVerified", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: numBandsVerified(418) cannot add 1 element to context";
                  goto LABEL_15;
                case 419:
                  if ((AddMultipleFieldsToGenericContext(a1, "cache_heads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: cache_heads(419) cannot add 1 element to context";
                  goto LABEL_15;
                case 420:
                  if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_RMXtoMPBX", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: AbortSkip_RMXtoMPBX(420) cannot add 1 element to context";
                  goto LABEL_15;
                case 421:
                  if ((AddMultipleFieldsToGenericContext(a1, "s3eFwVer", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: s3eFwVer(421) cannot add 1 element to context";
                  goto LABEL_15;
                case 422:
                  if ((AddMultipleFieldsToGenericContext(a1, "readVerifyNative", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: readVerifyNative(422) cannot add 1 element to context";
                  goto LABEL_15;
                case 423:
                  if ((AddMultipleFieldsToGenericContext(a1, "reducedReadVerifyNative", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: reducedReadVerifyNative(423) cannot add 1 element to context";
                  goto LABEL_15;
                case 424:
                  if ((AddMultipleFieldsToGenericContext(a1, "readVerifySlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: readVerifySlc(424) cannot add 1 element to context";
                  goto LABEL_15;
                case 425:
                  if ((AddMultipleFieldsToGenericContext(a1, "reducedReadVerifySlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: reducedReadVerifySlc(425) cannot add 1 element to context";
                  goto LABEL_15;
                case 426:
                  if ((AddMultipleFieldsToGenericContext(a1, "RxBurnEvictions", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: RxBurnEvictions(426) cannot add 1 element to context";
                  goto LABEL_15;
                case 427:
                  if ((AddMultipleFieldsToGenericContext(a1, "directToTLCBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: directToTLCBands(427) cannot add 1 element to context";
                  goto LABEL_15;
                case 428:
                  if ((AddMultipleFieldsToGenericContext(a1, "nandDesc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: nandDesc(428) cannot add 1 element to context";
                  goto LABEL_15;
                case 429:
                  if ((AddMultipleFieldsToGenericContext(a1, "fwUpdatesPercentUsed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: fwUpdatesPercentUsed(429) cannot add 1 element to context";
                  goto LABEL_15;
                case 430:
                  if ((AddMultipleFieldsToGenericContext(a1, "slcPercentUsed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: slcPercentUsed(430) cannot add 1 element to context";
                  goto LABEL_15;
                case 431:
                  if ((AddMultipleFieldsToGenericContext(a1, "percentUsed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                    goto LABEL_16;
                  v19 = "ASPFTLParseBufferToCxt: percentUsed(431) cannot add 1 element to context";
                  goto LABEL_15;
                default:
                  switch(v12)
                  {
                    case 432:
                      if ((AddMultipleFieldsToGenericContext(a1, "hostAutoWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: hostAutoWrites(432) cannot add 1 element to context";
                      goto LABEL_15;
                    case 433:
                      if ((AddMultipleFieldsToGenericContext(a1, "hostAutoWriteXacts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: hostAutoWriteXacts(433) cannot add 1 element to context";
                      goto LABEL_15;
                    case 434:
                      if ((AddMultipleFieldsToGenericContext(a1, "gcDestDynamic", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: gcDestDynamic(434) cannot add 1 element to context";
                      goto LABEL_15;
                    case 435:
                      if ((AddMultipleFieldsToGenericContext(a1, "gcDestStatic", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: gcDestStatic(435) cannot add 1 element to context";
                      goto LABEL_15;
                    case 436:
                      if ((AddMultipleFieldsToGenericContext(a1, "gcDestWearlevel", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: gcDestWearlevel(436) cannot add 1 element to context";
                      goto LABEL_15;
                    case 437:
                      if ((AddMultipleFieldsToGenericContext(a1, "gcDestParity", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: gcDestParity(437) cannot add 1 element to context";
                      goto LABEL_15;
                    case 438:
                      if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_Format", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: AbortSkip_Format(438) cannot add 1 element to context";
                      goto LABEL_15;
                    case 440:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidSLCPadding", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidSLCPadding(440) cannot add 1 element to context";
                      goto LABEL_15;
                    case 441:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidGCBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidGCBands(441) cannot add 1 element to context";
                      goto LABEL_15;
                    case 442:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidGCSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidGCSectors(442) cannot add 1 element to context";
                      goto LABEL_15;
                    case 443:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidGCPadding", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidGCPadding(443) cannot add 1 element to context";
                      goto LABEL_15;
                    case 444:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidSLCBandsPerHostFlow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidSLCBandsPerHostFlow(444) cannot add 1 element to context";
                      goto LABEL_15;
                    case 445:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidSLCSecsPerHostFlow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidSLCSecsPerHostFlow(445) cannot add 1 element to context";
                      goto LABEL_15;
                    case 446:
                      if ((AddMultipleFieldsToGenericContext(a1, "rxBurnMinCycleRuns", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: rxBurnMinCycleRuns(446) cannot add 1 element to context";
                      goto LABEL_15;
                    case 447:
                      if ((AddMultipleFieldsToGenericContext(a1, "clogNumFastCxt", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: clogNumFastCxt(447) cannot add 1 element to context";
                      goto LABEL_15;
                    case 448:
                      if ((AddMultipleFieldsToGenericContext(a1, "clogNumRapidReboots", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: clogNumRapidReboots(448) cannot add 1 element to context";
                      goto LABEL_15;
                    case 449:
                      if ((AddMultipleFieldsToGenericContext(a1, "clogFastCxtAbvThr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: clogFastCxtAbvThr(449) cannot add 1 element to context";
                      goto LABEL_15;
                    case 450:
                      if ((AddMultipleFieldsToGenericContext(a1, "rxBurnDiffModeRuns", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: rxBurnDiffModeRuns(450) cannot add 1 element to context";
                      goto LABEL_15;
                    case 452:
                      if ((AddMultipleFieldsToGenericContext(a1, "indReadVerifyFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: indReadVerifyFail(452) cannot add 1 element to context";
                      goto LABEL_15;
                    case 453:
                      if ((_DWORD)v14 != 16)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x10)
                        v20 = 16;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerReadLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): Cannot add 16 elements to context";
                      goto LABEL_2228;
                    case 454:
                      if ((_DWORD)v14 != 16)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x10)
                        v20 = 16;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerWriteLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): Cannot add 16 elements to context";
                      goto LABEL_2228;
                    case 456:
                      if ((_DWORD)v14 != 10)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcFifoDepth(456): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0xA)
                        v20 = 10;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "slcFifoDepth_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: slcFifoDepth(456): Cannot add 10 elements to context";
                      goto LABEL_2228;
                    case 457:
                      if ((AddMultipleFieldsToGenericContext(a1, "wcacheSectorsDirtyIdle", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: wcacheSectorsDirtyIdle(457) cannot add 1 element to context";
                      goto LABEL_15;
                    case 458:
                      if ((AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsDirtyIdle", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsDirtyIdle(458) cannot add 1 element to context";
                      goto LABEL_15;
                    case 459:
                      if ((AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesDirtyIdle", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesDirtyIdle(459) cannot add 1 element to context";
                      goto LABEL_15;
                    case 460:
                      if ((_DWORD)v14 != 256)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): (#256) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x100)
                        v20 = 256;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "CacheDepthVsThroughput_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): Cannot add 256 elements to context";
                      goto LABEL_2228;
                    case 461:
                      if ((AddMultipleFieldsToGenericContext(a1, "directToTLCSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: directToTLCSectors(461) cannot add 1 element to context";
                      goto LABEL_15;
                    case 462:
                      if ((AddMultipleFieldsToGenericContext(a1, "fallbackToWaterfall", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: fallbackToWaterfall(462) cannot add 1 element to context";
                      goto LABEL_15;
                    case 463:
                      if ((_DWORD)v14 != 11)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0xB)
                        v20 = 11;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "balanceProportionBucketsHistogram_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): Cannot add 11 elements to context";
                      goto LABEL_2228;
                    case 464:
                      if ((AddMultipleFieldsToGenericContext(a1, "lockToTlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: lockToTlc(464) cannot add 1 element to context";
                      goto LABEL_15;
                    case 465:
                      if ((_DWORD)v14 != 10)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: burstSizeHistogram(465): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0xA)
                        v20 = 10;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "burstSizeHistogram_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: burstSizeHistogram(465): Cannot add 10 elements to context";
                      goto LABEL_2228;
                    case 466:
                      if ((_DWORD)v14 != 64)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: qosDirectToTLC(466): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x40)
                        v20 = 64;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "qosDirectToTLC_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: qosDirectToTLC(466): Cannot add 64 elements to context";
                      goto LABEL_2228;
                    case 467:
                      if ((_DWORD)v14 != 4)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 4)
                        v20 = 4;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "maxQosDirectToTLC_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): Cannot add 4 elements to context";
                      goto LABEL_2228;
                    case 468:
                      if ((_DWORD)v14 != 16)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x10)
                        v20 = 16;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "wcacheDirtyAtFlush_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): Cannot add 16 elements to context";
                      goto LABEL_2228;
                    case 469:
                      if ((_DWORD)v14 != 2)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 2)
                        v20 = 2;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): Cannot add 2 elements to context";
                      goto LABEL_2228;
                    case 470:
                      if ((_DWORD)v14 != 2)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 2)
                        v20 = 2;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): Cannot add 2 elements to context";
                      goto LABEL_2228;
                    case 471:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidUncleanBootBandFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidUncleanBootBandFail(471) cannot add 1 element to context";
                      goto LABEL_15;
                    case 472:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowHost(472) cannot add 1 element to context";
                      goto LABEL_15;
                    case 473:
                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowGC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowGC(473) cannot add 1 element to context";
                      goto LABEL_15;
                    case 476:
                      if ((_DWORD)v14 != 2)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 2)
                        v20 = 2;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRecoLbaRange_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): Cannot add 2 elements to context";
                      goto LABEL_2228;
                    case 477:
                      if ((_DWORD)v14 != 2)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 2)
                        v20 = 2;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "raidFailedRecoLbaRange_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): Cannot add 2 elements to context";
                      goto LABEL_2228;
                    case 481:
                      if ((_DWORD)v14 != 32)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: skinnyBandErases_481(481): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x20)
                        v20 = 32;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandErases_481_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): Cannot add 32 elements to context";
                      goto LABEL_2228;
                    case 483:
                      if ((AddMultipleFieldsToGenericContext(a1, "tlcOverHeatWaterfall", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: tlcOverHeatWaterfall(483) cannot add 1 element to context";
                      goto LABEL_15;
                    case 484:
                      if ((AddMultipleFieldsToGenericContext(a1, "skinnyCyclesConvert", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: skinnyCyclesConvert(484) cannot add 1 element to context";
                      goto LABEL_15;
                    case 485:
                      if ((AddMultipleFieldsToGenericContext(a1, "non_proportional_directToTLCSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: non_proportional_directToTLCSectors(485) cannot add 1 element to context";
                      goto LABEL_15;
                    case 486:
                      if ((AddMultipleFieldsToGenericContext(a1, "maxFailedFastCxtSync", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: maxFailedFastCxtSync(486) cannot add 1 element to context";
                      goto LABEL_15;
                    case 487:
                      if ((AddMultipleFieldsToGenericContext(a1, "numFormatUserArea", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: numFormatUserArea(487) cannot add 1 element to context";
                      goto LABEL_15;
                    case 488:
                      if ((AddMultipleFieldsToGenericContext(a1, "clogFastCxtSyncAborted", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: clogFastCxtSyncAborted(488) cannot add 1 element to context";
                      goto LABEL_15;
                    case 489:
                      if ((_DWORD)v14 != 5)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogOccupationSectors(489): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 5)
                        v20 = 5;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "clogOccupationSectors_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: clogOccupationSectors(489): Cannot add 5 elements to context";
                      goto LABEL_2228;
                    case 490:
                      if ((_DWORD)v14 != 64)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bdrTmpHist(490): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 0x40)
                        v20 = 64;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "bdrTmpHist_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: bdrTmpHist(490): Cannot add 64 elements to context";
                      goto LABEL_2228;
                    case 491:
                      if ((AddMultipleFieldsToGenericContext(a1, "numFWUpdates", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: numFWUpdates(491) cannot add 1 element to context";
                      goto LABEL_15;
                    case 492:
                      if ((AddMultipleFieldsToGenericContext(a1, "numClogLoadFails", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: numClogLoadFails(492) cannot add 1 element to context";
                      goto LABEL_15;
                    case 493:
                      if ((AddMultipleFieldsToGenericContext(a1, "rxBurnNumForcedDiffMode", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: rxBurnNumForcedDiffMode(493) cannot add 1 element to context";
                      goto LABEL_15;
                    case 494:
                      if ((AddMultipleFieldsToGenericContext(a1, "RD_numSaves", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: RD_numSaves(494) cannot add 1 element to context";
                      goto LABEL_15;
                    case 495:
                      if ((AddMultipleFieldsToGenericContext(a1, "eanCompressWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: eanCompressWrites(495) cannot add 1 element to context";
                      goto LABEL_15;
                    case 496:
                      if ((AddMultipleFieldsToGenericContext(a1, "eanHostWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: eanHostWrites(496) cannot add 1 element to context";
                      goto LABEL_15;
                    case 497:
                      if ((AddMultipleFieldsToGenericContext(a1, "bandPreErases", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: bandPreErases(497) cannot add 1 element to context";
                      goto LABEL_15;
                    case 498:
                      if ((AddMultipleFieldsToGenericContext(a1, "eanHostUnmaps", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: eanHostUnmaps(498) cannot add 1 element to context";
                      goto LABEL_15;
                    case 499:
                      if ((AddMultipleFieldsToGenericContext(a1, "eanHostFlushes", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: eanHostFlushes(499) cannot add 1 element to context";
                      goto LABEL_15;
                    case 500:
                      if ((AddMultipleFieldsToGenericContext(a1, "eanFastWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: eanFastWrites(500) cannot add 1 element to context";
                      goto LABEL_15;
                    case 501:
                      if ((AddMultipleFieldsToGenericContext(a1, "autowriteDS2FSCollisions", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: autowriteDS2FSCollisions(501) cannot add 1 element to context";
                      goto LABEL_15;
                    case 502:
                      if ((AddMultipleFieldsToGenericContext(a1, "autowriteWaitTransferTaskBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: autowriteWaitTransferTaskBlocks(502) cannot add 1 element to context";
                      goto LABEL_15;
                    case 503:
                      if ((_DWORD)v14 != 2)
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: avgCycle(503): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      if (v14 >= 2)
                        v20 = 2;
                      else
                        v20 = v14;
                      if ((AddMultipleFieldsToGenericContext(a1, "avgCycle_", (uint64_t)v8, 8u, v20) & 1) != 0)
                        goto LABEL_14;
                      v22 = "ASPFTLParseBufferToCxt: avgCycle(503): Cannot add 2 elements to context";
                      goto LABEL_2228;
                    case 504:
                      if ((AddMultipleFieldsToGenericContext(a1, "RD_DeferredClearsOverflowCnt", (uint64_t)v8, 8u, 1u) & 1) != 0)
                        goto LABEL_16;
                      v19 = "ASPFTLParseBufferToCxt: RD_DeferredClearsOverflowCnt(504) cannot add 1 element to context";
                      goto LABEL_15;
                    default:
                      switch(v12)
                      {
                        case 505:
                          if ((AddMultipleFieldsToGenericContext(a1, "maxVerticsInBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: maxVerticsInBand(505) cannot add 1 element to context";
                          goto LABEL_15;
                        case 506:
                          if ((AddMultipleFieldsToGenericContext(a1, "numVertics", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: numVertics(506) cannot add 1 element to context";
                          goto LABEL_15;
                        case 507:
                          if ((AddMultipleFieldsToGenericContext(a1, "exceededCVertics", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: exceededCVertics(507) cannot add 1 element to context";
                          goto LABEL_15;
                        case 510:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailMismatch", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidReconstructFailMismatch(510) cannot add 1 element to context";
                          goto LABEL_15;
                        case 511:
                          if ((_DWORD)v14 != 32)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0x20)
                            v20 = 32;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "mspbootBlockRefreshCnt_", (uint64_t)v8, 8u, v20) & 1) != 0)
                            goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): Cannot add 32 elements to context";
                          goto LABEL_2228;
                        case 516:
                          if ((_DWORD)v14 != 32)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0x20)
                            v20 = 32;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockRefreshTime_", (uint64_t)v8, 8u, v20) & 1) != 0)
                            goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): Cannot add 32 elements to context";
                          goto LABEL_2228;
                        case 517:
                          if ((AddMultipleFieldsToGenericContext(a1, "mspBootBlockCountPerMsp", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: mspBootBlockCountPerMsp(517) cannot add 1 element to context";
                          goto LABEL_15;
                        case 518:
                          if ((AddMultipleFieldsToGenericContext(a1, "skinnyRevectorSLC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: skinnyRevectorSLC(518) cannot add 1 element to context";
                          goto LABEL_15;
                        case 519:
                          if ((AddMultipleFieldsToGenericContext(a1, "skinnyRevectorTLC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: skinnyRevectorTLC(519) cannot add 1 element to context";
                          goto LABEL_15;
                        case 520:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfSetupAttempts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfSetupAttempts(520) cannot add 1 element to context";
                          goto LABEL_15;
                        case 521:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfSetupSuccesses", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfSetupSuccesses(521) cannot add 1 element to context";
                          goto LABEL_15;
                        case 522:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfWriteAttempts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfWriteAttempts(522) cannot add 1 element to context";
                          goto LABEL_15;
                        case 523:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfWriteSuccesses", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfWriteSuccesses(523) cannot add 1 element to context";
                          goto LABEL_15;
                        case 524:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfReadAttempts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfReadAttempts(524) cannot add 1 element to context";
                          goto LABEL_15;
                        case 525:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfReadSuccesses", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfReadSuccesses(525) cannot add 1 element to context";
                          goto LABEL_15;
                        case 526:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfCleanupAttempts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfCleanupAttempts(526) cannot add 1 element to context";
                          goto LABEL_15;
                        case 527:
                          if ((AddMultipleFieldsToGenericContext(a1, "perfCleanupSuccesses", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: perfCleanupSuccesses(527) cannot add 1 element to context";
                          goto LABEL_15;
                        case 530:
                          if ((AddMultipleFieldsToGenericContext(a1, "firstFailedDieId", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: firstFailedDieId(530) cannot add 1 element to context";
                          goto LABEL_15;
                        case 531:
                          if ((AddMultipleFieldsToGenericContext(a1, "numDieFailures", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: numDieFailures(531) cannot add 1 element to context";
                          goto LABEL_15;
                        case 532:
                          if ((AddMultipleFieldsToGenericContext(a1, "spareAvailablePercent", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: spareAvailablePercent(532) cannot add 1 element to context";
                          goto LABEL_15;
                        case 533:
                          if ((AddMultipleFieldsToGenericContext(a1, "dataFabricErr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: dataFabricErr(533) cannot add 1 element to context";
                          goto LABEL_15;
                        case 534:
                          if ((AddMultipleFieldsToGenericContext(a1, "downlinkFabricErr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: downlinkFabricErr(534) cannot add 1 element to context";
                          goto LABEL_15;
                        case 535:
                          if ((AddMultipleFieldsToGenericContext(a1, "prpAccTimeoutErr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: prpAccTimeoutErr(535) cannot add 1 element to context";
                          goto LABEL_15;
                        case 537:
                          if ((AddMultipleFieldsToGenericContext(a1, "uplinkFabricErr", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: uplinkFabricErr(537) cannot add 1 element to context";
                          goto LABEL_15;
                        case 538:
                          if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandsGBB", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: skinnyBandsGBB(538) cannot add 1 element to context";
                          goto LABEL_15;
                        case 539:
                          if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_GcMustPadBand", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadBand(539) cannot add 1 element to context";
                          goto LABEL_15;
                        case 540:
                          if ((AddMultipleFieldsToGenericContext(a1, "AbortPad_GcMustPadSkinny", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadSkinny(540) cannot add 1 element to context";
                          goto LABEL_15;
                        case 541:
                          if ((AddMultipleFieldsToGenericContext(a1, "bdrHostPingInitial", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: bdrHostPingInitial(541) cannot add 1 element to context";
                          goto LABEL_15;
                        case 542:
                          if ((AddMultipleFieldsToGenericContext(a1, "bdrHostPingMoreNeeded", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: bdrHostPingMoreNeeded(542) cannot add 1 element to context";
                          goto LABEL_15;
                        case 543:
                          if ((AddMultipleFieldsToGenericContext(a1, "bandParityAllocationFailed", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: bandParityAllocationFailed(543) cannot add 1 element to context";
                          goto LABEL_15;
                        case 544:
                          if ((AddMultipleFieldsToGenericContext(a1, "fastHwBurstToSlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: fastHwBurstToSlc(544) cannot add 1 element to context";
                          goto LABEL_15;
                        case 545:
                          if ((AddMultipleFieldsToGenericContext(a1, "slowHwToTlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: slowHwToTlc(545) cannot add 1 element to context";
                          goto LABEL_15;
                        case 546:
                          if ((_DWORD)v14 != 10)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0xA)
                            v20 = 10;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstSizeDetected_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): Cannot add 10 elements to context";
                          goto LABEL_2228;
                        case 547:
                          if ((_DWORD)v14 != 10)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstDur(547): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0xA)
                            v20 = 10;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstDur_", (uint64_t)v8, 8u, v20) & 1) != 0)
                            goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): Cannot add 10 elements to context";
                          goto LABEL_2228;
                        case 548:
                          if ((AddMultipleFieldsToGenericContext(a1, "fastHwToTlcBurst", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: fastHwToTlcBurst(548) cannot add 1 element to context";
                          goto LABEL_15;
                        case 549:
                          if ((_DWORD)v14 != 10)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0xA)
                            v20 = 10;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstSizeSlc_", (uint64_t)v8, 8u, v20) & 1) != 0)
                            goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): Cannot add 10 elements to context";
                          goto LABEL_2228;
                        case 551:
                          if ((_DWORD)v14 != 11)
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          if (v14 >= 0xB)
                            v20 = 11;
                          else
                            v20 = v14;
                          if ((AddMultipleFieldsToGenericContext(a1, "balanceProportionBucketsHistogramTlc_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                          v22 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): Cannot add 11 elements to context";
                          goto LABEL_2228;
                        case 553:
                          if ((AddMultipleFieldsToGenericContext(a1, "slowHwFlushToSlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: slowHwFlushToSlc(553) cannot add 1 element to context";
                          goto LABEL_15;
                        case 557:
                          if ((AddMultipleFieldsToGenericContext(a1, "slowHwToSlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: slowHwToSlc(557) cannot add 1 element to context";
                          goto LABEL_15;
                        case 558:
                          if ((AddMultipleFieldsToGenericContext(a1, "flushNwToSlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: flushNwToSlc(558) cannot add 1 element to context";
                          goto LABEL_15;
                        case 559:
                          if ((AddMultipleFieldsToGenericContext(a1, "flushNwToTlc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: flushNwToTlc(559) cannot add 1 element to context";
                          goto LABEL_15;
                        case 560:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcHw", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcHw(560) cannot add 1 element to context";
                          goto LABEL_15;
                        case 561:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcTransitions", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcTransitions(561) cannot add 1 element to context";
                          goto LABEL_15;
                        case 563:
                          if ((AddMultipleFieldsToGenericContext(a1, "slcDemandFlushCount", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: slcDemandFlushCount(563) cannot add 1 element to context";
                          goto LABEL_15;
                        case 564:
                          if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstCount", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: slcDemandBurstCount(564) cannot add 1 element to context";
                          goto LABEL_15;
                        case 565:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcBaseAvgPE", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcBaseAvgPE(565) cannot add 1 element to context";
                          goto LABEL_15;
                        case 566:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailNoSPBX", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidReconstructFailNoSPBX(566) cannot add 1 element to context";
                          goto LABEL_15;
                        case 567:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailDouble", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidReconstructFailDouble(567) cannot add 1 element to context";
                          goto LABEL_15;
                        case 568:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcFastWAmpUOnOff", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcFastWAmpUOnOff(568) cannot add 1 element to context";
                          goto LABEL_15;
                        case 569:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcSlowWAmpUOnOff", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcSlowWAmpUOnOff(569) cannot add 1 element to context";
                          goto LABEL_15;
                        case 570:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailInvalid", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidReconstructFailInvalid(570) cannot add 1 element to context";
                          goto LABEL_15;
                        case 572:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcLastWAmpUx10", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcLastWAmpUx10(572) cannot add 1 element to context";
                          goto LABEL_15;
                        case 573:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidFailedReadNoBlog", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidFailedReadNoBlog(573) cannot add 1 element to context";
                          goto LABEL_15;
                        case 574:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBlank", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBlank(574) cannot add 1 element to context";
                          goto LABEL_15;
                        case 575:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcHotTLCOnOff", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcHotTLCOnOff(575) cannot add 1 element to context";
                          goto LABEL_15;
                        case 576:
                          if ((AddMultipleFieldsToGenericContext(a1, "gcVPackDestinations", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: gcVPackDestinations(576) cannot add 1 element to context";
                          goto LABEL_15;
                        case 581:
                          if ((AddMultipleFieldsToGenericContext(a1, "averageTLCPECycles", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: averageTLCPECycles(581) cannot add 1 element to context";
                          goto LABEL_15;
                        case 582:
                          if ((AddMultipleFieldsToGenericContext(a1, "averageSLCPECycles", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: averageSLCPECycles(582) cannot add 1 element to context";
                          goto LABEL_15;
                        case 583:
                          if ((AddMultipleFieldsToGenericContext(a1, "numAtomicBoots", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: numAtomicBoots(583) cannot add 1 element to context";
                          goto LABEL_15;
                        case 584:
                          if ((AddMultipleFieldsToGenericContext(a1, "clogMinorMismatch", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: clogMinorMismatch(584) cannot add 1 element to context";
                          goto LABEL_15;
                        case 586:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidExpectedFailRMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionInternal(586) cannot add 1 element to context";
                          goto LABEL_15;
                        case 587:
                          if ((AddMultipleFieldsToGenericContext(a1, "raidExpectedFailRMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionHost(587) cannot add 1 element to context";
                          goto LABEL_15;
                        case 588:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcGCinvalidations", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcGCinvalidations(588) cannot add 1 element to context";
                          goto LABEL_15;
                        case 589:
                          if ((AddMultipleFieldsToGenericContext(a1, "oslcGCActivateReason", (uint64_t)v8, 8u, 1u) & 1) != 0)
                            goto LABEL_16;
                          v19 = "ASPFTLParseBufferToCxt: oslcGCActivateReason(589) cannot add 1 element to context";
                          goto LABEL_15;
                        default:
                          switch(v12)
                          {
                            case 590:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcLowCleanBandsUOnOff", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcLowCleanBandsUOnOff(590) cannot add 1 element to context";
                              goto LABEL_15;
                            case 591:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcTooManyGCMustOnOff", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcTooManyGCMustOnOff(591) cannot add 1 element to context";
                              goto LABEL_15;
                            case 592:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcBaseHostWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcBaseHostWrites(592) cannot add 1 element to context";
                              goto LABEL_15;
                            case 593:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcBaseBandErases", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcBaseBandErases(593) cannot add 1 element to context";
                              goto LABEL_15;
                            case 594:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcBdrBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcBdrBands(594) cannot add 1 element to context";
                              goto LABEL_15;
                            case 595:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcBdrValid", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcBdrValid(595) cannot add 1 element to context";
                              goto LABEL_15;
                            case 596:
                              if ((AddMultipleFieldsToGenericContext(a1, "unexpectedBlanks", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: unexpectedBlanks(596) cannot add 1 element to context";
                              goto LABEL_15;
                            case 597:
                              if ((AddMultipleFieldsToGenericContext(a1, "unexpectedBlanksOnRV", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: unexpectedBlanksOnRV(597) cannot add 1 element to context";
                              goto LABEL_15;
                            case 601:
                              if ((AddMultipleFieldsToGenericContext(a1, "waterfallLockSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: waterfallLockSectors(601) cannot add 1 element to context";
                              goto LABEL_15;
                            case 602:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcGCActiveWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcGCActiveWrites(602) cannot add 1 element to context";
                              goto LABEL_15;
                            case 603:
                              if ((AddMultipleFieldsToGenericContext(a1, "chipIdTemperatureSample", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: chipIdTemperatureSample(603) cannot add 1 element to context";
                              goto LABEL_15;
                            case 604:
                              if ((AddMultipleFieldsToGenericContext(a1, "gcVPackWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: gcVPackWrites(604) cannot add 1 element to context";
                              goto LABEL_15;
                            case 605:
                              if ((_DWORD)v14 != 10)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcActiveReasons(605): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 0xA)
                                v20 = 10;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "gcActiveReasons_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: gcActiveReasons(605): Cannot add 10 elements to context";
                              goto LABEL_2228;
                            case 606:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanMaxInitTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanMaxInitTimeMs(606) cannot add 1 element to context";
                              goto LABEL_15;
                            case 607:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanMinToFirstReadTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanMinToFirstReadTimeMs(607) cannot add 1 element to context";
                              goto LABEL_15;
                            case 608:
                              if ((AddMultipleFieldsToGenericContext(a1, "skinnyAPGMRetire", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: skinnyAPGMRetire(608) cannot add 1 element to context";
                              goto LABEL_15;
                            case 609:
                              if ((AddMultipleFieldsToGenericContext(a1, "unexpectedBlanksHost", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: unexpectedBlanksHost(609) cannot add 1 element to context";
                              goto LABEL_15;
                            case 610:
                              if ((_DWORD)v14 != 64)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: pcieAerCounters(610): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 0x40)
                                v20 = 64;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "pcieAerCounters_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: pcieAerCounters(610): Cannot add 64 elements to context";
                              goto LABEL_2228;
                            case 611:
                              if ((AddMultipleFieldsToGenericContext(a1, "fastHwToTlcBalance", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: fastHwToTlcBalance(611) cannot add 1 element to context";
                              goto LABEL_15;
                            case 612:
                              if ((AddMultipleFieldsToGenericContext(a1, "perfOSLCRuns", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: perfOSLCRuns(612) cannot add 1 element to context";
                              goto LABEL_15;
                            case 613:
                              if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInGC", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInGC(613) cannot add 1 element to context";
                              goto LABEL_15;
                            case 614:
                              if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInTT", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInTT(614) cannot add 1 element to context";
                              goto LABEL_15;
                            case 615:
                              if ((AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInNRP", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInNRP(615) cannot add 1 element to context";
                              goto LABEL_15;
                            case 616:
                              if ((AddMultipleFieldsToGenericContext(a1, "perfTotalDmaMb", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: perfTotalDmaMb(616) cannot add 1 element to context";
                              goto LABEL_15;
                            case 617:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanAvgInitTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanAvgInitTimeMs(617) cannot add 1 element to context";
                              goto LABEL_15;
                            case 618:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanAvgToFirstReadTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanAvgToFirstReadTimeMs(618) cannot add 1 element to context";
                              goto LABEL_15;
                            case 619:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanMaxBootReadTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanMaxBootReadTimeMs(619) cannot add 1 element to context";
                              goto LABEL_15;
                            case 620:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanAvgBootReadTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanAvgBootReadTimeMs(620) cannot add 1 element to context";
                              goto LABEL_15;
                            case 621:
                              if ((_DWORD)v14 != 10)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanBootReadsHist(621): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 0xA)
                                v20 = 10;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "eanBootReadsHist_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: eanBootReadsHist(621): Cannot add 10 elements to context";
                              goto LABEL_2228;
                            case 622:
                              if ((AddMultipleFieldsToGenericContext(a1, "maxBgInitTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: maxBgInitTimeMs(622) cannot add 1 element to context";
                              goto LABEL_15;
                            case 623:
                              if ((AddMultipleFieldsToGenericContext(a1, "avgBgInitTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: avgBgInitTimeMs(623) cannot add 1 element to context";
                              goto LABEL_15;
                            case 624:
                              if ((_DWORD)v14 != 16)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogFailReason(624): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 0x10)
                                v20 = 16;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "clogFailReason_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: clogFailReason(624): Cannot add 16 elements to context";
                              goto LABEL_2228;
                            case 625:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanMinBootReadMBPerSec", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanMinBootReadMBPerSec(625) cannot add 1 element to context";
                              goto LABEL_15;
                            case 626:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanAvgBootReadMBPerSec", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanAvgBootReadMBPerSec(626) cannot add 1 element to context";
                              goto LABEL_15;
                            case 627:
                              if ((AddMultipleFieldsToGenericContext(a1, "minSkinnyPECycles", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: minSkinnyPECycles(627) cannot add 1 element to context";
                              goto LABEL_15;
                            case 628:
                              if ((AddMultipleFieldsToGenericContext(a1, "maxSkinnyPECycles", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: maxSkinnyPECycles(628) cannot add 1 element to context";
                              goto LABEL_15;
                            case 629:
                              if ((AddMultipleFieldsToGenericContext(a1, "averageSkinnyPECycles", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: averageSkinnyPECycles(629) cannot add 1 element to context";
                              goto LABEL_15;
                            case 630:
                              if ((_DWORD)v14 != 6)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 6)
                                v20 = 6;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRecoEAN_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): Cannot add 6 elements to context";
                              goto LABEL_2228;
                            case 631:
                              if ((_DWORD)v14 != 6)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 6)
                                v20 = 6;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "raidFailedRecoEAN_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): Cannot add 6 elements to context";
                              goto LABEL_2228;
                            case 632:
                              if ((_DWORD)v14 != 6)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanFirstReadMode(632): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 6)
                                v20 = 6;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "eanFirstReadMode_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: eanFirstReadMode(632): Cannot add 6 elements to context";
                              goto LABEL_2228;
                            case 635:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcHwGC", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcHwGC(635) cannot add 1 element to context";
                              goto LABEL_15;
                            case 636:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcHwTT", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcHwTT(636) cannot add 1 element to context";
                              goto LABEL_15;
                            case 637:
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcHwNRP", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: oslcHwNRP(637) cannot add 1 element to context";
                              goto LABEL_15;
                            case 638:
                              if ((_DWORD)v14 != 10)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 0xA)
                                v20 = 10;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcDemandBurstSize_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): Cannot add 10 elements to context";
                              goto LABEL_2228;
                            case 639:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessBandFlowOslc", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessBandFlowOslc(639) cannot add 1 element to context";
                              goto LABEL_15;
                            case 640:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowOslc", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowOslc(640) cannot add 1 element to context";
                              goto LABEL_15;
                            case 641:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidFailSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidFailSectors(641) cannot add 1 element to context";
                              goto LABEL_15;
                            case 642:
                              if ((AddMultipleFieldsToGenericContext(a1, "eanFailSectors", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: eanFailSectors(642) cannot add 1 element to context";
                              goto LABEL_15;
                            case 643:
                              if ((AddMultipleFieldsToGenericContext(a1, "bdrTimeMode", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: bdrTimeMode(643) cannot add 1 element to context";
                              goto LABEL_15;
                            case 644:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityNotSavedP", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityNotSavedP(644) cannot add 1 element to context";
                              goto LABEL_15;
                            case 645:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityNotSavedQ", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityNotSavedQ(645) cannot add 1 element to context";
                              goto LABEL_15;
                            case 646:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityInvalid", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityInvalid(646) cannot add 1 element to context";
                              goto LABEL_15;
                            case 647:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityUnknown", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityUnknown(647) cannot add 1 element to context";
                              goto LABEL_15;
                            case 648:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityUnmapped", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityUnmapped(648) cannot add 1 element to context";
                              goto LABEL_15;
                            case 649:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidParityGCUnc", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidParityGCUnc(649) cannot add 1 element to context";
                              goto LABEL_15;
                            case 657:
                              if ((AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXProbational", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXProbational(657) cannot add 1 element to context";
                              goto LABEL_15;
                            case 659:
                              if ((AddMultipleFieldsToGenericContext(a1, "raidVerificationReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: raidVerificationReads(659) cannot add 1 element to context";
                              goto LABEL_15;
                            case 666:
                              if ((AddMultipleFieldsToGenericContext(a1, "nofDies", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: nofDies(666) cannot add 1 element to context";
                              goto LABEL_15;
                            case 671:
                              if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandsNum", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: skinnyBandsNum(671) cannot add 1 element to context";
                              goto LABEL_15;
                            case 672:
                              if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandsNumDips", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: skinnyBandsNumDips(672) cannot add 1 element to context";
                              goto LABEL_15;
                            case 674:
                              if ((_DWORD)v14 != 8)
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: oslcNoVotesHw(674): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              if (v14 >= 8)
                                v20 = 8;
                              else
                                v20 = v14;
                              if ((AddMultipleFieldsToGenericContext(a1, "oslcNoVotesHw_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                goto LABEL_14;
                              v22 = "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): Cannot add 8 elements to context";
                              goto LABEL_2228;
                            case 675:
                              if ((AddMultipleFieldsToGenericContext(a1, "totalLbas", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: totalLbas(675) cannot add 1 element to context";
                              goto LABEL_15;
                            case 676:
                              if ((AddMultipleFieldsToGenericContext(a1, "bdrHostPingExtra", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: bdrHostPingExtra(676) cannot add 1 element to context";
                              goto LABEL_15;
                            case 677:
                              if ((AddMultipleFieldsToGenericContext(a1, "magazineInstanceMeta", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                goto LABEL_16;
                              v19 = "ASPFTLParseBufferToCxt: magazineInstanceMeta(677) cannot add 1 element to context";
                              goto LABEL_15;
                            default:
                              switch(v12)
                              {
                                case 680:
                                  if ((_DWORD)v14 != 3)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: magazineFWVersion(680): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 3)
                                    v20 = 3;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "magazineFWVersion_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: magazineFWVersion(680): Cannot add 3 elements to context";
                                  goto LABEL_2228;
                                case 681:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailPMXUnsup", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailPMXUnsup(681) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 682:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXUnsup", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUnsup(682) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 683:
                                  if ((AddMultipleFieldsToGenericContext(a1, "iBootNANDResets", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: iBootNANDResets(683) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 684:
                                  if ((AddMultipleFieldsToGenericContext(a1, "pcieClkreqHighTimeout", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: pcieClkreqHighTimeout(684) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 687:
                                  if ((_DWORD)v14 != 3)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrInitSent(687): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 3)
                                    v20 = 3;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrInitSent_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cbdrInitSent(687): Cannot add 3 elements to context";
                                  goto LABEL_2228;
                                case 688:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrPauseSent", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrPauseSent(688) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 689:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrResumeSent", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrResumeSent(689) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 690:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrGetResultSent", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrGetResultSent(690) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 691:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrEarlyExits", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrEarlyExits(691) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 694:
                                  if ((_DWORD)v14 != 10)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 0xA)
                                    v20 = 10;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrRefreshGrades_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): Cannot add 10 elements to context";
                                  goto LABEL_2228;
                                case 695:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrNotEnoughReads", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrNotEnoughReads(695) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 696:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrAborts", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrAborts(696) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 697:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidHostClassifications", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidHostClassifications(697) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 698:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidInternalClassifications", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidInternalClassifications(698) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 699:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrFullyDone", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrFullyDone(699) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 702:
                                  if ((_DWORD)v14 != 32)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: vcurve(702): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 0x20)
                                    v20 = 32;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "vcurve_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: vcurve(702): Cannot add 32 elements to context";
                                  goto LABEL_2228;
                                case 703:
                                  if ((_DWORD)v14 != 12)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: injDepth(703): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 0xC)
                                    v20 = 12;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "injDepth_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: injDepth(703): Cannot add 12 elements to context";
                                  goto LABEL_2228;
                                case 704:
                                  if ((AddMultipleFieldsToGenericContext(a1, "logical_disk_occupied_promiles", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: logical_disk_occupied_promiles(704) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 711:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidPrevFailedReconstructSkip", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructSkip(711) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 712:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidSuccessfulHostAuxReads", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulHostAuxReads(712) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 713:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidSuccessfulInternalAuxReads", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulInternalAuxReads(713) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 714:
                                  if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationReliabilityHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityHost(714) cannot add 1"
                                        " element to context";
                                  goto LABEL_15;
                                case 715:
                                  if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationReliabilityInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityInternal(715) cannot a"
                                        "dd 1 element to context";
                                  goto LABEL_15;
                                case 716:
                                  if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationQualityHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityHost(716) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 717:
                                  if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationQualityInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityInternal(717) cannot add 1"
                                        " element to context";
                                  goto LABEL_15;
                                case 719:
                                  if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandErases", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: skinnyBandErases(719) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 721:
                                  if ((AddMultipleFieldsToGenericContext(a1, "gcPDusterDestinations", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: gcPDusterDestinations(721) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 722:
                                  if ((AddMultipleFieldsToGenericContext(a1, "gcPDusterWrites", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: gcPDusterWrites(722) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 730:
                                  if ((AddMultipleFieldsToGenericContext(a1, "rvFails", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: rvFails(730) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 737:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidFailedHostAuxReads", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidFailedHostAuxReads(737) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 738:
                                  if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidFailedInternalAuxReads", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: TurboRaidFailedInternalAuxReads(738) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 741:
                                  if ((AddMultipleFieldsToGenericContext(a1, "autoSkipTriggers", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: autoSkipTriggers(741) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 742:
                                  if ((AddMultipleFieldsToGenericContext(a1, "autoSkipPlanes", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: autoSkipPlanes(742) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 744:
                                  if ((_DWORD)v14 != 8)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 8)
                                    v20 = 8;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructDurationHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): Cannot add 8 elements to context";
                                  goto LABEL_2228;
                                case 745:
                                  if ((_DWORD)v14 != 8)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 8)
                                    v20 = 8;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "failsOnReconstructHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): Cannot add 8 elements to context";
                                  goto LABEL_2228;
                                case 746:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_userFlattenExcessive", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_userFlattenExcessive(746) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 747:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_IntFlattenExcessive", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_IntFlattenExcessive(747) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 748:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_userFlattenBalance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_userFlattenBalance(748) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 749:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_intFlattenBalance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_intFlattenBalance(749) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 750:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_formatVertExcessive", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_formatVertExcessive(750) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 751:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_formatVertBalance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_formatVertBalance(751) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 753:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrNumSlowRefreshes", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrNumSlowRefreshes(753) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 754:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrNumFastRefreshes", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrNumFastRefreshes(754) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 755:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrTotalRefreshValidity", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrTotalRefreshValidity(755) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 756:
                                  if ((_DWORD)v14 != 9)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 9)
                                    v20 = 9;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrRefreshedAges_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): Cannot add 9 elements to context";
                                  goto LABEL_2228;
                                case 758:
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrSkippedBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: cbdrSkippedBlocks(758) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 759:
                                  if ((_DWORD)v14 != 5)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrScanPct(759): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 5)
                                    v20 = 5;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrScanPct_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cbdrScanPct(759): Cannot add 5 elements to context";
                                  goto LABEL_2228;
                                case 760:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulBMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionInternal(760) cannot add "
                                        "1 element to context";
                                  goto LABEL_15;
                                case 761:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulBMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionHost(761) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 762:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedBMXReconstructionInternal", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionInternal(762) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 763:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidFailedBMXReconstructionHost", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionHost(763) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 764:
                                  if ((AddMultipleFieldsToGenericContext(a1, "ricSPRVFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: ricSPRVFail(764) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 765:
                                  if ((AddMultipleFieldsToGenericContext(a1, "ricMPRVFail", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: ricMPRVFail(765) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 768:
                                  if ((_DWORD)v14 != 9)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 9)
                                    v20 = 9;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cbdrRefreshedAgesSLC_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): Cannot add 9 elements to context";
                                  goto LABEL_2228;
                                case 770:
                                  if ((_DWORD)v14 != 8)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: cpuBurstLength(770): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 8)
                                    v20 = 8;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "cpuBurstLength_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: cpuBurstLength(770): Cannot add 8 elements to context";
                                  goto LABEL_2228;
                                case 771:
                                  if ((AddMultipleFieldsToGenericContext(a1, "autoSkipRaidRecoFail", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: autoSkipRaidRecoFail(771) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 772:
                                  if ((_DWORD)v14 != 32)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc(772): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 0x20)
                                    v20 = 32;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc(772): Cannot add 32 elements to context";
                                  goto LABEL_2228;
                                case 773:
                                  if ((_DWORD)v14 != 32)
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc(773): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  if (v14 >= 0x20)
                                    v20 = 32;
                                  else
                                    v20 = v14;
                                  if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                    goto LABEL_14;
                                  v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc(773): Cannot add 32 elements to context";
                                  goto LABEL_2228;
                                case 774:
                                  if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXAbort", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXAbort(774) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 775:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_fatBindingNoBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_fatBindingNoBlocks(775) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 776:
                                  if ((AddMultipleFieldsToGenericContext(a1, "bandKill_fatBindingFewBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: bandKill_fatBindingFewBlocks(776) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 777:
                                  if ((AddMultipleFieldsToGenericContext(a1, "numBadBootBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: numBadBootBlocks(777) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 778:
                                  if ((AddMultipleFieldsToGenericContext(a1, "snapshotCPUHigh", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                    goto LABEL_16;
                                  v19 = "ASPFTLParseBufferToCxt: snapshotCPUHigh(778) cannot add 1 element to context";
                                  goto LABEL_15;
                                default:
                                  switch(v12)
                                  {
                                    case 779:
                                      if ((AddMultipleFieldsToGenericContext(a1, "snapshotCPULow", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: snapshotCPULow(779) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 780:
                                      if ((AddMultipleFieldsToGenericContext(a1, "gcWithoutBMs", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: gcWithoutBMs(780) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 781:
                                      if ((_DWORD)v14 != 10)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0xA)
                                        v20 = 10;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "gcSearchTimeHistory_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): Cannot add 10 elements to context";
                                      goto LABEL_2228;
                                    case 785:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcSearchPortion(785): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "gcSearchPortion_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: gcSearchPortion(785): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 786:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBmxMp", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBmxMp(786) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 787:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBmx", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBmx(787) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 788:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXUECC", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUECC(788) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 789:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXBlank", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXBlank(789) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 790:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidPrevFailedReconstructBmxMpSkip", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructBmxMpSkip(790) cannot add 1"
                                            " element to context";
                                      goto LABEL_15;
                                    case 792:
                                      if ((AddMultipleFieldsToGenericContext(a1, "numTLCFatBands", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: numTLCFatBands(792) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 793:
                                      if ((AddMultipleFieldsToGenericContext(a1, "fatValidity", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: fatValidity(793) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 794:
                                      if ((AddMultipleFieldsToGenericContext(a1, "fatTotal", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: fatTotal(794) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 798:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailP(798): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailP_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                        goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailP(798): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 799:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailUECC(799): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailUECC_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 804:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailNoSPBX_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 806:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailBlank(806): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailBlank_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 809:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailUnsup_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 811:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailMpSkip_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 812:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailAbort(812): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailAbort_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 813:
                                      if ((AddMultipleFieldsToGenericContext(a1, "TurboRaidIsEnabled", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: TurboRaidIsEnabled(813) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 814:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailOther(814): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXFailOther_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXFailOther(814): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 815:
                                      if ((_DWORD)v14 != 4)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXSuccess(815): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 4)
                                        v20 = 4;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidBMXSuccess_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: raidBMXSuccess(815): Cannot add 4 elements to context";
                                      goto LABEL_2228;
                                    case 816:
                                      if ((AddMultipleFieldsToGenericContext(a1, "skinnyBandsExtraDip", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: skinnyBandsExtraDip(816) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 821:
                                      if ((AddMultipleFieldsToGenericContext(a1, "writeAmp", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: writeAmp(821) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 822:
                                      if ((AddMultipleFieldsToGenericContext(a1, "ricMaxClogOnlyPages", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: ricMaxClogOnlyPages(822) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 823:
                                      if ((_DWORD)v14 != 3)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 3)
                                        v20 = 3;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "readClassifyStatusesHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): Cannot add 3 elements to context";
                                      goto LABEL_2228;
                                    case 824:
                                      if ((_DWORD)v14 != 10)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0xA)
                                        v20 = 10;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "readWithAuxStatusesHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): Cannot add 10 elements to context";
                                      goto LABEL_2228;
                                    case 825:
                                      if ((_DWORD)v14 != 10)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0xA)
                                        v20 = 10;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "readReconstructStatusesHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): Cannot add 10 ele"
                                            "ments to context";
                                      goto LABEL_2228;
                                    case 826:
                                      if ((AddMultipleFieldsToGenericContext(a1, "bdrBackupChecks", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: bdrBackupChecks(826) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 827:
                                      if ((AddMultipleFieldsToGenericContext(a1, "ricExceedClogOnlyPagesTH", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: ricExceedClogOnlyPagesTH(827) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 828:
                                      if ((AddMultipleFieldsToGenericContext(a1, "numDipFailures", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: numDipFailures(828) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 862:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidSuccessfulSkip", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidSuccessfulSkip(862) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 863:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidFailedSkip", (uint64_t)v8, 8u, 1u) & 1) != 0)
                                        goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidFailedSkip(863) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 864:
                                      if ((AddMultipleFieldsToGenericContext(a1, "raidSkipAttempts", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: raidSkipAttempts(864) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 865:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 866:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerReadLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): Cannot add 16 ele"
                                            "ments to context";
                                      goto LABEL_2228;
                                    case 867:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerWriteLevel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): Cannot add 16 el"
                                            "ements to context";
                                      goto LABEL_2228;
                                    case 868:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_1bc_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 869:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_1bc_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 870:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_1bc_he_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 871:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_1bc_he_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 876:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_mbc_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 877:
                                      if ((_DWORD)v14 != 32)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x20)
                                        v20 = 32;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_mbc_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): Cannot add 32 elements to context";
                                      goto LABEL_2228;
                                    case 883:
                                      if ((AddMultipleFieldsToGenericContext(a1, "clogEmptyProgramms", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: clogEmptyProgramms(883) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 884:
                                      if ((AddMultipleFieldsToGenericContext(a1, "oslcHwCloseBand", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: oslcHwCloseBand(884) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 891:
                                      if ((_DWORD)v14 != 2)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 2)
                                        v20 = 2;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidSuccessAuxPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): Cannot add 2 elements to context";
                                      goto LABEL_2228;
                                    case 892:
                                      if ((_DWORD)v14 != 2)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 2)
                                        v20 = 2;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidFailAuxPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): Cannot add 2 elements to context";
                                      goto LABEL_2228;
                                    case 893:
                                      if ((_DWORD)v14 != 2)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 2)
                                        v20 = 2;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassifyQualPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): Cannot add 2 el"
                                            "ements to context";
                                      goto LABEL_2228;
                                    case 894:
                                      if ((_DWORD)v14 != 2)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 2)
                                        v20 = 2;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidClassifyRelPartition_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): Cannot add 2 ele"
                                            "ments to context";
                                      goto LABEL_2228;
                                    case 895:
                                      if ((AddMultipleFieldsToGenericContext(a1, "IND_pool_freeMinSilo", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: IND_pool_freeMinSilo(895) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 896:
                                      if ((AddMultipleFieldsToGenericContext(a1, "autoSweepBlocks", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: autoSweepBlocks(896) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 897:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcWrFragSizes(897): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "wcWrFragSizes_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: wcWrFragSizes(897): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 898:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "indStateAcrossGcDidNoL_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 899:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "indStateAcrossGcDidL_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 900:
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToWasRetire", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToWasRetire(900) cannot add 1 "
                                            "element to context";
                                      goto LABEL_15;
                                    case 901:
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToOpenBand", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToOpenBand(901) cannot add 1 e"
                                            "lement to context";
                                      goto LABEL_15;
                                    case 902:
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToQualityBlock", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToQualityBlock(902) cannot add"
                                            " 1 element to context";
                                      goto LABEL_15;
                                    case 903:
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidGbbOpenBand", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: turboRaidGbbOpenBand(903) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 904:
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidGbbShouldRetireOnRefresh", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                      v19 = "ASPFTLParseBufferToCxt: turboRaidGbbShouldRetireOnRefresh(904) cannot add 1 "
                                            "element to context";
                                      goto LABEL_15;
                                    case 905:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidRelPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): Cannot add 16 elements to context";
                                      goto LABEL_2228;
                                    case 906:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): Cannot ad"
                                            "d 16 elements to context";
                                      goto LABEL_2228;
                                    case 907:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMaxRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): Cannot"
                                            " add 16 elements to context";
                                      goto LABEL_2228;
                                    case 908:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMinRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): Cannot"
                                            " add 16 elements to context";
                                      goto LABEL_2228;
                                    case 918:
                                      if ((_DWORD)v14 != 16)
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      if (v14 >= 0x10)
                                        v20 = 16;
                                      else
                                        v20 = v14;
                                      if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMaxCyclesBetweenRel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                      v22 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): Cannot add 16 ele"
                                            "ments to context";
                                      goto LABEL_2228;
                                    default:
                                      if (v12 <= 1039)
                                      {
                                        switch(v12)
                                        {
                                          case 919:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMinCyclesBetweenRel_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2228;
                                          case 920:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidAuxPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): Cannot add 16 elements to context";
                                            goto LABEL_2228;
                                          case 921:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidAuxBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): Can"
                                                  "not add 16 elements to context";
                                            goto LABEL_2228;
                                          case 922:
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidRelLockMark", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: turboRaidRelLockMark(922) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 923:
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidAuxLockMark", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: turboRaidAuxLockMark(923) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 924:
                                          case 925:
                                          case 926:
                                          case 927:
                                          case 928:
                                          case 929:
                                          case 936:
                                          case 941:
                                          case 945:
                                          case 946:
                                          case 947:
                                          case 949:
                                          case 950:
                                          case 952:
                                          case 954:
                                          case 955:
                                          case 956:
                                          case 957:
                                          case 958:
                                          case 959:
                                          case 960:
                                          case 963:
                                          case 964:
                                          case 965:
                                          case 966:
                                          case 968:
                                          case 969:
                                          case 970:
                                            goto LABEL_2116;
                                          case 930:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMaxCyclesBetweenAux_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2228;
                                          case 931:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidMinCyclesBetweenAux_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2228;
                                          case 932:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidLastRelPECycles_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2228;
                                          case 933:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidRelQualPECycles_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2228;
                                          case 934:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidLastAuxPECycles_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2228;
                                          case 935:
                                            if ((_DWORD)v14 != 16)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x10)
                                              v20 = 16;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidAuxQualPECycles_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2228;
                                          case 937:
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidPEFailAfterRel", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterRel(937) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 938:
                                            if ((AddMultipleFieldsToGenericContext(a1, "turboRaidPEFailAfterAux", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterAux(938) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 939:
                                            if ((AddMultipleFieldsToGenericContext(a1, "dvfmVotesCPU", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: dvfmVotesCPU(939) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 940:
                                            if ((AddMultipleFieldsToGenericContext(a1, "dvfmVotesBandwidth", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: dvfmVotesBandwidth(940) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 942:
                                            if ((AddMultipleFieldsToGenericContext(a1, "maxSLCEndurance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: maxSLCEndurance(942) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 943:
                                            if ((AddMultipleFieldsToGenericContext(a1, "maxMixedEndurance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: maxMixedEndurance(943) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 944:
                                            if ((AddMultipleFieldsToGenericContext(a1, "maxNativeEndurance", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: maxNativeEndurance(944) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 948:
                                            if ((_DWORD)v14 != 40)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: assertHistory(948): (#40) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0x28)
                                              v20 = 40;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "assertHistory_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: assertHistory(948): Cannot add 40 elements to context";
                                            goto LABEL_2228;
                                          case 951:
                                            if ((AddMultipleFieldsToGenericContext(a1, "asp3Support", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: asp3Support(951) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 953:
                                            if ((AddMultipleFieldsToGenericContext(a1, "numCrossTempRaidUecc", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: numCrossTempRaidUecc(953) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 961:
                                            if ((AddMultipleFieldsToGenericContext(a1, "osBuildStr", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: osBuildStr(961) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 962:
                                            if ((AddMultipleFieldsToGenericContext(a1, "raidConfig", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: raidConfig(962) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 967:
                                            if ((_DWORD)v14 != 12)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: indTrimFrags(967): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xC)
                                              v20 = 12;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "indTrimFrags_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: indTrimFrags(967): Cannot add 12 elements to context";
                                            goto LABEL_2228;
                                          case 971:
                                            if ((_DWORD)v14 != 12)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: indUsedFrags(971): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xC)
                                              v20 = 12;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "indUsedFrags_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: indUsedFrags(971): Cannot add 12 elements to context";
                                            goto LABEL_2228;
                                          default:
                                            switch(v12)
                                            {
                                              case 996:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogFindFail", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogFindFail(996) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 997:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogFindBlank", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogFindBlank(997) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 998:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogFindUnc", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogFindUnc(998) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 999:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogFindUnexpected", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogFindUnexpected(999) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1001:
                                                if ((_DWORD)v14 != 8)
                                                  SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogReplayFailReason(1001): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                if (v14 >= 8)
                                                  v20 = 8;
                                                else
                                                  v20 = v14;
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogReplayFailReason_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                v22 = "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): Cannot add 8 e"
                                                      "lements to context";
                                                goto LABEL_2228;
                                              case 1002:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogReplayTransientError", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogReplayTransientError(1002) cannot add "
                                                      "1 element to context";
                                                goto LABEL_15;
                                              case 1003:
                                                if ((AddMultipleFieldsToGenericContext(a1, "clogReplaySpfError", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: clogReplaySpfError(1003) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1015:
                                                if ((_DWORD)v14 != 4)
                                                  SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                if (v14 >= 4)
                                                  v20 = 4;
                                                else
                                                  v20 = v14;
                                                if ((AddMultipleFieldsToGenericContext(a1, "eanEarlyBootUeccPage_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                v22 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): Cannot add 4 e"
                                                      "lements to context";
                                                goto LABEL_2228;
                                              case 1016:
                                                if ((AddMultipleFieldsToGenericContext(a1, "eanEarlyBootNumUeccPages", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: eanEarlyBootNumUeccPages(1016) cannot add "
                                                      "1 element to context";
                                                goto LABEL_15;
                                              case 1017:
                                                if ((AddMultipleFieldsToGenericContext(a1, "eanEarlyBootUeccMultiplane", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                                v19 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccMultiplane(1017) cannot ad"
                                                      "d 1 element to context";
                                                goto LABEL_15;
                                              default:
                                                goto LABEL_2116;
                                            }
                                        }
                                      }
                                      if (v12 <= 1146)
                                      {
                                        if (v12 <= 1104)
                                        {
                                          if (v12 <= 1041)
                                          {
                                            if (v12 == 1040)
                                            {
                                              if ((_DWORD)v14 != 31)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 0x1F)
                                                v20 = 31;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsV2_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                              {
                                                v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): Cannot add 31 elements to context";
                                                goto LABEL_2228;
                                              }
                                            }
                                            else
                                            {
                                              if ((_DWORD)v14 != 31)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 0x1F)
                                                v20 = 31;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsSnapshot_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                              {
                                                v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): Cannot add 31 "
                                                      "elements to context";
                                                goto LABEL_2228;
                                              }
                                            }
                                            goto LABEL_14;
                                          }
                                          if (v12 == 1042)
                                          {
                                            if ((_DWORD)v14 != 15)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): (#15) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xF)
                                              v20 = 15;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsReadSectors_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                            {
                                              v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): Cannot add 15"
                                                    " elements to context";
                                              goto LABEL_2228;
                                            }
                                            goto LABEL_14;
                                          }
                                          if (v12 == 1080)
                                          {
                                            if ((AddMultipleFieldsToGenericContext(a1, "raidForceClogLoad", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                            {
                                              v19 = "ASPFTLParseBufferToCxt: raidForceClogLoad(1080) cannot add 1 element to context";
LABEL_15:
                                              SetAPIErrorMessage(v19, a2, a3, a4, a5, a6, a7, a8, v23);
                                            }
LABEL_16:
                                            v10 = (v10 + 1);
                                            goto LABEL_17;
                                          }
                                        }
                                        else if (v12 <= 1115)
                                        {
                                          if (v12 == 1105)
                                          {
                                            if ((_DWORD)v14 != 14)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: hostReadSequential(1105): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xE)
                                              v20 = 14;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "hostReadSequential_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                            {
                                              v22 = "ASPFTLParseBufferToCxt: hostReadSequential(1105): Cannot add 14 elements to context";
                                              goto LABEL_2228;
                                            }
                                            goto LABEL_14;
                                          }
                                          if (v12 == 1106)
                                          {
                                            if ((_DWORD)v14 != 14)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: GCReadSequential(1106): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xE)
                                              v20 = 14;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "GCReadSequential_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                            {
                                              v22 = "ASPFTLParseBufferToCxt: GCReadSequential(1106): Cannot add 14 elements to context";
                                              goto LABEL_2228;
                                            }
                                            goto LABEL_14;
                                          }
                                        }
                                        else
                                        {
                                          switch(v12)
                                          {
                                            case 1116:
                                              if ((_DWORD)v14 != 32)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcwamp(1116): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 0x20)
                                                v20 = 32;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "gcwamp_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                              {
                                                v22 = "ASPFTLParseBufferToCxt: gcwamp(1116): Cannot add 32 elements to context";
                                                goto LABEL_2228;
                                              }
                                              goto LABEL_14;
                                            case 1137:
                                              if ((AddMultipleFieldsToGenericContext(a1, "numOfToUnhappySwitches", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                              {
                                                v19 = "ASPFTLParseBufferToCxt: numOfToUnhappySwitches(1137) cannot add 1 "
                                                      "element to context";
                                                goto LABEL_15;
                                              }
                                              goto LABEL_16;
                                            case 1138:
                                              if ((AddMultipleFieldsToGenericContext(a1, "numOfToHappySwitches", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                              {
                                                v19 = "ASPFTLParseBufferToCxt: numOfToHappySwitches(1138) cannot add 1 el"
                                                      "ement to context";
                                                goto LABEL_15;
                                              }
                                              goto LABEL_16;
                                          }
                                        }
LABEL_2116:
                                        if (v12 <= 1231)
                                        {
                                          switch(v12)
                                          {
                                            case 1198:
                                              if ((_DWORD)v14 != 3)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 3)
                                                v20 = 3;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "poDetectPERemovalMostSevereCost_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                              v22 = "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): Canno"
                                                    "t add 3 elements to context";
                                              goto LABEL_2228;
                                            case 1199:
                                              if ((AddMultipleFieldsToGenericContext(a1, "poDetectCurrentSize", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                              v19 = "ASPFTLParseBufferToCxt: poDetectCurrentSize(1199) cannot add 1 element to context";
                                              goto LABEL_15;
                                            case 1200:
                                              goto LABEL_2166;
                                            case 1201:
                                              if ((_DWORD)v14 != 4)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 4)
                                                v20 = 4;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "gcVerticalSuccssfulAlignments_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                              v22 = "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): Cannot "
                                                    "add 4 elements to context";
                                              goto LABEL_2228;
                                            case 1202:
                                              if ((_DWORD)v14 != 4)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 4)
                                                v20 = 4;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "gcVerticalNoAlignmentDueToMissingSegs_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                              v22 = "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202):"
                                                    " Cannot add 4 elements to context";
                                              goto LABEL_2228;
                                            default:
                                              switch(v12)
                                              {
                                                case 1216:
                                                  if ((_DWORD)v14 != 24)
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  if (v14 >= 0x18)
                                                    v20 = 24;
                                                  else
                                                    v20 = v14;
                                                  if ((AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipAvgPEC_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                  v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): Cannot add 24 e"
                                                        "lements to context";
                                                  goto LABEL_2228;
                                                case 1217:
                                                  if ((_DWORD)v14 != 24)
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  if (v14 >= 0x18)
                                                    v20 = 24;
                                                  else
                                                    v20 = v14;
                                                  if ((AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipMaxPEC_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                  v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): Cannot add 24 e"
                                                        "lements to context";
                                                  goto LABEL_2228;
                                                case 1218:
                                                  if ((_DWORD)v14 != 24)
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  if (v14 >= 0x18)
                                                    v20 = 24;
                                                  else
                                                    v20 = v14;
                                                  if ((AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipMinPEC_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                  v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): Cannot add 24 e"
                                                        "lements to context";
                                                  goto LABEL_2228;
                                                case 1219:
                                                case 1220:
                                                case 1221:
                                                case 1222:
                                                case 1223:
                                                  goto LABEL_2166;
                                                case 1224:
                                                  if ((_DWORD)v14 != 20)
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  if (v14 >= 0x14)
                                                    v20 = 20;
                                                  else
                                                    v20 = v14;
                                                  if ((AddMultipleFieldsToGenericContext(a1, "apfsValidLbaOvershoot_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                  v22 = "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): Cannot add "
                                                        "20 elements to context";
                                                  goto LABEL_2228;
                                                default:
                                                  if (v12 != 1211)
                                                    goto LABEL_2166;
                                                  if ((_DWORD)v14 != 24)
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  if (v14 >= 0x18)
                                                    v20 = 24;
                                                  else
                                                    v20 = v14;
                                                  if ((AddMultipleFieldsToGenericContext(a1, "forcedAllocationSmallEraseQ_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                                  v22 = "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): Canno"
                                                        "t add 24 elements to context";
                                                  break;
                                              }
                                              goto LABEL_2228;
                                          }
                                        }
                                        switch(v12)
                                        {
                                          case 1232:
                                            if ((AddMultipleFieldsToGenericContext(a1, "eanFastSize", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: eanFastSize(1232) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 1233:
                                            if ((AddMultipleFieldsToGenericContext(a1, "eanNumSlcEvictions", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: eanNumSlcEvictions(1233) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 1234:
                                            if ((AddMultipleFieldsToGenericContext(a1, "eanNumForcedCompress", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: eanNumForcedCompress(1234) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 1241:
                                            if ((_DWORD)v14 != 10)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: s2rTimeHisto(1241): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 0xA)
                                              v20 = 10;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "s2rTimeHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): Cannot add 10 elements to context";
                                            goto LABEL_2228;
                                          case 1244:
                                            if ((AddMultipleFieldsToGenericContext(a1, "calendarTimeWentBackward", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                            v19 = "ASPFTLParseBufferToCxt: calendarTimeWentBackward(1244) cannot add 1 el"
                                                  "ement to context";
                                            goto LABEL_15;
                                          case 1246:
                                            if ((_DWORD)v14 != 8)
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                            if (v14 >= 8)
                                              v20 = 8;
                                            else
                                              v20 = v14;
                                            if ((AddMultipleFieldsToGenericContext(a1, "bandsUeccCrossTempHisto_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                            v22 = "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): Cannot add 8 el"
                                                  "ements to context";
                                            goto LABEL_2228;
                                          default:
LABEL_2166:
                                            if (v14 <= 1)
                                              snprintf(__str, 0x20uLL, "Stat_%d");
                                            else
                                              snprintf(__str, 0x20uLL, "Stat_%d_");
                                            if ((AddMultipleFieldsToGenericContext(a1, __str, (uint64_t)v8, 8u, v14) & 1) == 0)
                                            {
                                              SetAPIErrorMessage("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", a2, a3, a4, a5, a6, a7, a8, v12);
                                              return v10;
                                            }
                                            v10 = (v10 + v14);
                                            break;
                                        }
LABEL_17:
                                        v8 += v14;
                                        v11 -= v14;
                                        goto LABEL_2;
                                      }
                                      switch(v12)
                                      {
                                        case 1147:
                                          if ((_DWORD)v14 != 24)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 0x18)
                                            v20 = 24;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc12_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): Cannot add 24 elements to context";
                                          goto LABEL_2228;
                                        case 1148:
                                          if ((_DWORD)v14 != 24)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 0x18)
                                            v20 = 24;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc1_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): Cannot add 24 elements to context";
                                          goto LABEL_2228;
                                        case 1149:
                                          if ((_DWORD)v14 != 24)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 0x18)
                                            v20 = 24;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc2_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): Cannot add 24 elements to context";
                                          goto LABEL_2228;
                                        case 1150:
                                        case 1151:
                                        case 1152:
                                        case 1153:
                                        case 1154:
                                        case 1155:
                                        case 1156:
                                        case 1159:
                                        case 1160:
                                        case 1161:
                                        case 1162:
                                        case 1163:
                                        case 1164:
                                        case 1165:
                                        case 1166:
                                        case 1167:
                                        case 1170:
                                        case 1173:
                                        case 1174:
                                        case 1175:
                                        case 1176:
                                        case 1177:
                                        case 1178:
                                        case 1186:
                                        case 1187:
                                        case 1188:
                                          goto LABEL_2116;
                                        case 1157:
                                          if ((AddMultipleFieldsToGenericContext(a1, "eanMaxForceROTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                          v19 = "ASPFTLParseBufferToCxt: eanMaxForceROTimeMs(1157) cannot add 1 element to context";
                                          goto LABEL_15;
                                        case 1158:
                                          if ((AddMultipleFieldsToGenericContext(a1, "eanMaxForceRORecoTimeMs", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                          v19 = "ASPFTLParseBufferToCxt: eanMaxForceRORecoTimeMs(1158) cannot add 1 element to context";
                                          goto LABEL_15;
                                        case 1168:
                                          if ((_DWORD)v14 != 2)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 2)
                                            v20 = 2;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "poDetectPERemovalTotalCost_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): Cannot add 2 e"
                                                "lements to context";
                                          goto LABEL_2228;
                                        case 1169:
                                          if ((_DWORD)v14 != 2)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 2)
                                            v20 = 2;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "poDetectEmptySpotRemovalTotalCost_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): Cannot "
                                                "add 2 elements to context";
                                          goto LABEL_2228;
                                        case 1171:
                                          if ((_DWORD)v14 != 10)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 0xA)
                                            v20 = 10;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "poDetectEmptySpotRemovalAge_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): Cannot add 10"
                                                " elements to context";
                                          goto LABEL_2228;
                                        case 1172:
                                          if ((_DWORD)v14 != 3)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 3)
                                            v20 = 3;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "poDetectGBBedMostSevereCost_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): Cannot add 3 "
                                                "elements to context";
                                          goto LABEL_2228;
                                        case 1179:
                                          if ((_DWORD)v14 != 4)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 4)
                                            v20 = 4;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc1_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): Cannot add 4 elements to context";
                                          goto LABEL_2228;
                                        case 1180:
                                          if ((_DWORD)v14 != 4)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 4)
                                            v20 = 4;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc2_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): Cannot add 4 elements to context";
                                          goto LABEL_2228;
                                        case 1181:
                                          if ((_DWORD)v14 != 4)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 4)
                                            v20 = 4;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc3_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): Cannot add 4 elements to context";
                                          goto LABEL_2228;
                                        case 1182:
                                          if ((_DWORD)v14 != 4)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 4)
                                            v20 = 4;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_tot_dw_gc1_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): Cannot add 4 elements to context";
                                          goto LABEL_2228;
                                        case 1183:
                                          if ((_DWORD)v14 != 4)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 4)
                                            v20 = 4;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "gc_tot_dw_gc2_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): Cannot add 4 elements to context";
                                          goto LABEL_2228;
                                        case 1184:
                                          if ((AddMultipleFieldsToGenericContext(a1, "unhappy_state", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                          v19 = "ASPFTLParseBufferToCxt: unhappy_state(1184) cannot add 1 element to context";
                                          goto LABEL_15;
                                        case 1185:
                                          if ((AddMultipleFieldsToGenericContext(a1, "unhappy_level", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                          v19 = "ASPFTLParseBufferToCxt: unhappy_level(1185) cannot add 1 element to context";
                                          goto LABEL_15;
                                        case 1189:
                                          if ((AddMultipleFieldsToGenericContext(a1, "lastLbaFormatTime", (uint64_t)v8, 8u, 1u) & 1) != 0)goto LABEL_16;
                                          v19 = "ASPFTLParseBufferToCxt: lastLbaFormatTime(1189) cannot add 1 element to context";
                                          goto LABEL_15;
                                        case 1190:
                                          if ((_DWORD)v14 != 12)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: powerDownTime(1190): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 0xC)
                                            v20 = 12;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "powerDownTime_", (uint64_t)v8, 8u, v20) & 1) != 0)goto LABEL_14;
                                          v22 = "ASPFTLParseBufferToCxt: powerDownTime(1190): Cannot add 12 elements to context";
                                          goto LABEL_2228;
                                        default:
                                          if (v12 != 1196)
                                          {
                                            if (v12 == 1197)
                                            {
                                              if ((_DWORD)v14 != 10)
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              if (v14 >= 0xA)
                                                v20 = 10;
                                              else
                                                v20 = v14;
                                              if ((AddMultipleFieldsToGenericContext(a1, "poDetectGBBedAge_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                              {
                                                v22 = "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): Cannot add 10 elements to context";
                                                goto LABEL_2228;
                                              }
                                              goto LABEL_14;
                                            }
                                            goto LABEL_2116;
                                          }
                                          if ((_DWORD)v14 != 5)
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          if (v14 >= 5)
                                            v20 = 5;
                                          else
                                            v20 = v14;
                                          if ((AddMultipleFieldsToGenericContext(a1, "poDetectGBBedTotalCost_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                          {
LABEL_14:
                                            v10 = v20 + v10;
                                            goto LABEL_17;
                                          }
                                          v22 = "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): Cannot add 5 elements to context";
LABEL_2228:
                                          SetAPIErrorMessage(v22, a2, a3, a4, a5, a6, a7, a8, v23);
                                          return v10;
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
}

uint64_t AddMultipleFieldsToGenericContext(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  int v10;
  int v11;
  char __str[101];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  if (a4 && a5)
  {
    if (a5 == 1)
    {
      if (a4 <= 8)
      {
        __memmove_chk();
        return AddSingleValueToGenericContext(a1, "", a2, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v10 = 0;
      v11 = 0;
      do
      {
        if (a4 <= 8)
        {
          __memmove_chk();
          snprintf(__str, 0x64uLL, "%d", v10);
          __str[100] = 0;
          v5 = AddSingleValueToGenericContext(a1, a2, __str, 0) & v5;
        }
        else
        {
          v5 = 0;
        }
        v10 = (unsigned __int16)++v11;
      }
      while ((unsigned __int16)v11 < a5);
    }
  }
  return v5;
}

uint64_t ASPFTLParseStatKeyBufferToCxt(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char __str[16];
  __int128 v22;
  uint64_t v23;

  v5 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  v22 = 0u;
LABEL_2:
  v7 = -v6;
  while (v7)
  {
    v9 = *a2++;
    v8 = v9;
    v10 = HIDWORD(v9);
    ++v7;
    if (HIDWORD(v9))
    {
      if (v8 != 0xFFFF && v8 <= 0x30000000 && -v7 >= v10)
      {
        if (v10 <= 1)
          snprintf(__str, 0x20uLL, "Stat_%d");
        else
          snprintf(__str, 0x20uLL, "Stat_%d_");
        if ((AddMultipleFieldsToGenericContext(a1, __str, (uint64_t)a2, 8u, v10) & 1) != 0)
        {
          v5 = (v5 + v10);
          a2 += v10;
          v6 = -v7 - v10;
          goto LABEL_2;
        }
        SetAPIErrorMessage("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", v13, v14, v15, v16, v17, v18, v19, v8);
      }
      return v5;
    }
  }
  return v5;
}

uint64_t ASPMSPParseBufferToCxt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 *v13;
  const char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  const char *v19;
  __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  char v24;

  v8 = 0;
  v9 = "ASPMSPParseBufferToCxt: Passed in invalid buffer or empty buffer";
  if (!a2)
    goto LABEL_1981;
  v10 = a3;
  if (!(_DWORD)a3)
    goto LABEL_1981;
  v11 = a2;
  v8 = 0;
  v13 = &jpt_1CAFDC9BC;
  v14 = "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): Error adding 4 elements to context";
  v9 = "ASPMSPParseBufferToCxt: cbdr_step_5(4256): Error adding 10 elements to context";
  while (1)
  {
    do
    {
      if (!v10)
        return v8;
      v15 = (unsigned __int16 *)v11;
      v16 = *(unsigned __int16 *)(v11 + 2);
      v11 += 4;
      v10 -= 4;
    }
    while (!(_DWORD)v16);
    v17 = *v15;
    if (v17 != 12286)
      break;
LABEL_461:
    v11 += v16;
    v10 -= v16;
  }
  if (v17 == 12287 || v10 < v16)
    return v8;
  switch(v17)
  {
    case 4096:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeHard(4096): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeHard", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4097:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_2b", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4098:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_4b", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4099:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeHard_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4100:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_2b_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4101:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_4b_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4102:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "numOfCwFailedInTmodeFS2_EOL", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4103:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "numOfCwFailedInTmodeFS2_DSP_EOL", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4104:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterAcq", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4105:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithDefaultBDBFastRead", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4106:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS1", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4107:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE1", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4108:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS2", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4109:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE2", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4110:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithAcq", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4111:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_LSB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4112:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_MSB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4113:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_USB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4114:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_LSB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4115:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_MSB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4116:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_USB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4117:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithDefaultBDB", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4118:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSyndSumAcquisition", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4119:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSlip", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4120:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 44)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x30)
        v21 = 11;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "FS2decodedBitFlips", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): Error adding 11 elements to context";
      goto LABEL_1981;
    case 4121:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 16)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): cfg 4 elements; (4*4) cfg by"
          "tes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x14)
        v21 = 4;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "slipTrackingAfterFs1ForceFailChangedVthInTicksHist", v11, 4u, v21))goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): Error adding 4 elements to context";
      goto LABEL_1981;
    case 4122:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS2_4b_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4123:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterSlip_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4124:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterSlip_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4125:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterSlip_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4126:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS3_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4127:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 40)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x2C)
        v21 = 10;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "deepSoft1Decoded", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): Error adding 10 elements to context";
      goto LABEL_1981;
    case 4128:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 40)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x2C)
        v21 = 10;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "deepSoft2Decoded", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): Error adding 10 elements to context";
      goto LABEL_1981;
    case 4129:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_2b_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4130:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_4b_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4131:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSlip_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4132:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS3_fast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4133:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithEXH", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4134:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 44)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x30)
        v21 = 11;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "FS1decodedbitflips", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): Error adding 11 elements to context";
      goto LABEL_1981;
    case 4135:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readZeroPage(4135): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readZeroPage", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readZeroPage(4135): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4136:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readErasedPage(4136): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readErasedPage", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readErasedPage(4136): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4137:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readFail(4137): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readFail", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readFail(4137): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4138:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 20)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x18)
        v21 = 5;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "numOfSensesWereSentDuringSyndSumAcq", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): Error adding 5 elements to context";
      goto LABEL_1981;
    case 4139:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 12)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): cfg 3 elements; (3*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 0x10)
        v21 = 3;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "numOfSensesWereSentDuringMiniAcq", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): Error adding 3 elements to context";
      goto LABEL_1981;
    case 4140:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDefaultMoveFastToNormal", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4141:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "bdbDefaultMoveNormalToFast", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4142:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithEXH_DSP", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4143:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS1_DSP", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4144:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE1_DSP", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4145:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasFS2EOL_DSP", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4146:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasFS2EOL", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4147:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_4b", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4148:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS2_4b", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4149:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_2b", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4150:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS3", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4151:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS1", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4152:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS2", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4153:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterSlip", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4154:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterSlip", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4155:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterSlip", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4156:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS3", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4157:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): cfg 1 elements; (1*4) cfg bytes != "
          "(%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSyndSumAcquisition_DSP", v11, 4u, v21))goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4158:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterAcq", v11, 4u, v21))
        goto LABEL_460;
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4159:
      v19 = v14;
      v20 = v13;
      if ((_DWORD)v16 != 4)
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      if (v16 >= 8)
        v21 = 1;
      else
        v21 = v16 >> 2;
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterAcq", v11, 4u, v21))
      {
LABEL_460:
        v8 = v8 + v21;
        v13 = v20;
        v14 = v19;
        goto LABEL_461;
      }
      v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): Error adding 1 elements to context";
LABEL_1981:
      SetAPIErrorMessage(v9, a2, a3, a4, a5, a6, a7, a8, v24);
      return v8;
    default:
      switch(v17)
      {
        case 4160:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS1_DSP", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4161:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSlipTracking(4161): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "numOfSlipTracking", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4162:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_QSB", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4163:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_QSB", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4196:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4197:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails101", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4198:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage100(4198): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage100(4198): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4199:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage101(4199): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage101", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage101(4199): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4200:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage100(4200): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: initialReadStage100(4200): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4201:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage102(4201): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage102", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage102(4201): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4202:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage101(4202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage101", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: initialReadStage101(4202): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4203:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife100(4203): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4204:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife101(4204): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife101", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4205:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails102", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4206:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage102(4206): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage102", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: initialReadStage102(4206): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4207:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage103(4207): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage103", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage103(4207): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4208:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage104(4208): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage104", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage104(4208): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4209:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage105(4209): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage105", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage105(4209): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4210:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage106(4210): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage106", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage106(4210): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4211:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4212:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter101", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4213:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage103(4213): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage103", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: initialReadStage103(4213): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4214:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage104(4214): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage104", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: initialReadStage104(4214): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4215:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage107(4215): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage107", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage107(4215): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4216:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage108(4216): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage108", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage108(4216): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4217:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife102(4217): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife102", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4218:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife103(4218): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife103", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4219:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife104(4219): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife104", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4220:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter102", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4221:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter103", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4222:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter104", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4223:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter105", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4224:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter106", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4225:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter107", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4226:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter108", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4227:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter109", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4228:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter110", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4229:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter111", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4230:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter112", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4231:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter113", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4232:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 256)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x104)
            v21 = 64;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails108", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): Error adding 64 elements to context";
          goto LABEL_1981;
        case 4233:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 256)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x104)
            v21 = 64;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails103", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): Error adding 64 elements to context";
          goto LABEL_1981;
        case 4234:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails104", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4235:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails105", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4236:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails106", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4237:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails107", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4238:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage109(4238): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage109", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage109(4238): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4239:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 16)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage110(4239): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x14)
            v21 = 4;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStage110", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStage110(4239): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4240:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 80)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x54)
            v21 = 20;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfErrorsBin100", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): Error adding 20 elements to context";
          goto LABEL_1981;
        case 4241:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 80)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x54)
            v21 = 20;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter114", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): Error adding 20 elements to context";
          goto LABEL_1981;
        case 4242:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter115", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4243:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter116", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4244:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter117", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4245:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter118", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4246:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter119", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4247:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter120", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4248:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter121", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4249:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_ref_1(4249): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_ref_1", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4250:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_ref_2(4250): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_ref_2", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4251:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 4)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_outlier(4251): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 8)
            v21 = 1;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_outlier", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_outlier(4251): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4252:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 40)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_1(4252): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x2C)
            v21 = 10;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_1", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_step_1(4252): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4253:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 40)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_2(4253): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x2C)
            v21 = 10;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_2", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_step_2(4253): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4254:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 40)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_3(4254): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x2C)
            v21 = 10;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_3", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_step_3(4254): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4255:
          v19 = v14;
          v20 = v13;
          if ((_DWORD)v16 != 40)
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_4(4255): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          if (v16 >= 0x2C)
            v21 = 10;
          else
            v21 = v16 >> 2;
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_4", v11, 4u, v21))
            goto LABEL_460;
          v9 = "ASPMSPParseBufferToCxt: cbdr_step_4(4255): Error adding 10 elements to context";
          goto LABEL_1981;
        default:
          switch(v17)
          {
            case 12288:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails200", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12289:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage200(12289): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage200", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage200(12289): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12290:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage201(12290): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage201", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage201(12290): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12291:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails201", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12292:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage202(12292): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage202", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage202(12292): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12293:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage203(12293): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage203", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage203(12293): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12294:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails202", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12295:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails203", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12296:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage204(12296): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage204", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage204(12296): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12297:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage205(12297): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage205", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage205(12297): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12298:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage206(12298): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage206", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage206(12298): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12299:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage207(12299): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage207", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage207(12299): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12300:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage208(12300): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage208", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage208(12300): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12301:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage209(12301): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage209", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage209(12301): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12302:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage200(12302): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage200", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage200(12302): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12303:
              if ((_DWORD)v16 != 32)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage201(12303): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x28)
                v22 = 4;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage201", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage201(12303): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12304:
              if ((_DWORD)v16 != 32)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage202(12304): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x28)
                v22 = 4;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage202", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage202(12304): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12305:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage210(12305): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage210", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage210(12305): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12306:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage211(12306): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage211", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage211(12306): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12307:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage203(12307): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage203", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage203(12307): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12308:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage204(12308): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage204", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage204(12308): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12309:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage205(12309): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage205", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage205(12309): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12310:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage206(12310): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage206", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage206(12310): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12311:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage207(12311): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage207", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage207(12311): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12312:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage208(12312): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage208", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage208(12312): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12313:
              if ((_DWORD)v16 != 32)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage209(12313): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x28)
                v22 = 4;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage209", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage209(12313): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12314:
              if ((_DWORD)v16 != 32)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage210(12314): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x28)
                v22 = 4;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage210", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage210(12314): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12315:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage212(12315): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage212", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage212(12315): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12316:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage213(12316): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage213", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: initialReadStage213(12316): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12317:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage211(12317): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage211", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage211(12317): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12318:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage212(12318): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage212", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage212(12318): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12319:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage213(12319): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage213", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage213(12319): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12320:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage214(12320): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage214", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage214(12320): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12321:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage215(12321): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "readStage215", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: readStage215(12321): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12322:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter142", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12323:
              if ((_DWORD)v16 != 8)
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              if (v16 >= 0x10)
                v22 = 1;
              else
                v22 = v16 >> 3;
              if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter143", v11, 8u, v22))
                goto LABEL_1372;
              v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): Error adding 1 elements to context";
              goto LABEL_1981;
            default:
              switch(v17)
              {
                case 4256:
                  if ((_DWORD)v16 != 40)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_5(4256): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x2C)
                    v22 = 10;
                  else
                    v22 = v16 >> 2;
                  if (!AddMultipleFieldsToGenericContext(a1, "cbdr_step_5", v11, 4u, v22))
                    goto LABEL_1981;
                  goto LABEL_1372;
                case 4257:
                  if ((_DWORD)v16 != 40)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_6(4257): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x2C)
                    v22 = 10;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_6", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: cbdr_step_6(4257): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4258:
                  if ((_DWORD)v16 != 40)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_7(4258): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x2C)
                    v22 = 10;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_7", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: cbdr_step_7(4258): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4259:
                  if ((_DWORD)v16 != 80)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x54)
                    v22 = 20;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter122", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): Error adding 20 elements to context";
                  goto LABEL_1981;
                case 4260:
                  if ((_DWORD)v16 != 32)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x24)
                    v22 = 8;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter123", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): Error adding 8 elements to context";
                  goto LABEL_1981;
                case 4261:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter124", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4262:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter125", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4263:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter126", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4264:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter127", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4265:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter128", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4266:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter129", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4267:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter130", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4268:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter131", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4269:
                  if ((_DWORD)v16 != 40)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x2C)
                    v22 = 10;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter132", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4270:
                  if ((_DWORD)v16 != 40)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x2C)
                    v22 = 10;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter133", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4271:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter134", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4272:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter135", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4273:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter136", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4274:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter137", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4275:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter138", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4276:
                  if ((_DWORD)v16 != 16)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 0x14)
                    v22 = 4;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter139", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4277:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter140", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4278:
                  if ((_DWORD)v16 != 4)
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  if (v16 >= 8)
                    v22 = 1;
                  else
                    v22 = v16 >> 2;
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter141", v11, 4u, v22))
                    goto LABEL_1372;
                  v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): Error adding 1 elements to context";
                  goto LABEL_1981;
                default:
                  switch(v17)
                  {
                    case 4164:
                      if ((_DWORD)v16 != 4)
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): cfg 1 elements; (1*4) cfg byte"
                          "s != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      if (v16 >= 8)
                        v22 = 1;
                      else
                        v22 = v16 >> 2;
                      if (AddMultipleFieldsToGenericContext(a1, "syndSumAcqConvergedToStaticWalls", v11, 4u, v22))goto LABEL_1372;
                      v9 = "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): Error adding 1 elements to context";
                      goto LABEL_1981;
                    case 4165:
                      if ((_DWORD)v16 != 60)
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      if (v16 >= 0x40)
                        v22 = 15;
                      else
                        v22 = v16 >> 2;
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE1_Decoded_Bitflips", v11, 4u, v22))
                        goto LABEL_1372;
                      v9 = "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): Error adding 15 elements to context";
                      goto LABEL_1981;
                    case 4166:
                      if ((_DWORD)v16 != 80)
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      if (v16 >= 0x54)
                        v22 = 20;
                      else
                        v22 = v16 >> 2;
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE1_Target_Bitflips", v11, 4u, v22))
                        goto LABEL_1372;
                      v9 = "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): Error adding 20 elements to context";
                      goto LABEL_1981;
                    case 4167:
                      if ((_DWORD)v16 != 60)
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      if (v16 >= 0x40)
                        v22 = 15;
                      else
                        v22 = v16 >> 2;
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE2_Decoded_Bitflips", v11, 4u, v22))
                        goto LABEL_1372;
                      v9 = "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): Error adding 15 elements to context";
                      goto LABEL_1981;
                    case 4168:
                      if ((_DWORD)v16 != 80)
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      if (v16 >= 0x54)
                        v22 = 20;
                      else
                        v22 = v16 >> 2;
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE2_Target_Bitflips", v11, 4u, v22))
                        goto LABEL_1372;
                      v9 = "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): Error adding 20 elements to context";
                      goto LABEL_1981;
                    default:
                      if (v17 <= 12323)
                      {
                        switch(v17)
                        {
                          case 8193:
                            if ((_DWORD)v16 != 20)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: avg_rd_window_size(8193): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x18)
                              v22 = 5;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "avg_rd_window_size", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): Error adding 5 elements to context";
                            break;
                          case 8194:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_zq_failures(8194): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "num_zq_failures", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: num_zq_failures(8194): Error adding 1 elements to context";
                            break;
                          case 8195:
                            if ((_DWORD)v16 != 64)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8195): cfg 16 elements; (16*4) cfg bytes !"
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x44)
                              v22 = 16;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8195): Error adding 16 elements to context";
                            break;
                          case 8196:
                            if ((_DWORD)v16 != 64)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8196): cfg 16 elements; (16*4) cfg bytes "
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x44)
                              v22 = 16;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8196): Error adding 16 elements to context";
                            break;
                          case 8197:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_sram_flips(8197): cfg 1 elements; (1*4) cfg bytes != ("
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_sram_flips", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): Error adding 1 elements to context";
                            break;
                          case 8198:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_reset_failures(8198): cfg 1 elements; (1*4) cfg bytes "
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_reset_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): Error adding 1 elements to context";
                            break;
                          case 8199:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: device_config(8199): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "device_config", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: device_config(8199): Error adding 1 elements to context";
                            break;
                          case 8200:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_throttling_events(8200): cfg 1 elements; (1*4) cfg byt"
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_throttling_events", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): Error adding 1 elements to context";
                            break;
                          case 8201:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: link_speed_recoveries(8201): cfg 1 elements; (1*4) cfg bytes != "
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "link_speed_recoveries", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): Error adding 1 elements to context";
                            break;
                          case 8202:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: fw_updates(8202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "fw_updates", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: fw_updates(8202): Error adding 1 elements to context";
                            break;
                          case 8203:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): cfg 1 elements; (1*4) cfg byte"
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "maintenance_backup_to_main", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): Error adding 1 elements to context";
                            break;
                          case 8204:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): cfg 1 elements; (1*4) cfg byte"
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "maintenance_main_to_backup", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): Error adding 1 elements to context";
                            break;
                          case 8205:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): cfg 1 elements; (1*4) cfg bytes"
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_erase_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): Error adding 1 elements to context";
                            break;
                          case 8206:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_program_failures(8206): cfg 1 elements; (1*4) cfg byt"
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_program_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): Error adding 1 elements to context";
                            break;
                          case 8207:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): cfg 1 elements; (1*4) cfg"
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_verify_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): Error adding 1 elements to context";
                            break;
                          case 8208:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_failures(8208): cfg 1 elements; (1*4) cfg bytes "
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): Error adding 1 elements to context";
                            break;
                          case 8209:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_refresh(8209): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_refresh", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_refresh(8209): Error adding 1 elements to context";
                            break;
                          case 8210:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): cfg 1 elements; (1*4) cfg byte"
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_convert_to_main", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): Error adding 1 elements to context";
                            break;
                          case 8211:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): cfg 1 elements; (1*4) cfg "
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_source_changed", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): Error adding 1 elements to context";
                            break;
                          case 8212:
                            if ((_DWORD)v16 != 16)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: open_blocks_hist(8212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x14)
                              v22 = 4;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "open_blocks_hist", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8212): Error adding 4 elements to context";
                            break;
                          case 8213:
                            if ((_DWORD)v16 != 24)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): cfg 6 elements; (6*4) cfg byte"
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x1C)
                              v22 = 6;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "random_read_hit_ratio_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): Error adding 6 elements to context";
                            break;
                          case 8214:
                            if ((_DWORD)v16 != 20)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_hist(8214): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x18)
                              v22 = 5;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_hist", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: active_time_hist(8214): Error adding 5 elements to context";
                            break;
                          case 8215:
                            if ((_DWORD)v16 != 8)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_retraining_failures(8215): cfg 2 elements; (2*4) cfg bytes !="
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0xC)
                              v22 = 2;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "rd_retraining_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): Error adding 2 elements to context";
                            break;
                          case 8216:
                            if ((_DWORD)v16 != 8)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: wr_retraining_failures(8216): cfg 2 elements; (2*4) cfg bytes !="
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0xC)
                              v22 = 2;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "wr_retraining_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): Error adding 2 elements to context";
                            break;
                          case 8217:
                            if ((_DWORD)v16 != 20)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: auto_skip(8217): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x18)
                              v22 = 5;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "auto_skip", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: auto_skip(8217): Error adding 5 elements to context";
                            break;
                          case 8218:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): cfg 1 elements; (1*4) cfg "
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_dcc_pass_after_retry", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): Error adding 1 elements to context";
                            break;
                          case 8219:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): cfg 1 elements; (1*4) cfg bytes !="
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_dcc_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): Error adding 1 elements to context";
                            break;
                          case 8220:
                            if ((_DWORD)v16 != 28)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: open_blocks_hist(8220): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x20)
                              v22 = 7;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "open_blocks_hist", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8220): Error adding 7 elements to context";
                            break;
                          case 8221:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): cfg 1 elements; (1*4) cfg bytes"
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "max_size_open_blocks_list", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): Error adding 1 elements to context";
                            break;
                          case 8222:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): cfg 1 elements; (1*4) cfg bytes !"
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "gps_max_num_of_failures", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): Error adding 1 elements to context";
                            break;
                          case 8223:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): cfg 1 elements; (1*4) cf"
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "gps_num_of_failures_max_overflow", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): Error adding 1 elements to context";
                            break;
                          case 8224:
                            if ((_DWORD)v16 != 32)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_hist(8224): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x24)
                              v22 = 8;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_hist", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: active_time_hist(8224): Error adding 8 elements to context";
                            break;
                          case 8225:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): cfg 1 elements; (1*4)"
                                " cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "num_auto_program_cache_terminations", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): Error adding 1 elements to context";
                            break;
                          case 8226:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): cfg 1 elements; (1"
                                "*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_read_cache_auto_terminations", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): Error adding 1 el"
                                 "ements to context";
                            break;
                          case 8227:
                            if ((_DWORD)v16 != 28)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): cfg 7 elements; (7*4) cfg bytes"
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x20)
                              v22 = 7;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "external_etags_usage_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): Error adding 7 elements to context";
                            break;
                          case 8228:
                            if ((_DWORD)v16 != 16)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): cfg 4 elements; (4*4) cfg bytes"
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x14)
                              v22 = 4;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "internal_etags_usage_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): Error adding 4 elements to context";
                            break;
                          case 8229:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_heap_usage(8229): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "max_heap_usage", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: max_heap_usage(8229): Error adding 1 elements to context";
                            break;
                          case 8230:
                            if ((_DWORD)v16 != 24)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): cfg 6 elements; (6*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x1C)
                              v22 = 6;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "rom_num_hard_resets", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): Error adding 6 elements to context";
                            break;
                          case 8231:
                            if ((_DWORD)v16 != 64)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8231): cfg 16 elements; (16*4) cfg bytes !"
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x44)
                              v22 = 16;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8231): Error adding 16 elements to context";
                            break;
                          case 8232:
                            if ((_DWORD)v16 != 64)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8232): cfg 16 elements; (16*4) cfg bytes "
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x44)
                              v22 = 16;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8232): Error adding 16 elements to context";
                            break;
                          case 8233:
                            if ((_DWORD)v16 != 24)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): cfg 6 elements; (6*4) cfg byte"
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x1C)
                              v22 = 6;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "random_read_hit_ratio_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): Error adding 6 elements to context";
                            break;
                          case 8234:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): cfg 1 elements; (1*4) cfg bytes != "
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "msp_number_sram_flips", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): Error adding 1 elements to context";
                            break;
                          case 8235:
                            if ((_DWORD)v16 != 28)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_time_normal_power(8235): cfg 7 elements; (7*4) cfg bytes !="
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x20)
                              v22 = 7;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_time_normal_power", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): Error adding 7 elements to context";
                            break;
                          case 8236:
                            if ((_DWORD)v16 != 28)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_time_low_power(8236): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x20)
                              v22 = 7;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "boot_time_low_power", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: boot_time_low_power(8236): Error adding 7 elements to context";
                            break;
                          case 8237:
                            if ((_DWORD)v16 != 40)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): cfg 10 elements; (10*4) cfg bytes "
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x2C)
                              v22 = 10;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): Error adding 10 elements to context";
                            break;
                          case 8238:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): cfg 1 elements; (1*4) cfg bytes != "
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_min", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): Error adding 1 elements to context";
                            break;
                          case 8239:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): cfg 1 elements; (1*4) cfg bytes != "
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_max", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): Error adding 1 elements to context";
                            break;
                          case 8240:
                            if ((_DWORD)v16 != 20)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: mdll_relative_offset(8240): cfg 5 elements; (5*4) cfg bytes != ("
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x18)
                              v22 = 5;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "mdll_relative_offset", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): Error adding 5 elements to context";
                            break;
                          case 8241:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_pg_regrets(8241): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "num_pg_regrets", v11, 4u, v22))
                              goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: num_pg_regrets(8241): Error adding 1 elements to context";
                            break;
                          case 8242:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): cfg 1 elements; (1*4) cfg "
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_overall_duration_acc", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): Error adding 1 elements to context";
                            break;
                          case 8243:
                            if ((_DWORD)v16 != 4)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): cfg 1 elements; (1*4) cfg"
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 8)
                              v22 = 1;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_cw_fetch_duration_acc", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): Error adding 1 elements to context";
                            break;
                          case 8244:
                            if ((_DWORD)v16 != 20)
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): cfg 5 elements; (5*4) cf"
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            if (v16 >= 0x18)
                              v22 = 5;
                            else
                              v22 = v16 >> 2;
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_cw_fetch_duration_hist", v11, 4u, v22))goto LABEL_1372;
                            v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): Error adding 5 elements to context";
                            break;
                          default:
                            switch(v17)
                            {
                              case 4279:
                                if ((_DWORD)v16 != 16)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: fs1_4b_fail(4279): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x14)
                                  v22 = 4;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "fs1_4b_fail_", v11, 4u, v22))
                                  goto LABEL_1372;
                                v9 = v14;
                                break;
                              case 4280:
                                if ((_DWORD)v16 != 16)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): cfg 4 elements; (4*4) cfg bytes != ("
                                    "%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x14)
                                  v22 = 4;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "fs1_4b_fast_fail_", v11, 4u, v22))goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): Error adding 4 elements to context";
                                break;
                              case 4281:
                                if ((_DWORD)v16 != 40)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): cfg 10 elements; (10*4) cfg by"
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x2C)
                                  v22 = 10;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "dyce_decoded_bit_flips_", v11, 4u, v22))goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): Error adding 10 elements to context";
                                break;
                              case 4282:
                                if ((_DWORD)v16 != 60)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: slip_bch(4282): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x40)
                                  v22 = 15;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "slip_bch_", v11, 4u, v22))
                                  goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: slip_bch(4282): Error adding 15 elements to context";
                                break;
                              case 4283:
                                if ((_DWORD)v16 != 40)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: read_fail(4283): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x2C)
                                  v22 = 10;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "read_fail_", v11, 4u, v22))
                                  goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: read_fail(4283): Error adding 10 elements to context";
                                break;
                              case 4284:
                                if ((_DWORD)v16 != 40)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_read_fail(4284): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x2C)
                                  v22 = 10;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "tr_read_fail_", v11, 4u, v22))
                                  goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: tr_read_fail(4284): Error adding 10 elements to context";
                                break;
                              case 4285:
                                if ((_DWORD)v16 != 40)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): cfg 10 elements; (10*4) cfg bytes "
                                    "!= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x2C)
                                  v22 = 10;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "tr_aux_bfs_percent_", v11, 4u, v22))goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): Error adding 10 elements to context";
                                break;
                              case 4286:
                                if ((_DWORD)v16 != 20)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): cfg 5 elements; (5*4) cfg by"
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 0x18)
                                  v22 = 5;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "tr_reconstruct_pass_step_", v11, 4u, v22))goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): Error adding 5 elements to context";
                                break;
                              case 4287:
                                if ((_DWORD)v16 != 4)
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): cfg 1 elements; (1*4) cfg bytes !="
                                    " (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                if (v16 >= 8)
                                  v22 = 1;
                                else
                                  v22 = v16 >> 2;
                                if (AddMultipleFieldsToGenericContext(a1, "tr_reconstruct_num", v11, 4u, v22))goto LABEL_1372;
                                v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): Error adding 1 elements to context";
                                break;
                              default:
                                goto LABEL_1404;
                            }
                            goto LABEL_1981;
                        }
                        goto LABEL_1981;
                      }
                      switch(v17)
                      {
                        case 12326:
                          if ((_DWORD)v16 != 8)
                            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): cfg 1 elements; (1*8) cfg bytes"
                              " != (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          if (v16 >= 0x10)
                            v22 = 1;
                          else
                            v22 = v16 >> 3;
                          if (!AddMultipleFieldsToGenericContext(a1, "initialReadStageParameter2", v11, 8u, v22))
                          {
                            v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }
                          break;
                        case 12325:
                          if ((_DWORD)v16 != 8)
                            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): cfg 1 elements; (1*8) cfg bytes"
                              " != (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          if (v16 >= 0x10)
                            v22 = 1;
                          else
                            v22 = v16 >> 3;
                          if (!AddMultipleFieldsToGenericContext(a1, "initialReadStageParameter1", v11, 8u, v22))
                          {
                            v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }
                          break;
                        case 12324:
                          if ((_DWORD)v16 != 8)
                            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): cfg 1 elements; (1*8) cfg bytes !"
                              "= (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          if (v16 >= 0x10)
                            v22 = 1;
                          else
                            v22 = v16 >> 3;
                          if (!AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter144", v11, 8u, v22))
                          {
                            v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }
                          break;
                        default:
LABEL_1404:
                          switch(v17)
                          {
                            case 8245:
                              if ((_DWORD)v16 != 4)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_num_uses(8245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 8)
                                v22 = 1;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "spi_num_uses", v11, 4u, v22))
                                goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: spi_num_uses(8245): Error adding 1 elements to context";
                              break;
                            case 8246:
                              if ((_DWORD)v16 != 20)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): cfg 5 elements; (5*4) cfg bytes !"
                                  "= (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x18)
                                v22 = 5;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "e2e_error_count_tmode", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): Error adding 5 elements to context";
                              break;
                            case 8247:
                              if ((_DWORD)v16 != 36)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_window_dist(8247): cfg 9 elements; (9*4) cfg bytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x28)
                                v22 = 9;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "rd_window_dist", v11, 4u, v22))
                                goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: rd_window_dist(8247): Error adding 9 elements to context";
                              break;
                            case 8248:
                              if ((_DWORD)v16 != 36)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): cfg 9 elements; (9*4) cfg "
                                  "bytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x28)
                                v22 = 9;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "extended_rd_window_diff_dist", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): Error adding 9 elements to context";
                              break;
                            case 8249:
                              if ((_DWORD)v16 != 8)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): cfg 2 elements; (2*4) cfg byt"
                                  "es != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0xC)
                                v22 = 2;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "rd_retraining_failures_v2", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): Error adding 2 elements to context";
                              break;
                            case 8250:
                              if ((_DWORD)v16 != 120)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8250): cfg 30 elements; (30*4) cfg bytes"
                                  " != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x7C)
                                v22 = 30;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8250): Error adding 30 elements to context";
                              break;
                            case 8251:
                              if ((_DWORD)v16 != 120)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8251): cfg 30 elements; (30*4) cfg byte"
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x7C)
                                v22 = 30;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8251): Error adding 30 elements to context";
                              break;
                            case 8252:
                              if ((_DWORD)v16 != 36)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): cfg 9 elements; (9*4) cfg byt"
                                  "es != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x28)
                                v22 = 9;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "rd_window_dist_single_die", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): Error adding 9 elements to context";
                              break;
                            case 8253:
                              if ((_DWORD)v16 != 16)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): cfg 4 elements; (4*4) cfg byte"
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0x14)
                                v22 = 4;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "parallel_slip_drops_hist", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): Error adding 4 elements to context";
                              break;
                            case 8254:
                              if ((_DWORD)v16 != 4)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): cfg 1 elements; (1*4) cfg bytes !="
                                  " (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 8)
                                v22 = 1;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "sys_halt_max_latency", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): Error adding 1 elements to context";
                              break;
                            case 8255:
                              if ((_DWORD)v16 != 4)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): cfg 1 elements; (1*4) cfg b"
                                  "ytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 8)
                                v22 = 1;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "sys_halt_max_latency_opcode", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): Error adding 1 elements to context";
                              break;
                            case 8256:
                              if ((_DWORD)v16 != 4)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): cfg 1 elements; (1*4) cfg byte"
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 8)
                                v22 = 1;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "channel_halt_max_latency", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): Error adding 1 elements to context";
                              break;
                            case 8257:
                              if ((_DWORD)v16 != 8)
                                SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): cfg 2 elements; (2*4) cfg bytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              if (v16 >= 0xC)
                                v22 = 2;
                              else
                                v22 = v16 >> 2;
                              if (AddMultipleFieldsToGenericContext(a1, "max_heap_usage_v2", v11, 4u, v22))goto LABEL_1372;
                              v9 = "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): Error adding 2 elements to context";
                              break;
                            default:
                              switch(v17)
                              {
                                case 16384:
                                  if ((_DWORD)v16 != 8)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: fw_version_identifier(16384): cfg 1 elements; (1*8) cfg by"
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x10)
                                    v22 = 1;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "fw_version_identifier", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: fw_version_identifier(16384): Error adding 1 elements to context";
                                  break;
                                case 16385:
                                  if ((_DWORD)v16 != 40)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_size_ratio(16385): cfg 5 elements; (5*8) cfg b"
                                      "ytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x30)
                                    v22 = 5;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "random_read_size_ratio", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): Error adding 5 elements to context";
                                  break;
                                case 16386:
                                  if ((_DWORD)v16 != 8)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): cfg 1 elements;"
                                      " (1*8) cfg bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x10)
                                    v22 = 1;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "number_gracefull_read_terminations", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): Error adding 1"
                                       " elements to context";
                                  break;
                                case 16387:
                                  if ((_DWORD)v16 != 8)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): cfg 1 elements; (1*8) cfg by"
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x10)
                                    v22 = 1;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_acc", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): Error adding 1 elements to context";
                                  break;
                                case 16388:
                                  if ((_DWORD)v16 != 8)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_pg_events(16388): cfg 1 elements; (1*8) cfg bytes != ("
                                      "%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x10)
                                    v22 = 1;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "num_pg_events", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: num_pg_events(16388): Error adding 1 elements to context";
                                  break;
                                case 16389:
                                  if ((_DWORD)v16 != 128)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: algo_queue_depth(16389): cfg 16 elements; (16*8) cfg bytes"
                                      " != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x88)
                                    v22 = 16;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "algo_queue_depth", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: algo_queue_depth(16389): Error adding 16 elements to context";
                                  break;
                                case 16390:
                                  if ((_DWORD)v16 != 128)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: parallel_slip_hist(16390): cfg 16 elements; (16*8) cfg byt"
                                      "es != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x88)
                                    v22 = 16;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "parallel_slip_hist", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): Error adding 16 elements to context";
                                  break;
                                case 16391:
                                  if ((_DWORD)v16 != 48)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): cfg 6 elements; (6*8) cfg by"
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x38)
                                    v22 = 6;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "sys_halt_latency_hist", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): Error adding 6 elements to context";
                                  break;
                                case 16392:
                                  if ((_DWORD)v16 != 48)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): cfg 6 elements; (6*8) cf"
                                      "g bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x38)
                                    v22 = 6;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "channel_halt_latency_hist", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): Error adding 6 elements to context";
                                  break;
                                case 16393:
                                  if ((_DWORD)v16 != 8)
                                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): cfg 1 elements; "
                                      "(1*8) cfg bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  if (v16 >= 0x10)
                                    v22 = 1;
                                  else
                                    v22 = v16 >> 3;
                                  if (AddMultipleFieldsToGenericContext(a1, "num_idle_die_read_cache_terminate", v11, 8u, v22))goto LABEL_1372;
                                  v9 = "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): Error adding 1 "
                                       "elements to context";
                                  break;
                                default:
                                  goto LABEL_1373;
                              }
                              goto LABEL_1981;
                          }
                          goto LABEL_1981;
                      }
LABEL_1372:
                      v8 = v8 + v22;
LABEL_1373:
                      v13 = &jpt_1CAFDC9BC;
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
      goto LABEL_461;
  }
}

uint64_t AddSingleValueToGenericContext(uint64_t result, const char *a2, const char *a3, uint64_t a4)
{
  _QWORD *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;

  if (result)
  {
    v7 = (_QWORD *)result;
    v8 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    v9 = malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    v10 = v9;
    if (v8 && v9)
    {
      v11 = v7[1];
      if (v11 && (v12 = v7[3]) != 0)
      {
        *(_QWORD *)(v11 + 112) = v9;
        v13 = (char **)(v12 + 112);
      }
      else
      {
        *v7 = v9;
        v13 = (char **)(v7 + 2);
      }
      *v13 = v8;
      v7[1] = v9;
      v7[3] = v8;
      *((_QWORD *)v8 + 14) = 0;
      *((_QWORD *)v9 + 14) = 0;
      snprintf(v9, 0x63uLL, "%s%s", a2, a3);
      v10[99] = 0;
      snprintf(v8, 0x63uLL, "%llu", a4);
      v8[99] = 0;
      *((_QWORD *)v8 + 13) = a4;
      return 1;
    }
    else
    {
      if (v8)
        free(v8);
      if (v10)
        free(v10);
      return 0;
    }
  }
  return result;
}

double ReleaseGenericParserCxt(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;

  if (a1)
  {
    v2 = *(_QWORD **)a1;
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)v2[14];
        free(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)v4[14];
        free(v4);
        v4 = v5;
      }
      while (v5);
    }
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t AddSingleValue(_QWORD *a1, const char *a2, const char *a3, uint64_t a4)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t result;

  v8 = (char *)malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  v9 = malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  v10 = v9;
  v11 = a1[1];
  if (v11 && (v12 = a1[3]) != 0)
  {
    *(_QWORD *)(v11 + 112) = v9;
    v13 = (char **)(v12 + 112);
  }
  else
  {
    *a1 = v9;
    v13 = (char **)(a1 + 2);
  }
  *v13 = v8;
  a1[1] = v9;
  a1[3] = v8;
  *((_QWORD *)v8 + 14) = 0;
  v9[14] = 0;
  snprintf((char *)v9, 0x63uLL, "%s%s", a2, a3);
  *((_BYTE *)v10 + 99) = 0;
  result = snprintf(v8, 0x63uLL, "%llu", a4);
  v8[99] = 0;
  *((_QWORD *)v8 + 13) = a4;
  return result;
}

BOOL ASPParseSnapshotBufferWithInplaceParser(uint64_t a1, uint64_t a2, char *a3, size_t *a4, _DWORD *a5, unsigned int *a6)
{
  int v9;
  size_t v10;
  uint64_t v11;
  tm *v12;
  unsigned int v13;
  size_t v14;
  _BOOL4 v15;
  char *v16;
  char *v17;
  size_t v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  size_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unsigned int *v39;
  const char *v40;
  int v41;
  int v42;
  const char *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  const char *v47;
  const char *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  const char *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL8 result;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  _DWORD *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  timeval v73;
  char v74[16];
  __int128 v75;
  char v76[8];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v74 = 0u;
  v75 = 0u;
  if (!a5)
    return 0;
  v9 = a5[3];
  v10 = *a4;
  v11 = a5[6];
  v73.tv_sec = 0;
  *(_QWORD *)&v73.tv_usec = 0;
  *(_QWORD *)v76 = 0;
  v77 = 0;
  v78 = 0;
  gettimeofday(&v73, 0);
  v12 = localtime(&v73.tv_sec);
  strftime(v76, 0x18uLL, "%Y-%m-%d %H:%M:%S", v12);
  __sprintf_chk(v74, 0, 0x20uLL, "%s.%03d", v76, v73.tv_usec / 1000);
  v13 = snprintf(a3, v10, "Captured at: %s\n", v74);
  v14 = v10 - v13;
  v15 = v10 <= v13;
  v16 = &a3[v13];
  v69 = a3;
  if (v10 > v13)
    v17 = &a3[v13];
  else
    v17 = a3;
  if (v10 > v13)
    v18 = v10 - v13;
  else
    v18 = v10;
  v68 = a5;
  if (*a6)
    goto LABEL_9;
  if (a5[1] >= 6u)
  {
    if (v10 > v13)
    {
      v62 = snprintf(&a3[v13], v14, "- ASP Snapshot - \n%s\n");
      goto LABEL_92;
    }
LABEL_94:
    v19 = 0;
    v15 = 1;
    goto LABEL_95;
  }
  if (v10 <= v13)
    goto LABEL_94;
  v62 = snprintf(&a3[v13], v14, "Key: \nT   - Timestamp\nE   - Erased bands during this time interval\nHR  - Host Reads (in 4k sectors)\nHW  - Host Writes (in 4k sectors)\nNR  - Nand Reads (in 4k sectors)\nNW  - Nand Writes (in 4k sectors)\nTH  - Time in Hysteresis in this time interval (in ms)\nGC  - Number of sectors (4k bytes) completed GC in this time interval\nW   - Number of wear level bands completed in this time interval\nBI  - Bands Intermediate (SLC) PendingErase\nBU  - Bands User (MLC) PendingErase\nV   - Number of Free Nodes\nBF  - Buffer Fragments/BufferHighWater\nP   - Percent of time in DoPreempt rather than DoNormal\nH   - Qos Delays: Normal/Extreme\nX   - Successful expedite commands/Failed expedite commands\n"
          "L   - Age of the oldest command in ms (calculated every second)/Qos Interval (in 100us units)\n"
          "C   - Command tags in use by host (Min/Max)S   - Number of free segs\n"
          "U   - Sectors of host unmaps\n"
          "RO  - Num read ops for this time interval: priority0/priority1/...\n"
          "RL  - Total Read Latency (in us) for this time interval: priority0/priority1/...\n"
          "RM  - Max Read Latency (int us) for this time interval: priority0/priority1/...\n"
          "WO  - Num write ops for this time interval: priority0/priority1/...\n"
          "WL  - Total write latency (in us) for this time interval: priority0/priority1/...\n"
          "WM  - Max write latency (in us) for this time interval: priority0/priority1/...\n"
          "\n");
LABEL_92:
  if (v14 <= v62)
    goto LABEL_94;
  v15 = 0;
  v17 = &v16[v62];
  v18 = v14 - v62;
LABEL_9:
  v19 = 0;
  v20 = v9 - 1;
  v21 = *a6;
  if (*a6 >= v9 - 1 || v15)
    goto LABEL_95;
  v19 = 0;
  v23 = a1;
  v22 = a5;
  v24 = (_DWORD *)((char *)a5 + v11);
  v25 = *v24;
  v64 = v9 - 1;
  v70 = v25;
  while (2)
  {
    v72 = v23 + v22[2] * v21;
    if (!*(_DWORD *)(v72 + v24[3]))
      goto LABEL_83;
    v65 = v19;
    if (!(_DWORD)v25)
      goto LABEL_81;
    v26 = 0;
    do
    {
      v27 = LOWORD(v24[7 * v26 + 2]);
      if (v27 < 2)
      {
        v39 = &v24[7 * v26];
        v42 = *((unsigned __int8 *)v39 + 20);
        v40 = (const char *)(v39 + 5);
        v41 = v42;
        if (!v42)
          goto LABEL_78;
        v43 = fmtcheck(v40, "%u");
        v44 = snprintf(v17, v18, v43, *(unsigned int *)(v72 + v24[7 * v26 + 3]), v63);
      }
      else
      {
        if (v27 != 2)
        {
          if (v27 == 3)
          {
            v28 = &v24[7 * v26];
            v29 = v28[4];
            v30 = v29 / 0xC;
            v71 = (char *)(v28 + 5);
            v31 = fmtcheck((const char *)v28 + 20, "%s");
            v32 = snprintf(v17, v18, v31, "O");
            v33 = v18 <= v32;
            if (v18 <= v32)
              v32 = 0;
            v17 += v32;
            v18 -= v32;
            if (v29 >= 0xC)
            {
              v34 = 0;
              if (v30 <= 1)
                v35 = 1;
              else
                v35 = v29 / 0xC;
              v36 = 12 * v35;
              do
              {
                if (v33)
                {
                  v33 = 1;
                }
                else
                {
                  if (v34)
                    v37 = snprintf(v17, v18, "/%4u");
                  else
                    v37 = snprintf(v17, v18, "%4u");
                  if (v18 <= v37)
                  {
                    v33 = 1;
                  }
                  else
                  {
                    v17 += v37;
                    v18 -= v37;
                    v33 = 0;
                  }
                }
                v34 += 12;
              }
              while (v36 != v34);
            }
            if (v33)
            {
              v38 = 1;
            }
            else
            {
              v48 = fmtcheck(v71, "%s");
              v49 = snprintf(v17, v18, v48, "L");
              if (v18 <= v49)
              {
                v38 = 1;
              }
              else
              {
                v17 += v49;
                v18 -= v49;
                v38 = 0;
              }
            }
            if (v29 >= 0xC)
            {
              v50 = 0;
              if (v30 <= 1)
                v51 = 1;
              else
                v51 = v29 / 0xC;
              v52 = 12 * v51;
              do
              {
                if ((v38 & 1) != 0)
                {
                  v38 = 1;
                }
                else
                {
                  if (v50)
                    v53 = snprintf(v17, v18, "/%7u");
                  else
                    v53 = snprintf(v17, v18, "%7u");
                  if (v18 <= v53)
                  {
                    v38 = 1;
                  }
                  else
                  {
                    v17 += v53;
                    v18 -= v53;
                    v38 = 0;
                  }
                }
                v50 += 12;
              }
              while (v52 != v50);
            }
            if ((v38 & 1) != 0)
            {
              v41 = 1;
            }
            else
            {
              v54 = fmtcheck(v71, "%s");
              v55 = snprintf(v17, v18, v54, "M");
              if (v18 <= v55)
              {
                v41 = 1;
              }
              else
              {
                v17 += v55;
                v18 -= v55;
                v41 = 0;
              }
            }
            v25 = v70;
            if (v29 >= 0xC)
            {
              v56 = 0;
              if (v30 <= 1)
                v57 = 1;
              else
                v57 = v30;
              v58 = 12 * v57;
              do
              {
                if ((v41 & 1) != 0)
                {
                  v41 = 1;
                }
                else
                {
                  if (v56)
                    v59 = snprintf(v17, v18, "/%5u");
                  else
                    v59 = snprintf(v17, v18, "%5u");
                  if (v18 <= v59)
                  {
                    v41 = 1;
                  }
                  else
                  {
                    v17 += v59;
                    v18 -= v59;
                    v41 = 0;
                  }
                }
                v56 += 12;
              }
              while (v58 != v56);
            }
          }
          else
          {
            v41 = 0;
          }
          goto LABEL_78;
        }
        v45 = &v24[7 * v26];
        v46 = *(_DWORD *)(v72 + v45[3]);
        v47 = fmtcheck((const char *)v45 + 20, "%u %u");
        v44 = snprintf(v17, v18, v47, v46 / 0x3E8uLL, v46 % 0x3E8 / 0xAuLL);
      }
      if (v18 <= v44)
        goto LABEL_89;
      v41 = 0;
      v17 += v44;
      v18 -= v44;
LABEL_78:
      ++v26;
    }
    while (v26 < v25 && !v41);
    if ((v41 & 1) == 0)
    {
LABEL_81:
      v60 = snprintf(v17, v18, "\n");
      if (v18 > v60)
      {
        v17 += v60;
        v18 -= v60;
        v19 = (char *)(v17 - v69);
        v23 = a1;
        v22 = v68;
        v20 = v64;
LABEL_83:
        v21 = *a6 + 1;
        *a6 = v21;
        if (v21 >= v20)
        {
          v15 = 0;
          goto LABEL_95;
        }
        continue;
      }
    }
    break;
  }
LABEL_89:
  ++*a6;
  v15 = 1;
  v19 = v65;
LABEL_95:
  result = !v15;
  v19[(_QWORD)v69] = 0;
  *a4 = (size_t)(v19 + 1);
  return result;
}

uint64_t ASPParseSnapshotBuffer(uint64_t a1, unint64_t a2, char *__str, size_t *a4)
{
  size_t *v4;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  char *v61;
  size_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  char *v66;
  size_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  char *v71;
  size_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  int v79;
  uint64_t v80;
  size_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;

  v4 = a4;
  v8 = *a4;
  v9 = snprintf(__str, *a4, "Key: \nT   - Timestamp\nE   - Erased bands during this time interval\nHR  - Host Reads (in 4k sectors)\nHW  - Host Writes (in 4k sectors)\nNR  - Nand Reads (in 4k sectors)\nNW  - Nand Writes (in 4k sectors)\nTH  - Time in Hysteresis in this time interval (in ms)\nGC  - Number of sectors (4k bytes) completed GC in this time interval\nW   - Number of wear level bands completed in this time interval\nBI  - Bands Intermediate (SLC) PendingErase\nBU  - Bands User (MLC) PendingErase\nV   - Number of Free Nodes\nBF  - Buffer Fragments/BufferHighWater\nP   - Percent of time in DoPreempt rather than DoNormal\nH   - Qos Delays: Normal/Extreme\nX   - Successful expedite commands/Failed expedite commands\n"
         "L   - Age of the oldest command in ms (calculated every second)/Qos Interval (in 100us units)\n"
         "C   - Command tags in use by host (Min/Max)S   - Number of free segs\n"
         "U   - Sectors of host unmaps\n"
         "RO  - Num read ops for this time interval: priority0/priority1/...\n"
         "RL  - Total Read Latency (in us) for this time interval: priority0/priority1/...\n"
         "RM  - Max Read Latency (int us) for this time interval: priority0/priority1/...\n"
         "WO  - Num write ops for this time interval: priority0/priority1/...\n"
         "WL  - Total write latency (in us) for this time interval: priority0/priority1/...\n"
         "WM  - Max write latency (in us) for this time interval: priority0/priority1/...\n"
         "\n");
  if (v8 > v9)
  {
    v10 = v9;
    v11 = &__str[v9];
    v12 = v8 - v10;
    if ((a2 / 0xF8))
    {
      v80 = (a2 / 0xF8);
      v81 = v4;
      v13 = 0;
      v14 = a1 + 68;
      v84 = a1 + 76;
      v85 = a1 + 72;
      v88 = a1;
      v82 = a1;
LABEL_4:
      v83 = v13;
      v15 = (int *)(a1 + 248 * v13);
      v87 = v15[26];
      v16 = v15[28];
      v86 = v15[27];
      v17 = v15[38];
      v18 = v15[39];
      v19 = v15[29];
      v20 = v15[30];
      v21 = v15[31];
      v22 = v15[32];
      v24 = v15[35];
      v23 = v15[36];
      v26 = v15[43];
      v25 = v15[44];
      v27 = v15[46];
      v28 = v15[47];
      v29 = *v15;
      v30 = v15[1];
      v31 = v15[49];
      v32 = v15[50];
      v34 = v15[41];
      v33 = v15[42];
      v36 = v15[52];
      v35 = v15[53];
      v37 = v15[40];
      v38 = v15[51];
      v40 = v15[14];
      v39 = v15 + 14;
      v79 = v34;
      v41 = v11;
      v42 = snprintf(v11, v12, "T=%04u E=%02u HR=%4u HW=%4u NR=%4u NW=%4u TH=%8u.%02u GC=%4u W=%2u BI=%3u BU=%3u V=%5u BF=%2u/%2u P=%2u H=%2u/%2u X=%2u/%2u L=%3u/%3u C=%2u/%2u S=%4u U=%8u RO=%4u", v29, v87, v86, v16, v19, v20, v17 / 0x3E8, v17 % 0x3E8 / 0xA, v21, v22, v24, v23, v25, v27, v28,
              v30,
              v37,
              v18,
              v31,
              v32,
              v33,
              v26,
              v36,
              v35,
              v79,
              v38,
              v40);
      if (v12 > v42)
      {
        v43 = 0;
        v44 = &v41[v42];
        v45 = v12 - v42;
        while (1)
        {
          v46 = snprintf(v44, v45, "/%4u", *(_DWORD *)(v14 + v43));
          if (v45 <= v46)
            break;
          v43 += 12;
          v44 += v46;
          v45 -= v46;
          if (v43 == 36)
          {
            v47 = snprintf(v44, v45, " RL=%7u", v39[1]);
            if (v45 > v47)
            {
              v48 = 0;
              v49 = &v44[v47];
              v50 = v45 - v47;
              while (1)
              {
                v51 = snprintf(v49, v50, "/%7u", *(_DWORD *)(v85 + v48));
                if (v50 <= v51)
                  break;
                v48 += 12;
                v49 += v51;
                v50 -= v51;
                if (v48 == 36)
                {
                  v52 = snprintf(v49, v50, " RM=%5u", v39[2]);
                  if (v50 > v52)
                  {
                    v53 = 0;
                    v54 = &v49[v52];
                    v55 = v50 - v52;
                    while (1)
                    {
                      v56 = snprintf(v54, v55, "/%5u", *(_DWORD *)(v84 + v53));
                      if (v55 <= v56)
                        break;
                      v53 += 12;
                      v54 += v56;
                      v55 -= v56;
                      if (v53 == 36)
                      {
                        v57 = v82 + 248 * v83;
                        v59 = *(_DWORD *)(v57 + 8);
                        v58 = v57 + 8;
                        v60 = snprintf(v54, v55, " WO=%4u", v59);
                        if (v55 > v60)
                        {
                          v61 = &v54[v60];
                          v62 = v55 - v60;
                          v63 = 20;
                          while (1)
                          {
                            v64 = snprintf(v61, v62, "/%4u", *(_DWORD *)(v88 + v63));
                            if (v62 <= v64)
                              break;
                            v63 += 12;
                            v61 += v64;
                            v62 -= v64;
                            if (v63 == 56)
                            {
                              v65 = snprintf(v61, v62, " WL=%7u", *(_DWORD *)(v58 + 4));
                              if (v62 > v65)
                              {
                                v66 = &v61[v65];
                                v67 = v62 - v65;
                                v68 = 24;
                                while (1)
                                {
                                  v69 = snprintf(v66, v67, "/%7u", *(_DWORD *)(v88 + v68));
                                  if (v67 <= v69)
                                    break;
                                  v68 += 12;
                                  v66 += v69;
                                  v67 -= v69;
                                  if (v68 == 60)
                                  {
                                    v70 = snprintf(v66, v67, " WM=%5u", *(_DWORD *)(v58 + 8));
                                    if (v67 > v70)
                                    {
                                      v71 = &v66[v70];
                                      v72 = v67 - v70;
                                      v73 = 28;
                                      while (1)
                                      {
                                        v74 = snprintf(v71, v72, "/%5u", *(_DWORD *)(v88 + v73));
                                        if (v72 <= v74)
                                          break;
                                        v73 += 12;
                                        v71 += v74;
                                        v72 -= v74;
                                        if (v73 == 64)
                                        {
                                          v75 = snprintf(v71, v72, "\n");
                                          if (v72 <= v75)
                                            return 0;
                                          v76 = v75;
                                          v11 = &v71[v75];
                                          v12 = v72 - v76;
                                          a1 = v82;
                                          v13 = v83 + 1;
                                          v14 += 248;
                                          v84 += 248;
                                          v85 += 248;
                                          v88 += 248;
                                          v4 = v81;
                                          if (v83 + 1 != v80)
                                            goto LABEL_4;
                                          goto LABEL_30;
                                        }
                                      }
                                    }
                                    return 0;
                                  }
                                }
                              }
                              return 0;
                            }
                          }
                        }
                        return 0;
                      }
                    }
                  }
                  return 0;
                }
              }
            }
            return 0;
          }
        }
      }
    }
    else
    {
LABEL_30:
      v77 = snprintf(v11, v12, "\n");
      if (v77 < v12)
      {
        *v4 += v77 - v12;
        return 1;
      }
    }
  }
  return 0;
}

CFArrayRef ASP_Get_Controller_UID()
{
  uint64_t *TunnelBuffer_simple;
  __CFArray *Mutable;
  unsigned int v2;
  CFArrayRef Copy;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  CFStringRef v7;
  unint64_t v9;
  char __str[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  TunnelBuffer_simple = (uint64_t *)fetchTunnelBuffer_simple(163, &v9);
  Mutable = 0;
  if (TunnelBuffer_simple)
  {
    v2 = v9;
    Copy = 0;
    if (v9 >= 8)
    {
      v4 = v9 >> 3;
      Mutable = CFArrayCreateMutable(0, v9 >> 3, 0);
      if (v2 >= 8)
      {
        v5 = TunnelBuffer_simple;
        do
        {
          v6 = *v5++;
          snprintf(__str, 0x40uLL, "%016llx", v6);
          v7 = CFStringCreateWithCString(0, __str, 0x8000100u);
          CFArrayAppendValue(Mutable, v7);
          --v4;
        }
        while (v4);
      }
      Copy = CFArrayCreateCopy(0, Mutable);
    }
    free(TunnelBuffer_simple);
  }
  else
  {
    Copy = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  return Copy;
}

CFArrayRef ASP_Get_Nand_ID()
{
  char *TunnelBuffer_simple;
  __CFArray *Mutable;
  unsigned int v2;
  CFArrayRef Copy;
  unsigned int v4;
  char *v5;
  CFNumberRef v6;
  unint64_t v8;

  v8 = 0;
  TunnelBuffer_simple = (char *)fetchTunnelBuffer_simple(56, &v8);
  Mutable = 0;
  if (TunnelBuffer_simple)
  {
    v2 = v8;
    Copy = 0;
    if (v8 >= 8)
    {
      v4 = v8 >> 3;
      Mutable = CFArrayCreateMutable(0, v8 >> 3, 0);
      if (v2 >= 8)
      {
        v5 = TunnelBuffer_simple;
        do
        {
          v6 = CFNumberCreate(0, kCFNumberSInt64Type, v5);
          CFArrayAppendValue(Mutable, v6);
          v5 += 8;
          --v4;
        }
        while (v4);
      }
      Copy = CFArrayCreateCopy(0, Mutable);
    }
    free(TunnelBuffer_simple);
  }
  else
  {
    Copy = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  return Copy;
}

uint64_t asp_data_extraction_helper(unsigned int a1, _QWORD *a2, _QWORD *a3)
{
  FILE *v4;
  const char *v5;
  size_t v6;
  uint64_t result;
  signed int v8;
  int v10;
  void *TunnelBuffer;
  uint64_t v12;

  v12 = 0;
  if (!a2 || !a3)
  {
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "Error: Exporting data must output to buffer externally!\n";
    v6 = 56;
    goto LABEL_6;
  }
  if (a1 <= 1)
  {
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "Error: system counters only supported on OSX\n";
    v6 = 45;
LABEL_6:
    fwrite(v5, v6, 1uLL, v4);
    return 0;
  }
  v8 = a1 - 3;
  if (a1 - 3 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: Not supported option %d\n", a1);
    return 0;
  }
  v10 = dword_1CB388490[v8];
  TunnelBuffer = fetchTunnelBuffer(0, v10, qword_1CB388458[v8], &v12, 0, 0);
  *a2 = TunnelBuffer;
  if (TunnelBuffer)
  {
    *a3 = v12;
    return 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: Failed to get tunnel buffer for cmd option %d.\n", v10);
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t getStatsMagazineBufferFromPast(char **a1, int a2, int a3, _QWORD *a4, _QWORD *a5)
{
  int v6;
  void *TunnelBufferWithInVal;
  uint64_t result;
  uint64_t v10;

  if (a3)
    v6 = 10;
  else
    v6 = 13;
  v10 = 0;
  if (a4 && a5)
  {
    TunnelBufferWithInVal = fetchTunnelBufferWithInVal(a1, v6, 0, a2, &v10, 0, 0);
    *a4 = TunnelBufferWithInVal;
    if (TunnelBufferWithInVal)
    {
      *a5 = v10;
      return 1;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: Failed to get tunnel buffer for cmd option %d.\n", v6);
      result = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("Error: Exporting data must output to buffer externally!\n", 0x38uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
  return result;
}

CFDictionaryRef ASP_GetIndirectionTableStatistics()
{
  const __CFDictionary *TunnelBuffer_simple;
  CFDictionaryRef v1;
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const __CFDictionary *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  const CFDictionaryKeyCallBacks *v10;
  const CFDictionaryValueCallBacks *v11;
  CFDictionaryRef v12;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t valuePtr;
  void *v18;
  void *values;
  CFTypeRef cf;
  CFTypeRef v21;
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  v18 = (void *)IND_POOL_KEY;
  v14 = 0;
  TunnelBuffer_simple = (const __CFDictionary *)fetchTunnelBuffer_simple(10, &v14);
  v1 = TunnelBuffer_simple;
  if (TunnelBuffer_simple)
  {
    v15 = 0.0;
    keys[0] = (void *)IND_POOL_SIZE_KEY;
    keys[1] = (void *)IND_POOL_FREE_KEY;
    keys[2] = (void *)IND_POOL_FULL_KEY;
    if ((v14 & 0xFFFFFFF8) != 0)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = TunnelBuffer_simple;
      do
      {
        v9 = *(_QWORD *)v6;
        v7 = (unint64_t *)((char *)v6 + 8);
        v8 = v9;
        if ((_DWORD)v9 == 12)
        {
          v4 = *v7;
          v2 = 1;
        }
        else if ((_DWORD)v8 == 13)
        {
          v5 = *v7;
          v3 = 1;
        }
        if ((v2 & v3 & 1) != 0)
          break;
        v6 = (const __CFDictionary *)&v7[HIDWORD(v8)];
      }
      while (v6 < (const __CFDictionary *)((char *)TunnelBuffer_simple + (v14 & 0xFFFFFFF8)));
      v16 = v4;
      valuePtr = v5;
      if (v5)
        v15 = 1.0 - (float)((float)v4 / (float)v5);
    }
    else
    {
      v16 = 0;
      valuePtr = 0;
    }
    values = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    cf = CFNumberCreate(0, kCFNumberSInt64Type, &v16);
    v21 = CFNumberCreate(0, kCFNumberFloat32Type, &v15);
    v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(values);
    CFRelease(cf);
    CFRelease(v21);
    free(v1);
    keys[0] = v12;
    v1 = CFDictionaryCreate(0, (const void **)&v18, (const void **)keys, 1, v10, v11);
    CFRelease(keys[0]);
  }
  return v1;
}

CFDictionaryRef ASP_GetNandPerfStats()
{
  _QWORD *v0;
  _QWORD *v1;
  CFDictionaryRef v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t i;
  void *values[3];
  void *keys[2];
  const __CFString *v17;
  statfs v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = malloc_type_calloc(1uLL, 0x2000uLL, 0xE89B26ACuLL);
  if (v0)
  {
    v1 = v0;
    v2 = 0;
    if (populateTunnelOutputBufferWithoutSizeQuery(0, 770, 0, v0, 0x2000uLL, 0, 0))
    {
      *(_OWORD *)keys = xmmword_1E8577AE8;
      v17 = CFSTR("ind_size_bytes");
      memset(values, 0, sizeof(values));
      memset(&v18, 0, 512);
      v3 = statfs("/private/var", &v18);
      v4 = 0;
      if (!v3)
      {
        v4 = v18.f_blocks * v18.f_bsize;
        if (v4)
          v4 = 100 * v18.f_bsize * (v18.f_blocks - v18.f_bavail) / v4;
      }
      v5 = 0;
      *(_QWORD *)&v18.f_bsize = v4;
      v6 = -1;
      v7 = -1;
      do
      {
        v8 = v1[v5];
        if (!v8)
          break;
        v9 = v5 + 1;
        if ((_DWORD)v8 == 12)
        {
          v7 = v1[v9];
        }
        else if ((_DWORD)v8 == 13)
        {
          v6 = v1[v9];
        }
        v5 = HIDWORD(v8) + v9;
      }
      while (v5 < 1024);
      v10 = 0;
      v18.f_blocks = v7;
      v18.f_bfree = v6;
      do
      {
        if (*((_QWORD *)&v18.f_bsize + v10) == -1)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Missing perf stat at idx %d", v10);
          v2 = 0;
          goto LABEL_21;
        }
        ++v10;
      }
      while (v10 != 3);
      v11 = 0;
      v18.f_blocks = 100 - 100 * v7 / v6;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        values[v11] = CFNumberCreate(v12, kCFNumberLongLongType, (char *)&v18 + v11 * 8);
        ++v11;
      }
      while (v11 != 3);
      v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_21:
      for (i = 0; i != 3; ++i)
        CFRelease(keys[i]);
    }
    free(v1);
  }
  else
  {
    fwrite("Cannot allocate buffer.\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
  return v2;
}

uint64_t print_asp_magazine_stats(char *a1, int a2, int a3)
{
  int v5;
  const char *v7;
  uint64_t v8;
  void *v9;

  v8 = 0;
  v9 = 0;
  if (getStatsMagazineBufferFromPast(0, a2, a3, &v9, &v8))
  {
    if (a3)
      v5 = 1;
    else
      v5 = 3;
    print_stats_buf(a1, (unint64_t *)v9, v8 >> 3, v5);
    free(v9);
    return 1;
  }
  else
  {
    v7 = "all";
    if (a3)
      v7 = "perm";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: IO NVMe Smart cmd failed to extract ASP %s stats!\n", v7);
    return 0;
  }
}

uint64_t print_stats_buf(char *__filename, unint64_t *a2, int a3, int a4)
{
  const char *v7;
  FILE *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t k;
  uint64_t v28;
  uint64_t m;
  uint64_t v30;
  uint64_t n;
  uint64_t v32;
  uint64_t ii;
  uint64_t v34;
  uint64_t jj;
  uint64_t v36;
  uint64_t kk;
  uint64_t v38;
  uint64_t mm;
  uint64_t v40;
  uint64_t nn;
  uint64_t v42;
  uint64_t i1;
  uint64_t v44;
  uint64_t i2;
  uint64_t v46;
  uint64_t i3;
  uint64_t v48;
  uint64_t i4;
  uint64_t v50;
  uint64_t i5;
  uint64_t v52;
  uint64_t i6;
  uint64_t v54;
  uint64_t i7;
  uint64_t v56;
  uint64_t i8;
  uint64_t v58;
  uint64_t i9;
  uint64_t v60;
  uint64_t i10;
  uint64_t v62;
  uint64_t i11;
  uint64_t v64;
  uint64_t i12;
  uint64_t v66;
  uint64_t i13;
  uint64_t v68;
  uint64_t i14;
  uint64_t v70;
  uint64_t i15;
  uint64_t v72;
  uint64_t i16;
  uint64_t v74;
  uint64_t i17;
  uint64_t v76;
  uint64_t i18;
  uint64_t v78;
  uint64_t i19;
  uint64_t v80;
  uint64_t i20;
  uint64_t v82;
  uint64_t i21;
  uint64_t v84;
  uint64_t i22;
  uint64_t v86;
  uint64_t i23;
  uint64_t v88;
  uint64_t i24;
  uint64_t v90;
  uint64_t i25;
  uint64_t v92;
  uint64_t i26;
  uint64_t v94;
  uint64_t i27;
  uint64_t v96;
  uint64_t i28;
  uint64_t v98;
  uint64_t i29;
  uint64_t v100;
  uint64_t i30;
  uint64_t v102;
  uint64_t i31;
  uint64_t v104;
  uint64_t i32;
  uint64_t v106;
  uint64_t i33;
  uint64_t v108;
  uint64_t i34;
  uint64_t v110;
  uint64_t i35;
  uint64_t v112;
  uint64_t i36;
  uint64_t v114;
  uint64_t i37;
  const char *v116;
  uint64_t v117;
  uint64_t i38;
  uint64_t v119;
  uint64_t i39;
  uint64_t v121;
  uint64_t i40;
  uint64_t v123;
  uint64_t i41;
  uint64_t v125;
  uint64_t i42;
  uint64_t v127;
  uint64_t i43;
  uint64_t v129;
  uint64_t i44;
  uint64_t v131;
  uint64_t i45;
  uint64_t v133;
  uint64_t i46;
  uint64_t v135;
  uint64_t i47;
  uint64_t v137;
  uint64_t i48;
  uint64_t v139;
  uint64_t i49;
  uint64_t v141;
  uint64_t i50;
  uint64_t v143;
  uint64_t i51;
  uint64_t v145;
  uint64_t i52;
  uint64_t v147;
  uint64_t i53;
  uint64_t v149;
  uint64_t i54;
  uint64_t v151;
  uint64_t i55;
  uint64_t v153;
  uint64_t i56;
  uint64_t v155;
  uint64_t i57;
  uint64_t v157;
  uint64_t i58;
  uint64_t v159;
  uint64_t i59;
  uint64_t v161;
  uint64_t i60;
  uint64_t v163;
  uint64_t i61;
  uint64_t v165;
  uint64_t i62;
  uint64_t v167;
  uint64_t i63;
  uint64_t v169;
  uint64_t i64;
  uint64_t v171;
  uint64_t i65;
  uint64_t v173;
  uint64_t i66;
  uint64_t v175;
  uint64_t i67;
  uint64_t v177;
  uint64_t i68;
  uint64_t v179;
  uint64_t i69;
  uint64_t v181;
  uint64_t i70;
  uint64_t v183;
  uint64_t i71;
  uint64_t v185;
  uint64_t i72;
  uint64_t v187;
  uint64_t i73;
  uint64_t v189;
  uint64_t i74;
  uint64_t v191;
  uint64_t i75;
  uint64_t v193;
  uint64_t i76;
  uint64_t v195;
  uint64_t i77;
  uint64_t v197;
  uint64_t i78;
  uint64_t v199;
  uint64_t i79;
  uint64_t v201;
  uint64_t i80;
  uint64_t v203;
  uint64_t i81;
  uint64_t v205;
  uint64_t i82;
  uint64_t v207;
  uint64_t i83;
  uint64_t v209;
  uint64_t i84;
  uint64_t v211;
  uint64_t i85;
  uint64_t v213;
  uint64_t i86;
  uint64_t v215;
  uint64_t i87;
  uint64_t v217;
  uint64_t i88;
  uint64_t v219;
  uint64_t i89;
  uint64_t v221;
  uint64_t i90;
  uint64_t v223;
  uint64_t i91;
  uint64_t v225;
  uint64_t i92;
  uint64_t v227;
  uint64_t i93;
  uint64_t v229;
  uint64_t i94;
  uint64_t v231;
  uint64_t i95;
  uint64_t v233;
  uint64_t i96;
  uint64_t v235;
  uint64_t i97;
  uint64_t v237;
  uint64_t i98;
  uint64_t v239;
  uint64_t i99;
  uint64_t v241;
  uint64_t i100;
  uint64_t v243;
  uint64_t i101;
  uint64_t v245;
  uint64_t i102;
  uint64_t v247;
  uint64_t i103;
  uint64_t v249;
  uint64_t i104;
  uint64_t v251;
  uint64_t i105;
  uint64_t v253;
  uint64_t i106;
  uint64_t v255;
  uint64_t i107;
  uint64_t v257;
  uint64_t i108;
  uint64_t v259;
  uint64_t i109;
  uint64_t v261;
  uint64_t i110;
  uint64_t v263;
  uint64_t i111;
  uint64_t v265;
  uint64_t i112;
  uint64_t v267;
  uint64_t i113;
  uint64_t v269;
  uint64_t i114;
  uint64_t v271;
  uint64_t i115;
  uint64_t v273;
  uint64_t i116;
  uint64_t v275;
  uint64_t i117;
  uint64_t v277;
  uint64_t i118;
  uint64_t v279;
  uint64_t i119;
  uint64_t v281;
  uint64_t i120;
  uint64_t v283;
  uint64_t i121;
  uint64_t v285;
  uint64_t i122;
  uint64_t v287;
  uint64_t i123;
  uint64_t v289;
  uint64_t i124;
  uint64_t v291;
  uint64_t i125;
  uint64_t v293;
  uint64_t i126;
  uint64_t v295;
  uint64_t i127;
  uint64_t v297;
  uint64_t i128;
  uint64_t v299;
  uint64_t i129;
  uint64_t v301;
  uint64_t i130;
  uint64_t v303;
  uint64_t i131;
  uint64_t v305;
  uint64_t i132;
  uint64_t v307;
  uint64_t i133;
  uint64_t v309;
  uint64_t i134;
  uint64_t v311;
  uint64_t i135;
  uint64_t v313;
  uint64_t i136;
  uint64_t v315;
  uint64_t i137;
  uint64_t v317;
  uint64_t i138;
  uint64_t v319;
  uint64_t i139;
  uint64_t v321;
  uint64_t i140;
  uint64_t v323;
  uint64_t i141;
  uint64_t v325;
  uint64_t i142;
  uint64_t v327;
  uint64_t i143;
  uint64_t v329;
  uint64_t i144;
  uint64_t v331;
  uint64_t i145;
  uint64_t v333;
  uint64_t i146;
  uint64_t v335;
  uint64_t i147;
  uint64_t v337;
  uint64_t i148;
  uint64_t v339;
  uint64_t i149;
  uint64_t v341;
  uint64_t i150;
  uint64_t v343;
  uint64_t i151;
  uint64_t v345;
  uint64_t i152;
  uint64_t v347;
  uint64_t i153;
  uint64_t v349;
  uint64_t i154;
  uint64_t v351;
  uint64_t i155;
  uint64_t v353;
  uint64_t i156;
  uint64_t v355;
  uint64_t i157;
  uint64_t v357;
  uint64_t i158;
  uint64_t v359;
  uint64_t i159;
  uint64_t v361;
  uint64_t i160;
  uint64_t v363;
  uint64_t i161;
  uint64_t v365;
  uint64_t i162;
  uint64_t v367;
  uint64_t i163;
  uint64_t v369;
  uint64_t i164;
  uint64_t v371;
  uint64_t i165;
  uint64_t v373;
  uint64_t i166;
  uint64_t v375;
  uint64_t i167;
  uint64_t v377;
  uint64_t i168;
  uint64_t v379;
  uint64_t i169;
  uint64_t v381;
  uint64_t i170;
  uint64_t v383;
  uint64_t i171;
  uint64_t v385;
  uint64_t i172;
  uint64_t v387;
  uint64_t i173;
  uint64_t v389;
  uint64_t i174;
  uint64_t v391;
  uint64_t i175;
  uint64_t v393;
  uint64_t i176;
  uint64_t v395;
  uint64_t i177;
  uint64_t v397;
  uint64_t i178;
  uint64_t v399;
  uint64_t i179;
  uint64_t v401;
  uint64_t i180;
  uint64_t v403;
  uint64_t i181;
  uint64_t v405;
  uint64_t i182;
  uint64_t v407;
  uint64_t i183;
  uint64_t v409;
  uint64_t i184;
  uint64_t v411;
  uint64_t i185;
  uint64_t v413;
  uint64_t i186;
  uint64_t v415;
  uint64_t i187;
  uint64_t v417;
  uint64_t i188;
  uint64_t v419;
  uint64_t i189;
  uint64_t v421;
  uint64_t i190;
  uint64_t v423;
  uint64_t i191;
  uint64_t v425;
  uint64_t i192;
  uint64_t v427;
  uint64_t i193;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unsigned int v433;
  unint64_t v434;
  _BYTE v435[12];
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;

  v7 = __filename;
  if (__filename)
  {
    v8 = fopen(__filename, "a");
    if (!v8)
      return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v7);
  }
  else
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C20];
  }
  fwrite("NAND stats:\n", 0xCuLL, 1uLL, v8);
  result = fwrite("===========\n", 0xCuLL, 1uLL, v8);
  if (!a3)
    goto LABEL_3139;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v436 = 0;
  v437 = 0;
  *(_QWORD *)v435 = a4 & 3;
  while (1)
  {
    v16 = *a2;
    v15 = a2 + 1;
    v14 = v16;
    v17 = a3 - 1;
    v438 = HIDWORD(v16);
    if (v17 < HIDWORD(v16))
      break;
    if (v14 > 49)
    {
      if (v14 > 128)
      {
        if (v14 == 129)
        {
          v11 = *v15;
          goto LABEL_31;
        }
        if (v14 == 677)
        {
          v10 = *v15;
          goto LABEL_31;
        }
      }
      else
      {
        if (v14 == 50)
        {
          *(_QWORD *)&v435[4] = *v15;
          goto LABEL_31;
        }
        if (v14 == 84)
        {
          v12 = *v15;
          goto LABEL_31;
        }
      }
    }
    else if (v14 > 19)
    {
      if (v14 == 20)
      {
        v436 = *v15;
        goto LABEL_31;
      }
      if (v14 == 49)
      {
        v13 = *v15;
        goto LABEL_31;
      }
    }
    else
    {
      if (v14 == 1)
      {
        result = fprintf(v8, "%20s:\t0x%llx\n");
        goto LABEL_32;
      }
      if (v14 == 4)
      {
        v437 = *v15;
LABEL_31:
        result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_32;
      }
    }
    if ((a4 & 1) != 0 && v14 == 678 || (a4 & 1) != 0 && v14 == 679)
      goto LABEL_31;
    if ((a4 & 1) != 0 && v14 == 680)
    {
      v433 = v17;
      v18 = v13;
      v19 = v11;
      result = fprintf(v8, "%20s:\n", "magazineFWVersion");
      if (v438 >= 3)
        v20 = 3;
      else
        v20 = v438;
      if ((_DWORD)v20)
      {
        v431 = v10;
        for (i = 0; i != v20; ++i)
          result = fprintf(v8, "                      [%d] = %llu\n", i, v15[i]);
        v10 = v431;
      }
      v11 = v19;
      v13 = v18;
      v17 = v433;
      goto LABEL_32;
    }
    if ((a4 & 1) != 0 && v14 == 2
      || (a4 & 1) != 0 && v14 == 3
      || (a4 & 1) != 0 && v14 == 5
      || (a4 & 1) != 0 && v14 == 6
      || (a4 & 1) != 0 && v14 == 27
      || (a4 & 1) != 0 && v14 == 99
      || (a4 & 1) != 0 && v14 == 107
      || (a4 & 1) != 0 && v14 == 1066
      || (a4 & 1) != 0 && v14 == 191
      || (a4 & 1) != 0 && v14 == 7)
    {
      goto LABEL_31;
    }
    v434 = v11;
    v432 = a4;
    if ((a4 & 1) == 0 || v14 != 8)
    {
      v22 = v7;
      v23 = v10;
      if ((v432 & 1) != 0 && v14 == 9
        || (v432 & 1) != 0 && v14 == 10
        || (v432 & 1) != 0 && v14 == 11
        || (v432 & 1) != 0 && v14 == 12
        || (v432 & 1) != 0 && v14 == 895
        || (v432 & 1) != 0 && v14 == 13
        || (v432 & 2) != 0 && v14 == 739)
      {
LABEL_81:
        result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 14)
      {
        result = fprintf(v8, "%20s:\n", "hostWriteLogHisto");
        if (v438 >= 0xA)
          v24 = 10;
        else
          v24 = v438;
        if ((_DWORD)v24)
        {
          for (j = 0; j != v24; ++j)
            result = fprintf(v8, "                      [%d] = %llu\n", j, v15[j]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 15)
      {
        result = fprintf(v8, "%20s:\n", "hostReadLogHisto");
        if (v438 >= 0xA)
          v26 = 10;
        else
          v26 = v438;
        if ((_DWORD)v26)
        {
          for (k = 0; k != v26; ++k)
            result = fprintf(v8, "                      [%d] = %llu\n", k, v15[k]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 17
        || (v432 & 1) != 0 && v14 == 18
        || (v432 & 1) != 0 && v14 == 19
        || (v432 & 1) != 0 && v14 == 916
        || (v432 & 1) != 0 && v14 == 917
        || (v432 & 1) != 0 && v14 == 1024
        || (v432 & 1) != 0 && v14 == 414
        || (v432 & 1) != 0 && v14 == 22
        || (v432 & 1) != 0 && v14 == 23
        || (v432 & 1) != 0 && v14 == 24
        || (v432 & 1) != 0 && v14 == 404
        || (v432 & 1) != 0 && v14 == 817
        || (v432 & 1) != 0 && v14 == 818
        || (v432 & 1) != 0 && v14 == 819
        || (v432 & 1) != 0 && v14 == 820
        || (v432 & 1) != 0 && v14 == 28
        || (v432 & 1) != 0 && v14 == 30
        || (v432 & 1) != 0 && v14 == 31
        || (v432 & 1) != 0 && v14 == 337
        || (v432 & 1) != 0 && v14 == 34
        || (v432 & 1) != 0 && v14 == 92
        || (v432 & 1) != 0 && v14 == 36
        || (v432 & 1) != 0 && v14 == 37
        || (v432 & 1) != 0 && v14 == 190
        || (v432 & 1) != 0 && v14 == 38
        || (v432 & 1) != 0 && v14 == 39
        || (v432 & 1) != 0 && v14 == 41
        || (v432 & 1) != 0 && v14 == 42
        || (v432 & 1) != 0 && v14 == 43
        || (v432 & 1) != 0 && v14 == 44
        || (v432 & 1) != 0 && v14 == 996
        || (v432 & 1) != 0 && v14 == 997
        || (v432 & 1) != 0 && v14 == 998
        || (v432 & 1) != 0 && v14 == 999
        || (v432 & 1) != 0 && v14 == 45
        || (v432 & 1) != 0 && v14 == 334
        || (v432 & 2) != 0 && v14 == 198
        || (v432 & 2) != 0 && v14 == 46
        || (v432 & 1) != 0 && v14 == 47
        || (v432 & 1) != 0 && v14 == 379
        || (v432 & 1) != 0 && v14 == 48
        || (v432 & 2) != 0 && v14 == 51
        || (v432 & 2) != 0 && v14 == 52
        || (v432 & 2) != 0 && v14 == 53)
      {
        goto LABEL_81;
      }
      if ((v432 & 2) != 0 && v14 == 54)
      {
        result = fprintf(v8, "%20s:\n", "ECBins");
        if (v438 >= 0x64)
          v28 = 100;
        else
          v28 = v438;
        if ((_DWORD)v28)
        {
          for (m = 0; m != v28; ++m)
            result = fprintf(v8, "                      [%d] = %llu\n", m, v15[m]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 55)
      {
        result = fprintf(v8, "%20s:\n", "RCBins");
        if (v438 >= 0x64)
          v30 = 100;
        else
          v30 = v438;
        if ((_DWORD)v30)
        {
          for (n = 0; n != v30; ++n)
            result = fprintf(v8, "                      [%d] = %llu\n", n, v15[n]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 56
        || (v432 & 2) != 0 && v14 == 57
        || (v432 & 2) != 0 && v14 == 58
        || (v432 & 2) != 0 && v14 == 791
        || (v432 & 1) != 0 && v14 == 1189)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1190)
      {
        result = fprintf(v8, "%20s:\n", "powerDownTime");
        if (v438 >= 0xB)
          v32 = 11;
        else
          v32 = v438;
        if ((_DWORD)v32)
        {
          for (ii = 0; ii != v32; ++ii)
            result = fprintf(v8, "                      [%d] = %llu\n", ii, v15[ii]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 1244)
        goto LABEL_81;
      if ((v432 & 1) != 0 && v14 == 90)
      {
        result = fprintf(v8, "%20s:\n", "qosPerCmdQ");
        if (v438 >= 0xA0)
          v34 = 160;
        else
          v34 = v438;
        if ((_DWORD)v34)
        {
          for (jj = 0; jj != v34; ++jj)
            result = fprintf(v8, "                      [%d] = %llu\n", jj, v15[jj]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 91)
      {
        result = fprintf(v8, "%20s:\n", "maxQosPerCmdQ");
        if (v438 >= 0xA)
          v36 = 10;
        else
          v36 = v438;
        if ((_DWORD)v36)
        {
          for (kk = 0; kk != v36; ++kk)
            result = fprintf(v8, "                      [%d] = %llu\n", kk, v15[kk]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 59
        || (v432 & 2) != 0 && v14 == 60
        || (v432 & 2) != 0 && v14 == 61
        || (v432 & 2) != 0 && v14 == 62
        || (v432 & 2) != 0 && v14 == 63
        || (v432 & 2) != 0 && v14 == 64
        || (v432 & 2) != 0 && v14 == 65
        || (v432 & 2) != 0 && v14 == 66
        || (v432 & 2) != 0 && v14 == 67
        || (v432 & 2) != 0 && v14 == 68
        || (v432 & 2) != 0 && v14 == 69
        || (v432 & 2) != 0 && v14 == 70
        || (v432 & 2) != 0 && v14 == 109
        || (v432 & 2) != 0 && v14 == 71
        || (v432 & 2) != 0 && v14 == 72
        || (v432 & 1) != 0 && v14 == 73
        || (v432 & 1) != 0 && v14 == 75
        || (v432 & 1) != 0 && v14 == 76
        || (v432 & 1) != 0 && v14 == 77)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 265)
      {
        result = fprintf(v8, "%20s:\n", "readCountHisto");
        if (v438 >= 5)
          v38 = 5;
        else
          v38 = v438;
        if ((_DWORD)v38)
        {
          for (mm = 0; mm != v38; ++mm)
            result = fprintf(v8, "                      [%d] = %llu\n", mm, v15[mm]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 80
        || (v432 & 1) != 0 && v14 == 81
        || (v432 & 1) != 0 && v14 == 82
        || (v432 & 1) != 0 && v14 == 1019
        || (v432 & 2) != 0 && v14 == 85
        || (v432 & 2) != 0 && v14 == 86
        || (v432 & 1) != 0 && v14 == 87)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1215)
      {
        result = fprintf(v8, "%20s:\n", "hostWritesPerThrottleZone");
        if (v438 >= 5)
          v40 = 5;
        else
          v40 = v438;
        if ((_DWORD)v40)
        {
          for (nn = 0; nn != v40; ++nn)
            result = fprintf(v8, "                      [%d] = %llu\n", nn, v15[nn]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 93)
      {
        result = fprintf(v8, "%20s:\n", "numBandsRefreshedForAgePerTier");
        if (v438 >= 3)
          v42 = 3;
        else
          v42 = v438;
        if ((_DWORD)v42)
        {
          for (i1 = 0; i1 != v42; ++i1)
            result = fprintf(v8, "                      [%d] = %llu\n", i1, v15[i1]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 94)
      {
        result = fprintf(v8, "%20s:\n", "bdrDeltaHot");
        if (v438 >= 0x14)
          v44 = 20;
        else
          v44 = v438;
        if ((_DWORD)v44)
        {
          for (i2 = 0; i2 != v44; ++i2)
            result = fprintf(v8, "                      [%d] = %llu\n", i2, v15[i2]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 112
        || (v432 & 1) != 0 && v14 == 95
        || (v432 & 1) != 0 && v14 == 96
        || (v432 & 1) != 0 && v14 == 381
        || (v432 & 1) != 0 && v14 == 130
        || (v432 & 1) != 0 && v14 == 97
        || (v432 & 1) != 0 && v14 == 98
        || (v432 & 4) != 0 && v14 == 106
        || (v432 & 4) != 0 && v14 == 100
        || (v432 & 4) != 0 && v14 == 101
        || (v432 & 4) != 0 && v14 == 102
        || (v432 & 4) != 0 && v14 == 103
        || (v432 & 4) != 0 && v14 == 104
        || (v432 & 4) != 0 && v14 == 105
        || (v432 & 2) != 0 && v14 == 110)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 113)
      {
        result = fprintf(v8, "%20s:\n", "bandsPerHostFlow");
        if (v438 >= 4)
          v46 = 4;
        else
          v46 = v438;
        if ((_DWORD)v46)
        {
          for (i3 = 0; i3 != v46; ++i3)
            result = fprintf(v8, "                      [%d] = %llu\n", i3, v15[i3]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 114)
      {
        result = fprintf(v8, "%20s:\n", "bandsPerSpecialFlow");
        if (v438 >= 5)
          v48 = 5;
        else
          v48 = v438;
        if ((_DWORD)v48)
        {
          for (i4 = 0; i4 != v48; ++i4)
            result = fprintf(v8, "                      [%d] = %llu\n", i4, v15[i4]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 115)
      {
        result = fprintf(v8, "%20s:\n", "secsPerHostFlow");
        if (v438 >= 4)
          v50 = 4;
        else
          v50 = v438;
        if ((_DWORD)v50)
        {
          for (i5 = 0; i5 != v50; ++i5)
            result = fprintf(v8, "                      [%d] = %llu\n", i5, v15[i5]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 116)
      {
        result = fprintf(v8, "%20s:\n", "secsPerSpecialFlow");
        if (v438 >= 5)
          v52 = 5;
        else
          v52 = v438;
        if ((_DWORD)v52)
        {
          for (i6 = 0; i6 != v52; ++i6)
            result = fprintf(v8, "                      [%d] = %llu\n", i6, v15[i6]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 118)
      {
        result = fprintf(v8, "%20s:\n", "overWritesPerHostFlow");
        if (v438 >= 4)
          v54 = 4;
        else
          v54 = v438;
        if ((_DWORD)v54)
        {
          for (i7 = 0; i7 != v54; ++i7)
            result = fprintf(v8, "                      [%d] = %llu\n", i7, v15[i7]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 119)
      {
        result = fprintf(v8, "%20s:\n", "overWritesPerSpecialFlow");
        if (v438 >= 5)
          v56 = 5;
        else
          v56 = v438;
        if ((_DWORD)v56)
        {
          for (i8 = 0; i8 != v56; ++i8)
            result = fprintf(v8, "                      [%d] = %llu\n", i8, v15[i8]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 120)
      {
        result = fprintf(v8, "%20s:\n", "padSectorsPerFlow");
        if (v438 >= 0xA)
          v58 = 10;
        else
          v58 = v438;
        if ((_DWORD)v58)
        {
          for (i9 = 0; i9 != v58; ++i9)
            result = fprintf(v8, "                      [%d] = %llu\n", i9, v15[i9]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 121)
      {
        result = fprintf(v8, "%20s:\n", "padSizes");
        if (v438 >= 4)
          v60 = 4;
        else
          v60 = v438;
        if ((_DWORD)v60)
        {
          for (i10 = 0; i10 != v60; ++i10)
            result = fprintf(v8, "                      [%d] = %llu\n", i10, v15[i10]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 740)
        goto LABEL_81;
      if ((v432 & 1) != 0 && v14 == 122)
      {
        result = fprintf(v8, "%20s:\n", "unmapsPerHostFlow");
        if (v438 >= 4)
          v62 = 4;
        else
          v62 = v438;
        if ((_DWORD)v62)
        {
          for (i11 = 0; i11 != v62; ++i11)
            result = fprintf(v8, "                      [%d] = %llu\n", i11, v15[i11]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 123)
      {
        result = fprintf(v8, "%20s:\n", "unmapsPerSpecialFlow");
        if (v438 >= 5)
          v64 = 5;
        else
          v64 = v438;
        if ((_DWORD)v64)
        {
          for (i12 = 0; i12 != v64; ++i12)
            result = fprintf(v8, "                      [%d] = %llu\n", i12, v15[i12]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 124)
      {
        result = fprintf(v8, "%20s:\n", "coldestCycle");
        if (v438 >= 2)
          v66 = 2;
        else
          v66 = v438;
        if ((_DWORD)v66)
        {
          for (i13 = 0; i13 != v66; ++i13)
            result = fprintf(v8, "                      [%d] = %llu\n", i13, v15[i13]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 503)
      {
        result = fprintf(v8, "%20s:\n", "avgCycle");
        if (v438 >= 2)
          v68 = 2;
        else
          v68 = v438;
        if ((_DWORD)v68)
        {
          for (i14 = 0; i14 != v68; ++i14)
            result = fprintf(v8, "                      [%d] = %llu\n", i14, v15[i14]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 125)
      {
        result = fprintf(v8, "%20s:\n", "hottestCycle");
        if (v438 >= 2)
          v70 = 2;
        else
          v70 = v438;
        if ((_DWORD)v70)
        {
          for (i15 = 0; i15 != v70; ++i15)
            result = fprintf(v8, "                      [%d] = %llu\n", i15, v15[i15]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 16
        || (v432 & 1) != 0 && v14 == 126
        || (v432 & 1) != 0 && v14 == 139
        || (v432 & 1) != 0 && v14 == 576
        || (v432 & 1) != 0 && v14 == 604
        || (v432 & 1) != 0 && v14 == 721
        || (v432 & 1) != 0 && v14 == 722
        || (v432 & 1) != 0 && v14 == 723
        || (v432 & 1) != 0 && v14 == 724
        || (v432 & 1) != 0 && v14 == 726
        || (v432 & 1) != 0 && v14 == 140
        || (v432 & 1) != 0 && v14 == 346)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 131)
      {
        result = fprintf(v8, "%20s:\n", "errInjCounters");
        if (v438 >= 8)
          v72 = 8;
        else
          v72 = v438;
        if ((_DWORD)v72)
        {
          for (i16 = 0; i16 != v72; ++i16)
            result = fprintf(v8, "                      [%d] = %llu\n", i16, v15[i16]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 962
        || (v432 & 1) != 0 && v14 == 132
        || (v432 & 1) != 0 && v14 == 133
        || (v432 & 1) != 0 && v14 == 135
        || (v432 & 1) != 0 && v14 == 388
        || (v432 & 1) != 0 && v14 == 389
        || (v432 & 1) != 0 && v14 == 390
        || (v432 & 1) != 0 && v14 == 391
        || (v432 & 1) != 0 && v14 == 392
        || (v432 & 1) != 0 && v14 == 393
        || (v432 & 1) != 0 && v14 == 394
        || (v432 & 1) != 0 && v14 == 395
        || (v432 & 1) != 0 && v14 == 586
        || (v432 & 1) != 0 && v14 == 587
        || (v432 & 1) != 0 && v14 == 760
        || (v432 & 1) != 0 && v14 == 761
        || (v432 & 1) != 0 && v14 == 762
        || (v432 & 1) != 0 && v14 == 763
        || (v432 & 1) != 0 && v14 == 134
        || (v432 & 1) != 0 && v14 == 400)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 476)
      {
        result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoLbaRange");
        if (v438 >= 2)
          v74 = 2;
        else
          v74 = v438;
        if ((_DWORD)v74)
        {
          for (i17 = 0; i17 != v74; ++i17)
            result = fprintf(v8, "                      [%d] = %llu\n", i17, v15[i17]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 477)
      {
        result = fprintf(v8, "%20s:\n", "raidFailedRecoLbaRange");
        if (v438 >= 2)
          v76 = 2;
        else
          v76 = v438;
        if ((_DWORD)v76)
        {
          for (i18 = 0; i18 != v76; ++i18)
            result = fprintf(v8, "                      [%d] = %llu\n", i18, v15[i18]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 630)
      {
        result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoEAN");
        if (v438 >= 6)
          v78 = 6;
        else
          v78 = v438;
        if ((_DWORD)v78)
        {
          for (i19 = 0; i19 != v78; ++i19)
            result = fprintf(v8, "                      [%d] = %llu\n", i19, v15[i19]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 631)
      {
        result = fprintf(v8, "%20s:\n", "raidFailedRecoEAN");
        if (v438 >= 6)
          v80 = 6;
        else
          v80 = v438;
        if ((_DWORD)v80)
        {
          for (i20 = 0; i20 != v80; ++i20)
            result = fprintf(v8, "                      [%d] = %llu\n", i20, v15[i20]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 644
        || (v432 & 1) != 0 && v14 == 645
        || (v432 & 1) != 0 && v14 == 646
        || (v432 & 1) != 0 && v14 == 647
        || (v432 & 1) != 0 && v14 == 648
        || (v432 & 1) != 0 && v14 == 649
        || (v432 & 1) != 0 && v14 == 864
        || (v432 & 1) != 0 && v14 == 862
        || (v432 & 1) != 0 && v14 == 863
        || (v432 & 2) != 0 && v14 == 813
        || (v432 & 1) != 0 && v14 == 697
        || (v432 & 1) != 0 && v14 == 698
        || (v432 & 1) != 0 && v14 == 712
        || (v432 & 1) != 0 && v14 == 713
        || (v432 & 1) != 0 && v14 == 737
        || (v432 & 1) != 0 && v14 == 738
        || (v432 & 1) != 0 && v14 == 714
        || (v432 & 1) != 0 && v14 == 715
        || (v432 & 1) != 0 && v14 == 716
        || (v432 & 1) != 0 && v14 == 717
        || (v432 & 1) != 0 && v14 == 829)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 891)
      {
        result = fprintf(v8, "%20s:\n", "turboRaidSuccessAuxPartition");
        if (v438 >= 2)
          v82 = 2;
        else
          v82 = v438;
        if ((_DWORD)v82)
        {
          for (i21 = 0; i21 != v82; ++i21)
            result = fprintf(v8, "                      [%d] = %llu\n", i21, v15[i21]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 892)
      {
        result = fprintf(v8, "%20s:\n", "turboRaidFailAuxPartition");
        if (v438 >= 2)
          v84 = 2;
        else
          v84 = v438;
        if ((_DWORD)v84)
        {
          for (i22 = 0; i22 != v84; ++i22)
            result = fprintf(v8, "                      [%d] = %llu\n", i22, v15[i22]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 893)
      {
        result = fprintf(v8, "%20s:\n", "turboRaidClassifyQualPartition");
        if (v438 >= 2)
          v86 = 2;
        else
          v86 = v438;
        if ((_DWORD)v86)
        {
          for (i23 = 0; i23 != v86; ++i23)
            result = fprintf(v8, "                      [%d] = %llu\n", i23, v15[i23]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 894)
      {
        result = fprintf(v8, "%20s:\n", "turboRaidClassifyRelPartition");
        if (v438 >= 2)
          v88 = 2;
        else
          v88 = v438;
        if ((_DWORD)v88)
        {
          for (i24 = 0; i24 != v88; ++i24)
            result = fprintf(v8, "                      [%d] = %llu\n", i24, v15[i24]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 900
        || (v432 & 1) != 0 && v14 == 901
        || (v432 & 1) != 0 && v14 == 902
        || (v432 & 1) != 0 && v14 == 903
        || (v432 & 1) != 0 && v14 == 904
        || (v432 & 1) != 0 && v14 == 947
        || (v432 & 1) != 0 && v14 == 1133
        || (v432 & 1) != 0 && v14 == 1134
        || (v432 & 1) != 0 && v14 == 1135
        || (v432 & 1) != 0 && v14 == 1136
        || (v432 & 1) != 0 && v14 == 362
        || (v432 & 1) != 0 && v14 == 396
        || (v432 & 1) != 0 && v14 == 398
        || (v432 & 1) != 0 && v14 == 397
        || (v432 & 1) != 0 && v14 == 399
        || (v432 & 1) != 0 && v14 == 405
        || (v432 & 1) != 0 && v14 == 403
        || (v432 & 1) != 0 && v14 == 573
        || (v432 & 1) != 0 && v14 == 197
        || (v432 & 1) != 0 && v14 == 136
        || (v432 & 1) != 0 && v14 == 137
        || (v432 & 1) != 0 && v14 == 444
        || (v432 & 1) != 0 && v14 == 445
        || (v432 & 1) != 0 && v14 == 964
        || (v432 & 1) != 0 && v14 == 965
        || (v432 & 1) != 0 && v14 == 440
        || (v432 & 1) != 0 && v14 == 960
        || (v432 & 1) != 0 && v14 == 441
        || (v432 & 1) != 0 && v14 == 442
        || (v432 & 1) != 0 && v14 == 443
        || (v432 & 1) != 0 && v14 == 382
        || (v432 & 1) != 0 && v14 == 659
        || (v432 & 1) != 0 && v14 == 172
        || (v432 & 1) != 0 && v14 == 416
        || (v432 & 1) != 0 && v14 == 417)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 406)
      {
        result = fprintf(v8, "%20s:\n", "raidReconstructSuccessFlow");
        if (v438 >= 5)
          v90 = 5;
        else
          v90 = v438;
        if ((_DWORD)v90)
        {
          for (i25 = 0; i25 != v90; ++i25)
            result = fprintf(v8, "                      [%d] = %llu\n", i25, v15[i25]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 407)
      {
        result = fprintf(v8, "%20s:\n", "raidReconstructFailFlow");
        if (v438 >= 5)
          v92 = 5;
        else
          v92 = v438;
        if ((_DWORD)v92)
        {
          for (i26 = 0; i26 != v92; ++i26)
            result = fprintf(v8, "                      [%d] = %llu\n", i26, v15[i26]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 472
        || (v432 & 1) != 0 && v14 == 473
        || (v432 & 1) != 0 && v14 == 639
        || (v432 & 1) != 0 && v14 == 640)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 469)
      {
        result = fprintf(v8, "%20s:\n", "raidReconstructSuccessPartition");
        if (v438 >= 2)
          v94 = 2;
        else
          v94 = v438;
        if ((_DWORD)v94)
        {
          for (i27 = 0; i27 != v94; ++i27)
            result = fprintf(v8, "                      [%d] = %llu\n", i27, v15[i27]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 470)
      {
        result = fprintf(v8, "%20s:\n", "raidReconstructFailPartition");
        if (v438 >= 2)
          v96 = 2;
        else
          v96 = v438;
        if ((_DWORD)v96)
        {
          for (i28 = 0; i28 != v96; ++i28)
            result = fprintf(v8, "                      [%d] = %llu\n", i28, v15[i28]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 408
        || (v432 & 1) != 0 && v14 == 409
        || (v432 & 1) != 0 && v14 == 786
        || (v432 & 1) != 0 && v14 == 787
        || (v432 & 1) != 0 && v14 == 410
        || (v432 & 1) != 0 && v14 == 788
        || (v432 & 1) != 0 && v14 == 411
        || (v432 & 1) != 0 && v14 == 510
        || (v432 & 1) != 0 && v14 == 566
        || (v432 & 1) != 0 && v14 == 567
        || (v432 & 1) != 0 && v14 == 570
        || (v432 & 1) != 0 && v14 == 574
        || (v432 & 1) != 0 && v14 == 789
        || (v432 & 1) != 0 && v14 == 681
        || (v432 & 1) != 0 && v14 == 682
        || (v432 & 1) != 0 && v14 == 711
        || (v432 & 1) != 0 && v14 == 790
        || (v432 & 1) != 0 && v14 == 774
        || (v432 & 1) != 0 && v14 == 412
        || (v432 & 1) != 0 && v14 == 471
        || (v432 & 1) != 0 && v14 == 641)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 798)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailP");
        if (v438 >= 4)
          v98 = 4;
        else
          v98 = v438;
        if ((_DWORD)v98)
        {
          for (i29 = 0; i29 != v98; ++i29)
            result = fprintf(v8, "                      [%d] = %llu\n", i29, v15[i29]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 799)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailUECC");
        if (v438 >= 4)
          v100 = 4;
        else
          v100 = v438;
        if ((_DWORD)v100)
        {
          for (i30 = 0; i30 != v100; ++i30)
            result = fprintf(v8, "                      [%d] = %llu\n", i30, v15[i30]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 804)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailNoSPBX");
        if (v438 >= 4)
          v102 = 4;
        else
          v102 = v438;
        if ((_DWORD)v102)
        {
          for (i31 = 0; i31 != v102; ++i31)
            result = fprintf(v8, "                      [%d] = %llu\n", i31, v15[i31]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 806)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailBlank");
        if (v438 >= 4)
          v104 = 4;
        else
          v104 = v438;
        if ((_DWORD)v104)
        {
          for (i32 = 0; i32 != v104; ++i32)
            result = fprintf(v8, "                      [%d] = %llu\n", i32, v15[i32]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 809)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailUnsup");
        if (v438 >= 4)
          v106 = 4;
        else
          v106 = v438;
        if ((_DWORD)v106)
        {
          for (i33 = 0; i33 != v106; ++i33)
            result = fprintf(v8, "                      [%d] = %llu\n", i33, v15[i33]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 811)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailMpSkip");
        if (v438 >= 4)
          v108 = 4;
        else
          v108 = v438;
        if ((_DWORD)v108)
        {
          for (i34 = 0; i34 != v108; ++i34)
            result = fprintf(v8, "                      [%d] = %llu\n", i34, v15[i34]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 812)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailAbort");
        if (v438 >= 4)
          v110 = 4;
        else
          v110 = v438;
        if ((_DWORD)v110)
        {
          for (i35 = 0; i35 != v110; ++i35)
            result = fprintf(v8, "                      [%d] = %llu\n", i35, v15[i35]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 814)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXFailOther");
        if (v438 >= 4)
          v112 = 4;
        else
          v112 = v438;
        if ((_DWORD)v112)
        {
          for (i36 = 0; i36 != v112; ++i36)
            result = fprintf(v8, "                      [%d] = %llu\n", i36, v15[i36]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 815)
      {
        result = fprintf(v8, "%20s:\n", "raidBMXSuccess");
        if (v438 >= 4)
          v114 = 4;
        else
          v114 = v438;
        if ((_DWORD)v114)
        {
          for (i37 = 0; i37 != v114; ++i37)
            result = fprintf(v8, "                      [%d] = %llu\n", i37, v15[i37]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 184)
      {
        v116 = "TempSensorMax";
      }
      else
      {
        if ((v432 & 1) == 0 || v14 != 185)
        {
          if ((v432 & 1) != 0 && v14 == 182
            || (v432 & 1) != 0 && v14 == 353
            || (v432 & 1) != 0 && v14 == 609
            || (v432 & 1) != 0 && v14 == 596
            || (v432 & 1) != 0 && v14 == 597
            || (v432 & 1) != 0 && v14 == 152
            || (v432 & 1) != 0 && v14 == 153
            || (v432 & 1) != 0 && v14 == 154
            || (v432 & 1) != 0 && v14 == 384
            || (v432 & 1) != 0 && v14 == 386
            || (v432 & 1) != 0 && v14 == 657
            || (v432 & 1) != 0 && v14 == 387
            || (v432 & 1) != 0 && v14 == 420
            || (v432 & 1) != 0 && v14 == 438
            || (v432 & 1) != 0 && v14 == 155
            || (v432 & 1) != 0 && v14 == 156
            || (v432 & 1) != 0 && v14 == 158
            || (v432 & 1) != 0 && v14 == 159
            || (v432 & 1) != 0 && v14 == 539
            || (v432 & 1) != 0 && v14 == 540
            || (v432 & 2) != 0 && v14 == 160
            || (v432 & 2) != 0 && v14 == 161
            || (v432 & 2) != 0 && v14 == 163
            || (v432 & 2) != 0 && v14 == 164
            || (v432 & 2) != 0 && v14 == 165
            || (v432 & 1) != 0 && v14 == 141
            || (v432 & 1) != 0 && v14 == 142
            || (v432 & 1) != 0 && v14 == 143
            || (v432 & 1) != 0 && v14 == 144
            || (v432 & 1) != 0 && v14 == 145
            || (v432 & 1) != 0 && v14 == 146
            || (v432 & 1) != 0 && v14 == 187
            || (v432 & 1) != 0 && v14 == 188
            || (v432 & 1) != 0 && v14 == 189
            || (v432 & 1) != 0 && v14 == 147
            || (v432 & 1) != 0 && v14 == 148
            || (v432 & 1) != 0 && v14 == 149
            || (v432 & 1) != 0 && v14 == 183
            || (v432 & 1) != 0 && v14 == 204
            || (v432 & 1) != 0 && v14 == 205
            || (v432 & 1) != 0 && v14 == 206
            || (v432 & 2) != 0 && v14 == 248
            || (v432 & 2) != 0 && v14 == 199
            || (v432 & 1) != 0 && v14 == 200
            || (v432 & 1) != 0 && v14 == 201
            || (v432 & 2) != 0 && v14 == 203)
          {
            goto LABEL_81;
          }
          if ((v432 & 1) != 0 && v14 == 207)
          {
            result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerLevel");
            if (v438 >= 0x10)
              v117 = 16;
            else
              v117 = v438;
            if ((_DWORD)v117)
            {
              for (i38 = 0; i38 != v117; ++i38)
                result = fprintf(v8, "                      [%d] = %llu\n", i38, v15[i38]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 865)
          {
            result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerLevel");
            if (v438 >= 0x10)
              v119 = 16;
            else
              v119 = v438;
            if ((_DWORD)v119)
            {
              for (i39 = 0; i39 != v119; ++i39)
                result = fprintf(v8, "                      [%d] = %llu\n", i39, v15[i39]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 453)
          {
            result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerReadLevel");
            if (v438 >= 0x10)
              v121 = 16;
            else
              v121 = v438;
            if ((_DWORD)v121)
            {
              for (i40 = 0; i40 != v121; ++i40)
                result = fprintf(v8, "                      [%d] = %llu\n", i40, v15[i40]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 866)
          {
            result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerReadLevel");
            if (v438 >= 0x10)
              v123 = 16;
            else
              v123 = v438;
            if ((_DWORD)v123)
            {
              for (i41 = 0; i41 != v123; ++i41)
                result = fprintf(v8, "                      [%d] = %llu\n", i41, v15[i41]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 454)
          {
            result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerWriteLevel");
            if (v438 >= 0x10)
              v125 = 16;
            else
              v125 = v438;
            if ((_DWORD)v125)
            {
              for (i42 = 0; i42 != v125; ++i42)
                result = fprintf(v8, "                      [%d] = %llu\n", i42, v15[i42]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 867)
          {
            result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerWriteLevel");
            if (v438 >= 0x10)
              v127 = 16;
            else
              v127 = v438;
            if ((_DWORD)v127)
            {
              for (i43 = 0; i43 != v127; ++i43)
                result = fprintf(v8, "                      [%d] = %llu\n", i43, v15[i43]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 213)
          {
            result = fprintf(v8, "%20s:\n", "crcInternalReadFail");
            if (v438 >= 8)
              v129 = 8;
            else
              v129 = v438;
            if ((_DWORD)v129)
            {
              for (i44 = 0; i44 != v129; ++i44)
                result = fprintf(v8, "                      [%d] = %llu\n", i44, v15[i44]);
            }
          }
          else
          {
            if ((v432 & 1) != 0 && v14 == 217
              || (v432 & 1) != 0 && v14 == 1067
              || (v432 & 1) != 0 && v14 == 221
              || (v432 & 1) != 0 && v14 == 222
              || (v432 & 1) != 0 && v14 == 1221
              || (v432 & 1) != 0 && v14 == 223
              || (v432 & 1) != 0 && v14 == 224
              || (v432 & 1) != 0 && v14 == 1222
              || (v432 & 1) != 0 && v14 == 494)
            {
              goto LABEL_81;
            }
            if ((v432 & 1) != 0 && v14 == 1223)
            {
              result = fprintf(v8, "%20s:\n", "RD_closedBlocksTHHist");
              if (v438 >= 0xA)
                v131 = 10;
              else
                v131 = v438;
              if ((_DWORD)v131)
              {
                for (i45 = 0; i45 != v131; ++i45)
                  result = fprintf(v8, "                      [%d] = %llu\n", i45, v15[i45]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 229)
            {
              result = fprintf(v8, "%20s:\n", "indmbXferCountTo");
              if (v438 >= 2)
                v133 = 2;
              else
                v133 = v438;
              if ((_DWORD)v133)
              {
                for (i46 = 0; i46 != v133; ++i46)
                  result = fprintf(v8, "                      [%d] = %llu\n", i46, v15[i46]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 230)
            {
              result = fprintf(v8, "%20s:\n", "indmbAccumulatedTimeBetweenXfers");
              if (v438 >= 2)
                v135 = 2;
              else
                v135 = v438;
              if ((_DWORD)v135)
              {
                for (i47 = 0; i47 != v135; ++i47)
                  result = fprintf(v8, "                      [%d] = %llu\n", i47, v15[i47]);
              }
            }
            else
            {
              if ((v432 & 1) != 0 && v14 == 231
                || (v432 & 1) != 0 && v14 == 232
                || (v432 & 1) != 0 && v14 == 233
                || (v432 & 1) != 0 && v14 == 234)
              {
                goto LABEL_81;
              }
              if ((v432 & 1) != 0 && v14 == 235)
              {
                result = fprintf(v8, "%20s:\n", "gracefulBootTimeLogMs");
                if (v438 >= 8)
                  v137 = 8;
                else
                  v137 = v438;
                if ((_DWORD)v137)
                {
                  for (i48 = 0; i48 != v137; ++i48)
                    result = fprintf(v8, "                      [%d] = %llu\n", i48, v15[i48]);
                }
              }
              else if ((v432 & 1) != 0 && v14 == 236)
              {
                result = fprintf(v8, "%20s:\n", "ungracefulBootTimeLogMs");
                if (v438 >= 8)
                  v139 = 8;
                else
                  v139 = v438;
                if ((_DWORD)v139)
                {
                  for (i49 = 0; i49 != v139; ++i49)
                    result = fprintf(v8, "                      [%d] = %llu\n", i49, v15[i49]);
                }
              }
              else
              {
                if ((v432 & 1) != 0 && v14 == 245
                  || (v432 & 1) != 0 && v14 == 246
                  || (v432 & 1) != 0 && v14 == 247
                  || (v432 & 1) != 0 && v14 == 254)
                {
                  goto LABEL_81;
                }
                if ((v432 & 1) != 0 && v14 == 266)
                {
                  result = fprintf(v8, "%20s:\n", "readAmpHisto");
                  if (v438 >= 0x10)
                    v141 = 16;
                  else
                    v141 = v438;
                  if ((_DWORD)v141)
                  {
                    for (i50 = 0; i50 != v141; ++i50)
                      result = fprintf(v8, "                      [%d] = %llu\n", i50, v15[i50]);
                  }
                }
                else
                {
                  if ((v432 & 1) != 0 && v14 == 267)
                    goto LABEL_81;
                  if ((v432 & 1) != 0 && v14 == 269)
                  {
                    result = fprintf(v8, "%20s:\n", "numBootBlockRefreshSuccess");
                    if (v438 >= 8)
                      v143 = 8;
                    else
                      v143 = v438;
                    if ((_DWORD)v143)
                    {
                      for (i51 = 0; i51 != v143; ++i51)
                        result = fprintf(v8, "                      [%d] = %llu\n", i51, v15[i51]);
                    }
                  }
                  else if ((v432 & 1) != 0 && v14 == 270)
                  {
                    result = fprintf(v8, "%20s:\n", "numBootBlockRefreshFail");
                    if (v438 >= 8)
                      v145 = 8;
                    else
                      v145 = v438;
                    if ((_DWORD)v145)
                    {
                      for (i52 = 0; i52 != v145; ++i52)
                        result = fprintf(v8, "                      [%d] = %llu\n", i52, v15[i52]);
                    }
                  }
                  else
                  {
                    if ((v432 & 1) != 0 && v14 == 322
                      || (v432 & 1) != 0 && v14 == 323
                      || (v432 & 1) != 0 && v14 == 271
                      || (v432 & 1) != 0 && v14 == 272
                      || (v432 & 1) != 0 && v14 == 274)
                    {
                      goto LABEL_81;
                    }
                    if ((v432 & 1) != 0 && v14 == 277)
                    {
                      result = fprintf(v8, "%20s:\n", "powerBudgetSelect");
                      if (v438 >= 4)
                        v147 = 4;
                      else
                        v147 = v438;
                      if ((_DWORD)v147)
                      {
                        for (i53 = 0; i53 != v147; ++i53)
                          result = fprintf(v8, "                      [%d] = %llu\n", i53, v15[i53]);
                      }
                    }
                    else
                    {
                      if ((v432 & 1) != 0 && v14 == 279)
                        goto LABEL_81;
                      if ((v432 & 1) != 0 && v14 == 280)
                      {
                        result = fprintf(v8, "%20s:\n", "E2EDPErrorCounters");
                        if (v438 >= 0xC)
                          v149 = 12;
                        else
                          v149 = v438;
                        if ((_DWORD)v149)
                        {
                          for (i54 = 0; i54 != v149; ++i54)
                            result = fprintf(v8, "                      [%d] = %llu\n", i54, v15[i54]);
                        }
                      }
                      else
                      {
                        if ((v432 & 2) != 0 && v14 == 281
                          || (v432 & 2) != 0 && v14 == 282
                          || (v432 & 2) != 0 && v14 == 283
                          || (v432 & 2) != 0 && v14 == 284
                          || (v432 & 2) != 0 && v14 == 285
                          || (v432 & 2) != 0 && v14 == 286
                          || (v432 & 1) != 0 && v14 == 288)
                        {
                          goto LABEL_81;
                        }
                        if ((v432 & 1) != 0 && v14 == 289)
                        {
                          result = fprintf(v8, "%20s:\n", "mspBootBlockReadFail");
                          if (v438 >= 0x20)
                            v151 = 32;
                          else
                            v151 = v438;
                          if ((_DWORD)v151)
                          {
                            for (i55 = 0; i55 != v151; ++i55)
                              result = fprintf(v8, "                      [%d] = %llu\n", i55, v15[i55]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 290)
                        {
                          result = fprintf(v8, "%20s:\n", "mspBootBlockProgFail");
                          if (v438 >= 0x20)
                            v153 = 32;
                          else
                            v153 = v438;
                          if ((_DWORD)v153)
                          {
                            for (i56 = 0; i56 != v153; ++i56)
                              result = fprintf(v8, "                      [%d] = %llu\n", i56, v15[i56]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 291)
                        {
                          result = fprintf(v8, "%20s:\n", "mspBootBlockEraseFail");
                          if (v438 >= 0x20)
                            v155 = 32;
                          else
                            v155 = v438;
                          if ((_DWORD)v155)
                          {
                            for (i57 = 0; i57 != v155; ++i57)
                              result = fprintf(v8, "                      [%d] = %llu\n", i57, v15[i57]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 511)
                        {
                          result = fprintf(v8, "%20s:\n", "mspbootBlockRefreshCnt");
                          if (v438 >= 0x20)
                            v157 = 32;
                          else
                            v157 = v438;
                          if ((_DWORD)v157)
                          {
                            for (i58 = 0; i58 != v157; ++i58)
                              result = fprintf(v8, "                      [%d] = %llu\n", i58, v15[i58]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 516)
                        {
                          result = fprintf(v8, "%20s:\n", "mspBootBlockRefreshTime");
                          if (v438 >= 0x20)
                            v159 = 32;
                          else
                            v159 = v438;
                          if ((_DWORD)v159)
                          {
                            for (i59 = 0; i59 != v159; ++i59)
                              result = fprintf(v8, "                      [%d] = %llu\n", i59, v15[i59]);
                          }
                        }
                        else
                        {
                          if ((v432 & 2) != 0 && v14 == 517
                            || (v432 & 2) != 0 && v14 == 777
                            || (v432 & 1) != 0 && v14 == 292)
                          {
                            goto LABEL_81;
                          }
                          if ((v432 & 1) != 0 && v14 == 298)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostReads");
                            if (v438 >= 2)
                              v161 = 2;
                            else
                              v161 = v438;
                            if ((_DWORD)v161)
                            {
                              for (i60 = 0; i60 != v161; ++i60)
                                result = fprintf(v8, "                      [%d] = %llu\n", i60, v15[i60]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 299)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostReadXacts");
                            if (v438 >= 2)
                              v163 = 2;
                            else
                              v163 = v438;
                            if ((_DWORD)v163)
                            {
                              for (i61 = 0; i61 != v163; ++i61)
                                result = fprintf(v8, "                      [%d] = %llu\n", i61, v15[i61]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 300)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostWrites");
                            if (v438 >= 2)
                              v165 = 2;
                            else
                              v165 = v438;
                            if ((_DWORD)v165)
                            {
                              for (i62 = 0; i62 != v165; ++i62)
                                result = fprintf(v8, "                      [%d] = %llu\n", i62, v15[i62]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 301)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostWriteXacts");
                            if (v438 >= 2)
                              v167 = 2;
                            else
                              v167 = v438;
                            if ((_DWORD)v167)
                            {
                              for (i63 = 0; i63 != v167; ++i63)
                                result = fprintf(v8, "                      [%d] = %llu\n", i63, v15[i63]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 302)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostNumFlushes");
                            if (v438 >= 2)
                              v169 = 2;
                            else
                              v169 = v438;
                            if ((_DWORD)v169)
                            {
                              for (i64 = 0; i64 != v169; ++i64)
                                result = fprintf(v8, "                      [%d] = %llu\n", i64, v15[i64]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 303)
                          {
                            result = fprintf(v8, "%20s:\n", "perHostNumFences");
                            if (v438 >= 2)
                              v171 = 2;
                            else
                              v171 = v438;
                            if ((_DWORD)v171)
                            {
                              for (i65 = 0; i65 != v171; ++i65)
                                result = fprintf(v8, "                      [%d] = %llu\n", i65, v15[i65]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 304)
                          {
                            result = fprintf(v8, "%20s:\n", "commitPadSectorsPerFlow");
                            if (v438 >= 0xA)
                              v173 = 10;
                            else
                              v173 = v438;
                            if ((_DWORD)v173)
                            {
                              for (i66 = 0; i66 != v173; ++i66)
                                result = fprintf(v8, "                      [%d] = %llu\n", i66, v15[i66]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 305)
                          {
                            result = fprintf(v8, "%20s:\n", "wcacheDSOverWrLogSizeCnts");
                            if (v438 >= 0xA)
                              v175 = 10;
                            else
                              v175 = v438;
                            if ((_DWORD)v175)
                            {
                              for (i67 = 0; i67 != v175; ++i67)
                                result = fprintf(v8, "                      [%d] = %llu\n", i67, v15[i67]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 306)
                          {
                            result = fprintf(v8, "%20s:\n", "wcacheDSOverWrSizeByFlow");
                            if (v438 >= 4)
                              v177 = 4;
                            else
                              v177 = v438;
                            if ((_DWORD)v177)
                            {
                              for (i68 = 0; i68 != v177; ++i68)
                                result = fprintf(v8, "                      [%d] = %llu\n", i68, v15[i68]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 307)
                          {
                            result = fprintf(v8, "%20s:\n", "CmdRaisePrioiryEvents");
                            if (v438 >= 0xA)
                              v179 = 10;
                            else
                              v179 = v438;
                            if ((_DWORD)v179)
                            {
                              for (i69 = 0; i69 != v179; ++i69)
                                result = fprintf(v8, "                      [%d] = %llu\n", i69, v15[i69]);
                            }
                          }
                          else
                          {
                            if ((v432 & 1) != 0 && v14 == 308
                              || (v432 & 1) != 0 && v14 == 309
                              || (v432 & 1) != 0 && v14 == 310
                              || (v432 & 1) != 0 && v14 == 347)
                            {
                              goto LABEL_81;
                            }
                            if ((v432 & 1) != 0 && v14 == 314)
                            {
                              result = fprintf(v8, "%20s:\n", "numBootBlockValidateSuccess");
                              if (v438 >= 8)
                                v181 = 8;
                              else
                                v181 = v438;
                              if ((_DWORD)v181)
                              {
                                for (i70 = 0; i70 != v181; ++i70)
                                  result = fprintf(v8, "                      [%d] = %llu\n", i70, v15[i70]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 315)
                            {
                              result = fprintf(v8, "%20s:\n", "numBootBlockValidateFail");
                              if (v438 >= 8)
                                v183 = 8;
                              else
                                v183 = v438;
                              if ((_DWORD)v183)
                              {
                                for (i71 = 0; i71 != v183; ++i71)
                                  result = fprintf(v8, "                      [%d] = %llu\n", i71, v15[i71]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 316)
                            {
                              result = fprintf(v8, "%20s:\n", "clogPagesFillingPercentage");
                              if (v438 >= 4)
                                v185 = 4;
                              else
                                v185 = v438;
                              if ((_DWORD)v185)
                              {
                                for (i72 = 0; i72 != v185; ++i72)
                                  result = fprintf(v8, "                      [%d] = %llu\n", i72, v15[i72]);
                              }
                            }
                            else
                            {
                              if ((v432 & 2) != 0 && v14 == 317
                                || (v432 & 2) != 0 && v14 == 643
                                || (v432 & 1) != 0 && v14 == 336
                                || (v432 & 1) != 0 && v14 == 318
                                || (v432 & 1) != 0 && v14 == 319
                                || (v432 & 1) != 0 && v14 == 320
                                || (v432 & 1) != 0 && v14 == 321)
                              {
                                goto LABEL_81;
                              }
                              if ((v432 & 1) != 0 && v14 == 324)
                              {
                                result = fprintf(v8, "%20s:\n", "bitflipAddr");
                                if (v438 >= 5)
                                  v187 = 5;
                                else
                                  v187 = v438;
                                if ((_DWORD)v187)
                                {
                                  for (i73 = 0; i73 != v187; ++i73)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i73, v15[i73]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 325)
                              {
                                result = fprintf(v8, "%20s:\n", "bitflipCount");
                                if (v438 >= 5)
                                  v189 = 5;
                                else
                                  v189 = v438;
                                if ((_DWORD)v189)
                                {
                                  for (i74 = 0; i74 != v189; ++i74)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i74, v15[i74]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 326)
                              {
                                result = fprintf(v8, "%20s:\n", "bitflipDupes");
                                if (v438 >= 5)
                                  v191 = 5;
                                else
                                  v191 = v438;
                                if ((_DWORD)v191)
                                {
                                  for (i75 = 0; i75 != v191; ++i75)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i75, v15[i75]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 327)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsMaxTempHisto");
                                if (v438 >= 0x1E)
                                  v193 = 30;
                                else
                                  v193 = v438;
                                if ((_DWORD)v193)
                                {
                                  for (i76 = 0; i76 != v193; ++i76)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i76, v15[i76]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 328)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsMinTempHisto");
                                if (v438 >= 0x1E)
                                  v195 = 30;
                                else
                                  v195 = v438;
                                if ((_DWORD)v195)
                                {
                                  for (i77 = 0; i77 != v195; ++i77)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i77, v15[i77]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 329)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsLifeTimeTempHisto");
                                if (v438 >= 0x1E)
                                  v197 = 30;
                                else
                                  v197 = v438;
                                if ((_DWORD)v197)
                                {
                                  for (i78 = 0; i78 != v197; ++i78)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i78, v15[i78]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 330)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsDeltaTempHisto");
                                if (v438 >= 0x16)
                                  v199 = 22;
                                else
                                  v199 = v438;
                                if ((_DWORD)v199)
                                {
                                  for (i79 = 0; i79 != v199; ++i79)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i79, v15[i79]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 331)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsCrossTempHisto");
                                if (v438 >= 0x2D)
                                  v201 = 45;
                                else
                                  v201 = v438;
                                if ((_DWORD)v201)
                                {
                                  for (i80 = 0; i80 != v201; ++i80)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i80, v15[i80]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1031)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsUeccTempHisto");
                                if (v438 >= 0x16)
                                  v203 = 22;
                                else
                                  v203 = v438;
                                if ((_DWORD)v203)
                                {
                                  for (i81 = 0; i81 != v203; ++i81)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i81, v15[i81]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1246)
                              {
                                result = fprintf(v8, "%20s:\n", "bandsUeccCrossTempHisto");
                                if (v438 >= 8)
                                  v205 = 8;
                                else
                                  v205 = v438;
                                if ((_DWORD)v205)
                                {
                                  for (i82 = 0; i82 != v205; ++i82)
                                    result = fprintf(v8, "                      [%d] = %llu\n", i82, v15[i82]);
                                }
                              }
                              else
                              {
                                if ((v432 & 2) != 0 && v14 == 603)
                                  goto LABEL_81;
                                if ((v432 & 1) != 0 && v14 == 332)
                                {
                                  result = fprintf(v8, "%20s:\n", "wcacheWaitLogMs");
                                  if (v438 >= 0xA)
                                    v207 = 10;
                                  else
                                    v207 = v438;
                                  if ((_DWORD)v207)
                                  {
                                    for (i83 = 0; i83 != v207; ++i83)
                                      result = fprintf(v8, "                      [%d] = %llu\n", i83, v15[i83]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 333)
                                {
                                  result = fprintf(v8, "%20s:\n", "wcacheDS_segsSortedLogSize");
                                  if (v438 >= 0xA)
                                    v209 = 10;
                                  else
                                    v209 = v438;
                                  if ((_DWORD)v209)
                                  {
                                    for (i84 = 0; i84 != v209; ++i84)
                                      result = fprintf(v8, "                      [%d] = %llu\n", i84, v15[i84]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 468)
                                {
                                  result = fprintf(v8, "%20s:\n", "wcacheDirtyAtFlush");
                                  if (v438 >= 0x10)
                                    v211 = 16;
                                  else
                                    v211 = v438;
                                  if ((_DWORD)v211)
                                  {
                                    for (i85 = 0; i85 != v211; ++i85)
                                      result = fprintf(v8, "                      [%d] = %llu\n", i85, v15[i85]);
                                  }
                                }
                                else
                                {
                                  if ((v432 & 2) != 0 && v14 == 457
                                    || (v432 & 2) != 0 && v14 == 458
                                    || (v432 & 1) != 0 && v14 == 340
                                    || (v432 & 1) != 0 && v14 == 953
                                    || (v432 & 1) != 0 && v14 == 343
                                    || (v432 & 1) != 0 && v14 == 344
                                    || (v432 & 1) != 0 && v14 == 349
                                    || (v432 & 1) != 0 && v14 == 350
                                    || (v432 & 1) != 0 && v14 == 351
                                    || (v432 & 1) != 0 && v14 == 352
                                    || (v432 & 1) != 0 && v14 == 356
                                    || (v432 & 1) != 0 && v14 == 358
                                    || (v432 & 1) != 0 && v14 == 368
                                    || (v432 & 1) != 0 && v14 == 369
                                    || (v432 & 1) != 0 && v14 == 370
                                    || (v432 & 1) != 0 && v14 == 371
                                    || (v432 & 1) != 0 && v14 == 372
                                    || (v432 & 1) != 0 && v14 == 374
                                    || (v432 & 1) != 0 && v14 == 375
                                    || (v432 & 1) != 0 && v14 == 385
                                    || (v432 & 1) != 0 && v14 == 401
                                    || (v432 & 1) != 0 && v14 == 837
                                    || (v432 & 2) != 0 && v14 == 419
                                    || (v432 & 1) != 0 && v14 == 422
                                    || (v432 & 1) != 0 && v14 == 423
                                    || (v432 & 1) != 0 && v14 == 424
                                    || (v432 & 1) != 0 && v14 == 425
                                    || (v432 & 1) != 0 && v14 == 427
                                    || (v432 & 1) != 0 && v14 == 461
                                    || (v432 & 1) != 0 && v14 == 485
                                    || (v432 & 1) != 0 && v14 == 462
                                    || (v432 & 1) != 0 && v14 == 784)
                                  {
                                    goto LABEL_81;
                                  }
                                  if ((v432 & 1) != 0 && v14 == 463)
                                  {
                                    result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogram");
                                    if (v438 >= 0xB)
                                      v213 = 11;
                                    else
                                      v213 = v438;
                                    if ((_DWORD)v213)
                                    {
                                      for (i86 = 0; i86 != v213; ++i86)
                                        result = fprintf(v8, "                      [%d] = %llu\n", i86, v15[i86]);
                                    }
                                  }
                                  else if ((v432 & 1) != 0 && v14 == 551)
                                  {
                                    result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogramTlc");
                                    if (v438 >= 0xB)
                                      v215 = 11;
                                    else
                                      v215 = v438;
                                    if ((_DWORD)v215)
                                    {
                                      for (i87 = 0; i87 != v215; ++i87)
                                        result = fprintf(v8, "                      [%d] = %llu\n", i87, v15[i87]);
                                    }
                                  }
                                  else
                                  {
                                    if ((v432 & 1) != 0 && v14 == 464)
                                      goto LABEL_81;
                                    if ((v432 & 1) != 0 && v14 == 465)
                                    {
                                      result = fprintf(v8, "%20s:\n", "burstSizeHistogram");
                                      if (v438 >= 0xA)
                                        v217 = 10;
                                      else
                                        v217 = v438;
                                      if ((_DWORD)v217)
                                      {
                                        for (i88 = 0; i88 != v217; ++i88)
                                          result = fprintf(v8, "                      [%d] = %llu\n", i88, v15[i88]);
                                      }
                                    }
                                    else if ((v432 & 1) != 0 && v14 == 913)
                                    {
                                      result = fprintf(v8, "%20s:\n", "fwaHistogram");
                                      if (v438 >= 0xA)
                                        v219 = 10;
                                      else
                                        v219 = v438;
                                      if ((_DWORD)v219)
                                      {
                                        for (i89 = 0; i89 != v219; ++i89)
                                          result = fprintf(v8, "                      [%d] = %llu\n", i89, v15[i89]);
                                      }
                                    }
                                    else
                                    {
                                      if ((v432 & 1) != 0 && v14 == 483
                                        || (v432 & 2) != 0 && v14 == 428
                                        || (v432 & 1) != 0 && v14 == 429
                                        || (v432 & 1) != 0 && v14 == 430
                                        || (v432 & 1) != 0 && v14 == 431
                                        || (v432 & 1) != 0 && v14 == 432
                                        || (v432 & 1) != 0 && v14 == 433
                                        || (v432 & 1) != 0 && v14 == 434
                                        || (v432 & 1) != 0 && v14 == 435
                                        || (v432 & 1) != 0 && v14 == 436
                                        || (v432 & 1) != 0 && v14 == 437
                                        || (v432 & 1) != 0 && v14 == 447
                                        || (v432 & 1) != 0 && v14 == 448
                                        || (v432 & 1) != 0 && v14 == 449
                                        || (v432 & 1) != 0 && v14 == 488
                                        || (v432 & 1) != 0 && v14 == 486
                                        || (v432 & 1) != 0 && v14 == 450)
                                      {
                                        goto LABEL_81;
                                      }
                                      if ((v432 & 1) != 0 && v14 == 460)
                                      {
                                        result = fprintf(v8, "%20s:\n", "CacheDepthVsThroughput");
                                        if (v438 >= 0x100)
                                          v221 = 256;
                                        else
                                          v221 = v438;
                                        if ((_DWORD)v221)
                                        {
                                          for (i90 = 0; i90 != v221; ++i90)
                                            result = fprintf(v8, "                      [%d] = %llu\n", i90, v15[i90]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 466)
                                      {
                                        result = fprintf(v8, "%20s:\n", "qosDirectToTLC");
                                        if (v438 >= 0x40)
                                          v223 = 64;
                                        else
                                          v223 = v438;
                                        if ((_DWORD)v223)
                                        {
                                          for (i91 = 0; i91 != v223; ++i91)
                                            result = fprintf(v8, "                      [%d] = %llu\n", i91, v15[i91]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 467)
                                      {
                                        result = fprintf(v8, "%20s:\n", "maxQosDirectToTLC");
                                        if (v438 >= 4)
                                          v225 = 4;
                                        else
                                          v225 = v438;
                                        if ((_DWORD)v225)
                                        {
                                          for (i92 = 0; i92 != v225; ++i92)
                                            result = fprintf(v8, "                      [%d] = %llu\n", i92, v15[i92]);
                                        }
                                      }
                                      else
                                      {
                                        if ((v432 & 1) != 0 && v14 == 518
                                          || (v432 & 1) != 0 && v14 == 519
                                          || (v432 & 2) != 0 && v14 == 627
                                          || (v432 & 2) != 0 && v14 == 628
                                          || (v432 & 2) != 0 && v14 == 629
                                          || (v432 & 2) != 0 && v14 == 671
                                          || (v432 & 2) != 0 && v14 == 672
                                          || (v432 & 2) != 0 && v14 == 816
                                          || (v432 & 1) != 0 && v14 == 538
                                          || (v432 & 1) != 0 && v14 == 487)
                                        {
                                          goto LABEL_81;
                                        }
                                        if ((v432 & 1) != 0 && v14 == 490)
                                        {
                                          result = fprintf(v8, "%20s:\n", "bdrTmpHist");
                                          if (v438 >= 0x40)
                                            v227 = 64;
                                          else
                                            v227 = v438;
                                          if ((_DWORD)v227)
                                          {
                                            for (i93 = 0; i93 != v227; ++i93)
                                              result = fprintf(v8, "                      [%d] = %llu\n", i93, v15[i93]);
                                          }
                                        }
                                        else
                                        {
                                          if ((v432 & 1) != 0 && v14 == 491 || (v432 & 1) != 0 && v14 == 492)
                                            goto LABEL_81;
                                          if ((v432 & 1) != 0 && v14 == 624)
                                          {
                                            result = fprintf(v8, "%20s:\n", "clogFailReason");
                                            if (v438 >= 0x10)
                                              v229 = 16;
                                            else
                                              v229 = v438;
                                            if ((_DWORD)v229)
                                            {
                                              for (i94 = 0; i94 != v229; ++i94)
                                                result = fprintf(v8, "                      [%d] = %llu\n", i94, v15[i94]);
                                            }
                                          }
                                          else if ((v432 & 1) != 0 && v14 == 1001)
                                          {
                                            result = fprintf(v8, "%20s:\n", "clogReplayFailReason");
                                            if (v438 >= 8)
                                              v231 = 8;
                                            else
                                              v231 = v438;
                                            if ((_DWORD)v231)
                                            {
                                              for (i95 = 0; i95 != v231; ++i95)
                                                result = fprintf(v8, "                      [%d] = %llu\n", i95, v15[i95]);
                                            }
                                          }
                                          else
                                          {
                                            if ((v432 & 1) != 0 && v14 == 1002
                                              || (v432 & 1) != 0 && v14 == 1003
                                              || (v432 & 1) != 0 && v14 == 493
                                              || (v432 & 1) != 0 && v14 == 497
                                              || (v432 & 1) != 0 && v14 == 495
                                              || (v432 & 1) != 0 && v14 == 496
                                              || (v432 & 1) != 0 && v14 == 498
                                              || (v432 & 1) != 0 && v14 == 499
                                              || (v432 & 1) != 0 && v14 == 500
                                              || (v432 & 1) != 0 && v14 == 606
                                              || (v432 & 1) != 0 && v14 == 617
                                              || (v432 & 1) != 0 && v14 == 607
                                              || (v432 & 1) != 0 && v14 == 618
                                              || (v432 & 1) != 0 && v14 == 619
                                              || (v432 & 1) != 0 && v14 == 620
                                              || (v432 & 1) != 0 && v14 == 625
                                              || (v432 & 1) != 0 && v14 == 626
                                              || (v432 & 1) != 0 && v14 == 1009
                                              || (v432 & 1) != 0 && v14 == 1010)
                                            {
                                              goto LABEL_81;
                                            }
                                            if ((v432 & 1) != 0 && v14 == 621)
                                            {
                                              result = fprintf(v8, "%20s:\n", "eanBootReadsHist");
                                              if (v438 >= 0xA)
                                                v233 = 10;
                                              else
                                                v233 = v438;
                                              if ((_DWORD)v233)
                                              {
                                                for (i96 = 0; i96 != v233; ++i96)
                                                  result = fprintf(v8, "                      [%d] = %llu\n", i96, v15[i96]);
                                              }
                                            }
                                            else if ((v432 & 1) != 0 && v14 == 632)
                                            {
                                              result = fprintf(v8, "%20s:\n", "eanFirstReadMode");
                                              if (v438 >= 6)
                                                v235 = 6;
                                              else
                                                v235 = v438;
                                              if ((_DWORD)v235)
                                              {
                                                for (i97 = 0; i97 != v235; ++i97)
                                                  result = fprintf(v8, "                      [%d] = %llu\n", i97, v15[i97]);
                                              }
                                            }
                                            else
                                            {
                                              if ((v432 & 1) != 0 && v14 == 642
                                                || (v432 & 1) != 0 && v14 == 502
                                                || (v432 & 1) != 0 && v14 == 505
                                                || (v432 & 1) != 0 && v14 == 506
                                                || (v432 & 1) != 0 && v14 == 507
                                                || (v432 & 1) != 0 && v14 == 520
                                                || (v432 & 1) != 0 && v14 == 521
                                                || (v432 & 1) != 0 && v14 == 522
                                                || (v432 & 1) != 0 && v14 == 523
                                                || (v432 & 1) != 0 && v14 == 524
                                                || (v432 & 1) != 0 && v14 == 525
                                                || (v432 & 1) != 0 && v14 == 526
                                                || (v432 & 1) != 0 && v14 == 527
                                                || (v432 & 1) != 0 && v14 == 612
                                                || (v432 & 1) != 0 && v14 == 616
                                                || (v432 & 1) != 0 && v14 == 664
                                                || (v432 & 1) != 0 && v14 == 665
                                                || (v432 & 1) != 0 && v14 == 707
                                                || (v432 & 1) != 0 && v14 == 708
                                                || (v432 & 2) != 0 && v14 == 530
                                                || (v432 & 1) != 0 && v14 == 531
                                                || (v432 & 1) != 0 && v14 == 828
                                                || (v432 & 1) != 0 && v14 == 532
                                                || (v432 & 1) != 0 && v14 == 533
                                                || (v432 & 1) != 0 && v14 == 534
                                                || (v432 & 1) != 0 && v14 == 535
                                                || (v432 & 1) != 0 && v14 == 537
                                                || (v432 & 1) != 0 && v14 == 543
                                                || (v432 & 2) != 0 && v14 == 581
                                                || (v432 & 2) != 0 && v14 == 582
                                                || (v432 & 1) != 0 && v14 == 583
                                                || (v432 & 1) != 0 && v14 == 584
                                                || (v432 & 1) != 0 && v14 == 544
                                                || (v432 & 1) != 0 && v14 == 553
                                                || (v432 & 1) != 0 && v14 == 557
                                                || (v432 & 1) != 0 && v14 == 1117
                                                || (v432 & 1) != 0 && v14 == 548
                                                || (v432 & 1) != 0 && v14 == 611
                                                || (v432 & 1) != 0 && v14 == 545
                                                || (v432 & 1) != 0 && v14 == 558
                                                || (v432 & 1) != 0 && v14 == 559
                                                || (v432 & 1) != 0 && v14 == 1112
                                                || (v432 & 1) != 0 && v14 == 563
                                                || (v432 & 1) != 0 && v14 == 564
                                                || (v432 & 1) != 0 && v14 == 613
                                                || (v432 & 1) != 0 && v14 == 614
                                                || (v432 & 1) != 0 && v14 == 615)
                                              {
                                                goto LABEL_81;
                                              }
                                              if ((v432 & 1) != 0 && v14 == 546)
                                              {
                                                result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeDetected");
                                                if (v438 >= 0xA)
                                                  v237 = 10;
                                                else
                                                  v237 = v438;
                                                if ((_DWORD)v237)
                                                {
                                                  for (i98 = 0; i98 != v237; ++i98)
                                                    result = fprintf(v8, "                      [%d] = %llu\n", i98, v15[i98]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 549)
                                              {
                                                result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeSlc");
                                                if (v438 >= 0xA)
                                                  v239 = 10;
                                                else
                                                  v239 = v438;
                                                if ((_DWORD)v239)
                                                {
                                                  for (i99 = 0; i99 != v239; ++i99)
                                                    result = fprintf(v8, "                      [%d] = %llu\n", i99, v15[i99]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 547)
                                              {
                                                result = fprintf(v8, "%20s:\n", "slcDemandBurstDur");
                                                if (v438 >= 0xA)
                                                  v241 = 10;
                                                else
                                                  v241 = v438;
                                                if ((_DWORD)v241)
                                                {
                                                  for (i100 = 0; i100 != v241; ++i100)
                                                    result = fprintf(v8, "                      [%d] = %llu\n", i100, v15[i100]);
                                                }
                                              }
                                              else
                                              {
                                                if ((v432 & 1) != 0 && v14 == 560
                                                  || (v432 & 1) != 0 && v14 == 635
                                                  || (v432 & 1) != 0 && v14 == 636
                                                  || (v432 & 1) != 0 && v14 == 637
                                                  || (v432 & 1) != 0 && v14 == 561
                                                  || (v432 & 1) != 0 && v14 == 565
                                                  || (v432 & 1) != 0 && v14 == 568
                                                  || (v432 & 1) != 0 && v14 == 575
                                                  || (v432 & 1) != 0 && v14 == 588
                                                  || (v432 & 1) != 0 && v14 == 589
                                                  || (v432 & 1) != 0 && v14 == 590
                                                  || (v432 & 1) != 0 && v14 == 591
                                                  || (v432 & 1) != 0 && v14 == 594
                                                  || (v432 & 1) != 0 && v14 == 595
                                                  || (v432 & 1) != 0 && v14 == 602)
                                                {
                                                  goto LABEL_81;
                                                }
                                                if ((v432 & 1) != 0 && v14 == 638)
                                                {
                                                  result = fprintf(v8, "%20s:\n", "oslcDemandBurstSize");
                                                  if (v438 >= 0xA)
                                                    v243 = 10;
                                                  else
                                                    v243 = v438;
                                                  if ((_DWORD)v243)
                                                  {
                                                    for (i101 = 0; i101 != v243; ++i101)
                                                      result = fprintf(v8, "                      [%d] = %llu\n", i101, v15[i101]);
                                                  }
                                                }
                                                else if ((v432 & 1) != 0 && v14 == 674)
                                                {
                                                  result = fprintf(v8, "%20s:\n", "oslcNoVotesHw");
                                                  if (v438 >= 8)
                                                    v245 = 8;
                                                  else
                                                    v245 = v438;
                                                  if ((_DWORD)v245)
                                                  {
                                                    for (i102 = 0; i102 != v245; ++i102)
                                                      result = fprintf(v8, "                      [%d] = %llu\n", i102, v15[i102]);
                                                  }
                                                }
                                                else
                                                {
                                                  if ((v432 & 1) != 0 && v14 == 884 || (v432 & 1) != 0 && v14 == 601)
                                                    goto LABEL_81;
                                                  if ((v432 & 2) != 0 && v14 == 1174)
                                                  {
                                                    result = fprintf(v8, "%20s:\n", "nandWritesByMode");
                                                    if (v438 >= 6)
                                                      v247 = 6;
                                                    else
                                                      v247 = v438;
                                                    if ((_DWORD)v247)
                                                    {
                                                      for (i103 = 0; i103 != v247; ++i103)
                                                        result = fprintf(v8, "                      [%d] = %llu\n", i103, v15[i103]);
                                                    }
                                                  }
                                                  else if ((v432 & 2) != 0 && v14 == 1175)
                                                  {
                                                    result = fprintf(v8, "%20s:\n", "nandReadsByMode");
                                                    if (v438 >= 6)
                                                      v249 = 6;
                                                    else
                                                      v249 = v438;
                                                    if ((_DWORD)v249)
                                                    {
                                                      for (i104 = 0; i104 != v249; ++i104)
                                                        result = fprintf(v8, "                      [%d] = %llu\n", i104, v15[i104]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 605)
                                                  {
                                                    result = fprintf(v8, "%20s:\n", "gcActiveReasons");
                                                    if (v438 >= 0xA)
                                                      v251 = 10;
                                                    else
                                                      v251 = v438;
                                                    if ((_DWORD)v251)
                                                    {
                                                      for (i105 = 0; i105 != v251; ++i105)
                                                        result = fprintf(v8, "                      [%d] = %llu\n", i105, v15[i105]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 610)
                                                  {
                                                    result = fprintf(v8, "%20s:\n", "pcieAerCounters");
                                                    if (v438 >= 0x40)
                                                      v253 = 64;
                                                    else
                                                      v253 = v438;
                                                    if ((_DWORD)v253)
                                                    {
                                                      for (i106 = 0; i106 != v253; ++i106)
                                                        result = fprintf(v8, "                      [%d] = %llu\n", i106, v15[i106]);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if ((v432 & 1) != 0 && v14 == 622
                                                      || (v432 & 1) != 0 && v14 == 623
                                                      || (v432 & 1) != 0 && v14 == 633
                                                      || (v432 & 1) != 0 && v14 == 634
                                                      || (v432 & 1) != 0 && v14 == 541
                                                      || (v432 & 1) != 0 && v14 == 542
                                                      || (v432 & 1) != 0 && v14 == 667
                                                      || (v432 & 1) != 0 && v14 == 676
                                                      || (v432 & 1) != 0 && v14 == 826)
                                                    {
                                                      goto LABEL_81;
                                                    }
                                                    if ((v432 & 1) != 0 && v14 == 660)
                                                    {
                                                      result = fprintf(v8, "%20s:\n", "gcMustReasons");
                                                      if (v438 >= 0x14)
                                                        v255 = 20;
                                                      else
                                                        v255 = v438;
                                                      if ((_DWORD)v255)
                                                      {
                                                        for (i107 = 0; i107 != v255; ++i107)
                                                          result = fprintf(v8, "                      [%d] = %llu\n", i107, v15[i107]);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if ((v432 & 2) != 0 && v14 == 666
                                                        || (v432 & 2) != 0 && v14 == 675
                                                        || (v432 & 1) != 0 && v14 == 684)
                                                      {
                                                        goto LABEL_81;
                                                      }
                                                      if ((v432 & 1) != 0 && v14 == 687)
                                                      {
                                                        result = fprintf(v8, "%20s:\n", "cbdrInitSent");
                                                        if (v438 >= 3)
                                                          v257 = 3;
                                                        else
                                                          v257 = v438;
                                                        if ((_DWORD)v257)
                                                        {
                                                          for (i108 = 0; i108 != v257; ++i108)
                                                            result = fprintf(v8, "                      [%d] = %llu\n", i108, v15[i108]);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if ((v432 & 1) != 0 && v14 == 688
                                                          || (v432 & 1) != 0 && v14 == 689
                                                          || (v432 & 1) != 0 && v14 == 690
                                                          || (v432 & 1) != 0 && v14 == 691)
                                                        {
                                                          goto LABEL_81;
                                                        }
                                                        if ((v432 & 1) != 0 && v14 == 694)
                                                        {
                                                          result = fprintf(v8, "%20s:\n", "cbdrRefreshGrades");
                                                          if (v438 >= 0xA)
                                                            v259 = 10;
                                                          else
                                                            v259 = v438;
                                                          if ((_DWORD)v259)
                                                          {
                                                            for (i109 = 0; i109 != v259; ++i109)
                                                              result = fprintf(v8, "                      [%d] = %llu\n", i109, v15[i109]);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if ((v432 & 1) != 0 && v14 == 695
                                                            || (v432 & 1) != 0 && v14 == 696
                                                            || (v432 & 1) != 0 && v14 == 699)
                                                          {
                                                            goto LABEL_81;
                                                          }
                                                          if ((v432 & 1) != 0 && v14 == 731)
                                                          {
                                                            result = fprintf(v8, "%20s:\n", "cbdrLastScannedHr");
                                                            if (v438 >= 3)
                                                              v261 = 3;
                                                            else
                                                              v261 = v438;
                                                            if ((_DWORD)v261)
                                                            {
                                                              for (i110 = 0; i110 != v261; ++i110)
                                                                result = fprintf(v8, "                      [%d] = %llu\n", i110, v15[i110]);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if ((v432 & 1) != 0 && v14 == 753
                                                              || (v432 & 1) != 0 && v14 == 754
                                                              || (v432 & 1) != 0 && v14 == 755)
                                                            {
                                                              goto LABEL_81;
                                                            }
                                                            if ((v432 & 1) != 0 && v14 == 756)
                                                            {
                                                              result = fprintf(v8, "%20s:\n", "cbdrRefreshedAges");
                                                              if (v438 >= 9)
                                                                v263 = 9;
                                                              else
                                                                v263 = v438;
                                                              if ((_DWORD)v263)
                                                              {
                                                                for (i111 = 0; i111 != v263; ++i111)
                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i111, v15[i111]);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if ((v432 & 1) != 0 && v14 == 757
                                                                || (v432 & 1) != 0 && v14 == 758)
                                                              {
                                                                goto LABEL_81;
                                                              }
                                                              if ((v432 & 1) != 0 && v14 == 759)
                                                              {
                                                                result = fprintf(v8, "%20s:\n", "cbdrScanPct");
                                                                if (v438 >= 5)
                                                                  v265 = 5;
                                                                else
                                                                  v265 = v438;
                                                                if ((_DWORD)v265)
                                                                {
                                                                  for (i112 = 0; i112 != v265; ++i112)
                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i112, v15[i112]);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if ((v432 & 1) != 0 && v14 == 766)
                                                                  goto LABEL_81;
                                                                if ((v432 & 1) != 0 && v14 == 767)
                                                                {
                                                                  result = fprintf(v8, "%20s:\n", "cbdrRefreshGradesSLC");
                                                                  if (v438 >= 0xA)
                                                                    v267 = 10;
                                                                  else
                                                                    v267 = v438;
                                                                  if ((_DWORD)v267)
                                                                  {
                                                                    for (i113 = 0; i113 != v267; ++i113)
                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i113, v15[i113]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 768)
                                                                {
                                                                  result = fprintf(v8, "%20s:\n", "cbdrRefreshedAgesSLC");
                                                                  if (v438 >= 9)
                                                                    v269 = 9;
                                                                  else
                                                                    v269 = v438;
                                                                  if ((_DWORD)v269)
                                                                  {
                                                                    for (i114 = 0; i114 != v269; ++i114)
                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i114, v15[i114]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 769)
                                                                {
                                                                  result = fprintf(v8, "%20s:\n", "cbdrScanPctSLC");
                                                                  if (v438 >= 5)
                                                                    v271 = 5;
                                                                  else
                                                                    v271 = v438;
                                                                  if ((_DWORD)v271)
                                                                  {
                                                                    for (i115 = 0; i115 != v271; ++i115)
                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i115, v15[i115]);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if ((v432 & 2) != 0 && v14 == 970
                                                                    || (v432 & 1) != 0 && v14 == 683
                                                                    || (v432 & 1) != 0 && v14 == 693
                                                                    || (v432 & 1) != 0 && v14 == 718
                                                                    || (v432 & 1) != 0 && v14 == 709
                                                                    || (v432 & 1) != 0 && v14 == 710
                                                                    || (v432 & 1) != 0 && v14 == 719
                                                                    || (v432 & 1) != 0 && v14 == 720)
                                                                  {
                                                                    goto LABEL_81;
                                                                  }
                                                                  if ((v432 & 1) != 0 && v14 == 702)
                                                                  {
                                                                    result = fprintf(v8, "%20s:\n", "vcurve");
                                                                    if (v438 >= 0x20)
                                                                      v273 = 32;
                                                                    else
                                                                      v273 = v438;
                                                                    if ((_DWORD)v273)
                                                                    {
                                                                      for (i116 = 0; i116 != v273; ++i116)
                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i116, v15[i116]);
                                                                    }
                                                                  }
                                                                  else if ((v432 & 1) != 0 && v14 == 703)
                                                                  {
                                                                    result = fprintf(v8, "%20s:\n", "injDepth");
                                                                    if (v438 >= 0xC)
                                                                      v275 = 12;
                                                                    else
                                                                      v275 = v438;
                                                                    if ((_DWORD)v275)
                                                                    {
                                                                      for (i117 = 0; i117 != v275; ++i117)
                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i117, v15[i117]);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if ((v432 & 1) != 0 && v14 == 704
                                                                      || (v432 & 1) != 0 && v14 == 728
                                                                      || (v432 & 1) != 0 && v14 == 729
                                                                      || (v432 & 1) != 0 && v14 == 730
                                                                      || (v432 & 1) != 0 && v14 == 732
                                                                      || (v432 & 1) != 0 && v14 == 741
                                                                      || (v432 & 1) != 0 && v14 == 742
                                                                      || (v432 & 1) != 0 && v14 == 743
                                                                      || (v432 & 1) != 0 && v14 == 746
                                                                      || (v432 & 1) != 0 && v14 == 747
                                                                      || (v432 & 1) != 0 && v14 == 748
                                                                      || (v432 & 1) != 0 && v14 == 749
                                                                      || (v432 & 1) != 0 && v14 == 750
                                                                      || (v432 & 1) != 0 && v14 == 751
                                                                      || (v432 & 1) != 0 && v14 == 752)
                                                                    {
                                                                      goto LABEL_81;
                                                                    }
                                                                    if ((v432 & 1) != 0 && v14 == 744)
                                                                    {
                                                                      result = fprintf(v8, "%20s:\n", "raidReconstructDurationHisto");
                                                                      if (v438 >= 8)
                                                                        v277 = 8;
                                                                      else
                                                                        v277 = v438;
                                                                      if ((_DWORD)v277)
                                                                      {
                                                                        for (i118 = 0; i118 != v277; ++i118)
                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i118, v15[i118]);
                                                                      }
                                                                    }
                                                                    else if ((v432 & 1) != 0 && v14 == 745)
                                                                    {
                                                                      result = fprintf(v8, "%20s:\n", "failsOnReconstructHisto");
                                                                      if (v438 >= 8)
                                                                        v279 = 8;
                                                                      else
                                                                        v279 = v438;
                                                                      if ((_DWORD)v279)
                                                                      {
                                                                        for (i119 = 0; i119 != v279; ++i119)
                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i119, v15[i119]);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if ((v432 & 1) != 0 && v14 == 776
                                                                        || (v432 & 1) != 0 && v14 == 764
                                                                        || (v432 & 1) != 0 && v14 == 765)
                                                                      {
                                                                        goto LABEL_81;
                                                                      }
                                                                      if ((v432 & 1) != 0 && v14 == 770)
                                                                      {
                                                                        result = fprintf(v8, "%20s:\n", "cpuBurstLength");
                                                                        if (v438 >= 8)
                                                                          v281 = 8;
                                                                        else
                                                                          v281 = v438;
                                                                        if ((_DWORD)v281)
                                                                        {
                                                                          for (i120 = 0; i120 != v281; ++i120)
                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i120, v15[i120]);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((v432 & 1) != 0 && v14 == 778
                                                                          || (v432 & 1) != 0 && v14 == 779
                                                                          || (v432 & 1) != 0 && v14 == 780)
                                                                        {
                                                                          goto LABEL_81;
                                                                        }
                                                                        if ((v432 & 1) != 0 && v14 == 781)
                                                                        {
                                                                          result = fprintf(v8, "%20s:\n", "gcSearchTimeHistory");
                                                                          if (v438 >= 0xA)
                                                                            v283 = 10;
                                                                          else
                                                                            v283 = v438;
                                                                          if ((_DWORD)v283)
                                                                          {
                                                                            for (i121 = 0; i121 != v283; ++i121)
                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i121, v15[i121]);
                                                                          }
                                                                        }
                                                                        else if ((v432 & 1) != 0 && v14 == 785)
                                                                        {
                                                                          result = fprintf(v8, "%20s:\n", "gcSearchPortion");
                                                                          if (v438 >= 0x10)
                                                                            v285 = 16;
                                                                          else
                                                                            v285 = v438;
                                                                          if ((_DWORD)v285)
                                                                          {
                                                                            for (i122 = 0; i122 != v285; ++i122)
                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i122, v15[i122]);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          if ((v432 & 1) != 0 && v14 == 792
                                                                            || (v432 & 1) != 0 && v14 == 793
                                                                            || (v432 & 1) != 0 && v14 == 794
                                                                            || (v432 & 2) != 0 && v14 == 821
                                                                            || (v432 & 1) != 0 && v14 == 822
                                                                            || (v432 & 1) != 0 && v14 == 827)
                                                                          {
                                                                            goto LABEL_81;
                                                                          }
                                                                          if ((v432 & 1) != 0 && v14 == 823)
                                                                          {
                                                                            result = fprintf(v8, "%20s:\n", "readClassifyStatusesHisto");
                                                                            if (v438 >= 3)
                                                                              v287 = 3;
                                                                            else
                                                                              v287 = v438;
                                                                            if ((_DWORD)v287)
                                                                            {
                                                                              for (i123 = 0; i123 != v287; ++i123)
                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i123, v15[i123]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 824)
                                                                          {
                                                                            result = fprintf(v8, "%20s:\n", "readWithAuxStatusesHisto");
                                                                            if (v438 >= 0xA)
                                                                              v289 = 10;
                                                                            else
                                                                              v289 = v438;
                                                                            if ((_DWORD)v289)
                                                                            {
                                                                              for (i124 = 0; i124 != v289; ++i124)
                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i124, v15[i124]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 825)
                                                                          {
                                                                            result = fprintf(v8, "%20s:\n", "readReconstructStatusesHisto");
                                                                            if (v438 >= 0xA)
                                                                              v291 = 10;
                                                                            else
                                                                              v291 = v438;
                                                                            if ((_DWORD)v291)
                                                                            {
                                                                              for (i125 = 0; i125 != v291; ++i125)
                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i125, v15[i125]);
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            if ((v432 & 1) != 0 && v14 == 830
                                                                              || (v432 & 1) != 0 && v14 == 831
                                                                              || (v432 & 2) != 0 && v14 == 832)
                                                                            {
                                                                              goto LABEL_81;
                                                                            }
                                                                            if ((v432 & 2) != 0 && v14 == 855)
                                                                            {
                                                                              result = fprintf(v8, "%20s:\n", "fwFormatVersion");
                                                                              if (v438 >= 3)
                                                                                v293 = 3;
                                                                              else
                                                                                v293 = v438;
                                                                              if ((_DWORD)v293)
                                                                              {
                                                                                for (i126 = 0; i126 != v293; ++i126)
                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i126, v15[i126]);
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if ((v432 & 1) != 0 && v14 == 883)
                                                                                goto LABEL_81;
                                                                              if ((v432 & 2) != 0 && v14 == 868)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc");
                                                                                if (v438 >= 0x20)
                                                                                  v295 = 32;
                                                                                else
                                                                                  v295 = v438;
                                                                                if ((_DWORD)v295)
                                                                                {
                                                                                  for (i127 = 0; i127 != v295; ++i127)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i127, v15[i127]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 869)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc");
                                                                                if (v438 >= 0x20)
                                                                                  v297 = 32;
                                                                                else
                                                                                  v297 = v438;
                                                                                if ((_DWORD)v297)
                                                                                {
                                                                                  for (i128 = 0; i128 != v297; ++i128)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i128, v15[i128]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 870)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc_he");
                                                                                if (v438 >= 0x20)
                                                                                  v299 = 32;
                                                                                else
                                                                                  v299 = v438;
                                                                                if ((_DWORD)v299)
                                                                                {
                                                                                  for (i129 = 0; i129 != v299; ++i129)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i129, v15[i129]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 871)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc_he");
                                                                                if (v438 >= 0x20)
                                                                                  v301 = 32;
                                                                                else
                                                                                  v301 = v438;
                                                                                if ((_DWORD)v301)
                                                                                {
                                                                                  for (i130 = 0; i130 != v301; ++i130)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i130, v15[i130]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 876)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsSlc_mbc");
                                                                                if (v438 >= 0x20)
                                                                                  v303 = 32;
                                                                                else
                                                                                  v303 = v438;
                                                                                if ((_DWORD)v303)
                                                                                {
                                                                                  for (i131 = 0; i131 != v303; ++i131)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i131, v15[i131]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 877)
                                                                              {
                                                                                result = fprintf(v8, "%20s:\n", "dmReasonsTlc_mbc");
                                                                                if (v438 >= 0x20)
                                                                                  v305 = 32;
                                                                                else
                                                                                  v305 = v438;
                                                                                if ((_DWORD)v305)
                                                                                {
                                                                                  for (i132 = 0; i132 != v305; ++i132)
                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i132, v15[i132]);
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                if ((v432 & 1) != 0 && v14 == 896)
                                                                                  goto LABEL_81;
                                                                                if ((v432 & 1) != 0 && v14 == 897)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "wcWrFragSizes");
                                                                                  if (v438 >= 0x10)
                                                                                    v307 = 16;
                                                                                  else
                                                                                    v307 = v438;
                                                                                  if ((_DWORD)v307)
                                                                                  {
                                                                                    for (i133 = 0; i133 != v307; ++i133)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i133, v15[i133]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 905)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidRelPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v309 = 16;
                                                                                  else
                                                                                    v309 = v438;
                                                                                  if ((_DWORD)v309)
                                                                                  {
                                                                                    for (i134 = 0; i134 != v309; ++i134)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i134, v15[i134]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 906)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v311 = 16;
                                                                                  else
                                                                                    v311 = v438;
                                                                                  if ((_DWORD)v311)
                                                                                  {
                                                                                    for (i135 = 0; i135 != v311; ++i135)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i135, v15[i135]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 907)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMaxRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v313 = 16;
                                                                                  else
                                                                                    v313 = v438;
                                                                                  if ((_DWORD)v313)
                                                                                  {
                                                                                    for (i136 = 0; i136 != v313; ++i136)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i136, v15[i136]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 908)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMinRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v315 = 16;
                                                                                  else
                                                                                    v315 = v438;
                                                                                  if ((_DWORD)v315)
                                                                                  {
                                                                                    for (i137 = 0; i137 != v315; ++i137)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i137, v15[i137]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 918)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenRel");
                                                                                  if (v438 >= 0x10)
                                                                                    v317 = 16;
                                                                                  else
                                                                                    v317 = v438;
                                                                                  if ((_DWORD)v317)
                                                                                  {
                                                                                    for (i138 = 0; i138 != v317; ++i138)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i138, v15[i138]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 919)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenRel");
                                                                                  if (v438 >= 0x10)
                                                                                    v319 = 16;
                                                                                  else
                                                                                    v319 = v438;
                                                                                  if ((_DWORD)v319)
                                                                                  {
                                                                                    for (i139 = 0; i139 != v319; ++i139)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i139, v15[i139]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 932)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidLastRelPECycles");
                                                                                  if (v438 >= 0x10)
                                                                                    v321 = 16;
                                                                                  else
                                                                                    v321 = v438;
                                                                                  if ((_DWORD)v321)
                                                                                  {
                                                                                    for (i140 = 0; i140 != v321; ++i140)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i140, v15[i140]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 933)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidRelQualPECycles");
                                                                                  if (v438 >= 0x10)
                                                                                    v323 = 16;
                                                                                  else
                                                                                    v323 = v438;
                                                                                  if ((_DWORD)v323)
                                                                                  {
                                                                                    for (i141 = 0; i141 != v323; ++i141)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i141, v15[i141]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 920)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidAuxPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v325 = 16;
                                                                                  else
                                                                                    v325 = v438;
                                                                                  if ((_DWORD)v325)
                                                                                  {
                                                                                    for (i142 = 0; i142 != v325; ++i142)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i142, v15[i142]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 921)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidAuxBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10)
                                                                                    v327 = 16;
                                                                                  else
                                                                                    v327 = v438;
                                                                                  if ((_DWORD)v327)
                                                                                  {
                                                                                    for (i143 = 0; i143 != v327; ++i143)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i143, v15[i143]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 930)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenAux");
                                                                                  if (v438 >= 0x10)
                                                                                    v329 = 16;
                                                                                  else
                                                                                    v329 = v438;
                                                                                  if ((_DWORD)v329)
                                                                                  {
                                                                                    for (i144 = 0; i144 != v329; ++i144)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i144, v15[i144]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 931)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenAux");
                                                                                  if (v438 >= 0x10)
                                                                                    v331 = 16;
                                                                                  else
                                                                                    v331 = v438;
                                                                                  if ((_DWORD)v331)
                                                                                  {
                                                                                    for (i145 = 0; i145 != v331; ++i145)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i145, v15[i145]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 934)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidLastAuxPECycles");
                                                                                  if (v438 >= 0x10)
                                                                                    v333 = 16;
                                                                                  else
                                                                                    v333 = v438;
                                                                                  if ((_DWORD)v333)
                                                                                  {
                                                                                    for (i146 = 0; i146 != v333; ++i146)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i146, v15[i146]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 935)
                                                                                {
                                                                                  result = fprintf(v8, "%20s:\n", "turboRaidAuxQualPECycles");
                                                                                  if (v438 >= 0x10)
                                                                                    v335 = 16;
                                                                                  else
                                                                                    v335 = v438;
                                                                                  if ((_DWORD)v335)
                                                                                  {
                                                                                    for (i147 = 0; i147 != v335; ++i147)
                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i147, v15[i147]);
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  if ((v432 & 1) != 0 && v14 == 922
                                                                                    || (v432 & 1) != 0 && v14 == 923)
                                                                                  {
                                                                                    goto LABEL_81;
                                                                                  }
                                                                                  if ((v432 & 1) != 0 && v14 == 910)
                                                                                  {
                                                                                    result = fprintf(v8, "%20s:\n", "pgBelowMinBands");
                                                                                    if (v438 >= 2)
                                                                                      v337 = 2;
                                                                                    else
                                                                                      v337 = v438;
                                                                                    if ((_DWORD)v337)
                                                                                    {
                                                                                      for (i148 = 0; i148 != v337; ++i148)
                                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i148, v15[i148]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0
                                                                                         && v14 == 911)
                                                                                  {
                                                                                    result = fprintf(v8, "%20s:\n", "pgNoBands");
                                                                                    if (v438 >= 2)
                                                                                      v339 = 2;
                                                                                    else
                                                                                      v339 = v438;
                                                                                    if ((_DWORD)v339)
                                                                                    {
                                                                                      for (i149 = 0; i149 != v339; ++i149)
                                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i149, v15[i149]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0
                                                                                         && v14 == 912)
                                                                                  {
                                                                                    result = fprintf(v8, "%20s:\n", "pgBelowMinBlocks");
                                                                                    if (v438 >= 2)
                                                                                      v341 = 2;
                                                                                    else
                                                                                      v341 = v438;
                                                                                    if ((_DWORD)v341)
                                                                                    {
                                                                                      for (i150 = 0; i150 != v341; ++i150)
                                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i150, v15[i150]);
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    if ((v432 & 1) != 0 && v14 == 915
                                                                                      || (v432 & 1) != 0 && v14 == 925
                                                                                      || (v432 & 1) != 0 && v14 == 946
                                                                                      || (v432 & 1) != 0 && v14 == 936
                                                                                      || (v432 & 1) != 0 && v14 == 937
                                                                                      || (v432 & 1) != 0 && v14 == 938
                                                                                      || (v432 & 1) != 0 && v14 == 939
                                                                                      || (v432 & 1) != 0 && v14 == 940
                                                                                      || (v432 & 2) != 0 && v14 == 954
                                                                                      || (v432 & 2) != 0 && v14 == 942
                                                                                      || (v432 & 2) != 0 && v14 == 943
                                                                                      || (v432 & 2) != 0 && v14 == 944
                                                                                      || (v432 & 1) != 0 && v14 == 957
                                                                                      || (v432 & 1) != 0 && v14 == 958)
                                                                                    {
                                                                                      goto LABEL_81;
                                                                                    }
                                                                                    if ((v432 & 2) != 0 && v14 == 948)
                                                                                    {
                                                                                      result = fprintf(v8, "%20s:\n", "assertHistory");
                                                                                      if (v438 >= 0x28)
                                                                                        v343 = 40;
                                                                                      else
                                                                                        v343 = v438;
                                                                                      if ((_DWORD)v343)
                                                                                      {
                                                                                        for (i151 = 0;
                                                                                              i151 != v343;
                                                                                              ++i151)
                                                                                        {
                                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i151, v15[i151]);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if ((v432 & 2) != 0 && v14 == 951
                                                                                        || (v432 & 2) != 0 && v14 == 952
                                                                                        || (v432 & 1) != 0 && v14 == 955
                                                                                        || (v432 & 1) != 0 && v14 == 966
                                                                                        || (v432 & 1) != 0 && v14 == 968
                                                                                        || (v432 & 1) != 0 && v14 == 969)
                                                                                      {
                                                                                        goto LABEL_81;
                                                                                      }
                                                                                      if ((v432 & 1) != 0 && v14 == 961)
                                                                                      {
                                                                                        result = fprintf(v8, "%20s:\n", "osBuildStr");
                                                                                        if (v438 >= 2)
                                                                                          v345 = 2;
                                                                                        else
                                                                                          v345 = v438;
                                                                                        if ((_DWORD)v345)
                                                                                        {
                                                                                          for (i152 = 0;
                                                                                                i152 != v345;
                                                                                                ++i152)
                                                                                          {
                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i152, v15[i152]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0
                                                                                             && v14 == 967)
                                                                                      {
                                                                                        result = fprintf(v8, "%20s:\n", "indTrimFrags");
                                                                                        if (v438 >= 0xC)
                                                                                          v347 = 12;
                                                                                        else
                                                                                          v347 = v438;
                                                                                        if ((_DWORD)v347)
                                                                                        {
                                                                                          for (i153 = 0;
                                                                                                i153 != v347;
                                                                                                ++i153)
                                                                                          {
                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i153, v15[i153]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0
                                                                                             && v14 == 971)
                                                                                      {
                                                                                        result = fprintf(v8, "%20s:\n", "indUsedFrags");
                                                                                        if (v438 >= 0xC)
                                                                                          v349 = 12;
                                                                                        else
                                                                                          v349 = v438;
                                                                                        if ((_DWORD)v349)
                                                                                        {
                                                                                          for (i154 = 0;
                                                                                                i154 != v349;
                                                                                                ++i154)
                                                                                          {
                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i154, v15[i154]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 985
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 973
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 976
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 980
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 981
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 982
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 984
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 990
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 992
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 993
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 994
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 986
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 987
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1000
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1013)
                                                                                        {
                                                                                          goto LABEL_81;
                                                                                        }
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 1015)
                                                                                        {
                                                                                          result = fprintf(v8, "%20s:\n", "eanEarlyBootUeccPage");
                                                                                          if (v438 >= 4)
                                                                                            v351 = 4;
                                                                                          else
                                                                                            v351 = v438;
                                                                                          if ((_DWORD)v351)
                                                                                          {
                                                                                            for (i155 = 0;
                                                                                                  i155 != v351;
                                                                                                  ++i155)
                                                                                            {
                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i155, v15[i155]);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1016
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1017
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1020
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1021
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1027
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1028
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1029
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1022
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1023
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1025
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1026
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1030)
                                                                                          {
                                                                                            goto LABEL_81;
                                                                                          }
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1040)
                                                                                          {
                                                                                            result = fprintf(v8, "%20s:\n", "bandsAgeBinsV2");
                                                                                            if (v438 >= 0x1F)
                                                                                              v353 = 31;
                                                                                            else
                                                                                              v353 = v438;
                                                                                            if ((_DWORD)v353)
                                                                                            {
                                                                                              for (i156 = 0;
                                                                                                    i156 != v353;
                                                                                                    ++i156)
                                                                                              {
                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i156, v15[i156]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1041)
                                                                                          {
                                                                                            result = fprintf(v8, "%20s:\n", "bandsAgeBinsSnapshot");
                                                                                            if (v438 >= 0x1F)
                                                                                              v355 = 31;
                                                                                            else
                                                                                              v355 = v438;
                                                                                            if ((_DWORD)v355)
                                                                                            {
                                                                                              for (i157 = 0;
                                                                                                    i157 != v355;
                                                                                                    ++i157)
                                                                                              {
                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i157, v15[i157]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1042)
                                                                                          {
                                                                                            result = fprintf(v8, "%20s:\n", "bandsAgeBinsReadSectors");
                                                                                            if (v438 >= 0xF)
                                                                                              v357 = 15;
                                                                                            else
                                                                                              v357 = v438;
                                                                                            if ((_DWORD)v357)
                                                                                            {
                                                                                              for (i158 = 0;
                                                                                                    i158 != v357;
                                                                                                    ++i158)
                                                                                              {
                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i158, v15[i158]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            if ((v432 & 2) != 0
                                                                                              && v14 == 1050
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1051
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1052
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1053
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1061)
                                                                                            {
                                                                                              goto LABEL_81;
                                                                                            }
                                                                                            if ((v432 & 1) != 0
                                                                                              && v14 == 1057)
                                                                                            {
                                                                                              result = fprintf(v8, "%20s:\n", "hostReadsVerticalByFlow");
                                                                                              if (v438 >= 3)
                                                                                                v359 = 3;
                                                                                              else
                                                                                                v359 = v438;
                                                                                              if ((_DWORD)v359)
                                                                                              {
                                                                                                for (i159 = 0;
                                                                                                      i159 != v359;
                                                                                                      ++i159)
                                                                                                {
                                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i159, v15[i159]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else if ((v432 & 1) != 0 && v14 == 1058)
                                                                                            {
                                                                                              result = fprintf(v8, "%20s:\n", "hostReadsByFlow");
                                                                                              if (v438 >= 7)
                                                                                                v361 = 7;
                                                                                              else
                                                                                                v361 = v438;
                                                                                              if ((_DWORD)v361)
                                                                                              {
                                                                                                for (i160 = 0;
                                                                                                      i160 != v361;
                                                                                                      ++i160)
                                                                                                {
                                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i160, v15[i160]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1036
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1037
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1076
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1098)
                                                                                              {
                                                                                                goto LABEL_81;
                                                                                              }
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1099)
                                                                                              {
                                                                                                result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInDip");
                                                                                                if (v438 >= 4)
                                                                                                  v363 = 4;
                                                                                                else
                                                                                                  v363 = v438;
                                                                                                if ((_DWORD)v363)
                                                                                                {
                                                                                                  for (i161 = 0;
                                                                                                        i161 != v363;
                                                                                                        ++i161)
                                                                                                  {
                                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i161, v15[i161]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else if ((v432 & 1) != 0 && v14 == 1139)
                                                                                              {
                                                                                                result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInPG");
                                                                                                if (v438 >= 4)
                                                                                                  v365 = 4;
                                                                                                else
                                                                                                  v365 = v438;
                                                                                                if ((_DWORD)v365)
                                                                                                {
                                                                                                  for (i162 = 0;
                                                                                                        i162 != v365;
                                                                                                        ++i162)
                                                                                                  {
                                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i162, v15[i162]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if ((v432 & 1) != 0 && v14 == 1140 || (v432 & 1) != 0 && v14 == 1141 || (v432 & 1) != 0 && v14 == 1200 || (v432 & 1) != 0 && v14 == 1080)
                                                                                                  goto LABEL_81;
                                                                                                if ((v432 & 1) != 0 && v14 == 1105)
                                                                                                {
                                                                                                  result = fprintf(v8, "%20s:\n", "hostReadSequential");
                                                                                                  if (v438 >= 0xE)
                                                                                                    v367 = 14;
                                                                                                  else
                                                                                                    v367 = v438;
                                                                                                  if ((_DWORD)v367)
                                                                                                  {
                                                                                                    for (i163 = 0;
                                                                                                          i163 != v367;
                                                                                                          ++i163)
                                                                                                    {
                                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i163, v15[i163]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else if ((v432 & 1) != 0 && v14 == 1106)
                                                                                                {
                                                                                                  result = fprintf(v8, "%20s:\n", "GCReadSequential");
                                                                                                  if (v438 >= 0xE)
                                                                                                    v369 = 14;
                                                                                                  else
                                                                                                    v369 = v438;
                                                                                                  if ((_DWORD)v369)
                                                                                                  {
                                                                                                    for (i164 = 0;
                                                                                                          i164 != v369;
                                                                                                          ++i164)
                                                                                                    {
                                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i164, v15[i164]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if ((v432 & 2) != 0 && v14 == 1118 || (v432 & 2) != 0 && v14 == 1121 || (v432 & 1) != 0 && v14 == 1123 || (v432 & 1) != 0 && v14 == 1124 || (v432 & 1) != 0 && v14 == 1125 || (v432 & 1) != 0 && v14 == 1126 || (v432 & 1) != 0 && v14 == 1137 || (v432 & 1) != 0 && v14 == 1138 || (v432 & 1) != 0 && v14 == 1156)
                                                                                                    goto LABEL_81;
                                                                                                  if ((v432 & 1) != 0 && v14 == 1116)
                                                                                                  {
                                                                                                    result = fprintf(v8, "%20s:\n", "gcwamp");
                                                                                                    if (v438 >= 0x20)
                                                                                                      v371 = 32;
                                                                                                    else
                                                                                                      v371 = v438;
                                                                                                    if ((_DWORD)v371)
                                                                                                    {
                                                                                                      for (i165 = 0;
                                                                                                            i165 != v371;
                                                                                                            ++i165)
                                                                                                      {
                                                                                                        result = fprintf(v8, "                      [%d] = %llu\n", i165, v15[i165]);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if ((v432 & 1) != 0 && v14 == 1157 || (v432 & 1) != 0 && v14 == 1158 || (v432 & 1) != 0 && v14 == 1164)
                                                                                                      goto LABEL_81;
                                                                                                    if ((v432 & 2) != 0 && v14 == 1159)
                                                                                                    {
                                                                                                      result = fprintf(v8, "%20s:\n", "slcWLPerDipDelta");
                                                                                                      if (v438 >= 0x18)
                                                                                                        v373 = 24;
                                                                                                      else
                                                                                                        v373 = v438;
                                                                                                      if ((_DWORD)v373)
                                                                                                      {
                                                                                                        for (i166 = 0;
                                                                                                              i166 != v373;
                                                                                                              ++i166)
                                                                                                        {
                                                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i166, v15[i166]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1160)
                                                                                                    {
                                                                                                      result = fprintf(v8, "%20s:\n", "slcWLPerDipAvgPEC");
                                                                                                      if (v438 >= 0x18)
                                                                                                        v375 = 24;
                                                                                                      else
                                                                                                        v375 = v438;
                                                                                                      if ((_DWORD)v375)
                                                                                                      {
                                                                                                        for (i167 = 0;
                                                                                                              i167 != v375;
                                                                                                              ++i167)
                                                                                                        {
                                                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i167, v15[i167]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1161)
                                                                                                    {
                                                                                                      result = fprintf(v8, "%20s:\n", "slcWLPerDipSlack");
                                                                                                      if (v438 >= 0x18)
                                                                                                        v377 = 24;
                                                                                                      else
                                                                                                        v377 = v438;
                                                                                                      if ((_DWORD)v377)
                                                                                                      {
                                                                                                        for (i168 = 0;
                                                                                                              i168 != v377;
                                                                                                              ++i168)
                                                                                                        {
                                                                                                          result = fprintf(v8, "                      [%d] = %llu\n", i168, v15[i168]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if ((v432 & 2) != 0 && v14 == 1162 || (v432 & 2) != 0 && v14 == 1163)
                                                                                                        goto LABEL_81;
                                                                                                      if ((v432 & 2) != 0 && v14 == 1216)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "tlcWLPerDipAvgPEC");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v379 = 24;
                                                                                                        else
                                                                                                          v379 = v438;
                                                                                                        if ((_DWORD)v379)
                                                                                                        {
                                                                                                          for (i169 = 0;
                                                                                                                i169 != v379;
                                                                                                                ++i169)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i169, v15[i169]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1217)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "tlcWLPerDipMaxPEC");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v381 = 24;
                                                                                                        else
                                                                                                          v381 = v438;
                                                                                                        if ((_DWORD)v381)
                                                                                                        {
                                                                                                          for (i170 = 0;
                                                                                                                i170 != v381;
                                                                                                                ++i170)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i170, v15[i170]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1218)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "tlcWLPerDipMinPEC");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v383 = 24;
                                                                                                        else
                                                                                                          v383 = v438;
                                                                                                        if ((_DWORD)v383)
                                                                                                        {
                                                                                                          for (i171 = 0;
                                                                                                                i171 != v383;
                                                                                                                ++i171)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i171, v15[i171]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1147)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc12");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v385 = 24;
                                                                                                        else
                                                                                                          v385 = v438;
                                                                                                        if ((_DWORD)v385)
                                                                                                        {
                                                                                                          for (i172 = 0;
                                                                                                                i172 != v385;
                                                                                                                ++i172)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i172, v15[i172]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1148)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc1");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v387 = 24;
                                                                                                        else
                                                                                                          v387 = v438;
                                                                                                        if ((_DWORD)v387)
                                                                                                        {
                                                                                                          for (i173 = 0;
                                                                                                                i173 != v387;
                                                                                                                ++i173)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i173, v15[i173]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1149)
                                                                                                      {
                                                                                                        result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc2");
                                                                                                        if (v438 >= 0x18)
                                                                                                          v389 = 24;
                                                                                                        else
                                                                                                          v389 = v438;
                                                                                                        if ((_DWORD)v389)
                                                                                                        {
                                                                                                          for (i174 = 0;
                                                                                                                i174 != v389;
                                                                                                                ++i174)
                                                                                                          {
                                                                                                            result = fprintf(v8, "                      [%d] = %llu\n", i174, v15[i174]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        if ((v432 & 1) != 0 && v14 == 1178)
                                                                                                          goto LABEL_81;
                                                                                                        if ((v432 & 2) != 0 && v14 == 1179)
                                                                                                        {
                                                                                                          result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc1");
                                                                                                          if (v438 >= 4)
                                                                                                            v391 = 4;
                                                                                                          else
                                                                                                            v391 = v438;
                                                                                                          if ((_DWORD)v391)
                                                                                                          {
                                                                                                            for (i175 = 0;
                                                                                                                  i175 != v391;
                                                                                                                  ++i175)
                                                                                                            {
                                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i175, v15[i175]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1180)
                                                                                                        {
                                                                                                          result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc2");
                                                                                                          if (v438 >= 4)
                                                                                                            v393 = 4;
                                                                                                          else
                                                                                                            v393 = v438;
                                                                                                          if ((_DWORD)v393)
                                                                                                          {
                                                                                                            for (i176 = 0;
                                                                                                                  i176 != v393;
                                                                                                                  ++i176)
                                                                                                            {
                                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i176, v15[i176]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1181)
                                                                                                        {
                                                                                                          result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc3");
                                                                                                          if (v438 >= 4)
                                                                                                            v395 = 4;
                                                                                                          else
                                                                                                            v395 = v438;
                                                                                                          if ((_DWORD)v395)
                                                                                                          {
                                                                                                            for (i177 = 0;
                                                                                                                  i177 != v395;
                                                                                                                  ++i177)
                                                                                                            {
                                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i177, v15[i177]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1182)
                                                                                                        {
                                                                                                          result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc1");
                                                                                                          if (v438 >= 4)
                                                                                                            v397 = 4;
                                                                                                          else
                                                                                                            v397 = v438;
                                                                                                          if ((_DWORD)v397)
                                                                                                          {
                                                                                                            for (i178 = 0;
                                                                                                                  i178 != v397;
                                                                                                                  ++i178)
                                                                                                            {
                                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i178, v15[i178]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1183)
                                                                                                        {
                                                                                                          result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc2");
                                                                                                          if (v438 >= 4)
                                                                                                            v399 = 4;
                                                                                                          else
                                                                                                            v399 = v438;
                                                                                                          if ((_DWORD)v399)
                                                                                                          {
                                                                                                            for (i179 = 0;
                                                                                                                  i179 != v399;
                                                                                                                  ++i179)
                                                                                                            {
                                                                                                              result = fprintf(v8, "                      [%d] = %llu\n", i179, v15[i179]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if ((v432 & 2) != 0 && v14 == 1184 || (v432 & 2) != 0 && v14 == 1185 || (v432 & 2) != 0 && v14 == 1186 || (v432 & 1) != 0 && v14 == 1187)
                                                                                                            goto LABEL_81;
                                                                                                          if ((v432 & 1) != 0 && v14 == 1168)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectPERemovalTotalCost");
                                                                                                            if (v438 >= 2)
                                                                                                              v401 = 2;
                                                                                                            else
                                                                                                              v401 = v438;
                                                                                                            if ((_DWORD)v401)
                                                                                                            {
                                                                                                              for (i180 = 0;
                                                                                                                    i180 != v401;
                                                                                                                    ++i180)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i180, v15[i180]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1198)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectPERemovalMostSevereCost");
                                                                                                            if (v438 >= 3)
                                                                                                              v403 = 3;
                                                                                                            else
                                                                                                              v403 = v438;
                                                                                                            if ((_DWORD)v403)
                                                                                                            {
                                                                                                              for (i181 = 0;
                                                                                                                    i181 != v403;
                                                                                                                    ++i181)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i181, v15[i181]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1169)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalTotalCost");
                                                                                                            if (v438 >= 2)
                                                                                                              v405 = 2;
                                                                                                            else
                                                                                                              v405 = v438;
                                                                                                            if ((_DWORD)v405)
                                                                                                            {
                                                                                                              for (i182 = 0;
                                                                                                                    i182 != v405;
                                                                                                                    ++i182)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i182, v15[i182]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1171)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalAge");
                                                                                                            if (v438 >= 0xA)
                                                                                                              v407 = 10;
                                                                                                            else
                                                                                                              v407 = v438;
                                                                                                            if ((_DWORD)v407)
                                                                                                            {
                                                                                                              for (i183 = 0;
                                                                                                                    i183 != v407;
                                                                                                                    ++i183)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i183, v15[i183]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1172)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectGBBedMostSevereCost");
                                                                                                            if (v438 >= 3)
                                                                                                              v409 = 3;
                                                                                                            else
                                                                                                              v409 = v438;
                                                                                                            if ((_DWORD)v409)
                                                                                                            {
                                                                                                              for (i184 = 0;
                                                                                                                    i184 != v409;
                                                                                                                    ++i184)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i184, v15[i184]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1196)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectGBBedTotalCost");
                                                                                                            if (v438 >= 5)
                                                                                                              v411 = 5;
                                                                                                            else
                                                                                                              v411 = v438;
                                                                                                            if ((_DWORD)v411)
                                                                                                            {
                                                                                                              for (i185 = 0;
                                                                                                                    i185 != v411;
                                                                                                                    ++i185)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i185, v15[i185]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1197)
                                                                                                          {
                                                                                                            result = fprintf(v8, "%20s:\n", "poDetectGBBedAge");
                                                                                                            if (v438 >= 0xA)
                                                                                                              v413 = 10;
                                                                                                            else
                                                                                                              v413 = v438;
                                                                                                            if ((_DWORD)v413)
                                                                                                            {
                                                                                                              for (i186 = 0;
                                                                                                                    i186 != v413;
                                                                                                                    ++i186)
                                                                                                              {
                                                                                                                result = fprintf(v8, "                      [%d] = %llu\n", i186, v15[i186]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            if ((v432 & 1) != 0 && v14 == 1199 || (v432 & 1) != 0 && v14 == 1191 || (v432 & 1) != 0 && v14 == 1192 || (v432 & 1) != 0 && v14 == 1205)
                                                                                                              goto LABEL_81;
                                                                                                            if ((v432 & 1) != 0 && v14 == 1211)
                                                                                                            {
                                                                                                              result = fprintf(v8, "%20s:\n", "forcedAllocationSmallEraseQ");
                                                                                                              if (v438 >= 0x18)
                                                                                                                v415 = 24;
                                                                                                              else
                                                                                                                v415 = v438;
                                                                                                              if ((_DWORD)v415)
                                                                                                              {
                                                                                                                for (i187 = 0;
                                                                                                                      i187 != v415;
                                                                                                                      ++i187)
                                                                                                                {
                                                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i187, v15[i187]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1201)
                                                                                                            {
                                                                                                              result = fprintf(v8, "%20s:\n", "gcVerticalSuccssfulAlignments");
                                                                                                              if (v438 >= 4)
                                                                                                                v417 = 4;
                                                                                                              else
                                                                                                                v417 = v438;
                                                                                                              if ((_DWORD)v417)
                                                                                                              {
                                                                                                                for (i188 = 0;
                                                                                                                      i188 != v417;
                                                                                                                      ++i188)
                                                                                                                {
                                                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i188, v15[i188]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1202)
                                                                                                            {
                                                                                                              result = fprintf(v8, "%20s:\n", "gcVerticalNoAlignmentDueToMissingSegs");
                                                                                                              if (v438 >= 4)
                                                                                                                v419 = 4;
                                                                                                              else
                                                                                                                v419 = v438;
                                                                                                              if ((_DWORD)v419)
                                                                                                              {
                                                                                                                for (i189 = 0;
                                                                                                                      i189 != v419;
                                                                                                                      ++i189)
                                                                                                                {
                                                                                                                  result = fprintf(v8, "                      [%d] = %llu\n", i189, v15[i189]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if ((v432 & 2) != 0 && v14 == 1225 || (v432 & 2) != 0 && v14 == 1226 || (v432 & 2) != 0 && v14 == 1227)
                                                                                                                goto LABEL_81;
                                                                                                              if ((v432 & 1) != 0 && v14 == 1228)
                                                                                                              {
                                                                                                                result = fprintf(v8, "%20s:\n", "HUPolicyWidthDown");
                                                                                                                if (v438 >= 6)
                                                                                                                  v421 = 6;
                                                                                                                else
                                                                                                                  v421 = v438;
                                                                                                                if ((_DWORD)v421)
                                                                                                                {
                                                                                                                  for (i190 = 0;
                                                                                                                        i190 != v421;
                                                                                                                        ++i190)
                                                                                                                  {
                                                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i190, v15[i190]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else if ((v432 & 1) != 0 && v14 == 1229)
                                                                                                              {
                                                                                                                result = fprintf(v8, "%20s:\n", "HUPolicyWidthUp");
                                                                                                                if (v438 >= 6)
                                                                                                                  v423 = 6;
                                                                                                                else
                                                                                                                  v423 = v438;
                                                                                                                if ((_DWORD)v423)
                                                                                                                {
                                                                                                                  for (i191 = 0;
                                                                                                                        i191 != v423;
                                                                                                                        ++i191)
                                                                                                                  {
                                                                                                                    result = fprintf(v8, "                      [%d] = %llu\n", i191, v15[i191]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if ((v432 & 2) != 0 && v14 == 1230 || (v432 & 2) != 0 && v14 == 1231 || (v432 & 1) != 0 && v14 == 1235 || (v432 & 1) != 0 && v14 == 1236 || (v432 & 1) != 0 && v14 == 1232 || (v432 & 1) != 0 && v14 == 1233 || (v432 & 1) != 0 && v14 == 1234)
                                                                                                                  goto LABEL_81;
                                                                                                                if ((v432 & 1) != 0 && v14 == 1224)
                                                                                                                {
                                                                                                                  result = fprintf(v8, "%20s:\n", "apfsValidLbaOvershoot");
                                                                                                                  if (v438 >= 0x14)
                                                                                                                    v425 = 20;
                                                                                                                  else
                                                                                                                    v425 = v438;
                                                                                                                  if ((_DWORD)v425)
                                                                                                                  {
                                                                                                                    for (i192 = 0;
                                                                                                                          i192 != v425;
                                                                                                                          ++i192)
                                                                                                                    {
                                                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i192, v15[i192]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else if ((v432 & 1) != 0 && v14 == 1241)
                                                                                                                {
                                                                                                                  result = fprintf(v8, "%20s:\n", "s2rTimeHisto");
                                                                                                                  if (v438 >= 0xA)
                                                                                                                    v427 = 10;
                                                                                                                  else
                                                                                                                    v427 = v438;
                                                                                                                  if ((_DWORD)v427)
                                                                                                                  {
                                                                                                                    for (i193 = 0;
                                                                                                                          i193 != v427;
                                                                                                                          ++i193)
                                                                                                                    {
                                                                                                                      result = fprintf(v8, "                      [%d] = %llu\n", i193, v15[i193]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  if ((v432 & 2) != 0 && v14 == 1247 || (v432 & 2) != 0 && v14 == 1248 || (v432 & 1) != 0 && v14 == 1254 || (v432 & 1) != 0 && v14 == 1255 || (v432 & 1) != 0 && v14 == 1256)
                                                                                                                    goto LABEL_81;
                                                                                                                  if (*(_DWORD *)v435 && (_DWORD)v438)
                                                                                                                  {
                                                                                                                    if ((_DWORD)v438 == 1)
                                                                                                                    {
                                                                                                                      result = fprintf(v8, "                KEY_%u:\t%llu\n");
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      printf("KEY_%u:\n", v14);
                                                                                                                      v429 = 0;
                                                                                                                      if (v438 >= 0x100)
                                                                                                                        v430 = 256;
                                                                                                                      else
                                                                                                                        v430 = v438;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        result = fprintf(v8, "                      [%d] = %llu\n", v429, v15[v429]);
                                                                                                                        ++v429;
                                                                                                                      }
                                                                                                                      while (v430 != v429);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_82:
          v10 = v23;
          a4 = v432;
          v7 = v22;
          v11 = v434;
          goto LABEL_32;
        }
        v116 = "TempSensorMin";
      }
      result = fprintf(v8, "%20s:\n", v116);
      if ((_DWORD)v438)
        result = fprintf(v8, "                      [%d] = %llu\n");
      goto LABEL_82;
    }
    result = fprintf(v8, "%20s:\t%llu\n", "validLbas", *v15);
LABEL_32:
    a2 = &v15[v438];
    a3 = v17 - v438;
    if (!a3)
      goto LABEL_3133;
  }
  result = fwrite("ASPUserClient: maxEl < elements", 0x1FuLL, 1uLL, v8);
LABEL_3133:
  if (v437)
  {
    result = fprintf(v8, "%20s:\t%f\n", "WriteAmp", (double)v436 * (double)((v13 * *(_DWORD *)&v435[4]) >> 12) / (double)v437);
    if (v12)
    {
      if ((_DWORD)v11)
        result = fprintf(v8, "%20s:\t%f\n", "IntermediateWriteAmp", (double)v12 * (double)((v11 * v13) >> 12) / (double)v437);
    }
  }
  if (v10)
    result = fprintf(v8, "%20s:\t%llu\n", "statsMagCalTime", (v10 >> 24));
LABEL_3139:
  if (v7)
    return fclose(v8);
  return result;
}

uint64_t extract_all_magazine_stats(const char *a1)
{
  const char *v1;
  FILE *v2;
  FILE *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  FILE *v12;
  const char *v13;
  size_t v14;
  char **v16;
  size_t __size;
  unint64_t v18;
  void *__ptr;
  _OWORD v20[3];
  int v21;
  _BYTE v22[44];
  int v23;
  _BYTE v24[36];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 0xDEADBEEFDEADBEEFLL;
  __ptr = 0;
  v16 = 0;
  __size = 0;
  if (!a1)
  {
    v1 = "NULL";
    goto LABEL_19;
  }
  v1 = a1;
  v2 = fopen(a1, "a");
  if (!v2)
  {
LABEL_19:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: cannot open dest file %s", v1);
    v11 = 0;
    v3 = 0;
    goto LABEL_23;
  }
  v3 = v2;
  v20[0] = xmmword_1CB388400;
  v20[1] = xmmword_1CB388410;
  v20[2] = xmmword_1CB388420;
  v21 = 168;
  v4 = v22;
  v5 = -1176;
  do
  {
    *v4++ = v5 + 1512;
    v5 += 168;
  }
  while (v5);
  v6 = 0;
  *(_OWORD *)&v22[28] = xmmword_1CB388430;
  v23 = 8064;
  v7 = 8736;
  do
  {
    *(_DWORD *)&v24[v6] = v7;
    v6 += 4;
    v7 += 4368;
  }
  while (v6 != 36);
  if (findNandExporter_tunnel(&v16) && v16 && *((_DWORD *)v16 + 4))
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_DWORD *)((char *)v20 + v8);
      if (!getStatsMagazineBufferFromPast(v16, v9, 1, &__ptr, &__size))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error: failed to extract stats magazine for %u hours back", v9);
        goto LABEL_22;
      }
      if (!__ptr || __size == 0)
        break;
      v8 += 4;
      fwrite(__ptr, __size, 1uLL, v3);
      fwrite(&v18, 8uLL, 1uLL, v3);
      free(__ptr);
      __ptr = 0;
      __size = 0;
      if (v8 == 136)
      {
        syslog(5, "All stats magazine extracted.");
        v11 = 1;
        goto LABEL_23;
      }
    }
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "Error: extracted stats magazine but did not generate proper buffer";
    v14 = 66;
  }
  else
  {
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "Unable to get nand connection\n";
    v14 = 30;
  }
  fwrite(v13, v14, 1uLL, v12);
LABEL_22:
  v11 = 0;
LABEL_23:
  if (v16)
  {
    ReleaseIOInterfaces((uint64_t)v16);
    v16 = 0;
  }
  if (v3)
    fclose(v3);
  if (__ptr)
    free(__ptr);
  return v11;
}

uint64_t print_all_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 0);
}

uint64_t print_asp_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 1);
}

uint64_t print_band_stats(char *a1)
{
  return print_band_stats_v2(a1, 0);
}

uint64_t print_band_stats_v2(char *a1, int a2)
{
  int TunnelOutputThroughSizeOnlyHandling;
  int v5;
  unsigned int *TunnelBuffer_zeroflag;
  unsigned int *v7;
  unsigned int *v8;
  FILE *v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  unsigned int *outputStruct;

  LODWORD(outputStruct) = 0;
  TunnelOutputThroughSizeOnlyHandling = getTunnelOutputThroughSizeOnlyHandling(0, 299, 0, &outputStruct);
  v5 = outputStruct & 0xF;
  if (!TunnelOutputThroughSizeOnlyHandling)
    v5 = 1;
  v13 = 0;
  outputStruct = 0;
  if (v5 != 2)
  {
    if (v5 == 3)
    {
      TunnelBuffer_zeroflag = (unsigned int *)fetchTunnelBuffer_zeroflag(0, 297, &v13, 0, 1);
      outputStruct = TunnelBuffer_zeroflag;
      if (TunnelBuffer_zeroflag)
      {
        v7 = TunnelBuffer_zeroflag;
        print_band_stats_buf_asp3(a1, (uint64_t)TunnelBuffer_zeroflag, v13);
LABEL_12:
        free(v7);
        return 1;
      }
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = "Error: Cannot Extract Band Stats for ASP3\n";
      v12 = 42;
      goto LABEL_16;
    }
LABEL_10:
    if (asp_data_extraction_helper(7u, &outputStruct, &v13))
    {
      print_band_stats_buf(a1, outputStruct, v13, a2);
      v7 = outputStruct;
      goto LABEL_12;
    }
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = "Error: IO NVMe Smart cmd failed to extract ASP excport stats!\n";
    v12 = 62;
    goto LABEL_16;
  }
  if (!a2)
    goto LABEL_10;
  v8 = (unsigned int *)fetchTunnelBuffer_zeroflag(0, 262, &v13, 0, 1);
  outputStruct = v8;
  if (v8)
  {
    v7 = v8;
    print_band_stats_buf(a1, v8, v13, 1);
    goto LABEL_12;
  }
  v10 = (FILE *)*MEMORY[0x1E0C80C10];
  v11 = "Error: Cannot Extract Band Stats and Validity\n";
  v12 = 46;
LABEL_16:
  fwrite(v11, v12, 1uLL, v10);
  return 0;
}

void print_band_stats_buf_asp3(char *__filename, uint64_t a2, unsigned int a3)
{
  FILE *v6;
  unsigned int v7;
  unsigned __int16 *TunnelBuffer_zeroflag;
  unsigned __int16 *v9;
  void *v10;
  const char *v11;
  int32x2_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t i;
  unsigned int v17;
  int v18;
  unsigned __int32 v19;
  void *v20;
  unint64_t v21;
  int32x2_t v22;
  __int32 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v32 = 0;
  v31 = -1;
  v30 = -1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v21 = 0;
  if (__filename)
  {
    v6 = fopen(__filename, "a");
    if (!v6)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    v6 = (FILE *)*MEMORY[0x1E0C80C20];
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Version mismatch, expected 1 got %d\n");
LABEL_9:
    if (__filename)
      fclose(v6);
    return;
  }
  if (*(_DWORD *)a2 > a3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Insufficient size, expected %d got %d\n");
    goto LABEL_9;
  }
  v7 = *(_DWORD *)(a2 + 4);
  TunnelBuffer_zeroflag = (unsigned __int16 *)fetchTunnelBuffer_zeroflag(0, 264, &v21, 0, 1);
  if (TunnelBuffer_zeroflag)
  {
    v9 = TunnelBuffer_zeroflag;
    if (v21 >= 2 && 21 * (unint64_t)*TunnelBuffer_zeroflag + 2 <= v21)
    {
      v11 = (const char *)&partition_names;
      strcpy((char *)&partition_names, "USER PARTITION");
      strcpy((char *)qword_1EF99A4FE, "INTERMEDIATE PARTITION");
      strcpy(byte_1EF99A51C, "SKINNY PARTITION");
      fwrite("Band stats:\n", 0xCuLL, 1uLL, v6);
      fwrite("Flags: Bits/Cell (1 or 3), r: retrace, C: GCcan, M: GCmust, S: Special, R: GCrd, E: erased, I: toInvalidate\n", 0x6CuLL, 1uLL, v6);
      v12 = *(int32x2_t *)(a2 + 12);
      v23 = v12.i32[0];
      v22 = vrev64_s32(v12);
      v20 = v9;
      v13 = (uint64_t)(v9 + 1);
      v14 = print_band_stats_buf_asp3_part(v6, (unsigned int *)(a2 + 20), v7, 1u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      v15 = print_band_stats_buf_asp3_part(v6, v14, v7, 0, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      print_band_stats_buf_asp3_part(v6, v15, v7, 2u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      for (i = 0; i != 12; i += 4)
      {
        v17 = *(_DWORD *)((char *)&v26 + i);
        if (v17)
        {
          v18 = *(_DWORD *)((char *)&v28 + i) / v17;
          *(_DWORD *)((char *)&v28 + i) = v18;
          v19 = v22.u32[i / 4];
          fprintf(v6, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v11, *(_DWORD *)((char *)&v32 + i), 100 * *(_DWORD *)((char *)&v32 + i) / v19, *(_DWORD *)((char *)&v30 + i), 100 * *(_DWORD *)((char *)&v30 + i) / v19, v18, 100 * v18 / v19);
          fprintf(v6, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)((char *)&v24 + i));
          fprintf(v6, "%24s EoL erase cycles:(%d)\n", " ", v19);
        }
        v11 += 30;
      }
      if (__filename)
        fclose(v6);
      v10 = v20;
    }
    else
    {
      fwrite("Flow list too small", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (__filename)
        fclose(v6);
      v10 = v9;
    }
    free(v10);
  }
  else
  {
    fwrite("Can't get flow list", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    if (__filename)
      fclose(v6);
  }
}

void print_band_stats_buf(char *__filename, unsigned int *a2, unsigned int a3, int a4)
{
  FILE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  FILE *v43;
  const char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  const char *v48;
  uint64_t *v49;
  unsigned int *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL8 v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char *v65;
  FILE *v66;
  float v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  double v71;
  int *v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  const char *v82;
  _DWORD *v83;
  FILE *__stream;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  _QWORD v89[3];
  _DWORD v90[2];
  _QWORD v91[2];
  _DWORD v92[3];
  _DWORD v93[3];
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v101 = 0;
  v100 = 0;
  v99 = -1;
  v98 = -1;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  memset(v89, 0, sizeof(v89));
  v90[0] = 0;
  if (__filename)
  {
    v7 = fopen(__filename, "a");
    if (!v7)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    v7 = (FILE *)*MEMORY[0x1E0C80C20];
  }
  fwrite("Band stats:\n", 0xCuLL, 1uLL, v7);
  fwrite("===========\n", 0xCuLL, 1uLL, v7);
  v9 = *a2;
  v8 = a2[1];
  fprintf(v7, "numBands: %d\n", *a2);
  if (a4)
    v10 = 8;
  else
    v10 = 5;
  if ((_DWORD)v9)
  {
    v11 = v9 * v10 + 2 * v8 + 2;
    if (v11 <= a3)
    {
      v12 = v11 + v8;
      v13 = a3 >> 2;
      v14 = (uint64_t)&a2[v11 + 2];
      v15 = (int *)&a2[v11];
      if (a3 >> 2 == v12)
        v16 = v15;
      else
        v16 = 0;
      if ((_DWORD)v8 == 2)
      {
        v18 = a2[2];
        v20 = a2[3];
        v93[0] = v18;
        v92[0] = v20;
        if (v13 == v12)
          v21 = *v15;
        else
          v21 = 30000;
        LODWORD(v91[0]) = v21;
        strcpy((char *)&partition_names, "INTERMEDIATE PARTITION");
        v22 = a2[5];
        v93[1] = a2[4];
        v19 = a2 + 6;
        v92[1] = v22;
        if (v13 == v12)
          v23 = *(_DWORD *)(v14 - 4);
        else
          v23 = 750;
        HIDWORD(v91[0]) = v23;
        strcpy((char *)qword_1EF99A4FE, "USER PARTITION");
        if (!v21 || !v23)
        {
          v16 = 0;
          v91[0] = 0x2EE00007530;
        }
      }
      else
      {
        if ((_DWORD)v8 != 1)
        {
          fprintf(v7, "ASP returned %d partitions, the tool does not know how to handle this many partitions\n");
          goto LABEL_69;
        }
        v18 = a2[2];
        v17 = a2[3];
        v93[0] = v18;
        v19 = a2 + 4;
        v92[0] = v17;
        if (v13 == v12)
        {
          LODWORD(v91[0]) = *v15;
          strcpy((char *)&partition_names, "USER PARTITION");
          if (LODWORD(v91[0]))
          {
            v16 = v15;
          }
          else
          {
            v16 = 0;
            LODWORD(v91[0]) = 3000;
          }
        }
        else
        {
          v16 = 0;
          LODWORD(v91[0]) = 3000;
          strcpy((char *)&partition_names, "USER PARTITION");
        }
      }
      v83 = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
      if (v83)
      {
        v72 = v16;
        v73 = __filename;
        __stream = v7;
        v24 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = v9;
        while (1)
        {
          if (a4)
          {
            v80 = v19[5];
            v79 = v19[6];
            v87 = v19 + 8;
            v78 = v19[7];
          }
          else
          {
            v87 = v19 + 5;
          }
          v25 = 0;
          v26 = *v19;
          v27 = v19[1];
          v28 = v19[2];
          v29 = v19[3];
          v30 = (*v19 >> 1) & 1;
          v31 = (*v19 >> 2) & 1;
          v32 = (*v19 >> 3) & 1;
          v33 = v19[4];
          v34 = v26 & 1;
          v35 = (v26 >> 4) & 3;
          v83[v24] = v29;
          v36 = (const char *)&partition_names;
          do
          {
            v37 = v93[v25];
            if (v24 >= v37 && v24 <= v92[v25])
            {
              if (v24 == v37)
              {
                v75 = v27;
                v76 = v31;
                v77 = v30;
                v74 = v35;
                fprintf(__stream, "\n%s:\n", v36);
                v35 = v74;
                v27 = v75;
                v31 = v76;
                v30 = v77;
              }
              if (v24 >= v18)
              {
                v39 = *((_DWORD *)&v94 + v25);
                if (v39 <= v33)
                  v39 = v33;
                *((_DWORD *)&v94 + v25) = v39;
                v40 = *((_DWORD *)&v100 + v25);
                if (v40 <= v29)
                  v40 = v29;
                *((_DWORD *)&v100 + v25) = v40;
                v41 = *((_DWORD *)&v98 + v25);
                if (v41 >= v29)
                  v41 = v29;
                *((_DWORD *)&v98 + v25) = v41;
                v38 = v25;
                *((_DWORD *)&v96 + v25) += v29;
                goto LABEL_52;
              }
LABEL_44:
              fprintf(__stream, "band: %4d\tUtility Band\n", v24);
              goto LABEL_58;
            }
            ++v25;
            v36 += 30;
          }
          while (v8 != v25);
          if (v24 < v18)
            goto LABEL_44;
          v38 = 0;
LABEL_52:
          v42 = 100 * v29;
          if (v28 == -1)
          {
            v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:    NA\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if ((a4 & 1) != 0)
              fwrite("Valid Sectors: NA Parity Sectors: NA Total Sectors: NA", 0x36uLL, 1uLL, __stream);
          }
          else
          {
            v71 = (float)v28 / 10.0;
            v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:%6.1f\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v71, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if (a4)
              fprintf(__stream, "Valid Sectors: %d Parity Sectors: %d Total Sectors: %d", v79, v78, v80);
          }
          fputc(10, v43);
LABEL_58:
          v19 = v87;
          if (++v24 == v81)
          {
            v44 = "";
            if (!v72)
              v44 = "*using kASPNand constants!";
            v82 = v44;
            v45 = v92;
            v46 = v93;
            v47 = (unsigned int *)&v96;
            v48 = (const char *)&partition_names;
            v49 = &v100;
            v50 = (unsigned int *)v91;
            v51 = &v98;
            v52 = &v94;
            v53 = v8;
            do
            {
              v55 = *v45++;
              v54 = v55;
              v56 = *v46++;
              v57 = v54 >= v56;
              v58 = v54 - v56;
              if (v57)
              {
                v59 = *v47 / (v58 + 1);
                *v47 = v59;
                v86 = v46;
                v88 = v45;
                v60 = *v50;
                fprintf(__stream, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v48, *(_DWORD *)v49, 100 * *(_DWORD *)v49 / v60, *(_DWORD *)v51, 100 * *(_DWORD *)v51 / v60, v59, 100 * v59 / v60);
                fprintf(__stream, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)v52);
                fprintf(__stream, "%24s EoL erase cycles:(%d) %s\n", " ", v60, v82);
                v46 = v86;
                v45 = v88;
              }
              ++v47;
              v48 += 30;
              v49 = (uint64_t *)((char *)v49 + 4);
              ++v50;
              v51 = (uint64_t *)((char *)v51 + 4);
              v52 = (uint64_t *)((char *)v52 + 4);
              --v53;
            }
            while (v53);
            v61 = (_DWORD)v8 != 1;
            v62 = v93[v61];
            v63 = v92[v61];
            if (v62 <= v63)
            {
              v67 = (float)*(unsigned int *)((unint64_t)&v100 | (4 * v61));
              v65 = v73;
              v66 = __stream;
              do
              {
                v68 = 0x18u;
                while ((float)(*(float *)((char *)&quantilePoints + v68) * v67) > (float)v83[v62])
                {
                  v68 -= 4;
                  if (v68 == -4)
                    goto LABEL_78;
                }
                ++*(_DWORD *)((char *)v89 + v68);
LABEL_78:
                ++v62;
              }
              while (v62 <= v63);
              v64 = v90[0];
            }
            else
            {
              v64 = 0;
              v65 = v73;
              v66 = __stream;
            }
            fwrite("USER PARTITION:\n", 0x10uLL, 1uLL, v66);
            v69 = 0;
            v70 = (unsigned int *)((unint64_t)&v100 | (4 * v61));
            do
            {
              if (v69)
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)((char *)&quantilePoints + v69 + 24) * 100.0, (float)(*(float *)((char *)&quantilePoints + v69 + 24) * (float)*v70), (float)(*(float *)((char *)&quantilePoints + v69 + 28) * (float)*v70), v90[v69 / 4]);
              else
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)&dword_1EF9984C8 * 100.0, (float)(*(float *)&dword_1EF9984C8 * (float)*v70), (float)(*(float *)&dword_1EF9984C8 * (float)*v70), v64);
              v69 -= 4;
            }
            while (v69 != -28);
            if (v65)
              fclose(v66);
            free(v83);
            return;
          }
        }
      }
      fprintf(v7, "could not allocate %d bytes\n");
LABEL_69:
      if (__filename)
        fclose(v7);
    }
  }
}

uint64_t print_grown_defects(char *a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v9;
  void *v10;

  v9 = 0;
  v10 = 0;
  if (asp_data_extraction_helper(8u, &v10, &v9))
  {
    if (a2)
      *a3 = print_grown_defects_buf(a1, (uint64_t)v10, 1, a4);
    else
      print_grown_defects_buf(a1, (uint64_t)v10, 0, a4);
    free(v10);
    return 1;
  }
  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract ASP NAND defects!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
}

uint64_t print_grown_defects_buf(char *__filename, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int16 *v9;
  _DWORD *v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  FILE *__stream;
  char v26[8];
  int v27;
  char v28[16];
  char v29[16];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  strcpy(v29, "InvalidPage");
  strcpy(v28, "InvalidTemp");
  strcpy(v26, "Unknown");
  v27 = 0;
  if (__filename)
  {
    __stream = fopen(__filename, "a");
    if (!__stream)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    __stream = (FILE *)*MEMORY[0x1E0C80C20];
  }
  v8 = *(unsigned int *)(a2 + 8);
  if ((a3 & 1) != 0)
    goto LABEL_10;
  v9 = (unsigned __int16 *)(a2 + 12);
  if (a4)
  {
    if ((_DWORD)v8)
    {
      v10 = (_DWORD *)(a4 + 16);
      v11 = *(unsigned int *)(a2 + 8);
      do
      {
        *(v10 - 4) = *(_DWORD *)v9;
        *(v10 - 3) = *((_DWORD *)v9 + 1);
        *(v10 - 2) = *((_DWORD *)v9 + 2);
        *(v10 - 1) = *((_DWORD *)v9 + 3);
        *v10 = *((_DWORD *)v9 + 4);
        v10[1] = *((_DWORD *)v9 + 5);
        v10[2] = *((_DWORD *)v9 + 6);
        v10[3] = *((_DWORD *)v9 + 7);
        v10 += 8;
        v9 += 16;
        --v11;
      }
      while (v11);
    }
LABEL_10:
    if (!__filename)
      return v8;
LABEL_11:
    fclose(__stream);
    return v8;
  }
  v22 = *(_DWORD *)(a2 + 4);
  v23 = __filename;
  fwrite("===Grown Bad Blocks===\n", 0x17uLL, 1uLL, __stream);
  v24 = v8;
  if ((_DWORD)v8)
  {
    v13 = v8;
    do
    {
      v14 = *v9;
      v15 = v9[1];
      v17 = *((_DWORD *)v9 + 1);
      v16 = *((_DWORD *)v9 + 2);
      v18 = *((_DWORD *)v9 + 6);
      v19 = *((int *)v9 + 7);
      v21 = *((_DWORD *)v9 + 3);
      v20 = *((_DWORD *)v9 + 4);
      if (*((_DWORD *)v9 + 5) == 4095)
        __sprintf_chk(v29, 0, 0xCuLL, "%s");
      else
        __sprintf_chk(v29, 0, 0xCuLL, "%u");
      if (v18 << 24 == -2130706432)
        __sprintf_chk(v28, 0, 0xCuLL, "%s");
      else
        __sprintf_chk(v28, 0, 0xCuLL, "%d");
      if (v19 <= 3)
        __sprintf_chk(v26, 0, 0xCuLL, "%s", off_1E8577B00[v19]);
      fprintf(__stream, "Bus: %u CE: %u CAU: %u Block: %u Cycles: %u Reason: %u Page: %s Temp: %s mode: %s\n", v14, v15, v17, v16, v21, v20, v29, v28, v26);
      v9 += 16;
      --v13;
    }
    while (v13);
  }
  v8 = v24;
  fprintf(__stream, "Grown Bad Blocks Count: %u\n", v24);
  fprintf(__stream, "Factory Bad Blocks Count: %u\n", v22);
  if (v23)
    goto LABEL_11;
  return v8;
}

uint64_t print_grown_defects_ext(char *a1)
{
  return print_grown_defects(a1, 0, 0, 0);
}

uint64_t print_snapshots(char *__filename)
{
  FILE *v2;
  FILE *v3;
  void *TunnelBuffer_simple;
  void *v5;
  _QWORD *v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned int v13;
  size_t v14;
  int v15[2];
  size_t v16;

  v14 = 0;
  *(_QWORD *)v15 = 0;
  v13 = 0;
  if (__filename)
  {
    v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
      return 0;
    }
    v3 = v2;
    syslog(5, "printing ASP snapshots to %s", __filename);
    TunnelBuffer_simple = fetchTunnelBuffer_simple(22, v15);
    if (!TunnelBuffer_simple)
      goto LABEL_18;
  }
  else
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C20];
    TunnelBuffer_simple = fetchTunnelBuffer_simple(22, v15);
    if (!TunnelBuffer_simple)
      return 0;
  }
  v5 = TunnelBuffer_simple;
  syslog(5, "ASP get snapshot data done.");
  v6 = (_QWORD *)MEMORY[0x1E0C85AD8];
  v16 = 40 * *MEMORY[0x1E0C85AD8];
  v7 = (char *)malloc_type_valloc(v16, 0xE6002091uLL);
  if (!v7)
  {
    v16 = 4 * *v6;
    v7 = (char *)malloc_type_valloc(v16, 0x3543481uLL);
    if (!v7)
    {
      fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      free(v5);
      if (__filename)
LABEL_18:
        fclose(v3);
      return 0;
    }
  }
  v8 = fetchTunnelBuffer_simple(145, &v14);
  syslog(5, "ASP get snapshot header done.");
  if (v8 && v8[1] > 5u)
  {
    v9 = v8[5];
    if (v14 != v9)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Read snapshot header %zu bytes, expect %u bytes\n", v14, v9);
      goto LABEL_21;
    }
    v13 = 0;
    while (!ASPParseSnapshotBufferWithInplaceParser((uint64_t)v5, *(uint64_t *)v15, v7, &v16, v8, &v13))
      fputs(v7, v3);
  }
  else if ((ASPParseSnapshotBuffer((uint64_t)v5, *(unint64_t *)v15, v7, &v16) & 1) == 0)
  {
    fwrite("Snapshot parser requires a larger string buffer\n", 0x30uLL, 1uLL, v3);
LABEL_21:
    v10 = 0;
    goto LABEL_22;
  }
  fputs(v7, v3);
  v10 = 1;
LABEL_22:
  free(v5);
  free(v7);
  free(v8);
  v11 = "stdout";
  if (__filename)
    v11 = __filename;
  syslog(5, "ASP snapshot written to %s done", v11);
  if (__filename)
    fclose(v3);
  return v10;
}

unsigned int *print_band_stats_buf_asp3_part(FILE *__stream, unsigned int *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v11;
  FILE *v12;
  unsigned int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  FILE *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v51;
  int v52;
  FILE *v54;

  v11 = a2;
  v12 = __stream;
  v13 = *a2;
  if (a4 == HIBYTE(*a2))
  {
    v11 = a2 + 1;
    v14 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      v16 = a11;
      v17 = a4;
      fprintf(__stream, "==== %s ====\n", (const char *)&partition_names + 30 * a4);
      fprintf(v12, "\t%d bands\n", v14);
      v18 = 0;
      v54 = v12;
      v47 = v14;
      do
      {
        v51 = v11[3];
        v20 = v11[4];
        v19 = v11[5];
        v21 = v12;
        v22 = v11[1];
        v23 = 73;
        v24 = 45;
        if ((v22 & 0x40) == 0)
          v23 = 45;
        v46 = v23;
        v25 = 114;
        if ((v22 & 0x100) == 0)
          v25 = 45;
        v26 = 67;
        if ((v22 & 1) == 0)
          v26 = 45;
        v27 = 77;
        if ((v22 & 2) == 0)
          v27 = 45;
        v28 = 82;
        if ((v22 & 4) == 0)
          v28 = 45;
        v29 = 83;
        if ((v22 & 8) == 0)
          v29 = 45;
        if ((v22 & 0x10) != 0)
          v24 = 69;
        v45 = v25;
        v30 = 49;
        if ((v22 & 0x10) == 0)
          v30 = 51;
        fprintf(v21, "Band:%4d  Flow:%s [%d]  Flags:%c%c%c%c%c%c%c%c  ", *v11, (const char *)(v16 + 21 * v11[2]), v11[2], v30, v45, v26, v27, v28, v29, v24, v46);
        if (v51 == -1 || !v20)
          fwrite("Valid Sectors: NA   Total Sectors: NA  ", 0x27uLL, 1uLL, v54);
        else
          fprintf(v54, "Valid Sectors: %5d  Total Sectors: %5d [%d%%]  ", v19, v20, 100 * v19 / v20);
        v52 = v18;
        v31 = v11[6];
        if ((v22 & 0x80) != 0)
        {
          v11 += 7;
          if (v31)
          {
            do
            {
              v37 = *v11;
              v38 = v11[1];
              v39 = v11[2];
              v40 = *(_DWORD *)(a6 + 4 * v17);
              if (v40 <= v39)
                v40 = v11[2];
              *(_DWORD *)(a6 + 4 * v17) = v40;
              v41 = *(_DWORD *)(a7 + 4 * v17);
              if (v41 <= v38)
                v41 = v38;
              *(_DWORD *)(a7 + 4 * v17) = v41;
              v42 = *(_DWORD *)(a8 + 4 * v17);
              if (v42 >= v38)
                v42 = v38;
              *(_DWORD *)(a8 + 4 * v17) = v42;
              *(_DWORD *)(a9 + 4 * v17) += v38;
              v43 = v11 + 3;
              ++*(_DWORD *)(a10 + 4 * v17);
              fprintf(v54, "\n\tBlock:%4d [Bork:%4d Dip: %4d Age:%5d Cycles:%5d EOL%%:%3d]", v37, v37 / a3, v37 % a3, v39, v38, 100 * v38 / *(_DWORD *)(a5 + 4 * v17));
              v11 += 3;
              --v31;
            }
            while (v31);
            v11 = v43;
            v12 = v54;
            v16 = a11;
            v14 = v47;
          }
          else
          {
            v12 = v54;
          }
        }
        else
        {
          v32 = v11 + 8;
          v33 = v11[7];
          fprintf(v54, "Age:%5d Cycles:%5d EOL%%:%3d\n", v33, v31, 100 * v31 / *(_DWORD *)(a5 + 4 * v17));
          v34 = *(_DWORD *)(a6 + 4 * v17);
          if (v34 <= v33)
            v34 = v33;
          *(_DWORD *)(a6 + 4 * v17) = v34;
          v35 = *(_DWORD *)(a7 + 4 * v17);
          if (v35 <= v31)
            v35 = v31;
          *(_DWORD *)(a7 + 4 * v17) = v35;
          v36 = *(_DWORD *)(a8 + 4 * v17);
          if (v36 >= v31)
            v36 = v31;
          *(_DWORD *)(a8 + 4 * v17) = v36;
          *(_DWORD *)(a9 + 4 * v17) += v31;
          ++*(_DWORD *)(a10 + 4 * v17);
          v11 = v32;
          v12 = v54;
        }
        fputc(10, v12);
        ++v18;
      }
      while (v52 + 1 != v14);
      fputc(10, v12);
    }
  }
  else
  {
    fwrite("Error parsing! missing header", 0x1DuLL, 1uLL, __stream);
  }
  return v11;
}

uint64_t print_trace_dump_buf(char *__filename, const char *a2)
{
  FILE *v4;
  uint64_t result;

  if (__filename)
  {
    v4 = fopen(__filename, "a");
    if (!v4)
      return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
  }
  else
  {
    v4 = (FILE *)*MEMORY[0x1E0C80C20];
  }
  fwrite("Trace dump:\n", 0xCuLL, 1uLL, v4);
  result = fputs(a2, v4);
  if (__filename)
    return fclose(v4);
  return result;
}

uint64_t print_trace_dump(char *a1)
{
  uint64_t v3;
  void *v4;

  v3 = 0;
  v4 = 0;
  if (asp_data_extraction_helper(9u, &v4, &v3))
  {
    print_trace_dump_buf(a1, (const char *)v4);
    free(v4);
    return 1;
  }
  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract debug dump trace!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
}

BOOL read_tunnel(char **a1, int a2, void *a3, size_t a4, char a5)
{
  void *TunnelBufferWithInVal;
  void *v8;
  _BOOL8 v9;
  size_t v11;

  v11 = 0;
  TunnelBufferWithInVal = fetchTunnelBufferWithInVal(a1, a2, 0, 0, &v11, 0, a5);
  if (!TunnelBufferWithInVal)
    return 0;
  v8 = TunnelBufferWithInVal;
  v9 = v11 >= a4;
  if (v11 >= a4)
    memcpy(a3, TunnelBufferWithInVal, a4);
  free(v8);
  return v9;
}

BOOL read_geometry(char **a1, uint64_t a2)
{
  _BOOL8 tunnel;
  uint64_t v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v20;
  unsigned int v21;
  int __c[4];
  _OWORD v23[4];

  tunnel = 1;
  if (!read_tunnel(a1, 186, (void *)a2, 0x180uLL, 1))
  {
    *(_OWORD *)__c = 0u;
    memset(v23, 0, 56);
    tunnel = read_tunnel(a1, 55, __c, 0x48uLL, 0);
    if (tunnel)
    {
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)a2 = 1;
      v5 = *(_QWORD *)&__c[1];
      v6 = v23[0];
      *(_QWORD *)&v7 = *(_QWORD *)&__c[1];
      *((_QWORD *)&v7 + 1) = *(_QWORD *)&v23[0];
      *(_OWORD *)(a2 + 4) = v7;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)((char *)v23 + 8);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)&v23[1] + 8);
      *(_OWORD *)(a2 + 52) = *(_OWORD *)((char *)&v23[2] + 8);
      *(_QWORD *)(a2 + 72) = 0;
      *(_DWORD *)(a2 + 68) = 0;
      v8 = HIDWORD(v5);
      if (HIDWORD(v5) >= 2)
      {
        v9 = 0;
        do
        {
          *(_BYTE *)(a2 + 80 + v9) = 2 * v9;
          ++v9;
        }
        while (HIDWORD(v5) >> 1 != v9);
        v10 = 0;
        do
        {
          *(_BYTE *)(a2 + 112 + v10) = v10 >> 1;
          ++v10;
        }
        while (HIDWORD(v5) != v10);
      }
      if (HIDWORD(v5))
      {
        v20 = v5;
        v21 = v6;
        memset((void *)(a2 + 96), __c[3], HIDWORD(v5));
        LODWORD(v5) = v20;
        v6 = v21;
      }
      if (v5 <= v6)
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v13) = v6 / v5;
        if (v6 / v5 <= 1)
          v13 = 1;
        else
          v13 = v13;
        v14 = (_BYTE *)(a2 + 128);
        do
        {
          v15 = v8;
          v16 = v14;
          v17 = (unsigned __int8 *)(a2 + 96);
          if ((_DWORD)v8)
          {
            do
            {
              v18 = *v17++;
              if (v11 < v18)
                *v16 = v12++;
              v16 += 16;
              --v15;
            }
            while (v15);
          }
          ++v11;
          ++v14;
        }
        while (v11 != v13);
      }
    }
  }
  return tunnel;
}

BOOL read_extend_geometry(char **a1, char *a2, uint64_t a3)
{
  _BOOL8 v6;
  int v7;
  __int128 v9;
  __int128 v10;

  v6 = 1;
  if (!read_tunnel(a1, 187, a2, 0x28uLL, 1))
  {
    v9 = 0u;
    v10 = 0u;
    v6 = read_tunnel(a1, 158, &v9, 0x20uLL, 0);
    if (v6)
    {
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((_QWORD *)a2 + 4) = 0;
      *(_DWORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = v9;
      *(_QWORD *)(a2 + 20) = v10;
      *((_DWORD *)a2 + 7) = HIDWORD(v10);
      v7 = *(unsigned __int8 *)(a3 + 96);
      *((_DWORD *)a2 + 8) = v7;
      *((_DWORD *)a2 + 9) = v7 << (*(_DWORD *)(a3 + 8) > 1u);
    }
  }
  return v6;
}

uint64_t print_asp_flow_list(const char *a1)
{
  unsigned __int16 *TunnelBuffer_zeroflag;
  unsigned __int16 *v3;
  uint64_t v5;

  v5 = 0;
  TunnelBuffer_zeroflag = (unsigned __int16 *)fetchTunnelBuffer_zeroflag(0, 264, &v5, 0, 1);
  if (TunnelBuffer_zeroflag)
  {
    v3 = TunnelBuffer_zeroflag;
    print_asp_flow_list_buf(a1, TunnelBuffer_zeroflag, v5);
    free(v3);
    return 1;
  }
  else
  {
    fwrite("Error: Cannot Extract Band Flow\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
}

size_t print_asp_flow_list_buf(const char *a1, unsigned __int16 *a2, unsigned int a3)
{
  int TunnelOutputThroughSizeOnlyHandling;
  int v7;
  unsigned int v8;
  FILE *v9;
  int v11;
  int v12;
  unsigned __int16 *v13;
  char outputStruct[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)outputStruct = 0;
  TunnelOutputThroughSizeOnlyHandling = getTunnelOutputThroughSizeOnlyHandling(0, 299, 0, outputStruct);
  v7 = outputStruct[0] & 0xF;
  if (!TunnelOutputThroughSizeOnlyHandling)
    v7 = 1;
  if (v7 == 3)
  {
    v8 = 21;
    if (a1)
    {
LABEL_6:
      v9 = fopen(a1, "a");
      if (!v9)
        return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n");
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 != 2)
      return fwrite("Unsupported version for this command.", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v8 = 8;
    if (a1)
      goto LABEL_6;
  }
  v9 = (FILE *)*MEMORY[0x1E0C80C20];
LABEL_10:
  if (a3 <= 1)
    return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Smaller buf size than expected, got %d");
  v11 = *a2;
  if (v11 * v8 > a3)
    return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Smaller buf size than expected, got %d, number of flows: %d\n");
  fwrite("============================\n", 0x1DuLL, 1uLL, v9);
  fprintf(v9, "    Number Of Flows: %d\n", v11);
  fwrite("============================\n", 0x1DuLL, 1uLL, v9);
  if (v11)
  {
    v12 = 0;
    v13 = a2 + 1;
    do
    {
      __memcpy_chk();
      fprintf(v9, "Flow %d : Name %s\n", v12, outputStruct);
      v13 = (unsigned __int16 *)((char *)v13 + v8);
      ++v12;
    }
    while (v11 != v12);
  }
  return fprintf(v9, "Flow %d : Name %s\n");
}

BOOL print_geometry(char *__filename)
{
  FILE *v2;
  _BOOL8 result;
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[18];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (__filename)
  {
    v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C20];
  }
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  result = read_geometry(0, (uint64_t)&v13);
  if (result)
  {
    result = read_extend_geometry(0, (char *)&v10, (uint64_t)&v13);
    if (result)
    {
      fwrite("===NAND Geometry===\n", 0x14uLL, 1uLL, v2);
      fprintf(v2, "cau_per_die: %d\n", DWORD1(v13));
      fprintf(v2, "num_bus: %d\n", DWORD2(v13));
      v4 = 0;
      v5 = 0;
      v6 = -1;
      do
      {
        v7 = (char *)&v13 + v4;
        v8 = *((unsigned __int8 *)v19 + v4);
        if (!*((_BYTE *)v19 + v4))
          break;
        v9 = v7[112];
        if (v6 != v9)
        {
          fprintf(v2, "MSP %d:\n", v7[112]);
          v5 = 0;
          v8 = v7[96];
          v6 = v9;
        }
        fprintf(v2, "   Dies in Ch %d: %d\n", v5++, v8);
        ++v4;
      }
      while (v4 != 16);
      fprintf(v2, "num_dip: %d\n", HIDWORD(v13));
      fprintf(v2, "num_bands: %d\n", (_DWORD)v14);
      fprintf(v2, "sec_per_page: %d\n", DWORD1(v14));
      fprintf(v2, "sec_per_full_band: %d\n", DWORD2(v14));
      fprintf(v2, "sec_per_full_band_slc: %d\n", HIDWORD(v14));
      fprintf(v2, "bytes_per_sec_meta: %d\n", (_DWORD)v15);
      fprintf(v2, "pages_per_block: %d\n", DWORD1(v15));
      fprintf(v2, "pages_per_block_slc: %d\n", DWORD2(v15));
      fprintf(v2, "pages_per_block0: %d\n", HIDWORD(v15));
      fprintf(v2, "cell_type: %d\n", (_DWORD)v16);
      fprintf(v2, "pages_in_read_verify: %d\n", DWORD1(v16));
      fprintf(v2, "eol_blocks: %d\n", DWORD2(v16));
      fprintf(v2, "block_pairing_scheme: %d\n", HIDWORD(v16));
      fprintf(v2, "sec_per_die_multiplane : %d\n", DWORD2(v10));
      fprintf(v2, "num_die : %d\n", (_DWORD)v11);
      fprintf(v2, "sol_eol_per_die : %d\n", DWORD1(v11));
      fprintf(v2, "technology : %d\n", HIDWORD(v11));
      fprintf(v2, "max_tlc_gbb : %d\n", DWORD2(v11));
      if (__filename)
        fclose(v2);
      return 1;
    }
  }
  return result;
}

void *fetchTunnelBufferWithInVal(char **a1, int a2, int a3, int a4, _QWORD *a5, char a6, char a7)
{
  char **v13;
  int v14;
  unsigned int TunnelCmdDataSize;
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  char **v21;

  v13 = a1;
  v21 = 0;
  *a5 = 0;
  if (!a1 && (!findNandExporter_tunnel(&v21) || (v13 = v21) == 0 || !*((_DWORD *)v21 + 4)))
  {
    fwrite("Err: Finding internal NAND exporter failed for fetch tunnel buffer.\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
LABEL_11:
    v19 = 0;
    goto LABEL_14;
  }
  v14 = a3;
  TunnelCmdDataSize = _getTunnelCmdDataSize((uint64_t)v13, a2, a3, a4, a7);
  if (!TunnelCmdDataSize)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "failed to get data size for cmd option %d\n", a2);
    goto LABEL_11;
  }
  v16 = TunnelCmdDataSize;
  v17 = (*MEMORY[0x1E0C85AD8] + (unint64_t)TunnelCmdDataSize - 1) / *MEMORY[0x1E0C85AD8] * *MEMORY[0x1E0C85AD8];
  v18 = malloc_type_valloc(v17, 0x7C7CDE6BuLL);
  v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    if ((_getTunnelCmdDataToBuf((uint64_t)v13, a2, v14, a4, v19, v17, a6, a7) & 1) != 0)
    {
      *a5 = v16;
    }
    else
    {
      free(v19);
      v19 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
LABEL_14:
  if (v21)
    ReleaseIOInterfaces((uint64_t)v21);
  return v19;
}

uint64_t _getTunnelCmdDataSize(uint64_t a1, int a2, int a3, int a4, char a5)
{
  kern_return_t v7;
  uint64_t result;
  size_t outputStructCnt;
  unsigned int outputStruct;
  _DWORD inputStruct[3];
  uint64_t v12;
  int v13;

  v13 = 0;
  v12 = 0;
  outputStruct = 0;
  inputStruct[0] = a2;
  outputStructCnt = 4;
  inputStruct[2] = a4;
  inputStruct[1] = a3 | 1;
  v7 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, &outputStruct, &outputStructCnt);
  if (v7)
  {
    if ((a5 & 1) == 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error calling CoreDebugTunnel method! - 0x%X\n", v7);
    return 0;
  }
  else
  {
    result = outputStruct;
    if (!outputStruct && (a5 & 1) == 0)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "SizeOnly for tunnel command 0x%x returned 0\n", a2);
      return outputStruct;
    }
  }
  return result;
}

uint64_t _getTunnelCmdDataToBuf(uint64_t a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  uint64_t v9;
  size_t *v15;
  kern_return_t v16;
  size_t v17;
  _DWORD inputStruct[3];
  uint64_t v20;
  int v21;
  size_t outputStructCnt;

  LOBYTE(v9) = a7;
  outputStructCnt = a6;
  v21 = 0;
  v20 = 0;
  v15 = (size_t *)MEMORY[0x1E0C85AD8];
  while (1)
  {
    inputStruct[0] = a2;
    inputStruct[1] = a3;
    inputStruct[2] = a4;
    v16 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
    if (v16 != -536870211)
      break;
    if ((v9 & 1) == 0)
      goto LABEL_10;
    if ((a8 & 1) == 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "CoreDebugTunnel 0x%x returned kIOReturnNoMemory\n", a2);
    v17 = outputStructCnt;
    outputStructCnt = *v15;
    v9 = 1;
    if (outputStructCnt == v17)
      return v9;
  }
  if (!v16)
    return 1;
LABEL_10:
  if ((a8 & 1) == 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error calling CoreDebugTunnel method! - 0x%X\n", v16);
  return 0;
}

void *fetchTunnelBuffer(char **a1, int a2, int a3, _QWORD *a4, char a5, char a6)
{
  return fetchTunnelBufferWithInVal(a1, a2, a3, 0, a4, a5, a6);
}

void *fetchTunnelBuffer_zeroflag(char **a1, int a2, _QWORD *a3, char a4, char a5)
{
  return fetchTunnelBufferWithInVal(a1, a2, 0, 0, a3, a4, a5);
}

void *fetchTunnelBuffer_simple(int a1, _QWORD *a2)
{
  return fetchTunnelBufferWithInVal(0, a1, 0, 0, a2, 0, 0);
}

uint64_t populateTunnelOutputBufferWithoutSizeQuery_withFlags(char **a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  uint64_t v15;
  char **v17;

  v17 = 0;
  if (a1 || findNandExporter_tunnel(&v17) && (a1 = v17) != 0 && *((_DWORD *)v17 + 4))
  {
    if ((_getTunnelCmdDataToBuf((uint64_t)a1, a2, a3, a4, outputStruct, a6, a7, a8) & 1) != 0)
    {
      v15 = 1;
      goto LABEL_10;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error fetching the tunnel output buffer for opcode [%d]\n", a2);
  }
  else
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  v15 = 0;
LABEL_10:
  if (v17)
    ReleaseIOInterfaces((uint64_t)v17);
  return v15;
}

uint64_t populateTunnelOutputBufferWithoutSizeQuery(char **a1, int a2, int a3, void *outputStruct, size_t a5, char a6, char a7)
{
  return populateTunnelOutputBufferWithoutSizeQuery_withFlags(a1, a2, 0, a3, outputStruct, a5, a6, a7);
}

uint64_t getTunnelOutputThroughSizeOnlyHandling(char **a1, int a2, int a3, void *outputStruct)
{
  mach_port_t v6;
  kern_return_t v7;
  uint64_t v8;
  size_t outputStructCnt;
  char **v11;
  _DWORD inputStruct[3];
  uint64_t v13;
  int v14;

  v13 = 0;
  v14 = 0;
  outputStructCnt = 4;
  v11 = 0;
  inputStruct[0] = a2;
  inputStruct[1] = 1;
  inputStruct[2] = a3;
  if (!outputStruct)
  {
    syslog(3, "Error: must provide valid pointer for output value");
    goto LABEL_11;
  }
  if (a1)
  {
    v6 = *((_DWORD *)a1 + 4);
  }
  else if (!findNandExporter_tunnel(&v11) || (a1 = v11) == 0 || (v6 = *((_DWORD *)v11 + 4)) == 0)
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_11;
  }
  v7 = IOConnectCallStructMethod(v6, *((_DWORD *)a1 + 8), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
  if (v7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error fetching the tunnel output buffer for opcode [%d], Result [0x%X]\n", a2, v7);
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  v8 = 1;
LABEL_12:
  if (v11)
    ReleaseIOInterfaces((uint64_t)v11);
  return v8;
}

void *ASPGetStatsSelectors()
{
  return &statsSelector;
}

void *ASPGetReadStatsSelectors()
{
  return &readStatsSelector;
}

void *ASPMSPGetStatsSelectors()
{
  return &mspStatsSelector;
}

void *ASPGetDefectsListSelectors()
{
  return &defectsListSelector;
}

void *ASPGetTelemetryListSelectors()
{
  return &telemetryListSelectors;
}

void *ASPGetTaskSchedulerSelectors()
{
  return &taskSchedulerSelectors;
}

void *ASPGetSnapshotSelectors()
{
  return &snapshotSelectors;
}

void *ASPGetSnapshotHeaderSelectors()
{
  return &snapshotHeaderSelectors;
}

void *ASPGetBandStatsSelectors()
{
  return &bandStatsSelector;
}

void *ASPGetGeomErrPayloadSelectors()
{
  return &geomErrPayloadSelectors;
}

char *findNandExporter_tunnel(char ***a1)
{
  int v2;
  int *v3;
  char *result;
  char **v5;
  mach_port_t v6;
  task_port_t *v7;
  const __CFDictionary *v8;
  io_service_t MatchingService;
  io_object_t v10;
  const char *v11;
  io_connect_t connect;

  connect = 0;
  *a1 = 0;
  v2 = pthread_mutex_trylock(&serializeAccess);
  if (v2)
  {
    if (v2 != 16
      || (syslog(3, "Error: NANDInfo: NANDExporter: serializeAccess already locked. waiting for lock !\n"),
          pthread_mutex_lock(&serializeAccess)))
    {
      v3 = __error();
      syslog(3, "Error: NANDInfo: NANDExporter: pthread_mutex_trylock() (%d) failed \n", *v3);
      return 0;
    }
  }
  syslog(5, "NANDInfo: NANDExporter object locked ! \n");
  v5 = &nand_exporters_tunnel;
  result = nand_exporters_tunnel;
  if (!nand_exporters_tunnel)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  v6 = *MEMORY[0x1E0CBBAA8];
  v7 = (task_port_t *)MEMORY[0x1E0C83DA0];
  while (1)
  {
    v8 = IOServiceMatching(result);
    if (!v8)
      goto LABEL_11;
    MatchingService = IOServiceGetMatchingService(v6, v8);
    if (!MatchingService)
      goto LABEL_11;
    v10 = MatchingService;
    if (!IOServiceOpen(MatchingService, *v7, 0, &connect))
      break;
    IOServiceClose(connect);
    connect = 0;
    IOObjectRelease(v10);
LABEL_11:
    v11 = v5[21];
    v5 += 21;
    result = (char *)v11;
    if (!v11)
      goto LABEL_12;
  }
  syslog(5, "NANDInfo: findNandExporter_tunnel: Controller found: %s\n", *v5);
  result = (char *)1;
LABEL_13:
  *((_DWORD *)v5 + 4) = connect;
  *((_DWORD *)v5 + 5) = v10;
  *a1 = v5;
  return result;
}

uint64_t ReleaseIOInterfaces(uint64_t a1)
{
  io_connect_t v2;
  io_object_t v3;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 16) = 0;
  }
  v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    IOObjectRelease(v3);
    *(_DWORD *)(a1 + 20) = 0;
  }
  syslog(5, "NANDInfo: NANDExporter object unlocked ! \n");
  return pthread_mutex_unlock(&serializeAccess);
}

BOOL AWDMETRICSBwpStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 9)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 4)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 20) |= 2u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRFRCoverageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSFTStateEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSDMActivationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = 0x1EF995000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    v20 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_127;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_129;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_127:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_129:
          *(_QWORD *)(a1 + *(int *)(v8 + 584)) = v32;
          continue;
        case 2u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x2000u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v27 = v37++ >= 9;
                if (v27)
                {
                  v38 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_133:
          v118 = v38 != 0;
          v119 = *(int *)(v10 + 592);
          goto LABEL_150;
        case 3u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x4000u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v27 = v43++ >= 9;
                if (v27)
                {
                  v44 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_137:
          v118 = v44 != 0;
          v119 = *(int *)(v11 + 596);
          goto LABEL_150;
        case 6u:
          v55 = 0;
          v56 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x400u;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v27 = v56++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_141:
          v120 = *(int *)(v12 + 600);
          goto LABEL_187;
        case 7u:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x800u;
          while (2)
          {
            v64 = *v3;
            v65 = *(_QWORD *)(a2 + v64);
            if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v65);
              *(_QWORD *)(a2 + v64) = v65 + 1;
              v63 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                v27 = v62++ >= 9;
                if (v27)
                {
                  v63 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v63 = 0;
LABEL_145:
          v118 = v63 != 0;
          v119 = *(int *)(v13 + 608);
          goto LABEL_150;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x1000u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v27 = v68++ >= 9;
                if (v27)
                {
                  v69 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v69 = 0;
LABEL_149:
          v118 = v69 != 0;
          v119 = *(int *)(v14 + 612);
LABEL_150:
          *(_BYTE *)(a1 + v119) = v118;
          continue;
        case 0xAu:
          v73 = 0;
          v74 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 8u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v57 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v27 = v74++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_154:
          v120 = *(int *)(v15 + 616);
          goto LABEL_187;
        case 0xBu:
          v78 = 0;
          v79 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x200u;
          while (2)
          {
            v80 = *v3;
            v81 = *(_QWORD *)(a2 + v80);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v57 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                v27 = v79++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_158:
          v120 = *(int *)(v16 + 620);
          goto LABEL_187;
        case 0xEu:
          v83 = 0;
          v84 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x10u;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v86);
              *(_QWORD *)(a2 + v85) = v86 + 1;
              v57 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                v27 = v84++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_162:
          v120 = *(int *)(v17 + 624);
          goto LABEL_187;
        case 0x11u:
          v88 = 0;
          v89 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 4u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v57 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                v27 = v89++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_166;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_166:
          v120 = *(int *)(v18 + 588);
          goto LABEL_187;
        case 0x12u:
          v93 = 0;
          v94 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x40u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v57 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                v27 = v94++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_170;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_170:
          v120 = *(int *)(v19 + 628);
          goto LABEL_187;
        case 0x13u:
          v98 = 0;
          v99 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 2u;
          while (2)
          {
            v100 = *v3;
            v101 = *(_QWORD *)(a2 + v100);
            if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v101);
              *(_QWORD *)(a2 + v100) = v101 + 1;
              v57 |= (unint64_t)(v102 & 0x7F) << v98;
              if (v102 < 0)
              {
                v98 += 7;
                v27 = v99++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_174;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_174:
          v120 = *(int *)(v20 + 632);
          goto LABEL_187;
        case 0x14u:
          v103 = 0;
          v104 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x80u;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v57 |= (unint64_t)(v107 & 0x7F) << v103;
              if (v107 < 0)
              {
                v103 += 7;
                v27 = v104++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_178:
          v120 = 40;
          goto LABEL_187;
        case 0x15u:
          v108 = 0;
          v109 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x20u;
          while (2)
          {
            v110 = *v3;
            v111 = *(_QWORD *)(a2 + v110);
            if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v111);
              *(_QWORD *)(a2 + v110) = v111 + 1;
              v57 |= (unint64_t)(v112 & 0x7F) << v108;
              if (v112 < 0)
              {
                v108 += 7;
                v27 = v109++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_182:
          v120 = 32;
          goto LABEL_187;
        case 0x16u:
          v113 = 0;
          v114 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 580)) |= 0x100u;
          break;
        default:
          v48 = v8;
          v49 = v10;
          v50 = v7;
          v51 = v11;
          v52 = v12;
          v53 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x1EF995000;
          v13 = 0x1EF995000;
          a1 = v53;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v52;
          v15 = 0x1EF995000;
          v11 = v51;
          v16 = 0x1EF995000;
          v7 = v50;
          v19 = 0x1EF995000;
          v10 = v49;
          v17 = 0x1EF995000;
          v8 = v48;
          v18 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v115 = *v3;
        v116 = *(_QWORD *)(a2 + v115);
        if (v116 == -1 || v116 >= *(_QWORD *)(a2 + *v4))
          break;
        v117 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v116);
        *(_QWORD *)(a2 + v115) = v116 + 1;
        v57 |= (unint64_t)(v117 & 0x7F) << v113;
        if ((v117 & 0x80) == 0)
          goto LABEL_184;
        v113 += 7;
        v27 = v114++ >= 9;
        if (v27)
        {
          LODWORD(v57) = 0;
          goto LABEL_186;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_184:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v57) = 0;
LABEL_186:
      v120 = 44;
LABEL_187:
      *(_DWORD *)(a1 + v120) = v57;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSdmEndcReleaseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 24;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 20;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = 0x1EF995000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_12;
        v20 += 7;
        v26 = v21++ >= 9;
        if (v26)
        {
          v22 = 0;
          v27 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v27 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v22 = 0;
LABEL_14:
      if (v27 || (v22 & 7) == 4)
        break;
      switch((v22 >> 3))
      {
        case 1u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 1u;
          while (1)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              break;
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if ((v34 & 0x80) == 0)
              goto LABEL_99;
            v29 += 7;
            v26 = v30++ >= 9;
            if (v26)
            {
              v31 = 0;
              goto LABEL_101;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_101:
          *(_QWORD *)(a1 + *(int *)(v8 + 1096)) = v31;
          continue;
        case 2u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x40u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v26 = v43++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_105:
          v95 = *(int *)(v10 + 1100);
          goto LABEL_143;
        case 3u:
          v48 = 0;
          v49 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 4u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v44 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v26 = v49++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_109:
          v95 = *(int *)(v11 + 1104);
          goto LABEL_143;
        case 4u:
          v53 = 0;
          v54 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 8u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v44 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v26 = v54++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_113:
          v95 = *(int *)(v12 + 1108);
          goto LABEL_143;
        case 5u:
          v58 = 0;
          v59 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x20u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v44 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v26 = v59++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_117:
          v95 = *(int *)(v13 + 1112);
          goto LABEL_143;
        case 6u:
          v63 = 0;
          v64 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 2u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v44 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v26 = v64++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_121:
          v95 = *(int *)(v14 + 1116);
          goto LABEL_143;
        case 7u:
          v68 = 0;
          v69 = 0;
          v70 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x400u;
          while (2)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v72);
              *(_QWORD *)(a2 + v71) = v72 + 1;
              v70 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                v26 = v69++ >= 9;
                if (v26)
                {
                  v70 = 0;
                  goto LABEL_125;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v70 = 0;
LABEL_125:
          v96 = v70 != 0;
          v97 = *(int *)(v15 + 1120);
          goto LABEL_138;
        case 8u:
          v74 = 0;
          v75 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x80u;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v44 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                v26 = v75++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_129:
          v95 = *(int *)(v16 + 1124);
          goto LABEL_143;
        case 9u:
          v79 = 0;
          v80 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x10u;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v82);
              *(_QWORD *)(a2 + v81) = v82 + 1;
              v44 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                v26 = v80++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_133:
          v95 = *(int *)(v17 + 1128);
          goto LABEL_143;
        case 0xAu:
          v84 = 0;
          v85 = 0;
          v86 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x200u;
          while (2)
          {
            v87 = *v3;
            v88 = *(_QWORD *)(a2 + v87);
            if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v88);
              *(_QWORD *)(a2 + v87) = v88 + 1;
              v86 |= (unint64_t)(v89 & 0x7F) << v84;
              if (v89 < 0)
              {
                v84 += 7;
                v26 = v85++ >= 9;
                if (v26)
                {
                  v86 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v86 = 0;
LABEL_137:
          v96 = v86 != 0;
          v97 = *(int *)(v18 + 1132);
LABEL_138:
          *(_BYTE *)(a1 + v97) = v96;
          continue;
        case 0xBu:
          v90 = 0;
          v91 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1092)) |= 0x100u;
          break;
        default:
          v35 = v8;
          v36 = v10;
          v37 = v7;
          v38 = v11;
          v39 = v12;
          v40 = a1;
          result = PBReaderSkipValueWithTag();
          v13 = 0x1EF995000;
          a1 = v40;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v39;
          v15 = 0x1EF995000;
          v11 = v38;
          v16 = 0x1EF995000;
          v7 = v37;
          v19 = 0x1EF995000;
          v10 = v36;
          v17 = 0x1EF995000;
          v8 = v35;
          v18 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v92 = *v3;
        v93 = *(_QWORD *)(a2 + v92);
        if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          break;
        v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v93);
        *(_QWORD *)(a2 + v92) = v93 + 1;
        v44 |= (unint64_t)(v94 & 0x7F) << v90;
        if ((v94 & 0x80) == 0)
          goto LABEL_140;
        v90 += 7;
        v26 = v91++ >= 9;
        if (v26)
        {
          LODWORD(v44) = 0;
          goto LABEL_142;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_140:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v44) = 0;
LABEL_142:
      v95 = *(int *)(v19 + 1136);
LABEL_143:
      *(_DWORD *)(a1 + v95) = v44;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  AWDMETRICSMCarrierComponentInfo *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        objc_msgSend((id)a1, "addCarrierInfo:", v24);
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = 0x1EF995000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    v20 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_141;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_143;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_141:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_143:
          *(_QWORD *)(a1 + *(int *)(v8 + 1188)) = v32;
          continue;
        case 2u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x8000u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  v45 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_147:
          v126 = v45 != 0;
          v127 = *(int *)(v10 + 1192);
          goto LABEL_164;
        case 3u:
          v49 = 0;
          v50 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 8u;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v51 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                v27 = v50++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_151:
          v128 = *(int *)(v11 + 1196);
          goto LABEL_209;
        case 4u:
          v55 = 0;
          v56 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x10u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v51 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v27 = v56++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_155:
          v128 = *(int *)(v12 + 1200);
          goto LABEL_209;
        case 5u:
          v60 = 0;
          v61 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 2u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v51 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v27 = v61++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_159:
          v128 = *(int *)(v13 + 1204);
          goto LABEL_209;
        case 6u:
          v65 = 0;
          v66 = 0;
          v67 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x10000u;
          while (2)
          {
            v68 = *v3;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v67 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                v27 = v66++ >= 9;
                if (v27)
                {
                  v67 = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v67 = 0;
LABEL_163:
          v126 = v67 != 0;
          v127 = *(int *)(v14 + 1208);
LABEL_164:
          *(_BYTE *)(a1 + v127) = v126;
          continue;
        case 7u:
          v71 = 0;
          v72 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x400u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v51 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                v27 = v72++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_168:
          v128 = *(int *)(v15 + 1212);
          goto LABEL_209;
        case 8u:
          v76 = 0;
          v77 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x800u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v51 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v27 = v77++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_172:
          v128 = *(int *)(v16 + 1216);
          goto LABEL_209;
        case 9u:
          v81 = 0;
          v82 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x100u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v51 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v27 = v82++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_176:
          v128 = *(int *)(v17 + 1220);
          goto LABEL_209;
        case 0xAu:
          v86 = 0;
          v87 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x200u;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v51 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                v27 = v87++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_180:
          v128 = *(int *)(v18 + 1224);
          goto LABEL_209;
        case 0xBu:
          v91 = 0;
          v92 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x20u;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v94);
              *(_QWORD *)(a2 + v93) = v94 + 1;
              v51 |= (unint64_t)(v95 & 0x7F) << v91;
              if (v95 < 0)
              {
                v91 += 7;
                v27 = v92++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_184:
          v128 = *(int *)(v19 + 1228);
          goto LABEL_209;
        case 0xCu:
          v96 = 0;
          v97 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x40u;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v51 |= (unint64_t)(v100 & 0x7F) << v96;
              if (v100 < 0)
              {
                v96 += 7;
                v27 = v97++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_188:
          v128 = *(int *)(v20 + 1232);
          goto LABEL_209;
        case 0xDu:
          v101 = 0;
          v102 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x80u;
          while (2)
          {
            v103 = *v3;
            v104 = *(_QWORD *)(a2 + v103);
            if (v104 == -1 || v104 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v105 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v104);
              *(_QWORD *)(a2 + v103) = v104 + 1;
              v51 |= (unint64_t)(v105 & 0x7F) << v101;
              if (v105 < 0)
              {
                v101 += 7;
                v27 = v102++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_192:
          v128 = 40;
          goto LABEL_209;
        case 0xEu:
          v106 = 0;
          v107 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x1000u;
          while (2)
          {
            v108 = *v3;
            v109 = *(_QWORD *)(a2 + v108);
            if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v110 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v109);
              *(_QWORD *)(a2 + v108) = v109 + 1;
              v51 |= (unint64_t)(v110 & 0x7F) << v106;
              if (v110 < 0)
              {
                v106 += 7;
                v27 = v107++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_196:
          v128 = 60;
          goto LABEL_209;
        case 0xFu:
          v111 = 0;
          v112 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x2000u;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v114);
              *(_QWORD *)(a2 + v113) = v114 + 1;
              v51 |= (unint64_t)(v115 & 0x7F) << v111;
              if (v115 < 0)
              {
                v111 += 7;
                v27 = v112++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_200:
          v128 = 64;
          goto LABEL_209;
        case 0x10u:
          v116 = 0;
          v117 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 0x4000u;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v51 |= (unint64_t)(v120 & 0x7F) << v116;
              if (v120 < 0)
              {
                v116 += 7;
                v27 = v117++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_204:
          v128 = 68;
          goto LABEL_209;
        case 0x11u:
          v121 = 0;
          v122 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1184)) |= 4u;
          break;
        default:
          v36 = v8;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x1EF995000;
          v13 = 0x1EF995000;
          a1 = v41;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = 0x1EF995000;
          v11 = v39;
          v16 = 0x1EF995000;
          v7 = v38;
          v18 = 0x1EF995000;
          v10 = v37;
          v17 = 0x1EF995000;
          v8 = v36;
          v19 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v123 = *v3;
        v124 = *(_QWORD *)(a2 + v123);
        if (v124 == -1 || v124 >= *(_QWORD *)(a2 + *v4))
          break;
        v125 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v124);
        *(_QWORD *)(a2 + v123) = v124 + 1;
        v51 |= (unint64_t)(v125 & 0x7F) << v121;
        if ((v125 & 0x80) == 0)
          goto LABEL_206;
        v121 += 7;
        v27 = v122++ >= 9;
        if (v27)
        {
          LODWORD(v51) = 0;
          goto LABEL_208;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_206:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v51) = 0;
LABEL_208:
      v128 = 20;
LABEL_209:
      *(_DWORD *)(a1 + v128) = v51;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWUSReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_77:
          v55 = 32;
          goto LABEL_98;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_81:
          v55 = 24;
          goto LABEL_98;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_85:
          v55 = 28;
          goto LABEL_98;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x40u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_89:
          v55 = 36;
          goto LABEL_98;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_93:
          v55 = 16;
          goto LABEL_98;
        case 7u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
          goto LABEL_95;
        v50 += 7;
        v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_97:
      v55 = 20;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogSMCMetrics()
{
  if (qword_1ED8822B8 != -1)
    dispatch_once(&qword_1ED8822B8, &__block_literal_global_0);
  return (id)qword_1ED8822B0;
}

id PLLogUserActiveState()
{
  if (qword_1ED882300 != -1)
    dispatch_once(&qword_1ED882300, &__block_literal_global_1);
  return (id)_MergedGlobals_1_1;
}

uint64_t AWDMETRICSCellularPowerLogPLMNScanEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 24;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 28;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 20;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 16;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogRATChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogCoreDuet()
{
  if (qword_1ED882320 != -1)
    dispatch_once(&qword_1ED882320, &__block_literal_global_2);
  return (id)_MergedGlobals_1_2;
}

id PLLogHomeKit()
{
  if (qword_1ED882400 != -1)
    dispatch_once(&qword_1ED882400, &__block_literal_global_4);
  return (id)qword_1ED8823F8;
}

uint64_t KCellularServingCellRfBandHistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  RfBandDuration *v35;
  uint64_t result;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v17 != 3)
      {
        if ((_DWORD)v17 != 15)
        {
LABEL_47:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_62;
        }
        v24 = 0;
        v25 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v20 |= (unint64_t)(v28 & 0x7F) << v24;
          if ((v28 & 0x80) == 0)
            goto LABEL_54;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_56:
        v37 = 32;
LABEL_57:
        *(_DWORD *)(a1 + v37) = v20;
        goto LABEL_62;
      }
      v35 = objc_alloc_init(RfBandDuration);
      objc_msgSend((id)a1, "addPcellBandDuration:", v35);
      if (!PBReaderPlaceMark() || !RfBandDurationReadFrom((uint64_t)v35, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_62:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 1)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      *(_BYTE *)(a1 + 36) |= 1u;
      while (1)
      {
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          break;
        v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
        *(_QWORD *)(a2 + v32) = v33 + 1;
        v31 |= (unint64_t)(v34 & 0x7F) << v29;
        if ((v34 & 0x80) == 0)
          goto LABEL_59;
        v29 += 7;
        v14 = v30++ >= 9;
        if (v14)
        {
          v31 = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
      if (*(_BYTE *)(a2 + *v5))
        v31 = 0;
LABEL_61:
      *(_QWORD *)(a1 + 8) = v31;
      goto LABEL_62;
    }
    if ((_DWORD)v17 != 2)
      goto LABEL_47;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 36) |= 2u;
    while (1)
    {
      v21 = *v3;
      v22 = *(_QWORD *)(a2 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
      *(_QWORD *)(a2 + v21) = v22 + 1;
      v20 |= (unint64_t)(v23 & 0x7F) << v18;
      if ((v23 & 0x80) == 0)
        goto LABEL_50;
      v18 += 7;
      v14 = v19++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_52;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_52:
    v37 = 16;
    goto LABEL_57;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularTdsL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSCGRelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void PLProcessCPU::PLProcessCPU(PLProcessCPU *this)
{
  os_log_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];
  size_t v8;
  size_t count;

  *(_QWORD *)this = &off_1E8578AF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 19) = 0;
  v2 = os_log_create("com.apple.powerlog", "PLProcessCPU");
  v3 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v2;

  LODWORD(count) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 17) = 0x100000000;
  *((_BYTE *)this + 144) = 1;
  v4 = mach_absolute_time();
  *((_QWORD *)this + 15) = v4;
  *((_QWORD *)this + 16) = v4;
  v8 = 4;
  sysctlbyname("kern.maxproc", &count, &v8, 0, 0);
  *((_QWORD *)this + 11) = malloc_type_calloc((int)count, 4uLL, 0x100004052888210uLL);
  v5 = malloc_type_calloc((int)count, 4uLL, 0x100004052888210uLL);
  *((_QWORD *)this + 12) = v5;
  *((_DWORD *)this + 26) = 4 * count;
  v6 = *((_QWORD *)this + 19);
  if (!*((_QWORD *)this + 11) || !v5)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 19), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_1CAF47000, v6, OS_LOG_TYPE_ERROR, "Unable to allocate memory.", v7, 2u);
    }
    __cxa_rethrow();
  }
  if (os_log_type_enabled(*((os_log_t *)this + 19), OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_debug_impl(&dword_1CAF47000, v6, OS_LOG_TYPE_DEBUG, "PLProcessCPU initialized.", v7, 2u);
  }
}

void sub_1CB03AED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void PLProcessCPU::~PLProcessCPU(void **this)
{
  *this = &off_1E8578AF0;
  free(this[11]);
  free(this[12]);

  std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table((uint64_t)(this + 6));
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table((uint64_t)(this + 1));
}

void PLProcessCPU::findMissing(PLProcessCPU *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((unsigned int *)this + *((int *)this + 35) + 27);
  if ((_DWORD)v3)
  {
    v21 = *((unsigned int *)this + *((int *)this + 34) + 27);
    if ((int)v3 >= 1 && *((_DWORD *)this + *((int *)this + 34) + 27) >= 1)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      LODWORD(v9) = 0;
      do
      {
        v10 = v21 - v8;
        v9 = (int)v9;
        v11 = a2[2];
        v12 = *a2;
        while (1)
        {
          v13 = *((_QWORD *)this + *((int *)this + 35) + 11);
          v14 = *(_DWORD *)(v13 + 4 * v9);
          if (*(_DWORD *)(*((_QWORD *)this + *((int *)this + 34) + 11) + 4 * v8) == v14)
            break;
          if (v10 >= v3 - v9)
            goto LABEL_33;
          if (v7 >= v11)
          {
            v15 = (v7 - v12) >> 2;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if ((v11 - v12) >> 1 > v16)
              v16 = (v11 - v12) >> 1;
            if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
            {
              if (v17 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v18 = (char *)operator new(4 * v17);
              v14 = *(_DWORD *)(v13 + 4 * v9);
              v7 = v6;
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v15];
            *(_DWORD *)v19 = v14;
            v6 = v19 + 4;
            while (v7 != v12)
            {
              v20 = *((_DWORD *)v7 - 1);
              v7 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            v11 = &v18[4 * v17];
            *a2 = v19;
            a2[1] = v6;
            a2[2] = v11;
            if (v12)
              operator delete(v12);
            v12 = v19;
            v10 = v21 - v8;
          }
          else
          {
            *(_DWORD *)v7 = v14;
            v6 = v7 + 4;
          }
          a2[1] = v6;
          ++v9;
          v7 = v6;
          if (v9 >= v3)
            return;
        }
        if ((_DWORD)v3 - (_DWORD)v9 == (_DWORD)v10)
          return;
        LODWORD(v9) = v9 + 1;
LABEL_33:
        ++v8;
      }
      while (v8 < v21 && (int)v9 < (int)v3);
    }
  }
}

void sub_1CB03B12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void PLProcessCPU::cleanupDeadPids(PLProcessCPU *this)
{
  char *v2;
  int *v3;
  _QWORD *v4;
  char *v5;
  int *v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  char *v10;
  char *v11;

  PLProcessCPU::findMissing(this, &v10);
  v2 = v10;
  v3 = (int *)v11;
  if (v10 != v11)
  {
    v4 = (_QWORD *)((char *)this + 8);
    v5 = (char *)this + 48;
    v6 = (int *)v10;
    do
    {
      v7 = *v6;
      v8 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(v4, *v6);
      if (v8)
      {
        v9 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v5, v8[3], v8 + 3);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v9 + 3, v7);
        std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>(v4, v7);
      }
      ++v6;
    }
    while (v6 != v3);
  }
  if (v2)
    operator delete(v2);
}

void sub_1CB03B20C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__darwin_ino64_t PLProcessCPU::getInode(PLProcessCPU *this, const char *a2)
{
  stat v3;

  if (stat(a2, &v3) == -1)
    return -1;
  else
    return v3.st_ino;
}

char *PLProcessCPU::getName(PLProcessCPU *this, char *a2)
{
  return basename(a2);
}

unint64_t PLProcessCPU::updateInodeMap(PLProcessCPU *this, int *a2)
{
  unint64_t v2;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  const char *v37;
  const char *v38;
  size_t v39;
  size_t v40;
  __int128 *p_dst;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void *v46;
  _QWORD *exception;
  _QWORD *v48;
  _QWORD *v49;
  __int128 __dst;
  unint64_t v51;
  unint64_t v52;
  _QWORD buffer[129];

  buffer[128] = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    if (!proc_pidpath(*a2, buffer, 0x400u))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = "Unable to get path for pid, or process terminated";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v5 = (**(uint64_t (***)(PLProcessCPU *, _QWORD *))this)(this, buffer);
    v52 = v5;
    if (v5 == -1)
    {
      v48 = __cxa_allocate_exception(8uLL);
      *v48 = "Cannot find the inode for the process";
      __cxa_throw(v48, MEMORY[0x1E0DE4E50], 0);
    }
    v6 = *a2;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v52 = 0;
    strcpy((char *)buffer, "kernel_task");
  }
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)this + 2, v6, a2)[3] = v5;
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, v5, &v52);
  v8 = v7;
  v9 = *a2;
  v10 = v7[4];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v2 = v9;
      if (v10 <= v9)
        v2 = v9 % v10;
    }
    else
    {
      v2 = (v10 - 1) & v9;
    }
    v12 = *(uint64_t ***)(v7[3] + 8 * v2);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (*((_DWORD *)i + 4) == v9)
            goto LABEL_78;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v2)
            break;
        }
      }
    }
  }
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v9;
  *((_DWORD *)v15 + 4) = v9;
  v16 = (float)(unint64_t)(v8[6] + 1);
  v17 = *((float *)v8 + 14);
  if ((((float)(v17 * (float)v10) >= v16) & ~(v10 == 0)) == 0)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = v8[4];
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)v8[6] / *((float *)v8 + 14));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = v8[4];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)v8[3];
          v8[3] = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          v8[4] = prime;
          do
            *(_QWORD *)(v8[3] + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)v8[5];
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v8[3] + 8 * v26) = v8 + 5;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  v33 = v8[3];
                  if (!*(_QWORD *)(v33 + 8 * v32))
                  {
                    *(_QWORD *)(v33 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(v8[3] + 8 * v32);
                  **(_QWORD **)(v8[3] + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_59:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v46 = (void *)v8[3];
        v8[3] = 0;
        if (v46)
          operator delete(v46);
        v10 = 0;
        v8[4] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v2 = v9 % v10;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v10 - 1) & v9;
    }
  }
  v34 = v8[3];
  v35 = *(_QWORD **)(v34 + 8 * v2);
  if (v35)
  {
    *v15 = *v35;
LABEL_76:
    *v35 = v15;
    goto LABEL_77;
  }
  *v15 = v8[5];
  v8[5] = v15;
  *(_QWORD *)(v34 + 8 * v2) = v8 + 5;
  if (*v15)
  {
    v36 = *(_QWORD *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(v8[3] + 8 * v36);
    goto LABEL_76;
  }
LABEL_77:
  ++v8[6];
LABEL_78:
  if (*((char *)v8 + 87) < 0)
  {
    if (v8[9])
      return v5;
  }
  else if (*((_BYTE *)v8 + 87))
  {
    return v5;
  }
  v37 = (const char *)(*(uint64_t (**)(PLProcessCPU *, _QWORD *))(*(_QWORD *)this + 8))(this, buffer);
  v38 = v37;
  if (!v37)
  {
    v49 = __cxa_allocate_exception(8uLL);
    *v49 = "Unable to get basename for the process";
    __cxa_throw(v49, MEMORY[0x1E0DE4E50], 0);
  }
  v39 = strlen(v37);
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = v39;
  if (v39 >= 0x17)
  {
    v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v42 = v39 | 7;
    v43 = v42 + 1;
    p_dst = (__int128 *)operator new(v42 + 1);
    *((_QWORD *)&__dst + 1) = v40;
    v51 = v43 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v51) = v39;
    p_dst = &__dst;
    if (!v39)
      goto LABEL_91;
  }
  memmove(p_dst, v38, v40);
LABEL_91:
  v44 = (void **)(v8 + 8);
  *((_BYTE *)p_dst + v40) = 0;
  if (*((char *)v8 + 87) < 0)
    operator delete(*v44);
  *(_OWORD *)v44 = __dst;
  v8[10] = v51;
  return v52;
}

void sub_1CB03B860(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PLProcessCPU::getCpu(PLProcessCPU *this, int pid, proc_taskinfo *buffer)
{
  return proc_pidinfo(pid, 4, 0, buffer, 96);
}

uint64_t PLProcessCPU::getRawCpu(PLProcessCPU *this, int *a2, unint64_t *a3)
{
  _QWORD *v7;
  _QWORD *exception;
  _QWORD v9[12];

  if ((*(unsigned int (**)(PLProcessCPU *, _QWORD, _QWORD *))(*(_QWORD *)this + 16))(this, *a2, v9) != 96)
  {
    std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>((_QWORD *)this + 1, *a2);
    v7 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::find<unsigned long long>((_QWORD *)this + 6, *a3);
    if (!v7[6])
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v7 + 3, *a2);
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Process terminated while acquiring pidinfo";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return v9[3] + v9[2];
}

uint64_t PLProcessCPU::aggregateCpu(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *j;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  _QWORD *v40;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *a4;
  if (v6)
  {
    v8 = *(_QWORD **)a2;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *a4;
      if (v7 >= v6)
        v10 = v7 % v6;
    }
    else
    {
      v10 = (v6 - 1) & v7;
    }
    v12 = (_QWORD *)v8[v10];
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v7)
        {
          if (i[2] == v7)
          {
            result = i[3];
            v39 = *a3 + result;
            *a3 = v39;
            i[3] = v39;
            return result;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v14 >= v6)
              v14 %= v6;
          }
          else
          {
            v14 &= v6 - 1;
          }
          if (v14 != v10)
            break;
        }
      }
    }
    v11 = *a3;
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a4;
      if (v6 <= v7)
        v4 = v7 % v6;
    }
    else
    {
      v4 = (v6 - 1) & v7;
    }
    v15 = (_QWORD **)v8[v4];
    if (v15)
    {
      for (j = *v15; j; j = (_QWORD *)*j)
      {
        v17 = j[1];
        if (v17 == v7)
        {
          if (j[2] == v7)
            goto LABEL_89;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v17 >= v6)
              v17 %= v6;
          }
          else
          {
            v17 &= v6 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  else
  {
    v11 = *a3;
  }
  j = operator new(0x20uLL);
  *j = 0;
  j[1] = v7;
  j[2] = v7;
  j[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
  v19 = *(float *)(a2 + 32);
  if (!v6 || (float)(v19 * (float)v6) < v18)
  {
    v20 = 1;
    if (v6 >= 3)
      v20 = (v6 & (v6 - 1)) != 0;
    v21 = v20 | (2 * v6);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a2 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_45;
    if (*(_QWORD *)&prime < v6)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
      if (v6 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(_QWORD **)a2;
          *(_QWORD *)a2 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a2 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = *(_QWORD **)(a2 + 16);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v28) = a2 + 16;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v34) = v27;
                    goto LABEL_70;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a2 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a2 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_70:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_74;
        }
        v40 = *(_QWORD **)a2;
        *(_QWORD *)a2 = 0;
        if (v40)
          operator delete(v40);
        v6 = 0;
        *(_QWORD *)(a2 + 8) = 0;
      }
    }
LABEL_74:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v7)
        v4 = v7 % v6;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v6 - 1) & v7;
    }
  }
  v35 = *(_QWORD **)a2;
  v36 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v4);
  if (v36)
  {
    *j = *v36;
  }
  else
  {
    *j = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = j;
    v35[v4] = a2 + 16;
    if (!*j)
      goto LABEL_88;
    v37 = *(_QWORD *)(*j + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v37 >= v6)
        v37 %= v6;
    }
    else
    {
      v37 &= v6 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a2 + 8 * v37);
  }
  *v36 = j;
LABEL_88:
  ++*(_QWORD *)(a2 + 24);
LABEL_89:
  result = 0;
  j[3] = v11;
  return result;
}

void sub_1CB03BDB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PLProcessCPU::addToReport(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4, uint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  int v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _QWORD *v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;

  v10 = PLProcessCPU::aggregateCpu(a1, a3, a5, a2);
  v12 = (uint64_t *)(a4 + 1);
  v11 = a4[1];
  if (v11)
  {
    v13 = *a2;
    v14 = (uint64_t *)(a4 + 1);
    do
    {
      v15 = v11[5];
      v16 = v15 >= v10;
      v17 = v15 > v10;
      v18 = v16;
      if (v11[4] == v13)
        v19 = v17;
      else
        v19 = v18;
      v20 = v19 == 0;
      if (v19)
        v21 = v11 + 1;
      else
        v21 = v11;
      if (v20)
        v14 = v11;
      v11 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v14 != v12)
    {
      v22 = v14[5];
      v28 = v22 > v10;
      v23 = v22 < v10;
      v24 = !v28;
      if (!(v14[4] == v13 ? v23 : v24))
      {
        std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(a4, v14);
        operator delete(v14);
      }
    }
  }
  v26 = (unint64_t)a4[2];
  v27 = *a5;
  v28 = v26 != 10 || v27 > *a6;
  if (v28)
  {
    v29 = *a2;
    v30 = (_QWORD *)*v12;
    v31 = a4 + 1;
    v32 = a4 + 1;
    if (*v12)
    {
      while (1)
      {
        while (1)
        {
          v32 = v30;
          v33 = v30[4];
          v34 = v32[5];
          v35 = v34 < v27;
          if (v33 != v29)
            v35 = v34 <= v27;
          if (!v35)
            break;
          v30 = (_QWORD *)*v32;
          v31 = v32;
          if (!*v32)
            goto LABEL_45;
        }
        v16 = v34 >= v27;
        v36 = v34 > v27;
        v37 = v16;
        if (!(v33 == v29 ? v36 : v37))
          break;
        v30 = (_QWORD *)v32[1];
        if (!v30)
        {
          v31 = v32 + 1;
          goto LABEL_45;
        }
      }
    }
    else
    {
LABEL_45:
      v39 = operator new(0x30uLL);
      v39[4] = v29;
      v39[5] = v27;
      *v39 = 0;
      v39[1] = 0;
      v39[2] = v32;
      *v31 = v39;
      v40 = (_QWORD *)**a4;
      if (v40)
      {
        *a4 = v40;
        v39 = (_QWORD *)*v31;
      }
      v41 = (_BYTE *)*v12;
      v20 = v39 == (_QWORD *)*v12;
      *((_BYTE *)v39 + 24) = v20;
      if (!v20)
      {
        do
        {
          v42 = v39[2];
          if (*(_BYTE *)(v42 + 24))
            break;
          v43 = *(_BYTE **)(v42 + 16);
          v44 = *(_QWORD *)v43;
          if (*(_QWORD *)v43 == v42)
          {
            v47 = *((_QWORD *)v43 + 1);
            if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
            {
              if (*(_QWORD **)v42 == v39)
              {
                v49 = (uint64_t *)v39[2];
              }
              else
              {
                v49 = *(uint64_t **)(v42 + 8);
                v50 = *v49;
                *(_QWORD *)(v42 + 8) = *v49;
                if (v50)
                {
                  *(_QWORD *)(v50 + 16) = v42;
                  v43 = *(_BYTE **)(v42 + 16);
                }
                v49[2] = (uint64_t)v43;
                *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                *v49 = v42;
                *(_QWORD *)(v42 + 16) = v49;
                v43 = (_BYTE *)v49[2];
                v42 = *(_QWORD *)v43;
              }
              *((_BYTE *)v49 + 24) = 1;
              v43[24] = 0;
              v53 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)v43 = v53;
              if (v53)
                *(_QWORD *)(v53 + 16) = v43;
              *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
              *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
              *(_QWORD *)(v42 + 8) = v43;
              goto LABEL_73;
            }
          }
          else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
          {
            if (*(_QWORD **)v42 == v39)
            {
              v51 = v39[1];
              *(_QWORD *)v42 = v51;
              if (v51)
              {
                *(_QWORD *)(v51 + 16) = v42;
                v43 = *(_BYTE **)(v42 + 16);
              }
              v39[2] = v43;
              *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v39;
              v39[1] = v42;
              *(_QWORD *)(v42 + 16) = v39;
              v43 = (_BYTE *)v39[2];
            }
            else
            {
              v39 = (_QWORD *)v39[2];
            }
            *((_BYTE *)v39 + 24) = 1;
            v43[24] = 0;
            v42 = *((_QWORD *)v43 + 1);
            v52 = *(_QWORD **)v42;
            *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
            if (v52)
              v52[2] = v43;
            *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
            *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
            *(_QWORD *)v42 = v43;
LABEL_73:
            *((_QWORD *)v43 + 2) = v42;
            break;
          }
          *(_BYTE *)(v42 + 24) = 1;
          v39 = v43;
          v43[24] = v43 == v41;
          *v45 = 1;
        }
        while (v43 != v41);
      }
      a4[2] = (_QWORD *)++v26;
    }
    if (v26 >= 0xB)
    {
      do
      {
        v54 = (uint64_t *)*v12;
        v55 = (uint64_t *)(a4 + 1);
        if (*v12)
        {
          do
          {
            v55 = v54;
            v54 = (uint64_t *)v54[1];
          }
          while (v54);
          v56 = (uint64_t *)*v55;
        }
        else
        {
          do
          {
            v57 = v55;
            v55 = (uint64_t *)v55[2];
            v56 = (uint64_t *)*v55;
          }
          while ((uint64_t *)*v55 == v57);
        }
        if (v56)
        {
          do
          {
            v55 = v56;
            v56 = (uint64_t *)v56[1];
          }
          while (v56);
          *a6 = v55[5];
        }
        else
        {
          do
          {
            v59 = v55;
            v55 = (uint64_t *)v55[2];
          }
          while ((uint64_t *)*v55 == v59);
          v60 = (uint64_t *)v55[1];
          *a6 = v55[5];
          if (v60)
          {
            do
            {
              v58 = v60;
              v60 = (uint64_t *)*v60;
            }
            while (v60);
            goto LABEL_89;
          }
        }
        do
        {
          v58 = (uint64_t *)v55[2];
          v20 = *v58 == (_QWORD)v55;
          v55 = v58;
        }
        while (!v20);
LABEL_89:
        std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(a4, v58);
        operator delete(v58);
      }
      while ((unint64_t)a4[2] > 0xA);
    }
  }
}

void PLProcessCPU::reportCpus(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  double v5;
  float v6;
  __int128 v7;
  double v8;
  NSObject *v9;
  float v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  float v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  _BYTE v30[24];
  __int16 v31;
  int v32;
  __int16 v33;
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D80078], "secondsFromMachTime:", *a3);
  v6 = v5 * 1000.0;
  objc_msgSend(MEMORY[0x1E0D80078], "secondsFromMachTime:", *(_QWORD *)(a1 + 120 + 8 * *(int *)(a1 + 136)) - *(_QWORD *)(a1 + 120 + 8 * *(int *)(a1 + 140)));
  if (a2[2])
  {
    v8 = *(double *)&v7;
    v9 = *(NSObject **)(a1 + 152);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v8;
      *(_DWORD *)buf = 134218240;
      *(double *)v30 = v6;
      *(_WORD *)&v30[8] = 2048;
      *(double *)&v30[10] = v10;
      _os_log_impl(&dword_1CAF47000, v9, OS_LOG_TYPE_DEFAULT, "plcpu-00, %8.2f ms, %6.2f s", buf, 0x16u);
    }
  }
  v13 = (_QWORD *)*a2;
  v11 = a2 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    v14 = 0;
    v15 = v6;
    *(_QWORD *)&v7 = 67110146;
    v27 = v7;
    do
    {
      v28 = *((_OWORD *)v12 + 2);
      objc_msgSend(MEMORY[0x1E0D80078], "secondsFromMachTime:", *((_QWORD *)&v28 + 1), v27);
      v17 = v16;
      v18 = *(id *)(a1 + 152);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = v28;
        v20 = *(_DWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 48, v28, &v28)[5]+ 16);
        v21 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 48, v19, &v28);
        v22 = v21 + 8;
        if (*((char *)v21 + 87) < 0)
          v22 = (_QWORD *)*v22;
        v23 = v17 * 1000.0;
        ++v14;
        *(_DWORD *)buf = v27;
        *(_DWORD *)v30 = v14;
        *(_WORD *)&v30[4] = 2048;
        *(double *)&v30[6] = v23;
        *(_WORD *)&v30[14] = 2048;
        *(double *)&v30[16] = v23 * 100.0 / v15;
        v31 = 1024;
        v32 = v20;
        v33 = 2080;
        v34 = v22;
        _os_log_impl(&dword_1CAF47000, v18, OS_LOG_TYPE_DEFAULT, "plcpu-%02d, %8.2f ms, %6.2f %%, %5d, %s", buf, 0x2Cu);
      }

      v24 = (_QWORD *)v12[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v12[2];
          v26 = *v25 == (_QWORD)v12;
          v12 = v25;
        }
        while (!v26);
      }
      v12 = v25;
    }
    while (v25 != v11);
  }
}

void sub_1CB03C41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PLProcessCPU::processPids(PLProcessCPU *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t updated;
  uint64_t RawCpu;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17[2];
  _OWORD v18[2];
  int v19;

  *((_DWORD *)this + *((int *)this + 34) + 27) = proc_listallpids(*((void **)this + *((int *)this + 34) + 11), *((_DWORD *)this + 26));
  PLProcessCPU::cleanupDeadPids(this);
  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  v17[0] = 0;
  v17[1] = 0;
  v15 = 0;
  v16 = v17;
  v14 = 0;
  v2 = mach_absolute_time();
  v3 = *((int *)this + 34);
  *((_QWORD *)this + v3 + 15) = v2;
  if (*((int *)this + v3 + 27) >= 1)
  {
    v4 = 0;
    do
    {
      v13 = *(_DWORD *)(*((_QWORD *)this + v3 + 11) + 4 * v4);
      v5 = v13;
      v12 = 0;
      v6 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>((_QWORD *)this + 1, v13);
      v7 = v6;
      if (v6)
        updated = v6[3];
      else
        updated = PLProcessCPU::updateInodeMap(this, &v13);
      v12 = updated;
      RawCpu = PLProcessCPU::getRawCpu(this, &v13, &v12);
      if (v7)
      {
        v7[*((int *)this + 34) + 4] = RawCpu;
        if (!*((_BYTE *)this + 144))
        {
          v11 = RawCpu - v7[*((int *)this + 35) + 4];
          v14 += v11;
          if (v11)
            PLProcessCPU::addToReport(RawCpu, &v12, (uint64_t)v18, &v16, &v11, &v15);
        }
      }
      else
      {
        std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)this + 2, v5, &v13)[*((int *)this + 34) + 4] = RawCpu;
      }
      ++v4;
      v3 = *((int *)this + 34);
    }
    while (v4 < *((int *)this + v3 + 27));
  }
  PLProcessCPU::reportCpus((uint64_t)this, &v16, &v14);
  *((int32x2_t *)this + 17) = vrev64_s32(*(int32x2_t *)((char *)this + 136));
  *((_BYTE *)this + 144) = 0;
  std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(v17[0]);
  return std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table((uint64_t)v18);
}

void sub_1CB03C610()
{
  JUMPOUT(0x1CB03C61CLL);
}

uint64_t std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E8576420, MEMORY[0x1E0DE42D0]);
}

void sub_1CB03C784(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x58uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v5;
  *((_QWORD *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 7) = 0;
  *((_QWORD *)v13 + 8) = 0;
  *((_DWORD *)v13 + 14) = 1065353216;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 10) = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (_QWORD *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1CB03CCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = a1[1];
  if (!v2)
    return;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(void ***)(*a1 + 8 * v4);
  if (!v5)
    return;
  v6 = *v5;
  if (!v6)
    return;
  v7 = v2 - 1;
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v8 >= v2)
        v8 %= v2;
    }
    else
    {
      v8 &= v7;
    }
    if (v8 != v4)
      return;
LABEL_17:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_17;
  v9 = *v6;
  if (v3.u32[0] > 1uLL)
  {
    if (v8 >= v2)
      v8 %= v2;
  }
  else
  {
    v8 &= v7;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v8);
  do
  {
    v11 = v10;
    v10 = (_QWORD *)*v10;
  }
  while (v10 != v6);
  if (v11 == a1 + 2)
    goto LABEL_36;
  v12 = v11[1];
  if (v3.u32[0] > 1uLL)
  {
    if (v12 >= v2)
      v12 %= v2;
  }
  else
  {
    v12 &= v7;
  }
  if (v12 == v8)
  {
LABEL_38:
    if (v9)
    {
      v13 = *(_QWORD *)(v9 + 8);
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v9)
      goto LABEL_37;
    v13 = *(_QWORD *)(v9 + 8);
    if (v3.u32[0] > 1uLL)
    {
      v14 = *(_QWORD *)(v9 + 8);
      if (v13 >= v2)
        v14 = v13 % v2;
    }
    else
    {
      v14 = v13 & v7;
    }
    if (v14 != v8)
    {
LABEL_37:
      *(_QWORD *)(*a1 + 8 * v8) = 0;
      v9 = *v6;
      goto LABEL_38;
    }
LABEL_40:
    if (v3.u32[0] > 1uLL)
    {
      if (v13 >= v2)
        v13 %= v2;
    }
    else
    {
      v13 &= v7;
    }
    if (v13 != v8)
    {
      *(_QWORD *)(*a1 + 8 * v13) = v11;
      v9 = *v6;
    }
  }
  *v11 = v9;
  *v6 = 0;
  --a1[3];
  operator delete(v6);
}

void std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = *(_QWORD *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          v12 = *(_QWORD *)(v5 + 8);
          if (v11 >= *(_QWORD *)&v4)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v11 & (*(_QWORD *)&v4 - 1);
        }
        if (v12 == v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = *(_QWORD *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v4)
        v11 %= *(_QWORD *)&v4;
    }
    else
    {
      v11 &= *(_QWORD *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1CB03D3EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t **std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v25 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v25);
  }
  if (*result == a2)
    *result = v3;
  v5 = result[1];
  result[2] = (uint64_t *)((char *)result[2] - 1);
  v6 = *a2;
  v7 = a2;
  if (*a2)
  {
    v8 = (uint64_t *)a2[1];
    if (!v8)
    {
      v7 = a2;
      goto LABEL_15;
    }
    do
    {
      v7 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  v6 = v7[1];
  if (v6)
  {
LABEL_15:
    v9 = 0;
    *(_QWORD *)(v6 + 16) = v7[2];
    goto LABEL_16;
  }
  v9 = 1;
LABEL_16:
  v10 = (uint64_t **)v7[2];
  v11 = *v10;
  if (*v10 == v7)
  {
    *v10 = (uint64_t *)v6;
    if (v7 == v5)
    {
      v11 = 0;
      v5 = (uint64_t *)v6;
    }
    else
    {
      v11 = v10[1];
    }
  }
  else
  {
    v10[1] = (uint64_t *)v6;
  }
  v12 = *((unsigned __int8 *)v7 + 24);
  if (v7 != a2)
  {
    v13 = a2[2];
    v7[2] = v13;
    *(_QWORD *)(v13 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v7;
    v15 = *a2;
    v14 = a2[1];
    *(_QWORD *)(v15 + 16) = v7;
    *v7 = v15;
    v7[1] = v14;
    if (v14)
      *(_QWORD *)(v14 + 16) = v7;
    *((_BYTE *)v7 + 24) = *((_BYTE *)a2 + 24);
    if (v5 == a2)
      v5 = v7;
  }
  if (!v12 || !v5)
    return result;
  if (!v9)
  {
    *(_BYTE *)(v6 + 24) = 1;
    return result;
  }
  while (1)
  {
    v16 = v11[2];
    if (*(uint64_t **)v16 != v11)
      break;
    if (!*((_BYTE *)v11 + 24))
    {
      *((_BYTE *)v11 + 24) = 1;
      *(_BYTE *)(v16 + 24) = 0;
      v22 = v11[1];
      *(_QWORD *)v16 = v22;
      if (v22)
        *(_QWORD *)(v22 + 16) = v16;
      v11[2] = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * (**(_QWORD **)(v16 + 16) != v16)) = v11;
      v11[1] = v16;
      *(_QWORD *)(v16 + 16) = v11;
      if (v5 == (uint64_t *)v16)
        v5 = v11;
      v11 = *(uint64_t **)v16;
    }
    v23 = (_QWORD *)*v11;
    if (*v11 && !*((_BYTE *)v23 + 24))
      goto LABEL_76;
    v24 = (uint64_t *)v11[1];
    if (v24 && !*((_BYTE *)v24 + 24))
    {
      if (v23 && !*((_BYTE *)v23 + 24))
      {
LABEL_76:
        v24 = v11;
      }
      else
      {
        *((_BYTE *)v24 + 24) = 1;
        *((_BYTE *)v11 + 24) = 0;
        v30 = *v24;
        v11[1] = *v24;
        if (v30)
          *(_QWORD *)(v30 + 16) = v11;
        v24[2] = v11[2];
        *(_QWORD *)(v11[2] + 8 * (*(_QWORD *)v11[2] != (_QWORD)v11)) = v24;
        *v24 = (uint64_t)v11;
        v11[2] = (uint64_t)v24;
        v23 = v11;
      }
      v27 = v24[2];
      *((_BYTE *)v24 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v23 + 24) = 1;
      v28 = *(uint64_t **)v27;
      v31 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      *(_QWORD *)v27 = v31;
      if (v31)
        *(_QWORD *)(v31 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      v28[1] = v27;
      goto LABEL_80;
    }
    *((_BYTE *)v11 + 24) = 0;
    v21 = (uint64_t *)v11[2];
    if (*((_BYTE *)v21 + 24))
      v25 = v21 == v5;
    else
      v25 = 1;
    if (v25)
      goto LABEL_61;
LABEL_57:
    v11 = *(uint64_t **)(v21[2] + 8 * (*(_QWORD *)v21[2] == (_QWORD)v21));
  }
  if (!*((_BYTE *)v11 + 24))
  {
    *((_BYTE *)v11 + 24) = 1;
    *(_BYTE *)(v16 + 24) = 0;
    v17 = *(uint64_t **)(v16 + 8);
    v18 = *v17;
    *(_QWORD *)(v16 + 8) = *v17;
    if (v18)
      *(_QWORD *)(v18 + 16) = v16;
    v17[2] = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * (**(_QWORD **)(v16 + 16) != v16)) = v17;
    *v17 = v16;
    *(_QWORD *)(v16 + 16) = v17;
    if (v5 == (uint64_t *)*v11)
      v5 = v11;
    v11 = *(uint64_t **)(*v11 + 8);
  }
  v19 = (_QWORD *)*v11;
  if (!*v11 || *((_BYTE *)v19 + 24))
  {
    v20 = (uint64_t *)v11[1];
    if (v20 && !*((_BYTE *)v20 + 24))
      goto LABEL_67;
    *((_BYTE *)v11 + 24) = 0;
    v21 = (uint64_t *)v11[2];
    if (v21 == v5)
    {
      v21 = v5;
LABEL_61:
      *((_BYTE *)v21 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v21 + 24))
      goto LABEL_61;
    goto LABEL_57;
  }
  v20 = (uint64_t *)v11[1];
  if (v20 && !*((_BYTE *)v20 + 24))
  {
LABEL_67:
    v19 = v11;
  }
  else
  {
    *((_BYTE *)v19 + 24) = 1;
    *((_BYTE *)v11 + 24) = 0;
    v26 = v19[1];
    *v11 = v26;
    if (v26)
      *(_QWORD *)(v26 + 16) = v11;
    v19[2] = v11[2];
    *(_QWORD *)(v11[2] + 8 * (*(_QWORD *)v11[2] != (_QWORD)v11)) = v19;
    v19[1] = v11;
    v11[2] = (uint64_t)v19;
    v20 = v11;
  }
  v27 = v19[2];
  *((_BYTE *)v19 + 24) = *(_BYTE *)(v27 + 24);
  *(_BYTE *)(v27 + 24) = 1;
  *((_BYTE *)v20 + 24) = 1;
  v28 = *(uint64_t **)(v27 + 8);
  v29 = *v28;
  *(_QWORD *)(v27 + 8) = *v28;
  if (v29)
    *(_QWORD *)(v29 + 16) = v27;
  v28[2] = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
  *v28 = v27;
LABEL_80:
  *(_QWORD *)(v27 + 16) = v28;
  return result;
}

void std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(*a1);
    std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1CB03DA28(void *a1)
{
  uint64_t v1;

  MEMORY[0x1D179BCE0](v1, 0x10B1C40CB89C51DLL);
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x1CB03DA14);
}

id PLLogPLIOReportAgentIOReportStats()
{
  if (qword_1ED882428 != -1)
    dispatch_once(&qword_1ED882428, &__block_literal_global_6);
  return (id)qword_1ED882420;
}

BOOL PowerlogMetricLogReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  KCellularProtocolStackHist *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 3985947)
      {
        if ((int)v17 > 3986692)
        {
          switch((int)v17)
          {
            case 3986693:
              v18 = objc_alloc_init(KCellularProtocolStackHist);
              objc_msgSend(a1, "addKCellularProtocolStackStateHist:", v18);
              goto LABEL_209;
            case 3986694:
              v18 = objc_alloc_init(KCellularCellPlmnSearchCount);
              objc_msgSend(a1, "addKCellularCellPlmnSearchCount:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularCellPlmnSearchCountReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            case 3986695:
              v18 = objc_alloc_init(KCellularProtocolStackHist);
              objc_msgSend(a1, "addKCellularCellPlmnSearchHist:", v18);
              goto LABEL_209;
            case 3986696:
              v18 = objc_alloc_init(KCellularProtocolStackPowerState);
              objc_msgSend(a1, "addKCellularProtocolStackPowerState:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularProtocolStackPowerStateReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            case 3986697:
            case 3986698:
            case 3986699:
            case 3986700:
            case 3986701:
            case 3986702:
              goto LABEL_220;
            case 3986703:
              v18 = objc_alloc_init(KCellularDownlinkIpPacketFilterStatus);
              objc_msgSend(a1, "addKCellularDownlinkIpPacketFilterStatus:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularDownlinkIpPacketFilterStatusReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            case 3986704:
              v18 = objc_alloc_init(KCellularDownlinkIpPacketDiscarded);
              objc_msgSend(a1, "addKCellularDownlinkIpPacketDiscarded:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularDownlinkIpPacketDiscardedReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            case 3986705:
              v18 = objc_alloc_init(KCellularServingCellRfBandHist);
              objc_msgSend(a1, "addKCellularServingCellRfBandHist:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularServingCellRfBandHistReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            case 3986706:
              v18 = objc_alloc_init(KCellularProtocolStackHist2);
              objc_msgSend(a1, "addKCellularProtocolStackStateHist2:", v18);
              goto LABEL_197;
            case 3986707:
              v18 = objc_alloc_init(KCellularProtocolStackState);
              objc_msgSend(a1, "addKCellularProtocolStackState:", v18);
              if (!PBReaderPlaceMark()
                || (KCellularProtocolStackStateReadFrom((uint64_t)v18, a2) & 1) == 0)
              {
                goto LABEL_223;
              }
              goto LABEL_211;
            default:
              switch((int)v17)
              {
                case 3987200:
                  v18 = objc_alloc_init(KCellularRrcModeHist);
                  objc_msgSend(a1, "addKCellularCdma1XRxDiversityHist:", v18);
                  goto LABEL_192;
                case 3987201:
                  v18 = objc_alloc_init(KCellularRrcModeHist);
                  objc_msgSend(a1, "addKCellularCdma1XServingCellRx0RssiHist:", v18);
                  goto LABEL_192;
                case 3987202:
                  v18 = objc_alloc_init(KCellularRrcModeHist);
                  objc_msgSend(a1, "addKCellularCdma1XServingCellRx1RssiHist:", v18);
                  goto LABEL_192;
                case 3987203:
                  v18 = objc_alloc_init(KCellularRrcModeHist);
                  objc_msgSend(a1, "addKCellularCdma1XServingCellRx0EcIoHist:", v18);
                  goto LABEL_192;
                case 3987204:
                  v18 = objc_alloc_init(KCellularRrcModeHist);
                  objc_msgSend(a1, "addKCellularCdma1XServingCellRx1EcIoHist:", v18);
                  goto LABEL_192;
                case 3987205:
                  v18 = objc_alloc_init(KCellularProtocolStackHist);
                  objc_msgSend(a1, "addKCellularCdma1XTxPowerHist:", v18);
                  goto LABEL_209;
                case 3987206:
                  v18 = objc_alloc_init(KCellularProtocolStackHist2);
                  objc_msgSend(a1, "addKCellularCdma1XProtocolStackStateHist:", v18);
                  goto LABEL_197;
                case 3987207:
                  v18 = objc_alloc_init(KCellularProtocolStackHist);
                  objc_msgSend(a1, "addKCellularCdma1XConnectionHist:", v18);
                  goto LABEL_209;
                case 3987208:
                  v18 = objc_alloc_init(KCellularCdma1XRrState);
                  objc_msgSend(a1, "addKCellularCdma1XRrState:", v18);
                  if (!PBReaderPlaceMark() || (KCellularCdma1XRrStateReadFrom((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_223;
                  goto LABEL_211;
                default:
                  switch((int)v17)
                  {
                    case 3987328:
                      v18 = objc_alloc_init(KCellularRrcModeHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoRxDiversityHist:", v18);
                      goto LABEL_192;
                    case 3987329:
                      v18 = objc_alloc_init(KCellularRrcModeHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoServingCellRx0RssiHist:", v18);
                      goto LABEL_192;
                    case 3987330:
                      v18 = objc_alloc_init(KCellularRrcModeHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoServingCellRx1RssiHist:", v18);
                      goto LABEL_192;
                    case 3987331:
                      v18 = objc_alloc_init(KCellularRrcModeHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoServingCellRx0EcIoHist:", v18);
                      goto LABEL_192;
                    case 3987332:
                      v18 = objc_alloc_init(KCellularRrcModeHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoServingCellRx1EcIoHist:", v18);
                      goto LABEL_192;
                    case 3987333:
                      v18 = objc_alloc_init(KCellularProtocolStackHist);
                      objc_msgSend(a1, "addKCellularCdmaEvdoTxPowerHist:", v18);
                      goto LABEL_209;
                    case 3987334:
                      v18 = objc_alloc_init(KCellularProtocolStackHist2);
                      objc_msgSend(a1, "addKCellularCdmaEvdoProtocolStackStateHist:", v18);
                      goto LABEL_197;
                    case 3987336:
                      v18 = objc_alloc_init(KCellularCdmaEvdoRrState);
                      objc_msgSend(a1, "addKCellularCdmaEvdoRrState:", v18);
                      if (!PBReaderPlaceMark()
                        || (KCellularCdmaEvdoRrStateReadFrom((uint64_t)v18, a2) & 1) == 0)
                      {
                        goto LABEL_223;
                      }
                      goto LABEL_211;
                    default:
                      goto LABEL_220;
                  }
              }
          }
        }
        switch((int)v17)
        {
          case 3986179:
            v18 = objc_alloc_init(KCellularLteFwDuplexMode);
            objc_msgSend(a1, "addKCellularLteFwDuplexMode:", v18);
            if (!PBReaderPlaceMark() || (KCellularLteFwDuplexModeReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          case 3986180:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularLteServingCellRsrpHist:", v18);
            goto LABEL_192;
          case 3986181:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularLteServingCellSinrHist:", v18);
            goto LABEL_192;
          case 3986182:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularLteSleepStateHist:", v18);
LABEL_192:
            if (!PBReaderPlaceMark() || (KCellularRrcModeHistReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          case 3986183:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteTxPowerHist:", v18);
            goto LABEL_209;
          case 3986184:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteDlSccStateHist:", v18);
            goto LABEL_209;
          case 3986185:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteUlSccStateHist:", v18);
            goto LABEL_209;
          case 3986186:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteAdvancedRxStateHist:", v18);
            goto LABEL_209;
          case 3986187:
            v18 = objc_alloc_init(KCellularLteComponentCarrierInfo);
            objc_msgSend(a1, "addKCellularLteComponentCarrierInfo:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularLteComponentCarrierInfoReadFrom((char *)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3986188:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteRxTxStateHist:", v18);
            goto LABEL_209;
          case 3986189:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularLteTotalDlTbsHist:", v18);
LABEL_209:
            if (PBReaderPlaceMark() && (KCellularProtocolStackHistReadFrom((uint64_t)v18, a2) & 1) != 0)
              goto LABEL_211;
            goto LABEL_223;
          case 3986190:
          case 3986191:
          case 3986192:
          case 3986193:
          case 3986194:
          case 3986195:
          case 3986198:
          case 3986199:
            goto LABEL_220;
          case 3986196:
            v18 = objc_alloc_init(KCellularLteDataInactivityBeforeIdle);
            objc_msgSend(a1, "addKCellularLteDataInactivityBeforeIdle:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularLteDataInactivityBeforeIdleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3986197:
            v18 = objc_alloc_init(KCellularLteIdleToConnectedUserData);
            objc_msgSend(a1, "addKCellularLteIdleToConnectedUserData:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularLteIdleToConnectedUserDataReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3986200:
            v18 = objc_alloc_init(KCellularProtocolStackHistArray);
            objc_msgSend(a1, "addKCellularLteDlSccStateHistV3:", v18);
            goto LABEL_157;
          case 3986201:
            v18 = objc_alloc_init(KCellularProtocolStackHistArray);
            objc_msgSend(a1, "addKCellularLteRxDiversityHist:", v18);
LABEL_157:
            if (!PBReaderPlaceMark()
              || (KCellularProtocolStackHistArrayReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3986202:
            v18 = objc_alloc_init(KCellularProtocolStackHist2);
            objc_msgSend(a1, "addKCellularLtePdcchStateHist:", v18);
LABEL_197:
            if (!PBReaderPlaceMark() || (KCellularProtocolStackHist2ReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          default:
            if ((_DWORD)v17 != 3985948)
              goto LABEL_220;
            v18 = objc_alloc_init(KCellularTdsL1State);
            objc_msgSend(a1, "addKCellularTdsL1State:", v18);
            if (!PBReaderPlaceMark() || (KCellularTdsL1StateReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
        }
      }
      if ((int)v17 > 3985669)
      {
        switch((int)v17)
        {
          case 3985670:
            v18 = objc_alloc_init(KCellularWcdmaCpcStat);
            objc_msgSend(a1, "addKCellularWcdmaCpcStat:", v18);
            if (!PBReaderPlaceMark() || (KCellularWcdmaCpcStatReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          case 3985671:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularWcdmaRxDiversityHist:", v18);
            goto LABEL_192;
          case 3985672:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularWcdmaServingCellRx0RssiHist:", v18);
            goto LABEL_192;
          case 3985673:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularWcdmaServingCellRx1RssiHist:", v18);
            goto LABEL_192;
          case 3985674:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularWcdmaServingCellRx0EcNoHist:", v18);
            goto LABEL_192;
          case 3985675:
            v18 = objc_alloc_init(KCellularRrcModeHist);
            objc_msgSend(a1, "addKCellularWcdmaServingCellRx1EcNoHist:", v18);
            goto LABEL_192;
          case 3985676:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaTxPowerHist:", v18);
            goto LABEL_209;
          case 3985677:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaReceiverStatusOnC0Hist:", v18);
            goto LABEL_209;
          case 3985678:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaReceiverStatusOnC1Hist:", v18);
            goto LABEL_209;
          case 3985679:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaCarrierStatusHist:", v18);
            goto LABEL_209;
          case 3985680:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaRabModeHist:", v18);
            goto LABEL_209;
          case 3985681:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaRabTypeHist:", v18);
            goto LABEL_209;
          case 3985682:
            v18 = objc_alloc_init(KCellularWcdmaRrcConnectionState);
            objc_msgSend(a1, "addKCellularWcdmaRrcConnectionState:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaRrcConnectionStateReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3985683:
            v18 = objc_alloc_init(KCellularWcdmaRrcConfiguration);
            objc_msgSend(a1, "addKCellularWcdmaRrcConfiguration:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaRrcConfigurationReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3985684:
            v18 = objc_alloc_init(KCellularWcdmaRabStatus);
            objc_msgSend(a1, "addKCellularWcdmaRabStatus:", v18);
            if (!PBReaderPlaceMark() || (KCellularWcdmaRabStatusReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          case 3985685:
            v18 = objc_alloc_init(KCellularWcdmaL1State);
            objc_msgSend(a1, "addKCellularWcdmaL1State:", v18);
            if (!PBReaderPlaceMark() || (KCellularWcdmaL1StateReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          case 3985686:
            v18 = objc_alloc_init(KCellularWcdmaDataInactivityBeforeIdle);
            objc_msgSend(a1, "addKCellularWcdmaDataInactivityBeforeIdle:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaDataInactivityBeforeIdleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3985687:
            v18 = objc_alloc_init(KCellularWcdmaIdleToConnectedUserData);
            objc_msgSend(a1, "addKCellularWcdmaIdleToConnectedUserData:", v18);
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaIdleToConnectedUserDataReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_223;
            }
            goto LABEL_211;
          case 3985688:
          case 3985689:
            goto LABEL_220;
          case 3985690:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularWcdmaVadHist:", v18);
            goto LABEL_209;
          default:
            switch((int)v17)
            {
              case 3985926:
                v18 = objc_alloc_init(KCellularRrcModeHist);
                objc_msgSend(a1, "addKCellularTdsRxDiversityHist:", v18);
                goto LABEL_192;
              case 3985927:
                v18 = objc_alloc_init(KCellularRrcModeHist);
                objc_msgSend(a1, "addKCellularTdsServingCellRx0RssiHist:", v18);
                goto LABEL_192;
              case 3985928:
                v18 = objc_alloc_init(KCellularRrcModeHist);
                objc_msgSend(a1, "addKCellularTdsServingCellRx1RssiHist:", v18);
                goto LABEL_192;
              case 3985929:
                v18 = objc_alloc_init(KCellularRrcModeHist);
                objc_msgSend(a1, "addKCellularTdsServingCellRx0RscpHist:", v18);
                goto LABEL_192;
              case 3985930:
                v18 = objc_alloc_init(KCellularRrcModeHist);
                objc_msgSend(a1, "addKCellularTdsServingCellRx1RscpHist:", v18);
                goto LABEL_192;
              case 3985931:
                v18 = objc_alloc_init(KCellularProtocolStackHist);
                objc_msgSend(a1, "addKCellularTdsTxPowerHist:", v18);
                goto LABEL_209;
              case 3985941:
                v18 = objc_alloc_init(KCellularProtocolStackHist);
                objc_msgSend(a1, "addKCellularTdsRabModeHist:", v18);
                goto LABEL_209;
              case 3985942:
                v18 = objc_alloc_init(KCellularProtocolStackHist);
                objc_msgSend(a1, "addKCellularTdsRabTypeHist:", v18);
                goto LABEL_209;
              default:
                goto LABEL_220;
            }
        }
      }
      if ((int)v17 <= 3952137)
        break;
      if ((int)v17 > 3973383)
      {
        switch((int)v17)
        {
          case 3985412:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularGsmServingCellRssiHist:", v18);
            goto LABEL_209;
          case 3985413:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularGsmServingCellSnrHist:", v18);
            goto LABEL_209;
          case 3985414:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularGsmTxPowerHist:", v18);
            goto LABEL_209;
          case 3985415:
            v18 = objc_alloc_init(KCellularProtocolStackHist);
            objc_msgSend(a1, "addKCellularGsmConnectedModeHist:", v18);
            goto LABEL_209;
          case 3985416:
            v18 = objc_alloc_init(KCellularGsmL1State);
            objc_msgSend(a1, "addKCellularGsmL1State:", v18);
            if (!PBReaderPlaceMark() || (KCellularGsmL1StateReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_223;
            goto LABEL_211;
          default:
            if ((_DWORD)v17 == 3973384)
            {
              v18 = objc_alloc_init(KCellularLqmStateChange);
              objc_msgSend(a1, "addKCellularLqmStateChange:", v18);
              if (!PBReaderPlaceMark() || (KCellularLqmStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_223;
            }
            else
            {
              if ((_DWORD)v17 != 3973391)
                goto LABEL_220;
              v18 = objc_alloc_init(KCellularServingCellLost);
              objc_msgSend(a1, "addKCellularServiceLost:", v18);
              if (!PBReaderPlaceMark() || (KCellularServingCellLostReadFrom((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_223;
            }
            break;
        }
        goto LABEL_211;
      }
      if ((int)v17 > 3952164)
      {
        if ((_DWORD)v17 == 3952165)
        {
          v18 = objc_alloc_init(KCellularLteRadioLinkFailure);
          objc_msgSend(a1, "addKCellularLteRadioLinkFailure:", v18);
          if (!PBReaderPlaceMark() || (KCellularLteRadioLinkFailureReadFrom((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_223:

            return 0;
          }
          goto LABEL_211;
        }
        if ((_DWORD)v17 == 3952496)
        {
          v18 = objc_alloc_init(KCellularLtePdcchStateStats);
          objc_msgSend(a1, "addKCellularLtePdcchStateStats:", v18);
          if (!PBReaderPlaceMark() || (KCellularLtePdcchStateStatsReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_223;
          goto LABEL_211;
        }
      }
      else
      {
        if ((_DWORD)v17 == 3952138)
        {
          v18 = objc_alloc_init(KCellularLtePagingCycle);
          objc_msgSend(a1, "addKCellularLtePagingCycle:", v18);
          if (!PBReaderPlaceMark() || (KCellularLtePagingCycleReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_223;
          goto LABEL_211;
        }
        if ((_DWORD)v17 == 3952152)
        {
          v18 = objc_alloc_init(KCellularLteCdrxConfig);
          objc_msgSend(a1, "addKCellularLteCdrxConfig:", v18);
          if (!PBReaderPlaceMark() || (KCellularLteCdrxConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_223;
          goto LABEL_211;
        }
      }
LABEL_220:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_212:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    switch((int)v17)
    {
      case 3932163:
        v18 = objc_alloc_init(KCellularPerClientProfileTriggerCount);
        objc_msgSend(a1, "addKCellularPerClientProfileTriggerCount:", v18);
        if (!PBReaderPlaceMark()
          || (KCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_223;
        }
        break;
      case 3932164:
      case 3932165:
      case 3932166:
      case 3932167:
      case 3932168:
      case 3932169:
      case 3932170:
      case 3932171:
      case 3932172:
      case 3932173:
      case 3932174:
      case 3932175:
      case 3932179:
        goto LABEL_220;
      case 3932176:
        v18 = objc_alloc_init(KCellularProtocolStackCpuStats);
        objc_msgSend(a1, "addKCellularProtocolStackCpuStats:", v18);
        if (!PBReaderPlaceMark() || (KCellularProtocolStackCpuStatsReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_223;
        break;
      case 3932177:
        v18 = objc_alloc_init(KCellularPeripheralStats);
        objc_msgSend(a1, "addKCellularPeripheralStats:", v18);
        if (!PBReaderPlaceMark() || (KCellularPeripheralStatsReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_223;
        break;
      case 3932178:
        v18 = objc_alloc_init(KCellularPmicHwStats);
        objc_msgSend(a1, "addKCellularDvfsStats:", v18);
        goto LABEL_134;
      case 3932180:
        v18 = objc_alloc_init(KCellularPmicHwStats);
        objc_msgSend(a1, "addKCellularLteWcdmaGsmHwStats:", v18);
        goto LABEL_134;
      case 3932181:
        v18 = objc_alloc_init(KCellularPmicHwStats);
        objc_msgSend(a1, "addKCellularLteTdsGsmHwStats:", v18);
        goto LABEL_134;
      case 3932182:
        v18 = objc_alloc_init(KCellularPmuAverageCurrent);
        objc_msgSend(a1, "addKCellularPmuAverageCurrent:", v18);
        if (!PBReaderPlaceMark() || (KCellularPmuAverageCurrentReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_223;
        break;
      case 3932183:
        v18 = objc_alloc_init(KCellularFwCoreStats);
        objc_msgSend(a1, "addKCellularFwCoreStats:", v18);
        if (!PBReaderPlaceMark() || (KCellularFwCoreStatsReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_223;
        break;
      case 3932184:
        v18 = objc_alloc_init(KCellularPmicHwStats);
        objc_msgSend(a1, "addKCellularLteWcdmaTdsHwStats:", v18);
        goto LABEL_134;
      case 3932185:
        v18 = objc_alloc_init(KCellularPmicHwStats);
        objc_msgSend(a1, "addKCellularPmicHwStats:", v18);
LABEL_134:
        if (!PBReaderPlaceMark() || (KCellularPmicHwStatsReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_223;
        break;
      default:
        if ((_DWORD)v17 == 3945603)
        {
          v18 = objc_alloc_init(KCellularTdsRrcState);
          objc_msgSend(a1, "addKCellularTdsRrcState:", v18);
          if (!PBReaderPlaceMark() || (KCellularTdsRrcStateReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_223;
        }
        else
        {
          if ((_DWORD)v17 != 3952132)
            goto LABEL_220;
          v18 = objc_alloc_init(KCellularLteRrcState);
          objc_msgSend(a1, "addKCellularLteRrcState:", v18);
          if (!PBReaderPlaceMark() || (KCellularLteRrcStateReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_223;
        }
        break;
    }
LABEL_211:
    PBReaderRecallMark();

    goto LABEL_212;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL PStatReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___PStat__ident;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___PStat__ident;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___PStat__ident;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___PStat__activeDurMs;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___PStat__activeDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___PStat__activeDurMs;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___PStat__inactiveDurMs;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___PStat__inactiveDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___PStat__inactiveDurMs;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___PStat__toActiveCount;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___PStat__toActiveCount;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___PStat__toActiveCount;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___PStat__sleepBlockCount;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___PStat__sleepBlockCount;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___PStat__sleepBlockCount;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularTdsRrcStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 32) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_58;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_60:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 8u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_68:
              v45 = 24;
              goto LABEL_77;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 2u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_72:
              v45 = 16;
              goto LABEL_77;
            case 4u:
              v39 = 0;
              v40 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 4u;
              while (2)
              {
                v41 = *v3;
                v42 = *(_QWORD *)(a2 + v41);
                if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                  *(_QWORD *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_76:
              v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_62;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_64:
                v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_78:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB067EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void NotificationCallback(uint64_t a1, void *a2)
{
  NSObject *v2;
  _QWORD block[5];
  _QWORD v4[5];
  id v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x3032000000;
  v4[3] = __Block_byref_object_copy_;
  v4[4] = __Block_byref_object_dispose_;
  v5 = a2;
  dispatch_get_global_queue(-2, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __NotificationCallback_block_invoke;
  block[3] = &unk_1E8578CE8;
  block[4] = v4;
  dispatch_async(v2, block);

  _Block_object_dispose(v4, 8);
}

uint64_t AWDMETRICSCellularDynamicRatSelectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  unint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = 0x1EF995000uLL;
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_12;
        v19 += 7;
        v25 = v20++ >= 9;
        if (v25)
        {
          v21 = 0;
          v26 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v26 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v21 = 0;
LABEL_14:
      if (v26 || (v21 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v28 = v21 >> 3;
      if ((int)(v21 >> 3) <= 16)
      {
        switch((_DWORD)v28)
        {
          case 1:
            v70 = 0;
            v71 = 0;
            v72 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 1u;
            while (1)
            {
              v73 = *v3;
              v74 = *(_QWORD *)(a2 + v73);
              if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
                break;
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v72 |= (unint64_t)(v75 & 0x7F) << v70;
              if ((v75 & 0x80) == 0)
                goto LABEL_128;
              v70 += 7;
              v25 = v71++ >= 9;
              if (v25)
              {
                v72 = 0;
                goto LABEL_130;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_128:
            if (*(_BYTE *)(a2 + *v5))
              v72 = 0;
LABEL_130:
            *(_QWORD *)(a1 + *(int *)(v9 + 2164)) = v72;
            continue;
          case 4:
            v76 = 0;
            v77 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x40u;
            while (1)
            {
              v78 = *v3;
              v79 = *(_QWORD *)(a2 + v78);
              if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
                break;
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v31 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_132;
              v76 += 7;
              v25 = v77++ >= 9;
              if (v25)
              {
                LODWORD(v31) = 0;
                goto LABEL_134;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_132:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_134:
            v88 = *(int *)(v10 + 2168);
            break;
          case 5:
            v35 = 0;
            v36 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 8u;
            while (1)
            {
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                break;
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v31 |= (unint64_t)(v39 & 0x7F) << v35;
              if ((v39 & 0x80) == 0)
                goto LABEL_100;
              v35 += 7;
              v25 = v36++ >= 9;
              if (v25)
              {
                LODWORD(v31) = 0;
                goto LABEL_102;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_100:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_102:
            v88 = *(int *)(v11 + 2172);
            break;
          default:
LABEL_93:
            v81 = v9;
            v82 = v10;
            v83 = v11;
            v84 = v7;
            v85 = v12;
            v86 = a1;
            result = PBReaderSkipValueWithTag();
            v13 = 0x1EF995000;
            a1 = v86;
            v14 = 0x1EF995000;
            v5 = (int *)MEMORY[0x1E0D82BC8];
            v12 = v85;
            v15 = 0x1EF995000;
            v7 = v84;
            v16 = 0x1EF995000;
            v11 = v83;
            v17 = 0x1EF995000;
            v10 = v82;
            v18 = 0x1EF995000;
            v9 = v81;
            if (!(_DWORD)result)
              return result;
            continue;
        }
      }
      else
      {
        switch((int)v28)
        {
          case 17:
            v29 = 0;
            v30 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x20u;
            while (2)
            {
              v32 = *v3;
              v33 = *(_QWORD *)(a2 + v32);
              if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
                *(_QWORD *)(a2 + v32) = v33 + 1;
                v31 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  v25 = v30++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_98:
            v88 = *(int *)(v12 + 2176);
            goto LABEL_135;
          case 18:
            v40 = 0;
            v41 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x10u;
            while (2)
            {
              v42 = *v3;
              v43 = *(_QWORD *)(a2 + v42);
              if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
                *(_QWORD *)(a2 + v42) = v43 + 1;
                v31 |= (unint64_t)(v44 & 0x7F) << v40;
                if (v44 < 0)
                {
                  v40 += 7;
                  v25 = v41++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_106:
            v88 = *(int *)(v13 + 2180);
            goto LABEL_135;
          case 19:
            v45 = 0;
            v46 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 4u;
            while (2)
            {
              v47 = *v3;
              v48 = *(_QWORD *)(a2 + v47);
              if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v48);
                *(_QWORD *)(a2 + v47) = v48 + 1;
                v31 |= (unint64_t)(v49 & 0x7F) << v45;
                if (v49 < 0)
                {
                  v45 += 7;
                  v25 = v46++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_110:
            v88 = *(int *)(v14 + 2184);
            goto LABEL_135;
          case 20:
            v50 = 0;
            v51 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 2u;
            while (2)
            {
              v52 = *v3;
              v53 = *(_QWORD *)(a2 + v52);
              if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v53);
                *(_QWORD *)(a2 + v52) = v53 + 1;
                v31 |= (unint64_t)(v54 & 0x7F) << v50;
                if (v54 < 0)
                {
                  v50 += 7;
                  v25 = v51++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_114:
            v88 = *(int *)(v15 + 2188);
            goto LABEL_135;
          case 23:
            v55 = 0;
            v56 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x200u;
            while (2)
            {
              v57 = *v3;
              v58 = *(_QWORD *)(a2 + v57);
              if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
                *(_QWORD *)(a2 + v57) = v58 + 1;
                v31 |= (unint64_t)(v59 & 0x7F) << v55;
                if (v59 < 0)
                {
                  v55 += 7;
                  v25 = v56++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_118:
            v88 = *(int *)(v16 + 2192);
            goto LABEL_135;
          case 24:
            v60 = 0;
            v61 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x100u;
            while (2)
            {
              v62 = *v3;
              v63 = *(_QWORD *)(a2 + v62);
              if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v63);
                *(_QWORD *)(a2 + v62) = v63 + 1;
                v31 |= (unint64_t)(v64 & 0x7F) << v60;
                if (v64 < 0)
                {
                  v60 += 7;
                  v25 = v61++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_122;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_122:
            v88 = *(int *)(v17 + 2196);
            goto LABEL_135;
          case 31:
            v65 = 0;
            v66 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2160)) |= 0x80u;
            break;
          default:
            goto LABEL_93;
        }
        while (1)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            break;
          v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
          *(_QWORD *)(a2 + v67) = v68 + 1;
          v31 |= (unint64_t)(v69 & 0x7F) << v65;
          if ((v69 & 0x80) == 0)
            goto LABEL_124;
          v65 += 7;
          v25 = v66++ >= 9;
          if (v25)
          {
            LODWORD(v31) = 0;
            goto LABEL_126;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_124:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v31) = 0;
LABEL_126:
        v88 = *(int *)(v18 + 2200);
      }
LABEL_135:
      *(_DWORD *)(a1 + v88) = v31;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrRadioStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  AWDMETRICSBwpStats *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 13)
      {
        if ((_DWORD)v17 == 14)
        {
          v31 = 0;
          v32 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v21 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              goto LABEL_58;
            v31 += 7;
            v14 = v32++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_60;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_60:
          v37 = 28;
        }
        else
        {
          if ((_DWORD)v17 != 47)
          {
LABEL_47:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_50;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_52:
          v37 = 24;
        }
        *(_DWORD *)(a1 + v37) = v21;
      }
      else if ((_DWORD)v17 == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_54;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v27 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_56:
        *(_QWORD *)(a1 + 8) = v27;
      }
      else
      {
        if ((_DWORD)v17 != 3)
          goto LABEL_47;
        v18 = objc_alloc_init(AWDMETRICSBwpStats);
        objc_msgSend((id)a1, "addBwpInfo:", v18);
        if (!PBReaderPlaceMark() || !AWDMETRICSBwpStatsReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL CStatReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CStat__ident;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___CStat__ident;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___CStat__ident;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CStat__sleepDurMs;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___CStat__sleepDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___CStat__sleepDurMs;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CStat__idleDurMs;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___CStat__idleDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___CStat__idleDurMs;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CStat__activeDurMs;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___CStat__activeDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___CStat__activeDurMs;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___CStat__sleepEntryCount;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___CStat__sleepEntryCount;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___CStat__sleepEntryCount;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularWcdmaRrcConnectionStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 32) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_58;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_60:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 8u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_68:
              v45 = 24;
              goto LABEL_77;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 2u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_72:
              v45 = 16;
              goto LABEL_77;
            case 4u:
              v39 = 0;
              v40 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 4u;
              while (2)
              {
                v41 = *v3;
                v42 = *(_QWORD *)(a2 + v41);
                if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                  *(_QWORD *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_76:
              v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_62;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_64:
                v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_78:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHist2ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t result;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  HistogramBin *v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_55:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_69;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_59:
        v41 = 28;
        goto LABEL_68;
      case 3u:
        v29 = 0;
        v30 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 36) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_63:
        v41 = 32;
        goto LABEL_68;
      case 6u:
        v35 = 0;
        v36 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_67:
        v41 = 24;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        v40 = objc_alloc_init(HistogramBin);
        objc_msgSend((id)a1, "addBin:", v40);
        if (PBReaderPlaceMark() && HistogramBinReadFrom((uint64_t)v40, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_69;
    }
  }
}

id PLLogScreenState()
{
  if (qword_1ED882568 != -1)
    dispatch_once(&qword_1ED882568, &__block_literal_global_9);
  return (id)qword_1ED882560;
}

void sub_1CB089464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB08A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularPeripheralStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  PStat *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(PStat);
        objc_msgSend((id)a1, "addPeripherals:", v24);
        if (!PBReaderPlaceMark() || !PStatReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 16) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB093954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaRrcConfigurationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t result;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 28) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_58;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_60:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_79;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 28) |= 2u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_68:
              v47 = 16;
              goto LABEL_69;
            case 3u:
              v34 = 0;
              v35 = 0;
              v36 = 0;
              *(_BYTE *)(a1 + 28) |= 0x10u;
              while (2)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
                  *(_QWORD *)(a2 + v37) = v38 + 1;
                  v36 |= (unint64_t)(v39 & 0x7F) << v34;
                  if (v39 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      v36 = 0;
                      goto LABEL_73;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v36 = 0;
LABEL_73:
              v48 = v36 != 0;
              v49 = 25;
              goto LABEL_78;
            case 4u:
              v40 = 0;
              v41 = 0;
              v42 = 0;
              *(_BYTE *)(a1 + 28) |= 8u;
              while (2)
              {
                v43 = *v3;
                v44 = *(_QWORD *)(a2 + v43);
                if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
                  *(_QWORD *)(a2 + v43) = v44 + 1;
                  v42 |= (unint64_t)(v45 & 0x7F) << v40;
                  if (v45 < 0)
                  {
                    v40 += 7;
                    v14 = v41++ >= 9;
                    if (v14)
                    {
                      v42 = 0;
                      goto LABEL_77;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v42 = 0;
LABEL_77:
              v48 = v42 != 0;
              v49 = 24;
LABEL_78:
              *(_BYTE *)(a1 + v49) = v48;
              goto LABEL_79;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 28) |= 4u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_62;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_64:
                v47 = 20;
LABEL_69:
                *(_DWORD *)(a1 + v47) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_79:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB09DFC4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1CB09EA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaDataInactivityBeforeIdleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularGsmL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularFwCoreStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  GeraStats *v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_48;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_50;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_50:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_55;
      case 2u:
        v23 = objc_alloc_init(GeraStats);
        objc_storeStrong((id *)(a1 + 24), v23);
        if (!PBReaderPlaceMark() || (GeraStatsReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_57;
        goto LABEL_37;
      case 3u:
        v23 = objc_alloc_init(UtraFddStats);
        objc_storeStrong((id *)(a1 + 40), v23);
        if (!PBReaderPlaceMark() || (UtraFddStatsReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_57;
        goto LABEL_37;
      case 4u:
        v23 = objc_alloc_init(UtraTddStats);
        objc_storeStrong((id *)(a1 + 48), v23);
        if (!PBReaderPlaceMark() || (UtraTddStatsReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_57;
        goto LABEL_37;
      case 5u:
        v23 = objc_alloc_init(EutraStats);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (PBReaderPlaceMark() && (EutraStatsReadFrom((uint64_t)v23, a2) & 1) != 0)
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 0xFu:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 32) = v27;
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t AWDMETRICSCellularPowerLogNRDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogSiri()
{
  if (qword_1ED882730 != -1)
    dispatch_once(&qword_1ED882730, &__block_literal_global_12);
  return (id)_MergedGlobals_1_13;
}

uint64_t KCellularServingCellLostReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogMDNS()
{
  if (qword_1ED882748 != -1)
    dispatch_once(&qword_1ED882748, &__block_literal_global_13);
  return (id)qword_1ED882740;
}

void sub_1CB0ADF7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB0AE2B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB0AE9B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB0B40F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CB0B44F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB0B6BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1CB0B79C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t UtraTddStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = 0x1EF995000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    v20 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x10u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_141;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              LODWORD(v32) = 0;
              goto LABEL_143;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_141:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_143:
          v124 = *(int *)(v8 + 2540);
          goto LABEL_204;
        case 2u:
          v43 = 0;
          v44 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 2u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v32 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_147:
          v124 = *(int *)(v10 + 2544);
          goto LABEL_204;
        case 3u:
          v48 = 0;
          v49 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x20u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v32 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v27 = v49++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_151:
          v124 = *(int *)(v11 + 2548);
          goto LABEL_204;
        case 4u:
          v53 = 0;
          v54 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 8u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v32 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v27 = v54++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_155:
          v124 = *(int *)(v12 + 2552);
          goto LABEL_204;
        case 5u:
          v58 = 0;
          v59 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 4u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v32 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v27 = v59++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_159:
          v124 = *(int *)(v13 + 2556);
          goto LABEL_204;
        case 6u:
          v63 = 0;
          v64 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x200u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v32 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v27 = v64++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_163:
          v124 = *(int *)(v14 + 2560);
          goto LABEL_204;
        case 7u:
          v68 = 0;
          v69 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x400u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v32 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                v27 = v69++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_167;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_167:
          v124 = *(int *)(v15 + 2564);
          goto LABEL_204;
        case 8u:
          v73 = 0;
          v74 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x100u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v32 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v27 = v74++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_171;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_171:
          v124 = *(int *)(v16 + 2568);
          goto LABEL_204;
        case 9u:
          v78 = 0;
          v79 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x800u;
          while (2)
          {
            v80 = *v3;
            v81 = *(_QWORD *)(a2 + v80);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v32 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                v27 = v79++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_175:
          v124 = *(int *)(v17 + 2572);
          goto LABEL_204;
        case 0xAu:
          v83 = 0;
          v84 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x1000u;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v86);
              *(_QWORD *)(a2 + v85) = v86 + 1;
              v32 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                v27 = v84++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_179:
          v124 = *(int *)(v18 + 2576);
          goto LABEL_204;
        case 0xBu:
          v88 = 0;
          v89 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x2000u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v32 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                v27 = v89++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_183:
          v124 = *(int *)(v19 + 2580);
          goto LABEL_204;
        case 0xCu:
          v93 = 0;
          v94 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x4000u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v32 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                v27 = v94++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_187:
          v124 = *(int *)(v20 + 2584);
          goto LABEL_204;
        case 0xDu:
          v98 = 0;
          v99 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x8000u;
          while (2)
          {
            v100 = *v3;
            v101 = *(_QWORD *)(a2 + v100);
            if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v101);
              *(_QWORD *)(a2 + v100) = v101 + 1;
              v32 |= (unint64_t)(v102 & 0x7F) << v98;
              if (v102 < 0)
              {
                v98 += 7;
                v27 = v99++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_191;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_191:
          v124 = 72;
          goto LABEL_204;
        case 0xEu:
          v103 = 0;
          v104 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x10000u;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v32 |= (unint64_t)(v107 & 0x7F) << v103;
              if (v107 < 0)
              {
                v103 += 7;
                v27 = v104++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_195;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_195:
          v124 = 76;
          goto LABEL_204;
        case 0xFu:
          v108 = 0;
          v109 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x40u;
          while (2)
          {
            v110 = *v3;
            v111 = *(_QWORD *)(a2 + v110);
            if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v111);
              *(_QWORD *)(a2 + v110) = v111 + 1;
              v32 |= (unint64_t)(v112 & 0x7F) << v108;
              if (v112 < 0)
              {
                v108 += 7;
                v27 = v109++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_199;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_199:
          v124 = 36;
          goto LABEL_204;
        case 0x10u:
          v113 = 0;
          v114 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 0x80u;
          while (2)
          {
            v115 = *v3;
            v116 = *(_QWORD *)(a2 + v115);
            if (v116 == -1 || v116 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v117 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v116);
              *(_QWORD *)(a2 + v115) = v116 + 1;
              v32 |= (unint64_t)(v117 & 0x7F) << v113;
              if (v117 < 0)
              {
                v113 += 7;
                v27 = v114++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_203;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_203:
          v124 = 40;
LABEL_204:
          *(_DWORD *)(a1 + v124) = v32;
          continue;
        case 0x11u:
          v118 = 0;
          v119 = 0;
          v120 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2536)) |= 1u;
          break;
        default:
          v36 = v8;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x1EF995000;
          v13 = 0x1EF995000;
          a1 = v41;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = 0x1EF995000;
          v11 = v39;
          v16 = 0x1EF995000;
          v7 = v38;
          v18 = 0x1EF995000;
          v10 = v37;
          v17 = 0x1EF995000;
          v8 = v36;
          v19 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v121 = *v3;
        v122 = *(_QWORD *)(a2 + v121);
        if (v122 == -1 || v122 >= *(_QWORD *)(a2 + *v4))
          break;
        v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v122);
        *(_QWORD *)(a2 + v121) = v122 + 1;
        v120 |= (unint64_t)(v123 & 0x7F) << v118;
        if ((v123 & 0x80) == 0)
          goto LABEL_208;
        v118 += 7;
        v27 = v119++ >= 9;
        if (v27)
        {
          v120 = 0;
          goto LABEL_210;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_208:
      if (*(_BYTE *)(a2 + *v5))
        v120 = 0;
LABEL_210:
      *(_QWORD *)(a1 + 8) = v120;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB0BFDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  id *v36;

  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PLLogSoC()
{
  if (qword_1ED8868A0 != -1)
    dispatch_once(&qword_1ED8868A0, &__block_literal_global_17);
  return (id)_MergedGlobals_85;
}

id logPPSFeatureFlagReaderHelper()
{
  if (qword_1ED8868B0 != -1)
    dispatch_once(&qword_1ED8868B0, &__block_literal_global_18);
  return (id)_MergedGlobals_86;
}

void __logPPSFeatureFlagReaderHelper_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.powerlog", "PPSFeatureFlagReaderHelper");
  v1 = (void *)_MergedGlobals_86;
  _MergedGlobals_86 = (uint64_t)v0;

}

void sub_1CB0C6098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BluetoothSessionEvent(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  int v13;
  int v14;

  v7 = a4;
  objc_msgSend(v7, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __BluetoothSessionEvent_block_invoke;
  block[3] = &unk_1E857A260;
  v11 = v7;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v9 = v7;
  dispatch_async(v8, block);

}

void BluetoothDeviceEvent(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  int v13;
  int v14;

  v7 = a4;
  objc_msgSend(v7, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __BluetoothDeviceEvent_block_invoke;
  block[3] = &unk_1E857A260;
  v11 = v7;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v9 = v7;
  dispatch_async(v8, block);

}

void sub_1CB0CDA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CB0D143C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x470], 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularLteIdleToConnectedUserDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if ((_DWORD)v17 == 3)
        {
          PBReaderReadData();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v36;

        }
        else
        {
          if ((_DWORD)v17 != 15)
          {
LABEL_45:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0)
              goto LABEL_52;
            v24 += 7;
            v14 = v25++ >= 9;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_54;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_54:
          *(_DWORD *)(a1 + 16) = v26;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
            goto LABEL_56;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_58:
        *(_QWORD *)(a1 + 8) = v32;
      }
      else
      {
        if ((_DWORD)v17 != 2)
          goto LABEL_45;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_48;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_50;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_50:
        *(_BYTE *)(a1 + 32) = v20 != 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void PowerChangedCallback(void *a1, uint64_t a2, uint64_t a3, intptr_t a4)
{
  id v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  id obj;
  id v55;
  _QWORD v56[5];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[5];
  _QWORD v62[7];
  _QWORD v63[5];
  _QWORD v64[5];
  _QWORD block[5];
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  id v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint8_t v74[128];
  uint8_t v75[4];
  void *v76;
  __int128 buf;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t);
  id v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v67 = &v66;
  v68 = 0x3032000000;
  v69 = __Block_byref_object_copy__6;
  v70 = __Block_byref_object_dispose__6;
  v6 = a1;
  v71 = v6;
  HIDWORD(v7) = a3;
  LODWORD(v7) = a3 + 536870288;
  switch((v7 >> 4))
  {
    case 0u:
      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v8 = objc_opt_class();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __PowerChangedCallback_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        block[4] = v8;
        if (qword_1ED882E98 != -1)
          dispatch_once(&qword_1ED882E98, block);
        if (byte_1ED882DC2)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep: start listening"));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "lastPathComponent");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PowerChangedCallback");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "logMessage:fromFile:fromFunction:fromLineNumber:", v9, v12, v13, 1126);

          PLLogCommon();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v9;
            _os_log_debug_impl(&dword_1CAF47000, v14, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }

        }
      }
      objc_msgSend((id)v67[5], "canSleepSemaphore");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "signalStartListening");

      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v16 = objc_opt_class();
        v64[0] = MEMORY[0x1E0C809B0];
        v64[1] = 3221225472;
        v64[2] = __PowerChangedCallback_block_invoke_394;
        v64[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v64[4] = v16;
        if (qword_1ED882EA0 != -1)
          dispatch_once(&qword_1ED882EA0, v64);
        if (byte_1ED882DC3)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep: log entry"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "lastPathComponent");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PowerChangedCallback");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "logMessage:fromFile:fromFunction:fromLineNumber:", v17, v20, v21, 1128);

          PLLogCommon();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v17;
            _os_log_debug_impl(&dword_1CAF47000, v22, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }

        }
      }
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v78 = 0x3032000000;
      v79 = __Block_byref_object_copy__6;
      v80 = __Block_byref_object_dispose__6;
      v81 = -[PLEventForwardPowerStateEntry initEntryWithIOMessage:]([PLEventForwardPowerStateEntry alloc], "initEntryWithIOMessage:", a3);
      objc_msgSend((id)v67[5], "logEntry:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40));
      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v23 = objc_opt_class();
        v63[0] = MEMORY[0x1E0C809B0];
        v63[1] = 3221225472;
        v63[2] = __PowerChangedCallback_block_invoke_399;
        v63[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v63[4] = v23;
        if (qword_1ED882EA8 != -1)
          dispatch_once(&qword_1ED882EA8, v63);
        if (byte_1ED882DC4)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep: begin block entry.id=%lld"), objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "entryID"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "lastPathComponent");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PowerChangedCallback");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "logMessage:fromFile:fromFunction:fromLineNumber:", v24, v27, v28, 1131);

          PLLogCommon();
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v75 = 138412290;
            v76 = v24;
            _os_log_debug_impl(&dword_1CAF47000, v29, OS_LOG_TYPE_DEBUG, "%@", v75, 0xCu);
          }

        }
      }
      objc_msgSend((id)v67[5], "canSleepSemaphore");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = MEMORY[0x1E0C809B0];
      v62[0] = MEMORY[0x1E0C809B0];
      v62[1] = 3221225472;
      v62[2] = __PowerChangedCallback_block_invoke_402;
      v62[3] = &unk_1E857AB20;
      v62[4] = &v66;
      v62[5] = &buf;
      v62[6] = a4;
      objc_msgSend(v30, "waitWithBlock:", v62);

      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v61[0] = v31;
        v61[1] = 3221225472;
        v61[2] = __PowerChangedCallback_block_invoke_407;
        v61[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v61[4] = objc_opt_class();
        if (qword_1ED882EB8 != -1)
          dispatch_once(&qword_1ED882EB8, v61);
        if (byte_1ED882DC6)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep: after block entry.id=%lld"), objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "entryID"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "lastPathComponent");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PowerChangedCallback");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "logMessage:fromFile:fromFunction:fromLineNumber:", v32, v35, v36, 1136);

          PLLogCommon();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v75 = 138412290;
            v76 = v32;
            _os_log_debug_impl(&dword_1CAF47000, v37, OS_LOG_TYPE_DEBUG, "%@", v75, 0xCu);
          }

        }
      }
      _Block_object_dispose(&buf, 8);

      break;
    case 1u:
      v38 = -[PLEventForwardPowerStateEntry initEntryWithIOMessage:]([PLEventForwardPowerStateEntry alloc], "initEntryWithIOMessage:", a3);
      objc_msgSend((id)v67[5], "logEntry:", v38);
      IOAllowPowerChange(objc_msgSend((id)v67[5], "rootDomainConnect"), a4);

      break;
    case 2u:
      v55 = -[PLEventForwardPowerStateEntry initEntryWithIOMessage:]([PLEventForwardPowerStateEntry alloc], "initEntryWithIOMessage:", a3);
      objc_msgSend((id)v67[5], "getSleepStatisticsApps");
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
      if (v39)
      {
        v40 = *(_QWORD *)v58;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            if (*(_QWORD *)v58 != v40)
              objc_enumerationMutation(obj);
            v42 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
            v72[0] = CFSTR("PID");
            objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("PID"));
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v72[1] = CFSTR("AppName");
            v73[0] = v43;
            objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("AppName"));
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v73[1] = v44;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v73, v72, 2);
            v45 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("ResponseType"));
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "setObject:forKeyedSubscript:", v46, v45);

          }
          v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
        }
        while (v39);
      }

      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v47 = objc_opt_class();
        v56[0] = MEMORY[0x1E0C809B0];
        v56[1] = 3221225472;
        v56[2] = __PowerChangedCallback_block_invoke_412;
        v56[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v56[4] = v47;
        if (qword_1ED882EC0 != -1)
          dispatch_once(&qword_1ED882EC0, v56);
        if (byte_1ED882DC7)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep: SystemWillNotSleep dict[kPLSWE_ResponseType] =%lld "), objc_msgSend(v55, "entryID"));
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "lastPathComponent");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PowerChangedCallback");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "logMessage:fromFile:fromFunction:fromLineNumber:", v48, v51, v52, 1149);

          PLLogCommon();
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v48;
            _os_log_debug_impl(&dword_1CAF47000, v53, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }

        }
      }
      objc_msgSend((id)v67[5], "logEntry:", v55);

      break;
    case 9u:
      objc_msgSend(v6, "systemPoweredOn");
      break;
    default:
      break;
  }
  _Block_object_dispose(&v66, 8);

}

void sub_1CB0DD0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void fakeSleep(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  PLEventForwardPowerStateEntry *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  void *v45;
  id v46;
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD block[5];
  uint8_t buf[4];
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled");
  v4 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fakeSleep_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    block[4] = objc_opt_class();
    if (qword_1ED882E70 != -1)
      dispatch_once(&qword_1ED882E70, block);
    if (byte_1ED882DBD)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep Fake: start listening"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "lastPathComponent");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fakeSleep");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "logMessage:fromFile:fromFunction:fromLineNumber:", v5, v8, v9, 1084);

      PLLogCommon();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v51 = v5;
        _os_log_debug_impl(&dword_1CAF47000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
  objc_msgSend(v2, "canSleepSemaphore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "signalStartListening");

  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v48[0] = v4;
    v48[1] = 3221225472;
    v48[2] = __fakeSleep_block_invoke_362;
    v48[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v48[4] = objc_opt_class();
    if (qword_1ED882E78 != -1)
      dispatch_once(&qword_1ED882E78, v48);
    if (byte_1ED882DBE)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep Fake: log entry"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "lastPathComponent");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fakeSleep");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "logMessage:fromFile:fromFunction:fromLineNumber:", v12, v15, v16, 1087);

      PLLogCommon();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v51 = v12;
        _os_log_debug_impl(&dword_1CAF47000, v17, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
  v18 = [PLEventForwardPowerStateEntry alloc];
  objc_msgSend(MEMORY[0x1E0C99D68], "monotonicDate");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[PLEventForwardPowerStateEntry initEntryWithState:withEvent:withReason:withDate:](v18, "initEntryWithState:withEvent:withReason:withDate:", 1, 3, &unk_1E864FE20, v19);

  objc_msgSend(v2, "logEntry:", v20);
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v47[0] = v4;
    v47[1] = 3221225472;
    v47[2] = __fakeSleep_block_invoke_371;
    v47[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v47[4] = objc_opt_class();
    if (qword_1ED882E80 != -1)
      dispatch_once(&qword_1ED882E80, v47);
    if (byte_1ED882DBF)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sleep Fake: begin block entry.id=%lld"), objc_msgSend(v20, "entryID"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "lastPathComponent");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fakeSleep");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "logMessage:fromFile:fromFunction:fromLineNumber:", v21, v24, v25, 1090);

      PLLogCommon();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v51 = v21;
        _os_log_debug_impl(&dword_1CAF47000, v26, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
  objc_msgSend(v2, "canSleepSemaphore");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v4;
  v43 = 3221225472;
  v44 = __fakeSleep_block_invoke_374;
  v45 = &unk_1E85780C8;
  v28 = v20;
  v46 = v28;
  objc_msgSend(v27, "waitWithBlock:", &v42);

  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v37 = v4;
    v38 = 3221225472;
    v39 = __fakeSleep_block_invoke_379;
    v40 = &__block_descriptor_40_e5_v8__0lu32l8;
    v41 = objc_opt_class();
    if (qword_1ED882E90 != -1)
      dispatch_once(&qword_1ED882E90, &v37);
    if (byte_1ED882DC1)
    {
      v29 = (void *)MEMORY[0x1E0CB3940];
      v30 = objc_msgSend(v28, "entryID");
      objc_msgSend(v29, "stringWithFormat:", CFSTR("Sleep Fake: after block entry.id=%lld"), v30, v37, v38, v39, v40, v41, v42, v43, v44, v45);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "lastPathComponent");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fakeSleep");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "logMessage:fromFile:fromFunction:fromLineNumber:", v31, v34, v35, 1095);

      PLLogCommon();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v51 = v31;
        _os_log_debug_impl(&dword_1CAF47000, v36, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }

}

void fakeWakeBB(uint64_t a1, void *a2)
{
  id v2;
  PLEventForwardPowerStateEntry *v3;
  id v4;
  id v5;

  v2 = a2;
  v3 = [PLEventForwardPowerStateEntry alloc];
  objc_msgSend(MEMORY[0x1E0C99D68], "monotonicDate");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = -[PLEventForwardPowerStateEntry initEntryWithState:withEvent:withReason:withDate:](v3, "initEntryWithState:withEvent:withReason:withDate:", 0, 0, &unk_1E864FE38, v5);
  objc_msgSend(v2, "logEntry:", v4);

}

void fakeWakeWiFi(uint64_t a1, void *a2)
{
  id v2;
  PLEventForwardPowerStateEntry *v3;
  id v4;
  id v5;

  v2 = a2;
  v3 = [PLEventForwardPowerStateEntry alloc];
  objc_msgSend(MEMORY[0x1E0C99D68], "monotonicDate");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = -[PLEventForwardPowerStateEntry initEntryWithState:withEvent:withReason:withDate:](v3, "initEntryWithState:withEvent:withReason:withDate:", 0, 0, &unk_1E864FE50, v5);
  objc_msgSend(v2, "logEntry:", v4);

}

uint64_t __fakeSleep_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED882DBD = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_362(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED882DBE = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_371(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED882DBF = result;
  return result;
}

void __fakeSleep_block_invoke_374(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t block;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v2 = objc_opt_class();
    block = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __fakeSleep_block_invoke_2;
    v14 = &__block_descriptor_40_e5_v8__0lu32l8;
    v15 = v2;
    if (qword_1ED882E88 != -1)
      dispatch_once(&qword_1ED882E88, &block);
    if (byte_1ED882DC0)
    {
      v3 = (void *)MEMORY[0x1E0CB3940];
      v4 = objc_msgSend(*(id *)(a1 + 32), "entryID");
      objc_msgSend(v3, "stringWithFormat:", CFSTR("Sleep Fake: block Done entry.id=%lld"), v4, block, v12, v13, v14, v15);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "lastPathComponent");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fakeSleep_block_invoke");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "logMessage:fromFile:fromFunction:fromLineNumber:", v5, v8, v9, 1093);

      PLLogCommon();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v5;
        _os_log_debug_impl(&dword_1CAF47000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
}

uint64_t __fakeSleep_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED882DC0 = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_379(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED882DC1 = result;
  return result;
}

BOOL InitializeAllChecks@<W0>(uint64_t a1@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)a1 = objc_msgSend(MEMORY[0x1E0D80020], "isiOS");
  *(_BYTE *)(a1 + 1) = objc_msgSend(MEMORY[0x1E0D80020], "isiPad");
  *(_BYTE *)(a1 + 2) = objc_msgSend(MEMORY[0x1E0D80020], "isWatch");
  *(_BYTE *)(a1 + 3) = objc_msgSend(MEMORY[0x1E0D80020], "isMac");
  *(_BYTE *)(a1 + 4) = objc_msgSend(MEMORY[0x1E0D80020], "isTVOS");
  *(_BYTE *)(a1 + 5) = objc_msgSend(MEMORY[0x1E0D7FFA0], "taskMode");
  *(_BYTE *)(a1 + 6) = objc_msgSend(MEMORY[0x1E0D7FFA0], "fullMode");
  *(_BYTE *)(a1 + 7) = objc_msgSend(MEMORY[0x1E0D7FFA0], "eplEnabled");
  *(_BYTE *)(a1 + 8) = +[PLIOReportAgent shouldLogSoCStats](PLIOReportAgent, "shouldLogSoCStats");
  *(_BYTE *)(a1 + 9) = +[PLIOReportAgent shouldLogAtAppSwitchTrigger](PLIOReportAgent, "shouldLogAtAppSwitchTrigger");
  *(_BYTE *)(a1 + 10) = objc_msgSend(MEMORY[0x1E0D09930], "isCPMSSupported");
  *(_BYTE *)(a1 + 11) = +[PLIOReportAgent shouldLogAudioEvent](PLIOReportAgent, "shouldLogAudioEvent");
  *(_BYTE *)(a1 + 12) = +[PLIOReportAgent shouldLogThermalUPOLimiting](PLIOReportAgent, "shouldLogThermalUPOLimiting");
  *(_BYTE *)(a1 + 13) = objc_msgSend(MEMORY[0x1E0D80020], "hasCapability:", 1);
  *(_BYTE *)(a1 + 14) = +[PLIOReportAgent shouldLogSleepMedia](PLIOReportAgent, "shouldLogSleepMedia");
  *(_BYTE *)(a1 + 15) = objc_msgSend(MEMORY[0x1E0D7FFA0], "BOOLForKey:ifNotSet:", CFSTR("enable_SoCStatsDeviceStates"), 0);
  *(_DWORD *)(a1 + 24) = objc_msgSend(MEMORY[0x1E0D80020], "kPLDeviceClass");
  *(_BYTE *)(a1 + 16) = objc_msgSend(MEMORY[0x1E0D80020], "hasAOD");
  *(_BYTE *)(a1 + 17) = +[PLIOReportAgent shouldLogAmcStatsPerfCounters](PLIOReportAgent, "shouldLogAmcStatsPerfCounters");
  result = +[PLIOReportAgent shouldLogSocStatsEvents](PLIOReportAgent, "shouldLogSocStatsEvents");
  *(_BYTE *)(a1 + 18) = result;
  return result;
}

id PLLogIDS()
{
  if (qword_1ED883038 != -1)
    dispatch_once(&qword_1ED883038, &__block_literal_global_20);
  return (id)qword_1ED883030;
}

uint64_t KCellularCellPlmnSearchCountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t result;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 48) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_85;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_87;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_87:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 8u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_91:
          v65 = 24;
          goto LABEL_120;
        case 3u:
          v29 = 0;
          v30 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x10u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_95:
          v65 = 28;
          goto LABEL_120;
        case 4u:
          v34 = 0;
          v35 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x100u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_99:
          v65 = 44;
          goto LABEL_120;
        case 5u:
          v39 = 0;
          v40 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x80u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_103:
          v65 = 40;
          goto LABEL_120;
        case 6u:
          v44 = 0;
          v45 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x20u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v25 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_107:
          v65 = 32;
          goto LABEL_120;
        case 7u:
          v49 = 0;
          v50 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 2u;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v25 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v14 = v50++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_111:
          v65 = 16;
          goto LABEL_120;
        case 8u:
          v54 = 0;
          v55 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 4u;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v25 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                v14 = v55++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_115:
          v65 = 20;
          goto LABEL_120;
        case 0xFu:
          v60 = 0;
          v61 = 0;
          v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v62 = *v3;
        v63 = *(_QWORD *)(a2 + v62);
        if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          break;
        v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
        *(_QWORD *)(a2 + v62) = v63 + 1;
        v25 |= (unint64_t)(v64 & 0x7F) << v60;
        if ((v64 & 0x80) == 0)
          goto LABEL_117;
        v60 += 7;
        v14 = v61++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_119;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_117:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_119:
      v65 = 36;
LABEL_120:
      *(_DWORD *)(a1 + v65) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogDuetServiceDAS()
{
  if (qword_1ED8868D8 != -1)
    dispatch_once(&qword_1ED8868D8, &__block_literal_global_21);
  return (id)qword_1ED8868D0;
}

id PLLogDuetServiceLpmSource()
{
  if (qword_1ED886910 != -1)
    dispatch_once(&qword_1ED886910, &__block_literal_global_22);
  return (id)_MergedGlobals_89;
}

id PLLogContinuity()
{
  if (qword_1ED886920 != -1)
    dispatch_once(&qword_1ED886920, &__block_literal_global_23);
  return (id)_MergedGlobals_90;
}

void serviceInterestCallback(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];
  uint64_t v8;
  uint64_t v9;

  if (a3 == -536870896)
  {
    v8 = v3;
    v9 = v4;
    v5 = a1;
    objc_msgSend(v5, "cancel");
    objc_msgSend(v5, "setValid:", 0);

    PLLogDisplay();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CAF47000, v6, OS_LOG_TYPE_DEFAULT, "Cancelled AFKInterface", v7, 2u);
    }

  }
}

uint64_t handleIOMFBPowerCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result;

  if (!_os_feature_enabled_impl())
    return objc_msgSend(a4, "logEventPointDisplayBacklightWithState:", a3);
  result = objc_msgSend(MEMORY[0x1E0D80020], "hasAOD");
  if ((result & 1) == 0)
    return objc_msgSend(a4, "logEventPointDisplayBacklightWithState:", a3);
  return result;
}

void sub_1CB151978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  id *v33;

  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __HIDTouchEventCallback(void *a1)
{
  uint64_t Children;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  CFIndex v6;
  int v7;
  uint64_t v8;
  id v9;

  if (IOHIDEventGetType() == 11)
  {
    Children = IOHIDEventGetChildren();
    if (Children)
    {
      v3 = (const __CFArray *)Children;
      v9 = a1;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        Count = CFArrayGetCount(v3);
        if (Count >= 1)
        {
          v5 = Count;
          v6 = 0;
          v7 = 0;
          while (1)
          {
            CFArrayGetValueAtIndex(v3, v6);
            if (IOHIDEventGetType() == 11)
            {
              if (IOHIDEventGetIntegerValue())
                break;
            }
            v6 = ++v7;
            if (v5 <= v7)
              goto LABEL_9;
          }
          if ((objc_msgSend(v9, "userTouch") & 1) != 0)
            goto LABEL_15;
          v8 = 1;
          goto LABEL_14;
        }
LABEL_9:
        if (objc_msgSend(v9, "userTouch"))
        {
          v8 = 0;
LABEL_14:
          objc_msgSend(v9, "logEventBackwardUserTouch:", v8);
        }
      }
LABEL_15:

    }
  }
}

uint64_t updateDisplayIOReportAZLStats(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *Samples;
  NSObject *v5;
  void *v6;
  void *v7;
  void *SamplesDelta;
  PLDisplayAZLStats *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  PLDisplayAZLStats *v15;
  uint8_t buf[16];

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    PLLogDisplay();
    Samples = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG))
      goto LABEL_11;
    *(_WORD *)buf = 0;
    v12 = "LogDisplayAZL !ioReportStats";
LABEL_21:
    _os_log_debug_impl(&dword_1CAF47000, Samples, OS_LOG_TYPE_DEBUG, v12, buf, 2u);
    goto LABEL_11;
  }
  if (objc_msgSend(v1, "subscription"))
  {
    objc_msgSend(v2, "subscription");
    objc_msgSend(v2, "subscribedChannels");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    Samples = IOReportCreateSamples();

    if (Samples)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "monotonicDate");
      v5 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "ioReportSample");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
      {
LABEL_7:
        objc_msgSend(v2, "setIoReportSample:", Samples);
        objc_msgSend(v2, "sampleTime");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setSampleTimePrevious:", v10);

        objc_msgSend(v2, "setSampleTime:", v5);
        v11 = 1;
LABEL_18:

        goto LABEL_19;
      }
      objc_msgSend(v2, "ioReportSample");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SamplesDelta = (void *)IOReportCreateSamplesDelta();

      if (SamplesDelta)
      {
        v15 = objc_alloc_init(PLDisplayAZLStats);
        v9 = v15;
        IOReportIterate();
        objc_msgSend(v2, "setDisplayAZLStats:", v9);

        goto LABEL_7;
      }
      PLLogDisplay();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAF47000, v13, OS_LOG_TYPE_DEBUG, "LogDisplayAZL,no delta", buf, 2u);
      }

    }
    else
    {
      PLLogDisplay();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAF47000, v5, OS_LOG_TYPE_DEBUG, "LogDisplayAZL,no newSample", buf, 2u);
      }
    }
    v11 = 0;
    goto LABEL_18;
  }
  PLLogDisplay();
  Samples = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    v12 = "LogDisplayAZL !ioReportStats.subscription";
    goto LABEL_21;
  }
LABEL_11:
  v11 = 0;
LABEL_19:

  return v11;
}

void __updateDisplayIOReportAZLStats_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D179C2E0]();
  IOReportChannelGetChannelName();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IOReportSimpleGetIntegerValue());
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  v6 = &unk_1E8633378;
  if (v4)
    v6 = (void *)v4;
  v7 = v6;

  if (objc_msgSend(v3, "isEqualToString:", CFSTR("power")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAvgPower:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AZL power is equal to %@";
LABEL_18:
      _os_log_debug_impl(&dword_1CAF47000, v8, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v11, 0xCu);

      goto LABEL_19;
    }
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("azl_accum")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAzlAccum:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AZL azl_accum is equal to %@";
      goto LABEL_18;
    }
LABEL_19:

    goto LABEL_20;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("nits_accum")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setNitsAccum:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AZL nits_accum is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("bl_update_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setBlUpdateCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AZL bl_update_count is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("bl_frame_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setBlFrameCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AZL bl_frame_count is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_20:

  objc_autoreleasePoolPop(v2);
}

uint64_t updateDisplayIOReportAODStats(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *Samples;
  _BOOL4 v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *SamplesDelta;
  PLDisplayAODStats *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  void *v18;
  PLDisplayAODStats *v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    PLLogDisplay();
    Samples = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v15 = "LogDisplayAOD !ioReportStats";
LABEL_25:
    _os_log_debug_impl(&dword_1CAF47000, Samples, OS_LOG_TYPE_DEBUG, v15, buf, 2u);
    goto LABEL_15;
  }
  v3 = objc_msgSend(v1, "subscription");
  PLLogDisplay();
  Samples = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 138412290;
      v21 = v2;
      _os_log_debug_impl(&dword_1CAF47000, Samples, OS_LOG_TYPE_DEBUG, "Got callback for updateDisplayIOReportAODStat with ioReportAODStats %@", buf, 0xCu);
    }

    objc_msgSend(v2, "subscription");
    objc_msgSend(v2, "subscribedChannels");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    Samples = IOReportCreateSamples();

    if (Samples)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "monotonicDate");
      v7 = objc_claimAutoreleasedReturnValue();
      PLLogDisplay();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(v2, "ioReportSample");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v21 = v18;
        _os_log_debug_impl(&dword_1CAF47000, v8, OS_LOG_TYPE_DEBUG, "Got callback for updateDisplayIOReportAODStat with ioReportAODStats.ioReportSample %@", buf, 0xCu);

      }
      objc_msgSend(v2, "ioReportSample");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
        goto LABEL_11;
      objc_msgSend(v2, "ioReportSample");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      SamplesDelta = (void *)IOReportCreateSamplesDelta();

      if (SamplesDelta)
      {
        v19 = objc_alloc_init(PLDisplayAODStats);
        v12 = v19;
        IOReportIterate();
        objc_msgSend(v2, "setDisplayAODStats:", v12);

LABEL_11:
        objc_msgSend(v2, "setIoReportSample:", Samples);
        objc_msgSend(v2, "sampleTime");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setSampleTimePrevious:", v13);

        objc_msgSend(v2, "setSampleTime:", v7);
        v14 = 1;
LABEL_22:

        goto LABEL_23;
      }
      PLLogDisplay();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAF47000, v16, OS_LOG_TYPE_DEBUG, "LogDisplayAOD,no delta", buf, 2u);
      }

    }
    else
    {
      PLLogDisplay();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAF47000, v7, OS_LOG_TYPE_DEBUG, "LogDisplayAOD,no newSample", buf, 2u);
      }
    }
    v14 = 0;
    goto LABEL_22;
  }
  if (v5)
  {
    *(_WORD *)buf = 0;
    v15 = "LogDisplayAOD !ioReportStats.subscription";
    goto LABEL_25;
  }
LABEL_15:
  v14 = 0;
LABEL_23:

  return v14;
}

void __updateDisplayIOReportAODStats_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D179C2E0]();
  IOReportChannelGetChannelName();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IOReportSimpleGetIntegerValue());
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  v6 = &unk_1E8633378;
  if (v4)
    v6 = (void *)v4;
  v7 = v6;

  if (objc_msgSend(v3, "isEqualToString:", CFSTR("awake_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAwakeCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD awake_count is equal to %@";
LABEL_36:
      _os_log_debug_impl(&dword_1CAF47000, v8, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v11, 0xCu);

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("media_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setMediaCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD media_count is equal to %@";
      goto LABEL_36;
    }
LABEL_37:

    goto LABEL_38;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("flipbook_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setFlipbookCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD flipbook_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("flipbook_delay")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setFlipbookDelay:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD flipbook_delay is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("media_scanout")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setMediaScanout:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD media_scanout is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("ambient_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAmbientCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD ambient_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("prc_repeat_coun")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setPrcRepeatCoun:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD prc_repeat_coun is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("pdc_repeat_coun")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setPdcRepeatCoun:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD pdc_repeat_coun is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("llm_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setLlmCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD llm_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("apl_sum")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAplSum:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD apl_sum is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("apl_count")))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAplCount:", v7);
    PLLogDisplay();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v9;
      v10 = "AOD apl_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_38:

  objc_autoreleasePoolPop(v2);
}

void sub_1CB153FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CB156750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t KCellularCdma1XRrStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_70:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v30 = 0;
          v31 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_74:
          v50 = 24;
          goto LABEL_87;
        case 7u:
          v35 = 0;
          v36 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_78:
          v50 = 16;
          goto LABEL_87;
        case 8u:
          v40 = 0;
          v41 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_82:
          v50 = 28;
          goto LABEL_87;
        case 9u:
          v45 = 0;
          v46 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_86:
      v50 = 20;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB16A6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaCpcStatReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_70:
          v50 = 32;
          goto LABEL_87;
        case 3u:
          v29 = 0;
          v30 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_74:
          v50 = 24;
          goto LABEL_87;
        case 4u:
          v34 = 0;
          v35 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_78:
          v50 = 20;
          goto LABEL_87;
        case 5u:
          v39 = 0;
          v40 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_82:
          v50 = 16;
          goto LABEL_87;
        case 0xFu:
          v45 = 0;
          v46 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_86:
      v50 = 28;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL ComponentCarrierInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 20) |= 1u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void NotificationCallback_0(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD v5[6];
  _QWORD v6[5];
  id v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3032000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__8;
  v7 = a2;
  dispatch_get_global_queue(-2, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __NotificationCallback_block_invoke_0;
  v5[3] = &unk_1E857C348;
  v5[4] = v6;
  v5[5] = a3;
  dispatch_async(v4, v5);

  _Block_object_dispose(v6, 8);
}

void sub_1CB175278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1CB17A0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HistogramBinReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___HistogramBin__ids;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___HistogramBin__ids;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___HistogramBin__ids;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___HistogramBin__value;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___HistogramBin__value;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___HistogramBin__value;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void myRelease(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

id PLLogUrsa()
{
  if (qword_1ED883468 != -1)
    dispatch_once(&qword_1ED883468, &__block_literal_global_130);
  return (id)qword_1ED883460;
}

void sub_1CB17D850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CB17E2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PLLogComputeSafeguards()
{
  if (qword_1ED883478 != -1)
    dispatch_once(&qword_1ED883478, &__block_literal_global_211);
  return (id)qword_1ED883470;
}

uint64_t KCellularDownlinkIpPacketDiscardedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  uint64_t result;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 36) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_52;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_54;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_54:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_68;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 36) |= 4u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_62:
              v42 = 28;
              goto LABEL_67;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 36) |= 2u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_66;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_66:
              v42 = 24;
              goto LABEL_67;
            case 4u:
              PBReaderReadData();
              v39 = objc_claimAutoreleasedReturnValue();
              v40 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v39;

              goto LABEL_68;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 36) |= 8u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_56;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_58;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_58:
                v42 = 32;
LABEL_67:
                *(_DWORD *)(a1 + v42) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_68:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogIOReportMetrics()
{
  if (qword_1ED883488 != -1)
    dispatch_once(&qword_1ED883488, &__block_literal_global_28);
  return (id)_MergedGlobals_1_32;
}

uint64_t StateHistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  HistogramBin *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(HistogramBin);
        objc_msgSend((id)a1, "addBin:", v23);
        if (!PBReaderPlaceMark() || !HistogramBinReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void fsEventsHandler(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  id v14;

  v14 = a4;
  if (a3)
  {
    v7 = 0;
    do
    {
      if ((~*(_DWORD *)(a5 + 4 * v7) & 0x10100) == 0)
      {
        objc_msgSend(v14, "objectAtIndexedSubscript:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "lastPathComponent");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if ((~*(_DWORD *)(a5 + 4 * v7) & 0x900) == 0)
        {
          objc_msgSend(v9, "componentsSeparatedByString:", CFSTR("."));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v10, "count") == 4)
          {
            objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("microstackshots"));

            if (v12)
              objc_msgSend(a2, "logLogFileName:withName:", CFSTR("microstackshots"), v9);
          }

        }
      }
      ++v7;
    }
    while (a3 != v7);
  }

}

uint64_t KCellularLqmStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  int v130;
  uint64_t v131;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = 0x1EF995000uLL;
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    v20 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_134;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_136;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_134:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_136:
          *(_QWORD *)(a1 + *(int *)(v9 + 3312)) = v32;
          continue;
        case 3u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x200u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_140:
          v127 = *(int *)(v10 + 3316);
          goto LABEL_174;
        case 4u:
          v49 = 0;
          v50 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 8u;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v45 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v27 = v50++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_144:
          v127 = *(int *)(v11 + 3320);
          goto LABEL_174;
        case 5u:
          v54 = 0;
          v55 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x800u;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v45 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                v27 = v55++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_148:
          v127 = *(int *)(v12 + 3324);
          goto LABEL_174;
        case 6u:
          v59 = 0;
          v60 = 0;
          v61 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x4000u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v61 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v27 = v60++ >= 9;
                if (v27)
                {
                  v61 = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v61 = 0;
LABEL_152:
          v128 = v61 != 0;
          v129 = *(int *)(v13 + 3328);
          goto LABEL_165;
        case 7u:
          v65 = 0;
          v66 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x100u;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
              *(_QWORD *)(a2 + v67) = v68 + 1;
              v45 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                v27 = v66++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_156:
          v127 = *(int *)(v14 + 3332);
          goto LABEL_174;
        case 8u:
          v70 = 0;
          v71 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x400u;
          while (2)
          {
            v72 = *v3;
            v73 = *(_QWORD *)(a2 + v72);
            if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v73);
              *(_QWORD *)(a2 + v72) = v73 + 1;
              v45 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                v27 = v71++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_160:
          v127 = *(int *)(v15 + 3336);
          goto LABEL_174;
        case 9u:
          v75 = 0;
          v76 = 0;
          v77 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x8000u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v77 |= (unint64_t)(v80 & 0x7F) << v75;
              if (v80 < 0)
              {
                v75 += 7;
                v27 = v76++ >= 9;
                if (v27)
                {
                  v77 = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v77 = 0;
LABEL_164:
          v128 = v77 != 0;
          v129 = *(int *)(v16 + 3340);
LABEL_165:
          *(_BYTE *)(a1 + v129) = v128;
          continue;
        case 0xCu:
          v81 = 0;
          v82 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 2u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v45 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v27 = v82++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_169:
          v127 = *(int *)(v17 + 3344);
          goto LABEL_174;
        case 0xEu:
          v86 = 0;
          v87 = 0;
          v45 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 4u;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v45 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                v27 = v87++ >= 9;
                if (v27)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v45) = 0;
LABEL_173:
          v127 = *(int *)(v18 + 3348);
LABEL_174:
          *(_DWORD *)(a1 + v127) = v45;
          continue;
        case 0x15u:
          v91 = 0;
          v92 = 0;
          v93 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x1000u;
          while (2)
          {
            v94 = *v3;
            v95 = *(_QWORD *)(a2 + v94);
            if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v95);
              *(_QWORD *)(a2 + v94) = v95 + 1;
              v93 |= (unint64_t)(v96 & 0x7F) << v91;
              if (v96 < 0)
              {
                v91 += 7;
                v27 = v92++ >= 9;
                if (v27)
                {
                  LODWORD(v93) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v93) = 0;
LABEL_178:
          v130 = -(v93 & 1) ^ ((int)v93 >> 1);
          v131 = *(int *)(v19 + 3352);
          goto LABEL_199;
        case 0x16u:
          v97 = 0;
          v98 = 0;
          v99 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x2000u;
          while (2)
          {
            v100 = *v3;
            v101 = *(_QWORD *)(a2 + v100);
            if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v101);
              *(_QWORD *)(a2 + v100) = v101 + 1;
              v99 |= (unint64_t)(v102 & 0x7F) << v97;
              if (v102 < 0)
              {
                v97 += 7;
                v27 = v98++ >= 9;
                if (v27)
                {
                  LODWORD(v99) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v99) = 0;
LABEL_182:
          v130 = -(v99 & 1) ^ ((int)v99 >> 1);
          v131 = *(int *)(v20 + 3356);
          goto LABEL_199;
        case 0x17u:
          v103 = 0;
          v104 = 0;
          v105 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x40u;
          while (2)
          {
            v106 = *v3;
            v107 = *(_QWORD *)(a2 + v106);
            if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v107);
              *(_QWORD *)(a2 + v106) = v107 + 1;
              v105 |= (unint64_t)(v108 & 0x7F) << v103;
              if (v108 < 0)
              {
                v103 += 7;
                v27 = v104++ >= 9;
                if (v27)
                {
                  LODWORD(v105) = 0;
                  goto LABEL_186;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v105) = 0;
LABEL_186:
          v130 = -(v105 & 1) ^ ((int)v105 >> 1);
          v131 = 36;
          goto LABEL_199;
        case 0x18u:
          v109 = 0;
          v110 = 0;
          v111 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x10u;
          while (2)
          {
            v112 = *v3;
            v113 = *(_QWORD *)(a2 + v112);
            if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v113);
              *(_QWORD *)(a2 + v112) = v113 + 1;
              v111 |= (unint64_t)(v114 & 0x7F) << v109;
              if (v114 < 0)
              {
                v109 += 7;
                v27 = v110++ >= 9;
                if (v27)
                {
                  LODWORD(v111) = 0;
                  goto LABEL_190;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v111) = 0;
LABEL_190:
          v130 = -(v111 & 1) ^ ((int)v111 >> 1);
          v131 = 28;
          goto LABEL_199;
        case 0x19u:
          v115 = 0;
          v116 = 0;
          v117 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x20u;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v117 |= (unint64_t)(v120 & 0x7F) << v115;
              if (v120 < 0)
              {
                v115 += 7;
                v27 = v116++ >= 9;
                if (v27)
                {
                  LODWORD(v117) = 0;
                  goto LABEL_194;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v117) = 0;
LABEL_194:
          v130 = -(v117 & 1) ^ ((int)v117 >> 1);
          v131 = 32;
          goto LABEL_199;
        case 0x1Au:
          v121 = 0;
          v122 = 0;
          v123 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3308)) |= 0x80u;
          break;
        default:
          v36 = v9;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x1EF995000;
          v13 = 0x1EF995000;
          a1 = v41;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = 0x1EF995000;
          v11 = v39;
          v16 = 0x1EF995000;
          v7 = v38;
          v18 = 0x1EF995000;
          v10 = v37;
          v17 = 0x1EF995000;
          v9 = v36;
          v19 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v124 = *v3;
        v125 = *(_QWORD *)(a2 + v124);
        if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v4))
          break;
        v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v125);
        *(_QWORD *)(a2 + v124) = v125 + 1;
        v123 |= (unint64_t)(v126 & 0x7F) << v121;
        if ((v126 & 0x80) == 0)
          goto LABEL_196;
        v121 += 7;
        v27 = v122++ >= 9;
        if (v27)
        {
          LODWORD(v123) = 0;
          goto LABEL_198;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_196:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v123) = 0;
LABEL_198:
      v130 = -(v123 & 1) ^ ((int)v123 >> 1);
      v131 = 40;
LABEL_199:
      *(_DWORD *)(a1 + v131) = v130;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackPowerStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 32) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_58;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_60:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 8u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_68:
              v45 = 24;
              goto LABEL_77;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 2u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_72:
              v45 = 16;
              goto LABEL_77;
            case 4u:
              v39 = 0;
              v40 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 4u;
              while (2)
              {
                v41 = *v3;
                v42 = *(_QWORD *)(a2 + v41);
                if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                  *(_QWORD *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_76:
              v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_62;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_64:
                v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_78:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_59:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 32) |= 0x10u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_63:
          v45 = 28;
          goto LABEL_76;
        case 6u:
          v30 = 0;
          v31 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_67:
          v45 = 20;
          goto LABEL_76;
        case 7u:
          v35 = 0;
          v36 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_71:
          v45 = 16;
          goto LABEL_76;
        case 8u:
          v40 = 0;
          v41 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v25 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
          goto LABEL_73;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_75;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_75:
      v45 = 24;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogProcessMonitor()
{
  if (qword_1ED8835D8 != -1)
    dispatch_once(&qword_1ED8835D8, &__block_literal_global_33);
  return (id)qword_1ED8835D0;
}

void sub_1CB1A9E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

_QWORD *timestampGetTimeval(_QWORD *result, uint64_t a2)
{
  unint64_t v2;

  v2 = 5 * (*result >> 16) + (unsigned __int16)*result / 0x2667u + 2;
  *(_QWORD *)a2 = ((v2 * (unsigned __int128)0x10624DD2F1A9FCuLL) >> 64) + 315964800;
  *(_DWORD *)(a2 + 8) = 1000 * ((v2 >> 2) - 1000 * (((v2 >> 2) * (unsigned __int128)0x4189374BC6A7F0uLL) >> 64));
  return result;
}

uint64_t KCellularLteComponentCarrierInfoReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  ComponentCarrierInfo *v73;
  uint64_t result;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = 0x1EF995000uLL;
  v8 = 0x1EF995000uLL;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      if (v14 == -1 || v14 >= *(_QWORD *)(a2 + *v4))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
      *(_QWORD *)(a2 + v13) = v14 + 1;
      v12 |= (unint64_t)(v15 & 0x7F) << v10;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v16 = v11++ >= 9;
      if (v16)
      {
        v12 = 0;
        v17 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v17 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v17 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_102;
          v19 += 7;
          v16 = v20++ >= 9;
          if (v16)
          {
            v21 = 0;
            goto LABEL_104;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_102:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_104:
        *(_QWORD *)&a1[*(int *)(v8 + 3652)] = v21;
        goto LABEL_146;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v16 = v26++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_108:
        v80 = 28;
        goto LABEL_145;
      case 3u:
        v31 = 0;
        v32 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x20u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v16 = v32++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_112:
        v80 = 40;
        goto LABEL_145;
      case 4u:
        v36 = 0;
        v37 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x100u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 1;
            v27 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              v16 = v37++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_116:
        v80 = 52;
        goto LABEL_145;
      case 5u:
        v41 = 0;
        v42 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 2u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v27 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              v16 = v42++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_120:
        v80 = 24;
        goto LABEL_145;
      case 6u:
        v46 = 0;
        v47 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x10u;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v27 |= (unint64_t)(v50 & 0x7F) << v46;
            if (v50 < 0)
            {
              v46 += 7;
              v16 = v47++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_124:
        v80 = 36;
        goto LABEL_145;
      case 7u:
        v51 = 0;
        v52 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x80u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 1;
            v27 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              v16 = v52++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_128:
        v80 = 48;
        goto LABEL_145;
      case 8u:
        v56 = 0;
        v57 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 8u;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 1;
            v27 |= (unint64_t)(v60 & 0x7F) << v56;
            if (v60 < 0)
            {
              v56 += 7;
              v16 = v57++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_132:
        v80 = 32;
        goto LABEL_145;
      case 9u:
        v61 = 0;
        v62 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x40u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v27 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v16 = v62++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_136:
        v80 = 44;
        goto LABEL_145;
      case 0xAu:
        v66 = 0;
        v67 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x200u;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 1;
            v27 |= (unint64_t)(v70 & 0x7F) << v66;
            if (v70 < 0)
            {
              v66 += 7;
              v16 = v67++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_140:
        v80 = 56;
        goto LABEL_145;
      case 0xBu:
        v71 = v7;
        v72 = v8;
        v73 = objc_alloc_init(ComponentCarrierInfo);
        objc_msgSend(a1, "addCarrierInfo:", v73);
        if (PBReaderPlaceMark() && ComponentCarrierInfoReadFrom((uint64_t)v73, a2))
        {
          PBReaderRecallMark();

          v8 = v72;
          v7 = v71;
LABEL_146:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xFu:
        v75 = 0;
        v76 = 0;
        v27 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3648)] |= 0x400u;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v78);
            *(_QWORD *)(a2 + v77) = v78 + 1;
            v27 |= (unint64_t)(v79 & 0x7F) << v75;
            if (v79 < 0)
            {
              v75 += 7;
              v16 = v76++ >= 9;
              if (v16)
              {
                LODWORD(v27) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_144:
        v80 = 60;
LABEL_145:
        *(_DWORD *)&a1[v80] = v27;
        goto LABEL_146;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_146;
    }
  }
}

uint64_t KCellularWcdmaRabStatusReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 32) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_58;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_60:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 0x10u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_68:
              v45 = 28;
              goto LABEL_77;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 4u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_72:
              v45 = 20;
              goto LABEL_77;
            case 4u:
              v39 = 0;
              v40 = 0;
              v25 = 0;
              *(_BYTE *)(a1 + 32) |= 2u;
              while (2)
              {
                v41 = *v3;
                v42 = *(_QWORD *)(a2 + v41);
                if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                  *(_QWORD *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_76:
              v45 = 16;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 32) |= 8u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_62;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_64:
                v45 = 24;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_78:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackCpuStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  CStat *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_58;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_52:
        v36 = 24;
        goto LABEL_57;
      case 3u:
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v26 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_56:
        v36 = 28;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v26;
        goto LABEL_58;
      case 4u:
        v35 = objc_alloc_init(CStat);
        objc_msgSend((id)a1, "addCores:", v35);
        if (PBReaderPlaceMark() && CStatReadFrom((uint64_t)v35, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

uint64_t KCellularLteCdrxConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t result;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF995000uLL;
    v8 = 0x1EF995000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = 0x1EF995000uLL;
    v11 = 0x1EF995000uLL;
    v12 = 0x1EF995000uLL;
    v13 = 0x1EF995000uLL;
    v14 = 0x1EF995000uLL;
    v15 = 0x1EF995000uLL;
    v16 = 0x1EF995000uLL;
    v17 = 0x1EF995000uLL;
    v18 = 0x1EF995000uLL;
    v19 = 0x1EF995000uLL;
    v20 = 0x1EF995000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_106;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_108;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_106:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_108:
          *(_QWORD *)(a1 + *(int *)(v8 + 3748)) = v32;
          continue;
        case 2u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 4u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v27 = v37++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_112;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_112:
          v99 = *(int *)(v10 + 3752);
          goto LABEL_153;
        case 3u:
          v42 = 0;
          v43 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x80u;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v45);
              *(_QWORD *)(a2 + v44) = v45 + 1;
              v38 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                v27 = v43++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_116;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_116:
          v99 = *(int *)(v11 + 3756);
          goto LABEL_153;
        case 4u:
          v47 = 0;
          v48 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 8u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v38 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                v27 = v48++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_120;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_120:
          v99 = *(int *)(v12 + 3760);
          goto LABEL_153;
        case 5u:
          v52 = 0;
          v53 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x10u;
          while (2)
          {
            v54 = *v3;
            v55 = *(_QWORD *)(a2 + v54);
            if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v55);
              *(_QWORD *)(a2 + v54) = v55 + 1;
              v38 |= (unint64_t)(v56 & 0x7F) << v52;
              if (v56 < 0)
              {
                v52 += 7;
                v27 = v53++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_124:
          v99 = *(int *)(v13 + 3764);
          goto LABEL_153;
        case 7u:
          v64 = 0;
          v65 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x40u;
          while (2)
          {
            v66 = *v3;
            v67 = *(_QWORD *)(a2 + v66);
            if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v67);
              *(_QWORD *)(a2 + v66) = v67 + 1;
              v38 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                v27 = v65++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_128:
          v99 = *(int *)(v14 + 3768);
          goto LABEL_153;
        case 0xAu:
          v69 = 0;
          v70 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x200u;
          while (2)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v72);
              *(_QWORD *)(a2 + v71) = v72 + 1;
              v38 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                v27 = v70++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_132;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_132:
          v99 = *(int *)(v15 + 3772);
          goto LABEL_153;
        case 0xBu:
          v74 = 0;
          v75 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x20u;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v38 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                v27 = v75++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_136:
          v99 = *(int *)(v16 + 3776);
          goto LABEL_153;
        case 0xCu:
          v79 = 0;
          v80 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x100u;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v82);
              *(_QWORD *)(a2 + v81) = v82 + 1;
              v38 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                v27 = v80++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_140:
          v99 = *(int *)(v17 + 3780);
          goto LABEL_153;
        case 0xDu:
          v84 = 0;
          v85 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 2u;
          while (2)
          {
            v86 = *v3;
            v87 = *(_QWORD *)(a2 + v86);
            if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v87);
              *(_QWORD *)(a2 + v86) = v87 + 1;
              v38 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                v27 = v85++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_144:
          v99 = *(int *)(v18 + 3784);
          goto LABEL_153;
        case 0xEu:
          v89 = 0;
          v90 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x800u;
          while (2)
          {
            v91 = *v3;
            v92 = *(_QWORD *)(a2 + v91);
            if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v92);
              *(_QWORD *)(a2 + v91) = v92 + 1;
              v38 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                v27 = v90++ >= 9;
                if (v27)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_148:
          v99 = *(int *)(v19 + 3788);
          goto LABEL_153;
        case 0xFu:
          v94 = 0;
          v95 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3744)) |= 0x400u;
          break;
        default:
          v57 = v8;
          v58 = v10;
          v59 = v7;
          v60 = v11;
          v61 = v12;
          v62 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x1EF995000;
          v13 = 0x1EF995000;
          a1 = v62;
          v14 = 0x1EF995000;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v61;
          v15 = 0x1EF995000;
          v11 = v60;
          v16 = 0x1EF995000;
          v7 = v59;
          v18 = 0x1EF995000;
          v10 = v58;
          v17 = 0x1EF995000;
          v8 = v57;
          v19 = 0x1EF995000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v96 = *v3;
        v97 = *(_QWORD *)(a2 + v96);
        if (v97 == -1 || v97 >= *(_QWORD *)(a2 + *v4))
          break;
        v98 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v97);
        *(_QWORD *)(a2 + v96) = v97 + 1;
        v38 |= (unint64_t)(v98 & 0x7F) << v94;
        if ((v98 & 0x80) == 0)
          goto LABEL_150;
        v94 += 7;
        v27 = v95++ >= 9;
        if (v27)
        {
          LODWORD(v38) = 0;
          goto LABEL_152;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_150:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v38) = 0;
LABEL_152:
      v99 = *(int *)(v20 + 3792);
LABEL_153:
      *(_DWORD *)(a1 + v99) = v38;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularLteFwDuplexModeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        *(_DWORD *)(a1 + 16) = v26;
      }
      else if ((_DWORD)v17 == 2)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_55:
        *(_BYTE *)(a1 + 20) = v32 != 0;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_47:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogCoalition()
{
  if (qword_1ED8837B0 != -1)
    dispatch_once(&qword_1ED8837B0, &__block_literal_global_34);
  return (id)qword_1ED8837A8;
}

void sub_1CB1BE870(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1CB1C23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB1C6960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB1C6B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *dataIndicatorToString(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 < 0x11)
    return off_1E857DDC0[(int)a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown CTDataIndicatorStatus: %d"), a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0D7FF98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "dataIndicatorToString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "logMessage:fromFile:fromFunction:fromLineNumber:", v2, v5, v6, 2079);

  PLLogCommon();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v9 = v2;
    _os_log_debug_impl(&dword_1CAF47000, v7, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }

  return CFSTR("Unknown");
}

void sub_1CB1CB614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void TimeUpdateNotificationCB(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _QWORD block[5];
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 && a5)
  {
    +[PLBBAgent getBBAgent](PLBBAgent, "getBBAgent");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", a3);
        a3 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", a5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0CA7890]))
      {
        objc_msgSend(v7, "processTimeUpdateInfoDict:", v8);
      }
      else if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v9 = objc_opt_class();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __TimeUpdateNotificationCB_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        block[4] = v9;
        if (qword_1ED886068 != -1)
          dispatch_once(&qword_1ED886068, block);
        if (byte_1ED883A1E)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("BB time update expected but absent"));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "lastPathComponent");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "TimeUpdateNotificationCB");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "logMessage:fromFile:fromFunction:fromLineNumber:", v10, v13, v14, 10103);

          PLLogCommon();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v18 = v10;
            _os_log_debug_impl(&dword_1CAF47000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
          }

        }
      }

    }
  }
}

void TelephonyActivityNotificationCB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  _QWORD block[5];
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v7 = objc_opt_class();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __TelephonyActivityNotificationCB_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    block[4] = v7;
    if (qword_1ED886058 != -1)
      dispatch_once(&qword_1ED886058, block);
    if (byte_1ED883A1C)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), "TelephonyActivityNotificationCB");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "lastPathComponent");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "TelephonyActivityNotificationCB");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "logMessage:fromFile:fromFunction:fromLineNumber:", v8, v11, v12, 9763);

      PLLogCommon();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v8;
        _os_log_debug_impl(&dword_1CAF47000, v13, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
  if (a5)
  {
    +[PLBBAgent getBBAgent](PLBBAgent, "getBBAgent");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
LABEL_18:

      return;
    }
    v15 = objc_msgSend(a5, "mutableCopy");
    objc_msgSend(v14, "telephonyActivityNotificationCB_Agent:withName:", v15, a3);
LABEL_17:

    goto LABEL_18;
  }
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v16 = objc_opt_class();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __TelephonyActivityNotificationCB_block_invoke_4438;
    v21[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v21[4] = v16;
    if (qword_1ED886060 != -1)
      dispatch_once(&qword_1ED886060, v21);
    if (byte_1ED883A1D)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Bad userInfo in Tel CB"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "lastPathComponent");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "TelephonyActivityNotificationCB");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "logMessage:fromFile:fromFunction:fromLineNumber:", v14, v19, v20, 9765);

      PLLogCommon();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v14;
        _os_log_debug_impl(&dword_1CAF47000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
      goto LABEL_17;
    }
  }
}

void BasebandResetCallback(void *a1, uint64_t a2, int a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  __CFString *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  __CFString *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  const __CFString *v33;
  uint64_t v34;
  _QWORD block[4];
  const __CFString *v36;
  uint64_t v37;
  uint8_t buf[4];
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(MEMORY[0x1E0D80020], "isBasebandProto") & 1) != 0
    || (objc_msgSend(MEMORY[0x1E0D80020], "isBasebandMav") & 1) != 0
    || objc_msgSend(MEMORY[0x1E0D80020], "isBasebandIce"))
  {
    if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("BasebandResetCallback not valid for Protobuf platforms"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "lastPathComponent");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BasebandResetCallback");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "logMessage:fromFile:fromFunction:fromLineNumber:", v5, v8, v9, 9683);

      PLLogCommon();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v39 = v5;
        _os_log_debug_impl(&dword_1CAF47000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
    if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      __assert_rtn("BasebandResetCallback", "PLBBAgent.m", 9684, "0");
  }
  else if (a3 == -469794815)
  {
    if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
    {
      v20 = objc_opt_class();
      v29 = MEMORY[0x1E0C809B0];
      v31 = __BasebandResetCallback_block_invoke_4419;
      v32 = &unk_1E8578738;
      v30 = 3221225472;
      v33 = CFSTR("Critical");
      v34 = v20;
      if (qword_1ED886050 == -1)
      {
        v21 = CFSTR("Critical");
      }
      else
      {
        dispatch_once(&qword_1ED886050, &v29);
        v21 = (__CFString *)v33;
      }
      v22 = byte_1ED883A1B;

      if (v22)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Baseband reset callback: state=recovered"), v29, v30, v31, v32);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)MEMORY[0x1E0D7FF98];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "lastPathComponent");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BasebandResetCallback");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "logMessage:fromFile:fromFunction:fromLineNumber:", v23, v26, v27, 9694);

        PLLogCommon();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v39 = v23;
          _os_log_debug_impl(&dword_1CAF47000, v28, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
        }

      }
    }
    objc_msgSend(a1, "setupBBChannelsWithAction:", 1, v29, v30, v31, v32);
  }
  else if (a3 == -469794816 && objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v11 = objc_opt_class();
    block[0] = MEMORY[0x1E0C809B0];
    block[2] = __BasebandResetCallback_block_invoke;
    block[3] = &unk_1E8578738;
    block[1] = 3221225472;
    v36 = CFSTR("Critical");
    v37 = v11;
    if (qword_1ED886048 == -1)
    {
      v12 = CFSTR("Critical");
    }
    else
    {
      dispatch_once(&qword_1ED886048, block);
      v12 = (__CFString *)v36;
    }
    v13 = byte_1ED883A1A;

    if (v13)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Baseband reset callback: state=reset"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "lastPathComponent");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BasebandResetCallback");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "logMessage:fromFile:fromFunction:fromLineNumber:", v14, v17, v18, 9690);

      PLLogCommon();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v39 = v14;
        _os_log_debug_impl(&dword_1CAF47000, v19, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
}

#error "1CB1DCC40: too big function (funcsize=0)"

void preferencesChanged(uint64_t a1, char a2)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  CFPropertyListRef Value;
  const void **v9;
  uint64_t v10;
  CFPropertyListRef v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  uint64_t block;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint8_t buf[4];
  NSObject *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((a2 & 2) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("***error**** unexpected notification type cannot handle"));
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)MEMORY[0x1E0D7FF98];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lastPathComponent");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferencesChanged");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "logMessage:fromFile:fromFunction:fromLineNumber:", v2, v5, v6, 9805);

    PLLogCommon();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v2;
      _os_log_debug_impl(&dword_1CAF47000, v7, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
LABEL_21:

    goto LABEL_22;
  }
  +[PLBBAgent getBBAgent](PLBBAgent, "getBBAgent");
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    SCPreferencesSynchronize((SCPreferencesRef)qword_1ED885FE8);
    Value = SCPreferencesGetValue((SCPreferencesRef)qword_1ED885FE8, CFSTR("AirplaneMode"));
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = objc_opt_class();
    block = MEMORY[0x1E0C809B0];
    v26 = 3221225472;
    v27 = __preferencesChanged_block_invoke;
    v28 = &__block_descriptor_40_e5_v8__0lu32l8;
    v29 = v10;
    if (qword_1ED885FF8 != -1)
      dispatch_once(&qword_1ED885FF8, &block);
    v11 = *v9;
    if (byte_1ED883A10)
    {
      v12 = "off";
      if (Value == v11)
        v12 = "on";
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("AirplaneMode is %s"), v12, block, v26, v27, v28, v29);
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "lastPathComponent");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferencesChanged");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "logMessage:fromFile:fromFunction:fromLineNumber:", v13, v16, v17, 9820);

      PLLogCommon();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v13;
        _os_log_debug_impl(&dword_1CAF47000, v18, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
    if (Value == v11)
      v19 = CFSTR("on");
    else
      v19 = CFSTR("off");
    if (objc_msgSend(airplaneModeCurrent, "isEqualToString:", v19))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("***error**** airplane mode chg cb didn't report any chg"));
      v7 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "lastPathComponent");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferencesChanged");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "logMessage:fromFile:fromFunction:fromLineNumber:", v7, v22, v23, 9825);

      PLLogCommon();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v7;
        _os_log_debug_impl(&dword_1CAF47000, v24, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
    else
    {
      objc_storeStrong((id *)&airplaneModeCurrent, v19);
      -[NSObject telActMsgHelper](v2, "telActMsgHelper");
      v7 = objc_claimAutoreleasedReturnValue();
      -[NSObject setAirplaneMode:](v7, "setAirplaneMode:", airplaneModeCurrent);
      -[NSObject logPointIntervalTelephonyActivityAirplaneModeChange](v7, "logPointIntervalTelephonyActivityAirplaneModeChange");
    }
    goto LABEL_21;
  }
LABEL_22:

}

uint64_t __preferencesChanged_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D7FFA0], "isClassDebugEnabled:", *(_QWORD *)(a1 + 32));
  byte_1ED883A10 = result;
  return result;
}

void logRunStateNotificationReceived(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = *MEMORY[0x1E0D80378];
    v3 = a2;
    +[PLOperator entryKeyForType:andName:](PLARKitAgent, "entryKeyForType:andName:", v2, CFSTR("State"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = CFSTR("State");
    v8[0] = &unk_1E86339F0;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7FFB0]), "initWithEntryKey:withRawData:", v4, v5);
    objc_msgSend(v3, "logEntry:", v6);

  }
}

void logPauseStateNotificationReceived(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = *MEMORY[0x1E0D80378];
    v3 = a2;
    +[PLOperator entryKeyForType:andName:](PLARKitAgent, "entryKeyForType:andName:", v2, CFSTR("State"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = CFSTR("State");
    v8[0] = &unk_1E8633A08;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7FFB0]), "initWithEntryKey:withRawData:", v4, v5);
    objc_msgSend(v3, "logEntry:", v6);

  }
}

uint64_t AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FilterReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___Filter__protocol;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___Filter__protocol;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___Filter__protocol;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___Filter__port;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___Filter__port;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___Filter__port;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t pushConfigToAggd(uint64_t a1, void *a2)
{
  uint64_t result;

  if (a2)
    return objc_msgSend(a2, "aggdTimerFired");
  return result;
}

void sub_1CB226E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB227140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1CB22F7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1CB22FA48(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x1CB22FA2CLL);
  }
  objc_exception_rethrow();
}

void sub_1CB22FA80(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CB230284(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x1CB230258);
  }
  objc_exception_rethrow();
}

void sub_1CB2302B4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CB230374(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CB230604(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  id v13;
  NSObject *v14;

  if (a2)
  {
    if (a2 == 2)
    {
      v13 = objc_begin_catch(a1);
      PLLogCommon();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v13;
        _os_log_error_impl(&dword_1CAF47000, v14, OS_LOG_TYPE_ERROR, "Error parsing TAHighSoc: %@", (uint8_t *)&buf, 0xCu);
      }

      objc_end_catch();
      JUMPOUT(0x1CB2304FCLL);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x1CB230590);
  }
  _Unwind_Resume(a1);
}

void sub_1CB23087C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  id v13;
  NSObject *v14;

  if (a2)
  {
    if (a2 == 2)
    {
      v13 = objc_begin_catch(a1);
      PLLogCommon();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v13;
        _os_log_error_impl(&dword_1CAF47000, v14, OS_LOG_TYPE_ERROR, "Error parsing lowVoltageResidencyCounters: %@", (uint8_t *)&buf, 0xCu);
      }

      objc_end_catch();
      JUMPOUT(0x1CB230754);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x1CB230800);
  }
  _Unwind_Resume(a1);
}

void sub_1CB230BC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1CB230BCCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1CB230BDC(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CB230BEC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1CB230BF8);
}

void sub_1CB230E84(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1CB230E90);
  }
  _Unwind_Resume(a1);
}

void sub_1CB230EA4(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CB230EB4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1CB230EC0);
}

void sub_1CB234154(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t block, uint64_t a19, uint64_t (*a20)(uint64_t a1),void *a21,uint64_t a22,__int128 buf)
{
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;

  if (a2)
  {
    if (a2 == 2)
    {
      v23 = objc_begin_catch(a1);
      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v24 = objc_opt_class();
        block = MEMORY[0x1E0C809B0];
        a19 = 3221225472;
        a20 = __46__PLBatteryAgent_logEventPointBatteryShutdown__block_invoke;
        a21 = &__block_descriptor_40_e5_v8__0lu32l8;
        a22 = v24;
        if (qword_1ED887760 != -1)
          dispatch_once(&qword_1ED887760, &block);
        if (byte_1ED88758F)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("BatteryShutdown data could not be parsed"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "lastPathComponent");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "-[PLBatteryAgent logEventPointBatteryShutdown]");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "logMessage:fromFile:fromFunction:fromLineNumber:", v25, v28, v29, 7385);

          PLLogCommon();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v25;
            _os_log_debug_impl(&dword_1CAF47000, v30, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }

        }
      }

      objc_end_catch();
      JUMPOUT(0x1CB234108);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1CB236BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t (*a23)(uint64_t a1),void *a24,uint64_t a25)
{
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;

  if (a2)
  {
    if (a2 == 2)
    {
      v26 = objc_begin_catch(exception_object);
      if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
      {
        v27 = objc_opt_class();
        a21 = MEMORY[0x1E0C809B0];
        a22 = 3221225472;
        a23 = __55__PLBatteryAgent_logEventNoneBatteryConfigWithRawData___block_invoke_3394;
        a24 = &__block_descriptor_40_e5_v8__0lu32l8;
        a25 = v27;
        v28 = &a21;
        if (qword_1ED887788 != -1)
          dispatch_once(&qword_1ED887788, v28);

        if (byte_1ED887594)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("BatteryConfig data could not be parsed"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = (void *)MEMORY[0x1E0D7FF98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "lastPathComponent");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "-[PLBatteryAgent logEventNoneBatteryConfigWithRawData:]");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "logMessage:fromFile:fromFunction:fromLineNumber:", v29, v32, v33, 7860);

          PLLogCommon();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)(v25 - 176) = 138412290;
            *(_QWORD *)(v25 - 172) = v29;
            _os_log_debug_impl(&dword_1CAF47000, v34, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)(v25 - 176), 0xCu);
          }

        }
      }

      objc_end_catch();
      JUMPOUT(0x1CB2368A4);
    }
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id PLLogBH()
{
  if (qword_1ED8878B8 != -1)
    dispatch_once(&qword_1ED8878B8, &__block_literal_global_3639);
  return (id)qword_1ED8878B0;
}

void sub_1CB241458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 208), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void networkLinkQualityChangeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:copyItems:", a2, 1);
  v6 = (void *)MEMORY[0x1D179C2E0]();
  objc_msgSend(v7, "networkLinkQualityChanged:withChangedKeys:", a1, v5);
  objc_autoreleasePoolPop(v6);

}

BOOL RegulatorAverageCurrentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
              goto LABEL_53;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
              goto LABEL_56;
            }
          }
          v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
          goto LABEL_54;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
              goto LABEL_53;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
          goto LABEL_54;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
              goto LABEL_53;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
          goto LABEL_54;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
          goto LABEL_54;
        }
        v35 += 7;
        v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
          goto LABEL_56;
        }
      }
      v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
LABEL_53:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHistArrayReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t result;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  Histogram *v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_55:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_69;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_59:
        v41 = 32;
        goto LABEL_68;
      case 3u:
        v29 = 0;
        v30 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_63:
        v41 = 36;
        goto LABEL_68;
      case 6u:
        v35 = 0;
        v36 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_67:
        v41 = 16;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        v40 = objc_alloc_init(Histogram);
        objc_msgSend((id)a1, "addHist:", v40);
        if (PBReaderPlaceMark() && (HistogramReadFrom((uint64_t)v40, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_69;
    }
  }
}

void sub_1CB249D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CB24A9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularCdmaEvdoRrStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_70:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v30 = 0;
          v31 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_74:
          v50 = 24;
          goto LABEL_87;
        case 7u:
          v35 = 0;
          v36 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_78:
          v50 = 16;
          goto LABEL_87;
        case 8u:
          v40 = 0;
          v41 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_82:
          v50 = 28;
          goto LABEL_87;
        case 9u:
          v45 = 0;
          v46 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_86:
      v50 = 20;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackPerStateHistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t result;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  StateHist *v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_55:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_69;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_59:
        v41 = 32;
        goto LABEL_68;
      case 3u:
        v29 = 0;
        v30 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_63:
        v41 = 36;
        goto LABEL_68;
      case 6u:
        v35 = 0;
        v36 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_67:
        v41 = 16;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        v40 = objc_alloc_init(StateHist);
        objc_msgSend((id)a1, "addHist:", v40);
        if (PBReaderPlaceMark() && (StateHistReadFrom((uint64_t)v40, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_69;
    }
  }
}

void logFieldChangedNotificationReceived(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = v2;
  if (v2 && objc_msgSend(v2, "isDebugEnabled"))
  {
    +[PLOperator entryKeyForType:andName:](PLNfcAgent, "entryKeyForType:andName:", *MEMORY[0x1E0D80378], CFSTR("Field"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = CFSTR("State");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", logFieldChangedNotificationReceived_fieldState);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7FFB0]), "initWithEntryKey:withRawData:", v4, v6);
    objc_msgSend(v3, "fieldChangedWithEntry:", v7);
    logFieldChangedNotificationReceived_fieldState ^= 1u;

  }
}

uint64_t AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void TelephonyNotificationCallback()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v0 = objc_opt_class();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __TelephonyNotificationCallback_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    block[4] = v0;
    if (qword_1ED887010 != -1)
      dispatch_once(&qword_1ED887010, block);
    if (byte_1ED886FB1)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("LConnection with CT reseted"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Compositions/Baseband/PLTelephonyConnection.m");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "lastPathComponent");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "TelephonyNotificationCallback");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "logMessage:fromFile:fromFunction:fromLineNumber:", v1, v4, v5, 341);

      PLLogCommon();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v9 = v1;
        _os_log_debug_impl(&dword_1CAF47000, v6, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
}

void sub_1CB25E3B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ServerConnectionCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t block;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D7FFA0], "debugEnabled"))
  {
    v3 = objc_opt_class();
    block = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __ServerConnectionCallback_block_invoke;
    v13 = &__block_descriptor_40_e5_v8__0lu32l8;
    v14 = v3;
    if (qword_1ED887008 != -1)
      dispatch_once(&qword_1ED887008, &block);
    if (byte_1ED886FB0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("received unexpected notification: %@"), a2, block, v11, v12, v13, v14);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Compositions/Baseband/PLTelephonyConnection.m");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "lastPathComponent");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ServerConnectionCallback");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "logMessage:fromFile:fromFunction:fromLineNumber:", v4, v7, v8, 336);

      PLLogCommon();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v4;
        _os_log_debug_impl(&dword_1CAF47000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

    }
  }
}

uint64_t AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 20;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

CFTypeRef createIORegObject(io_registry_entry_t a1, const __CFString *a2)
{
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  CFTypeRef CFProperty;
  NSObject *v7;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  SystemEncoding = CFStringGetSystemEncoding();
  CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
  CFProperty = IORegistryEntryCreateCFProperty(a1, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!CFProperty)
  {
    PLLogCLPC();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = CStringPtr;
      _os_log_error_impl(&dword_1CAF47000, v7, OS_LOG_TYPE_ERROR, "Could not read property \"%s\".", (uint8_t *)&v9, 0xCu);
    }

  }
  return CFProperty;
}

uint64_t shouldUseNewCLPCPath()
{
  void *v0;
  void *v1;

  if (qword_1ED884CD8 != -1)
    dispatch_once(&qword_1ED884CD8, &__block_literal_global_34);
  v0 = (void *)MEMORY[0x1E0D7FFA0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", _MergedGlobals_1_52);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKey:saveToDisk:", v1, CFSTR("newCLPCPath"), 1);

  return _MergedGlobals_1_52;
}

void __shouldUseNewCLPCPath_block_invoke()
{
  void *v0;
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7FFF0]), "initWithGroup:andSubGroup:", CFSTR("CLPC Stats"), CFSTR("Lost Performance"));
  if (v0)
    goto LABEL_5;
  if (qword_1ED884CF8 != -1)
    dispatch_once(&qword_1ED884CF8, &__block_literal_global_147);
  if (byte_1ED884CC1 == 1)
LABEL_5:
    _MergedGlobals_1_52 = v0 == 0;
  PLLogCommon();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = _MergedGlobals_1_52;
    _os_log_impl(&dword_1CAF47000, v1, OS_LOG_TYPE_DEFAULT, "newCLPCPath value is %d", (uint8_t *)v2, 8u);
  }

}

void sub_1CB26F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void __clpcIsLegacy_block_invoke()
{
  NSObject *v0;
  const __CFDictionary *v1;
  NSObject *v2;
  NSObject *v3;
  io_service_t MatchingService;
  io_registry_entry_t v5;
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  const __CFNumber *IORegObject;
  const __CFNumber *v9;
  CFTypeID v10;
  int Value;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  unsigned int valuePtr;
  uint8_t buf[4];
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  PLLogCLPC();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v21 = "AppleCLPC";
    _os_log_debug_impl(&dword_1CAF47000, v0, OS_LOG_TYPE_DEBUG, "Getting service matching \"%s\".", buf, 0xCu);
  }

  v1 = IOServiceMatching("AppleCLPC");
  PLLogCLPC();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v1)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315138;
    v21 = "AppleCLPC";
    v16 = "Could not find service matching \"%s\".";
    goto LABEL_32;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1CAF47000, v3, OS_LOG_TYPE_DEBUG, "Getting master port default", buf, 2u);
  }

  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v1);
  if (!MatchingService)
  {
    PLLogCLPC();
    v3 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315138;
    v21 = "AppleCLPC";
    v16 = "Could not get default service for \"%s\".";
LABEL_32:
    _os_log_error_impl(&dword_1CAF47000, v3, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_18:

    PLLogCLPC();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v15 = "No CLPC service found";
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  v5 = MatchingService;
  valuePtr = 0;
  SystemEncoding = CFStringGetSystemEncoding();
  CStringPtr = CFStringGetCStringPtr(CFSTR("#clpc-version"), SystemEncoding);
  IORegObject = (const __CFNumber *)createIORegObject(v5, CFSTR("#clpc-version"));
  if (IORegObject)
  {
    v9 = IORegObject;
    v10 = CFGetTypeID(IORegObject);
    if (v10 == CFNumberGetTypeID())
    {
      Value = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      PLLogCLPC();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (Value)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = valuePtr;
          _os_log_impl(&dword_1CAF47000, v13, OS_LOG_TYPE_INFO, "Read value: %u", buf, 8u);
        }

        CFRelease(v9);
        if (valuePtr < 2)
        {
          IOObjectRelease(v5);
          PLLogCLPC();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v15 = "System is running legacy CLPC.";
            goto LABEL_30;
          }
        }
        else
        {
          byte_1ED884CC1 = 1;
          IOObjectRelease(v5);
          PLLogCLPC();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v15 = "System is running AMP CLPC.";
LABEL_30:
            _os_log_debug_impl(&dword_1CAF47000, v14, OS_LOG_TYPE_DEBUG, v15, buf, 2u);
          }
        }
LABEL_19:

        return;
      }
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      *(_DWORD *)buf = 136315138;
      v21 = CStringPtr;
      v17 = "Conversion error getting value of key \"%s\".";
    }
    else
    {
      PLLogCLPC();
      v13 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
LABEL_23:

        CFRelease(v9);
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136315138;
      v21 = CStringPtr;
      v17 = "Key \"%s\" unexpectedly not a number.";
    }
    _os_log_error_impl(&dword_1CAF47000, v13, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
    goto LABEL_23;
  }
LABEL_24:
  PLLogCLPC();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1CAF47000, v18, OS_LOG_TYPE_DEBUG, "No clpc-version property => legacy CLPC.", buf, 2u);
  }

  IOObjectRelease(v5);
}

uint64_t KCellularLtePdcchStateStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 144) |= 1u;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)(a2 + v21);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                  break;
                v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0)
                  goto LABEL_109;
                v18 += 7;
                v14 = v19++ >= 9;
                if (v14)
                {
                  v20 = 0;
                  goto LABEL_111;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_109:
              if (*(_BYTE *)(a2 + *v5))
                v20 = 0;
LABEL_111:
              *(_QWORD *)(a1 + 128) = v20;
              goto LABEL_158;
            case 2u:
              if (v16 != 2)
              {
                v67 = 0;
                v68 = 0;
                v69 = 0;
                while (1)
                {
                  v70 = *v3;
                  v71 = *(_QWORD *)(a2 + v70);
                  if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_156;
                  v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
                  *(_QWORD *)(a2 + v70) = v71 + 1;
                  v69 |= (unint64_t)(v72 & 0x7F) << v67;
                  if (v72 < 0)
                  {
                    v67 += 7;
                    v14 = v68++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_157;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v25 = 0;
                v26 = 0;
                v27 = 0;
                while (1)
                {
                  v28 = *v3;
                  v29 = *(_QWORD *)(a2 + v28);
                  if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
                  *(_QWORD *)(a2 + v28) = v29 + 1;
                  v27 |= (unint64_t)(v30 & 0x7F) << v25;
                  if (v30 < 0)
                  {
                    v25 += 7;
                    v14 = v26++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_38;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 3u:
              if (v16 != 2)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                while (1)
                {
                  v76 = *v3;
                  v77 = *(_QWORD *)(a2 + v76);
                  if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_156;
                  v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
                  *(_QWORD *)(a2 + v76) = v77 + 1;
                  v75 |= (unint64_t)(v78 & 0x7F) << v73;
                  if (v78 < 0)
                  {
                    v73 += 7;
                    v14 = v74++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_157;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v31 = 0;
                v32 = 0;
                v33 = 0;
                while (1)
                {
                  v34 = *v3;
                  v35 = *(_QWORD *)(a2 + v34);
                  if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
                  *(_QWORD *)(a2 + v34) = v35 + 1;
                  v33 |= (unint64_t)(v36 & 0x7F) << v31;
                  if (v36 < 0)
                  {
                    v31 += 7;
                    v14 = v32++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_51;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 4u:
              if (v16 != 2)
              {
                v79 = 0;
                v80 = 0;
                v81 = 0;
                while (1)
                {
                  v82 = *v3;
                  v83 = *(_QWORD *)(a2 + v82);
                  if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_156;
                  v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
                  *(_QWORD *)(a2 + v82) = v83 + 1;
                  v81 |= (unint64_t)(v84 & 0x7F) << v79;
                  if (v84 < 0)
                  {
                    v79 += 7;
                    v14 = v80++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_157;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v37 = 0;
                v38 = 0;
                v39 = 0;
                while (1)
                {
                  v40 = *v3;
                  v41 = *(_QWORD *)(a2 + v40);
                  if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
                  *(_QWORD *)(a2 + v40) = v41 + 1;
                  v39 |= (unint64_t)(v42 & 0x7F) << v37;
                  if (v42 < 0)
                  {
                    v37 += 7;
                    v14 = v38++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_64;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 5u:
              v43 = 0;
              v44 = 0;
              v45 = 0;
              *(_BYTE *)(a1 + 144) |= 2u;
              while (2)
              {
                v46 = *v3;
                v47 = *(_QWORD *)(a2 + v46);
                if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
                  *(_QWORD *)(a2 + v46) = v47 + 1;
                  v45 |= (unint64_t)(v48 & 0x7F) << v43;
                  if (v48 < 0)
                  {
                    v43 += 7;
                    v14 = v44++ >= 9;
                    if (v14)
                    {
                      LODWORD(v45) = 0;
                      goto LABEL_115;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v45) = 0;
LABEL_115:
              v66 = 136;
              goto LABEL_120;
            case 6u:
              if (v16 != 2)
              {
                v85 = 0;
                v86 = 0;
                v87 = 0;
                while (1)
                {
                  v88 = *v3;
                  v89 = *(_QWORD *)(a2 + v88);
                  if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_156;
                  v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
                  *(_QWORD *)(a2 + v88) = v89 + 1;
                  v87 |= (unint64_t)(v90 & 0x7F) << v85;
                  if (v90 < 0)
                  {
                    v85 += 7;
                    v14 = v86++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_157;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v49 = 0;
                v50 = 0;
                v51 = 0;
                while (1)
                {
                  v52 = *v3;
                  v53 = *(_QWORD *)(a2 + v52);
                  if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
                  *(_QWORD *)(a2 + v52) = v53 + 1;
                  v51 |= (unint64_t)(v54 & 0x7F) << v49;
                  if (v54 < 0)
                  {
                    v49 += 7;
                    v14 = v50++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_84;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 7u:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v55 = 0;
                  v56 = 0;
                  v57 = 0;
                  while (1)
                  {
                    v58 = *v3;
                    v59 = *(_QWORD *)(a2 + v58);
                    if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
                    *(_QWORD *)(a2 + v58) = v59 + 1;
                    v57 |= (unint64_t)(v60 & 0x7F) << v55;
                    if (v60 < 0)
                    {
                      v55 += 7;
                      v14 = v56++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_97;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_97:
                  PBRepeatedUInt32Add();
                }
LABEL_98:
                PBReaderRecallMark();
              }
              else
              {
                v91 = 0;
                v92 = 0;
                v93 = 0;
                while (1)
                {
                  v94 = *v3;
                  v95 = *(_QWORD *)(a2 + v94);
                  if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
                  *(_QWORD *)(a2 + v94) = v95 + 1;
                  v93 |= (unint64_t)(v96 & 0x7F) << v91;
                  if (v96 < 0)
                  {
                    v91 += 7;
                    v14 = v92++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_157;
                }
LABEL_156:
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_157:
                PBRepeatedUInt32Add();
              }
LABEL_158:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 0xFu:
              v61 = 0;
              v62 = 0;
              v45 = 0;
              *(_BYTE *)(a1 + 144) |= 4u;
              while (2)
              {
                v63 = *v3;
                v64 = *(_QWORD *)(a2 + v63);
                if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
                  *(_QWORD *)(a2 + v63) = v64 + 1;
                  v45 |= (unint64_t)(v65 & 0x7F) << v61;
                  if (v65 < 0)
                  {
                    v61 += 7;
                    v14 = v62++ >= 9;
                    if (v14)
                    {
                      LODWORD(v45) = 0;
                      goto LABEL_119;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v45) = 0;
LABEL_119:
              v66 = 140;
LABEL_120:
              *(_DWORD *)(a1 + v66) = v45;
              goto LABEL_158;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_158;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularRrcModeHistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  uint64_t result;
  uint64_t v165;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_DWORD *)(a1 + 128) |= 1u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_226;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_228;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_226:
              if (*(_BYTE *)(a2 + *v5))
                v19 = 0;
LABEL_228:
              *(_QWORD *)(a1 + 8) = v19;
              goto LABEL_342;
            case 2u:
              v29 = 0;
              v30 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_236;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_236:
              v165 = 68;
              goto LABEL_341;
            case 3u:
              v34 = 0;
              v35 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_240;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_240:
              v165 = 72;
              goto LABEL_341;
            case 4u:
              v39 = 0;
              v40 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              while (2)
              {
                v41 = *v3;
                v42 = *(_QWORD *)(a2 + v41);
                if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                  *(_QWORD *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_244;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_244:
              v165 = 76;
              goto LABEL_341;
            case 5u:
              v44 = 0;
              v45 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              while (2)
              {
                v46 = *v3;
                v47 = *(_QWORD *)(a2 + v46);
                if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
                  *(_QWORD *)(a2 + v46) = v47 + 1;
                  v25 |= (unint64_t)(v48 & 0x7F) << v44;
                  if (v48 < 0)
                  {
                    v44 += 7;
                    v14 = v45++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_248;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_248:
              v165 = 92;
              goto LABEL_341;
            case 6u:
              v49 = 0;
              v50 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              while (2)
              {
                v51 = *v3;
                v52 = *(_QWORD *)(a2 + v51);
                if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
                  *(_QWORD *)(a2 + v51) = v52 + 1;
                  v25 |= (unint64_t)(v53 & 0x7F) << v49;
                  if (v53 < 0)
                  {
                    v49 += 7;
                    v14 = v50++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_252;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_252:
              v165 = 96;
              goto LABEL_341;
            case 7u:
              v54 = 0;
              v55 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              while (2)
              {
                v56 = *v3;
                v57 = *(_QWORD *)(a2 + v56);
                if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
                  *(_QWORD *)(a2 + v56) = v57 + 1;
                  v25 |= (unint64_t)(v58 & 0x7F) << v54;
                  if (v58 < 0)
                  {
                    v54 += 7;
                    v14 = v55++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_256;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_256:
              v165 = 100;
              goto LABEL_341;
            case 8u:
              v59 = 0;
              v60 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              while (2)
              {
                v61 = *v3;
                v62 = *(_QWORD *)(a2 + v61);
                if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
                  *(_QWORD *)(a2 + v61) = v62 + 1;
                  v25 |= (unint64_t)(v63 & 0x7F) << v59;
                  if (v63 < 0)
                  {
                    v59 += 7;
                    v14 = v60++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_260;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_260:
              v165 = 104;
              goto LABEL_341;
            case 9u:
              v64 = 0;
              v65 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              while (2)
              {
                v66 = *v3;
                v67 = *(_QWORD *)(a2 + v66);
                if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
                  *(_QWORD *)(a2 + v66) = v67 + 1;
                  v25 |= (unint64_t)(v68 & 0x7F) << v64;
                  if (v68 < 0)
                  {
                    v64 += 7;
                    v14 = v65++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_264;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_264:
              v165 = 108;
              goto LABEL_341;
            case 0xAu:
              v69 = 0;
              v70 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              while (2)
              {
                v71 = *v3;
                v72 = *(_QWORD *)(a2 + v71);
                if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v72);
                  *(_QWORD *)(a2 + v71) = v72 + 1;
                  v25 |= (unint64_t)(v73 & 0x7F) << v69;
                  if (v73 < 0)
                  {
                    v69 += 7;
                    v14 = v70++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_268;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_268:
              v165 = 112;
              goto LABEL_341;
            case 0xBu:
              v74 = 0;
              v75 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x4000000u;
              while (2)
              {
                v76 = *v3;
                v77 = *(_QWORD *)(a2 + v76);
                if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
                  *(_QWORD *)(a2 + v76) = v77 + 1;
                  v25 |= (unint64_t)(v78 & 0x7F) << v74;
                  if (v78 < 0)
                  {
                    v74 += 7;
                    v14 = v75++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_272;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_272:
              v165 = 116;
              goto LABEL_341;
            case 0xCu:
              v79 = 0;
              v80 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x8000000u;
              while (2)
              {
                v81 = *v3;
                v82 = *(_QWORD *)(a2 + v81);
                if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
                  *(_QWORD *)(a2 + v81) = v82 + 1;
                  v25 |= (unint64_t)(v83 & 0x7F) << v79;
                  if (v83 < 0)
                  {
                    v79 += 7;
                    v14 = v80++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_276;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_276:
              v165 = 120;
              goto LABEL_341;
            case 0xDu:
              v84 = 0;
              v85 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              while (2)
              {
                v86 = *v3;
                v87 = *(_QWORD *)(a2 + v86);
                if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
                  *(_QWORD *)(a2 + v86) = v87 + 1;
                  v25 |= (unint64_t)(v88 & 0x7F) << v84;
                  if (v88 < 0)
                  {
                    v84 += 7;
                    v14 = v85++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_280;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_280:
              v165 = 80;
              goto LABEL_341;
            case 0xEu:
              v89 = 0;
              v90 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              while (2)
              {
                v91 = *v3;
                v92 = *(_QWORD *)(a2 + v91);
                if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
                  *(_QWORD *)(a2 + v91) = v92 + 1;
                  v25 |= (unint64_t)(v93 & 0x7F) << v89;
                  if (v93 < 0)
                  {
                    v89 += 7;
                    v14 = v90++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_284;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_284:
              v165 = 84;
              goto LABEL_341;
            case 0xFu:
              v94 = 0;
              v95 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              while (2)
              {
                v96 = *v3;
                v97 = *(_QWORD *)(a2 + v96);
                if (v97 == -1 || v97 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v98 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v97);
                  *(_QWORD *)(a2 + v96) = v97 + 1;
                  v25 |= (unint64_t)(v98 & 0x7F) << v94;
                  if (v98 < 0)
                  {
                    v94 += 7;
                    v14 = v95++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_288;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_288:
              v165 = 88;
              goto LABEL_341;
            case 0x10u:
              v99 = 0;
              v100 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 2u;
              while (2)
              {
                v101 = *v3;
                v102 = *(_QWORD *)(a2 + v101);
                if (v102 == -1 || v102 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v103 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v102);
                  *(_QWORD *)(a2 + v101) = v102 + 1;
                  v25 |= (unint64_t)(v103 & 0x7F) << v99;
                  if (v103 < 0)
                  {
                    v99 += 7;
                    v14 = v100++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_292;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_292:
              v165 = 16;
              goto LABEL_341;
            case 0x11u:
              v104 = 0;
              v105 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 4u;
              while (2)
              {
                v106 = *v3;
                v107 = *(_QWORD *)(a2 + v106);
                if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v107);
                  *(_QWORD *)(a2 + v106) = v107 + 1;
                  v25 |= (unint64_t)(v108 & 0x7F) << v104;
                  if (v108 < 0)
                  {
                    v104 += 7;
                    v14 = v105++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_296;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_296:
              v165 = 20;
              goto LABEL_341;
            case 0x12u:
              v109 = 0;
              v110 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x40u;
              while (2)
              {
                v111 = *v3;
                v112 = *(_QWORD *)(a2 + v111);
                if (v112 == -1 || v112 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v113 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
                  *(_QWORD *)(a2 + v111) = v112 + 1;
                  v25 |= (unint64_t)(v113 & 0x7F) << v109;
                  if (v113 < 0)
                  {
                    v109 += 7;
                    v14 = v110++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_300;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_300:
              v165 = 36;
              goto LABEL_341;
            case 0x13u:
              v114 = 0;
              v115 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x80u;
              while (2)
              {
                v116 = *v3;
                v117 = *(_QWORD *)(a2 + v116);
                if (v117 == -1 || v117 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v118 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v117);
                  *(_QWORD *)(a2 + v116) = v117 + 1;
                  v25 |= (unint64_t)(v118 & 0x7F) << v114;
                  if (v118 < 0)
                  {
                    v114 += 7;
                    v14 = v115++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_304;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_304:
              v165 = 40;
              goto LABEL_341;
            case 0x14u:
              v119 = 0;
              v120 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x100u;
              while (2)
              {
                v121 = *v3;
                v122 = *(_QWORD *)(a2 + v121);
                if (v122 == -1 || v122 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v122);
                  *(_QWORD *)(a2 + v121) = v122 + 1;
                  v25 |= (unint64_t)(v123 & 0x7F) << v119;
                  if (v123 < 0)
                  {
                    v119 += 7;
                    v14 = v120++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_308;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_308:
              v165 = 44;
              goto LABEL_341;
            case 0x15u:
              v124 = 0;
              v125 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x200u;
              while (2)
              {
                v126 = *v3;
                v127 = *(_QWORD *)(a2 + v126);
                if (v127 == -1 || v127 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v128 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v127);
                  *(_QWORD *)(a2 + v126) = v127 + 1;
                  v25 |= (unint64_t)(v128 & 0x7F) << v124;
                  if (v128 < 0)
                  {
                    v124 += 7;
                    v14 = v125++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_312;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_312:
              v165 = 48;
              goto LABEL_341;
            case 0x16u:
              v129 = 0;
              v130 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x400u;
              while (2)
              {
                v131 = *v3;
                v132 = *(_QWORD *)(a2 + v131);
                if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v132);
                  *(_QWORD *)(a2 + v131) = v132 + 1;
                  v25 |= (unint64_t)(v133 & 0x7F) << v129;
                  if (v133 < 0)
                  {
                    v129 += 7;
                    v14 = v130++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_316;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_316:
              v165 = 52;
              goto LABEL_341;
            case 0x17u:
              v134 = 0;
              v135 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x800u;
              while (2)
              {
                v136 = *v3;
                v137 = *(_QWORD *)(a2 + v136);
                if (v137 == -1 || v137 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v138 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v137);
                  *(_QWORD *)(a2 + v136) = v137 + 1;
                  v25 |= (unint64_t)(v138 & 0x7F) << v134;
                  if (v138 < 0)
                  {
                    v134 += 7;
                    v14 = v135++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_320;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_320:
              v165 = 56;
              goto LABEL_341;
            case 0x18u:
              v139 = 0;
              v140 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              while (2)
              {
                v141 = *v3;
                v142 = *(_QWORD *)(a2 + v141);
                if (v142 == -1 || v142 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v142);
                  *(_QWORD *)(a2 + v141) = v142 + 1;
                  v25 |= (unint64_t)(v143 & 0x7F) << v139;
                  if (v143 < 0)
                  {
                    v139 += 7;
                    v14 = v140++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_324;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_324:
              v165 = 60;
              goto LABEL_341;
            case 0x19u:
              v144 = 0;
              v145 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              while (2)
              {
                v146 = *v3;
                v147 = *(_QWORD *)(a2 + v146);
                if (v147 == -1 || v147 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v148 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v147);
                  *(_QWORD *)(a2 + v146) = v147 + 1;
                  v25 |= (unint64_t)(v148 & 0x7F) << v144;
                  if (v148 < 0)
                  {
                    v144 += 7;
                    v14 = v145++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_328;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_328:
              v165 = 64;
              goto LABEL_341;
            case 0x1Au:
              v149 = 0;
              v150 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 8u;
              while (2)
              {
                v151 = *v3;
                v152 = *(_QWORD *)(a2 + v151);
                if (v152 == -1 || v152 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v153 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
                  *(_QWORD *)(a2 + v151) = v152 + 1;
                  v25 |= (unint64_t)(v153 & 0x7F) << v149;
                  if (v153 < 0)
                  {
                    v149 += 7;
                    v14 = v150++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_332;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_332:
              v165 = 24;
              goto LABEL_341;
            case 0x1Bu:
              v154 = 0;
              v155 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x10u;
              while (2)
              {
                v156 = *v3;
                v157 = *(_QWORD *)(a2 + v156);
                if (v157 == -1 || v157 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v158 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v157);
                  *(_QWORD *)(a2 + v156) = v157 + 1;
                  v25 |= (unint64_t)(v158 & 0x7F) << v154;
                  if (v158 < 0)
                  {
                    v154 += 7;
                    v14 = v155++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_336;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_336:
              v165 = 28;
              goto LABEL_341;
            case 0x1Cu:
              v159 = 0;
              v160 = 0;
              v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x20u;
              while (2)
              {
                v161 = *v3;
                v162 = *(_QWORD *)(a2 + v161);
                if (v162 == -1 || v162 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v163 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v162);
                  *(_QWORD *)(a2 + v161) = v162 + 1;
                  v25 |= (unint64_t)(v163 & 0x7F) << v159;
                  if (v163 < 0)
                  {
                    v159 += 7;
                    v14 = v160++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_340;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_340:
              v165 = 32;
              goto LABEL_341;
            default:
              if ((v10 >> 3) == 127)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_DWORD *)(a1 + 128) |= 0x10000000u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_230;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_232;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_230:
                if (*(_BYTE *)(a2 + *v5))
                  LODWORD(v25) = 0;
LABEL_232:
                v165 = 124;
LABEL_341:
                *(_DWORD *)(a1 + v165) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_342:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularLtePagingCycleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_70:
          v50 = 16;
          goto LABEL_87;
        case 3u:
          v29 = 0;
          v30 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_74:
          v50 = 28;
          goto LABEL_87;
        case 4u:
          v34 = 0;
          v35 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_78:
          v50 = 20;
          goto LABEL_87;
        case 6u:
          v40 = 0;
          v41 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_82:
          v50 = 24;
          goto LABEL_87;
        case 0xFu:
          v45 = 0;
          v46 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_86:
      v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t UtraFddStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v8 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v11 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v12 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v13 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v14 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v15 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v16 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v17 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v18 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v19 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v20 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x80u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_113;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              LODWORD(v32) = 0;
              goto LABEL_115;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_113:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_115:
          v104 = v8[142];
          goto LABEL_160;
        case 2u:
          v43 = 0;
          v44 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 2u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v32 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_119:
          v104 = v10[143];
          goto LABEL_160;
        case 3u:
          v48 = 0;
          v49 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x200u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v32 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v27 = v49++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_123:
          v104 = v11[144];
          goto LABEL_160;
        case 4u:
          v53 = 0;
          v54 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x40u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v32 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v27 = v54++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_127:
          v104 = v12[145];
          goto LABEL_160;
        case 5u:
          v58 = 0;
          v59 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x100u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v32 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v27 = v59++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_131;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_131:
          v104 = v13[146];
          goto LABEL_160;
        case 6u:
          v63 = 0;
          v64 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x20u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v32 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v27 = v64++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_135;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_135:
          v104 = v14[147];
          goto LABEL_160;
        case 7u:
          v68 = 0;
          v69 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x800u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v32 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                v27 = v69++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_139;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_139:
          v104 = v15[148];
          goto LABEL_160;
        case 8u:
          v73 = 0;
          v74 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x1000u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v32 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v27 = v74++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_143:
          v104 = v16[149];
          goto LABEL_160;
        case 9u:
          v78 = 0;
          v79 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x400u;
          while (2)
          {
            v80 = *v3;
            v81 = *(_QWORD *)(a2 + v80);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v32 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                v27 = v79++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_147:
          v104 = v17[150];
          goto LABEL_160;
        case 0xAu:
          v83 = 0;
          v84 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 8u;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v86);
              *(_QWORD *)(a2 + v85) = v86 + 1;
              v32 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                v27 = v84++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_151:
          v104 = v18[151];
          goto LABEL_160;
        case 0xBu:
          v88 = 0;
          v89 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 0x10u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v32 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                v27 = v89++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_155:
          v104 = v19[152];
          goto LABEL_160;
        case 0xCu:
          v93 = 0;
          v94 = 0;
          v32 = 0;
          *(_WORD *)(a1 + v7[141]) |= 4u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v32 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                v27 = v94++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_159:
          v104 = v20[153];
LABEL_160:
          *(_DWORD *)(a1 + v104) = v32;
          continue;
        case 0xDu:
          v98 = 0;
          v99 = 0;
          v100 = 0;
          *(_WORD *)(a1 + v7[141]) |= 1u;
          break;
        default:
          v36 = v8;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v13 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          a1 = v41;
          v14 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v11 = v39;
          v16 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v7 = v38;
          v19 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v10 = v37;
          v17 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v8 = v36;
          v18 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v101 = *v3;
        v102 = *(_QWORD *)(a2 + v101);
        if (v102 == -1 || v102 >= *(_QWORD *)(a2 + *v4))
          break;
        v103 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v102);
        *(_QWORD *)(a2 + v101) = v102 + 1;
        v100 |= (unint64_t)(v103 & 0x7F) << v98;
        if ((v103 & 0x80) == 0)
          goto LABEL_164;
        v98 += 7;
        v27 = v99++ >= 9;
        if (v27)
        {
          v100 = 0;
          goto LABEL_166;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_164:
      if (*(_BYTE *)(a2 + *v5))
        v100 = 0;
LABEL_166:
      *(_QWORD *)(a1 + 8) = v100;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogWifi()
{
  if (qword_1ED885058 != -1)
    dispatch_once(&qword_1ED885058, &__block_literal_global_43);
  return (id)qword_1ED885050;
}

void WiFiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v3 = a3;
  objc_msgSend(v3, "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __WiFiDeviceAttached_block_invoke;
  block[3] = &unk_1E85780C8;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void WiFiVirtualInterfaceCallback(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  uint64_t *v14;
  _QWORD block[4];
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v4 = a3;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__15;
  v22 = __Block_byref_object_dispose__15;
  v5 = a2;
  v23 = v5;
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("LINK_CHANGED_IS_LINKDOWN"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v4, "workQueue");
      v7 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __WiFiVirtualInterfaceCallback_block_invoke;
      block[3] = &unk_1E85803C0;
      v16 = v4;
      v17 = &v18;
      dispatch_async(v7, block);

    }
  }
  v8 = (void *)v19[5];
  if (v8)
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D4FE30]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend((id)v19[5], "objectForKeyedSubscript:", *MEMORY[0x1E0D4FE28]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        objc_msgSend(v4, "workQueue");
        v11 = objc_claimAutoreleasedReturnValue();
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __WiFiVirtualInterfaceCallback_block_invoke_2;
        v12[3] = &unk_1E85803C0;
        v13 = v4;
        v14 = &v18;
        dispatch_async(v11, v12);

      }
    }
  }
  _Block_object_dispose(&v18, 8);

}

void sub_1CB29C388(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t WiFiStateChangeCallback(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "logFromCFCallback:", CFSTR("WiFiStateChangeCallback"));
}

uint64_t WiFiLinkChangeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "logFromLinkChangeCallback:withStats:", CFSTR("WiFiLinkChangeCallback"), a2);
}

void WiFiDeviceAvailableCallback(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  const __CFBoolean *Value;
  void *v5;
  id v6;

  v6 = a3;
  if (a2)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("DRIVER_AVAILABLE"));
    if (CFBooleanGetValue(Value))
    {
      if (CFDictionaryContainsKey(a2, CFSTR("IO80211InterfaceWoWWakeUpParams")))
        v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:copyItems:", CFDictionaryGetValue(a2, CFSTR("IO80211InterfaceWoWWakeUpParams")), 1);
      else
        v5 = 0;
      objc_msgSend(v6, "logFromWiFiNoAvailableCallback:withAvailability:withWakeParams:", CFSTR("WiFiDeviceAvailableCallback"), 1, v5);

    }
  }

}

void WiFiClientScanCacheCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  CFTypeID TypeID;
  id v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__15;
  v18 = __Block_byref_object_dispose__15;
  v19 = a5;
  if (a2)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      CFRetain(a2);
      v7 = a2;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v7);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v15[5] && v8)
      {
        CFRelease(v7);
        objc_msgSend((id)v15[5], "workQueue");
        v10 = objc_claimAutoreleasedReturnValue();
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __WiFiClientScanCacheCallback_block_invoke;
        v11[3] = &unk_1E857DC60;
        v13 = &v14;
        v12 = v9;
        dispatch_async(v10, v11);

      }
    }
  }
  _Block_object_dispose(&v14, 8);

}

void sub_1CB29CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WiFiManagerClientUserAutoJoinStateChangedCallback1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "logFromAJCallback:withFlag:withStats:", CFSTR("WiFiManagerClientUserAutoJoinStateChangedCallback"), a2, a3);
}

void WiFiDeviceLinkQualityChanged(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v4 = a3;
  v5 = objc_msgSend(v4, "remainingAllowedRSSIEntryCount");
  if (a2 && v5)
  {
    v6 = a2;
    objc_msgSend(v4, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __WiFiDeviceLinkQualityChanged_block_invoke;
    v9[3] = &unk_1E85791E0;
    v10 = v4;
    v11 = v6;
    v8 = v6;
    dispatch_async(v7, v9);

  }
}

id PLLogSensor()
{
  if (qword_1ED885258 != -1)
    dispatch_once(&qword_1ED885258, &__block_literal_global_44);
  return (id)_MergedGlobals_1_56;
}

void hidEventCallback(void *a1)
{
  id v1;
  int IntegerValue;
  unsigned int v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (IOHIDEventGetType() == 14)
  {
    IntegerValue = IOHIDEventGetIntegerValue();
    v3 = IntegerValue & 0x400;
    PLLogSensor();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v16 = IntegerValue;
      v17 = 1024;
      v18 = v3 >> 10;
      _os_log_debug_impl(&dword_1CAF47000, v4, OS_LOG_TYPE_DEBUG, "Proximity event: Mask 0x%x, PocketState: %d", buf, 0xEu);
    }

    objc_msgSend(v1, "stateTracker");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "getCurrState:", 4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "BOOLValue"))
    {
      v13 = CFSTR("State");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3 != 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v7;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "logEventPointProximity:", v8);

    }
    else if (objc_msgSend(v1, "firstProximityEvent"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3 != 0, CFSTR("State"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "logEventPointProximity:", v10);

      objc_msgSend(v1, "setFirstProximityEvent:", 0);
    }

  }
}

uint64_t KCellularDownlinkIpPacketFilterStatusReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  Filter *v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_60;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_62;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_62:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_81;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_66:
        v48 = 16;
        goto LABEL_80;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_70:
        v49 = v31 != 0;
        v50 = 36;
        goto LABEL_75;
      case 4u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 40) |= 0x10u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 1;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                v37 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
LABEL_74:
        v49 = v37 != 0;
        v50 = 37;
LABEL_75:
        *(_BYTE *)(a1 + v50) = v49;
        goto LABEL_81;
      case 5u:
        v41 = objc_alloc_init(Filter);
        objc_msgSend((id)a1, "addFilters:", v41);
        if (PBReaderPlaceMark() && FilterReadFrom((uint64_t)v41, a2))
        {
          PBReaderRecallMark();

LABEL_81:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xFu:
        v43 = 0;
        v44 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v25 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_79:
        v48 = 32;
LABEL_80:
        *(_DWORD *)(a1 + v48) = v25;
        goto LABEL_81;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_81;
    }
  }
}

void TestEntryQueriesRequested(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v5 = a2;
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testMonotonicAggregateEntries")))
  {
    objc_msgSend(v5, "testMonotonicAggregateEntries");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testMonotonicAggregateEntriesExtendedTime")))
  {
    objc_msgSend(v5, "testMonotonicAggregateEntriesExtendedTime");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testProportionateAggregateEntries")))
  {
    objc_msgSend(v5, "testProportionateAggregateEntries");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testEntryQueries")))
  {
    objc_msgSend(v5, "testEntryQueries");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testEntryDelete")))
  {
    objc_msgSend(v5, "testEntryDelete");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testEntryApplicationAgent")))
  {
    objc_msgSend(v5, "testEntryApplicationAgent");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testEntrySleep")))
  {
    objc_msgSend(v5, "testEntrySleep");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testEntryWake")))
  {
    objc_msgSend(v5, "testEntryWake");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testAllEntryKeyRequests")))
  {
    objc_msgSend(v5, "testAllEntryKeyRequests");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testFastInserts")))
  {
    objc_msgSend(v5, "testFastInserts");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.QMI")))
  {
    objc_msgSend(v5, "testABM");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.TestArrays")))
  {
    objc_msgSend(v5, "testArray");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.generateOTASubmission")))
  {
    objc_msgSend(v5, "testGenerateOTASubmission");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.generateSafeguardSubmission")))
  {
    objc_msgSend(v5, "testGenerateSafeguardSubmission");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.scheduleSafeguardSubmission")))
  {
    objc_msgSend(v5, "testScheduleSafeguardSubmission");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressTaskingSubmission")))
  {
    objc_msgSend(v5, "stressTaskingSubmission");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.dailyTasks")))
  {
    objc_msgSend(v5, "testDailyTasks");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.archive")))
  {
    objc_msgSend(v5, "testArchive");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.trimEPSQL")))
  {
    objc_msgSend(v5, "testTrimEPSQL");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.trimCESQL")))
  {
    objc_msgSend(v5, "testTrimCESQL");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.trimXCSQL")))
  {
    objc_msgSend(v5, "testTrimXCSQL");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.trimBGSQL")))
  {
    objc_msgSend(v5, "testTrimBGSQL");
    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.logSizeOfStagingEntryCache")))
  {
    objc_msgSend(MEMORY[0x1E0D80040], "sharedStorageCache");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "logSizeOfStagingEntryCache");
LABEL_76:

    goto LABEL_77;
  }
  if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.dumpStagingEntryCache")))
  {
    objc_msgSend(MEMORY[0x1E0D80040], "sharedStorageCache");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dumpStagingEntryCache");
    goto LABEL_76;
  }
  if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stresstimer")))
  {
    if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressplentry")))
    {
      if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stresscache")))
      {
        if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stresscachesmall")))
        {
          if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressObjectForKey")))
          {
            if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressSetObjectForKey")))
            {
              if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressActivityScheduler")))
              {
                if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressMidnightCalculation")))
                {
                  if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressMonotonicTimer")))
                  {
                    if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressMonotonicTimer2")))
                    {
                      if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressMonotonicTimer3")))
                      {
                        if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testMonotonicTimerThroughSleep")))
                        {
                          if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.currentBasebandTime")))
                          {
                            if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testExit")))
                            {
                              if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testQuarantineExit")))
                              {
                                if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testBlockingFlushCaches")))
                                {
                                  if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressAggregateSmall")))
                                  {
                                    if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.stressAggregateVerySmall")))
                                    {
                                      if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testUTF8")))
                                      {
                                        if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.testCompression")))
                                        {
                                          if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.fireSBC")))
                                          {
                                            if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.aggregateDataFromSignpost")))
                                            {
                                              if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.appIdentifierTables")))
                                              {
                                                if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.DMATables")))
                                                {
                                                  if (objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.appIdentifierColumns")))
                                                  {
                                                    if (!objc_msgSend(a3, "caseInsensitiveCompare:", CFSTR("com.apple.powerlogd.trimQueries")))objc_msgSend(v5, "constructTrimQueries");
                                                  }
                                                  else
                                                  {
                                                    objc_msgSend(v5, "constructAppIdentifierColumns");
                                                  }
                                                }
                                                else
                                                {
                                                  objc_msgSend(v5, "constructDMATables");
                                                }
                                              }
                                              else
                                              {
                                                objc_msgSend(v5, "constructAppIdentifierTables");
                                              }
                                            }
                                            else
                                            {
                                              objc_msgSend(v5, "aggregateDataFromSignpost");
                                            }
                                          }
                                          else
                                          {
                                            objc_msgSend(v5, "fireSignificantBatteryChangeNotification");
                                          }
                                        }
                                        else
                                        {
                                          objc_msgSend(v5, "testCompression");
                                        }
                                      }
                                      else
                                      {
                                        objc_msgSend(v5, "testUTF8");
                                      }
                                    }
                                    else
                                    {
                                      objc_msgSend(v5, "stressAggregateVerySmall");
                                    }
                                  }
                                  else
                                  {
                                    objc_msgSend(v5, "stressAggregateSmall");
                                  }
                                }
                                else
                                {
                                  objc_msgSend(v5, "testBlockingFlushCaches");
                                }
                              }
                              else
                              {
                                objc_msgSend(v5, "testQuarantineExit");
                              }
                            }
                            else
                            {
                              objc_msgSend(v5, "testExit");
                            }
                          }
                          else
                          {
                            objc_msgSend(v5, "currentBasebandTime");
                          }
                        }
                        else
                        {
                          objc_msgSend(v5, "testMonotonicTimerThroughSleep");
                        }
                      }
                      else
                      {
                        objc_msgSend(v5, "stressMonotonicTimer3");
                      }
                    }
                    else
                    {
                      objc_msgSend(v5, "stressMonotonicTimer2");
                    }
                  }
                  else
                  {
                    objc_msgSend(v5, "stressMonotonicTimer");
                  }
                }
                else
                {
                  objc_msgSend(v5, "stressMidnightCalculation");
                }
              }
              else
              {
                objc_msgSend(v5, "stressActivityScheduler");
              }
            }
            else
            {
              objc_msgSend(v5, "stressSetObjectForKey");
            }
          }
          else
          {
            objc_msgSend(v5, "stressObjectForKey");
          }
        }
        else
        {
          objc_msgSend(v5, "stressCacheSmall");
        }
      }
      else
      {
        objc_msgSend(v5, "stressCache");
      }
    }
    else
    {
      objc_msgSend(v5, "stressPLEntry");
    }
  }
  else
  {
    objc_msgSend(v5, "stressTimer");
  }
LABEL_77:

}

void TestEntryLogRequested(uint64_t a1, void *a2, void *a3)
{
  id v4;

  objc_msgSend(a3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("com.apple.powerlogd.testEntryLog."), &stru_1E8587D00);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "testEntryLogRequestedForEntryKey:", v4);

}

void sub_1CB2C5290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB2C9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void testLogEvents(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  _QWORD v51[3];
  const __CFString *v52;
  void *v53;
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[9];
  _QWORD v73[3];
  _QWORD v74[3];
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[3];
  _QWORD v81[3];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[4];
  _QWORD v88[6];

  v88[4] = *MEMORY[0x1E0C80C00];
  v87[0] = CFSTR("bundleID");
  v87[1] = CFSTR("updateType");
  v88[0] = CFSTR("cloudphotod");
  v88[1] = &unk_1E8634CF8;
  v87[2] = CFSTR("eventIntervals");
  v84[0] = CFSTR("startDate");
  v2 = (void *)MEMORY[0x1E0C99D68];
  v50 = a2;
  objc_msgSend(v2, "dateWithTimeIntervalSince1970:", 0.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v84[1] = CFSTR("endDate");
  v85[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 3.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v85[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v85, v84, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v86[0] = v5;
  v82[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 8.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v82[1] = CFSTR("endDate");
  v83[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 25.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v83[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v83, v82, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v86[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v86, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v87[3] = CFSTR("childBundleIDToWeight");
  v88[2] = v9;
  v88[3] = &unk_1E864DE58;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v88, v87, 4);
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  v80[0] = CFSTR("bundleID");
  v80[1] = CFSTR("updateType");
  v81[0] = CFSTR("com.apple.bird");
  v81[1] = &unk_1E8634CF8;
  v80[2] = CFSTR("eventIntervals");
  v77[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 0.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v78[0] = v10;
  v77[1] = CFSTR("endDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 5.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v78[1] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v78, v77, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v79[0] = v12;
  v75[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 7.0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v76[0] = v13;
  v75[1] = CFSTR("endDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 12.0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v76[1] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v76, v75, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v79[1] = v15;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v79, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v81[2] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v81, v80, 3);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  v73[0] = CFSTR("bundleID");
  v73[1] = CFSTR("updateType");
  v74[0] = CFSTR("nsurlsessiond");
  v74[1] = &unk_1E8634CF8;
  v73[2] = CFSTR("eventIntervals");
  v70[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 0.0);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v70[1] = CFSTR("endDate");
  v71[0] = v47;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v71[1] = v46;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, v70, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v72[0] = v45;
  v68[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v68[1] = CFSTR("endDate");
  v69[0] = v44;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v69[1] = v43;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v69, v68, 2);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v72[1] = v42;
  v66[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v66[1] = CFSTR("endDate");
  v67[0] = v41;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v67[1] = v40;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v72[2] = v39;
  v64[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1.0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v64[1] = CFSTR("endDate");
  v65[0] = v38;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 2.0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v65[1] = v37;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 2);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v72[3] = v36;
  v62[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 2.0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v62[1] = CFSTR("endDate");
  v63[0] = v35;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 7.0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v63[1] = v34;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v72[4] = v33;
  v60[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 7.0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v60[1] = CFSTR("endDate");
  v61[0] = v32;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 14.0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v61[1] = v31;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v61, v60, 2);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v72[5] = v30;
  v58[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 20.0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v58[1] = CFSTR("endDate");
  v59[0] = v29;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 24.0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v59[1] = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v59, v58, 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v72[6] = v18;
  v56[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 27.0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v56[1] = CFSTR("endDate");
  v57[0] = v19;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 34.0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v57[1] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v57, v56, 2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v72[7] = v21;
  v54[0] = CFSTR("startDate");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 34.0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v54[1] = CFSTR("endDate");
  v55[0] = v22;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 40.0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v55[1] = v23;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v55, v54, 2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v72[8] = v24;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v72, 9);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v74[2] = v25;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, v73, 3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v51[0] = v49;
  v51[1] = v48;
  v51[2] = v28;
  v52 = CFSTR("events");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v51, 3);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = v26;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v50, "didReceiveEventWithPayload:", v27);
}

void testReportEnergy(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "energyResponse");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("energyResponse=%@"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0D7FF98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Services/PLDuetService.m");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "lastPathComponent");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "testReportEnergy");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "logMessage:fromFile:fromFunction:fromLineNumber:", v3, v6, v7, 684);

  PLLogCommon();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v10 = v3;
    _os_log_debug_impl(&dword_1CAF47000, v8, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }

}

uint64_t testStartEvent(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didReceiveStartEventWithPayload:", &unk_1E864DEA8);
}

uint64_t testStartEvent2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didReceiveStartEventWithPayload:", &unk_1E864DEF8);
}

id testStopEvent(uint64_t a1, void *a2)
{
  return (id)objc_msgSend(a2, "didReceiveStopEventWithPayload:", &unk_1E864DF48);
}

void testStopEvent2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v8[1] = CFSTR("info");
  v9[0] = CFSTR("diagnosticd");
  v6[0] = &unk_1E8634CF8;
  v6[1] = &unk_1E8634D40;
  v7[0] = &unk_1E8653850;
  v7[1] = &unk_1E8653860;
  v8[0] = CFSTR("bundleID");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v2, "didReceiveStopEventWithPayload:", v4);

}

uint64_t testReset(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didReceiveReset");
}

void testCapping(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  double v4;
  unsigned int v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = 0;
  v4 = 0.0;
  do
  {
    v16 = v3;
    v5 = -20;
    v6 = 0.0;
    do
    {
      objc_msgSend(v2, "capUtilizationInSeconds:withUpperBoundInError:withCapInError:withCappedUpperBound:", v4, 90.0, 1.0, 30.0);
      v8 = v7;
      objc_msgSend(v2, "capUtilizationInSeconds:withUpperBoundInError:withCapInError:withCappedUpperBound:", v6, 90.0, 10.0, 30.0);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f, %f => %f, %f"), *(_QWORD *)&v4, *(_QWORD *)&v6, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (void *)MEMORY[0x1E0D7FF98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Services/PLDuetService.m");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "lastPathComponent");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "testCappingWithInput");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "logMessage:fromFile:fromFunction:fromLineNumber:", v10, v13, v14, 1034);

      PLLogCommon();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v18 = v10;
        _os_log_debug_impl(&dword_1CAF47000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

      v6 = v6 + 20.0;
      v5 += 20;
    }
    while (v5 < 0xB4);
    v4 = v4 + 20.0;
    v3 = v16 + 20;
  }
  while (v16 < 0xB4);

}

uint64_t EutraStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  int *v34;
  int *v35;
  int *v36;
  int *v37;
  int *v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v10 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v11 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v12 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v13 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v14 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v15 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v16 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v17 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    v18 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_12;
        v19 += 7;
        v25 = v20++ >= 9;
        if (v25)
        {
          v21 = 0;
          v26 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v26 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v21 = 0;
LABEL_14:
      if (v26 || (v21 & 7) == 4)
        break;
      switch((v21 >> 3))
      {
        case 1u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x10u;
          while (1)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
              break;
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
              goto LABEL_92;
            v28 += 7;
            v25 = v29++ >= 9;
            if (v25)
            {
              LODWORD(v30) = 0;
              goto LABEL_94;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_94:
          v87 = v9[190];
          goto LABEL_127;
        case 2u:
          v41 = 0;
          v42 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 2u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v30 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                v25 = v42++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_98:
          v87 = v10[191];
          goto LABEL_127;
        case 3u:
          v46 = 0;
          v47 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x40u;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v30 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v25 = v47++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_102:
          v87 = v11[192];
          goto LABEL_127;
        case 4u:
          v51 = 0;
          v52 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 8u;
          while (2)
          {
            v53 = *v3;
            v54 = *(_QWORD *)(a2 + v53);
            if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v54);
              *(_QWORD *)(a2 + v53) = v54 + 1;
              v30 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                v25 = v52++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_106:
          v87 = v12[193];
          goto LABEL_127;
        case 5u:
          v56 = 0;
          v57 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x20u;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v30 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                v25 = v57++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_110:
          v87 = v13[194];
          goto LABEL_127;
        case 6u:
          v61 = 0;
          v62 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 4u;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v30 |= (unint64_t)(v65 & 0x7F) << v61;
              if (v65 < 0)
              {
                v61 += 7;
                v25 = v62++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_114;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_114:
          v87 = v14[195];
          goto LABEL_127;
        case 7u:
          v66 = 0;
          v67 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x100u;
          while (2)
          {
            v68 = *v3;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v30 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                v25 = v67++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_118;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_118:
          v87 = v15[196];
          goto LABEL_127;
        case 8u:
          v71 = 0;
          v72 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x200u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v30 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                v25 = v72++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_122;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_122:
          v87 = v16[197];
          goto LABEL_127;
        case 9u:
          v76 = 0;
          v77 = 0;
          v30 = 0;
          *(_WORD *)(a1 + v7[189]) |= 0x80u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v30 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v25 = v77++ >= 9;
                if (v25)
                {
                  LODWORD(v30) = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v30) = 0;
LABEL_126:
          v87 = v17[198];
LABEL_127:
          *(_DWORD *)(a1 + v87) = v30;
          continue;
        case 0xAu:
          v81 = 0;
          v82 = 0;
          v83 = 0;
          *(_WORD *)(a1 + v7[189]) |= 1u;
          break;
        default:
          v34 = v9;
          v35 = v10;
          v36 = v7;
          v37 = v11;
          v38 = v12;
          v39 = a1;
          result = PBReaderSkipValueWithTag();
          v13 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          a1 = v39;
          v14 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v38;
          v15 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v11 = v37;
          v16 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v7 = v36;
          v18 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v10 = v35;
          v17 = &OBJC_IVAR___AWDMETRICSCellularPowerLogGSMRRCStateChange__state;
          v9 = v34;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v84 = *v3;
        v85 = *(_QWORD *)(a2 + v84);
        if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
          break;
        v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v85);
        *(_QWORD *)(a2 + v84) = v85 + 1;
        v83 |= (unint64_t)(v86 & 0x7F) << v81;
        if ((v86 & 0x80) == 0)
          goto LABEL_131;
        v81 += 7;
        v25 = v82++ >= 9;
        if (v25)
        {
          v83 = 0;
          goto LABEL_133;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_131:
      if (*(_BYTE *)(a2 + *v5))
        v83 = 0;
LABEL_133:
      *(_QWORD *)(a1 + v18[199]) = v83;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL RfBandDurationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RfBandDuration__rat;
              goto LABEL_69;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___RfBandDuration__rat;
              goto LABEL_72;
            }
          }
          v24 = &OBJC_IVAR___RfBandDuration__rat;
          goto LABEL_70;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
              goto LABEL_69;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
          goto LABEL_70;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
              goto LABEL_69;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
          goto LABEL_70;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 0x20u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
              goto LABEL_69;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
          goto LABEL_70;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
              goto LABEL_69;
            }
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
          goto LABEL_70;
        case 6u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___RfBandDuration__durationMs;
          goto LABEL_70;
        }
        v45 += 7;
        v23 = v46++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___RfBandDuration__durationMs;
          goto LABEL_72;
        }
      }
      v24 = &OBJC_IVAR___RfBandDuration__durationMs;
LABEL_69:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_72:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularPmuAverageCurrentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  RegulatorAverageCurrent *v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if ((_DWORD)v17 == 2)
      {
        v30 = objc_alloc_init(RegulatorAverageCurrent);
        objc_msgSend((id)a1, "addRegulatorCurrent:", v30);
        if (!PBReaderPlaceMark() || !RegulatorAverageCurrentReadFrom((uint64_t)v30, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PLLogApplication()
{
  if (qword_1ED885488 != -1)
    dispatch_once(&qword_1ED885488, &__block_literal_global_48);
  return (id)qword_1ED885480;
}

void sub_1CB2D8298(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB2D8384(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB2D840C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CB2DCBA0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

uint64_t TestRefreshAllAppsAndPlugins(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "refreshAllAppsAndPlugins");
}

void sub_1CB2E03E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CB2E3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1CB2E3B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

void sub_1CB2E3E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1CB2E41AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t GeraStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_52:
          v40 = 16;
          goto LABEL_61;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_56:
          v40 = 24;
          goto LABEL_61;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_60:
          v40 = 20;
LABEL_61:
          *(_DWORD *)(a1 + v40) = v19;
          continue;
        case 4u:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v36 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0)
          goto LABEL_63;
        v34 += 7;
        v14 = v35++ >= 9;
        if (v14)
        {
          v36 = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        v36 = 0;
LABEL_65:
      *(_QWORD *)(a1 + 8) = v36;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularLteDataInactivityBeforeIdleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  uint64_t result;
  uint64_t v201;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_QWORD *)(a1 + 156) |= 1uLL;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_276;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_278;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_276:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_278:
          *(_QWORD *)(a1 + 8) = v20;
          goto LABEL_420;
        case 2u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x200000000uLL;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_286;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_286:
          v201 = 144;
          goto LABEL_419;
        case 3u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 2uLL;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_290;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_290:
          v201 = 16;
          goto LABEL_419;
        case 4u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 4uLL;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_294;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_294:
          v201 = 20;
          goto LABEL_419;
        case 5u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x2000uLL;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_298;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_298:
          v201 = 64;
          goto LABEL_419;
        case 6u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x1000000uLL;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v26 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                v14 = v51++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_302;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_302:
          v201 = 108;
          goto LABEL_419;
        case 7u:
          v55 = 0;
          v56 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x8000000uLL;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v26 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v14 = v56++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_306;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_306:
          v201 = 120;
          goto LABEL_419;
        case 8u:
          v60 = 0;
          v61 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x10000000uLL;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v26 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_310;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_310:
          v201 = 124;
          goto LABEL_419;
        case 9u:
          v65 = 0;
          v66 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x20000000uLL;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v68 + 1;
              v26 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                v14 = v66++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_314;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_314:
          v201 = 128;
          goto LABEL_419;
        case 0xAu:
          v70 = 0;
          v71 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x40000000uLL;
          while (2)
          {
            v72 = *v3;
            v73 = *(_QWORD *)(a2 + v72);
            if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
              *(_QWORD *)(a2 + v72) = v73 + 1;
              v26 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                v14 = v71++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_318;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_318:
          v201 = 132;
          goto LABEL_419;
        case 0xBu:
          v75 = 0;
          v76 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x80000000uLL;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v26 |= (unint64_t)(v79 & 0x7F) << v75;
              if (v79 < 0)
              {
                v75 += 7;
                v14 = v76++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_322;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_322:
          v201 = 136;
          goto LABEL_419;
        case 0xCu:
          v80 = 0;
          v81 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x100000000uLL;
          while (2)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
              *(_QWORD *)(a2 + v82) = v83 + 1;
              v26 |= (unint64_t)(v84 & 0x7F) << v80;
              if (v84 < 0)
              {
                v80 += 7;
                v14 = v81++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_326;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_326:
          v201 = 140;
          goto LABEL_419;
        case 0xDu:
          v85 = 0;
          v86 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 8uLL;
          while (2)
          {
            v87 = *v3;
            v88 = *(_QWORD *)(a2 + v87);
            if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v88);
              *(_QWORD *)(a2 + v87) = v88 + 1;
              v26 |= (unint64_t)(v89 & 0x7F) << v85;
              if (v89 < 0)
              {
                v85 += 7;
                v14 = v86++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_330;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_330:
          v201 = 24;
          goto LABEL_419;
        case 0xEu:
          v90 = 0;
          v91 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x10uLL;
          while (2)
          {
            v92 = *v3;
            v93 = *(_QWORD *)(a2 + v92);
            if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
              *(_QWORD *)(a2 + v92) = v93 + 1;
              v26 |= (unint64_t)(v94 & 0x7F) << v90;
              if (v94 < 0)
              {
                v90 += 7;
                v14 = v91++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_334;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_334:
          v201 = 28;
          goto LABEL_419;
        case 0xFu:
          v95 = 0;
          v96 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x20uLL;
          while (2)
          {
            v97 = *v3;
            v98 = *(_QWORD *)(a2 + v97);
            if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
              *(_QWORD *)(a2 + v97) = v98 + 1;
              v26 |= (unint64_t)(v99 & 0x7F) << v95;
              if (v99 < 0)
              {
                v95 += 7;
                v14 = v96++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_338;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_338:
          v201 = 32;
          goto LABEL_419;
        case 0x10u:
          v100 = 0;
          v101 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x40uLL;
          while (2)
          {
            v102 = *v3;
            v103 = *(_QWORD *)(a2 + v102);
            if (v103 == -1 || v103 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v103);
              *(_QWORD *)(a2 + v102) = v103 + 1;
              v26 |= (unint64_t)(v104 & 0x7F) << v100;
              if (v104 < 0)
              {
                v100 += 7;
                v14 = v101++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_342;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_342:
          v201 = 36;
          goto LABEL_419;
        case 0x11u:
          v105 = 0;
          v106 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x80uLL;
          while (2)
          {
            v107 = *v3;
            v108 = *(_QWORD *)(a2 + v107);
            if (v108 == -1 || v108 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v108);
              *(_QWORD *)(a2 + v107) = v108 + 1;
              v26 |= (unint64_t)(v109 & 0x7F) << v105;
              if (v109 < 0)
              {
                v105 += 7;
                v14 = v106++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_346;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_346:
          v201 = 40;
          goto LABEL_419;
        case 0x12u:
          v110 = 0;
          v111 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x100uLL;
          while (2)
          {
            v112 = *v3;
            v113 = *(_QWORD *)(a2 + v112);
            if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
              *(_QWORD *)(a2 + v112) = v113 + 1;
              v26 |= (unint64_t)(v114 & 0x7F) << v110;
              if (v114 < 0)
              {
                v110 += 7;
                v14 = v111++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_350;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_350:
          v201 = 44;
          goto LABEL_419;
        case 0x13u:
          v115 = 0;
          v116 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x200uLL;
          while (2)
          {
            v117 = *v3;
            v118 = *(_QWORD *)(a2 + v117);
            if (v118 == -1 || v118 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v119 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
              *(_QWORD *)(a2 + v117) = v118 + 1;
              v26 |= (unint64_t)(v119 & 0x7F) << v115;
              if (v119 < 0)
              {
                v115 += 7;
                v14 = v116++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_354;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_354:
          v201 = 48;
          goto LABEL_419;
        case 0x14u:
          v120 = 0;
          v121 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x400uLL;
          while (2)
          {
            v122 = *v3;
            v123 = *(_QWORD *)(a2 + v122);
            if (v123 == -1 || v123 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v124 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v123);
              *(_QWORD *)(a2 + v122) = v123 + 1;
              v26 |= (unint64_t)(v124 & 0x7F) << v120;
              if (v124 < 0)
              {
                v120 += 7;
                v14 = v121++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_358;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_358:
          v201 = 52;
          goto LABEL_419;
        case 0x15u:
          v125 = 0;
          v126 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x800uLL;
          while (2)
          {
            v127 = *v3;
            v128 = *(_QWORD *)(a2 + v127);
            if (v128 == -1 || v128 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v128);
              *(_QWORD *)(a2 + v127) = v128 + 1;
              v26 |= (unint64_t)(v129 & 0x7F) << v125;
              if (v129 < 0)
              {
                v125 += 7;
                v14 = v126++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_362;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_362:
          v201 = 56;
          goto LABEL_419;
        case 0x16u:
          v130 = 0;
          v131 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x1000uLL;
          while (2)
          {
            v132 = *v3;
            v133 = *(_QWORD *)(a2 + v132);
            if (v133 == -1 || v133 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v134 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v133);
              *(_QWORD *)(a2 + v132) = v133 + 1;
              v26 |= (unint64_t)(v134 & 0x7F) << v130;
              if (v134 < 0)
              {
                v130 += 7;
                v14 = v131++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_366;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_366:
          v201 = 60;
          goto LABEL_419;
        case 0x17u:
          v135 = 0;
          v136 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x4000uLL;
          while (2)
          {
            v137 = *v3;
            v138 = *(_QWORD *)(a2 + v137);
            if (v138 == -1 || v138 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v139 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v138);
              *(_QWORD *)(a2 + v137) = v138 + 1;
              v26 |= (unint64_t)(v139 & 0x7F) << v135;
              if (v139 < 0)
              {
                v135 += 7;
                v14 = v136++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_370;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_370:
          v201 = 68;
          goto LABEL_419;
        case 0x18u:
          v140 = 0;
          v141 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x8000uLL;
          while (2)
          {
            v142 = *v3;
            v143 = *(_QWORD *)(a2 + v142);
            if (v143 == -1 || v143 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v144 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v143);
              *(_QWORD *)(a2 + v142) = v143 + 1;
              v26 |= (unint64_t)(v144 & 0x7F) << v140;
              if (v144 < 0)
              {
                v140 += 7;
                v14 = v141++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_374;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_374:
          v201 = 72;
          goto LABEL_419;
        case 0x19u:
          v145 = 0;
          v146 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x10000uLL;
          while (2)
          {
            v147 = *v3;
            v148 = *(_QWORD *)(a2 + v147);
            if (v148 == -1 || v148 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v149 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v148);
              *(_QWORD *)(a2 + v147) = v148 + 1;
              v26 |= (unint64_t)(v149 & 0x7F) << v145;
              if (v149 < 0)
              {
                v145 += 7;
                v14 = v146++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_378;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_378:
          v201 = 76;
          goto LABEL_419;
        case 0x1Au:
          v150 = 0;
          v151 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x20000uLL;
          while (2)
          {
            v152 = *v3;
            v153 = *(_QWORD *)(a2 + v152);
            if (v153 == -1 || v153 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v153);
              *(_QWORD *)(a2 + v152) = v153 + 1;
              v26 |= (unint64_t)(v154 & 0x7F) << v150;
              if (v154 < 0)
              {
                v150 += 7;
                v14 = v151++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_382;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_382:
          v201 = 80;
          goto LABEL_419;
        case 0x1Bu:
          v155 = 0;
          v156 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x40000uLL;
          while (2)
          {
            v157 = *v3;
            v158 = *(_QWORD *)(a2 + v157);
            if (v158 == -1 || v158 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v159 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v158);
              *(_QWORD *)(a2 + v157) = v158 + 1;
              v26 |= (unint64_t)(v159 & 0x7F) << v155;
              if (v159 < 0)
              {
                v155 += 7;
                v14 = v156++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_386;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_386:
          v201 = 84;
          goto LABEL_419;
        case 0x1Cu:
          v160 = 0;
          v161 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x80000uLL;
          while (2)
          {
            v162 = *v3;
            v163 = *(_QWORD *)(a2 + v162);
            if (v163 == -1 || v163 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v164 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v163);
              *(_QWORD *)(a2 + v162) = v163 + 1;
              v26 |= (unint64_t)(v164 & 0x7F) << v160;
              if (v164 < 0)
              {
                v160 += 7;
                v14 = v161++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_390;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_390:
          v201 = 88;
          goto LABEL_419;
        case 0x1Du:
          v165 = 0;
          v166 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x100000uLL;
          while (2)
          {
            v167 = *v3;
            v168 = *(_QWORD *)(a2 + v167);
            if (v168 == -1 || v168 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v169 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v168);
              *(_QWORD *)(a2 + v167) = v168 + 1;
              v26 |= (unint64_t)(v169 & 0x7F) << v165;
              if (v169 < 0)
              {
                v165 += 7;
                v14 = v166++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_394;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_394:
          v201 = 92;
          goto LABEL_419;
        case 0x1Eu:
          v170 = 0;
          v171 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x200000uLL;
          while (2)
          {
            v172 = *v3;
            v173 = *(_QWORD *)(a2 + v172);
            if (v173 == -1 || v173 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v174 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v173);
              *(_QWORD *)(a2 + v172) = v173 + 1;
              v26 |= (unint64_t)(v174 & 0x7F) << v170;
              if (v174 < 0)
              {
                v170 += 7;
                v14 = v171++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_398;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_398:
          v201 = 96;
          goto LABEL_419;
        case 0x1Fu:
          v175 = 0;
          v176 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x400000uLL;
          while (2)
          {
            v177 = *v3;
            v178 = *(_QWORD *)(a2 + v177);
            if (v178 == -1 || v178 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v179 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v178);
              *(_QWORD *)(a2 + v177) = v178 + 1;
              v26 |= (unint64_t)(v179 & 0x7F) << v175;
              if (v179 < 0)
              {
                v175 += 7;
                v14 = v176++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_402;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_402:
          v201 = 100;
          goto LABEL_419;
        case 0x20u:
          v180 = 0;
          v181 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x800000uLL;
          while (2)
          {
            v182 = *v3;
            v183 = *(_QWORD *)(a2 + v182);
            if (v183 == -1 || v183 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v184 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v183);
              *(_QWORD *)(a2 + v182) = v183 + 1;
              v26 |= (unint64_t)(v184 & 0x7F) << v180;
              if (v184 < 0)
              {
                v180 += 7;
                v14 = v181++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_406;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_406:
          v201 = 104;
          goto LABEL_419;
        case 0x21u:
          v185 = 0;
          v186 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x2000000uLL;
          while (2)
          {
            v187 = *v3;
            v188 = *(_QWORD *)(a2 + v187);
            if (v188 == -1 || v188 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v189 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v188);
              *(_QWORD *)(a2 + v187) = v188 + 1;
              v26 |= (unint64_t)(v189 & 0x7F) << v185;
              if (v189 < 0)
              {
                v185 += 7;
                v14 = v186++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_410;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_410:
          v201 = 112;
          goto LABEL_419;
        case 0x22u:
          v190 = 0;
          v191 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 156) |= 0x4000000uLL;
          while (2)
          {
            v192 = *v3;
            v193 = *(_QWORD *)(a2 + v192);
            if (v193 == -1 || v193 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
              *(_QWORD *)(a2 + v192) = v193 + 1;
              v26 |= (unint64_t)(v194 & 0x7F) << v190;
              if (v194 < 0)
              {
                v190 += 7;
                v14 = v191++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_414;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_414:
          v201 = 116;
          goto LABEL_419;
        default:
          if ((_DWORD)v17 == 126)
          {
            v195 = 0;
            v196 = 0;
            v26 = 0;
            *(_QWORD *)(a1 + 156) |= 0x400000000uLL;
            while (1)
            {
              v197 = *v3;
              v198 = *(_QWORD *)(a2 + v197);
              if (v198 == -1 || v198 >= *(_QWORD *)(a2 + *v4))
                break;
              v199 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v198);
              *(_QWORD *)(a2 + v197) = v198 + 1;
              v26 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_416;
              v195 += 7;
              v14 = v196++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_418;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_416:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v26) = 0;
LABEL_418:
            v201 = 148;
            goto LABEL_419;
          }
          if ((_DWORD)v17 == 127)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            *(_QWORD *)(a1 + 156) |= 0x800000000uLL;
            while (1)
            {
              v27 = *v3;
              v28 = *(_QWORD *)(a2 + v27);
              if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
                break;
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if ((v29 & 0x80) == 0)
                goto LABEL_280;
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_282;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_280:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v26) = 0;
LABEL_282:
            v201 = 152;
LABEL_419:
            *(_DWORD *)(a1 + v201) = v26;
            goto LABEL_420;
          }
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
LABEL_420:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HistogramReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  HistogramBin *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(HistogramBin);
        objc_msgSend((id)a1, "addBin:", v23);
        if (!PBReaderPlaceMark() || !HistogramBinReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularPmicHwStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_DWORD *)(a1 + 120) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_211;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_213;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_211:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_213:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x40u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_217;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_217:
          v155 = 36;
          goto LABEL_318;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x400000u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_221;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_221:
          v155 = 100;
          goto LABEL_318;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_225;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_225:
          v155 = 16;
          goto LABEL_318;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x800000u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_229;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_229:
          v155 = 104;
          goto LABEL_318;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x4000u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_233;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_233:
          v155 = 68;
          goto LABEL_318;
        case 7u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x10000u;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v26 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                v14 = v51++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_237;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_237:
          v155 = 76;
          goto LABEL_318;
        case 8u:
          v55 = 0;
          v56 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x200u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v26 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v14 = v56++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_241;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_241:
          v155 = 48;
          goto LABEL_318;
        case 9u:
          v60 = 0;
          v61 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x100u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v26 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_245;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_245:
          v155 = 44;
          goto LABEL_318;
        case 0xAu:
          v65 = 0;
          v66 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x8000u;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v68 + 1;
              v26 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                v14 = v66++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_249;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_249:
          v155 = 72;
          goto LABEL_318;
        case 0xBu:
          v70 = 0;
          v71 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x4000000u;
          while (2)
          {
            v72 = *v3;
            v73 = *(_QWORD *)(a2 + v72);
            if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
              *(_QWORD *)(a2 + v72) = v73 + 1;
              v26 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                v14 = v71++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_253;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_253:
          v155 = 116;
          goto LABEL_318;
        case 0xCu:
          v75 = 0;
          v76 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x1000000u;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v26 |= (unint64_t)(v79 & 0x7F) << v75;
              if (v79 < 0)
              {
                v75 += 7;
                v14 = v76++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_257;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_257:
          v155 = 108;
          goto LABEL_318;
        case 0xDu:
          v80 = 0;
          v81 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x400u;
          while (2)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
              *(_QWORD *)(a2 + v82) = v83 + 1;
              v26 |= (unint64_t)(v84 & 0x7F) << v80;
              if (v84 < 0)
              {
                v80 += 7;
                v14 = v81++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_261;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_261:
          v155 = 52;
          goto LABEL_318;
        case 0xEu:
          v85 = 0;
          v86 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x1000u;
          while (2)
          {
            v87 = *v3;
            v88 = *(_QWORD *)(a2 + v87);
            if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v88);
              *(_QWORD *)(a2 + v87) = v88 + 1;
              v26 |= (unint64_t)(v89 & 0x7F) << v85;
              if (v89 < 0)
              {
                v85 += 7;
                v14 = v86++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_265;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_265:
          v155 = 60;
          goto LABEL_318;
        case 0xFu:
          v90 = 0;
          v91 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x800u;
          while (2)
          {
            v92 = *v3;
            v93 = *(_QWORD *)(a2 + v92);
            if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
              *(_QWORD *)(a2 + v92) = v93 + 1;
              v26 |= (unint64_t)(v94 & 0x7F) << v90;
              if (v94 < 0)
              {
                v90 += 7;
                v14 = v91++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_269;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_269:
          v155 = 56;
          goto LABEL_318;
        case 0x10u:
          v95 = 0;
          v96 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x200000u;
          while (2)
          {
            v97 = *v3;
            v98 = *(_QWORD *)(a2 + v97);
            if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
              *(_QWORD *)(a2 + v97) = v98 + 1;
              v26 |= (unint64_t)(v99 & 0x7F) << v95;
              if (v99 < 0)
              {
                v95 += 7;
                v14 = v96++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_273;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_273:
          v155 = 96;
          goto LABEL_318;
        case 0x11u:
          v100 = 0;
          v101 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x40000u;
          while (2)
          {
            v102 = *v3;
            v103 = *(_QWORD *)(a2 + v102);
            if (v103 == -1 || v103 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v103);
              *(_QWORD *)(a2 + v102) = v103 + 1;
              v26 |= (unint64_t)(v104 & 0x7F) << v100;
              if (v104 < 0)
              {
                v100 += 7;
                v14 = v101++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_277;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_277:
          v155 = 84;
          goto LABEL_318;
        case 0x12u:
          v105 = 0;
          v106 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x80000u;
          while (2)
          {
            v107 = *v3;
            v108 = *(_QWORD *)(a2 + v107);
            if (v108 == -1 || v108 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v108);
              *(_QWORD *)(a2 + v107) = v108 + 1;
              v26 |= (unint64_t)(v109 & 0x7F) << v105;
              if (v109 < 0)
              {
                v105 += 7;
                v14 = v106++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_281;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_281:
          v155 = 88;
          goto LABEL_318;
        case 0x13u:
          v110 = 0;
          v111 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 4u;
          while (2)
          {
            v112 = *v3;
            v113 = *(_QWORD *)(a2 + v112);
            if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
              *(_QWORD *)(a2 + v112) = v113 + 1;
              v26 |= (unint64_t)(v114 & 0x7F) << v110;
              if (v114 < 0)
              {
                v110 += 7;
                v14 = v111++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_285;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_285:
          v155 = 20;
          goto LABEL_318;
        case 0x14u:
          v115 = 0;
          v116 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 8u;
          while (2)
          {
            v117 = *v3;
            v118 = *(_QWORD *)(a2 + v117);
            if (v118 == -1 || v118 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v119 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
              *(_QWORD *)(a2 + v117) = v118 + 1;
              v26 |= (unint64_t)(v119 & 0x7F) << v115;
              if (v119 < 0)
              {
                v115 += 7;
                v14 = v116++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_289;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_289:
          v155 = 24;
          goto LABEL_318;
        case 0x15u:
          v120 = 0;
          v121 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x80u;
          while (2)
          {
            v122 = *v3;
            v123 = *(_QWORD *)(a2 + v122);
            if (v123 == -1 || v123 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v124 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v123);
              *(_QWORD *)(a2 + v122) = v123 + 1;
              v26 |= (unint64_t)(v124 & 0x7F) << v120;
              if (v124 < 0)
              {
                v120 += 7;
                v14 = v121++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_293;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_293:
          v155 = 40;
          goto LABEL_318;
        case 0x16u:
          v125 = 0;
          v126 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x2000000u;
          while (2)
          {
            v127 = *v3;
            v128 = *(_QWORD *)(a2 + v127);
            if (v128 == -1 || v128 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v128);
              *(_QWORD *)(a2 + v127) = v128 + 1;
              v26 |= (unint64_t)(v129 & 0x7F) << v125;
              if (v129 < 0)
              {
                v125 += 7;
                v14 = v126++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_297;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_297:
          v155 = 112;
          goto LABEL_318;
        case 0x17u:
          v130 = 0;
          v131 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x2000u;
          while (2)
          {
            v132 = *v3;
            v133 = *(_QWORD *)(a2 + v132);
            if (v133 == -1 || v133 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v134 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v133);
              *(_QWORD *)(a2 + v132) = v133 + 1;
              v26 |= (unint64_t)(v134 & 0x7F) << v130;
              if (v134 < 0)
              {
                v130 += 7;
                v14 = v131++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_301;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_301:
          v155 = 64;
          goto LABEL_318;
        case 0x18u:
          v135 = 0;
          v136 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x20000u;
          while (2)
          {
            v137 = *v3;
            v138 = *(_QWORD *)(a2 + v137);
            if (v138 == -1 || v138 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v139 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v138);
              *(_QWORD *)(a2 + v137) = v138 + 1;
              v26 |= (unint64_t)(v139 & 0x7F) << v135;
              if (v139 < 0)
              {
                v135 += 7;
                v14 = v136++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_305;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_305:
          v155 = 80;
          goto LABEL_318;
        case 0x19u:
          v140 = 0;
          v141 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x10u;
          while (2)
          {
            v142 = *v3;
            v143 = *(_QWORD *)(a2 + v142);
            if (v143 == -1 || v143 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v144 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v143);
              *(_QWORD *)(a2 + v142) = v143 + 1;
              v26 |= (unint64_t)(v144 & 0x7F) << v140;
              if (v144 < 0)
              {
                v140 += 7;
                v14 = v141++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_309;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_309:
          v155 = 28;
          goto LABEL_318;
        case 0x1Au:
          v145 = 0;
          v146 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x20u;
          while (2)
          {
            v147 = *v3;
            v148 = *(_QWORD *)(a2 + v147);
            if (v148 == -1 || v148 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v149 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v148);
              *(_QWORD *)(a2 + v147) = v148 + 1;
              v26 |= (unint64_t)(v149 & 0x7F) << v145;
              if (v149 < 0)
              {
                v145 += 7;
                v14 = v146++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_313;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_313:
          v155 = 32;
          goto LABEL_318;
        case 0x1Bu:
          v150 = 0;
          v151 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x100000u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v152 = *v3;
        v153 = *(_QWORD *)(a2 + v152);
        if (v153 == -1 || v153 >= *(_QWORD *)(a2 + *v4))
          break;
        v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v153);
        *(_QWORD *)(a2 + v152) = v153 + 1;
        v26 |= (unint64_t)(v154 & 0x7F) << v150;
        if ((v154 & 0x80) == 0)
          goto LABEL_315;
        v150 += 7;
        v14 = v151++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_317;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_315:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_317:
      v155 = 92;
LABEL_318:
      *(_DWORD *)(a1 + v155) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB33FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularLteRadioLinkFailureReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 4u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_77:
          v55 = 24;
          goto LABEL_98;
        case 5u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_81:
          v55 = 16;
          goto LABEL_98;
        case 7u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_85:
          v55 = 20;
          goto LABEL_98;
        case 0xBu:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_89:
          v55 = 32;
          goto LABEL_98;
        case 0xCu:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_93:
          v55 = 28;
          goto LABEL_98;
        case 0xFu:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
          goto LABEL_95;
        v50 += 7;
        v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_97:
      v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CB345E68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaIdleToConnectedUserDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if ((_DWORD)v17 == 3)
        {
          PBReaderReadData();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v36;

        }
        else
        {
          if ((_DWORD)v17 != 15)
          {
LABEL_45:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0)
              goto LABEL_52;
            v24 += 7;
            v14 = v25++ >= 9;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_54;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_54:
          *(_DWORD *)(a1 + 16) = v26;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
            goto LABEL_56;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_58:
        *(_QWORD *)(a1 + 8) = v32;
      }
      else
      {
        if ((_DWORD)v17 != 2)
          goto LABEL_45;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_48;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_50;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_50:
        *(_BYTE *)(a1 + 32) = v20 != 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t KCellularLteRrcStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t result;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v29 = 0;
          v30 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v34 = 0;
          v35 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v39 = 0;
          v40 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v25) = 0;
LABEL_82:
          v50 = 16;
          goto LABEL_87;
        case 0xFu:
          v45 = 0;
          v46 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v25) = 0;
LABEL_86:
      v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1CB360780()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_1CB36078C()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_1CB360798()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_1CB3607A4()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_1CB3607B0()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_1CB3607BC()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1CB3607C8()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t sub_1CB3607D4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1CB3607E0()
{
  return MEMORY[0x1E0D11158]();
}

uint64_t sub_1CB3607EC()
{
  return MEMORY[0x1E0D11170]();
}

uint64_t sub_1CB3607F8()
{
  return MEMORY[0x1E0D3E988]();
}

uint64_t sub_1CB360804()
{
  return MEMORY[0x1E0D3E990]();
}

uint64_t sub_1CB360810()
{
  return MEMORY[0x1E0D3E998]();
}

uint64_t sub_1CB36081C()
{
  return MEMORY[0x1E0D3EA80]();
}

uint64_t sub_1CB360828()
{
  return MEMORY[0x1E0D3EA90]();
}

uint64_t sub_1CB360834()
{
  return MEMORY[0x1E0D3EAB8]();
}

uint64_t sub_1CB360840()
{
  return MEMORY[0x1E0D3EAD0]();
}

uint64_t sub_1CB36084C()
{
  return MEMORY[0x1E0D3EB30]();
}

uint64_t sub_1CB360858()
{
  return MEMORY[0x1E0D3EB70]();
}

uint64_t sub_1CB360864()
{
  return MEMORY[0x1E0D3EB88]();
}

uint64_t sub_1CB360870()
{
  return MEMORY[0x1E0D3EBC0]();
}

uint64_t sub_1CB36087C()
{
  return MEMORY[0x1E0D3EC48]();
}

uint64_t sub_1CB360888()
{
  return MEMORY[0x1E0D3EC68]();
}

uint64_t sub_1CB360894()
{
  return MEMORY[0x1E0D3EC80]();
}

uint64_t sub_1CB3608A0()
{
  return MEMORY[0x1E0D3EC88]();
}

uint64_t sub_1CB3608AC()
{
  return MEMORY[0x1E0D3ECF8]();
}

uint64_t sub_1CB3608B8()
{
  return MEMORY[0x1E0D3ED38]();
}

uint64_t sub_1CB3608C4()
{
  return MEMORY[0x1E0D3ED58]();
}

uint64_t sub_1CB3608D0()
{
  return MEMORY[0x1E0D3ED68]();
}

uint64_t sub_1CB3608DC()
{
  return MEMORY[0x1E0D3ED80]();
}

uint64_t sub_1CB3608E8()
{
  return MEMORY[0x1E0D3EF28]();
}

uint64_t sub_1CB3608F4()
{
  return MEMORY[0x1E0D3EF38]();
}

uint64_t sub_1CB360900()
{
  return MEMORY[0x1E0D3EF48]();
}

uint64_t sub_1CB36090C()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1CB360918()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1CB360924()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1CB360930()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1CB36093C()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1CB360948()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1CB360954()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1CB360960()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1CB36096C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1CB360978()
{
  return MEMORY[0x1E0DEA7F8]();
}

uint64_t sub_1CB360984()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1CB360990()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_1CB36099C()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1CB3609A8()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1CB3609B4()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1CB3609C0()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1CB3609CC()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1CB3609D8()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1CB3609E4()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1CB3609F0()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1CB3609FC()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t sub_1CB360A08()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1CB360A14()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1CB360A20()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1CB360A2C()
{
  return MEMORY[0x1E0DF0870]();
}

uint64_t sub_1CB360A38()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t sub_1CB360A44()
{
  return MEMORY[0x1E0DF08D0]();
}

uint64_t sub_1CB360A50()
{
  return MEMORY[0x1E0D111A8]();
}

uint64_t sub_1CB360A5C()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1CB360A68()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1CB360A74()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_1CB360A80()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1CB360A8C()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1CB360A98()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1CB360AA4()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1CB360AB0()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1CB360ABC()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t sub_1CB360AC8()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1CB360AD4()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1CB360AE0()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1CB360AEC()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1CB360AF8()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1CB360B04()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1CB360B10()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1CB360B1C()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t sub_1CB360B28()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1CB360B34()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t sub_1CB360B40()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t sub_1CB360B4C()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1CB360B58()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1CB360B64()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1CB360B70()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1CB360B7C()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1CB360B88()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1CB360B94()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1CB360BA0()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1CB360BAC()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1CB360BB8()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_1CB360BC4()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t sub_1CB360BD0()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t ADClientSetValueForScalarKey()
{
  return MEMORY[0x1E0CF63D8]();
}

uint64_t APFSGetFragmentationHistogram()
{
  return MEMORY[0x1E0CF18A8]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t ApplePhotonDetectorServicesGetLux()
{
  return MEMORY[0x1E0CFE100]();
}

uint64_t BKSHIDServicesLastUserEventTime()
{
  return MEMORY[0x1E0D00B50]();
}

uint64_t BKSHIDServicesRequestProximityStatusEvent()
{
  return MEMORY[0x1E0D00B88]();
}

uint64_t BTDeviceGetAddressString()
{
  return MEMORY[0x1E0D4E1E8]();
}

uint64_t BTDeviceGetDefaultName()
{
  return MEMORY[0x1E0D4E208]();
}

uint64_t BTDeviceGetDeviceType()
{
  return MEMORY[0x1E0D4E220]();
}

uint64_t BTDeviceGetName()
{
  return MEMORY[0x1E0D4E228]();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return MEMORY[0x1E0D4E290]();
}

uint64_t BTLocalDeviceGetConnectable()
{
  return MEMORY[0x1E0D4E298]();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return MEMORY[0x1E0D4E2A8]();
}

uint64_t BTLocalDeviceGetConnectionStatus()
{
  return MEMORY[0x1E0D4E2B8]();
}

uint64_t BTLocalDeviceGetDefault()
{
  return MEMORY[0x1E0D4E2C0]();
}

uint64_t BTLocalDeviceGetDiscoverable()
{
  return MEMORY[0x1E0D4E2D0]();
}

uint64_t BTLocalDeviceGetModulePower()
{
  return MEMORY[0x1E0D4E2D8]();
}

uint64_t BTLocalDeviceGetPairedDevices()
{
  return MEMORY[0x1E0D4E2E0]();
}

uint64_t BTLocalDeviceReadDetailedPowerProfileStatistics()
{
  return MEMORY[0x1E0D4E300]();
}

uint64_t BTLocalDeviceReadEnhancedPowerProfileStatistics()
{
  return MEMORY[0x1E0D4E308]();
}

uint64_t BTLocalDeviceReadPowerProfileStatistics()
{
  return MEMORY[0x1E0D4E310]();
}

uint64_t BTLocalDeviceRegisterForPowerProfileStatistics()
{
  return MEMORY[0x1E0D4E318]();
}

uint64_t BTSessionAttachWithQueue()
{
  return MEMORY[0x1E0D4E3B0]();
}

uint64_t BTSessionDetachWithQueue()
{
  return MEMORY[0x1E0D4E3C8]();
}

uint64_t CARenderServerGetFrameCounter()
{
  return MEMORY[0x1E0CD2580]();
}

uint64_t CARenderServerSetScreenTelemetryParameters()
{
  return MEMORY[0x1E0CD25D0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFCopySystemVersionString()
{
  return MEMORY[0x1E0C98378]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
  MEMORY[0x1E0C98840](port);
}

void CFMessagePortInvalidate(CFMessagePortRef ms)
{
  MEMORY[0x1E0C98888](ms);
}

Boolean CFMessagePortIsValid(CFMessagePortRef ms)
{
  return MEMORY[0x1E0C98890](ms);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1E0C98898](remote, *(_QWORD *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

void CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout)
{
  MEMORY[0x1E0C988A0](ms, callout);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1E0C98990](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

uint64_t CLCopyAppsUsingLocation()
{
  return MEMORY[0x1E0C9E2E0]();
}

uint64_t CLCopyTechnologiesInUse()
{
  return MEMORY[0x1E0C9E2E8]();
}

uint64_t CTCallGetStatus()
{
  return MEMORY[0x1E0CA6BD8]();
}

uint64_t CTCopyCurrentCalls()
{
  return MEMORY[0x1E0CA6C00]();
}

uint64_t CTIndicatorsGetSignalStrength()
{
  return MEMORY[0x1E0CA6C10]();
}

uint64_t CTRegistrationCopyOperatorName()
{
  return MEMORY[0x1E0CA6C80]();
}

uint64_t CTRegistrationGetDataAttached()
{
  return MEMORY[0x1E0CA6C88]();
}

uint64_t CTRegistrationGetDataContextActive()
{
  return MEMORY[0x1E0CA6C90]();
}

uint64_t CTRegistrationGetDataIndicator()
{
  return MEMORY[0x1E0CA6C98]();
}

uint64_t CTRegistrationGetStatus()
{
  return MEMORY[0x1E0CA6CA0]();
}

uint64_t CTSIMSupportGetSIMStatus()
{
  return MEMORY[0x1E0CA6CA8]();
}

uint64_t CTTelephonyCenterAddObserver()
{
  return MEMORY[0x1E0CA6CC0]();
}

uint64_t CTTelephonyCenterGetDefault()
{
  return MEMORY[0x1E0CA6CC8]();
}

uint64_t CTTelephonyCenterRemoveEveryObserver()
{
  return MEMORY[0x1E0CA6CD0]();
}

uint64_t CTTelephonyCenterSetDefaultRunloop()
{
  return MEMORY[0x1E0CA6CE0]();
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)MEMORY[0x1E0CA5758](allocator, callback, context, pathsToWatch, sinceWhen, *(_QWORD *)&flags, latency);
}

void FSEventStreamScheduleWithRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CA5778](streamRef, runLoop, runLoopMode);
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return MEMORY[0x1E0CA5790](streamRef);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5798](streamRef);
}

void FSEventStreamUnscheduleFromRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CA57A0](streamRef, runLoop, runLoopMode);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1E0CBAD20](*(_QWORD *)&kernelPort, notificationID);
}

CFTypeRef IOCFUnserializeWithSize(const char *buffer, size_t bufferSize, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return (CFTypeRef)MEMORY[0x1E0CBAD48](buffer, bufferSize, allocator, options, errorString);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD80](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x1E0CBAD88](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD90](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectMapMemory(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x1E0CBAD98](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&intoTask, atAddress, ofSize, *(_QWORD *)&options);
}

kern_return_t IOConnectUnmapMemory(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x1E0CBADF0](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&fromTask, atAddress);
}

IOReturn IODataQueueDequeue(IODataQueueMemory *dataQueue, void *data, uint32_t *dataSize)
{
  return MEMORY[0x1E0CBAE28](dataQueue, data, dataSize);
}

IODataQueueEntry *__cdecl IODataQueuePeek(IODataQueueMemory *dataQueue)
{
  return (IODataQueueEntry *)MEMORY[0x1E0CBAE30](dataQueue);
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAE60](device, *(_QWORD *)&options);
}

IOReturn IOHIDDeviceGetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, uint8_t *report, CFIndex *pReportLength)
{
  return MEMORY[0x1E0CBAE90](device, *(_QWORD *)&reportType, reportID, report, pReportLength);
}

io_service_t IOHIDDeviceGetService(IOHIDDeviceRef device)
{
  return MEMORY[0x1E0CBAEA0](device);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAEB8](device, *(_QWORD *)&options);
}

IOReturn IOHIDDeviceSetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength)
{
  return MEMORY[0x1E0CBAF10](device, *(_QWORD *)&reportType, reportID, report, reportLength);
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1E0CBB0F8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1E0CBB158]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1E0CBB1F0]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1E0CBB220]();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return MEMORY[0x1E0CBB248]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1E0CBB268]();
}

uint64_t IOHIDEventSystemClientUnregisterDeviceMatchingCallback()
{
  return MEMORY[0x1E0CBB288]();
}

uint64_t IOHIDEventSystemClientUnregisterEventCallback()
{
  return MEMORY[0x1E0CBB298]();
}

void IOHIDManagerActivate(IOHIDManagerRef manager)
{
  MEMORY[0x1E0CBB368](manager);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1E0CBB388](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1E0CBB3A0](allocator, *(_QWORD *)&options);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
  MEMORY[0x1E0CBB3F0](manager, matching);
}

void IOHIDManagerSetDispatchQueue(IOHIDManagerRef manager, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB408](manager, queue);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

uint64_t IOMobileFramebufferDisablePowerNotifications()
{
  return MEMORY[0x1E0D39F78]();
}

uint64_t IOMobileFramebufferEnablePowerNotifications()
{
  return MEMORY[0x1E0D39F98]();
}

uint64_t IOMobileFramebufferGetBufBlock()
{
  return MEMORY[0x1E0D39FC8]();
}

uint64_t IOMobileFramebufferGetMainDisplay()
{
  return MEMORY[0x1E0D3A020]();
}

uint64_t IOMobileFramebufferGetRunLoopSource()
{
  return MEMORY[0x1E0D3A038]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1E0CBB698](*(_QWORD *)&mainPort);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0CBB6B0](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB6B8](notify, queue);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return (CFStringRef)MEMORY[0x1E0CBB6D0](*(_QWORD *)&object);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

uint64_t IOPMAssertionNotify()
{
  return MEMORY[0x1E0CBB728]();
}

uint64_t IOPMCopyAssertionActivityAggregate()
{
  return MEMORY[0x1E0CBB768]();
}

uint64_t IOPMCopyAssertionActivityUpdateWithCallback()
{
  return MEMORY[0x1E0CBB770]();
}

IOReturn IOPMCopyAssertionsByProcess(CFDictionaryRef *AssertionsByPID)
{
  return MEMORY[0x1E0CBB778](AssertionsByPID);
}

uint64_t IOPMCopyBatteryHeatMap()
{
  return MEMORY[0x1E0CBB788]();
}

uint64_t IOPMCopyCurrentScheduledWake()
{
  return MEMORY[0x1E0CBB790]();
}

uint64_t IOPMCopyCycleCountData()
{
  return MEMORY[0x1E0CBB798]();
}

uint64_t IOPMCopyKioskModeData()
{
  return MEMORY[0x1E0CBB7A0]();
}

uint64_t IOPMIsADarkWake()
{
  return MEMORY[0x1E0CBB7C8]();
}

uint64_t IOPMIsASleep()
{
  return MEMORY[0x1E0CBB7D0]();
}

uint64_t IOPMIsAUserWake()
{
  return MEMORY[0x1E0CBB7D8]();
}

uint64_t IOPMScheduleAssertionExceptionNotification()
{
  return MEMORY[0x1E0CBB7E8]();
}

uint64_t IOPMScheduleUserActiveChangedNotification()
{
  return MEMORY[0x1E0CBB7F8]();
}

uint64_t IOPMSetAssertionActivityAggregate()
{
  return MEMORY[0x1E0CBB810]();
}

uint64_t IOPMSetAssertionActivityLog()
{
  return MEMORY[0x1E0CBB818]();
}

uint64_t IOPMSetAssertionExceptionLimits()
{
  return MEMORY[0x1E0CBB820]();
}

uint64_t IOPMSleepWakeCopyUUID()
{
  return MEMORY[0x1E0CBB830]();
}

uint64_t IOPMUserIsActive()
{
  return MEMORY[0x1E0CBB858]();
}

uint64_t IOPSCopyPowerSourcesByType()
{
  return MEMORY[0x1E0CBB868]();
}

uint64_t IOPSCopyPowerSourcesByTypePrecise()
{
  return MEMORY[0x1E0CBB870]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x1E0CBB880](blob);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1E0CBB890]();
}

uint64_t IOPSGaugingMitigationGetState()
{
  return MEMORY[0x1E0CBB898]();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBB8A8](blob, ps);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1E0CBB8D8](refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1E0CBB8F0](*(_QWORD *)&entry, properties, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1E0CBB918](*(_QWORD *)&mainPort, path);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1E0CBB958](*(_QWORD *)&entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1E0CBB988](*(_QWORD *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties)
{
  return MEMORY[0x1E0CBB9A8](*(_QWORD *)&entry, properties);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return MEMORY[0x1E0CBB9B0](*(_QWORD *)&entry, propertyName, property);
}

uint64_t IOReportArrayGetValueAtIndex()
{
  return MEMORY[0x1E0DE0280]();
}

uint64_t IOReportChannelGetChannelID()
{
  return MEMORY[0x1E0DE0288]();
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x1E0DE0290]();
}

uint64_t IOReportChannelGetFormat()
{
  return MEMORY[0x1E0DE0298]();
}

uint64_t IOReportChannelGetGroup()
{
  return MEMORY[0x1E0DE02A0]();
}

uint64_t IOReportChannelGetSubGroup()
{
  return MEMORY[0x1E0DE02A8]();
}

uint64_t IOReportChannelGetUnit()
{
  return MEMORY[0x1E0DE02B0]();
}

uint64_t IOReportChannelGetUnitLabel()
{
  return MEMORY[0x1E0DE02B8]();
}

uint64_t IOReportCopyFilteredChannels()
{
  return MEMORY[0x1E0DE02E8]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x1E0DE02F8]();
}

uint64_t IOReportCreateSamplesDelta()
{
  return MEMORY[0x1E0DE0300]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x1E0DE0310]();
}

uint64_t IOReportGetChannelCount()
{
  return MEMORY[0x1E0DE0318]();
}

uint64_t IOReportHistogramGetBucketBounds()
{
  return MEMORY[0x1E0DE0320]();
}

uint64_t IOReportHistogramGetBucketCount()
{
  return MEMORY[0x1E0DE0328]();
}

uint64_t IOReportHistogramGetBucketHits()
{
  return MEMORY[0x1E0DE0330]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1E0DE0338]();
}

uint64_t IOReportScaleValue()
{
  return MEMORY[0x1E0DE0350]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1E0DE0360]();
}

uint64_t IOReportStateGetCount()
{
  return MEMORY[0x1E0DE0368]();
}

uint64_t IOReportStateGetDutyCycle()
{
  return MEMORY[0x1E0DE0370]();
}

uint64_t IOReportStateGetInTransitions()
{
  return MEMORY[0x1E0DE0378]();
}

uint64_t IOReportStateGetNameForIndex()
{
  return MEMORY[0x1E0DE0380]();
}

uint64_t IOReportStateGetResidency()
{
  return MEMORY[0x1E0DE0388]();
}

uint64_t IOReportUpdateSamples()
{
  return MEMORY[0x1E0DE0390]();
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1E0CBB9C0](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1E0DE2B90]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

uint64_t NSStringFromBOOL()
{
  return MEMORY[0x1E0CB31F8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

uint64_t NStatManagerAddAllTCP()
{
  return MEMORY[0x1E0D51AC8]();
}

uint64_t NStatManagerAddAllUDP()
{
  return MEMORY[0x1E0D51AD0]();
}

uint64_t NStatManagerCreate()
{
  return MEMORY[0x1E0D51AD8]();
}

uint64_t NStatSourceSetCountsBlock()
{
  return MEMORY[0x1E0D51B28]();
}

uint64_t NStatSourceSetDescriptionBlock()
{
  return MEMORY[0x1E0D51B30]();
}

uint64_t NStatSourceSetRemovedBlock()
{
  return MEMORY[0x1E0D51B40]();
}

uint64_t OSThermalNotificationCurrentLevel()
{
  return MEMORY[0x1E0C80688]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1E0D82C88]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1E0D82E48]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1E0D82E50]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1E0D82E58]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1E0D82E60]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1E0D82E68]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1E0D82E70]();
}

uint64_t PBRepeatedUInt32Set()
{
  return MEMORY[0x1E0D82E78]();
}

uint64_t PLADClientAddValueForScalarKey()
{
  return MEMORY[0x1E0D800C0]();
}

uint64_t PLADClientBatchKeys()
{
  return MEMORY[0x1E0D800C8]();
}

uint64_t PLADClientPushValueForDistributionKey()
{
  return MEMORY[0x1E0D800D0]();
}

uint64_t PLADClientSetValueForScalarKey()
{
  return MEMORY[0x1E0D800D8]();
}

uint64_t PLGenerateBatteryUIPlist()
{
  return MEMORY[0x1E0D7FE18]();
}

uint64_t PLLogAppDeletion()
{
  return MEMORY[0x1E0D800E0]();
}

uint64_t PLLogCommon()
{
  return MEMORY[0x1E0D800E8]();
}

uint64_t PLLogSubmission()
{
  return MEMORY[0x1E0D800F0]();
}

uint64_t PLQueryRegistered()
{
  return MEMORY[0x1E0D7FE38]();
}

uint64_t PLTalkToPowerlogHelper()
{
  return MEMORY[0x1E0D7FE48]();
}

uint64_t SBSBacklightChangeSourceForDisplayLayoutTransitionReason()
{
  return MEMORY[0x1E0DAB5A8]();
}

uint64_t SBSCopyApplicationDisplayIdentifiers()
{
  return MEMORY[0x1E0DAB5E8]();
}

uint64_t SBSCopyDisplayIdentifiers()
{
  return MEMORY[0x1E0DAB5F8]();
}

uint64_t SBSCopyLocalizedApplicationNameForDisplayIdentifier()
{
  return MEMORY[0x1E0DAB610]();
}

uint64_t SBSGetApplicationState()
{
  return MEMORY[0x1E0DAB718]();
}

uint64_t SBSProcessAssertionGetNameForReason()
{
  return MEMORY[0x1E0DAB8F8]();
}

uint64_t SBSProcessIDForDisplayIdentifier()
{
  return MEMORY[0x1E0DAB910]();
}

uint64_t SBSRegisterDisplayIdentifiersChangedBlock()
{
  return MEMORY[0x1E0DAB918]();
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return (CFDictionaryRef)MEMORY[0x1E0CE8758](store, keys, patterns);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1E0CE8770](allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1E0CE8798](allocator, domain, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1E0CE87A8](allocator, domain, ifname, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return MEMORY[0x1E0CE87C8](store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return MEMORY[0x1E0CE87D8](store, keys, patterns);
}

int SCError(void)
{
  return MEMORY[0x1E0CE87E0]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1E0CE87E8](*(_QWORD *)&status);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1E0CE89C8](allocator, name, prefsID);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)MEMORY[0x1E0CE89D0](allocator, name, prefsID, authorization);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1E0CE89E0](prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return MEMORY[0x1E0CE8A00](prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return MEMORY[0x1E0CE8A10](prefs, queue);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
  MEMORY[0x1E0CE8A30](prefs);
}

uint64_t SMCAccumGetChannelInfoForKey()
{
  return MEMORY[0x1E0DE2EC8]();
}

uint64_t SMCCloseConnection()
{
  return MEMORY[0x1E0DE2ED0]();
}

uint64_t SMCGetKeyFromIndex()
{
  return MEMORY[0x1E0DE2ED8]();
}

uint64_t SMCGetKeyInfo()
{
  return MEMORY[0x1E0DE2EE0]();
}

uint64_t SMCMakeUInt32Key()
{
  return MEMORY[0x1E0DE2EE8]();
}

uint64_t SMCOSAccumIsSupported()
{
  return MEMORY[0x1E0DE2EF0]();
}

uint64_t SMCOSAccumSampleChannel()
{
  return MEMORY[0x1E0DE2EF8]();
}

uint64_t SMCOpenConnectionWithDefaultService()
{
  return MEMORY[0x1E0DE2F00]();
}

uint64_t SMCReadKey()
{
  return MEMORY[0x1E0DE2F08]();
}

uint64_t SMCReadKeyAsNumericWithKnownKeyInfo()
{
  return MEMORY[0x1E0DE2F10]();
}

uint64_t SMCUInt32ToString()
{
  return MEMORY[0x1E0DE2F18]();
}

uint64_t SMCWriteKeyAsNumeric()
{
  return MEMORY[0x1E0DE2F20]();
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return MEMORY[0x1E0D4FAF8]();
}

uint64_t WiFiDeviceClientCopyInterfaceStateInfo()
{
  return MEMORY[0x1E0D4FB10]();
}

uint64_t WiFiDeviceClientCopyProperty()
{
  return MEMORY[0x1E0D4FB18]();
}

uint64_t WiFiDeviceClientGetInterfaceName()
{
  return MEMORY[0x1E0D4FB20]();
}

uint64_t WiFiDeviceClientGetPower()
{
  return MEMORY[0x1E0D4FB30]();
}

uint64_t WiFiDeviceClientIsInterfaceAWDL()
{
  return MEMORY[0x1E0D4FB40]();
}

uint64_t WiFiDeviceClientIsInterfaceHostAp()
{
  return MEMORY[0x1E0D4FB48]();
}

uint64_t WiFiDeviceClientRegisterDeviceAvailableCallback()
{
  return MEMORY[0x1E0D4FB60]();
}

uint64_t WiFiDeviceClientRegisterExtendedLinkCallback()
{
  return MEMORY[0x1E0D4FB68]();
}

uint64_t WiFiDeviceClientRegisterLQMCallback()
{
  return MEMORY[0x1E0D4FB78]();
}

uint64_t WiFiDeviceClientRegisterPowerCallback()
{
  return MEMORY[0x1E0D4FB80]();
}

uint64_t WiFiDeviceClientRegisterScanUpdateCallback()
{
  return MEMORY[0x1E0D4FB90]();
}

uint64_t WiFiDeviceClientRegisterVirtualInterfaceStateChangeCallback()
{
  return MEMORY[0x1E0D4FB98]();
}

uint64_t WiFiGetNetworkChannel()
{
  return MEMORY[0x1E0D4FBD0]();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return MEMORY[0x1E0D4FBE0]();
}

uint64_t WiFiManagerClientCopyInterfaces()
{
  return MEMORY[0x1E0D4FBF0]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1E0D4FC08]();
}

uint64_t WiFiManagerClientGetWoWCapability()
{
  return MEMORY[0x1E0D4FC48]();
}

uint64_t WiFiManagerClientGetWoWState()
{
  return MEMORY[0x1E0D4FC50]();
}

uint64_t WiFiManagerClientRegisterDeviceAttachmentCallback()
{
  return MEMORY[0x1E0D4FC58]();
}

uint64_t WiFiManagerClientRegisterUserAutoJoinStateChangedCallback()
{
  return MEMORY[0x1E0D4FC70]();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return MEMORY[0x1E0D4FC88]();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return MEMORY[0x1E0D4FCC0]();
}

uint64_t WiFiNetworkGetOperatingBand()
{
  return MEMORY[0x1E0D4FD18]();
}

uint64_t WiFiNetworkGetProperty()
{
  return MEMORY[0x1E0D4FD20]();
}

uint64_t WiFiNetworkGetSSID()
{
  return MEMORY[0x1E0D4FD30]();
}

uint64_t WiFiNetworkIsCarPlay()
{
  return MEMORY[0x1E0D4FD68]();
}

uint64_t _AXSBackTapEnabled()
{
  return MEMORY[0x1E0DDD638]();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return MEMORY[0x1E0DDD6A0]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabled()
{
  return MEMORY[0x1E0DDD6F8]();
}

uint64_t _AXSFaceTimeCaptionsEnabled()
{
  return MEMORY[0x1E0DDD740]();
}

uint64_t _AXSLiveTranscriptionEnabled()
{
  return MEMORY[0x1E0DDDA20]();
}

uint64_t _AXSOnDeviceEyeTrackingEnabled()
{
  return MEMORY[0x1E0DDDA80]();
}

uint64_t _AXSQuickSpeakEnabled()
{
  return MEMORY[0x1E0DDDAF0]();
}

uint64_t _AXSReduceMotionEnabled()
{
  return MEMORY[0x1E0DDDB20]();
}

uint64_t _AXSSoundDetectionRunning()
{
  return MEMORY[0x1E0DDDCF8]();
}

uint64_t _AXSSpeakThisEnabled()
{
  return MEMORY[0x1E0DDDD08]();
}

uint64_t _AXSZoomTouchEnabled()
{
  return MEMORY[0x1E0DDDED8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFPreferencesAppSynchronizeWithContainer()
{
  return MEMORY[0x1E0C9A300]();
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return MEMORY[0x1E0C9A320]();
}

uint64_t _CFPreferencesSetValueWithContainer()
{
  return MEMORY[0x1E0C9A398]();
}

uint64_t _CFXPCCreateCFObjectFromXPCMessage()
{
  return MEMORY[0x1E0C9A7F0]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _CFXPCCreateXPCMessageWithCFObject()
{
  return MEMORY[0x1E0C9A808]();
}

uint64_t _CTServerConnectionAddToRunLoop()
{
  return MEMORY[0x1E0CA6E50]();
}

uint64_t _CTServerConnectionCopyTraceProperty()
{
  return MEMORY[0x1E0CA6F08]();
}

uint64_t _CTServerConnectionCreate()
{
  return MEMORY[0x1E0CA6F18]();
}

uint64_t _CTServerConnectionDumpBasebandState()
{
  return MEMORY[0x1E0CA6F60]();
}

uint64_t _CTServerConnectionGetRATSelection()
{
  return MEMORY[0x1E0CA6FB8]();
}

uint64_t _CTServerConnectionGetRadioAccessTechnology()
{
  return MEMORY[0x1E0CA6FC0]();
}

uint64_t _CTServerConnectionResetModemWithCrashLogs()
{
  return MEMORY[0x1E0CA7050]();
}

uint64_t _CTServerConnectionSetTraceProperty()
{
  return MEMORY[0x1E0CA7080]();
}

uint64_t _DRCTriggerCloudKitWork()
{
  return MEMORY[0x1E0D1D268]();
}

uint64_t _SBFScreenTimeRegisterForExternalChangeNotification()
{
  return MEMORY[0x1E0DABCC0]();
}

uint64_t _SBSAutolockTimerRegisterForExternalChangeNotification()
{
  return MEMORY[0x1E0DABCD0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void operator delete(void *__p)
{
  off_1E8576438(__p);
}

uint64_t operator delete()
{
  return off_1E8576440();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E8576448(__sz);
}

uint64_t operator new()
{
  return off_1E8576450();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1E0C80B70]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t _launch_service_stats_copy_4ppse_impl()
{
  return MEMORY[0x1E0C80FA8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

char *__cdecl basename(char *a1)
{
  return (char *)MEMORY[0x1E0C816D8](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t coalition_info_resource_usage()
{
  return MEMORY[0x1E0C826A0]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

uint64_t dyld_process_create_for_task()
{
  return MEMORY[0x1E0C83118]();
}

uint64_t dyld_process_dispose()
{
  return MEMORY[0x1E0C83120]();
}

uint64_t dyld_process_snapshot_create_for_process()
{
  return MEMORY[0x1E0C83130]();
}

uint64_t dyld_process_snapshot_dispose()
{
  return MEMORY[0x1E0C83138]();
}

uint64_t dyld_process_snapshot_get_shared_cache()
{
  return MEMORY[0x1E0C83148]();
}

uint64_t dyld_shared_cache_get_base_address()
{
  return MEMORY[0x1E0C83188]();
}

uint64_t dyld_shared_cache_get_mapped_size()
{
  return MEMORY[0x1E0C83190]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1E0C83450](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

uint64_t getClientPermissions()
{
  return MEMORY[0x1E0D80108]();
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

kern_return_t host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt)
{
  return MEMORY[0x1E0C838E0](*(_QWORD *)&host_priv, *(_QWORD *)&flavor, host_info64_out, host_info64_outCnt);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

uint64_t initComputeSafeguards()
{
  return MEMORY[0x1E0D13408]();
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1E0C83980](*(_QWORD *)&a1, a2);
}

uint64_t launch_service_stats_disable_4ppse()
{
  return MEMORY[0x1E0C83B10]();
}

uint64_t launch_service_stats_enable_4ppse()
{
  return MEMORY[0x1E0C83B18]();
}

uint64_t launch_service_stats_is_enabled_4ppse()
{
  return MEMORY[0x1E0C83B20]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

uint64_t ledger()
{
  return MEMORY[0x1E0C83B58]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_vm_region_recurse(vm_map_read_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt)
{
  return MEMORY[0x1E0C83E08](*(_QWORD *)&target_task, address, size, nesting_depth, info, infoCnt);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

uint64_t malloc_get_all_zones()
{
  return MEMORY[0x1E0C83EA0]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1E0C83EA8](zone);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF0](alignment, size, type_id);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F18](size, type_id);
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
  MEMORY[0x1E0C83FA8](zone, stats);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x1E0C840A8]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

mstats *mstats(mstats *__return_ptr retstr)
{
  return (mstats *)MEMORY[0x1E0C84208](retstr);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1E0CCF728](interface);
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  MEMORY[0x1E0CCFD18](path, enumerate_block);
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1E0CCFDE0](path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return MEMORY[0x1E0CCFE20](path);
}

nw_path_monitor_t nw_path_monitor_create_with_type(nw_interface_type_t required_interface_type)
{
  return (nw_path_monitor_t)MEMORY[0x1E0CCFE58](*(_QWORD *)&required_interface_type);
}

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCFE60](monitor, queue);
}

void nw_path_monitor_set_update_handler(nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
  MEMORY[0x1E0CCFE68](monitor, update_handler);
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
  MEMORY[0x1E0CCFE70](monitor);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_listallpids(void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C08](buffer, *(_QWORD *)&buffersize);
}

uint64_t proc_listcoalitions()
{
  return MEMORY[0x1E0C84C10]();
}

int proc_listpids(uint32_t type, uint32_t typeinfo, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C18](*(_QWORD *)&type, *(_QWORD *)&typeinfo, buffer, *(_QWORD *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1E0C84C28](*(_QWORD *)&pid, *(_QWORD *)&flavor, buffer);
}

int proc_pidfdinfo(int pid, int fd, int flavor, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C38](*(_QWORD *)&pid, *(_QWORD *)&fd, *(_QWORD *)&flavor, buffer, *(_QWORD *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C50](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

uint64_t proc_reset_footprint_interval()
{
  return MEMORY[0x1E0C84C68]();
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1E0C85848](*(_QWORD *)&target_tport, *(_QWORD *)&pid, tn);
}

uint64_t tcp_connection_fallback_watcher_create()
{
  return MEMORY[0x1E0CD0548]();
}

uint64_t tcp_fallback_watcher_fallback_inuse()
{
  return MEMORY[0x1E0CD06E8]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1E0C85E70](xarray, index);
}

uint64_t xpc_coalition_copy_info()
{
  return MEMORY[0x1E0C85F48]();
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return (void *)MEMORY[0x1E0C85FE0](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
  MEMORY[0x1E0C86070](connection, context);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

uint64_t xpc_get_service_name_from_pid()
{
  return MEMORY[0x1E0C86518]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

