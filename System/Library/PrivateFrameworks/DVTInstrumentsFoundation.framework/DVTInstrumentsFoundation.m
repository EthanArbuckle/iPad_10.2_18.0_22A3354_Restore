const char *DTKPGetConstantNameOfStatusCode(int a1)
{
  int v1;
  const char *result;

  if (a1 > -307)
  {
    if (a1 > -11)
    {
      switch(a1)
      {
        case -10:
          result = "kDTKPDataParsingError";
          break;
        case -9:
          result = "kDTKPFileReadError";
          break;
        case -8:
          result = "kDTKPFailureInKPC";
          break;
        case -7:
          result = "kDTKPFailureInKPEP";
          break;
        case -6:
          result = "kDTKPFailureInKPerf";
          break;
        case -5:
          result = "kDTKPBadTraceDataConfig";
          break;
        case -4:
          result = "kDTKPBadArgument";
          break;
        case -3:
          result = "kDTKPInternalInconsistency";
          break;
        case -2:
          result = "kDTKPUnknownError";
          break;
        case -1:
          result = "kDTKPFailure";
          break;
        case 0:
          result = "kDTKPSuccess";
          break;
        default:
          return 0;
      }
    }
    else
    {
      switch(a1)
      {
        case -306:
          result = "kDTKPDatastreamEmpty";
          break;
        case -305:
          result = "kDTKPDatastreamNoFilesInDirectory";
          break;
        case -304:
          result = "kDTKPDatastreamAlreadyInErrorState";
          break;
        case -303:
          result = "kDTKPDatastreamWritingAlreadyComplete";
          break;
        case -302:
          result = "kDTKPDatastreamReadingAlreadyCompleted";
          break;
        case -301:
          result = "kDTKPDatastreamCannotWriteToInactiveStream";
          break;
        case -300:
          result = "kDTKPDatastreamCannotReadFromActiveStream";
          break;
        default:
          switch(a1)
          {
            case -106:
              result = "kDTKPCouldNotCreateDirectory";
              break;
            case -105:
              result = "kDTKPCouldNotWriteFile";
              break;
            case -104:
              result = "kDTKPCouldNotReadFile";
              break;
            case -103:
              result = "kDTKPCouldNotCreateFile";
              break;
            case -102:
              result = "kDTKPCouldNotOpenFile";
              break;
            case -101:
              result = "kDTKPPermissionDenied";
              break;
            case -100:
              result = "kDTKPIOFailure";
              break;
            default:
              if (a1 != -200)
                return 0;
              result = "kDTKPMemAllocFailed";
              break;
          }
          break;
      }
    }
  }
  else if (a1 > -601)
  {
    switch(a1)
    {
      case -509:
        result = "kDTKPSessionMultiplePMCTriggersNotSupported";
        break;
      case -508:
        result = "kDTKPSessionMultiplePETTriggersNotSupported";
        break;
      case -507:
        result = "kDTKPSessionReturnedWithoutReadingAllKernelData";
        break;
      case -506:
        result = "kDTKPSessionFailedToCreateOnDeckDatastream";
        break;
      case -505:
        result = "kDTKPSessionAnotherSessionAlreadyRunning";
        break;
      case -504:
        result = "kDTKPSessionRecordEnumerationStopped";
        break;
      case -503:
        result = "kDTKPSessionStopCallbackTimeout";
        break;
      case -502:
        result = "kDTKPSessionFailedToReturnKernelBuffer";
        break;
      case -501:
        result = "kDTKPSessionFailedToGetKernelBuffer";
        break;
      case -500:
        result = "kDTKPSessionAPIMisuse";
        break;
      default:
        switch(a1)
        {
          case -403:
            result = "kDTKPTriggerFailureInDeallocate";
            break;
          case -402:
            result = "kDTKPTriggerFailedToResetKPerf";
            break;
          case -401:
            result = "kDTKPTriggerFailedToStop";
            break;
          case -400:
            result = "kDTKPTriggerFailedToStart";
            break;
          default:
            if (a1 != -600)
              return 0;
            result = "kDTKPCallbackThreadLockCreationFailure";
            break;
        }
        break;
    }
  }
  else if (a1 > -702)
  {
    if (a1 > -603)
    {
      if (a1 == -602)
        return "kDTKPCallbackAlreadyCreated";
      else
        return "kDTKPCallbackThreadCreationFailure";
    }
    else if (a1 == -701)
    {
      return "kDTKPCPUDatabaseSerializationFailure";
    }
    else if (a1 == -700)
    {
      return "kDTKPCPUDatabaseCreationFailure";
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v1 = a1 + 810;
    result = "kDTKPCounterDatabaseError";
    switch(v1)
    {
      case 0:
        result = "kDTKPCounterAlreadyUnforcedCounters";
        break;
      case 1:
        result = "kDTKPCounterFailedToUnforceCounters";
        break;
      case 2:
        result = "kDTKPCounterAlreadyForcedCounters";
        break;
      case 3:
        result = "kDTKPCounterFailedToForceCounters";
        break;
      case 4:
        result = "kDTKPCounterEventUnavailable";
        break;
      case 6:
        result = "kDTKPCounterEventConflict";
        break;
      case 7:
        result = "kDTKPCounterPMIEventAlreadySet";
        break;
      case 8:
        result = "kDTKPCounterEventAlreadyAdded";
        break;
      case 9:
        result = "kDTKPCounterEventNotFound";
        break;
      case 10:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

void sub_222B1A1A8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B1A284(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B1A2A4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x222B1A250);
}

void sub_222B1A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B1A490(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B1A4A0(uint64_t a1)
{

}

uint64_t sub_222B1A4A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_222B1A4D8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_222BC57D4(a1, a2, v2);
  JUMPOUT(0x222B1A4CCLL);
}

void sub_222B1A56C(uint64_t a1, void *a2)
{
  sub_222B1A574(a2);
}

void sub_222B1A574(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  v2 = objc_opt_new();
  v3 = (id)v1[3];
  v1[3] = v2;

}

void sub_222B1A60C(uint64_t a1, uint64_t a2)
{
  _xpc_connection_s *v3;
  id v4;
  id v5;

  if (*(int *)(a2 + 16) >= 1)
  {
    v3 = *(_xpc_connection_s **)(a2 + 8);
    v4 = (id)a2;
    xpc_connection_cancel(v3);
    v5 = *(id *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;

  }
}

void sub_222B1A704()
{
  uint64_t v0;
  void *v1;

  if (byte_25576F910 == 1)
  {
    NSLog(CFSTR("Expired PID tracking intentionally disabled for process"));
    v0 = 0;
  }
  else
  {
    v0 = objc_opt_new();
  }
  v1 = (void *)qword_25576F920;
  qword_25576F920 = v0;

}

void sub_222B1A824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B1A83C(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[4];
  id *v14;

  v3 = a2;
  objc_msgSend(v3[3], "objectForKey:", *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 || *((int *)v3 + 4) < 1)
  {
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "isEqual:", v5);

    if (v6)
    {

      v4 = 0;
    }
  }
  else
  {
    v7 = v3[1];
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = sub_222B1A988;
    v13[3] = &unk_24EB27D98;
    v14 = v3;
    pid_watcher_collect(v7, v13);
    objc_msgSend(v3[3], "objectForKey:", *(_QWORD *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
      v8 = v3[3];
      objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v9, *(_QWORD *)(a1 + 32));

    }
  }
  v10 = objc_msgSend(v4, "copy");
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_222B1A988(uint64_t a1, uint64_t a2)
{
  sub_222B1A998(a2, *(void **)(a1 + 32));
}

void sub_222B1A998(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id *v5;

  v5 = a2;
  CSSymbolicatorCreateWithSignature();
  if ((CSIsNull() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", CSSymbolicatorGetPid());
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5[3], "objectForKey:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      objc_msgSend(v5[3], "setObject:forKey:", a1, v3);
    CSRelease();

  }
}

void sub_222B1AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B1AB20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithDictionary:", *(_QWORD *)(a2 + 24));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_222B1ABB0(uint64_t a1, void *a2)
{
  _DWORD *v3;
  id v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _xpc_connection_s *v9;
  void *v10;
  int v11;
  int v12;
  _QWORD v13[4];
  _DWORD *v14;

  v3 = a2;
  v4 = v3;
  v5 = v3[4];
  if (*(_BYTE *)(a1 + 32))
  {
    if (v5)
      goto LABEL_10;
    sub_222B1A574(v3);
    pid_watcher_connect(1, 0, 0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)*((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v6;
  }
  else
  {
    if (v5 != 1)
      goto LABEL_10;
    v8 = (void *)*((_QWORD *)v3 + 1);
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = sub_222B1ACC0;
    v13[3] = &unk_24EB27D98;
    v14 = v3;
    pid_watcher_collect(v8, v13);
    v9 = (_xpc_connection_s *)*((_QWORD *)v4 + 1);
    if (v9)
    {
      xpc_connection_cancel(v9);
      v10 = (void *)*((_QWORD *)v4 + 1);
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)v4 + 1) = 0;

    v7 = v14;
  }

LABEL_10:
  v11 = *((_DWORD *)v4 + 4);
  if (*(_BYTE *)(a1 + 32))
    v12 = v11 + 1;
  else
    v12 = v11 - 1;
  *((_DWORD *)v4 + 4) = v12;
  if (v12 < 0)
  {
    NSLog(CFSTR("DTExpiredPidCacheService: Fixing unbalanced enable/disable"));
    *((_DWORD *)v4 + 4) = 0;
  }

}

void sub_222B1ACC0(uint64_t a1, uint64_t a2)
{
  sub_222B1A998(a2, *(void **)(a1 + 32));
}

void sub_222B1AD90(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "cancel");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

}

void sub_222B1B0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B1B0CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B1B0DC(uint64_t a1)
{

}

void sub_222B1B0E4(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if ((a2 - 1) <= 0xFFFFFFFD && (a3 - 1) <= 0xFFFFFFFD)
  {
    objc_msgSend(MEMORY[0x24BE2A958], "fileDescriptorHandshakeWithReceivePort:");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
}

void sub_222B1B5D0(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  v16 = a2;
  objc_msgSend(v16, "error");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v16, "errorStatus");
  switch(v4)
  {
    case 3:
      if (v3)
        goto LABEL_12;
      v11 = CFSTR("Rendering service could not respond");
      v12 = 13;
      break;
    case 2:
      if (v3)
        goto LABEL_12;
      v11 = CFSTR("Rendering service was interrupted");
      v12 = 12;
      break;
    case 1:
      if (v3)
        goto LABEL_12;
      v11 = CFSTR("Rendering service produced unknown error");
      v12 = 14;
      break;
    default:
      goto LABEL_11;
  }
  DTUVRenderingServiceErrorWithDescription(v12, v11, v5, v6, v7, v8, v9, v10, v15);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
  if (!v3)
  {
    v13 = (void *)objc_msgSend(*(id *)(a1 + 32), "newReplyWithMessage:", v16);
    goto LABEL_14;
  }
LABEL_12:
  v13 = (void *)objc_msgSend(*(id *)(a1 + 32), "newReplyWithError:", v3);

LABEL_14:
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "sendControlAsync:replyHandler:", v13, 0);

}

uint64_t sub_222B1BEB4(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void sub_222B1C1B8()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576F930;
  qword_25576F930 = v0;

}

id sub_222B1C470(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const __CFString *v28;
  void *v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  sub_222B1D5EC(v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v3, "applicationState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "numberWithBool:", objc_msgSend(v6, "isPlaceholder"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("Placeholder"));

  if (objc_msgSend(v3, "developerType") == 1)
    v8 = objc_msgSend(MEMORY[0x24BDD1760], "isAppleInternal") ^ 1;
  else
    v8 = 0;
  v9 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v3, "applicationState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "numberWithInt:", objc_msgSend(v10, "isRestricted") | v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("Restricted"));

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend(v3, "applicationExtensionRecords", 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v33;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v33 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * v17), "uniqueIdentifier");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if (v18)
        {
          objc_msgSend(v18, "UUIDString");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "addObject:", v20);

        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v15);
  }

  if (objc_msgSend(v12, "count"))
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("AppExtensionUUIDs"));
  v21 = v3;
  v22 = objc_msgSend(v21, "developerType");
  if (v22 == 3)
  {
    v28 = CFSTR("User");
    goto LABEL_27;
  }
  if (v22 != 1)
  {
    v28 = CFSTR("Unknown");
    goto LABEL_27;
  }
  objc_msgSend(v21, "URL");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "path");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v24, "containsString:", CFSTR("/AppleInternal")) & 1) == 0)
  {
    objc_msgSend(v21, "URL");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "path");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v26, "containsString:", CFSTR("/System/Library")) & 1) == 0
      && (objc_msgSend(v21, "isLaunchProhibited") & 1) == 0)
    {
      objc_msgSend(v21, "appTags");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v27, "containsObject:", CFSTR("SBInternalAppTag")) & 1) == 0)
      {
        objc_msgSend(v21, "appTags");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "containsObject:", CFSTR("hidden"));

        if ((v31 & 1) == 0)
        {
          v28 = CFSTR("System");
          goto LABEL_27;
        }
        goto LABEL_24;
      }

    }
  }

LABEL_24:
  v28 = CFSTR("Internal");
LABEL_27:

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v28, CFSTR("Type"));
  return v4;
}

id sub_222B1C7E8(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a1;
  sub_222B1D5EC(v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("PluginUUID"));

  if ((a2 & 1) == 0)
  {
    objc_msgSend(v3, "effectiveBundleIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("PluginIdentifier"));

    objc_msgSend(v3, "infoDictionary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:ofClass:", CFSTR("NSExtension"), objc_opt_class());
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("ExtensionDictionary"));

  }
  objc_msgSend(v3, "containingBundleRecord");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "URL");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "path");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("ContainerBundlePath"));

  objc_msgSend(v3, "containingBundleRecord");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bundleIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v14, CFSTR("ContainerBundleIdentifier"));

  objc_msgSend(v4, "setObject:forKeyedSubscript:", CFSTR("PluginKit"), CFSTR("Type"));
  return v4;
}

void sub_222B1CB70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_222B1CB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a3 + 16))(a3, *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_222B1CBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, *(_QWORD *)(a1 + 32), 1);
}

void sub_222B1D0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id obj, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_222B1D140(uint64_t a1, void *a2, int a3)
{
  id WeakRetained;
  void *v6;
  id v7;

  v7 = a2;
  if (sub_222B1D1A8(v7, *(void **)(a1 + 32)))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6 = WeakRetained;
    if (a3)
      objc_msgSend(WeakRetained, "applicationInstalled:", v7);
    else
      objc_msgSend(WeakRetained, "applicationUninstalled:", v7);

  }
}

BOOL sub_222B1D1A8(void *a1, void *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v3 = a1;
  v4 = a2;
  v5 = 1;
  if (objc_msgSend(v4, "count"))
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 1;
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = sub_222B1D738;
    v7[3] = &unk_24EB27FD0;
    v8 = v3;
    v9 = &v10;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v7);
    v5 = *((_BYTE *)v11 + 24) != 0;

    _Block_object_dispose(&v10, 8);
  }

  return v5;
}

void sub_222B1D278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B1D290(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (sub_222B1D1A8(v4, *(void **)(a1 + 32)))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

}

void sub_222B1D374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_222B1D5EC(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v3, "URL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "path");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("BundlePath"));

  objc_msgSend(v3, "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("CFBundleIdentifier"));

  if ((a2 & 1) == 0)
  {
    objc_msgSend(v3, "executableURL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "lastPathComponent");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("ExecutableName"));

    objc_msgSend(v3, "localizedName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("DisplayName"));

    objc_msgSend(v3, "bundleVersion");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("Version"));

  }
  return v4;
}

void sub_222B1D738(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
    goto LABEL_13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      while (2)
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          if ((objc_msgSend(v8, "isEqual:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v13), (_QWORD)v14) & 1) != 0)
          {

            goto LABEL_15;
          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v11)
          continue;
        break;
      }
    }

    goto LABEL_13;
  }
  if ((objc_msgSend(v8, "isEqual:", v7) & 1) == 0)
  {
LABEL_13:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
LABEL_15:

}

BOOL sub_222B1E094(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 1;
  v4 = MEMORY[0x24BDAC760];
  while (1)
  {
    if (*((_BYTE *)v18 + 24))
    {
      v6 = *((unsigned __int8 *)v14 + 24) != 0;
      if (!a2)
        goto LABEL_12;
      goto LABEL_9;
    }
    if (*((_BYTE *)v14 + 24))
      break;
    v5 = *((_DWORD *)v10 + 6);
    if ((v5 - 1) > 0x3E)
    {
      v6 = 0;
      goto LABEL_12;
    }
    v8[0] = v4;
    v8[1] = 3221225472;
    v8[2] = sub_222B1E814;
    v8[3] = &unk_24EB28050;
    v8[4] = &v13;
    v8[5] = &v9;
    v8[6] = &v17;
    v8[7] = a1;
    sub_222B1E740(v5, v8);
  }
  v6 = 1;
  if (!a2)
    goto LABEL_12;
LABEL_9:
  if (v6)
    *a2 = *((_DWORD *)v10 + 6);
LABEL_12:
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v6;
}

void sub_222B1E1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void sub_222B1E304(uint64_t a1)
{
  id WeakRetained;
  id v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_source_t v5;
  void *v6;
  NSObject *v7;
  dispatch_time_t v8;
  CFAbsoluteTime Current;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  _QWORD handler[4];
  id v15[6];
  id v16;
  id location;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_initWeak(&location, WeakRetained);
  if (WeakRetained && !*((_QWORD *)WeakRetained + 3))
  {
    DTNStatSourceMapInitialize((CFMutableDictionaryRef *)WeakRetained + 4);
    *((_QWORD *)WeakRetained + 9) = -1;
    v3 = MEMORY[0x24BDAC760];
    v15[2] = (id)MEMORY[0x24BDAC760];
    v15[3] = (id)3221225472;
    v15[4] = sub_222B1E87C;
    v15[5] = &unk_24EB28160;
    objc_copyWeak(&v16, &location);
    v4 = NStatManagerCreate();
    *((_QWORD *)WeakRetained + 3) = v4;
    if (v4)
    {
      NStatManagerAddAllTCP();
      NStatManagerAddAllUDP();
      v5 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, *((dispatch_queue_t *)WeakRetained + 2));
      v6 = (void *)*((_QWORD *)WeakRetained + 8);
      *((_QWORD *)WeakRetained + 8) = v5;

      v7 = *((_QWORD *)WeakRetained + 8);
      v8 = dispatch_time(0, 1000000000);
      dispatch_source_set_timer(v7, v8, 0x3B9ACA00uLL, 0x5F5E100uLL);
      Current = CFAbsoluteTimeGetCurrent();
      v10 = *((_QWORD *)WeakRetained + 8);
      handler[0] = v3;
      handler[1] = 3221225472;
      handler[2] = sub_222B1F3DC;
      handler[3] = &unk_24EB28138;
      objc_copyWeak(v15, &location);
      v15[1] = *(id *)&Current;
      dispatch_source_set_event_handler(v10, handler);
      v11 = *((_QWORD *)WeakRetained + 8);
      v12[0] = v3;
      v12[1] = 3221225472;
      v12[2] = sub_222B1F4F8;
      v12[3] = &unk_24EB28000;
      objc_copyWeak(&v13, &location);
      dispatch_source_set_cancel_handler(v11, v12);
      dispatch_resume(*((dispatch_object_t *)WeakRetained + 8));
      objc_destroyWeak(&v13);
      objc_destroyWeak(v15);
    }
    else
    {
      NSLog(CFSTR("Could not create NStatManagerRef"));
    }
    objc_destroyWeak(&v16);
  }

  objc_destroyWeak(&location);
}

void sub_222B1E544(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_222B1E5DC(uint64_t a1)
{
  NSObject *v1;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = -1;
  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 64);
  if (v1)
    dispatch_source_cancel(v1);
}

uint64_t sub_222B1E6E8(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 80) = *(_DWORD *)(result + 40);
  return result;
}

void sub_222B1E740(int a1, void *a2)
{
  id v2;
  id v3;
  _OWORD *v4;
  size_t v5;
  _OWORD v6[11];
  int v7;
  int v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)v8 = xmmword_222BD1620;
  v8[4] = a1;
  v8[5] = 1;
  v5 = 180;
  v2 = a2;
  if (sysctl(v8, 6u, v6, &v5, 0, 0))
  {
    v3 = v2;
    v4 = 0;
  }
  else
  {
    v4 = v6;
    v3 = v2;
  }
  (*((void (**)(id, _OWORD *))v2 + 2))(v3, v4);

}

uint64_t sub_222B1E814(uint64_t result, char *__s1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  if (__s1)
  {
    result = strncmp(__s1, *(const char **)(result + 56), 0x10uLL);
    if ((_DWORD)result)
    {
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24);
      return result;
    }
    v3 = *(_QWORD *)(v2 + 32);
  }
  else
  {
    v3 = *(_QWORD *)(result + 48);
  }
  *(_BYTE *)(*(_QWORD *)(v3 + 8) + 24) = 1;
  return result;
}

void sub_222B1E87C(uint64_t a1, const void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7[6];
  id v8[6];
  id v9[2];

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    DTNStatSourceMapAddSource((uint64_t)WeakRetained + 32, a2);
    v6 = (void *)MEMORY[0x24BDAC760];
    v8[2] = (id)MEMORY[0x24BDAC760];
    v8[3] = (id)3221225472;
    v8[4] = sub_222B1EA04;
    v8[5] = &unk_24EB280B8;
    objc_copyWeak(v9, v3);
    v9[1] = (id)a2;
    NStatSourceSetDescriptionBlock();
    v7[2] = v6;
    v7[3] = (id)3221225472;
    v7[4] = sub_222B1EF78;
    v7[5] = &unk_24EB280B8;
    objc_copyWeak(v8, v3);
    v8[1] = (id)a2;
    NStatSourceSetCountsBlock();
    objc_copyWeak(v7, v3);
    v7[1] = (id)a2;
    NStatSourceSetRemovedBlock();
    MEMORY[0x227678DB0](a2);
    objc_destroyWeak(v7);
    objc_destroyWeak(v8);
    objc_destroyWeak(v9);
  }

}

void sub_222B1E9CC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_222B1EA04(uint64_t a1, const __CFDictionary *a2)
{
  _QWORD *WeakRetained;
  void *v5;
  CFDictionaryRef *v6;
  const __CFNumber *Value;
  void *v8;
  XRNetworkingServiceObservationTuple *v9;
  CFNumberRef v10;
  id *data;
  id v12;
  const void *v13;
  uint64_t v14;
  CFNumberRef v15;
  id *v16;
  id v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  char v21;
  mach_port_name_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  id v26;
  void *v27;
  const __CFNumber *v28;
  int v29;
  CFDictionaryRef *v30;
  CFDictionaryRef *v31;
  CFDictionaryRef v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  _QWORD valuePtr[4];
  CFDictionaryRef *v38;
  int v39;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && WeakRetained[3])
  {
    v6 = WeakRetained;
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x24BE6B7C0]);
    LODWORD(valuePtr[0]) = 0;
    if (!Value
      || !CFNumberGetValue(Value, kCFNumberIntType, valuePtr)
      || (LODWORD(valuePtr[0]) - 1) > 0x3E
      || ((unint64_t)v6[7] & (1 << SLOBYTE(valuePtr[0]))) != 0)
    {

      NStatSourceRemove();
      goto LABEL_8;
    }

    DTNStatSourceMapGetSource(v6 + 4, *(const void **)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8 || *((_BYTE *)v6 + 85))
    {
LABEL_47:

      goto LABEL_8;
    }
    v9 = -[XRNetworkingServiceObservationTuple initWithKind:count:source:indexToKeyMap:]([XRNetworkingServiceObservationTuple alloc], "initWithKind:count:source:indexToKeyMap:", 1, 8, a2, &unk_24EB28070);
    v36 = objc_msgSend(v8, "serialNumber");
    v10 = CFNumberCreate(0, kCFNumberLongType, &v36);
    data = v9->data;
    v12 = data[6];
    data[6] = v10;

    v13 = (const void *)NStatSourceCopyProperty();
    if (!v13)
      goto LABEL_17;
    v14 = 0;
    while (!CFEqual(**((CFTypeRef **)&unk_24EB281A8 + v14), v13))
    {
      if (++v14 == 4)
        goto LABEL_17;
    }
    LODWORD(valuePtr[0]) = v14;
    if (v14 >= 4)
LABEL_17:
      LODWORD(valuePtr[0]) = 0;
    v15 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    v16 = v9->data;
    v17 = v16[7];
    v16[7] = v15;

    if (v13)
      CFRelease(v13);
    v18 = objc_msgSend(v9->data[3], "intValue");
    v19 = objc_msgSend(v8, "pid");
    if (*((_QWORD *)v9->data + 3))
      v20 = (int)v18 < 0;
    else
      v20 = 1;
    v21 = v20;
    if (v19 != -1 || (v21 & 1) != 0)
    {
LABEL_35:
      if ((v21 & 1) == 0 && objc_msgSend(v8, "pid") != (_DWORD)v18)
      {
        v24 = objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithInt:", objc_msgSend(v8, "pid"));
        v25 = v9->data;
        v26 = v25[3];
        v25[3] = (id)v24;

      }
      if (sub_222B1EDDC(v6, objc_msgSend(v8, "pid")))
      {
        -[CFDictionaryRef channel](v6, "channel");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        sub_222B1EE44(v9, v27);

      }
      v28 = (const __CFNumber *)*((_QWORD *)v9->data + 2);
      if (v28 != (const __CFNumber *)*MEMORY[0x24BDBD430])
      {
        v35 = 0;
        CFNumberGetValue(v28, kCFNumberIntType, &v35);
        v29 = v35;
        v30 = v6;
        v31 = v30;
        if ((v29 - 1) <= 0x3E && !*((_BYTE *)v30 + 85))
        {
          v32 = v30[6];
          v33 = 1 << v29;
          if (((unint64_t)v32 & v33) == 0)
          {
            v30[6] = (CFDictionaryRef)((unint64_t)v32 | v33);
            dispatch_get_global_queue(0, 0);
            v34 = objc_claimAutoreleasedReturnValue();
            valuePtr[0] = MEMORY[0x24BDAC760];
            valuePtr[1] = 3221225472;
            valuePtr[2] = sub_222B1F578;
            valuePtr[3] = &unk_24EB28028;
            v39 = v29;
            v38 = v31;
            dispatch_async(v34, valuePtr);

          }
        }

      }
      goto LABEL_47;
    }
    if ((_DWORD)v18 || !*((_BYTE *)v6 + 84))
    {
      v22 = +[DTInstrumentServer taskForPid:](DTInstrumentServer, "taskForPid:", v18);
      if (!v22)
      {
        v23 = 4294967294;
        goto LABEL_34;
      }
      mach_port_deallocate(*MEMORY[0x24BDAEC58], v22);
    }
    v23 = v18;
LABEL_34:
    objc_msgSend(v8, "setPid:", v23);
    goto LABEL_35;
  }
LABEL_8:

}

BOOL sub_222B1EDDC(void *a1, unsigned int a2)
{
  _DWORD *v3;
  int v4;
  _BOOL8 v6;

  v3 = a1;
  if (a2 == -1)
    NSLog(CFSTR("Checking a pid of -1, this shouldn't be happening"));
  v4 = v3[20];
  v6 = v4 == -1 || a2 > 0xFFFFFFFD || v4 == a2;

  return v6;
}

void sub_222B1EE44(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t i;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  v8[0] = objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithInt:", objc_msgSend(v3, "kind"));
  v8[1] = objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:count:", v3[1], objc_msgSend(v3, "count"));
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:count:", v8, 2);
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithObject:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendMessageAsync:replyHandler:", v6, 0);

  for (i = 1; i != -1; --i)
}

void sub_222B1EF78(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef *WeakRetained;
  CFDictionaryRef *v5;
  void *v6;
  void *v7;
  XRNetworkingServiceObservationTuple *v8;
  id *data;
  id v10;
  CFNumberRef v11;
  id *v12;
  id v13;
  id *v14;
  id v15;
  CFNumberRef v16;
  id *v17;
  id v18;
  XRNetworkingServiceObservationTuple *v19;
  void *v20;
  XRNetworkingServiceObservationTuple *v21;
  XRNetworkingServiceObservationTuple *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  const __CFNumber *v27;
  id *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v32;
  const __CFNumber *v33;
  uint64_t v34;
  CFNumberRef v35;
  id *v36;
  id v37;
  id *v38;
  const __CFNumber *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  XRNetworkingServiceObservationTuple *v45;
  uint64_t valuePtr;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  WeakRetained = (CFDictionaryRef *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (!WeakRetained || !WeakRetained[3])
    goto LABEL_35;
  DTNStatSourceMapGetSource(WeakRetained + 4, *(const void **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6 || !sub_222B1EDDC(v5, objc_msgSend(v6, "pid")))
    goto LABEL_34;
  v8 = -[XRNetworkingServiceObservationTuple initWithKind:count:source:indexToKeyMap:]([XRNetworkingServiceObservationTuple alloc], "initWithKind:count:source:indexToKeyMap:", 2, 11, a2, &unk_24EB280D8);
  data = v8->data;
  v10 = data[9];
  data[9] = 0;

  valuePtr = objc_msgSend(v7, "serialNumber");
  v11 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  v12 = v8->data;
  v13 = v12[9];
  v12[9] = v11;

  v14 = v8->data;
  v15 = v14[10];
  v14[10] = 0;

  v16 = CFNumberCreate(0, kCFNumberLongType, v5 + 9);
  v17 = v8->data;
  v18 = v17[10];
  v17[10] = v16;

  v19 = -[XRNetworkingServiceObservationTuple initWithKind:count:]([XRNetworkingServiceObservationTuple alloc], "initWithKind:count:", 2, 11);
  objc_msgSend(v7, "lastStats");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v19;
  v22 = v8;
  v23 = v20;
  if (-[XRNetworkingServiceObservationTuple kind](v22, "kind") != 2)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TakeDifferenceBetweenTuples(XRNetworkingServiceObservationTuple *__strong, XRNetworkingServiceObservationTuple *__strong, XRNetworkingServiceObservationTuple *__strong)");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "handleFailureInFunction:file:lineNumber:description:", v42, CFSTR("DTNetworkingService.m"), 235, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ending.kind == XRNET_CONNECTION_STATS"));

  }
  v45 = v22;
  if (objc_msgSend(v23, "kind") != 2)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TakeDifferenceBetweenTuples(XRNetworkingServiceObservationTuple *__strong, XRNetworkingServiceObservationTuple *__strong, XRNetworkingServiceObservationTuple *__strong)");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "handleFailureInFunction:file:lineNumber:description:", v44, CFSTR("DTNetworkingService.m"), 236, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("starting.kind == XRNET_CONNECTION_STATS"));

  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = (const __CFNumber *)*MEMORY[0x24BDBD430];
  do
  {
    if (v26 < 7)
    {
      v49 = 0;
      v32 = (const __CFNumber *)v8->data[v24];
      if (v32 == v27)
      {
        v49 = -1;
      }
      else
      {
        v48 = 0;
        CFNumberGetValue(v32, kCFNumberLongType, &v48);
        v33 = *(const __CFNumber **)(v23[1] + v24 * 8);
        if (v33 == v27)
        {
          v34 = v48;
        }
        else
        {
          v47 = 0;
          CFNumberGetValue(v33, kCFNumberLongType, &v47);
          v34 = v48 - v47;
        }
        v49 = v34;
        if ((v34 & 0x8000000000000000) == 0)
        {
          v25 |= v34 != 0;
          v35 = CFNumberCreate(0, kCFNumberLongType, &v49);
          v36 = v21->data;
          v37 = v36[v24];
          v36[v24] = v35;
LABEL_27:

          goto LABEL_30;
        }
      }
      v38 = v21->data;
      v39 = v27;
      v37 = v38[v24];
      v38[v24] = v39;
      goto LABEL_27;
    }
    v28 = v8->data;
    if (!((v24 == 10) | v25 & 1))
    {
      v29 = *(const __CFNumber **)(v23[1] + v24 * 8);
      v30 = (const __CFNumber *)v28[v24];
      if (v29 == v30)
      {
        v25 = 0;
      }
      else if (v29 == v27 || v30 == v27)
      {
        v25 = 1;
      }
      else
      {
        v25 = CFNumberCompare(v29, v30, 0) != kCFCompareEqualTo;
        v28 = v8->data;
      }
    }
    objc_storeStrong(&v21->data[v24], v28[v24]);
LABEL_30:
    ++v26;
    ++v24;
  }
  while (v24 != 11);

  if ((v25 & 1) != 0)
  {
    -[CFDictionaryRef channel](v5, "channel");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    sub_222B1EE44(v21, v40);

    objc_msgSend(v7, "setLastStats:", v45);
  }

LABEL_34:
LABEL_35:

}

void sub_222B1F380(uint64_t a1)
{
  __CFDictionary **WeakRetained;
  __CFDictionary **v3;

  WeakRetained = (__CFDictionary **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[3])
  {
    v3 = WeakRetained;
    DTNStatSourceMapRemoveSource(WeakRetained + 4, *(const void **)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_222B1F3DC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = WeakRetained;
    NStatManagerQueryAllSources();

  }
}

double sub_222B1F478(uint64_t a1)
{
  double v2;
  double v3;
  BOOL v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 40) + -1.0;
  v3 = round(v2);
  v4 = v2 <= 0.0;
  result = 0.0;
  if (!v4)
    result = v3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 72);
  if (result > (double)v7)
  {
    result = result - (double)v7;
    *(_QWORD *)(v6 + 72) = llround(result) + v7;
  }
  return result;
}

void sub_222B1F4F8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    NStatManagerDestroy();
    *((_QWORD *)v3 + 3) = 0;
    DTNStatSourceMapDestroy((const void **)v3 + 4);
    v2 = (void *)*((_QWORD *)v3 + 8);
    *((_QWORD *)v3 + 8) = 0;

    WeakRetained = v3;
  }

}

void sub_222B1F578(uint64_t a1)
{
  int v2;
  _QWORD v3[4];
  id v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 40);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = sub_222B1F5F4;
  v3[3] = &unk_24EB281F8;
  v4 = *(id *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 40);
  sub_222B1E740(v2, v3);

}

void sub_222B1F5F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;
  uint64_t v6;
  int v7;

  if (a2)
  {
    v2 = *(_QWORD **)(a1 + 32);
    v3 = v2[2];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222B1F69C;
    block[3] = &unk_24EB281D0;
    v7 = *(_DWORD *)(a1 + 40);
    v6 = a2;
    v5 = v2;
    dispatch_sync(v3, block);

  }
  else
  {
    NSLog(CFSTR("Failed to get network information for net idx %d"), *(unsigned int *)(a1 + 40));
  }
}

void sub_222B1F69C(uint64_t a1)
{
  CFNumberRef v2;
  void **data;
  void *v4;
  CFStringRef v5;
  id *v6;
  id v7;
  void *v8;
  XRNetworkingServiceObservationTuple *v9;

  v9 = -[XRNetworkingServiceObservationTuple initWithKind:count:]([XRNetworkingServiceObservationTuple alloc], "initWithKind:count:", 0, 2);
  v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 48));
  data = v9->data;
  v4 = *data;
  *data = v2;

  v5 = CFStringCreateWithCString(0, *(const char **)(a1 + 40), 0x8000100u);
  v6 = v9->data;
  v7 = v6[1];
  v6[1] = (id)v5;

  objc_msgSend(*(id *)(a1 + 32), "channel");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B1EE44(v9, v8);

}

void sub_222B2037C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B203A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B203B8(uint64_t a1)
{

}

void sub_222B203C0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  DVTProviderLogger *v9;
  id v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = a2;
  v8 = a3;
  v9 = -[DVTProviderLogger initWithProviderName:]([DVTProviderLogger alloc], "initWithProviderName:", v7);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
  v10 = objc_retainAutorelease(v7);
  objc_msgSend(v10, "UTF8String");
  v11 = ktrace_session_provide();

  if (v11)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v10);
    if (qword_25576F940 != -1)
      dispatch_once(&qword_25576F940, &unk_24EB28298);
    v12 = qword_25576F938;
    if (os_log_type_enabled((os_log_t)qword_25576F938, OS_LOG_TYPE_ERROR))
      sub_222BC5948((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    *a4 = 1;
  }

}

intptr_t sub_222B204D8(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_222B209D8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Instruments", "dtktracehelpers");
  v1 = (void *)qword_25576F938;
  qword_25576F938 = (uint64_t)v0;

}

void sub_222B20A08(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_222B20F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  NSString *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[3];
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", v9);
  v10 = (NSString *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v11 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (v10 != v11)
  {
    v16[0] = CFSTR("pid");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v12;
    v16[1] = CFSTR("type");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16[2] = CFSTR("signature");
    v17[1] = v13;
    v17[2] = a4;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:objectArguments:", NSSelectorFromString(v10), v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "sendControlAsync:replyHandler:", v15, 0);

  }
}

void sub_222B213B8(uint64_t a1)
{
  _xpc_connection_s *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_xpc_connection_s **)(*(_QWORD *)(a1 + 32) + 32);
  if (v2)
  {
    xpc_connection_cancel(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;

  }
}

void sub_222B21AF4()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  dword_25576F948 = getpid();
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "environment");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("XPC_SIMULATOR_LAUNCHD_NAME"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_25576F958;
  qword_25576F958 = v1;

}

void sub_222B224E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B22500(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B22510(uint64_t a1)
{

}

void sub_222B22518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  pid_watcher_deep_symbol_owner_for_pid(*(void **)(*(_QWORD *)(a1 + 32) + 32), *(_DWORD *)(a1 + 48), a1 + 52);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_222B22730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B22750(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 48));
    v3 = *(void **)(a1 + 32);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
  v5 = *(_DWORD *)(a1 + 64);
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  pid_watcher_symbolicator_for_pid(v4, v5, v3 != v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    +[DTExpiredPidCacheService defaultCache](DTExpiredPidCacheService, "defaultCache");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "signatureForExpiredPid:", *(_QWORD *)(a1 + 48));
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
}

uint64_t sub_222B228E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_222B22E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B22E6C(uint64_t a1)
{
  const char *Path;
  uint64_t Signature;
  uint64_t v4;
  void *v5;

  Path = (const char *)CSSymbolOwnerGetPath();
  if (Path)
  {
    if (!strcmp(Path, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String")))
    {
      Signature = CSSymbolOwnerCreateSignature();
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v5 = *(void **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = Signature;

    }
  }
}

void sub_222B22EF8(uint64_t a1)
{
  _QWORD *CFUUIDBytes;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Signature;
  uint64_t v8;
  void *v9;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    CSSymbolicatorGetSymbolOwner();
    CFUUIDBytes = (_QWORD *)CSSymbolOwnerGetCFUUIDBytes();
    v3 = *(uint64_t **)(a1 + 40);
    v5 = *v3;
    v4 = v3[1];
    if (v5 == *CFUUIDBytes && v4 == CFUUIDBytes[1])
    {
      Signature = CSSymbolOwnerCreateSignature();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = Signature;

    }
  }
}

void *sub_222B23A1C()
{
  void *result;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  result = dlopen("/System/Library/Frameworks/WatchKit.framework/WatchKit", 1);
  qword_25576F978 = (uint64_t)result;
  if (result)
  {
    v11 = dlsym(result, "SPXcodeSupportAppLaunchModeKey");
    v10 = dlsym((void *)qword_25576F978, "SPXcodeSupportAppLaunchModeValueNotification");
    v1 = dlsym((void *)qword_25576F978, "SPXcodeSupportAppLaunchModeValueComplication");
    v2 = dlsym((void *)qword_25576F978, "SPXcodeSupportAppLaunchModeValueGlance");
    v3 = dlsym((void *)qword_25576F978, "SPXcodeSupportAppLaunchModeNotificationForceStaticPresentationKey");
    v4 = dlsym((void *)qword_25576F978, "SPXcodeSupportAppLaunchModeNotificationRemotePayloadKey");
    v5 = dlsym((void *)qword_25576F978, "SPHoldCompanionExtensionProcessAssertion");
    v6 = dlsym((void *)qword_25576F978, "SPXcodeWillInstallSockPuppetAppWithCompanionAppIdentifier");
    v7 = dlsym((void *)qword_25576F978, "SPLaunchSockPuppetAppForCompanionAppWithIdentifier");
    v8 = dlsym((void *)qword_25576F978, "SPTerminateSockPuppetAppForCompanionAppWithIdentifier");
    v9 = dlsym((void *)qword_25576F978, "SPLaunchWatchAppWithIdentifier");
    result = dlsym((void *)qword_25576F978, "SPTerminateWatchAppWithIdentifier");
    *(_QWORD *)&xmmword_25576F988 = v11;
    *((_QWORD *)&xmmword_25576F988 + 1) = v10;
    qword_25576F998 = (uint64_t)v1;
    unk_25576F9A0 = v2;
    *(_QWORD *)&xmmword_25576F9A8 = v3;
    *((_QWORD *)&xmmword_25576F9A8 + 1) = v4;
    qword_25576F9B8 = (uint64_t)v5;
    unk_25576F9C0 = v6;
    *(_QWORD *)&xmmword_25576F9C8 = v7;
    *((_QWORD *)&xmmword_25576F9C8 + 1) = v8;
    qword_25576F9D8 = (uint64_t)v9;
    unk_25576F9E0 = result;
  }
  return result;
}

void sub_222B23D14()
{
  void *v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)objc_opt_class();
  if (v1)
  {
    objc_msgSend(v1, "sockPuppetSymbols");
    v2 = (uint64_t *)*((_QWORD *)&v23 + 1);
  }
  else
  {
    v2 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
  }
  v3 = (void *)objc_opt_class();
  if (v3)
  {
    objc_msgSend(v3, "sockPuppetSymbols");
    v4 = (uint64_t *)v18;
    if (v2)
    {
LABEL_6:
      v5 = *v2;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    if (v2)
      goto LABEL_6;
  }
  v5 = 0;
LABEL_9:
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v5, CFSTR("IDEWatchLaunchMode-Notification"));
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v6, CFSTR("IDEWatchLaunchMode-Complication"));
  v7 = (void *)objc_opt_class();
  if (v7)
  {
    objc_msgSend(v7, "sockPuppetSymbols");
    if (*((_QWORD *)&v12 + 1))
      v8 = **((_QWORD **)&v12 + 1);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
  }
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v8, CFSTR("IDEWatchLaunchMode-Glance"), v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25,
    v26,
    v27,
    v28);
  v9 = objc_msgSend(v0, "copy");
  v10 = (void *)qword_25576F9E8;
  qword_25576F9E8 = v9;

}

void sub_222B24114(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(a1 + 32);
  v2 = (void *)MEMORY[0x24BDD1540];
  v3 = DTDefaultCompanionProcessControlServiceIdentifier;
  v6 = *MEMORY[0x24BDD0FC8];
  v7[0] = CFSTR("Will Install Watch App timed out.");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", v3, -3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "invokeCompletionWithReturnValue:error:", 0, v5);

}

uint64_t sub_222B241E8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", a2, a2);
}

void sub_222B247C8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(a1 + 32);
  v2 = (void *)MEMORY[0x24BDD1540];
  v3 = DTDefaultCompanionProcessControlServiceIdentifier;
  v6 = *MEMORY[0x24BDD0FC8];
  v7[0] = CFSTR("Watch app launch timed out.");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", v3, -2, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "invokeCompletionWithReturnValue:error:", 0, v5);

}

uint64_t sub_222B2489C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", a3, a3);
}

uint64_t sub_222B24A18(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", a2, a2);
}

DTGPUPerformanceStateControlAGXKernel *sub_222B24A28(void *a1)
{
  id v1;
  DTGPUPerformanceStateControlAGXUMD *v2;
  DTGPUPerformanceStateControlAGXUMD *v3;
  DTGPUPerformanceStateControlAGXKernel *v4;
  DTGPUPerformanceStateControlAGXKernel *v5;

  v1 = a1;
  if (objc_msgSend(v1, "supportsFamily:", 1001))
  {
    v2 = -[DTGPUPerformanceStateControlAGXUMD initWithDevice:]([DTGPUPerformanceStateControlAGXUMD alloc], "initWithDevice:", v1);
    v3 = v2;
    if (v2)
      v4 = v2;
    else
      v4 = -[DTGPUPerformanceStateControlAGXKernel initWithDevice:]([DTGPUPerformanceStateControlAGXKernel alloc], "initWithDevice:", v1);
    v5 = v4;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_222B24AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B24BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B24C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)DTGPUPerformanceStateControlAGXKernel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_222B24C4C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_222B24F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B25104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B2523C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B2555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_222B25678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sDTTapLogClient()
{
  if (qword_25576F9F8 != -1)
    dispatch_once(&qword_25576F9F8, &unk_24EB27690);
  return (id)qword_25576D8F8;
}

void sub_222B256D4()
{
  void *v0;
  uint64_t v1;
  os_log_t v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "integerForKey:", CFSTR("DTTapLogLevel"));

  if (v1 >= 1)
  {
    v2 = os_log_create("com.apple.dt.Instruments", "DTTap");
    v3 = (void *)qword_25576D8F8;
    qword_25576D8F8 = (uint64_t)v2;

    sDTTapLogClient();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_222B17000, v4, OS_LOG_TYPE_INFO, "DTTapLogging: Enabled", v5, 2u);
    }

  }
}

void sub_222B25B1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  id v16;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    v16 = objc_begin_catch(a1);
    NSLog(CFSTR("Exception caught at %s:%d - %@"));

    objc_end_catch();
    JUMPOUT(0x222B25AF4);
  }
  _Unwind_Resume(a1);
}

void sub_222B25BA8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  DTTapStatusMemo *v24;
  void *v25;
  DTTapStatusMemo *v26;
  id WeakRetained;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  id v52;
  _QWORD v53[9];
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v3 = a2;
  v64 = 0;
  v65 = &v64;
  v66 = 0x2020000000;
  v67 = 0;
  v60 = 0;
  v61 = &v60;
  v62 = 0x2020000000;
  v63 = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2020000000;
  v59 = 0;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2020000000;
  v57 = 0;
  v4 = MEMORY[0x24BDAC760];
  v53[0] = MEMORY[0x24BDAC760];
  v53[1] = 3221225472;
  v53[2] = sub_222B262EC;
  v53[3] = &unk_24EB28418;
  v53[6] = &v60;
  v53[7] = v58;
  v53[8] = &v54;
  v53[4] = *(_QWORD *)(a1 + 32);
  v53[5] = &v64;
  objc_msgSend(v3, "enumerateActions:", v53);
  v5 = objc_msgSend(v3, "kind");
  switch(v5)
  {
    case 1:
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(unsigned __int8 *)(a1 + 56);
      v14 = *((unsigned __int8 *)v65 + 24);
      v15 = *((unsigned __int8 *)v61 + 24);
      v16 = *((unsigned __int8 *)v55 + 24);
      v17 = v3;
      v18 = objc_msgSend(v17, "sampleInterval");
      v19 = v18;
      v73 = 0;
      v74 = &v73;
      if (v18 > v12)
        v20 = 1;
      else
        v20 = v12 / v18;
      v75 = 0x2020000000;
      LOBYTE(v76) = 0;
      if (objc_msgSend(v17, "hasThreadStateFilter"))
      {
        v68 = v4;
        v69 = 3221225472;
        v70 = sub_222B27CE4;
        v71 = &unk_24EB28600;
        v72 = &v73;
        objc_msgSend(v17, "enumerateThreadStatesToInclude:", &v68);
      }
      if (*((_BYTE *)v74 + 24))
      {
        if (v13)
        {
          v21 = qword_25576D928;
          v22 = qword_25576D928 / 0x32uLL;
        }
        else
        {
          v22 = 4 * v19 / 0x989680;
          if (v22 <= 2)
            v22 = 2;
          v21 = qword_25576D928;
        }
        v40 = v21 >= v22;
        v41 = v21 - v22;
        if (v40)
          v42 = v41;
        else
          v42 = 0;
        v39 = v22 * v20;
        v38 = v42 * v20;
      }
      else
      {
        v38 = 0;
        if ((unint64_t)(qword_25576D920 * v20) < 0x64)
          v39 = 1;
        else
          v39 = qword_25576D920 * v20 / 0x64uLL;
      }
      v43 = 5;
      if (!(v15 | v14 | v16))
        v43 = 0;
      if (v14 && v15)
      {
        v43 += ((unint64_t)(qword_25576D930 + 3) >> 2) + ((unint64_t)(qword_25576D938 + 3) >> 2) + 4;
      }
      else if (v14)
      {
        v43 += ((unint64_t)(qword_25576D930 + 3) >> 2) + 3;
      }
      else if (v15)
      {
        v43 += (unint64_t)(qword_25576D938 + 3) >> 2;
      }
      if (v16)
        v43 += 5;
      v44 = v38 + v43 * v39;
      _Block_object_dispose(&v73, 8);

      v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v46 = v44 + *(_QWORD *)(v45 + 24);
      goto LABEL_73;
    case 2:
      if (*((_BYTE *)v65 + 24) && *((_BYTE *)v61 + 24))
      {
        v23 = ((unint64_t)(qword_25576D930 + 3) >> 2) + ((unint64_t)(qword_25576D938 + 3) >> 2) + 9;
      }
      else if (*((_BYTE *)v65 + 24))
      {
        v23 = ((unint64_t)(qword_25576D930 + 3) >> 2) + 8;
      }
      else if (*((_BYTE *)v61 + 24))
      {
        v23 = ((unint64_t)(qword_25576D938 + 3) >> 2) + 5;
      }
      else
      {
        v23 = 4;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v23
                                                                   * (2000
                                                                    * *(_QWORD *)(a1 + 48)
                                                                    / 0x3B9ACA00uLL);
      break;
    case 3:
      v6 = *(_QWORD *)(a1 + 48);
      v51 = *((unsigned __int8 *)v65 + 24);
      v49 = *((unsigned __int8 *)v61 + 24);
      v52 = v3;
      objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "integerForKey:", CFSTR("DTKPTapMaxCustomClassSubclassFilters"));

      v9 = 5;
      if (v8)
        v9 = v8;
      v50 = v9;
      objc_msgSend(v52, "kdebugFilter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "containsClass:subclassID:", 1, 12) & 1) != 0)
        v11 = 1;
      else
        v11 = objc_msgSend(v10, "containsClass:subclassID:", 4, 12);
      v28 = objc_msgSend(v10, "containsClass:subclassID:", 1, 48);
      v29 = objc_msgSend(v10, "containsClass:subclassID:", 1, 64);
      if (objc_msgSend(v10, "containsClass:subclassID:", 1, 10))
      {
        v30 = objc_msgSend(v10, "containsClass:subclassID:", 133, 1);
      }
      else
      {
        v31 = objc_msgSend(v10, "containsClass:subclassID:", 33, 10);
        v30 = objc_msgSend(v10, "containsClass:subclassID:", 133, 1);
        if (!v31)
        {
          v32 = 0;
          if (!v11)
          {
LABEL_28:
            if (v28)
            {
              v32 += qword_25576D958 * v6 / 0x3B9ACA00uLL;
              if (!v29)
                goto LABEL_30;
            }
            else if (!v29)
            {
LABEL_30:
              v33 = 0;
              if (!v30)
                goto LABEL_32;
              goto LABEL_31;
            }
            v33 = qword_25576D948 * v6 / 0x3B9ACA00uLL;
            if (!v30)
            {
LABEL_32:
              v73 = 0;
              v74 = &v73;
              v75 = 0x2020000000;
              v76 = 0;
              objc_msgSend(v10, "kdebugCodes");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              v68 = v4;
              v69 = 3221225472;
              v70 = sub_222B27D04;
              v71 = &unk_24EB28628;
              v72 = &v73;
              objc_msgSend(v34, "enumerateObjectsUsingBlock:", &v68);

              v35 = v74[3];
              if (v35 > v50)
              {
                v74[3] = v50;
                v35 = v50;
              }
              if (v51 && v49)
              {
                v36 = ((unint64_t)(qword_25576D930 + 3) >> 2) + ((unint64_t)(qword_25576D938 + 3) >> 2);
              }
              else
              {
                if (v51)
                {
                  v37 = qword_25576D930;
                }
                else
                {
                  if (!v49)
                  {
                    v47 = 3;
                    goto LABEL_72;
                  }
                  v37 = qword_25576D938;
                }
                v36 = (unint64_t)(v37 + 3) >> 2;
              }
              v47 = v36 + 4;
LABEL_72:
              v48 = 3 * (v33 + qword_25576D968 * v35) + v47 * v32;
              _Block_object_dispose(&v73, 8);

              v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
              v46 = v48 + *(_QWORD *)(v45 + 24);
LABEL_73:
              *(_QWORD *)(v45 + 24) = v46;
              break;
            }
LABEL_31:
            v33 += qword_25576D960 * v6 / 0x3B9ACA00uLL;
            goto LABEL_32;
          }
LABEL_27:
          v32 += qword_25576D950 * v6 / 0x3B9ACA00uLL;
          goto LABEL_28;
        }
      }
      v32 = qword_25576D940 * v6 / 0x3B9ACA00uLL;
      if (!v11)
        goto LABEL_28;
      goto LABEL_27;
    default:
      v24 = [DTTapStatusMemo alloc];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unsupported trigger kind: %u"), objc_msgSend(v3, "kind"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = -[DTTapStatusMemo initWithStatus:notice:](v24, "initWithStatus:notice:", 2281701376, v25);

      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
      objc_msgSend(WeakRetained, "_handleStatusMemo:", v26);

      break;
  }
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(&v60, 8);
  _Block_object_dispose(&v64, 8);

}

void sub_222B26294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 136), 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_222B262EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v13;
  DTTapStatusMemo *v14;
  void *v15;
  DTTapStatusMemo *v16;
  id WeakRetained;

  switch((int)a2)
  {
    case 0:
    case 2:
      return;
    case 1:
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a9 != 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = a11 != 0;
      break;
    case 3:
    case 5:
      v13 = a1[7];
      goto LABEL_6;
    case 4:
      v13 = a1[8];
LABEL_6:
      *(_BYTE *)(*(_QWORD *)(v13 + 8) + 24) = 1;
      break;
    default:
      v14 = [DTTapStatusMemo alloc];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown action in config: %d"), a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = -[DTTapStatusMemo initWithStatus:notice:](v14, "initWithStatus:notice:", 2281701376, v15);

      WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 8));
      objc_msgSend(WeakRetained, "_handleStatusMemo:", v16);

      break;
  }
}

void sub_222B26654(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "uuid");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void sub_222B26E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  id *v63;
  uint64_t v64;

  objc_destroyWeak(v63);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v64 - 240), 8);
  _Block_object_dispose((const void *)(v64 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B26F3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B26F4C(uint64_t a1)
{

}

void sub_222B26F54(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  DTTapStatusMemo *v5;

  v3 = a2;
  v5 = -[DTTapStatusMemo initWithStatus:notice:]([DTTapStatusMemo alloc], "initWithStatus:notice:", 0x80000000, v3);

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "_handleStatusMemo:", v5);

}

void sub_222B26FCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  DTTapStatusMemo *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id WeakRetained;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  DTTapStatusMemo *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  DTTapStatusMemo *v31;
  DTTapStatusMemo *v32;
  id v33;
  DTTapStatusMemo *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void *v49;
  id v50;
  uint64_t *v51;

  v3 = a2;
  v4 = objc_msgSend(v3, "kind");
  if ((_DWORD)v4 == 3)
  {
    objc_msgSend(v3, "kdebugFilter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v15 = *(void **)(a1 + 32);
      objc_msgSend(v3, "kdebugFilter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addCodeSet:", v16);

    }
    v17 = *(void **)(a1 + 32);
    v33 = 0;
    objc_msgSend(v17, "createTriggerKDebug:", &v33);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v33;
    v9 = (DTTapStatusMemo *)v33;
    if (v7)
    {
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
      v11 = v7;
      v19 = v3;
      v20 = WeakRetained;
      objc_msgSend(v11, "setFilterMode:", 1);
      if (objc_msgSend(v19, "isAllProcesses"))
      {
        objc_msgSend(v11, "setTargetPid:", 4294967293);
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)&v37;
        v39 = 0x2020000000;
        LOBYTE(v40) = 0;
        v46 = MEMORY[0x24BDAC760];
        v47 = 3221225472;
        v48 = sub_222B28708;
        v49 = &unk_24EB28670;
        v51 = &v37;
        v50 = v11;
        objc_msgSend(v19, "enumeratePIDsInFilter:", &v46);

        _Block_object_dispose(&v37, 8);
      }
      sub_222B281C8(v11, v19, v20);

      v29 = *(_QWORD *)(a1 + 80);
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  v5 = v4;
  if ((_DWORD)v4 == 2)
  {
    v21 = *(void **)(a1 + 32);
    v35 = 0;
    objc_msgSend(v21, "createTriggerPMI:", &v35);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v35;
    v9 = (DTTapStatusMemo *)v35;
    if (v7)
    {
      v22 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
      v34 = v9;
      v23 = v7;
      v24 = v3;
      v25 = v22;
      if (objc_msgSend(v24, "isAllProcesses"))
      {
        objc_msgSend(v23, "setTargetPid:", 4294967293);
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)&v37;
        v39 = 0x2020000000;
        LOBYTE(v40) = 0;
        v46 = MEMORY[0x24BDAC760];
        v47 = 3221225472;
        v48 = sub_222B286C0;
        v49 = &unk_24EB28670;
        v51 = &v37;
        v50 = v23;
        objc_msgSend(v24, "enumeratePIDsInFilter:", &v46);

        _Block_object_dispose(&v37, 8);
      }
      objc_msgSend(v24, "pmiEventMnemonic");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setPMIEventNamed:threshold:error:", v30, objc_msgSend(v24, "pmiEventThreshold"), &v34);

      sub_222B281C8(v23, v24, v25);
      v31 = v34;
      v32 = v34;

      if (!v32)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addObject:", v23);
        v9 = 0;
        goto LABEL_27;
      }
      objc_msgSend(*(id *)(a1 + 32), "clearTriggerPMI");
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v31);
      v9 = v32;
LABEL_28:

      goto LABEL_29;
    }
LABEL_15:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v8);
    goto LABEL_28;
  }
  if ((_DWORD)v4 == 1)
  {
    v6 = *(void **)(a1 + 32);
    v36 = 0;
    objc_msgSend(v6, "createTriggerTime:", &v36);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v36;
    v9 = (DTTapStatusMemo *)v36;
    if (v7)
    {
      v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
      v11 = v7;
      v12 = v3;
      v13 = v10;
      objc_msgSend(v11, "setSampleRate:", objc_msgSend(v12, "sampleInterval"));
      if (objc_msgSend(v12, "isAllProcesses"))
      {
        objc_msgSend(v11, "setTargetPid:", 4294967293);
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)&v37;
        v39 = 0x2020000000;
        LOBYTE(v40) = 0;
        v46 = MEMORY[0x24BDAC760];
        v47 = 3221225472;
        v48 = sub_222B28160;
        v49 = &unk_24EB28670;
        v51 = &v37;
        v50 = v11;
        objc_msgSend(v12, "enumeratePIDsInFilter:", &v46);

        _Block_object_dispose(&v37, 8);
      }
      if (objc_msgSend(v12, "hasThreadStateFilter"))
      {
        v42 = 0;
        v43 = &v42;
        v44 = 0x2020000000;
        v45 = 0;
        v37 = MEMORY[0x24BDAC760];
        v38 = 3221225472;
        v39 = (uint64_t)sub_222B281A8;
        v40 = &unk_24EB28600;
        v41 = &v42;
        objc_msgSend(v12, "enumerateThreadStatesToInclude:", &v37);
        objc_msgSend(v11, "setProfileEveryThread:", *((unsigned __int8 *)v43 + 24));
        _Block_object_dispose(&v42, 8);
      }
      sub_222B281C8(v11, v12, v13);

      v29 = *(_QWORD *)(a1 + 48);
LABEL_26:
      objc_msgSend(*(id *)(*(_QWORD *)(v29 + 8) + 40), "addObject:", v11);
LABEL_27:
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  v26 = [DTTapStatusMemo alloc];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown action in config: %d"), v5);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[DTTapStatusMemo initWithStatus:notice:](v26, "initWithStatus:notice:", 2281701376, v27);

  v28 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
  objc_msgSend(v28, "_handleStatusMemo:", v9);

LABEL_29:
}

void sub_222B27540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B2756C(uint64_t a1, int a2)
{
  id v2;
  id WeakRetained;

  if (a2 == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v2 = (id)objc_msgSend(WeakRetained, "fetchDataNow");

  }
}

uint64_t sub_222B275AC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "start");
}

void sub_222B275B4(_QWORD *a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "triggerID");
  v5 = a1[6];
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(v5 + 4 * v7) = v4;
  v8 = *(void **)(a1[4] + 40);
  v9 = (void *)MEMORY[0x24BDD16E0];
  v10 = objc_msgSend(v3, "actionID");

  objc_msgSend(v9, "numberWithUnsignedInt:", v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v11);

}

void sub_222B27648(_QWORD *a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "triggerID");
  v5 = a1[6];
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(v5 + 4 * v7) = v4;
  v8 = *(void **)(a1[4] + 40);
  v9 = (void *)MEMORY[0x24BDD16E0];
  v10 = objc_msgSend(v3, "actionID");

  objc_msgSend(v9, "numberWithUnsignedInt:", v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v11);

}

void sub_222B276DC(_QWORD *a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "triggerID");
  v5 = a1[6];
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(v5 + 4 * v7) = v4;
  v8 = *(void **)(a1[4] + 40);
  v9 = (void *)MEMORY[0x24BDD16E0];
  v10 = objc_msgSend(v3, "actionID");

  objc_msgSend(v9, "numberWithUnsignedInt:", v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v11);

}

uint64_t sub_222B27864(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "stop");
}

uint64_t sub_222B27964(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "pause");
}

uint64_t sub_222B27A64(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "unpause");
}

uint64_t sub_222B27CE4(uint64_t result, int a2)
{
  if (a2 == 65537)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_222B27D04(uint64_t a1, void *a2)
{
  unsigned int v3;

  v3 = objc_msgSend(a2, "unsignedIntValue");
  if (qword_25576FA08 != -1)
    dispatch_once(&qword_25576FA08, &unk_24EB28648);
  if (HIBYTE(v3) == 255)
    goto LABEL_8;
  if (BYTE2(v3) != 255)
  {
    if ((objc_msgSend((id)qword_25576FA00, "containsClass:subclassID:") & 1) != 0)
      return;
    goto LABEL_8;
  }
  if ((objc_msgSend((id)qword_25576FA00, "containsClass:") & 1) == 0)
LABEL_8:
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void sub_222B27D9C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FA00;
  qword_25576FA00 = v0;

  v15 = (void *)MEMORY[0x24BDBCF20];
  v16 = (void *)qword_25576FA00;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 17104896);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 17367040);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 17432576);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 17563648);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 19922944);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 20971520);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 67174400);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 67895296);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 117440512);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 554303488);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 19202048);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 101842944);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 771686400);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 101842944);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 830472192);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 833617920);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2231435264);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2231500800);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2231566336);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2233466880);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2234515456);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2239758336);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2240806912);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2240937984);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 2241003520);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setWithObjects:", v29, v26, v28, v25, v27, v14, v24, v23, v13, v22, v12, v21, v20, v19, v18, v17, v11,
    v2,
    v10,
    v3,
    v9,
    v4,
    v5,
    v6,
    v7,
    0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addCodes:", v8);

}

uint64_t sub_222B28160(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 32), "setTargetPid:", a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_222B281A8(uint64_t result, int a2)
{
  if (a2 == 65537)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_222B281C8(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_222B28288;
  v11[3] = &unk_24EB28698;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v8 = v7;
  v9 = v6;
  v10 = v5;
  objc_msgSend(v9, "enumerateActions:", v11);

}

void sub_222B28288(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, int a10, uint64_t a11)
{
  int v13;
  DTTapStatusMemo *v14;
  void *v15;
  id v16;
  DTKPKDebugCodeSet *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  int v28;
  id v29;
  void *v30;
  void *v32;
  id v33;
  id v34;
  id v35;
  DTKPKDebugCodeSet *v36;
  DTTapStatusMemo *v37;
  void *v38;
  DTTapStatusMemo *v39;
  DTKPKDebugCodeSet *v40;
  id v41;
  _QWORD v42[4];
  id v43;
  uint64_t v44;

  switch((int)a2)
  {
    case 0:
    case 2:
      return;
    case 1:
      v13 = a10;
      v42[0] = &a11;
      objc_msgSend(a1[4], "setCollectUserStacks:", (int)a9 > 0);
      objc_msgSend(a1[4], "setCollectKernelStacks:", v13 > 0);
      break;
    case 3:
      if (objc_msgSend(a1[4], "triggerKind") != 2)
        goto LABEL_15;
      v16 = a1[4];
      v17 = [DTKPKDebugCodeSet alloc];
      v18 = a1[5];
      v19 = kperf_kdebug_filter_create();
      DTFillDefaultKDebugBacktraceFilter();
      kperf_kdebug_filter_add_debugid();
      kperf_kdebug_filter_add_debugid();
      objc_msgSend(MEMORY[0x24BDBCEF0], "set");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "kdebugFilter");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v21, "kdebugCodes");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v42[0] = MEMORY[0x24BDAC760];
      v42[1] = 3221225472;
      v42[2] = sub_222B2866C;
      v42[3] = &unk_24EB286C0;
      v43 = v20;
      v44 = v19;
      v23 = v20;
      objc_msgSend(v22, "enumerateObjectsUsingBlock:", v42);

      v40 = -[DTKPKDebugCodeSet initWithLegacyCodes:](v17, "initWithLegacyCodes:", v23);
      sub_222B28624(v40);
      objc_msgSend(v16, "addCodeSet:", v40);
      objc_msgSend(a1[5], "kdebugFilter");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "convertLegacyCodes");

      objc_msgSend(a1[5], "kdebugFilter");
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      sub_222B28624(v25);
      break;
    case 4:
      v42[0] = &a10;
      v26 = a9;
      v27 = a1[4];
      v41 = 0;
      v28 = objc_msgSend(v27, "addPMCEventNamed:error:", v26, &v41);
      v29 = v41;
      v30 = v29;
      if (v28 != -802 && v28 != 0)
      {
        objc_msgSend(v29, "localizedDescription");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        NSLog(CFSTR("Error adding event %@ to trigger: %@."), v26, v32);

      }
      break;
    case 5:
      if (objc_msgSend(a1[4], "triggerKind") != 2)
      {
LABEL_15:
        v37 = [DTTapStatusMemo alloc];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Tried to add kdebug codes to an unsupported trigger kind: %s"), objc_msgSend(a1[4], "triggerKindRepr"));
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = -[DTTapStatusMemo initWithStatus:notice:](v37, "initWithStatus:notice:", 2281701376, v38);

        objc_msgSend(a1[6], "_handleStatusMemo:", v39);
        goto LABEL_17;
      }
      v33 = a1[4];
      v42[0] = &a10;
      v34 = a9;
      v35 = v33;
      v36 = -[DTKPKDebugCodeSet initWithCodes:]([DTKPKDebugCodeSet alloc], "initWithCodes:", v34);
      objc_msgSend(v35, "addCodeSet:", v36);

      break;
    default:
      v14 = [DTTapStatusMemo alloc];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown action in config: %d"), a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = -[DTTapStatusMemo initWithStatus:notice:](v14, "initWithStatus:notice:", 2281701376, v15);

      objc_msgSend(a1[6], "_handleStatusMemo:", v39);
LABEL_17:

      break;
  }
}

void sub_222B28624(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "addClass:subclassID:code:", 1, 64, 0);
  objc_msgSend(v1, "addClass:subclassID:code:", 1, 64, 2);

}

void sub_222B2866C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (DTKDebugFilterMatchesEvent(*(_QWORD *)(a1 + 40), objc_msgSend(v3, "unsignedIntValue")))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

uint64_t sub_222B286C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 32), "setTargetPid:", a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_222B28708(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 32), "setTargetPid:", a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_222B28C80(mach_port_name_t name)
{
  return mach_port_deallocate(*MEMORY[0x24BDAEC58], name);
}

uint64_t DVTSecureSocketProxy_Create(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  dispatch_queue_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  NSObject *v14;
  dispatch_source_t v15;
  void *v16;
  NSObject *v17;
  dispatch_source_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  dispatch_io_t v25;
  void *v26;
  DVTSecureSocketProxyBufferPool *v27;
  dispatch_group_t v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  NSObject *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  NSObject *v68;
  _QWORD handler[4];
  NSObject *v70;
  _QWORD cleanup_handler[4];
  id v72;
  int v73;
  int v74;
  uint8_t buf[4];
  int v76;
  __int16 v77;
  int v78;
  int v79[2];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (qword_25576FA10 != -1)
    dispatch_once(&qword_25576FA10, &unk_24EB276D0);
  v10 = (void *)objc_opt_new();
  objc_msgSend(v10, "setReceiveDataFromConnection:", v7);
  objc_msgSend(v10, "setSendDataToConnection:", v8);
  objc_msgSend(v10, "setCleanupConnection:", v9);
  v11 = dispatch_queue_create("DVTSecureSocketProxyIO", 0);
  objc_msgSend(v10, "setIoQueue:", v11);

  v12 = dispatch_queue_create("DVTSecureSocketProxyReceive", 0);
  objc_msgSend(v10, "setReceiveFromConnectionQueue:", v12);

  v13 = dispatch_queue_create("DVTSecureSocketProxySend", 0);
  objc_msgSend(v10, "setSendToConnectionQueue:", v13);

  if ((_DWORD)a1 == -1)
  {
    v38 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5ABC(v38, v39, v40, v41, v42, v43, v44, v45);
    goto LABEL_24;
  }
  objc_msgSend(v10, "receiveFromConnectionQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = dispatch_source_create(MEMORY[0x24BDACA00], (int)a1, 0, v14);
  objc_msgSend(v10, "setCanReceiveFromConnection:", v15);

  objc_msgSend(v10, "canReceiveFromConnection");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v16)
  {
    v46 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5AEC(a1, v46, v47, v48, v49, v50, v51, v52);
    goto LABEL_24;
  }
  objc_msgSend(v10, "sendToConnectionQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = dispatch_source_create(MEMORY[0x24BDACA30], (int)a1, 0, v17);
  objc_msgSend(v10, "setCanSendToConnection:", v18);

  objc_msgSend(v10, "sendToConnectionQueue");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v19)
  {
    v53 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5B50(a1, v53, v54, v55, v56, v57, v58, v59);
    goto LABEL_24;
  }
  if (socketpair(1, 1, 0, v79) == -1)
  {
    v61 = (void *)qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5BB4(v61);
LABEL_24:
    objc_msgSend(v10, "ioQueue");
    v62 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v62, v9);

LABEL_25:
    v20 = 0xFFFFFFFFLL;
    goto LABEL_26;
  }
  v21 = v79[0];
  v20 = v79[1];
  v74 = 1;
  if (setsockopt(v79[0], 0xFFFF, 4130, &v74, 4u) == -1 || setsockopt(v20, 0xFFFF, 4130, &v74, 4u) == -1)
  {
    v60 = (void *)qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5C38(v60);
    close(v21);
    close(v20);
    goto LABEL_25;
  }
  objc_msgSend(v10, "ioQueue");
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x24BDAC760];
  cleanup_handler[0] = MEMORY[0x24BDAC760];
  cleanup_handler[1] = 3221225472;
  cleanup_handler[2] = sub_222B29A74;
  cleanup_handler[3] = &unk_24EB286E8;
  v24 = v10;
  v72 = v24;
  v73 = v21;
  v25 = dispatch_io_create(0, v21, v22, cleanup_handler);
  objc_msgSend(v24, "setSocketIOChannel:", v25);

  objc_msgSend(v24, "socketIOChannel");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    v27 = -[DVTSecureSocketProxyBufferPool initWithCount:bufferSize:]([DVTSecureSocketProxyBufferPool alloc], "initWithCount:bufferSize:", 16, 0x20000);
    objc_msgSend(v24, "setReceiveFromConnectionBufferPool:", v27);

    v28 = dispatch_group_create();
    objc_msgSend(v24, "setSendToConnectionCompleted:", v28);

    objc_msgSend(v24, "socketIOChannel");
    v29 = objc_claimAutoreleasedReturnValue();
    dispatch_io_set_low_water(v29, 1uLL);

    objc_msgSend(v24, "canReceiveFromConnection");
    v30 = objc_claimAutoreleasedReturnValue();
    handler[0] = v23;
    handler[1] = 3221225472;
    handler[2] = sub_222B29B60;
    handler[3] = &unk_24EB27E30;
    v31 = v24;
    v70 = v31;
    dispatch_source_set_event_handler(v30, handler);

    -[NSObject canReceiveFromConnection](v31, "canReceiveFromConnection");
    v32 = objc_claimAutoreleasedReturnValue();
    dispatch_activate(v32);

    -[NSObject canSendToConnection](v31, "canSendToConnection");
    v33 = objc_claimAutoreleasedReturnValue();
    v64 = v23;
    v65 = 3221225472;
    v66 = sub_222B29B68;
    v67 = &unk_24EB27E30;
    v34 = v31;
    v68 = v34;
    dispatch_source_set_event_handler(v33, &v64);

    -[NSObject canSendToConnection](v34, "canSendToConnection", v64, v65, v66, v67);
    v35 = objc_claimAutoreleasedReturnValue();
    dispatch_activate(v35);

    v36 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      v76 = v20;
      v77 = 1024;
      v78 = a1;
      _os_log_impl(&dword_222B17000, v36, OS_LOG_TYPE_INFO, "Created proxy socket %d for underlying socket %d.", buf, 0xEu);
    }

    v37 = v70;
  }
  else
  {
    close(v20);
    objc_msgSend(v24, "ioQueue");
    v37 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v37, v9);
    v20 = 0xFFFFFFFFLL;
  }

LABEL_26:
  return v20;
}

void sub_222B29A44()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.utilities", "DVTSecureSocketProxy");
  v1 = (void *)qword_25576FA18;
  qword_25576FA18 = (uint64_t)v0;

}

uint64_t sub_222B29A74(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v3 = qword_25576FA18;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5CBC(v3, a2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_222B17000, v3, OS_LOG_TYPE_INFO, "Proxy channel cancel handler fired.", buf, 2u);
    }
    objc_msgSend(*(id *)(a1 + 32), "setSocketIOChannel:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_finishCleanup");
  }
  v5 = qword_25576FA18;
  if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_222B17000, v5, OS_LOG_TYPE_INFO, "Closing local proxy channel socket.", v7, 2u);
  }
  return close(*(_DWORD *)(a1 + 40));
}

uint64_t sub_222B29B60(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_receiveDataFromConnectionAndWriteToSocket);
}

uint64_t sub_222B29B68(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_readDataFromSocketAndSendToConnection);
}

void sub_222B29CC0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "receiveFromConnectionQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v2);

  objc_msgSend(*(id *)(a1 + 32), "ioQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B29D4C;
  block[3] = &unk_24EB27E30;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v3, block);

}

uint64_t sub_222B29D4C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setCanReceiveFromConnection:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_finishCleanup");
}

void sub_222B29D78(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "sendToConnectionQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v2);

  objc_msgSend(*(id *)(a1 + 32), "ioQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B29E04;
  block[3] = &unk_24EB27E30;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v3, block);

}

uint64_t sub_222B29E04(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setCanSendToConnection:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_finishCleanup");
}

void sub_222B2A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B2A034(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B2A044(uint64_t a1)
{

}

void sub_222B2A04C(uint64_t a1)
{
  NSObject *v2;
  uintptr_t data;
  uint64_t (**v4)(_QWORD, _QWORD, _QWORD);
  size_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  const void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD io_handler[5];
  _QWORD destructor[5];
  id v29;
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "cancelled") & 1) != 0)
    return;
  objc_msgSend(*(id *)(a1 + 32), "canReceiveFromConnection");
  v2 = objc_claimAutoreleasedReturnValue();
  data = dispatch_source_get_data(v2);

  if (!data)
  {
    v17 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_222B17000, v17, OS_LOG_TYPE_INFO, "No more data available from connection receive source, likely EOF.", buf, 2u);
    }
    goto LABEL_13;
  }
  objc_msgSend(*(id *)(a1 + 32), "receiveDataFromConnection");
  v4 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v5 = v4[2](v4, objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)), "mutableBytes"), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "length"));

  if ((v5 & 0x8000000000000000) != 0)
  {
    v18 = (void *)qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5D3C(v18);
    goto LABEL_13;
  }
  if (!v5)
  {
    v19 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5DC0(v19, v20, v21, v22, v23, v24, v25, v26);
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_cancelProxy");
    return;
  }
  if (v5 > objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "length"))
    sub_222BC5DF0();
  v6 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

  objc_msgSend(*(id *)(a1 + 32), "setPendingWrites:", objc_msgSend(*(id *)(a1 + 32), "pendingWrites") + 1);
  v9 = objc_retainAutorelease(v6);
  v10 = (const void *)objc_msgSend(v9, "bytes");
  objc_msgSend(*(id *)(a1 + 32), "ioQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x24BDAC760];
  destructor[0] = MEMORY[0x24BDAC760];
  destructor[1] = 3221225472;
  destructor[2] = sub_222B2A2F4;
  destructor[3] = &unk_24EB28350;
  destructor[4] = *(_QWORD *)(a1 + 32);
  v29 = v9;
  v13 = v9;
  v14 = dispatch_data_create(v10, v5, v11, destructor);

  objc_msgSend(*(id *)(a1 + 32), "socketIOChannel");
  v15 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "ioQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  io_handler[0] = v12;
  io_handler[1] = 3221225472;
  io_handler[2] = sub_222B2A3A8;
  io_handler[3] = &unk_24EB28710;
  io_handler[4] = *(_QWORD *)(a1 + 32);
  dispatch_io_write(v15, 0, v14, v16, io_handler);

}

void sub_222B2A2F4(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;

  objc_msgSend(*(id *)(a1 + 32), "receiveFromConnectionBufferPool");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "releaseBuffer:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "setPendingWrites:", objc_msgSend(*(id *)(a1 + 32), "pendingWrites") - 1);
  if (!objc_msgSend(*(id *)(a1 + 32), "pendingWrites") && objc_msgSend(*(id *)(a1 + 32), "cancelled"))
  {
    objc_msgSend(*(id *)(a1 + 32), "socketIOChannel");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 32), "socketIOChannel");
      v4 = objc_claimAutoreleasedReturnValue();
      dispatch_io_close(v4, 1uLL);

    }
  }
}

void sub_222B2A3A8(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  void *v7;

  v6 = a3;
  if (a4)
  {
    v7 = (void *)qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5E18(v7, a4);
    objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_cancelProxy");
  }

}

void sub_222B2A4B0(uint64_t a1)
{
  NSObject *v2;
  uintptr_t data;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  size_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[6];
  uint8_t buf[16];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uintptr_t v15;

  if ((objc_msgSend(*(id *)(a1 + 32), "cancelled") & 1) == 0)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    objc_msgSend(*(id *)(a1 + 32), "canSendToConnection");
    v2 = objc_claimAutoreleasedReturnValue();
    data = dispatch_source_get_data(v2);

    v15 = data;
    v4 = v13[3];
    if (v4)
    {
      if (v4 >= 0x800)
      {
        v13[3] = v4 - 1024;
        objc_msgSend(*(id *)(a1 + 32), "sendToConnectionCompleted");
        v5 = objc_claimAutoreleasedReturnValue();
        dispatch_group_enter(v5);

        objc_msgSend(*(id *)(a1 + 32), "socketIOChannel");
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = v13[3];
        objc_msgSend(*(id *)(a1 + 32), "ioQueue");
        v8 = objc_claimAutoreleasedReturnValue();
        v10[0] = MEMORY[0x24BDAC760];
        v10[1] = 3221225472;
        v10[2] = sub_222B2A644;
        v10[3] = &unk_24EB28760;
        v10[4] = *(_QWORD *)(a1 + 32);
        v10[5] = &v12;
        dispatch_io_read(v6, 0, v7, v8, v10);

      }
    }
    else
    {
      v9 = qword_25576FA18;
      if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_222B17000, v9, OS_LOG_TYPE_INFO, "No more data can be sent to connection send source, likely EOF.", buf, 2u);
      }
      objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_cancelProxy");
    }
    _Block_object_dispose(&v12, 8);
  }
}

void sub_222B2A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B2A644(uint64_t a1, int a2, void *a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  size_t size;
  size_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v14[16];

  v7 = a3;
  v8 = v7;
  if (v7)
  {
    size = dispatch_data_get_size(v7);
    if (size > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      sub_222BC5F18();
    v10 = size;
    objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_sendDataToConnection:", v8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) -= v10;
    if (a4)
      goto LABEL_4;
  }
  else
  {
    v10 = 0;
    if (a4)
    {
LABEL_4:
      v11 = (void *)qword_25576FA18;
      if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
        sub_222BC5E98(v11, a4);
LABEL_6:
      objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_cancelProxy");
      goto LABEL_7;
    }
  }
  if (!v10 && a2)
  {
    v13 = qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_222B17000, v13, OS_LOG_TYPE_INFO, "Socket read EOF, cancelling socket proxy.", v14, 2u);
    }
    goto LABEL_6;
  }
LABEL_7:
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "sendToConnectionCompleted");
    v12 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v12);

  }
}

uint64_t sub_222B2A808(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v8;
  uint64_t (**v9)(_QWORD, _QWORD, _QWORD);
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;

  v8 = a2;
  if (a5)
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "sendDataToConnection");
      v9 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v10 = v9[2](v9, a4, a5);

      if ((v10 & 0x8000000000000000) != 0)
        break;
      v11 = a5 >= v10;
      a5 -= v10;
      if (!v11)
        sub_222BC5F40();
      a4 += v10;
      if (!a5)
        goto LABEL_6;
    }
    v13 = (void *)qword_25576FA18;
    if (os_log_type_enabled((os_log_t)qword_25576FA18, OS_LOG_TYPE_ERROR))
      sub_222BC5F68(v13);
    objc_msgSend(*(id *)(a1 + 32), "_onIOQueue_cancelProxy");
    v12 = 0;
  }
  else
  {
LABEL_6:
    v12 = 1;
  }

  return v12;
}

void sub_222B2ABF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_222B2AC88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_222B2AD00(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

id sub_222B2AD1C(id a1)
{
  return a1;
}

char *sub_222B2AD24()
{
  int v0;

  return strerror(v0);
}

int *sub_222B2AD30()
{
  return __error();
}

char *sub_222B2AD40(int *a1)
{
  return strerror(*a1);
}

int *sub_222B2AD48()
{
  return __error();
}

void sub_222B2AD50(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_222B2AD60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_222B2B354(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", 0, a2);
}

uint64_t sub_222B2B364(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)(a1 + 32);
  if (a2)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v3, "invokeCompletionWithReturnValue:error:", v4, a2);
}

void sub_222B2B5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B2B5C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  NSLog(CFSTR("XPC connection to ondemandd invalidated."));
  objc_msgSend(WeakRetained, "setOndemandConnection:", 0);

}

uint64_t sub_222B2B740(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", 0, a2);
}

uint64_t sub_222B2B750(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", 0, a2);
}

_xpc_connection_s *xpc_message_has_privileges(_xpc_connection_s *result)
{
  if (result)
    return (_xpc_connection_s *)(xpc_connection_get_euid(result) == 0);
  return result;
}

uint64_t authorization_create_from_xpc_message()
{
  return 0;
}

uint64_t with_authorized_xpc_message(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  id v5;
  void (**v6)(_QWORD, _QWORD);
  xpc_object_t v7;
  void *v8;

  v5 = a4;
  if (!v5)
    sub_222BC5FEC();
  v6 = (void (**)(_QWORD, _QWORD))v5;
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  if (a2)
    xpc_dictionary_set_string(v7, "Message", a2);
  ((void (**)(_QWORD, void *))v6)[2](v6, v8);

  return 1;
}

void oneshot_xpc_sync(const char *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_222B2BB54;
  v9[3] = &unk_24EB28808;
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  sub_222B2BAB8(a1, v9);

}

void sub_222B2BAB8(const char *a1, void *a2)
{
  void (**v3)(id, _xpc_connection_s *);
  _xpc_connection_s *v4;
  _QWORD handler[5];

  v3 = a2;
  v4 = xpc_connection_create(a1, 0);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 3221225472;
  handler[2] = sub_222B2C078;
  handler[3] = &unk_24EB28878;
  handler[4] = a1;
  xpc_connection_set_event_handler(v4, handler);
  xpc_connection_resume(v4);
  v3[2](v3, v4);

}

void sub_222B2BB54(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD block[4];
  id v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_222B2BC78;
  v15 = sub_222B2BC88;
  v16 = 0;
  dispatch_get_global_queue(2, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B2BC90;
  block[3] = &unk_24EB287E0;
  v10 = &v11;
  v5 = v3;
  v8 = v5;
  v9 = *(id *)(a1 + 32);
  dispatch_sync(v4, block);

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v12[5]);

  _Block_object_dispose(&v11, 8);
}

void sub_222B2BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B2BC78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B2BC88(uint64_t a1)
{

}

void sub_222B2BC90(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  void *v4;

  v2 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), *(xpc_object_t *)(a1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void oneshot_xpc_async(const char *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_222B2BD6C;
  v9[3] = &unk_24EB28858;
  v10 = v5;
  v11 = v6;
  v7 = v5;
  v8 = v6;
  sub_222B2BAB8(a1, v9);

}

void sub_222B2BD6C(uint64_t a1, xpc_connection_t connection)
{
  void *v3;
  void *v4;
  NSObject *v5;
  _QWORD handler[4];
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    dispatch_get_global_queue(0, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 3221225472;
    handler[2] = sub_222B2BE24;
    handler[3] = &unk_24EB28830;
    v7 = v4;
    xpc_connection_send_message_with_reply(connection, v3, v5, handler);

  }
  else
  {
    xpc_connection_send_message(connection, v3);
  }
}

uint64_t sub_222B2BE24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

int64_t xpc_message_get_status(void *a1)
{
  if (a1 == (void *)MEMORY[0x24BDACF38] || a1 == (void *)MEMORY[0x24BDACF30])
    return 5;
  else
    return xpc_dictionary_get_int64(a1, "status");
}

int64_t xpc_message_get_errno_status(void *a1)
{
  if (a1 == (void *)MEMORY[0x24BDACF38] || a1 == (void *)MEMORY[0x24BDACF30])
    return 61;
  else
    return xpc_dictionary_get_int64(a1, "errno_status");
}

void xpc_dictionary_set_archived_object(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  xpc_object_t v6;
  xpc_object_t xdict;

  xdict = a1;
  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", a3, 1, 0);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = xpc_data_create((const void *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"));
  if (xdict && a2 && v6)
    xpc_dictionary_set_value(xdict, a2, v6);

}

id xpc_dictionary_get_archived_object(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  const void *bytes_ptr;
  void *v10;
  void *v11;

  v5 = a1;
  if (MEMORY[0x22767A790]() == MEMORY[0x24BDACFA0])
  {
    xpc_dictionary_get_value(v5, a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x24BDBCE50];
    bytes_ptr = xpc_data_get_bytes_ptr(v7);
    objc_msgSend(v8, "dataWithBytesNoCopy:length:freeWhenDone:", bytes_ptr, xpc_data_get_length(v7), 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", a3, objc_opt_class(), 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClasses:fromData:error:", v11, v10, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t sub_222B2C078(uint64_t result, uint64_t a2)
{
  if (a2 == MEMORY[0x24BDACF38])
    return fprintf((FILE *)*MEMORY[0x24BDAC8D8], "xpc connection invalid: %s\n", *(const char **)(result + 32));
  return result;
}

void sub_222B2C108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B2C1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B2C330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_222B2C358(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_retainAutorelease(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v6 + 16))(v6, objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), 2, a2, 0);

}

void sub_222B2C3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B2C3E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;

  v7 = a4;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = objc_retainAutorelease(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v8, objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), 3, a3, a2);

}

void sub_222B2C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B2C4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B2C6CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B2C800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B2CFE4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x222B2CE18);
  }
  _Unwind_Resume(exc_buf);
}

void sub_222B2D0F0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B2D110(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x222B2D0B8);
}

void sub_222B2D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B2D5A0(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 16), "enumerateRecordsFromSample:block:", a2, a1[5]);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_222B2DBF4(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  if (qword_25576FA48 != -1)
    dispatch_once(&qword_25576FA48, &unk_24EB28AE0);
  v2 = qword_25576FA38;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B2F29C;
  block[3] = &unk_24EB28B08;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

void sub_222B2DC9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  __int128 v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_222B2DD20;
  v6[3] = &unk_24EB289D0;
  v7 = v3;
  v8 = *(_OWORD *)(a1 + 40);
  v5 = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_222B2DD20(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v6 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v6 != v7)
    {
      NSLog(CFSTR("%@ is trying to register capability %@, but it was already registered by %@. Ignoring this new delegate."), v7, v8, v6);
      *a4 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
  }

}

void sub_222B2DD9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6[2];
  _QWORD v7[4];
  id v8;
  __int128 v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_222B2DE4C;
  v7[3] = &unk_24EB28A20;
  v8 = v3;
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 40);
  v5 = v6[0];
  v9 = *(_OWORD *)v6;
  v10 = *(_QWORD *)(a1 + 56);
  v6[0] = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_222B2DE4C(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v5 = a1[6];
  v6 = (void *)a1[4];
  v7 = a3;
  v10 = a2;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v10);
  v8 = (void *)a1[5];
  v9 = objc_msgSend(v7, "intValue");

  objc_msgSend(v8, "publishCapability:withVersion:forClass:", v10, v9, a1[7]);
}

void sub_222B2E174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B2E19C(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_222B2E290(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id buf;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Setting the config.", (uint8_t *)&buf, 8u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "createConfigWithPlist:", *(_QWORD *)(a1 + 40));
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = v4;

  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v6)
  {
    objc_msgSend(v6, "setBulkDataReceiver:");
    objc_initWeak(&buf, *(id *)(a1 + 32));
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = sub_222B2E440;
    v8[3] = &unk_24EB28A98;
    objc_copyWeak(&v9, &buf);
    objc_msgSend(v7, "setStatusHandler:", v8);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&buf);
  }
  else
  {
    NSLog(CFSTR("(%d) Unable to create configuration from remote connection."), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  }
}

void sub_222B2E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B2E440(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  _QWORD *WeakRetained;
  DTTapStatusMessage *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a4;
  v9 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = -[DTTapStatusMessage initWithStatus:timestamp:notice:info:]([DTTapStatusMessage alloc], "initWithStatus:timestamp:notice:info:", a2, a3, v14, v9);
    v12 = (void *)WeakRetained[7];
    objc_msgSend(MEMORY[0x24BE2A960], "messageWithObject:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sendMessage:", v13);

  }
}

void sub_222B2E5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B2E5D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B2E5E8(uint64_t a1)
{

}

void sub_222B2E5F0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _DWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
    v16[0] = 67109120;
    v16[1] = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Starting the tap.", (uint8_t *)v16, 8u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "willStartWithConfig:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    +[DTTapFactory defaultFactory](DTTapFactory, "defaultFactory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "createNewTapWithConfig:connection:options:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0, 0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v6;

    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    objc_msgSend(MEMORY[0x24BE2A960], "messageWithObject:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sendMessage:", v10);

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "start");
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = 0;

}

void sub_222B2EA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_222B2EA38(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1[4] + 40))
  {
    sDTTapLogClient();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_DWORD *)(a1[4] + 44);
      v12[0] = 67109120;
      v12[1] = v3;
      _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Stopping the tap.", (uint8_t *)v12, 8u);
    }

    *(_BYTE *)(a1[4] + 40) = 0;
    objc_msgSend(*(id *)(a1[4] + 32), "stop");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1[5] + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    objc_msgSend(*(id *)(a1[4] + 32), "fetchDataNow");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1[6] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v10 = a1[4];
    v11 = *(void **)(v10 + 32);
    *(_QWORD *)(v10 + 32) = 0;

  }
}

void sub_222B2EC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B2EC3C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Pausing the tap.", (uint8_t *)v7, 8u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "pause");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_222B2EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B2EDE8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Unpausing the tap.", (uint8_t *)v7, 8u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "unpause");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_222B2EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B2EF94(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTapService: (%d) Fetching data from the tap.", (uint8_t *)v7, 8u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "fetchDataNow");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_222B2F254()
{
  dispatch_queue_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = dispatch_queue_create("DTTapService delegate registry queue", 0);
  v1 = (void *)qword_25576FA38;
  qword_25576FA38 = (uint64_t)v0;

  v2 = objc_opt_new();
  v3 = (void *)qword_25576FA40;
  qword_25576FA40 = v2;

}

uint64_t sub_222B2F29C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_222B2F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_222B2FC44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B2FFCC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 112), 8);

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_222B30028(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B30038(uint64_t a1)
{

}

void *sub_222B30040(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_222B30068(uint64_t a1)
{

}

uint64_t sub_222B30070(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), sel_makeObjectsPerformSelector_withObject_);
}

void sub_222B3008C(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  id obj;

  v6 = a2;
  v7 = *(_QWORD *)(a1[4] + 8);
  obj = *(id *)(v7 + 40);
  objc_msgSend(v6, "start:", &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addObject:", v6);
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) + 16))();
    *a4 = 1;
  }

}

void sub_222B3012C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B302A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  std::mutex *v22;

  _Block_object_dispose(&a17, 8);

  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

void sub_222B302D0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id obj;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v2 + 40);
  objc_msgSend(a2, "stop:", &obj);
  objc_storeStrong((id *)(v2 + 40), obj);
}

void sub_222B303D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B304B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B30520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_222B305D8(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0FC8];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("DTKPKperfConfiguration"), a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_222B306A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B307A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B3085C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B308E4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B309C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B30A18(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B30AF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B30B44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B30BA0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B30D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::mutex *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  std::mutex::unlock(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B30DAC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "profileEveryThread");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_222B30DEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v6 = v3;
    v5 = objc_msgSend(v3, "pmcEventCount");
    v4 = v6;
    if (v5)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend(v6, "_recordConfigWordsIntoBuffer:", *(_QWORD *)(a1 + 40)+ 8* *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 24)+ 32);
      v4 = v6;
    }
  }

}

void sub_222B30E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B30F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B3109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v7 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_222B310E0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(v10, "profileEveryThread"))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_BYTE *)(v6 + 24))
    {
      sub_222B305D8(CFSTR("Multiple PET triggers is not supported in DTKPKperfConfiguration."), -508);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      *a4 = 1;
    }
    else
    {
      *(_BYTE *)(v6 + 24) = 1;
    }
  }

}

void sub_222B31168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B3117C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(v10, "requestsPMCSampling"))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_BYTE *)(v6 + 24))
    {
      sub_222B305D8(CFSTR("Multiple PMC triggers is not supported in DTKPKperfConfiguration."), -509);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      *a4 = 1;
    }
    else
    {
      *(_BYTE *)(v6 + 24) = 1;
    }
  }

}

void sub_222B31204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B31464(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x227678FE4](v2, 0x10F0C409877F7D9);

  _Unwind_Resume(a1);
}

void sub_222B314EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B31558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B31B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_222B31BBC(uint64_t *a1)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t *v24;
  char v25;
  uint64_t v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v2 = a1[9];
  v4 = *(_DWORD *)(v2 + 80);
  v3 = (_DWORD *)(v2 + 80);
  if (v4 != 1)
    goto LABEL_17;
  v5 = *(unsigned __int16 *)(a1[9] + 88);
  v6 = *(_WORD *)(a1[9] + 88);
  if (v6 == 2)
  {
    v8 = a1[3];
    if (a1[4] - v8 > v5 >> 8)
    {
      v9 = *(unsigned __int8 *)(v8 + (v5 >> 8));
      if (!*(_BYTE *)(v8 + (v5 >> 8)))
      {
LABEL_16:
        *((_BYTE *)a1 + 48) = 0;
        goto LABEL_17;
      }
      while (sub_222B33CE4(a1[9] + 24))
      {
        if (!--v9)
          goto LABEL_16;
      }
      v3 = (_DWORD *)(a1[9] + 80);
    }
    *v3 = 6;
    goto LABEL_16;
  }
  if (v6 == 1)
  {
    v7 = 4;
    while (sub_222B33CE4(a1[9] + 24))
    {
      if (!--v7)
        goto LABEL_17;
    }
    *(_DWORD *)(a1[9] + 80) = 6;
  }
LABEL_17:
  sub_222B3392C(a1[9]);
  v10 = a1[9];
  if (*(_DWORD *)(v10 + 80) == 1)
  {
    v11 = *(unsigned __int16 *)(v10 + 88);
    switch(*(_WORD *)(v10 + 88))
    {
      case 1u:
        v12 = *(_QWORD *)(v10 + 48);
        if (v12 <= 0)
        {
          v13 = *(unsigned int **)(v10 + 72);
        }
        else
        {
          v13 = (unsigned int *)(*(_QWORD *)(v10 + 40) - 12 * v12);
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(v10 + 24) + *v13;
          *(_QWORD *)(v10 + 72) = v13;
        }
        if (*((_BYTE *)v13 + 8) != 19)
          goto LABEL_49;
        v29 = v11 >> 8;
        v30 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + v13[1] - 4);
        v31 = a1[3];
        v32 = a1[4] - v31;
        if (v32 <= v29)
        {
          LOBYTE(v39) = 0;
          sub_222B347BC(a1 + 3, (v29 + 1) - v32, &v39);
          v31 = a1[3];
          v32 = a1[4] - v31;
        }
        if (v32 <= v29)
          __break(1u);
        else
          *(_BYTE *)(v31 + v29) = v30;
        return;
      case 2u:
        v14 = a1[3];
        if (a1[4] - v14 <= v11 >> 8)
          goto LABEL_49;
        v15 = *(_QWORD *)(v10 + 48);
        if (v15 < 1 || (v16 = *(unsigned __int8 *)(v14 + (v11 >> 8)), v17 = v16 >= v15, v18 = v16 - v15, v17))
        {
          *((_BYTE *)a1 + 48) = 0;
        }
        else
        {
          v19 = (unsigned int *)(*(_QWORD *)(v10 + 40) + 12 * v18);
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(v10 + 24) + *v19;
          *(_QWORD *)(v10 + 72) = v19;
          *((_BYTE *)a1 + 48) = 1;
          *(_OWORD *)(a1 + 7) = *(_OWORD *)(v10 + 64);
        }
        return;
      case 3u:
        v20 = sub_222B33F5C(v10 + 24, 1);
        v10 = a1[9];
        if ((v20 & 1) == 0)
          goto LABEL_49;
        v21 = v10 + 24;
        v22 = *(_QWORD *)(v10 + 48);
        if (v22 <= 0)
        {
          v24 = *(unint64_t **)(v10 + 64);
        }
        else
        {
          v23 = (unsigned int *)(*(_QWORD *)(v10 + 40) - 12 * v22);
          v24 = (unint64_t *)(*(_QWORD *)(v10 + 24) + *v23);
          *(_QWORD *)(v10 + 64) = v24;
          *(_QWORD *)(v10 + 72) = v23;
        }
        v33 = *v24;
        v34 = *a1;
        goto LABEL_42;
      case 5u:
        v25 = sub_222B33F5C(v10 + 24, 1);
        v10 = a1[9];
        if ((v25 & 1) == 0)
          goto LABEL_49;
        v21 = v10 + 24;
        v26 = *(_QWORD *)(v10 + 48);
        if (v26 <= 0)
        {
          v28 = *(unint64_t **)(v10 + 64);
        }
        else
        {
          v27 = (unsigned int *)(*(_QWORD *)(v10 + 40) - 12 * v26);
          v28 = (unint64_t *)(*(_QWORD *)(v10 + 24) + *v27);
          *(_QWORD *)(v10 + 64) = v28;
          *(_QWORD *)(v10 + 72) = v27;
        }
        v33 = *v28;
        v34 = a1[1];
LABEL_42:
        v17 = v33 >= v34;
        v35 = v33 - v34;
        if (v17)
          v36 = v35;
        else
          v36 = 0;
        v37 = *((unsigned int *)a1 + 5);
        v38 = v36 * *((unsigned int *)a1 + 4);
        v39 = v38;
        if (v37 >= 2)
          v39 = v38 / v37;
        sub_222B33CE4(v21);
        if (!sub_222B34108(a1[9] + 24, &v39, 8uLL, 1, 0, 0))
        {
          v10 = a1[9];
LABEL_49:
          *(_DWORD *)(v10 + 80) = 6;
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_222B31ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v8;
  uint64_t v9;
  char __dst[255];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(v2 + 80) != 1 || *(_BYTE *)(v2 + 88) != 1)
    return 0;
  v4 = *(_QWORD *)(v2 + 48);
  if (v4 >= 2)
  {
    v5 = *(_QWORD *)(v2 + 40) - 12 * v4;
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(v2 + 24) + *(unsigned int *)(v5 + 12);
    *(_QWORD *)(v2 + 72) = v5 + 12;
  }
  v6 = (char *)sub_222B3495C((const char **)(v2 + 64), __dst, 0xFFuLL);
  sub_222B349DC(&v8, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return 1;
}

BOOL sub_222B31FB8(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_222B34B00();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_222B32048(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  v2 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(v2 + 80) != 1 || *(_BYTE *)(v2 + 88) != 1)
    return 0;
  v3 = *(_QWORD *)(v2 + 48);
  if (v3 <= 0)
  {
    v4 = *(unsigned int **)(v2 + 72);
  }
  else
  {
    v4 = (unsigned int *)(*(_QWORD *)(v2 + 40) - 12 * v3);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(v2 + 24) + *v4;
    *(_QWORD *)(v2 + 72) = v4;
  }
  if (*((_BYTE *)v4 + 8) != 19)
    return 0;
  *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + v4[1] - 4);
  return 1;
}

uint64_t sub_222B320C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  char *v12;
  __int128 v14;
  uint64_t v15;
  char __dst[255];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(v3 + 80) != 1 || *(_BYTE *)(v3 + 88) != 1)
    return 0;
  v5 = *(_QWORD *)(v3 + 48);
  if (v5 <= 0)
  {
    v6 = *(unsigned int **)(v3 + 72);
  }
  else
  {
    v6 = (unsigned int *)(*(_QWORD *)(v3 + 40) - 12 * v5);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 24) + *v6;
    *(_QWORD *)(v3 + 72) = v6;
  }
  if (*((_BYTE *)v6 + 8) != 19)
    return 0;
  v7 = *(_QWORD *)(v3 + 64) + v6[1];
  v10 = *(_DWORD *)(v7 - 4);
  v8 = v7 - 4;
  v9 = v10;
  if (v10 <= a2)
    return 0;
  v11 = (unsigned int *)(v8 + 12 * (a2 - v9));
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 24) + *v11;
  *(_QWORD *)(v3 + 72) = v11;
  v12 = (char *)sub_222B3495C((const char **)(v3 + 64), __dst, 0xFFuLL);
  sub_222B349DC(&v14, v12);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return 1;
}

uint64_t sub_222B32200(void *a1, __int16 a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = a1;
  if (sub_222B323DC((_QWORD *)v3[4], a2))
  {
    v4 = v3[5];
    v6 = *(uint64_t **)(v4 + 64);
    v5 = *(_QWORD *)(v4 + 72);
    v7 = *(unsigned int *)(v5 + 4);
    v8 = *v6;
    v10 = *v6;
    if (v7 <= 7)
    {
      memset((char *)&v10 + v7, *(unsigned __int8 *)(v5 + 9), 8 - v7);
      v8 = v10;
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_222B3228C(void *a1, __int16 a2)
{
  id v3;
  const char *v4;
  void *v5;

  v3 = a1;
  if (sub_222B323DC(*((_QWORD **)v3 + 4), a2)
    && (v4 = sub_222B3495C((const char **)(*((_QWORD *)v3 + 5) + 64), (char *)v3 + 72, 0x400uLL)) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_222B32300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B32370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B323DC(_QWORD *a1, __int16 a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned int *v9;

  v2 = a1[9];
  if (*(_DWORD *)(v2 + 80) != 1)
    return 0;
  v3 = *(unsigned __int16 *)(v2 + 88);
  if (*(_WORD *)(v2 + 88) != 2)
    return 0;
  v4 = a1[3];
  if (a1[4] - v4 <= v3 >> 8)
    return 0;
  v5 = *(_QWORD *)(v2 + 48);
  if (v5 < 1)
    return 0;
  v6 = (unsigned __int16)(*(unsigned __int8 *)(v4 + (v3 >> 8)) + ~a2);
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
    return 0;
  v9 = (unsigned int *)(*(_QWORD *)(v2 + 40) + 12 * v8);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v2 + 24) + *v9;
  *(_QWORD *)(v2 + 72) = v9;
  return 1;
}

id sub_222B32460(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a1[1];
  if (*(_BYTE *)(v6 + 8) != 19)
    goto LABEL_12;
  v7 = *a1 + *(unsigned int *)(v6 + 4);
  if (*(_DWORD *)(v7 - 4) != 2)
    goto LABEL_12;
  v8 = (int *)(*(_QWORD *)(a2 + 24) + *(unsigned int *)(v7 - 28));
  *(_QWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 72) = v7 - 28;
  v9 = *(unsigned int *)(v7 - 24);
  v10 = *v8;
  v29 = *v8;
  if (v9 <= 3)
  {
    memset((char *)&v29 + v9, *(unsigned __int8 *)(v7 - 19), 4 - v9);
    v10 = v29;
  }
  v11 = v10;
  objc_msgSend(*((id *)v5 + 7), "objectAtIndexedSubscript:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v14 = a1[1];
    if (*(_BYTE *)(v14 + 8) == 19)
    {
      v15 = *a1 + *(unsigned int *)(v14 + 4);
      v18 = *(_DWORD *)(v15 - 4);
      v16 = v15 - 4;
      v17 = v18;
      if (v18 >= 2)
      {
        v19 = v16 - 12 * v17;
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 24) + *(unsigned int *)(v19 + 12);
        *(_QWORD *)(a2 + 72) = v19 + 12;
        v20 = sub_222B3495C((const char **)(a2 + 64), (char *)v5 + 72, 0x400uLL);
        if (v20)
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = (void *)MEMORY[0x24BE2A9A0];
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v11);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "engineeringValueWithTypeID:value:", 22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BE2A9A0], "engineeringValueWithTypeID:value:", 21, v21);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v30[0] = v24;
          v30[1] = v25;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v30, 2);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BE2A9A0], "engineeringValueWithTypeID:value:", 23, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*((id *)v5 + 7), "setObject:atIndexedSubscript:", v27, v11);
          v13 = v27;

          goto LABEL_7;
        }
      }
    }
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  v13 = v12;
LABEL_7:

LABEL_13:
  return v13;
}

void sub_222B326A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B32900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B329C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_222B32A34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if (*(_BYTE *)(v2 + 8) != 19)
    return 0;
  v4 = *a1 + *(unsigned int *)(v2 + 4);
  if (*(_DWORD *)(v4 - 4) != 2)
    return 0;
  v6 = a2[3];
  v7 = (uint64_t *)(v6 + *(unsigned int *)(v4 - 28));
  a2[8] = v7;
  a2[9] = v4 - 28;
  v8 = *(unsigned int *)(v4 - 24);
  v28 = *v7;
  if (v8 <= 7)
    memset((char *)&v29[-1] + v8, *(unsigned __int8 *)(v4 - 19), 8 - v8);
  v9 = a1[1];
  if (*(_BYTE *)(v9 + 8) != 19)
    return 0;
  v10 = *a1 + *(unsigned int *)(v9 + 4);
  v13 = *(_DWORD *)(v10 - 4);
  v11 = v10 - 4;
  v12 = v13;
  if (v13 < 2)
    return 0;
  v14 = 1 - v12;
  v15 = (unsigned int *)(v11 + 12 * v14);
  v16 = (uint64_t *)(v6 + *v15);
  a2[8] = v16;
  a2[9] = v15;
  v17 = v15[1];
  v27 = *v16;
  if (v17 <= 7)
    memset((char *)&v27 + v17, *(unsigned __int8 *)(v11 + 12 * v14 + 9), 8 - v17);
  v18 = (void *)MEMORY[0x24BE2A9A0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v28);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "engineeringValueWithTypeID:value:", 134, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v20;
  v21 = (void *)MEMORY[0x24BE2A9A0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v27);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "engineeringValueWithTypeID:value:", 134, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v29[1] = v23;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v29, 2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "engineeringValueWithTypeID:value:", 135, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  return v25;
}

void sub_222B32C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B32CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_222B32DD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  __int128 v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if (*(_BYTE *)(v2 + 8) != 19)
    return 0;
  v5 = *(unsigned int *)(*a1 + *(unsigned int *)(v2 + 4) - 4);
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_DWORD)v5)
  {
    v7 = 0;
    while (1)
    {
      v8 = a1[1];
      if (*(_BYTE *)(v8 + 8) != 19)
        goto LABEL_24;
      v9 = *a1 + *(unsigned int *)(v8 + 4);
      v12 = *(_DWORD *)(v9 - 4);
      v11 = v9 - 4;
      v10 = v12;
      if (v12 <= (unsigned __int16)v7)
        goto LABEL_24;
      v13 = (unsigned __int16)v7 - v10;
      v14 = (unsigned int *)(v11 + 12 * v13);
      v15 = a2[3];
      v16 = v15 + *v14;
      a2[8] = v16;
      a2[9] = v14;
      v18 = *((unsigned __int8 *)v14 + 8);
      v17 = v14 + 2;
      if (v18 == 19)
        break;
      v28 = 0;
      v27 = 0;
LABEL_23:

LABEL_24:
      if ((_DWORD)v5 == ++v7)
        goto LABEL_25;
    }
    v19 = v11 + 12 * v13;
    v21 = *(_DWORD *)(v19 + 4);
    v20 = (unsigned int *)(v19 + 4);
    v22 = v16 + v21;
    v25 = *(_DWORD *)(v22 - 4);
    v23 = v22 - 4;
    v24 = v25;
    if (v25 && (v26 = (unsigned int *)(v23 - 12 * v24), a2[8] = v15 + *v26, a2[9] = v26, *((_BYTE *)v26 + 8) == 19))
    {
      v46 = *((_OWORD *)a2 + 4);
      sub_222B32A34(&v46, a2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (*v17 != 19)
      {
LABEL_22:
        v28 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v27 = 0;
    }
    v29 = v16 + *v20;
    v32 = *(_DWORD *)(v29 - 4);
    v30 = v29 - 4;
    v31 = v32;
    if (v32 >= 2)
    {
      v33 = 1 - v31;
      v34 = (unsigned int *)(v30 + 12 * v33);
      v35 = (_DWORD *)(a2[3] + *v34);
      a2[8] = v35;
      a2[9] = v34;
      v36 = v34[1];
      v37 = *v35;
      LODWORD(v46) = *v35;
      if (v36 <= 3)
      {
        memset((char *)&v47[-1] + v36, *(unsigned __int8 *)(v30 + 12 * v33 + 9), 4 - v36);
        v37 = v46;
      }
      v38 = (void *)MEMORY[0x24BE2A9A0];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v37);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "engineeringValueWithTypeID:value:", 160, v39);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27 && v28)
      {
        v40 = (void *)MEMORY[0x24BE2A9A0];
        v47[0] = v27;
        v47[1] = v28;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v47, 2);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7)
          v42 = 162;
        else
          v42 = 161;
        objc_msgSend(v40, "engineeringValueWithTypeID:value:", v42, v41);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v43);

      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_25:
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(MEMORY[0x24BE2A9A0], "engineeringValueWithTypeID:value:", 163, v6);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v44 = 0;
  }

  return v44;
}

void sub_222B330B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B337C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_222B3392C(uint64_t result)
{
  uint64_t v1;
  __int16 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  _WORD *v27;
  uint64_t v28;
  unsigned int *v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v1 = result;
  v2 = *(__int16 **)(result + 8);
  if (v2 == *(__int16 **)(result + 16))
  {
    v7 = 4;
    goto LABEL_12;
  }
  v3 = *(_DWORD *)(result + 80);
  if (v3 == 4)
  {
    v3 = *(_DWORD *)(result + 84);
    *(_DWORD *)(result + 80) = v3;
  }
  v4 = *v2;
  if (v3 <= 6 && ((1 << v3) & 0x61) != 0)
  {
    if ((v4 & 0x80000000) != 0)
      goto LABEL_63;
    v6 = bswap32(v4);
    *(_WORD *)(result + 88) = HIWORD(v6);
    if (BYTE2(v6) != 100)
      goto LABEL_63;
LABEL_10:
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)(result + 100) = 0;
    *(_DWORD *)(result + 108) = 0;
    *(_DWORD *)(result + 84) = 0;
    goto LABEL_62;
  }
  if ((v4 & 0x80000000) == 0)
  {
    v8 = bswap32(v4);
    v9 = HIWORD(v8);
    *(_WORD *)(result + 88) = HIWORD(v8);
    v10 = BYTE2(v8) - 100;
    if (BYTE2(v8) < 0x64u)
    {
LABEL_62:
      v3 = 1;
      *(_DWORD *)(v1 + 80) = 1;
      goto LABEL_63;
    }
    v11 = HIBYTE(v8);
    switch(v10)
    {
      case 0:
        goto LABEL_10;
      case 1:
        if (v9 >> 8 == 255)
        {
          LOWORD(v33) = 0;
          v25 = *(_QWORD *)(result + 48);
          if (v25 <= 0)
          {
            v27 = *(_WORD **)(result + 64);
            v26 = *(unsigned int **)(result + 72);
          }
          else
          {
            v26 = (unsigned int *)(*(_QWORD *)(result + 40) - 12 * v25);
            v27 = (_WORD *)(*(_QWORD *)(result + 24) + *v26);
            *(_QWORD *)(result + 64) = v27;
            *(_QWORD *)(result + 72) = v26;
          }
          v31 = v26[1];
          HIWORD(v33) = *v27;
          if (v31 <= 1)
            memset((char *)&v33 + v31 + 2, *((unsigned __int8 *)v26 + 9), 2 - v31);
          result = sub_222B33CE4(v1 + 24);
          if (!(_DWORD)result)
            goto LABEL_65;
          v13 = v1 + 24;
        }
        else
        {
          LOWORD(v33) = 0;
          v12 = *(_QWORD *)(result + 48);
          if (v12 < v11)
            goto LABEL_65;
          v13 = result + 24;
          HIWORD(v33) = v12 - v11;
        }
        result = sub_222B33EE8(v13, (uint64_t)&v33);
        if ((result & 1) != 0)
          goto LABEL_62;
        goto LABEL_65;
      case 2:
        *(_BYTE *)(result + 96) = BYTE1(v9);
        goto LABEL_62;
      case 3:
        v14 = v9 >> 8;
        if (v9 >> 8 > 0x1F || v14 == 5)
          goto LABEL_62;
        result = sub_222B33F5C(result + 24, v14);
        if ((result & 1) != 0)
          goto LABEL_62;
        goto LABEL_65;
      case 4:
        result = sub_222B34108(result + 24, 0, 0, 0, 0, 0);
        if ((result & 1) != 0)
          goto LABEL_62;
        goto LABEL_65;
      case 5:
        if (v9 >> 8 == 255)
        {
          LOWORD(v33) = 0;
          v28 = *(_QWORD *)(result + 48);
          if (v28 <= 0)
          {
            v30 = *(_WORD **)(result + 64);
            v29 = *(unsigned int **)(result + 72);
          }
          else
          {
            v29 = (unsigned int *)(*(_QWORD *)(result + 40) - 12 * v28);
            v30 = (_WORD *)(*(_QWORD *)(result + 24) + *v29);
            *(_QWORD *)(result + 64) = v30;
            *(_QWORD *)(result + 72) = v29;
          }
          v32 = v29[1];
          HIWORD(v33) = *v30;
          if (v32 <= 1)
            memset((char *)&v33 + v32 + 2, *((unsigned __int8 *)v29 + 9), 2 - v32);
          result = sub_222B33CE4(v1 + 24);
          if (!(_DWORD)result)
            goto LABEL_65;
          v17 = v1 + 24;
        }
        else
        {
          LOWORD(v33) = 0;
          v16 = *(_QWORD *)(result + 48);
          if (v16 < v11)
            goto LABEL_65;
          v17 = result + 24;
          HIWORD(v33) = v16 - v11;
        }
        result = sub_222B3422C(v17, (uint64_t)&v33);
        if ((result & 1) != 0)
          goto LABEL_62;
LABEL_65:
        v7 = 5;
        goto LABEL_12;
      case 6:
        if (!(v9 >> 8))
          goto LABEL_62;
        v18 = 0;
        break;
      case 7:
        v19 = *(_QWORD *)(result + 48);
        if (v19 < 0 || !v19)
          goto LABEL_44;
        v20 = *(_QWORD *)(result + 40);
        v21 = (unsigned int *)(v20 - 12 * v19);
        v23 = *v21;
        v22 = v21[1];
        v33 = *(_DWORD *)(*(_QWORD *)(result + 24) + v23);
        if (v22 <= 3)
          memset((char *)&v33 + v22, *(unsigned __int8 *)(v20 - 12 * v19 + 9), 4 - v22);
        result = sub_222B33CE4(v1 + 24);
        if (!(_DWORD)result)
        {
LABEL_44:
          *(_DWORD *)(v1 + 80) = 6;
          *(_DWORD *)(v1 + 92) = 0;
          return result;
        }
        v24 = (unsigned __int16)v19 - 1;
        if (v33 == v24)
        {
          *(_DWORD *)(v1 + 92) = 0;
          goto LABEL_62;
        }
        *(_DWORD *)(v1 + 92) = v33 - v24;
        goto LABEL_67;
      default:
        goto LABEL_67;
    }
    while (1)
    {
      result = sub_222B33CE4(v1 + 24);
      if ((result & 1) == 0)
        break;
      if (++v18 >= *(unsigned __int8 *)(v1 + 89))
        goto LABEL_62;
    }
LABEL_67:
    v7 = 6;
LABEL_12:
    *(_DWORD *)(v1 + 80) = v7;
    return result;
  }
  result = sub_222B33D48(result, v4);
  v3 = *(_DWORD *)(v1 + 80);
LABEL_63:
  *(_QWORD *)(v1 + 8) += 2;
  *(_DWORD *)(v1 + 84) = v3;
  return result;
}

BOOL sub_222B33CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v2 - 12 * v1 + 10))
      v3 = 0;
    else
      v3 = *(_DWORD *)(v2 - 12 * v1 + 4) + *(unsigned __int8 *)(v2 - 12 * v1 + 11) + 8;
    *(_DWORD *)(a1 + 32) -= v3;
    *(_QWORD *)(a1 + 24) = v1 - 1;
  }
  return v1 > 0;
}

uint64_t sub_222B33D48(uint64_t result, __int16 a2)
{
  int v2;
  uint64_t v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int v13;
  char v14;
  unsigned int v15;
  __int16 v16;

  v2 = *(_DWORD *)(result + 80);
  if ((v2 - 4) >= 3)
  {
    v4 = result;
    if ((v2 - 1) >= 2)
    {
      if (v2 == 3)
        ++*(_DWORD *)(result + 108);
    }
    else
    {
      *(_BYTE *)(result + 100) = 0;
      v5 = *(unsigned __int8 *)(result + 96);
      *(_WORD *)(result + 102) = v5 | (v5 << 8);
      *(_WORD *)(result + 104) = 16;
      *(_DWORD *)(result + 108) = 1;
      result = sub_222B34108(result + 24, 0, 0, 16, v5, 0);
      if ((result & 1) == 0)
      {
        v6 = 5;
LABEL_17:
        *(_DWORD *)(v4 + 80) = v6;
        return result;
      }
    }
    v7 = a2 & 0x3FFF;
    v8 = *(char *)(v4 + 104);
    if (v8 > 13)
    {
      v12 = v8 - 14;
      *(_BYTE *)(v4 + 104) = v8 - 14;
      v11 = *(unsigned __int16 *)(v4 + 102) | (v7 << (v8 - 14));
      *(_WORD *)(v4 + 102) = v11;
      if ((a2 & 0x4000) == 0 && v12)
      {
LABEL_14:
        if ((a2 & 0x4000) != 0)
          v6 = 2;
        else
          v6 = 3;
        goto LABEL_17;
      }
    }
    else
    {
      v9 = 14 - v8;
      v10 = v7 >> v9;
      *(_BYTE *)(v4 + 105) = v9;
      *(_BYTE *)(v4 + 104) = 0;
      v11 = *(unsigned __int16 *)(v4 + 102) | (v7 >> v9);
      *(_WORD *)(v4 + 102) |= v10;
    }
    v16 = bswap32(v11) >> 16;
    result = sub_222B343E8(v4 + 24, &v16, 2uLL, 1);
    *(_BYTE *)(v4 + 100) += 2;
    v13 = *(unsigned __int8 *)(v4 + 96) | (*(unsigned __int8 *)(v4 + 96) << 8);
    *(_WORD *)(v4 + 102) = *(unsigned __int8 *)(v4 + 96) | (*(unsigned __int8 *)(v4 + 96) << 8);
    *(_BYTE *)(v4 + 104) = 16;
    v14 = *(_BYTE *)(v4 + 105);
    if (v14)
    {
      v15 = (v7 << (16 - v14)) | v13;
      *(_WORD *)(v4 + 102) = v15;
      *(_WORD *)(v4 + 104) = (16 - v14);
      if ((a2 & 0x4000) != 0)
      {
        v16 = bswap32(v15) >> 16;
        result = sub_222B343E8(v4 + 24, &v16, 2uLL, 1);
        *(_BYTE *)(v4 + 100) += 2;
      }
    }
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_222B33EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)*(unsigned int *)(a1 + 32) + 8 > *(_QWORD *)(a1 + 8) - 12 * (v2 + 1))
    return 0;
  v3 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2))
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  if (v4 != v5)
    return 0;
  *(_QWORD *)(a1 + 24) = v2 + 1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 + 12 * ~v2;
  v8 = (uint64_t *)(v6 + 12 * -(int)v3);
  v9 = *v8;
  *(_DWORD *)(v7 + 8) = *((_DWORD *)v8 + 2);
  *(_QWORD *)v7 = v9;
  result = 1;
  *(_BYTE *)(v7 + 10) = 1;
  return result;
}

uint64_t sub_222B33F5C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  _BYTE *v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = (unsigned int *)(v2 - 12 * v3);
  v6 = v4 + 2;
  v5 = *((unsigned __int8 *)v4 + 8);
  if (v5 == 16)
  {
    v8 = -v3;
    switch(a2)
    {
      case 0:
        sub_222B34564(a1, 0, 0);
        return 0;
      case 1:
      case 6:
      case 17:
        v9 = 8;
        goto LABEL_20;
      case 2:
        LOBYTE(a2) = 2;
        v9 = 4;
        goto LABEL_20;
      case 3:
        v12 = *(_QWORD *)a1 + *v4;
        v13 = *(unsigned int *)(v2 - 12 * v3 + 4);
        if (!*(_BYTE *)(v12 + v13))
        {
          *v6 = 3;
          return 1;
        }
        if ((unint64_t)*(unsigned int *)(a1 + 32) + 16 > *(_QWORD *)(a1 + 8) - 12 * v3)
          return 0;
        *(_BYTE *)(v2 - 12 * v3 + 9) = 0;
        v9 = v13 + 1;
        LOBYTE(a2) = 3;
LABEL_20:
        result = sub_222B34564(a1, a2, v9);
        break;
      case 4:
      case 18:
        if (v3 < 1)
          return 0;
        v11 = *(unsigned int *)(v2 - 12 * v3 + 4);
        v14 = *(_DWORD *)(*(_QWORD *)a1 + *v4);
        if (v11 <= 3)
          memset((char *)&v14 + v11, *(unsigned __int8 *)(v2 + 12 * v8 + 9), 4 - v11);
        if (!sub_222B33CE4(a1))
          return 0;
        if ((sub_222B34564(a1, 4, v14) & 1) != 0)
          return 1;
        sub_222B34108(a1, 0, 0, 0, 0, 0);
        return 0;
      default:
        return 0;
    }
  }
  else
  {
    return v5 == a2;
  }
  return result;
}

BOOL sub_222B34108(uint64_t a1, const void *a2, size_t a3, char a4, char a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  int v18;

  if ((a3 & 7) != 0)
    v6 = 8 - (a3 & 7);
  else
    v6 = 0;
  v7 = *(unsigned int *)(a1 + 32);
  v8 = a3 + v6 + v7 + 8;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 8) - 12 * (v9 + 1);
  if (v8 <= v10)
  {
    *(_QWORD *)(a1 + 24) = v9 + 1;
    v15 = *(_QWORD *)(a1 + 16) + 12 * ~v9;
    v16 = (_QWORD *)(*(_QWORD *)a1 + v7);
    *v16 = -1;
    *(_DWORD *)(v15 + 4) = a3;
    *(_DWORD *)v15 = v7 + 8;
    *(_BYTE *)(v15 + 9) = a5;
    *(_BYTE *)(v15 + 8) = a4;
    *(_WORD *)(v15 + 10) = 0;
    sub_222B34500((_DWORD *)a1);
    v17 = v16 + 1;
    if (a6)
      memmove(v17, a2, a3);
    else
      memcpy(v17, a2, a3);
    if (*(_BYTE *)(v15 + 10))
      v18 = 0;
    else
      v18 = *(_DWORD *)(v15 + 4) + *(unsigned __int8 *)(v15 + 11) + 8;
    *(_DWORD *)(a1 + 32) += v18;
  }
  return v8 <= v10;
}

uint64_t sub_222B3422C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v2 = *(unsigned __int16 *)(a2 + 2);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = v3 - v2;
  if (v3 < v2)
    return 0;
  v19 = v3 - v2;
  if (((8 - (~(12 * v4) & 4)) & ((uint64_t)((unint64_t)~(12 * v4) << 61) >> 63))
     + 12 * v4
     + (unint64_t)*(unsigned int *)(a1 + 32)
     + 12 > *(_QWORD *)(a1 + 8) - 12 * v3 - 12)
    return 0;
  sub_222B34108(a1, 0, 0, 19, 0, 0);
  if (v4)
  {
    v8 = 0;
    while ((sub_222B343E8(a1, (const void *)(*(_QWORD *)(a1 + 16) - 12 * (++v8 + *(unsigned __int16 *)(a2 + 2))), 0xCuLL, 0) & 1) != 0)
    {
      if (v4 == v8)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  result = sub_222B343E8(a1, &v19, 4uLL, 1);
  if ((_DWORD)result)
  {
    v9 = v19;
    if (v19)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(unsigned __int16 *)(a2 + 2) + 1;
      do
      {
        if (!*(_BYTE *)(v11 - 12 * v12 + 10))
          v10 += *(_DWORD *)(v11 - 12 * v12 + 4) + *(unsigned __int8 *)(v11 - 12 * v12 + 11) + 8;
        ++v12;
        --v9;
      }
      while (v9);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = (_DWORD *)(v11 - 12 * v13);
      v15 = v14[1];
      *v14 -= v10;
      v14[1] = v15 + v10;
      v16 = v13 - v19;
      *(_QWORD *)(a1 + 24) = v16;
      v17 = v11 - 12 * v16;
      v18 = *(_QWORD *)v14;
      *(_DWORD *)(v17 + 8) = v14[2];
      *(_QWORD *)v17 = v18;
    }
    return 1;
  }
  return result;
}

uint64_t sub_222B343E8(uint64_t a1, const void *a2, size_t __n, int a4)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int *v16;

  v5 = __n;
  v7 = *(_QWORD *)(a1 + 24);
  if (v7
    && (v8 = *(_QWORD *)(a1 + 16),
        v9 = v8 - 12 * v7,
        v11 = *(unsigned __int8 *)(v9 + 11),
        v10 = (_BYTE *)(v9 + 11),
        v11 >= __n))
  {
    v16 = (unsigned int *)(v8 - 12 * v7);
    memcpy((void *)(*v16 + *(_QWORD *)a1 + v16[1]), a2, __n);
    v16[1] += v5;
    *v10 -= v5;
  }
  else
  {
    if ((__n & 7) != 0)
      v12 = 8 - (__n & 7);
    else
      v12 = 0;
    v13 = *(unsigned int *)(a1 + 32);
    if (__n + v12 + v13 + 8 > *(_QWORD *)(a1 + 8) - 12 * v7)
      return 0;
    memcpy((void *)(*(_QWORD *)a1 + v13), a2, __n);
    *(_DWORD *)(a1 + 32) += v5;
    v15 = *(_QWORD *)(a1 + 16) - 12 * *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v15 + 4) += v5;
    if (a4)
      sub_222B34500((_DWORD *)a1);
  }
  return 1;
}

_DWORD *sub_222B34500(_DWORD *result)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t v4;

  v1 = result[8];
  v2 = result[8] & 7;
  if ((v1 & 7) != 0)
  {
    v3 = result;
    v4 = *((_QWORD *)result + 2) - 12 * *((_QWORD *)result + 3);
    *(_BYTE *)(v4 + 11) = 8 - v2;
    result = memset((void *)(*(_QWORD *)result + v1), *(unsigned __int8 *)(v4 + 9), (8 - v2));
    v3[8] += *(unsigned __int8 *)(v4 + 11);
  }
  return result;
}

uint64_t sub_222B34564(uint64_t a1, char a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned __int8 *v28;
  int v29;

  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = (unsigned int *)(v7 - 12 * v6);
  v10 = v8 + 1;
  v9 = v8[1];
  v11 = -v6;
  v14 = *((unsigned __int8 *)v8 + 11);
  v12 = (char *)v8 + 11;
  v13 = *((unsigned __int8 *)v8 + 11);
  v15 = v9 + v14 - a3;
  if ((int)v9 + v14 >= a3)
  {
    *(_BYTE *)(v7 + 12 * v11 + 8) = a2;
    if (v15 >= 0x100)
      sub_222BC603C();
    if ((_DWORD)v13)
    {
      v28 = (unsigned __int8 *)(*(_QWORD *)a1 + *v8 + v9);
      do
      {
        v29 = *v28++;
        if (v29 != *(unsigned __int8 *)(v7 + 12 * v11 + 9))
          sub_222BC6064();
        --v13;
      }
      while (v13);
    }
    *v12 = v15;
    *v10 = a3;
    return 1;
  }
  v16 = *(_QWORD *)a1;
  v17 = *v8;
  if ((a3 & 7) != 0)
    v18 = 8 - (a3 & 7);
  else
    v18 = 0;
  sub_222B33CE4(a1);
  if (v18 + a3 + (unint64_t)*(unsigned int *)(a1 + 32) + 8 <= *(_QWORD *)(a1 + 8)
                                                                    - 12 * *(_QWORD *)(a1 + 24)
                                                                    - 12
    && sub_222B34108(a1, (const void *)(v16 + v17), *v10, a2, *(_BYTE *)(v7 + 12 * v11 + 9), 1))
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = v20 - 12 * v19;
    v23 = *(_DWORD *)(v21 + 4);
    v22 = v21 + 4;
    v24 = a3 - v23 + *(unsigned __int8 *)(v22 + 7);
    if ((v24 & 7) != 0)
      v25 = 8 - (v24 & 7);
    else
      v25 = 0;
    v26 = *(unsigned int *)(a1 + 32);
    if (v26 + v24 + v25 + 8 > *(_QWORD *)(a1 + 8) - 12 * v19)
    {
      result = 0;
      *(_BYTE *)(v20 - 12 * v19 + 8) = 16;
      return result;
    }
    memset((void *)(*(_QWORD *)a1 + v26), *(unsigned __int8 *)(v20 - 12 * v19 + 9), v24);
    *(_DWORD *)(a1 + 32) += v24;
    *(_DWORD *)v22 += v24;
    sub_222B34500((_DWORD *)a1);
    return 1;
  }
  sub_222B34774(a1);
  return 0;
}

uint64_t sub_222B34774(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = v2 + 1;
  v3 = ~v2;
  if (!*(_BYTE *)(v1 + 12 * v3 + 10))
    *(_DWORD *)(result + 32) += *(_DWORD *)(v1 + 12 * v3 + 4) + *(unsigned __int8 *)(v1 + 12 * v3 + 11);
  return result;
}

void sub_222B347BC(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      sub_222B348D4();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_222B348D4()
{
  sub_222B348E8("vector");
}

void sub_222B348E8(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_222B34938(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EB253F0, MEMORY[0x24BEDAAF0]);
}

void sub_222B34924(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_222B34938(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

const char *sub_222B3495C(const char **a1, char *__dst, size_t a3)
{
  const char *v3;
  int v4;
  const char *v6;
  size_t v7;
  size_t v8;

  v3 = a1[1];
  v4 = *((_DWORD *)v3 + 1);
  if (!v4)
    return "";
  v6 = *a1;
  if (!(*a1)[v4 - 1 + *((unsigned __int8 *)v3 + 11)] || !v6[v4 - 1])
    return *a1;
  v7 = (v4 + 1);
  if (v7 >= a3)
    v8 = a3;
  else
    v8 = v7;
  strncpy(__dst, v6, v8);
  __dst[v8 - 1] = 0;
  return __dst;
}

_QWORD *sub_222B349DC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_222B34A8C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_222B34A8C()
{
  sub_222B348E8("basic_string");
}

void sub_222B34AA0()
{
  void *v0;

  v0 = (void *)qword_25576FA58;
  qword_25576FA58 = (uint64_t)&unk_24EB4EE80;

}

void sub_222B34AB8(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 24);
    if (v2)
    {
      *(_QWORD *)(a2 + 32) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x227678FE4);
  }
}

void sub_222B34B00()
{
  sub_222B34B14("basic_string");
}

void sub_222B34B14(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_222B34B64(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EB253F8, MEMORY[0x24BEDAB00]);
}

void sub_222B34B50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_222B34B64(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_222B34D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B34D7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B34D8C(uint64_t a1)
{

}

void sub_222B34D94(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

uint64_t sub_222B351A8(uint64_t a1, uint64_t a2)
{
  if (a2)
    return MEMORY[0x24BEDD108](a2, sel_startServingAssetsForAppWithPath_withCompletion_);
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_222B35388(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 3221225472;
    v4[2] = sub_222B35450;
    v4[3] = &unk_24EB28C48;
    v7 = *(id *)(a1 + 40);
    v5 = v3;
    v6 = *(id *)(a1 + 32);
    objc_msgSend(v5, "startServerOnDeviceWithCompletion:", v4);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_222B35450(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void (*v6)(void);
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v5;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error starting server on device: %@", (uint8_t *)&v7, 0xCu);
    }
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "registerManifestForApplicationAtPath:onPort:", *(_QWORD *)(a1 + 40), a3);
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  v6();

}

void sub_222B357A8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(a2, "error");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_222B35890(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectWithAllowedClasses:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "assetPath");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  if (objc_msgSend(v5, "length"))
  {
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v5, &v17) & 1) != 0)
    {
      v8 = *(void **)(a1 + 40);
      objc_msgSend(v8, "workingDirectory");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v8) = objc_msgSend(v8, "_requestedPath:belongsToWorkingDirectory:", v5, v9);

      if ((v8 & 1) != 0)
      {
        v10 = *(void **)(a1 + 40);
        if (v17)
          objc_msgSend(v10, "serveDataFromZippedDirectory:forRequestIdentifier:", v5, v6);
        else
          objc_msgSend(v10, "serveDataFromFile:forRequestIdentifier:", v5, v6);
        goto LABEL_10;
      }
    }
    else
    {

    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v21 = v5;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODR: Could not find path at %@", buf, 0xCu);
  }
  v11 = (void *)MEMORY[0x24BDD1540];
  v18[0] = *MEMORY[0x24BDD0FC8];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("File does not exist at path %@"), v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = CFSTR("RequestIdentifier");
  v19[0] = v12;
  v19[1] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("com.apple.DTAssetProviderService"), 404, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BE2A960], "messageWithError:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "sendMessage:replyHandler:", v15, 0);

LABEL_10:
}

uint64_t sub_222B36104(uint64_t a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v4 = 138412290;
    v5 = v2;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "ODR: Closing channel for request %@", (uint8_t *)&v4, 0xCu);
  }
  return objc_msgSend(*(id *)(a1 + 40), "cancel");
}

void sub_222B3638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B363B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B363C4(uint64_t a1)
{

}

void sub_222B363CC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_222B365C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error starting server on device: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "registerManifestForApplicationAtPath:onPort:", *(_QWORD *)(a1 + 40), a3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_222B3675C(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    v7 = v3;
    v4 = objc_msgSend(v3, "errorStatus");
    v5 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v7, "error");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v5 + 16))(v5, v6, 0);
    }
    else
    {
      objc_msgSend(v7, "object");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v5, 0, objc_msgSend(v6, "unsignedIntegerValue"));
    }

    v3 = v7;
  }

}

void sub_222B36A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B36A74(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  objc_msgSend(v7, "objectAtIndexedSubscript:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v7) = objc_msgSend(v8, "isEqualToString:", v9);

  if ((v7 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

uint64_t sub_222B36DAC(uint64_t a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v4 = 138412290;
    v5 = v2;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "ODR: Closing channel for request %@", (uint8_t *)&v4, 0xCu);
  }
  return objc_msgSend(*(id *)(a1 + 40), "cancel");
}

uint64_t authorized_task_for_pid(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 8;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_222B3724C;
  v5[3] = &unk_24EB28D78;
  v6 = a2;
  v5[4] = &v7;
  v5[5] = a3;
  with_authorized_xpc_message(a1, "task_for_pid", 0, v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_222B37234(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_222B3724C(uint64_t a1, void *a2)
{
  int64_t v3;
  id v4;
  _QWORD v5[4];
  __int128 v6;

  v3 = *(int *)(a1 + 48);
  v4 = a2;
  xpc_dictionary_set_int64(v4, "pid", v3);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_222B372E0;
  v5[3] = &unk_24EB28D50;
  v6 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", v4, v5);

}

void sub_222B372E0(uint64_t a1, void *a2)
{
  int status;
  uint64_t v4;
  id v5;

  v5 = a2;
  status = xpc_message_get_status(v5);
  v4 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = status;
  if (v4 && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    **(_DWORD **)(a1 + 40) = xpc_dictionary_copy_mach_send();

}

uint64_t authorized_stackshot_collect(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 8;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_222B3746C;
  v11 = sub_222B3747C;
  v12 = 0;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_222B37484;
  v6[3] = &unk_24EB28DA0;
  v6[4] = &v13;
  v6[5] = &v7;
  with_authorized_xpc_message(a1, "stackshot", 1, v6);
  v3 = v14;
  if (a2 && !*((_DWORD *)v14 + 6))
  {
    *a2 = objc_retainAutorelease((id)v8[5]);
    v3 = v14;
  }
  v4 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

void sub_222B37448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B3746C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B3747C(uint64_t a1)
{

}

void sub_222B37484(uint64_t a1, void *a2)
{
  _QWORD v2[4];
  __int128 v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = sub_222B374E0;
  v2[3] = &unk_24EB28DA0;
  v3 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", a2, v2);
}

void sub_222B374E0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  xpc_object_t xdict;

  xdict = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_message_get_status(xdict);
  v3 = xdict;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    xpc_dictionary_get_value(xdict, "stackshot");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (MEMORY[0x22767A790]() == MEMORY[0x24BDACF90])
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;

    v3 = xdict;
  }

}

uint64_t authorized_vfs_lookup_dump(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 5;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37638;
  v4[3] = &unk_24EB28D50;
  v4[4] = &v5;
  v4[5] = a2;
  with_authorized_xpc_message(a1, "vfs_trace_paths", 1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_222B37620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B37638(uint64_t a1, void *a2)
{
  _QWORD v2[4];
  __int128 v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = sub_222B37694;
  v2[3] = &unk_24EB28D50;
  v3 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", a2, v2);
}

void sub_222B37694(uint64_t a1, void *a2)
{
  int status;
  uint64_t v4;
  id v5;

  v5 = a2;
  status = xpc_message_get_status(v5);
  v4 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = status;
  if (v4)
    **(_DWORD **)(a1 + 40) = xpc_message_get_errno_status(v5);

}

uint64_t authorized_ktrace_bless_client(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 5;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37798;
  v4[3] = &unk_24EB28D50;
  v4[4] = &v5;
  v4[5] = a2;
  with_authorized_xpc_message(a1, "ktrace_bless", 1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_222B37780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B37798(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  __int128 v5;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
  v3 = a2;
  xpc_dictionary_set_BOOL(v3, "bless", 1);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37830;
  v4[3] = &unk_24EB28D50;
  v5 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", v3, v4);

}

void sub_222B37830(uint64_t a1, void *a2)
{
  int status;
  uint64_t v4;
  id v5;

  v5 = a2;
  status = xpc_message_get_status(v5);
  v4 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = status;
  if (v4)
    **(_DWORD **)(a1 + 40) = xpc_message_get_errno_status(v5);

}

uint64_t authorized_ktrace_unbless_client(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 4;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37934;
  v4[3] = &unk_24EB28D50;
  v4[4] = &v5;
  v4[5] = a2;
  with_authorized_xpc_message(a1, "ktrace_bless", 1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_222B3791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B37934(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  __int128 v5;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
  v3 = a2;
  xpc_dictionary_set_BOOL(v3, "bless", 0);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B379CC;
  v4[3] = &unk_24EB28D50;
  v5 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", v3, v4);

}

void sub_222B379CC(uint64_t a1, void *a2)
{
  int status;
  uint64_t v4;
  id v5;

  v5 = a2;
  status = xpc_message_get_status(v5);
  v4 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = status;
  if (v4)
    **(_DWORD **)(a1 + 40) = xpc_message_get_errno_status(v5);

}

uint64_t authorized_ktrace_machine_cpu_topologies(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 4;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37AD0;
  v4[3] = &unk_24EB28D50;
  v4[4] = &v5;
  v4[5] = a2;
  with_authorized_xpc_message(a1, "ktrace_machine_core_info", 1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_222B37AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B37AD0(uint64_t a1, void *a2)
{
  _QWORD v2[4];
  __int128 v3;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = sub_222B37B3C;
  v2[3] = &unk_24EB28D50;
  v3 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", a2, v2);
}

void sub_222B37B3C(uint64_t a1, void *a2)
{
  id v3;
  const void *data;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  size_t length;

  v3 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_message_get_status(v3);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && *(_QWORD *)(a1 + 40))
  {
    length = 0;
    data = xpc_dictionary_get_data(v3, "ktrace_machine_cores_data", &length);
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", data, length, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDD1620];
    v7 = (void *)MEMORY[0x24BDBCF20];
    v8 = objc_opt_class();
    v9 = objc_opt_class();
    objc_msgSend(v7, "setWithObjects:", v8, v9, objc_opt_class(), 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v10, v5, 0);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(void ***)(a1 + 40);
    v13 = *v12;
    *v12 = (void *)v11;

  }
}

uint64_t authorized_ktrace_file(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  if (!a2)
    sub_222BC608C();
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 4;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B37D24;
  v4[3] = &unk_24EB28D50;
  v4[4] = &v5;
  v4[5] = a2;
  with_authorized_xpc_message(a1, "ktrace_file_message", 1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_222B37D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B37D24(uint64_t a1, void *a2)
{
  _QWORD v2[4];
  __int128 v3;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = sub_222B37D90;
  v2[3] = &unk_24EB28D50;
  v3 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", a2, v2);
}

void sub_222B37D90(uint64_t a1, void *a2)
{
  id v3;
  const void *data;
  void *v5;
  id *v6;
  size_t length;

  v3 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_message_get_status(v3);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    length = 0;
    data = xpc_dictionary_get_data(v3, "ktrace_config_data", &length);
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", data, length);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(id **)(a1 + 40);
    if (v6)
      objc_storeStrong(v6, v5);

  }
}

uint64_t authorized_ktrace_start_fd(uint64_t a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v5 = a2;
  if (a3 <= 0)
    sub_222BC60B4();
  if (!v5)
    sub_222BC60B4();
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 4;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_222B37F20;
  v9[3] = &unk_24EB28DF0;
  v11 = &v13;
  v12 = a3;
  v6 = v5;
  v10 = v6;
  with_authorized_xpc_message(a1, "ktrace_start_file", 1, v9);
  v7 = *((unsigned int *)v14 + 6);

  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_222B37F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_222B37F20(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  BOOL v8;
  id v9;
  void *v10;
  _QWORD v11[5];
  id v12;

  v3 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 5;
  xpc_dictionary_set_fd(v3, "ktrace_file_fd", *(_DWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 32);
  v12 = 0;
  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v4, 1, &v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v12;
  v7 = v6;
  if (v5)
    v8 = 1;
  else
    v8 = v6 == 0;
  if (v8)
  {
    if (v5)
    {
      v9 = objc_retainAutorelease(v5);
      xpc_dictionary_set_data(v3, "ktrace_session_config", (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
    }
  }
  else
  {
    if (qword_25576FA60 != -1)
      dispatch_once(&qword_25576FA60, &unk_24EB28EF8);
    v10 = (void *)qword_25576FA68;
    if (os_log_type_enabled((os_log_t)qword_25576FA68, OS_LOG_TYPE_ERROR))
      sub_222BC60CC(v10, v7);
  }
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_222B38098;
  v11[3] = &unk_24EB28DC8;
  v11[4] = *(_QWORD *)(a1 + 40);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", v3, v11);

}

int64_t sub_222B38098(uint64_t a1, void *a2)
{
  int64_t result;

  result = xpc_message_get_status(a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t authorized_ktrace_stop(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 4;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_222B3746C;
  v10 = sub_222B3747C;
  v11 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_222B381DC;
  v5[3] = &unk_24EB28DA0;
  v5[4] = &v12;
  v5[5] = &v6;
  with_authorized_xpc_message(a1, "ktrace_stop_file", 1, v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v7[5]);
  v3 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_222B381B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_222B381DC(uint64_t a1, void *a2)
{
  _QWORD v2[4];
  __int128 v3;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = sub_222B38248;
  v2[3] = &unk_24EB28DA0;
  v3 = *(_OWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", a2, v2);
}

void sub_222B38248(uint64_t a1, void *a2)
{
  id v3;
  const void *data;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  size_t length;

  v3 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_message_get_status(v3);
  length = 0;
  data = xpc_dictionary_get_data(v3, "ns_error", &length);

  if (data)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", data, length);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDD1620];
    v7 = (void *)MEMORY[0x24BDBCF20];
    v8 = objc_opt_class();
    v9 = objc_opt_class();
    v10 = objc_opt_class();
    objc_msgSend(v7, "setWithObjects:", v8, v9, v10, objc_opt_class(), 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0;
    objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v11, v5, &v17);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = v17;

    if (!v12 && v13)
    {
      if (qword_25576FA60 != -1)
        dispatch_once(&qword_25576FA60, &unk_24EB28EF8);
      v14 = (void *)qword_25576FA68;
      if (os_log_type_enabled((os_log_t)qword_25576FA68, OS_LOG_TYPE_ERROR))
        sub_222BC6158(v14, v13);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v12;

  }
}

uint64_t authorized_coreprofile_core_control(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 5;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_222B3849C;
  v5[3] = &unk_24EB28D78;
  v6 = a3;
  v5[4] = &v7;
  v5[5] = a2;
  with_authorized_xpc_message(a1, "coreprofile_core_control", 2, v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_222B38484(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_222B3849C(uint64_t a1, void *a2)
{
  int64_t v3;
  id v4;
  _QWORD v5[5];

  v3 = *(unsigned int *)(a1 + 48);
  v4 = a2;
  xpc_dictionary_set_int64(v4, "coreCount", v3);
  xpc_dictionary_set_data(v4, "coreEnableArray", *(const void **)(a1 + 40), *(unsigned int *)(a1 + 48));
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_222B38548;
  v5[3] = &unk_24EB28DC8;
  v5[4] = *(_QWORD *)(a1 + 32);
  oneshot_xpc_sync("com.apple.dt.instruments.dtsecurity.xpc", v4, v5);

}

int64_t sub_222B38548(uint64_t a1, void *a2)
{
  int64_t result;

  result = xpc_message_get_status(a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t authorized_xpc_attach(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  _xpc_connection_s *v13;
  id v14;
  uint64_t v15;
  id v16;
  _xpc_connection_s *v17;
  uint64_t v18;
  _QWORD v20[4];
  _xpc_connection_s *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD handler[4];
  id v32;

  v13 = a1;
  v14 = a7;
  if (!v14)
    sub_222BC61E4();
  v15 = MEMORY[0x24BDAC760];
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 3221225472;
  handler[2] = sub_222B386E4;
  handler[3] = &unk_24EB28830;
  v16 = v14;
  v32 = v16;
  xpc_connection_set_event_handler(v13, handler);
  xpc_connection_resume(v13);
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 5;
  v20[0] = v15;
  v20[1] = 3221225472;
  v20[2] = sub_222B387E0;
  v20[3] = &unk_24EB28E18;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v17 = v13;
  v21 = v17;
  v22 = &v27;
  with_authorized_xpc_message(a2, "debug_xpc_process", 2, v20);
  v18 = *((unsigned int *)v28 + 6);

  _Block_object_dispose(&v27, 8);
  return v18;
}

void sub_222B386CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B386E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *string;
  int64_t int64;
  int64_t v7;
  xpc_object_t xdict;

  xdict = a2;
  if (xdict == (xpc_object_t)MEMORY[0x24BDACF38])
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "xpc connection invalid: %s\n", "com.apple.dt.instruments.dtsecurity.xpc");
  }
  else if (MEMORY[0x22767A790]() == MEMORY[0x24BDACFA0])
  {
    v3 = xpc_dictionary_dup_fd(xdict, "outputfd");
    v4 = *(_QWORD *)(a1 + 32);
    string = xpc_dictionary_get_string(xdict, "name");
    int64 = xpc_dictionary_get_int64(xdict, "pid");
    v7 = xpc_dictionary_get_int64(xdict, "host_pid");
    (*(void (**)(uint64_t, const char *, int64_t, int64_t, uint64_t))(v4 + 16))(v4, string, int64, v7, v3);
    if ((v3 & 0x80000000) == 0)
      close(v3);
  }

}

void sub_222B387E0(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id v5;

  v3 = *(const char **)(a1 + 48);
  v4 = a2;
  xpc_dictionary_set_string(v4, "name", v3);
  xpc_dictionary_set_archived_object(v4, "archived_dictionary", *(_QWORD *)(a1 + 56));
  xpc_dictionary_set_archived_object(v4, "archived_array", *(_QWORD *)(a1 + 64));
  xpc_dictionary_set_archived_object(v4, "archived_options", *(_QWORD *)(a1 + 72));
  v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), v4);

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_message_get_status(v5);
}

void with_analysis_task_for_pid(unsigned int a1, int a2, void *a3)
{
  id v5;
  ipc_space_t *v6;
  mach_msg_return_t v7;
  mach_error_t v8;
  const char *v9;
  pid_t v10;
  char *v11;
  mach_port_name_t v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t);
  void *v19;
  id v20;
  mach_port_name_t name;
  _BYTE msg[32];
  __int128 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  pid_t v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  mach_error_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (v5)
  {
    name = 0;
    v6 = (ipc_space_t *)MEMORY[0x24BDAEC58];
    mach_port_allocate(*MEMORY[0x24BDAEC58], 1u, &name);
    if (name - 1 < 0xFFFFFFFE)
    {
      *(_QWORD *)&msg[16] = 0;
      *(_QWORD *)&v23 = 0;
      *(_QWORD *)&msg[8] = __PAIR64__(name, a1);
      *(_QWORD *)msg = 0x2800001413;
      *(_DWORD *)&msg[24] = 1;
      *(_DWORD *)&msg[28] = a2;
      v7 = mach_msg_send((mach_msg_header_t *)msg);
      if (!v7)
      {
        v12 = name;
        v17[0] = MEMORY[0x24BDAC760];
        v17[1] = 3221225472;
        v18 = sub_222B38B50;
        v19 = &unk_24EB28E40;
        v20 = v5;
        v13 = v17;
        v23 = 0u;
        memset(msg, 0, sizeof(msg));
        if (mach_msg((mach_msg_header_t *)msg, 2, 0, 0x30u, v12, 0, 0) || *(_DWORD *)&msg[20] == 70)
        {
          ((void (*)(_QWORD *, _QWORD, uint64_t, _QWORD))v18)(v13, 0, 4, 0);
        }
        else
        {
          if (HIDWORD(v23) + *(_DWORD *)&msg[4] == 48
            && *(_DWORD *)&msg[24] == 1
            && !HIBYTE(DWORD1(v23))
            && ((v14 = HIWORD(DWORD1(v23)), (HIWORD(DWORD1(v23)) - 22) < 0xFFFFFFFA)
             || (*(_DWORD *)msg & 0x80000000) != 0))
          {
            if (v14 == 16)
              v15 = 1;
            else
              v15 = 4 * ((v14 - 17) > 4);
            if (*(int *)msg >= 0)
              v16 = 6;
            else
              v16 = v15;
            ((void (*)(_QWORD *, _QWORD, uint64_t, _QWORD))v18)(v13, *(unsigned int *)&msg[28], v16, *(unsigned int *)&msg[8]);
          }
          else
          {
            ((void (*)(_QWORD *, _QWORD, uint64_t, _QWORD))v18)(v13, 0, 4, 0);
          }
          mach_msg_destroy((mach_msg_header_t *)msg);
        }

        goto LABEL_7;
      }
      v8 = v7;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v9 = getprogname();
        v10 = getpid();
        v11 = mach_error_string(v8);
        *(_DWORD *)buf = 136315906;
        v25 = v9;
        v26 = 1024;
        v27 = v10;
        v28 = 2080;
        v29 = v11;
        v30 = 1024;
        v31 = v8;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_msg_send' failed: %s (%d)\n", buf, 0x22u);
      }
    }
    (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
LABEL_7:
    mach_port_mod_refs(*v6, name, 1u, -1);
  }

}

uint64_t sub_222B38B50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_xpc_connection_s *pid_watcher_connect(char a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  xpc_connection_t v7;
  id v8;
  _xpc_connection_s *v9;
  _xpc_connection_s *v10;
  _xpc_connection_s *v11;
  _QWORD v13[4];
  _xpc_connection_s *v14;
  id v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    dispatch_get_global_queue(2, 0);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v7 = xpc_connection_create("com.apple.dt.instruments.dtsecurity.xpc", v5);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 5;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = sub_222B38CB0;
  v13[3] = &unk_24EB28E88;
  v17 = a1;
  v8 = v6;
  v15 = v8;
  v9 = v7;
  v14 = v9;
  v16 = &v18;
  with_authorized_xpc_message(0, "process_watcher_connect", 1, v13);
  if (*((_DWORD *)v19 + 6))
  {

    v9 = 0;
  }
  v10 = v14;
  v11 = v9;

  _Block_object_dispose(&v18, 8);
  return v11;
}

void sub_222B38C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B38CB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _xpc_connection_s *v5;
  xpc_object_t v6;
  _QWORD handler[4];
  id v8;

  v3 = a2;
  xpc_dictionary_set_BOOL(v3, "track_expired", *(_BYTE *)(a1 + 56));
  xpc_dictionary_set_BOOL(v3, "send_updates", *(_QWORD *)(a1 + 40) != 0);
  v5 = *(_xpc_connection_s **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 3221225472;
    handler[2] = sub_222B38DA4;
    handler[3] = &unk_24EB28830;
    v8 = v4;
    xpc_connection_set_event_handler(v5, handler);

  }
  else
  {
    xpc_connection_set_event_handler(*(xpc_connection_t *)(a1 + 32), &unk_24EB27750);
  }
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
  v6 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), v3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = xpc_message_get_status(v6);

}

void sub_222B38DA4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  const char *v6;
  const UInt8 *data;
  CFDataRef v8;
  CFDataRef v9;
  NSObject *v10;
  const char *v11;
  void (*v12)(void);
  xpc_object_t reply;
  _xpc_connection_s *v14;
  size_t length;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3 == (id)MEMORY[0x24BDACF38])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "com.apple.dt.instruments.dtsecurity.xpc";
      v10 = MEMORY[0x24BDACB70];
      v11 = "xpc connection invalid: %s\n";
LABEL_13:
      _os_log_impl(&dword_222B17000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
    }
  }
  else if (MEMORY[0x22767A790](v3) == MEMORY[0x24BDACFA0])
  {
    string = xpc_dictionary_get_string(v4, "Message");
    if (string)
    {
      v6 = string;
      length = 0;
      data = (const UInt8 *)xpc_dictionary_get_data(v4, "signatures_data", &length);
      if (!data || !length)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Symbolicator notification with no signature", buf, 2u);
        }
        goto LABEL_22;
      }
      v8 = CFDataCreate(0, data, length);
      if (!v8)
      {
LABEL_22:
        reply = xpc_dictionary_create_reply(v4);
        xpc_dictionary_get_remote_connection(v4);
        v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
        xpc_connection_send_message(v14, reply);

        goto LABEL_23;
      }
      v9 = v8;
      xpc_dictionary_get_int64(v4, "pid");
      if (!strcmp(v6, "dyld_load"))
      {
        v12 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
      }
      else
      {
        if (strcmp(v6, "dyld_unload"))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v17 = v6;
            _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unexpected symbolicator message: %s", buf, 0xCu);
          }
          goto LABEL_21;
        }
        v12 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
      }
      v12();
LABEL_21:
      CFRelease(v9);
      goto LABEL_22;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = (const char *)v4;
      v10 = MEMORY[0x24BDACB70];
      v11 = "Bad response from symbolicator update service %@";
      goto LABEL_13;
    }
  }
LABEL_23:

}

void sub_222B39050(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (v2 == (id)MEMORY[0x24BDACF38] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315138;
    v4 = "com.apple.dt.instruments.dtsecurity.xpc";
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "xpc connection invalid: %s\n", (uint8_t *)&v3, 0xCu);
  }

}

id pid_watcher_deep_symbol_owner_for_pid(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = sub_222B3746C;
    v18 = sub_222B3747C;
    v19 = 0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = sub_222B3921C;
    v9[3] = &unk_24EB28EB0;
    v13 = a2;
    v12 = a3;
    v10 = v5;
    v11 = &v14;
    with_authorized_xpc_message(0, "deep_symbol_owner", 1, v9);
    v7 = (id)v15[5];

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_222B39204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B3921C(uint64_t a1, void *a2)
{
  int64_t v3;
  id v4;
  xpc_object_t v5;
  const void *data;
  void *v7;
  size_t length;

  v3 = *(int *)(a1 + 56);
  v4 = a2;
  xpc_dictionary_set_int64(v4, "pid", v3);
  xpc_dictionary_set_uuid(v4, "uuid", *(const unsigned __int8 **)(a1 + 48));
  v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), v4);

  if (!xpc_message_get_status(v5))
  {
    length = 0;
    data = xpc_dictionary_get_data(v5, "signatures_data", &length);
    if (data)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", data, length);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v7);
    if (data)

  }
}

id pid_watcher_symbolicator_for_pid(void *a1, int a2, char a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = sub_222B3746C;
    v18 = sub_222B3747C;
    v19 = 0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = sub_222B3940C;
    v9[3] = &unk_24EB28ED8;
    v12 = a2;
    v13 = a3;
    v10 = v5;
    v11 = &v14;
    with_authorized_xpc_message(0, "symbolicate_pid", 1, v9);
    v7 = (id)v15[5];

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_222B393F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B3940C(uint64_t a1, void *a2)
{
  int64_t v3;
  id v4;
  xpc_object_t v5;
  const void *data;
  void *v7;
  size_t length;

  v3 = *(int *)(a1 + 48);
  v4 = a2;
  xpc_dictionary_set_int64(v4, "pid", v3);
  xpc_dictionary_set_BOOL(v4, "enable_dyld_notifications", *(_BYTE *)(a1 + 52));
  v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), v4);

  if (!xpc_message_get_status(v5))
  {
    length = 0;
    data = xpc_dictionary_get_data(v5, "signatures_data", &length);
    if (data)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", data, length);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v7);
    if (data)

  }
}

void pid_watcher_collect(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = sub_222B39590;
    v5[3] = &unk_24EB28808;
    v6 = v3;
    v7 = v4;
    with_authorized_xpc_message(0, "process_watcher_copy_signatures", 0, v5);

  }
}

void sub_222B39590(uint64_t a1, void *a2)
{
  xpc_object_t v3;
  const UInt8 *data;
  size_t v5;
  id v6;
  void (**v7)(_QWORD, _QWORD);
  const __CFData *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFErrorRef v15;
  size_t length;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CFErrorRef error;
  uint8_t buf[136];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 32), a2);
  if (!xpc_message_get_status(v3))
  {
    length = 0;
    data = (const UInt8 *)xpc_dictionary_get_data(v3, "signatures_data", &length);
    v5 = length;
    v6 = *(id *)(a1 + 40);
    v7 = (void (**)(_QWORD, _QWORD))v6;
    if (v5 && v6)
    {
      error = 0;
      v8 = CFDataCreateWithBytesNoCopy(0, data, v5, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
      v9 = (void *)CFPropertyListCreateWithData(0, v8, 0, 0, &error);
      if (v9)
      {
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v10 = v9;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v18;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v18 != v13)
                objc_enumerationMutation(v10);
              v7[2](v7, *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14++));
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
          }
          while (v12);
        }

        v15 = (CFErrorRef)v10;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Signatures from daemon in invalid format", buf, 2u);
        }
        v15 = error;
      }
      CFRelease(v15);
      CFRelease(v8);
    }

  }
}

void sub_222B39770()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Instruments", "dtsecurity-client");
  v1 = (void *)qword_25576FA68;
  qword_25576FA68 = (uint64_t)v0;

}

void sub_222B397A0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_222B39B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B39BAC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B39BBC(uint64_t a1)
{

}

void sub_222B39BC4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_222B3A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_222B3A614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_222B3A96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B3A980(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", 102400);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)*((_QWORD *)v4 + 45);
  *((_QWORD *)v4 + 45) = v1;

  v3 = objc_msgSend(*((id *)v4 + 45), "mutableBytes");
  *((_QWORD *)v4 + 34) = v3;
  *((_QWORD *)v4 + 35) = v3;
  *((_QWORD *)v4 + 36) = v3 + (objc_msgSend(*((id *)v4 + 45), "length") & 0xFFFFFFFFFFFFFFFELL);
  *((_BYTE *)v4 + 504) = 0;

}

void sub_222B3AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B3AAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DTOSLogLoader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_222B3ABD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_222B3ABF4(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_holdAgent_loader_);
}

void sub_222B3AC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B3ACC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B3AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B3ADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B3AED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_222B3AF00(size_t a1, char *a2, unint64_t a3)
{
  _DWORD *v4;

  if (*(_BYTE *)(a1 + 8))
    **(_DWORD **)(a1 + 16) = 5;
  sub_222B3DC84(a1, a2, a3);
  v4 = *(_DWORD **)(a1 + 16);
  if (*v4 == 2)
    return v4[16];
  else
    return 0;
}

void sub_222B3B064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_222B3B094(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    *(_DWORD *)v4 = 5;
  v14 = *(_DWORD *)(v4 + 64);
  v5 = a2[1];
  v15 = bswap64(*a2);
  *(_QWORD *)(v4 + 32) = &v15;
  *(_QWORD *)(v4 + 40) = &v16;
  sub_222B41914(a1, (uint64_t)a2, a3);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v8 == 2
    && (v15 = bswap64(v5),
        *(_QWORD *)(v8 + 32) = &v15,
        *(_QWORD *)(v8 + 40) = &v16,
        sub_222B41914(a1, v6, v7),
        **(_DWORD **)(a1 + 16) == 2)
    && (sub_222B3B588(a1, &v14, v9), v10 = *(_DWORD **)(a1 + 16), *v10 == 3))
  {
    v12 = v10[16];
    v11 = v12 & 0xFFFF0000;
    v12 = (unsigned __int16)v12;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return v12 | v11;
}

void sub_222B3B168(uint64_t *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = objc_msgSend(v3, "length");
    v21 = *(_DWORD *)(*(_QWORD *)(a1[32] + 16) + 64);
    v6 = objc_msgSend(objc_retainAutorelease(v4), "bytes");
    if (v5 >= 0x14)
    {
      v8 = v6;
      if (v5 / 0x14 <= 1)
        v9 = 1;
      else
        v9 = v5 / 0x14;
      do
      {
        v10 = *(_OWORD *)v8;
        v24 = *(_DWORD *)(v8 + 16);
        v23 = v10;
        v20 = *(_DWORD *)(*(_QWORD *)(a1[32] + 16) + 64);
        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
        if (v11)
        {
          objc_msgSend(a1, "_stackReferenceForRepeatedUUID:", v11);
          v13 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue();
          v14 = a1[32];
          if (v13)
            sub_222B3B350(v14, v13 + 4, v12);
          else
            sub_222B3B4B8(v14);

        }
        else
        {
          sub_222B3B4B8(a1[32]);
        }
        v17 = a1[32];
        v22 = v24;
        v18 = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(v18 + 32) = &v22;
        *(_QWORD *)(v18 + 40) = &v23;
        sub_222B41914(v17, v15, v16);
        sub_222B3B588(a1[32], &v20, v19);

        v8 += 20;
        --v9;
      }
      while (v9);
    }
    sub_222B3B588(a1[32], &v21, v7);
  }

}

void sub_222B3B314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_222B3B350(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a2[1])
    sub_222BC62A0();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(v4 + 64);
  if (*a2 != (unsigned __int16)v5)
    sub_222BC62C8(a1, (uint64_t)a2, a3);
  v8 = HIWORD(v5) - a2[1];
  if (v8 > 0xFE)
  {
    *(_QWORD *)(v4 + 32) = a2 + 1;
    *(_QWORD *)(v4 + 40) = a2 + 2;
    result = (_QWORD *)sub_222B41914(a1, (uint64_t)a2, a3);
    if (**(_DWORD **)(a1 + 16) != 2)
      return result;
    v9[0] = &off_24EB27458;
    v10 = v9;
    sub_222B418B4(a1, (uint64_t)v9);
  }
  else
  {
    v9[0] = &off_24EB274B0;
    v9[1] = &v8;
    v10 = v9;
    sub_222B418B4(a1, (uint64_t)v9);
  }
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_222B3B478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == v15)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_222B3B4B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_24EB272A0;
  v4 = v3;
  sub_222B418B4(a1, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_222B3B54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_222B3B588(uint64_t a1, unsigned int *a2, uint64_t a3))()
{
  uint64_t v3;
  unsigned int v4;
  uint64_t (***result)();
  uint64_t v8;
  unsigned int v9;
  uint64_t (**v10)();
  unsigned int *v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 + 64);
  if (*(unsigned __int16 *)a2 != (unsigned __int16)v4)
    sub_222BC62C8(a1, (uint64_t)a2, a3);
  v9 = HIWORD(v4) - *((unsigned __int16 *)a2 + 1);
  if (v9 > 0xFE)
  {
    *(_QWORD *)(v3 + 32) = (char *)a2 + 2;
    *(_QWORD *)(v3 + 40) = a2 + 1;
    result = (uint64_t (***)())sub_222B41914(a1, (uint64_t)a2, a3);
    if (**(_DWORD **)(a1 + 16) != 2)
      return result;
    v10 = &off_24EB272F8;
    v11 = a2;
    v12 = &v10;
    sub_222B418B4(a1, (uint64_t)&v10);
  }
  else
  {
    v10 = &off_24EB27350;
    v11 = &v9;
    v12 = &v10;
    sub_222B418B4(a1, (uint64_t)&v10);
  }
  result = v12;
  if (v12 == &v10)
  {
    v8 = 4;
    result = &v10;
  }
  else
  {
    if (!v12)
      return result;
    v8 = 5;
  }
  return (uint64_t (***)())(*result)[v8]();
}

void sub_222B3B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == v15)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_222B3D564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  _Unwind_Resume(a1);
}

_QWORD *sub_222B3DA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 76) = *(unsigned __int16 *)(v4 + 66);
  v4 += 76;
  *(_QWORD *)(v4 - 44) = v4;
  *(_QWORD *)(v4 - 36) = v4 + 4;
  result = (_QWORD *)sub_222B41914(a1, a2, a3);
  if (**(_DWORD **)(a1 + 16) == 2)
  {
    v8[0] = &off_24EB27400;
    v8[1] = &v7;
    v9 = v8;
    sub_222B418B4(a1, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v6 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_222B3DB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_222B3DB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t __dst;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3;
  v4 = (char *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    *(_DWORD *)v6 = 5;
  v18 = *(_DWORD *)(v6 + 64);
  v19 = a3;
  *(_QWORD *)(v6 + 32) = &v19;
  *(_QWORD *)(v6 + 40) = &v20;
  sub_222B41914(a1, a2, a3);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v8 != 2)
    goto LABEL_13;
  if (v3 >= 1)
  {
    do
    {
      __dst = 0;
      v9 = (unint64_t)v3 >= 8 ? 8 : v3;
      memcpy(&__dst, v4, v9);
      v19 = __dst;
      *(_QWORD *)(v8 + 32) = &v19;
      *(_QWORD *)(v8 + 40) = &v20;
      sub_222B41914(a1, v10, v11);
      v8 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)v8 != 2)
        goto LABEL_13;
      v4 += 8;
      v12 = v3 < 9;
      v3 -= 8;
    }
    while (!v12);
  }
  sub_222B3B588(a1, &v18, v7);
  v13 = *(_DWORD **)(a1 + 16);
  if (*v13 != 3)
  {
LABEL_13:
    v14 = 0;
    v15 = 0;
    return v15 | v14;
  }
  v15 = v13[16];
  v14 = v15 & 0xFFFF0000;
  v15 = (unsigned __int16)v15;
  return v15 | v14;
}

size_t sub_222B3DC84(size_t result, char *__s, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = result;
  if (a3 == -1)
  {
    result = strlen(__s);
    a3 = result + 1;
  }
  v5 = *(_QWORD *)(v4 + 16);
  if (HIDWORD(a3))
  {
    *(_DWORD *)v5 = 5;
  }
  else
  {
    *(_QWORD *)(v5 + 32) = __s;
    *(_QWORD *)(v5 + 40) = &__s[a3];
    return sub_222B41914(v4, (uint64_t)__s, a3);
  }
  return result;
}

_QWORD *sub_222B3DCE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_24EB273A8;
  v4 = v3;
  sub_222B418B4(a1, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_222B3DD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_222B3DDB4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  unsigned int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v3 = (_DWORD *)result[2];
  v4 = v3[16];
  if (*((unsigned __int16 *)result + 12) != (unsigned __int16)v4)
    sub_222BC62C8((uint64_t)result, a2, a3);
  v5 = result;
  v6 = HIWORD(v4) - *((unsigned __int16 *)result + 13);
  v9 = v6;
  if (*((_BYTE *)result + 8))
  {
    v7 = result[4];
    if (result[5] - v7 > (unint64_t)a2
      && *(unsigned __int8 *)(v7 + a2) == (unsigned __int16)v6)
    {
      v11[0] = &off_24EB27560;
      v11[1] = &v10;
      v11[2] = &v9;
      v12 = v11;
      sub_222B418B4((uint64_t)result, (uint64_t)v11);
      result = v12;
      if (v12 == v11)
      {
        v8 = 4;
        result = v11;
      }
      else
      {
        if (!v12)
        {
LABEL_12:
          *((_DWORD *)v5 + 6) = *(unsigned __int16 *)(v5[2] + 64);
          goto LABEL_9;
        }
        v8 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
      goto LABEL_12;
    }
  }
  *v3 = 5;
LABEL_9:
  *((_BYTE *)v5 + 8) = 0;
  return result;
}

void sub_222B3DECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_222B3EA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_222B3EADC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4[0] = &off_24EB27508;
  v5 = v4;
  sub_222B418B4(a1, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
    goto LABEL_5;
  }
  if (v5)
  {
    v3 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64);
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

void sub_222B3EB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_222B3EBBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char **a7, uint64_t a8)
{
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  v15 = a2;
  v17 = a1[4];
  v18 = a1[5];
  v16 = a1 + 4;
  v19 = v18 - v17;
  if (v19 <= a2)
  {
    LOBYTE(v30[0]) = 0;
    sub_222B347BC(v16, a2 - v19 + 1, v30);
    v17 = a1[4];
    v19 = a1[5] - v17;
  }
  if (v19 <= v15)
    __break(1u);
  *(_BYTE *)(v17 + v15) = a8;
  if (a5 && a6)
  {
    v20 = a1[2];
    *(_QWORD *)(v20 + 32) = a5;
    *(_QWORD *)(v20 + 40) = a5 + a6;
    result = (_QWORD *)sub_222B41914((uint64_t)a1, a2, a3);
    v24 = (_DWORD *)a1[2];
    if (*v24 != 2)
      return result;
    v24[19] = v24[10] - v24[8];
    *((_QWORD *)v24 + 4) = v24 + 19;
    *((_QWORD *)v24 + 5) = v24 + 20;
    result = (_QWORD *)sub_222B41914((uint64_t)a1, v22, v23);
    v27 = a1[2];
    if (*(_DWORD *)v27 != 2)
      return result;
  }
  else
  {
    result = sub_222B3B4B8((uint64_t)a1);
    if (*(_DWORD *)a1[2] != 3)
      return result;
    result = sub_222B3B4B8((uint64_t)a1);
    v27 = a1[2];
    if (*(_DWORD *)v27 != 3)
      return result;
  }
  *(_QWORD *)(v27 + 32) = a3;
  *(_QWORD *)(v27 + 40) = a4 + a3 + 1;
  result = (_QWORD *)sub_222B41914((uint64_t)a1, v25, v26);
  if (*(_DWORD *)a1[2] == 2)
  {
    result = sub_222B424AC((uint64_t)a1, a7, a8);
    if (*(_DWORD *)a1[2] == 3)
    {
      v30[0] = &off_24EB27248;
      v30[1] = &v29;
      v31 = v30;
      sub_222B418B4((uint64_t)a1, (uint64_t)v30);
      result = v31;
      if (v31 == v30)
      {
        v28 = 4;
        result = v30;
      }
      else
      {
        if (!v31)
          return result;
        v28 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
    }
  }
  return result;
}

void sub_222B3EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_222B3F048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B3F0A0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  unint64_t v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  if (objc_msgSend(v9, "type") == 1280 && objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "mode") == 2)
  {
    objc_msgSend(v9, "composedMessage");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "containsString:", CFSTR("system boot")))
    {
      pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));
      objc_msgSend(v9, "date");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "compare:", v4) == -1)
      {
        objc_msgSend(v4, "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
        v6 = v5;
        v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "machTimebase");
        v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "machTimebase");
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = HIDWORD(v7) * (unint64_t)(v6 * 1000000000.0) / v8
                                                  + objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "machContinuousStart");
      }
      pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));

    }
  }
  if (objc_msgSend(v9, "type") == 1024 || objc_msgSend(v9, "type") == 1536)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleRecord:", v9);
  }
  else if (objc_msgSend(v9, "type") == 1792)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 500) += objc_msgSend(v9, "lossCount");
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));
  }

}

void sub_222B3F290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_222B3F2FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "_funnelQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B3F3B0;
  block[3] = &unk_24EB29160;
  v9 = v5;
  v10 = a2;
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  dispatch_sync(v6, block);

}

void sub_222B3F3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B3F3B0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;

  switch(a1[6])
  {
    case 1:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended early because of a disconnection");
      goto LABEL_10;
    case 2:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended early because the system is overwhelmed with logs");
      goto LABEL_10;
    case 3:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended due to an internal error");
      goto LABEL_10;
    case 4:
    case 5:
      v2 = a1[4];
      v3 = *(void **)(v2 + 88);
      *(_QWORD *)(v2 + 88) = 0;
      goto LABEL_11;
    case 6:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended due to misuse");
      goto LABEL_10;
    case 7:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended due to insufficient permissions");
      goto LABEL_10;
    case 8:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream ended due to inability to evaluate filter predicate");
      goto LABEL_10;
    case 9:
      v4 = (void *)MEMORY[0x24BDD1540];
      v5 = CFSTR("Log stream faced initialization failure.");
LABEL_10:
      objc_msgSend(v4, "dvtiuErrorWithFormat:", v5);
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = a1[4];
      v3 = *(void **)(v7 + 88);
      *(_QWORD *)(v7 + 88) = v6;
LABEL_11:

      break;
    default:
      break;
  }
  v8 = a1[4];
  v9 = *(void **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = 0;

  v10 = a1[4];
  v11 = *(void **)(v10 + 80);
  *(_QWORD *)(v10 + 80) = 0;

  *(_BYTE *)(a1[4] + 509) = 1;
  pthread_mutex_lock((pthread_mutex_t *)(a1[4] + 184));
  v12 = a1[4];
  if (*(_BYTE *)(v12 + 506))
  {
    objc_msgSend(*(id *)(v12 + 128), "setCurrentPosition:", a1[5]);
    v12 = a1[4];
  }
  if (*(_QWORD *)(v12 + 352))
  {
    objc_msgSend((id)v12, "_welcomeAgent:");
    v13 = a1[4];
    v14 = *(void **)(v13 + 352);
    *(_QWORD *)(v13 + 352) = 0;

    v12 = a1[4];
    if (*(_QWORD *)(v12 + 120))
      sub_222BC6330();
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 184));
  v15 = (_QWORD *)a1[4];
  if (v15[15])
  {
    objc_msgSend(v15, "_welcomeAgent:");
    v16 = a1[4];
    v17 = *(void **)(v16 + 120);
    *(_QWORD *)(v16 + 120) = 0;

  }
}

void sub_222B3F67C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B3F7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_222B3F7D4(uint64_t a1)
{
  char *WeakRetained;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    pthread_mutex_lock((pthread_mutex_t *)(WeakRetained + 184));
    ++*((_DWORD *)WeakRetained + 125);
    pthread_mutex_unlock((pthread_mutex_t *)(WeakRetained + 184));
  }

}

void sub_222B3F840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_222B4002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_222B400AC(void *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id obj;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = a1;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v12 = *(_QWORD *)v18;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(obj);
        v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE60C98]), "initWithName:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v4));
        if (v5)
        {
          v15 = 0u;
          v16 = 0u;
          v13 = 0u;
          v14 = 0u;
          v6 = objc_msgSend(&unk_24EB4E8B8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
          if (v6)
          {
            v7 = *(_QWORD *)v14;
            do
            {
              v8 = 0;
              do
              {
                if (*(_QWORD *)v14 != v7)
                  objc_enumerationMutation(&unk_24EB4E8B8);
                v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE60C90]), "initWithName:subsystem:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v8), v5);
                v10 = v9;
                if (v9)
                {
                  if (a2)
                    objc_msgSend(v9, "setSignpostEnabled:", 1);
                  else
                    objc_msgSend(v9, "reset");
                }

                ++v8;
              }
              while (v6 != v8);
              v6 = objc_msgSend(&unk_24EB4E8B8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
            }
            while (v6);
          }
        }

        ++v4;
      }
      while (v4 != v3);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v3);
  }

}

void sub_222B4029C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_222B402F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v7 = *(void **)(v6 + 72);
    *(_QWORD *)(v6 + 72) = 0;

    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), a3);
  }
  else
  {
    v10 = *(void **)(v6 + 88);
    *(_QWORD *)(v6 + 88) = 0;

    objc_msgSend(*(id *)(a1 + 32), "_setupLiveStream:", v11);
  }
  objc_msgSend(*(id *)(a1 + 32), "_welcomeAgent:", *(_QWORD *)(a1 + 40));

}

void sub_222B403B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B40508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_222B40538()
{
  return 0;
}

void sub_222B40540(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (v2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v2, "localizedDescription");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    sub_222BC6358(v3, v4);
  }

}

void sub_222B405C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B405DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v7 = *(void **)(v6 + 56);
    *(_QWORD *)(v6 + 56) = 0;

    v8 = *(_QWORD *)(a1 + 32);
    v9 = v5;
    v10 = *(void **)(v8 + 88);
    *(_QWORD *)(v8 + 88) = v9;
LABEL_5:

    goto LABEL_6;
  }
  v11 = *(void **)(v6 + 88);
  *(_QWORD *)(v6 + 88) = 0;

  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(v17, "oldestDate");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 96);
    *(_QWORD *)(v13 + 96) = v12;

    objc_msgSend(v17, "newestDate");
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v16 + 104);
    *(_QWORD *)(v16 + 104) = v15;
    goto LABEL_5;
  }
LABEL_6:
  objc_msgSend(*(id *)(a1 + 32), "_welcomeAgent:", *(_QWORD *)(a1 + 40));

}

void sub_222B406C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B4088C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_222B40978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222B40AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_222B40F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B40FEC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_funnelQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B410B8;
  block[3] = &unk_24EB28F20;
  v7 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void sub_222B410A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B410B8(uint64_t a1)
{
  void *v2;
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  double v13;
  id v14;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  if (v2 != (void *)objc_claimAutoreleasedReturnValue())
    __assert_rtn("-[DTOSLogLoaderFetchTicket holdAgent:loader:]_block_invoke_2", "DTOSLogLoader.mm", 2012, "loader->_loggedStream == (id)[NSNull null]");

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));
  v3 = (id *)(*(_QWORD *)(a1 + 32) + 352);
  if (*v3)
    sub_222BC63B0();
  objc_storeStrong(v3, *(id *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 48))
  {
    *(_BYTE *)(v4 + 509) = 0;
    objc_msgSend(*(id *)(a1 + 40), "ticket");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_setupLoggedStreamForNextChunk:", *(_QWORD *)(a1 + 48));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentPosition");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 507) = 0;
    if (v7)
    {
      objc_msgSend(v5, "currentPosition");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "activateStreamFromPosition:", v8);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_performResetOnOutputStream");
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 506) = 0;
      v10 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v10 + 104) && (objc_msgSend(v5, "windowInSeconds"), v10 = *(_QWORD *)(a1 + 32), v11 > 0.0))
      {
        v12 = *(void **)(v10 + 104);
        objc_msgSend(v5, "windowInSeconds");
        objc_msgSend(v12, "dateByAddingTimeInterval:", -v13);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "compare:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96)) == -1)
        {
          v14 = *(id *)(*(_QWORD *)(a1 + 32) + 96);

          v8 = v14;
        }
      }
      else
      {
        v8 = *(id *)(v10 + 96);
      }
      objc_msgSend(v6, "activateStreamFromDate:", v8);
    }

  }
  else
  {
    objc_msgSend((id)v4, "_welcomeAgent:", *(_QWORD *)(v4 + 352));
    v9 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v9 + 352);
    *(_QWORD *)(v9 + 352) = 0;
  }

  pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)(a1 + 32) + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 184));
}

void sub_222B4131C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B415E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B416D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[6];

  v7[5] = *MEMORY[0x24BDAC8D0];
  v0 = *(_QWORD *)(MEMORY[0x24BE2A9D8] + 1080);
  v6[0] = CFSTR("uuid_t");
  v6[1] = CFSTR("iec-bytes");
  v1 = *(_QWORD *)(MEMORY[0x24BE2A9D8] + 312);
  v7[0] = v0;
  v7[1] = v1;
  v2 = *(_QWORD *)(MEMORY[0x24BE2A9D8] + 1776);
  v6[2] = CFSTR("errno");
  v6[3] = CFSTR("bitrate");
  v3 = *(_QWORD *)(MEMORY[0x24BE2A9D8] + 752);
  v7[2] = v2;
  v7[3] = v3;
  v6[4] = CFSTR("time_t");
  v7[4] = *(_QWORD *)(MEMORY[0x24BE2A9D8] + 1720);
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 5);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_25576FA70;
  qword_25576FA70 = v4;

}

void sub_222B4179C()
{
  os_log_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v0 = os_log_create((const char *)objc_msgSend(CFSTR("com.apple.dt.Instruments"), "UTF8String"), (const char *)objc_msgSend(CFSTR("heartbeat"), "UTF8String"));
  v1 = (void *)qword_25576FA80;
  qword_25576FA80 = (uint64_t)v0;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE60C98]), "initWithName:", CFSTR("com.apple.dt.Instruments"));
  if (v4)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE60C90]), "initWithName:subsystem:", CFSTR("heartbeat"), v4);
    v3 = v2;
    if (v2)
    {
      objc_msgSend(v2, "setPersistedLevel:", 0);

      return;
    }

  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_222BC63D8();
}

void sub_222B41880(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x222B41854);
}

uint64_t sub_222B418B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  do
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      sub_222B41964();
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, *(_QWORD *)(a1 + 16));
    if (**(_DWORD **)(a1 + 16) != 4)
      break;
    result = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t sub_222B41914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;

  do
  {
    do
    {
      result = sub_222B41BE8(*(_QWORD *)(a1 + 16), a2, a3);
      v5 = **(_DWORD **)(a1 + 16);
    }
    while (v5 == 1);
    if (v5 != 4)
      break;
    result = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  while ((result & 1) != 0);
  return result;
}

void sub_222B41964()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24EB275B8;
  __cxa_throw(exception, (struct type_info *)&unk_24EB26E58, (void (*)(void *))std::exception::~exception);
}

void sub_222B4199C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227678FE4);
}

void sub_222B419C4()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B419D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB274B0;
  result[1] = v3;
  return result;
}

uint64_t sub_222B41A0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB274B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B41A28(uint64_t a1, uint64_t a2)
{
  return sub_222B41AAC(a2, **(unsigned __int8 **)(a1 + 8));
}

uint64_t sub_222B41A3C(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F50))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B41A78()
{
  return &unk_24EB26F50;
}

void sub_222B41A84()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t sub_222B41AAC(uint64_t result, unsigned int a2)
{
  if (a2 != 255 && *(unsigned __int16 *)(result + 66) > a2)
    return sub_222B41AE4(result, ((unint64_t)a2 << 8) | 0x65, 0, 1);
  *(_DWORD *)result = 5;
  return result;
}

uint64_t sub_222B41AE4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _WORD *v4;
  int v5;

  if (*(_DWORD *)result != 5 || a2 == 100)
  {
    v4 = *(_WORD **)(result + 16);
    if ((unint64_t)v4 >= *(_QWORD *)(result + 24))
    {
      *(_DWORD *)(result + 72) = *(_DWORD *)result;
      *(_DWORD *)result = 4;
    }
    else
    {
      if (*(_QWORD *)(result + 8) > (unint64_t)v4)
        sub_222BC641C(result, a2, a3);
      *v4 = bswap32(a2) >> 16;
      *(_QWORD *)(result + 16) = v4 + 1;
      v5 = a4 - a3 + *(unsigned __int16 *)(result + 66);
      if (v5 < 0)
        sub_222BC6440();
      *(_WORD *)(result + 66) = v5;
      *(_DWORD *)result = 3;
      if (a2 == 102)
      {
        *(_BYTE *)(result + 68) = BYTE1(a2);
      }
      else if (a2 == 100)
      {
        ++*(_WORD *)(result + 64);
        *(_WORD *)(result + 66) = 0;
        *(_BYTE *)(result + 68) = 0;
      }
    }
  }
  return result;
}

BOOL sub_222B41B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_222B41BE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  int __dst;

  v3 = result;
  v4 = *(_DWORD *)result;
  if (*(_DWORD *)result == 4)
  {
    v4 = *(_DWORD *)(result + 72);
    *(_DWORD *)result = v4;
  }
  if (v4 <= 5)
  {
    v5 = 1 << v4;
    if ((v5 & 0xD) != 0)
    {
      *(_QWORD *)(result + 48) = 0;
      result = sub_222B41D78(result);
    }
    else if ((v5 & 0x30) != 0)
    {
      return result;
    }
  }
  v6 = *(_WORD **)(v3 + 16);
  if ((unint64_t)v6 >= *(_QWORD *)(v3 + 24))
  {
    *(_DWORD *)(v3 + 72) = *(_DWORD *)v3;
    *(_DWORD *)v3 = 4;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 32);
    v8 = *(_QWORD *)(v3 + 40);
    v9 = v8 - v7;
    v10 = *(_QWORD *)(v3 + 48);
    if (v10 >= 8 * (v8 - v7))
    {
      if (v8 != v7)
        sub_222BC6468();
      v19 = *(unsigned __int8 *)(v3 + 68);
      ++*(_WORD *)(v3 + 66);
      *(_DWORD *)v3 = 2;
      if (*(_QWORD *)(v3 + 8) > (unint64_t)v6)
        sub_222BC641C(result, a2, a3);
      LOWORD(v20) = v19 | (v19 << 8) | 0xC000;
    }
    else
    {
      v11 = 8 * v9;
      __dst = 16843009 * *(unsigned __int8 *)(v3 + 68);
      v12 = (const void *)(v7 + (v10 >> 3));
      v13 = v9 - (v10 >> 3);
      if ((unint64_t)v12 + 4 <= v8)
        v14 = 4;
      else
        v14 = v13;
      result = (uint64_t)memcpy(&__dst, v12, v14);
      v17 = __dst;
      *(_QWORD *)(v3 + 48) = v10 + 14;
      if (v10 + 14 >= v11 || v10 + 14 >= *(_QWORD *)(v3 + 56))
      {
        *(_DWORD *)v3 = 2;
        ++*(_WORD *)(v3 + 66);
        v18 = 49152;
      }
      else
      {
        *(_DWORD *)v3 = 1;
        v18 = 0x8000;
      }
      if (*(_QWORD *)(v3 + 8) > (unint64_t)v6)
        sub_222BC641C(result, v15, v16);
      v20 = v18 | (bswap32(v17) << (v10 & 7) >> 18);
    }
    *v6 = v20;
    *(_QWORD *)(v3 + 16) = v6 + 1;
  }
  return result;
}

uint64_t sub_222B41D78(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_BYTE **)(result + 40);
  v3 = (_BYTE *)(v1 + 1);
  if ((uint64_t)&v2[-v1 - 1] < 0)
  {
    v6 = 8 * (_QWORD)&v2[-v1];
  }
  else
  {
    v4 = *(_BYTE **)(result + 40);
    while (v4 != v3)
    {
      v5 = *--v4;
      if (v5 != *(unsigned __int8 *)(result + 68))
        goto LABEL_8;
    }
    v4 = (_BYTE *)(v1 + 1);
LABEL_8:
    if (v4 != v3 || v4 == v2)
    {
      if (v4 != v2 && v4 + 1 != v2 && v4[1] != *(_BYTE *)(result + 68))
        sub_222BC6490();
      v6 = 8 * (_QWORD)&v4[-v1] + 8;
    }
    else
    {
      if (v3 == v2)
        sub_222BC64B8();
      v7 = *(_QWORD *)(result + 48);
      if (((*v3 ^ *(_BYTE *)(result + 68)) & 3) != 0)
        v6 = v7 + 16;
      else
        v6 = v7 + 14;
    }
  }
  *(_QWORD *)(result + 56) = v6;
  return result;
}

void sub_222B41E48()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B41E5C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB27458;
  return result;
}

void sub_222B41E80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB27458;
}

uint64_t sub_222B41E98(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, 65381, 1, 1);
}

uint64_t sub_222B41EAC(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F40))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B41EE8()
{
  return &unk_24EB26F40;
}

void sub_222B41EF8()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B41F0C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB272A0;
  return result;
}

void sub_222B41F30(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB272A0;
}

uint64_t sub_222B41F48(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, 104, 0, 1);
}

uint64_t sub_222B41F5C(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26EF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B41F98()
{
  return &unk_24EB26EF0;
}

void sub_222B41FA8()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B41FBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27350;
  result[1] = v3;
  return result;
}

uint64_t sub_222B41FF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27350;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B4200C(uint64_t a1, uint64_t a2)
{
  return sub_222B42068(a2, **(unsigned __int8 **)(a1 + 8));
}

uint64_t sub_222B42020(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B4205C()
{
  return &unk_24EB26F10;
}

uint64_t sub_222B42068(uint64_t result, uint64_t a2)
{
  if ((_DWORD)a2 != 255 && *(unsigned __int16 *)(result + 66) >= a2)
    return sub_222B41AE4(result, ((unint64_t)a2 << 8) | 0x69, a2, 1);
  *(_DWORD *)result = 5;
  return result;
}

void sub_222B420A4()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B420B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB272F8;
  result[1] = v3;
  return result;
}

uint64_t sub_222B420EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB272F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B42108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_222B42160(a2, *(unsigned __int16 **)(a1 + 8), a3);
}

uint64_t sub_222B42118(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F00))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B42154()
{
  return &unk_24EB26F00;
}

uint64_t sub_222B42160(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (*a2 != *(unsigned __int16 *)(a1 + 64))
    sub_222BC62C8(a1, (uint64_t)a2, a3);
  return sub_222B41AE4(a1, 65385, (unsigned __int16)(*(_WORD *)(a1 + 66) - a2[1]), 1);
}

void sub_222B421A0()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B421B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27400;
  result[1] = v3;
  return result;
}

uint64_t sub_222B421E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27400;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B42204(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, ((unint64_t)**(unsigned __int8 **)(a1 + 8) << 8) | 0x6B, 1, 0);
}

uint64_t sub_222B42228(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F30))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B42264()
{
  return &unk_24EB26F30;
}

void sub_222B42274()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B42288()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB273A8;
  return result;
}

void sub_222B422AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB273A8;
}

uint64_t sub_222B422C4(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, 5, 1, 1);
}

uint64_t sub_222B422D8(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F20))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B42314()
{
  return &unk_24EB26F20;
}

void sub_222B42324()
{
  JUMPOUT(0x227678FE4);
}

__n128 sub_222B42338(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EB27560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_222B42370(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EB27560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_222B42390(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, ((unint64_t)**(unsigned __int8 **)(a1 + 8) << 8) | 2, **(unsigned __int16 **)(a1 + 16), 0);
}

uint64_t sub_222B423B4(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F70))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B423F0()
{
  return &unk_24EB26F70;
}

void sub_222B42400()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B42414()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB27508;
  return result;
}

void sub_222B42438(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB27508;
}

uint64_t sub_222B42450(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, 356, 0, 0);
}

uint64_t sub_222B42464(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26F60))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B424A0()
{
  return &unk_24EB26F60;
}

uint64_t (***sub_222B424AC(uint64_t a1, const char **a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***result)();
  unsigned int v12;

  v4 = *(_QWORD *)(a1 + 16);
  v12 = *(_DWORD *)(v4 + 64);
  if (!(_DWORD)a3)
    return sub_222B3B588(a1, &v12, a3);
  v6 = a3;
  while (1)
  {
    v7 = *a2;
    v8 = strnlen(*a2, 0xFFuLL);
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = &v7[v8 + 1];
    result = (uint64_t (***)())sub_222B41914(a1, v9, v10);
    v4 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)v4 != 2)
      break;
    ++a2;
    if (!--v6)
      return sub_222B3B588(a1, &v12, a3);
  }
  return result;
}

void sub_222B42548()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B4255C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27248;
  result[1] = v3;
  return result;
}

uint64_t sub_222B42590(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27248;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B425AC(uint64_t a1, uint64_t a2)
{
  return sub_222B41AE4(a2, ((unint64_t)**(unsigned __int8 **)(a1 + 8) << 8) | 1, 4, 0);
}

uint64_t sub_222B425D0(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26EE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B4260C()
{
  return &unk_24EB26EE0;
}

void sub_222B42618(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE60C98]), "initWithName:", v5);
  if (v7)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v18;
LABEL_4:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v11);
        v13 = objc_alloc(MEMORY[0x24BE60C90]);
        v14 = (void *)objc_msgSend(v13, "initWithName:subsystem:", v12, v7, (_QWORD)v17);
        v15 = v14;
        if (!v14)
          break;
        if (*(_BYTE *)(a1 + 40))
        {
          v16 = *(_QWORD *)(a1 + 32);
          if (v16 == 1)
          {
            objc_msgSend(v14, "setSignpostEnabled:", 1);
          }
          else if (!v16 && !objc_msgSend(v14, "enabledLevel"))
          {
            objc_msgSend(v15, "setEnabledLevel:", 2);
          }
        }
        else
        {
          objc_msgSend(v14, "reset");
        }

        if (v9 == ++v11)
        {
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
          if (v9)
            goto LABEL_4;
          break;
        }
      }
    }

  }
}

void sub_222B427B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_222B427FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  sub_222B42868(a1, a2);
  *(_QWORD *)a1 = off_24EB26FB8;
  objc_initWeak((id *)(a1 + 56), v5);

  return a1;
}

void sub_222B42858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B42868(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_24EB26F90;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_222B42AEC((unint64_t *)(a1 + 32), 3uLL);
  return a1;
}

void sub_222B428C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_222B428DC(uint64_t a1)
{
  char *WeakRetained;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_13;
  WeakRetained[504] = 1;
  if (*((_QWORD *)WeakRetained + 10) && !WeakRetained[508])
  {
    WeakRetained[508] = 1;
    objc_msgSend(WeakRetained, "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "logLoaderNeedsFetchNow:", v3);

  }
  while (v3[504])
  {
    if (!v3[505])
      goto LABEL_13;
    if (*((_QWORD *)v3 + 44))
    {
      objc_msgSend(v3, "_welcomeAgent:");
      v5 = (void *)*((_QWORD *)v3 + 44);
      *((_QWORD *)v3 + 44) = 0;

    }
    pthread_cond_wait((pthread_cond_t *)(v3 + 136), (pthread_mutex_t *)(v3 + 184));
  }
  if (**(_DWORD **)(a1 + 16) == 4)
  {
    if (*((_QWORD *)v3 + 34) != *((_QWORD *)v3 + 35))
      __assert_rtn("replaceTape", "DTOSLogLoader.mm", 349, "loader->_encoder.outputTape().start == loader->_encoder.outputTape().head");
    v3[508] = 0;
    v6 = 1;
  }
  else
  {
LABEL_13:
    v6 = 0;
  }

  return v6;
}

void sub_222B42A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_222B42A54(uint64_t a1)
{
  void *v2;

  objc_destroyWeak((id *)(a1 + 56));
  *(_QWORD *)a1 = off_24EB26F90;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_222B42A98(uint64_t a1)
{
  void *v2;

  objc_destroyWeak((id *)(a1 + 56));
  *(_QWORD *)a1 = off_24EB26F90;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227678FE4);
}

void sub_222B42AEC(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_222B348D4();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t sub_222B42B94()
{
  return 0;
}

_QWORD *sub_222B42B9C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24EB26F90;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_222B42BD8(_QWORD *a1)
{
  void *v2;

  *a1 = off_24EB26F90;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227678FE4);
}

uint64_t *sub_222B42C24(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *(int *)(a2 + 8);
  v4 = *(_QWORD *)a2 ^ (2 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *(_QWORD *)a2 ^ (2 * v3);
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v9 == v4)
    {
      if (result[2] == *(_QWORD *)a2 && *((_DWORD *)result + 6) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v2)
          v9 %= *(_QWORD *)&v2;
      }
      else
      {
        v9 &= *(_QWORD *)&v2 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_222B42CE8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *(int *)(a2 + 8);
  v8 = *(_QWORD *)a2 ^ (2 * v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *(_QWORD *)a2 ^ (2 * v7);
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *(_QWORD *)a2 && *((_DWORD *)v12 + 6) == (_DWORD)v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  v12[4] = 0;
  v12[5] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_222B42F44(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v12 = *v23;
LABEL_42:
    *v23 = v12;
    goto LABEL_43;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v24 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_222B42F28(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_222B43178(v2, v1);
  _Unwind_Resume(a1);
}

void sub_222B42F44(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_222B43020(a1, prime);
  }
}

void sub_222B43020(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_222B41A84();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_222B43178(uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void *sub_222B431C4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_222B41A84();
  return operator new(8 * a2);
}

void sub_222B431F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_222B4324C(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_222B4324C(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_222B43290(uint64_t a1)
{
  void *v2;

  sub_222B4324C(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_222B432C8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 93, a4);
}

void sub_222B432D0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 55, a4);
}

id DTUVServiceError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v9 = (objc_class *)MEMORY[0x24BDD17C8];
  v10 = a1;
  v11 = (__CFString *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  v12 = &stru_24EB2CF78;
  if (v11)
    v12 = v11;
  v13 = v12;

  v14 = (void *)MEMORY[0x24BDD1540];
  v18 = *MEMORY[0x24BDD0FC8];
  v19[0] = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.ultraviolet.service"), 0, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id DTUVServiceErrorWithUnderlying(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  id v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v10 = (objc_class *)MEMORY[0x24BDD17C8];
  v11 = a2;
  v12 = a1;
  v13 = (__CFString *)objc_msgSend([v10 alloc], "initWithFormat:arguments:", v11, &a9);

  v14 = &stru_24EB2CF78;
  if (v13)
    v14 = v13;
  v15 = v14;

  v16 = (void *)MEMORY[0x24BDD1540];
  v17 = *MEMORY[0x24BDD1398];
  v21[0] = *MEMORY[0x24BDD0FC8];
  v21[1] = v17;
  v22[0] = v15;
  v22[1] = v12;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, v21, 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.ultraviolet.service"), 0, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

id DTUVRenderingServiceErrorWithDescription(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v10 = (objc_class *)MEMORY[0x24BDD17C8];
  v11 = a2;
  v12 = (__CFString *)objc_msgSend([v10 alloc], "initWithFormat:arguments:", v11, &a9);

  v13 = &stru_24EB2CF78;
  if (v12)
    v13 = v12;
  v14 = v13;

  v15 = (void *)MEMORY[0x24BDD1540];
  v19 = *MEMORY[0x24BDD0FC8];
  v20[0] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.ultraviolet.service"), a1, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_222B438D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_222B43918(uint64_t a1)
{
  id WeakRetained;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v3 = 138543362;
    v4 = objc_opt_class();
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[%{public}@] Connection to daemon interrupted", (uint8_t *)&v3, 0xCu);

  }
}

void sub_222B439C8(uint64_t a1)
{
  id WeakRetained;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v4 = 138543362;
    v5 = objc_opt_class();
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[%{public}@] Connection to daemon invalidated", (uint8_t *)&v4, 0xCu);

  }
  v3 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v3, "_disconnectServiceConnection");

}

void sub_222B43A8C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v4 = 138543362;
    v5 = objc_opt_class();
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "[%{public}@] DTX channel disconnected.", (uint8_t *)&v4, 0xCu);

  }
  v3 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v3, "_disconnectServiceConnection");

}

void sub_222B442E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "cancel");
  v5 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v4, "error");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
}

void sub_222B44888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B448A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B448B8(uint64_t a1)
{

}

void sub_222B448C0(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  os_log_type_t v9;
  uint32_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = *(_QWORD *)(a1 + 40);
      v13 = 138543874;
      v14 = v5;
      v15 = 2114;
      v16 = v6;
      v17 = 2114;
      v18 = v4;
      v7 = MEMORY[0x24BDACB70];
      v8 = "[%{public}@] Failed to buy product using purchase configuration for %{public}@: %{public}@";
      v9 = OS_LOG_TYPE_ERROR;
      v10 = 32;
LABEL_6:
      _os_log_impl(&dword_222B17000, v7, v9, v8, (uint8_t *)&v13, v10);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v11 = objc_opt_class();
    v12 = *(_QWORD *)(a1 + 40);
    v13 = 138543618;
    v14 = v11;
    v15 = 2114;
    v16 = v12;
    v7 = MEMORY[0x24BDACB70];
    v8 = "[%{public}@] Successfully bought product using purchase configuration for %{public}@";
    v9 = OS_LOG_TYPE_DEBUG;
    v10 = 22;
    goto LABEL_6;
  }

}

void sub_222B44BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B44BE4(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = a1[5];
      v7 = a1[6];
      v15 = 138544130;
      v16 = v5;
      v17 = 2114;
      v18 = v6;
      v19 = 2114;
      v20 = v7;
      v21 = 2114;
      v22 = v4;
      v8 = MEMORY[0x24BDACB70];
      v9 = "[%{public}@] Failed to add purchase intent for product with ID %{public}@ for %{public}@: %{public}@";
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 42;
LABEL_6:
      _os_log_impl(&dword_222B17000, v8, v10, v9, (uint8_t *)&v15, v11);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_opt_class();
    v13 = a1[5];
    v14 = a1[6];
    v15 = 138543874;
    v16 = v12;
    v17 = 2114;
    v18 = v13;
    v19 = 2114;
    v20 = v14;
    v8 = MEMORY[0x24BDACB70];
    v9 = "[%{public}@] Successfully added purchase intent for product with ID %{public}@ for %{public}@";
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 32;
    goto LABEL_6;
  }

}

void sub_222B44EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B44EFC(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = a1[7];
      v7 = a1[5];
      v15 = 138544130;
      v16 = v5;
      v17 = 2048;
      v18 = v6;
      v19 = 2114;
      v20 = v7;
      v21 = 2114;
      v22 = v4;
      v8 = MEMORY[0x24BDACB70];
      v9 = "[%{public}@] Failed to change auto-renew status for transaction with ID %lu for %{public}@: %{public}@";
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 42;
LABEL_6:
      _os_log_impl(&dword_222B17000, v8, v10, v9, (uint8_t *)&v15, v11);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_opt_class();
    v13 = a1[7];
    v14 = a1[5];
    v15 = 138543874;
    v16 = v12;
    v17 = 2048;
    v18 = v13;
    v19 = 2114;
    v20 = v14;
    v8 = MEMORY[0x24BDACB70];
    v9 = "[%{public}@] Successfully changed auto-renew status for transaction with ID %lu for %{public}@";
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 32;
    goto LABEL_6;
  }

}

void sub_222B45204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B45224(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = a1[7];
      v7 = a1[5];
      v15 = 138544130;
      v16 = v5;
      v17 = 2048;
      v18 = v6;
      v19 = 2114;
      v20 = v7;
      v21 = 2114;
      v22 = v4;
      v8 = MEMORY[0x24BDACB70];
      v9 = "[%{public}@] Failed to complete Ask to Buy transaction with ID %lu for %{public}@: %{public}@";
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 42;
LABEL_6:
      _os_log_impl(&dword_222B17000, v8, v10, v9, (uint8_t *)&v15, v11);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_opt_class();
    v13 = a1[7];
    v14 = a1[5];
    v15 = 138543874;
    v16 = v12;
    v17 = 2048;
    v18 = v13;
    v19 = 2114;
    v20 = v14;
    v8 = MEMORY[0x24BDACB70];
    v9 = "[%{public}@] Successfully completed Ask to Buy transaction with ID %lu for %{public}@";
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 32;
    goto LABEL_6;
  }

}

void sub_222B454E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B454F8(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  os_log_type_t v9;
  uint32_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = *(_QWORD *)(a1 + 40);
      v13 = 138543874;
      v14 = v5;
      v15 = 2114;
      v16 = v6;
      v17 = 2114;
      v18 = v4;
      v7 = MEMORY[0x24BDACB70];
      v8 = "[%{public}@] Failed to delete all transactions for %{public}@: %{public}@";
      v9 = OS_LOG_TYPE_ERROR;
      v10 = 32;
LABEL_6:
      _os_log_impl(&dword_222B17000, v7, v9, v8, (uint8_t *)&v13, v10);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v11 = objc_opt_class();
    v12 = *(_QWORD *)(a1 + 40);
    v13 = 138543618;
    v14 = v11;
    v15 = 2114;
    v16 = v12;
    v7 = MEMORY[0x24BDACB70];
    v8 = "[%{public}@] Successfully deleted all transactions for %{public}@";
    v9 = OS_LOG_TYPE_DEBUG;
    v10 = 22;
    goto LABEL_6;
  }

}

void sub_222B457F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_222B45818(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), a3);
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v8 = objc_opt_class();
      v9 = a1[5];
      v16 = 138543874;
      v17 = v8;
      v18 = 2114;
      v19 = v9;
      v20 = 2114;
      v21 = v6;
      v10 = MEMORY[0x24BDACB70];
      v11 = "[%{public}@] Failed to fetch transaction data for %{public}@: %{public}@";
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_222B17000, v10, v12, v11, (uint8_t *)&v16, v13);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v14 = objc_opt_class();
    v15 = a1[5];
    v16 = 138543618;
    v17 = v14;
    v18 = 2114;
    v19 = v15;
    v10 = MEMORY[0x24BDACB70];
    v11 = "[%{public}@] Successfully fetched transaction data for %{public}@";
    v12 = OS_LOG_TYPE_DEBUG;
    v13 = 22;
    goto LABEL_6;
  }

}

void sub_222B45AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B45AF8(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  os_log_type_t v9;
  uint32_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = *(_QWORD *)(a1 + 40);
      v13 = 138543874;
      v14 = v5;
      v15 = 2114;
      v16 = v6;
      v17 = 2114;
      v18 = v4;
      v7 = MEMORY[0x24BDACB70];
      v8 = "[%{public}@] Failed to remove configuration file for %{public}@: %{public}@";
      v9 = OS_LOG_TYPE_ERROR;
      v10 = 32;
LABEL_6:
      _os_log_impl(&dword_222B17000, v7, v9, v8, (uint8_t *)&v13, v10);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v11 = objc_opt_class();
    v12 = *(_QWORD *)(a1 + 40);
    v13 = 138543618;
    v14 = v11;
    v15 = 2114;
    v16 = v12;
    v7 = MEMORY[0x24BDACB70];
    v8 = "[%{public}@] Successfully removed configuration file for %{public}@";
    v9 = OS_LOG_TYPE_DEBUG;
    v10 = 22;
    goto LABEL_6;
  }

}

void sub_222B45EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B45F18(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_222B46208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B46230(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_222B46588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_222B465C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  v8 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_222B468BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B468E4(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  os_log_type_t v11;
  uint32_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = objc_opt_class();
      v6 = a1[7];
      v7 = a1[8];
      v8 = a1[5];
      v17 = 138544386;
      v18 = v5;
      v19 = 2048;
      v20 = v6;
      v21 = 2048;
      v22 = v7;
      v23 = 2114;
      v24 = v8;
      v25 = 2114;
      v26 = v4;
      v9 = MEMORY[0x24BDACB70];
      v10 = "[%{public}@] Failed to perform action %ld with transaction %lu for %{public}@: %{public}@";
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 52;
LABEL_6:
      _os_log_impl(&dword_222B17000, v9, v11, v10, (uint8_t *)&v17, v12);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v13 = objc_opt_class();
    v14 = a1[7];
    v15 = a1[8];
    v16 = a1[5];
    v17 = 138544130;
    v18 = v13;
    v19 = 2048;
    v20 = v14;
    v21 = 2048;
    v22 = v15;
    v23 = 2114;
    v24 = v16;
    v9 = MEMORY[0x24BDACB70];
    v10 = "[%{public}@] Successfully performed action %ld with transaction %lu for %{public}@";
    v11 = OS_LOG_TYPE_DEBUG;
    v12 = 42;
    goto LABEL_6;
  }

}

void sub_222B46C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_222B46C34(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), a3);
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v8 = objc_opt_class();
      v9 = a1[5];
      v16 = 138543874;
      v17 = v8;
      v18 = 2114;
      v19 = v9;
      v20 = 2114;
      v21 = v6;
      v10 = MEMORY[0x24BDACB70];
      v11 = "[%{public}@] Failed to start observing transaction for %{public}@: %{public}@";
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_222B17000, v10, v12, v11, (uint8_t *)&v16, v13);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v14 = objc_opt_class();
    v15 = a1[5];
    v16 = 138543618;
    v17 = v14;
    v18 = 2114;
    v19 = v15;
    v10 = MEMORY[0x24BDACB70];
    v11 = "[%{public}@] Successfully started observing transactions for %{public}@";
    v12 = OS_LOG_TYPE_DEBUG;
    v13 = 22;
    goto LABEL_6;
  }

}

void sub_222B46F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_222B46F50(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  const char *v9;
  os_log_type_t v10;
  uint32_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (v7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v12 = 138543618;
      v13 = objc_opt_class();
      v14 = 2114;
      v15 = v7;
      v8 = MEMORY[0x24BDACB70];
      v9 = "[%{public}@] Failed to discover StoreKit testing apps: %{public}@";
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 22;
LABEL_6:
      _os_log_impl(&dword_222B17000, v8, v10, v9, (uint8_t *)&v12, v11);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v12 = 138543362;
    v13 = objc_opt_class();
    v8 = MEMORY[0x24BDACB70];
    v9 = "[%{public}@] Successfully discovered StoreKit testing apps";
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 12;
    goto LABEL_6;
  }

}

void sub_222B47600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B47618(uint64_t a1, void *a2)
{
  id v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v5 = 138543618;
    v6 = objc_opt_class();
    v7 = 2114;
    v8 = v4;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[%{public}@] Received error trying to fetch proxy: %{public}@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_222B47984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B479A8(uint64_t a1, void *a2, void *a3)
{
  id v6;
  int v7;
  int v8;
  uint64_t v9;
  id *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = objc_msgSend(v13, "intValue");
      if (*(_DWORD *)(a1 + 40) < v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v12 = *(void **)(v9 + 40);
        v10 = (id *)(v9 + 40);
        v11 = v12;
        if (!v12)
        {
LABEL_7:
          objc_storeStrong(v10, a2);
          goto LABEL_8;
        }
        if (v8 < (int)objc_msgSend(v11, "intValue"))
        {
          v10 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
          goto LABEL_7;
        }
      }
    }
  }
LABEL_8:

}

void sub_222B481D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (**v6)(id, uint64_t, uint64_t, void *, void *);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "statusHandler");
  v6 = (void (**)(id, uint64_t, uint64_t, void *, void *))objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(*(id *)(a1 + 40), "status");
  v3 = objc_msgSend(*(id *)(a1 + 40), "timestamp");
  objc_msgSend(*(id *)(a1 + 40), "notice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "info");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2](v6, v2, v3, v4, v5);

}

void sub_222B48278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (**v6)(id, uint64_t, uint64_t, void *, void *);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "statusHandler");
  v6 = (void (**)(id, uint64_t, uint64_t, void *, void *))objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(*(id *)(a1 + 40), "status");
  v3 = objc_msgSend(*(id *)(a1 + 40), "timestamp");
  objc_msgSend(*(id *)(a1 + 40), "notice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "info");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2](v6, v2, v3, v4, v5);

}

void sub_222B48318(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "bulkDataReceiver");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v3 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(v3 + 24), "bulkDataReceiver");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sendDataMemo:toBulkReceiver:", v4, v6);

  }
  else
  {
    MEMORY[0x24BEDD108](*(_QWORD *)(v3 + 32), sel_sendDataMemo_toClientUsingConfig_);
  }
}

void sub_222B483A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "bulkDataReceiver");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(v3 + 24), "bulkDataReceiver");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sendHeartbeatTime:", objc_msgSend(*(id *)(a1 + 40), "timestamp"));

  }
  else
  {
    MEMORY[0x24BEDD108](*(_QWORD *)(v3 + 32), sel_sendHeartbeatMemo_toClientUsingConfig_);
  }
}

uint64_t sub_222B48430(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B48510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B48528(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v2 + 24))
  {
    *(_BYTE *)(v2 + 24) = 1;
  }
  else
  {
    objc_msgSend(a2, "kdebugFilter");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v4, "containsClass:subclassID:", 3, 1);

  }
}

BOOL DTFillDefaultKDebugBacktraceFilter()
{
  int v0;
  char v1;
  char v2;
  int v3;
  uint64_t i;
  uint64_t j;

  v0 = 0;
  v1 = 1;
  do
  {
    v2 = v1;
    v3 = kperf_kdebug_filter_add_class();
    v1 = 0;
    v0 |= v3;
  }
  while ((v2 & 1) != 0);
  for (i = 0; i != 32; i += 4)
    v0 |= kperf_kdebug_filter_add_class_subclass();
  for (j = 0; j != 24; j += 4)
    v0 |= kperf_kdebug_filter_add_class_subclass_fn();
  return v0 == 0;
}

BOOL DTKDebugFilterMatchesEvent(uint64_t a1, int a2)
{
  unsigned int n_filters;
  unsigned int v4;
  int v5;
  BOOL v6;

  if (a1 && (n_filters = kperf_kdebug_filter_get_n_filters()) != 0)
  {
    v4 = n_filters;
    v5 = 0;
    v6 = 1;
    do
    {
      kperf_kdebug_filter_get_filter();
      if ((a2 & 0xFF000000) == 0)
        break;
      v6 = ++v5 < v4;
    }
    while (v4 != v5);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_222B48E8C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id sub_222B491B4()
{
  if (qword_25576FA98 != -1)
    dispatch_once(&qword_25576FA98, &unk_24EB277B0);
  return (id)qword_25576FA90;
}

uint64_t sub_222B491F4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  sub_222B491B4();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "releasing assertion for pid %d", (uint8_t *)v5, 8u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_222B492A0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Instruments", "RBSAssertion");
  v1 = (void *)qword_25576FA90;
  qword_25576FA90 = (uint64_t)v0;

}

uint64_t sub_222B4A54C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "closeWithError:", 0);
}

uint64_t sub_222B4A628(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B4A638(uint64_t a1)
{

}

void sub_222B4A640(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = WeakRetained;

}

id sub_222B4A738(uint64_t a1)
{
  return objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
}

void sub_222B4A824(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_222B4A8F8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
}

void sub_222B4AA4C(_QWORD *a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = WeakRetained;

  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 24));
}

void sub_222B4AB8C(uint64_t a1)
{
  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 48));
}

uint64_t sub_222B4AC84(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_WORD *)(*(_QWORD *)(result + 32) + 12) & 1) == 0;
  return result;
}

uint64_t sub_222B4AD30(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 32) + 12) = *(_WORD *)(*(_QWORD *)(result + 32) + 12) & 0xFFFE | (*(_BYTE *)(result + 40) == 0);
  return result;
}

uint64_t sub_222B4AE08(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_WORD *)(*(_QWORD *)(result + 32) + 12) & 2) == 0;
  return result;
}

uint64_t sub_222B4AEB4(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 32) + 12) = *(_WORD *)(*(_QWORD *)(result + 32) + 12) & 0xFFFD | (2 * (*(_BYTE *)(result + 40) == 0));
  return result;
}

uint64_t sub_222B4AF8C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_WORD *)(*(_QWORD *)(result + 32) + 12) & 4) == 0;
  return result;
}

uint64_t sub_222B4B038(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 32) + 12) = *(_WORD *)(*(_QWORD *)(result + 32) + 12) & 0xFFFB | (4 * (*(_BYTE *)(result + 40) == 0));
  return result;
}

void sub_222B4B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B4B154(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 272));
}

void sub_222B4B218(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (*(void **)(v2 + 272) != v1)
    objc_storeStrong((id *)(v2 + 272), v1);
}

void sub_222B4B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B4B438(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v23;

  v5 = a3;
  v6 = socket(a2, 1, 0);
  v7 = v6;
  if ((_DWORD)v6 == -1)
  {
    objc_msgSend(*(id *)(a1 + 32), "errnoErrorWithReason:", CFSTR("Error in socket() function"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    goto LABEL_16;
  }
  if (fcntl(v6, 4, 4) == -1)
  {
    v14 = *(void **)(a1 + 32);
    v15 = CFSTR("Error enabling non-blocking IO on socket (fcntl)");
LABEL_11:
    objc_msgSend(v14, "errnoErrorWithReason:", v15);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

LABEL_15:
    close(v7);
    v7 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  if (fcntl(v7, 2, 0x1000000) == -1)
  {
    v14 = *(void **)(a1 + 32);
    v15 = CFSTR("Error enabling close-on-exec on socket (fcntl)");
    goto LABEL_11;
  }
  v23 = 1;
  if (setsockopt(v7, 0xFFFF, 4, &v23, 4u) == -1)
  {
    v9 = *(void **)(a1 + 32);
    v10 = CFSTR("Error enabling address reuse (setsockopt)");
    goto LABEL_14;
  }
  v8 = objc_retainAutorelease(v5);
  if (bind(v7, (const sockaddr *)objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length")) == -1)
  {
    v9 = *(void **)(a1 + 32);
    v10 = CFSTR("Error in bind() function");
    goto LABEL_14;
  }
  if (listen(v7, 1024) == -1)
  {
    v9 = *(void **)(a1 + 32);
    v10 = CFSTR("Error in listen() function");
LABEL_14:
    objc_msgSend(v9, "errnoErrorWithReason:", v10);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    goto LABEL_15;
  }
LABEL_16:

  return v7;
}

void sub_222B4B600(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  uint64_t v4;
  int v5;
  const __CFString *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  dispatch_source_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  dispatch_source_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  int v42;
  _QWORD v43[4];
  int v44;
  _QWORD v45[4];
  id v46;
  id v47;
  int v48;
  _QWORD v49[4];
  int v50;
  _QWORD handler[4];
  id v52;
  id v53;
  int v54;
  id location;
  id v56;
  id v57[2];

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));

  v4 = *(_QWORD *)(a1 + 32);
  if (!WeakRetained)
  {
    v6 = CFSTR("Attempting to accept without a delegate. Set a delegate first.");
    goto LABEL_11;
  }
  if (!*(_QWORD *)(v4 + 24))
  {
    v6 = CFSTR("Attempting to accept without a delegate queue. Set a delegate queue first.");
    goto LABEL_11;
  }
  v5 = *(unsigned __int16 *)(v4 + 12);
  if ((~v5 & 3) != 0)
  {
    v7 = objc_msgSend((id)v4, "isDisconnected");
    v4 = *(_QWORD *)(a1 + 32);
    if ((v7 & 1) == 0)
    {
      v6 = CFSTR("Attempting to accept while connected or accepting connections. Disconnect first.");
      goto LABEL_11;
    }
    objc_msgSend(*(id *)(v4 + 128), "removeAllObjects");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "removeAllObjects");
    v56 = 0;
    v57[0] = 0;
    objc_msgSend(*(id *)(a1 + 32), "getInterfaceAddress4:address6:fromDescription:port:", v57, &v56, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 72));
    v8 = (unint64_t)v57[0];
    v9 = (unint64_t)v56;
    v10 = (void *)v9;
    if (!(v8 | v9))
    {
      v11 = *(void **)(a1 + 32);
      v12 = CFSTR("Unknown interface. Specify valid interface by name (e.g. \"en1\") or IP address.");
LABEL_19:
      objc_msgSend(v11, "badParamError:", v12);
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v18 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;

LABEL_20:
      goto LABEL_12;
    }
    if ((v5 & 1) != 0 && !v9)
    {
      v11 = *(void **)(a1 + 32);
      v12 = CFSTR("IPv4 has been disabled and specified interface doesn't support IPv6.");
      goto LABEL_19;
    }
    if ((v5 & 2) != 0 && !v8)
    {
      v11 = *(void **)(a1 + 32);
      v12 = CFSTR("IPv6 has been disabled and specified interface doesn't support IPv4.");
      goto LABEL_19;
    }
    if (v9)
      v19 = (v5 & 2) != 0;
    else
      v19 = 1;
    if (v5 & 1 | (v8 == 0))
    {
      if (v19)
        goto LABEL_36;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(_DWORD *)(v20 + 32);
      if (v21 == -1)
        goto LABEL_20;
      if (v19)
        goto LABEL_34;
      if (!*(_WORD *)(a1 + 72))
        *(_WORD *)(objc_msgSend(objc_retainAutorelease(v10), "mutableBytes") + 2) = __rev16(objc_msgSend(*(id *)(a1 + 32), "localPort4"));
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v20 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(v20 + 36) == -1)
    {
      v42 = *(_DWORD *)(v20 + 32);
      if (v42 != -1)
        close(v42);
      goto LABEL_20;
    }
    if (v5 & 1 | (v8 == 0))
    {
LABEL_35:
      v32 = dispatch_source_create(MEMORY[0x24BDACA00], *(int *)(v20 + 36), 0, *(dispatch_queue_t *)(v20 + 64));
      v33 = *(_QWORD *)(a1 + 32);
      v34 = *(void **)(v33 + 80);
      *(_QWORD *)(v33 + 80) = v32;

      v35 = *(_QWORD *)(a1 + 32);
      v36 = *(_DWORD *)(v35 + 36);
      v37 = *(id *)(v35 + 80);
      objc_initWeak(&location, *(id *)(a1 + 32));
      v38 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 80);
      v39 = MEMORY[0x24BDAC760];
      v45[0] = MEMORY[0x24BDAC760];
      v45[1] = 3221225472;
      v45[2] = sub_222B4BB10;
      v45[3] = &unk_24EB29740;
      objc_copyWeak(&v47, &location);
      v46 = v37;
      v48 = v36;
      v40 = v37;
      dispatch_source_set_event_handler(v38, v45);
      v41 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 80);
      v43[0] = v39;
      v43[1] = 3221225472;
      v43[2] = sub_222B4BB88;
      v43[3] = &unk_24EB29760;
      v44 = v36;
      dispatch_source_set_cancel_handler(v41, v43);
      dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));

      objc_destroyWeak(&v47);
      objc_destroyWeak(&location);
LABEL_36:
      v20 = *(_QWORD *)(a1 + 32);
      goto LABEL_37;
    }
    v21 = *(_DWORD *)(v20 + 32);
LABEL_34:
    v22 = dispatch_source_create(MEMORY[0x24BDACA00], v21, 0, *(dispatch_queue_t *)(v20 + 64));
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(v23 + 72);
    *(_QWORD *)(v23 + 72) = v22;

    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_DWORD *)(v25 + 32);
    v27 = *(id *)(v25 + 72);
    objc_initWeak(&location, *(id *)(a1 + 32));
    v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 72);
    v29 = MEMORY[0x24BDAC760];
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 3221225472;
    handler[2] = sub_222B4BA90;
    handler[3] = &unk_24EB29740;
    objc_copyWeak(&v53, &location);
    v52 = v27;
    v54 = v26;
    v30 = v27;
    dispatch_source_set_event_handler(v28, handler);
    v31 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 72);
    v49[0] = v29;
    v49[1] = 3221225472;
    v49[2] = sub_222B4BB08;
    v49[3] = &unk_24EB29760;
    v50 = v26;
    dispatch_source_set_cancel_handler(v31, v49);
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 72));

    objc_destroyWeak(&v53);
    objc_destroyWeak(&location);
    v20 = *(_QWORD *)(a1 + 32);
    if (v19)
    {
LABEL_37:
      *(_DWORD *)(v20 + 8) |= 1u;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      goto LABEL_20;
    }
    goto LABEL_35;
  }
  v6 = CFSTR("Both IPv4 and IPv6 have been disabled. Must enable at least one protocol first.");
LABEL_11:
  objc_msgSend((id)v4, "badConfigError:", v6);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

LABEL_12:
  objc_autoreleasePoolPop(v2);
}

void sub_222B4BA90(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  uintptr_t data;
  unint64_t v5;
  BOOL v6;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    data = dispatch_source_get_data(*(dispatch_source_t *)(a1 + 32));
    v5 = 1;
    do
    {
      if (objc_msgSend(WeakRetained, "doAccept:", *(unsigned int *)(a1 + 48)))
        v6 = v5 >= data;
      else
        v6 = 1;
      ++v5;
    }
    while (!v6);
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_222B4BB08(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_222B4BB10(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  uintptr_t data;
  unint64_t v5;
  BOOL v6;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    data = dispatch_source_get_data(*(dispatch_source_t *)(a1 + 32));
    v5 = 1;
    do
    {
      if (objc_msgSend(WeakRetained, "doAccept:", *(unsigned int *)(a1 + 48)))
        v6 = v5 >= data;
      else
        v6 = 1;
      ++v5;
    }
    while (!v6);
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_222B4BB88(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_222B4BD38(uint64_t a1)
{
  void *v2;
  void *v3;
  _DT_GCDAsyncSocket *v4;
  uint64_t v5;
  NSObject *socketQueue;
  _DT_GCDAsyncSocket *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  _DT_GCDAsyncSocket *v12;
  int v13;

  v2 = (void *)MEMORY[0x227679C5C]();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = (void *)objc_msgSend(*(id *)(a1 + 32), "newSocketQueueForConnectionFromAddress:onSocket:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v3 = 0;
  v4 = -[_DT_GCDAsyncSocket initWithDelegate:delegateQueue:socketQueue:]([_DT_GCDAsyncSocket alloc], "initWithDelegate:delegateQueue:socketQueue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), v3);
  v5 = 32;
  if (!*(_BYTE *)(a1 + 60))
    v5 = 36;
  *(_DWORD *)((char *)&v4->super.isa + v5) = *(_DWORD *)(a1 + 56);
  v4->flags = 3;
  socketQueue = v4->socketQueue;
  v8 = MEMORY[0x24BDAC760];
  v9 = 3221225472;
  v10 = sub_222B4BE70;
  v11 = &unk_24EB28028;
  v7 = v4;
  v12 = v7;
  v13 = *(_DWORD *)(a1 + 56);
  dispatch_async(socketQueue, &v8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "socket:didAcceptNewSocket:", *(_QWORD *)(a1 + 48), v7, v8, v9, v10, v11);

  objc_autoreleasePoolPop(v2);
}

void sub_222B4BE70(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "setupReadAndWriteSourcesForNewlyConnectedSocket:", *(unsigned int *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_222B4C290(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  _DWORD *v9;
  int v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD block[4];
  id v17;
  id v18;
  int v19;
  __int16 v20;
  id location;
  id v22;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = objc_msgSend(*(id *)(a1 + 32), "length");
  v4 = *(void **)(a1 + 40);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v22 = *(id *)(v6 + 40);
    v7 = objc_msgSend(v4, "preConnectWithInterface:error:", v5, &v22);
    objc_storeStrong((id *)(v6 + 40), v22);
    if (v7)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) |= 1u;
      v8 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
      v9 = *(_DWORD **)(a1 + 40);
      v10 = v9[10];
      objc_initWeak(&location, v9);
      dispatch_get_global_queue(0, 0);
      v11 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_222B4C438;
      block[3] = &unk_24EB29828;
      v12 = v8;
      v17 = v12;
      v20 = *(_WORD *)(a1 + 80);
      objc_copyWeak(&v18, &location);
      v19 = v10;
      dispatch_async(v11, block);
      objc_msgSend(*(id *)(a1 + 40), "startConnectTimeout:", *(double *)(a1 + 72));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      objc_destroyWeak(&v18);

      objc_destroyWeak(&location);
    }
  }
  else
  {
    objc_msgSend(v4, "badParamError:", CFSTR("Invalid host parameter (nil or \"\"). Should be a domain name or IP address string."));
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B4C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B4C438(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD *WeakRetained;
  _QWORD *v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  id v19;
  NSObject *v20;
  _QWORD *v21;
  id v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD block[4];
  _QWORD *v35;
  id v36;
  int v37;
  id v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int16 *)(a1 + 52);
  v38 = 0;
  +[_DT_GCDAsyncSocket lookupHost:port:error:](_DT_GCDAsyncSocket, "lookupHost:port:error:", v3, v4, &v38);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v38;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_23;
  if (v6)
  {
    v9 = WeakRetained[8];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222B4C6D4;
    block[3] = &unk_24EB297D8;
    v35 = WeakRetained;
    v37 = *(_DWORD *)(a1 + 48);
    v36 = v6;
    dispatch_async(v9, block);

    v10 = v35;
    goto LABEL_22;
  }
  v23 = v5;
  v24 = v2;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v11 = v5;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
  if (!v12)
  {
    v14 = 0;
    v15 = 0;
    goto LABEL_21;
  }
  v13 = v12;
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)v31;
  do
  {
    for (i = 0; i != v13; ++i)
    {
      if (*(_QWORD *)v31 != v16)
        objc_enumerationMutation(v11);
      v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
      if (!v14
        && +[_DT_GCDAsyncSocket isIPv4Address:](_DT_GCDAsyncSocket, "isIPv4Address:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i)))
      {
        v14 = v18;
LABEL_15:
        v19 = v18;
        continue;
      }
      if (v15)
        continue;
      if (+[_DT_GCDAsyncSocket isIPv6Address:](_DT_GCDAsyncSocket, "isIPv6Address:", v18))
      {
        v15 = v18;
        goto LABEL_15;
      }
      v15 = 0;
    }
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
  }
  while (v13);
LABEL_21:

  v20 = v8[8];
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = sub_222B4C708;
  v25[3] = &unk_24EB29800;
  v21 = v8;
  v29 = *(_DWORD *)(a1 + 48);
  v26 = v21;
  v27 = v14;
  v28 = v15;
  v22 = v15;
  v10 = v14;
  dispatch_async(v20, v25);

  v5 = v23;
  v2 = v24;
  v6 = 0;
LABEL_22:

LABEL_23:
  objc_autoreleasePoolPop(v2);
}

void sub_222B4C6D4(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "lookup:didFail:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4C708(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "lookup:didSucceedWithAddress4:address6:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_222B4C940(uint64_t a1)
{
  void *v2;
  int v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  id v7;
  _WORD *v8;
  const __CFString *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  id v20;
  id obj;

  v2 = (void *)MEMORY[0x227679C5C]();
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "length") >= 0x10)
  {
    v3 = *(unsigned __int8 *)(objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes") + 1);
    if (v3 == 30)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "length") == 28)
      {
        v6 = 0;
        v5 = *(void **)(a1 + 32);
        v4 = (unint64_t)v5;
        goto LABEL_8;
      }
    }
    else if (v3 == 2 && objc_msgSend(*(id *)(a1 + 32), "length") == 16)
    {
      v4 = 0;
      v5 = *(void **)(a1 + 32);
      v6 = (unint64_t)v5;
LABEL_8:
      v7 = v5;
      goto LABEL_10;
    }
  }
  v4 = 0;
  v6 = 0;
LABEL_10:
  v8 = *(_WORD **)(a1 + 40);
  if (!(v6 | v4))
  {
    v9 = CFSTR("A valid IPv4 or IPv6 address was not given");
LABEL_18:
    objc_msgSend(v8, "badParamError:", v9);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    goto LABEL_19;
  }
  v10 = v8[6];
  if (v6 && (v10 & 1) != 0)
  {
    v9 = CFSTR("IPv4 has been disabled and an IPv4 address was passed.");
    goto LABEL_18;
  }
  if ((v10 & 2) != 0 && v4)
  {
    v9 = CFSTR("IPv6 has been disabled and an IPv6 address was passed.");
    goto LABEL_18;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v15 + 40);
  v16 = objc_msgSend(v8, "preConnectWithInterface:error:", v14, &obj);
  objc_storeStrong((id *)(v15 + 40), obj);
  if (v16)
  {
    v17 = *(void **)(a1 + 40);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v20 = *(id *)(v18 + 40);
    v19 = objc_msgSend(v17, "connectWithAddress4:address6:error:", v6, v4, &v20);
    objc_storeStrong((id *)(v18 + 40), v20);
    if (v19)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) |= 1u;
      objc_msgSend(*(id *)(a1 + 40), "startConnectTimeout:", *(double *)(a1 + 72));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    }
  }
LABEL_19:

  objc_autoreleasePoolPop(v2);
}

void sub_222B4CFB0(uint64_t a1)
{
  int v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *v7;
  id v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  int v13;
  _QWORD v14[4];
  _QWORD *v15;
  int v16;

  v2 = connect(*(_DWORD *)(a1 + 48), (const sockaddr *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"), objc_msgSend(*(id *)(a1 + 32), "length"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v2)
    {
      objc_msgSend(WeakRetained, "errnoErrorWithReason:", CFSTR("Error in connect() function"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v4[8];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_222B4D12C;
      block[3] = &unk_24EB297D8;
      v7 = v4;
      v13 = *(_DWORD *)(a1 + 52);
      v11 = v7;
      v12 = v5;
      v8 = v5;
      dispatch_async(v6, block);

    }
    else
    {
      v9 = WeakRetained[8];
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = sub_222B4D0F8;
      v14[3] = &unk_24EB28028;
      v15 = WeakRetained;
      v16 = *(_DWORD *)(a1 + 52);
      dispatch_async(v9, v14);
      v8 = v15;
    }

  }
}

void sub_222B4D0F8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "didConnect:", *(unsigned int *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4D12C(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "didNotConnect:error:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4D3DC(uint64_t a1)
{
  char v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "createReadAndWriteStream");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "otherError:", CFSTR("Error creating CFStreams"));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v3;
LABEL_6:
    v7 = (id)v4;
    objc_msgSend(v5, "closeWithError:");

    return;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "registerForStreamCallbacksIncludingReadWrite:", 0) & 1) == 0)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v6, "otherError:", CFSTR("Error in CFStreamSetClient"));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v6;
    goto LABEL_6;
  }
}

void sub_222B4D47C(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD **)(a1 + 32);
  if (v2 == v3[10])
  {
    v4 = objc_msgSend(v3, "addStreamsToRunLoop");
    v5 = *(void **)(a1 + 32);
    if ((v4 & 1) != 0)
    {
      if ((objc_msgSend(*(id *)(a1 + 32), "openStreams") & 1) != 0)
        return;
      v8 = *(void **)(a1 + 32);
      objc_msgSend(v8, "otherError:", CFSTR("Error creating CFStreams"));
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = v8;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "otherError:", CFSTR("Error in CFStreamScheduleWithRunLoop"));
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = v5;
    }
    v9 = (id)v6;
    objc_msgSend(v7, "closeWithError:");

  }
}

void sub_222B4D528(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didConnectToHost:port:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 64));
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 64);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B4D5C8;
  block[3] = &unk_24EB28B08;
  v5 = *(id *)(a1 + 56);
  dispatch_async(v3, block);

  objc_autoreleasePoolPop(v2);
}

void sub_222B4D5C8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_222B4D7A0(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "doConnectTimeout");

  objc_autoreleasePoolPop(v2);
}

void sub_222B4DB78(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socketDidDisconnect:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_222B4DC38(uint64_t a1)
{
  void *v2;
  _BYTE *v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_BYTE **)(a1 + 32);
  if ((v3[8] & 1) != 0)
    objc_msgSend(v3, "closeWithError:", 0);
  objc_autoreleasePoolPop(v2);
}

void sub_222B4DCCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 8);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(v3 + 8) = v4 | 0x24;
    objc_msgSend(*(id *)(a1 + 32), "maybeClose");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B4DD6C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 8);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(v3 + 8) = v4 | 0x44;
    objc_msgSend(*(id *)(a1 + 32), "maybeClose");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B4DE0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 8);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(v3 + 8) = v4 | 0x64;
    objc_msgSend(*(id *)(a1 + 32), "maybeClose");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B4E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B4E71C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 32) + 8) & 1) == 0;
  return result;
}

void sub_222B4E7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B4E80C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 8) & 2) != 0;
  return result;
}

void sub_222B4E928(uint64_t a1)
{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_DWORD **)(a1 + 32);
  if (v3[8] != -1)
  {
    objc_msgSend(v3, "connectedHostFromSocket4:");
    v4 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    goto LABEL_6;
  }
  if (v3[9] != -1)
  {
    objc_msgSend(v3, "connectedHostFromSocket6:");
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
LABEL_6:
  objc_autoreleasePoolPop(v2);
}

_DWORD *sub_222B4EA78(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  if (result[8] == -1)
  {
    if (result[9] == -1)
      return result;
    result = (_DWORD *)objc_msgSend(result, "connectedPortFromSocket6:");
  }
  else
  {
    result = (_DWORD *)objc_msgSend(result, "connectedPortFromSocket4:");
  }
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_WORD)result;
  return result;
}

void sub_222B4EBCC(uint64_t a1)
{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_DWORD **)(a1 + 32);
  if (v3[8] != -1)
  {
    objc_msgSend(v3, "localHostFromSocket4:");
    v4 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    goto LABEL_6;
  }
  if (v3[9] != -1)
  {
    objc_msgSend(v3, "localHostFromSocket6:");
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
LABEL_6:
  objc_autoreleasePoolPop(v2);
}

_DWORD *sub_222B4ED1C(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  if (result[8] == -1)
  {
    if (result[9] == -1)
      return result;
    result = (_DWORD *)objc_msgSend(result, "localPortFromSocket6:");
  }
  else
  {
    result = (_DWORD *)objc_msgSend(result, "localPortFromSocket4:");
  }
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_WORD)result;
  return result;
}

void sub_222B4F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B4F354(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  socklen_t v13;
  sockaddr v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 != -1)
  {
    *(_QWORD *)&v14.sa_len = 0;
    *(_QWORD *)&v14.sa_data[6] = 0;
    v13 = 16;
    if (!getpeername(v3, &v14, &v13))
    {
      v4 = objc_alloc(MEMORY[0x24BDBCE50]);
      v5 = objc_msgSend(v4, "initWithBytes:length:", &v14, v13);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
    v2 = *(_QWORD *)(a1 + 32);
  }
  v8 = *(_DWORD *)(v2 + 36);
  if (v8 != -1)
  {
    *(_QWORD *)&v14.sa_len = 0;
    *(_QWORD *)&v14.sa_data[6] = 0;
    v16 = 0;
    v15 = 0;
    v13 = 28;
    if (!getpeername(v8, &v14, &v13))
    {
      v9 = objc_alloc(MEMORY[0x24BDBCE50]);
      v10 = objc_msgSend(v9, "initWithBytes:length:", &v14, v13);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
  }
}

void sub_222B4F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B4F554(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  socklen_t v13;
  sockaddr v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 != -1)
  {
    *(_QWORD *)&v14.sa_len = 0;
    *(_QWORD *)&v14.sa_data[6] = 0;
    v13 = 16;
    if (!getsockname(v3, &v14, &v13))
    {
      v4 = objc_alloc(MEMORY[0x24BDBCE50]);
      v5 = objc_msgSend(v4, "initWithBytes:length:", &v14, v13);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
    v2 = *(_QWORD *)(a1 + 32);
  }
  v8 = *(_DWORD *)(v2 + 36);
  if (v8 != -1)
  {
    *(_QWORD *)&v14.sa_len = 0;
    *(_QWORD *)&v14.sa_data[6] = 0;
    v16 = 0;
    v15 = 0;
    v13 = 28;
    if (!getsockname(v8, &v14, &v13))
    {
      v9 = objc_alloc(MEMORY[0x24BDBCE50]);
      v10 = objc_msgSend(v9, "initWithBytes:length:", &v14, v13);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
  }
}

uint64_t sub_222B4F710(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 32) != -1;
  return result;
}

uint64_t sub_222B4F7E0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 36) != -1;
  return result;
}

uint64_t sub_222B4F8AC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 32) + 8) & 0x2000) != 0;
  return result;
}

void sub_222B4FE84(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  _QWORD *v4;
  uintptr_t data;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    data = dispatch_source_get_data(*((dispatch_source_t *)WeakRetained + 12));
    v4[20] = data;
    if (data)
      objc_msgSend(v4, "doReadData");
    else
      objc_msgSend(v4, "doReadEOF");
  }

  objc_autoreleasePoolPop(v2);
}

void sub_222B4FEE4(uint64_t a1)
{
  void *v2;
  _DWORD *WeakRetained;
  void *v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[2] |= 0x80u;
    objc_msgSend(WeakRetained, "doWriteData");
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_222B4FF34(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v2 = *(_DWORD *)(v1 + 24) - 1;
  *(_DWORD *)(v1 + 24) = v2;
  if (!v2)
    return close(*(_DWORD *)(result + 40));
  return result;
}

uint64_t sub_222B4FF58(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v2 = *(_DWORD *)(v1 + 24) - 1;
  *(_DWORD *)(v1 + 24) = v2;
  if (!v2)
    return close(*(_DWORD *)(result + 40));
  return result;
}

void sub_222B50190(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 8) & 5) == 1)
  {
    objc_msgSend(*(id *)(v3 + 128), "addObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueRead");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B502E0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 8) & 5) == 1)
  {
    objc_msgSend(*(id *)(v3 + 128), "addObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueRead");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B50480(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 8) & 5) == 1)
  {
    objc_msgSend(*(id *)(v3 + 128), "addObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueRead");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B505A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B505B8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t *v7;
  float v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 144)
    && (objc_opt_class(), result = objc_opt_isKindOfClass(), (result & 1) != 0))
  {
    v2 = *(_QWORD **)(v1[4] + 144);
    v3 = v2[3];
    v4 = v2[6];
    v5 = (_QWORD *)v1[6];
    if (v5)
      *v5 = v2[10];
    v6 = (unint64_t *)v1[7];
    if (v6)
      *v6 = v3;
    v7 = (unint64_t *)v1[8];
    if (v7)
      *v7 = v4;
    if (v4)
      v8 = (float)v3 / (float)v4;
    else
      v8 = 1.0;
  }
  else
  {
    v9 = (_QWORD *)v1[6];
    if (v9)
      *v9 = 0;
    v10 = (_QWORD *)v1[7];
    if (v10)
      *v10 = 0;
    v11 = (_QWORD *)v1[8];
    if (v11)
      *v11 = 0;
    v8 = NAN;
  }
  *(float *)(*(_QWORD *)(v1[5] + 8) + 24) = v8;
  return result;
}

void sub_222B509C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B509EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  size_t bufferSize;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(v2 + 240), "availableBytes") + v3;
  bufferSize = 0;
  result = SSLGetBufferedReadSize(*(SSLContextRef *)(*(_QWORD *)(a1 + 32) + 232), &bufferSize);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += bufferSize;
  return result;
}

void sub_222B513DC(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didReadPartialDataOfLength:tag:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_autoreleasePoolPop(v2);
}

void sub_222B515EC(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socketDidCloseReadStream:", *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B517D0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didReadData:withTag:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80));
  objc_autoreleasePoolPop(v2);
}

void sub_222B51948(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "doReadTimeout");

  objc_autoreleasePoolPop(v2);
}

void sub_222B51A70(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[6];

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:shouldTimeoutReadWithTag:elapsed:bytesDone:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), *(double *)(*(_QWORD *)(a1 + 48) + 40));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject **)(v3 + 64);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_222B51B00;
  v6[3] = &unk_24EB28188;
  v6[4] = v3;
  v6[5] = v5;
  dispatch_async(v4, v6);
  objc_autoreleasePoolPop(v2);
}

void sub_222B51B00(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "doReadTimeoutWithExtension:", *(double *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B51CB0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 8) & 5) == 1)
  {
    objc_msgSend(*(id *)(v3 + 136), "addObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueWrite");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B51DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B51DE8(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t *v6;
  float v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 152)
    && (objc_opt_class(), result = objc_opt_isKindOfClass(), (result & 1) != 0))
  {
    v2 = *(_QWORD *)(v1[4] + 152);
    v3 = *(_QWORD *)(v2 + 16);
    result = objc_msgSend(*(id *)(v2 + 8), "length");
    v4 = (_QWORD *)v1[6];
    if (v4)
      *v4 = *(_QWORD *)(*(_QWORD *)(v1[4] + 152) + 24);
    v5 = (unint64_t *)v1[7];
    if (v5)
      *v5 = v3;
    v6 = (uint64_t *)v1[8];
    if (v6)
      *v6 = result;
    v7 = (float)v3 / (float)(unint64_t)result;
  }
  else
  {
    v8 = (_QWORD *)v1[6];
    if (v8)
      *v8 = 0;
    v9 = (_QWORD *)v1[7];
    if (v9)
      *v9 = 0;
    v10 = (_QWORD *)v1[8];
    if (v10)
      *v10 = 0;
    v7 = NAN;
  }
  *(float *)(*(_QWORD *)(v1[5] + 8) + 24) = v7;
  return result;
}

void sub_222B524AC(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "maybeDequeueWrite");
  objc_autoreleasePoolPop(v2);
}

void sub_222B524DC(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didWritePartialDataOfLength:tag:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_autoreleasePoolPop(v2);
}

void sub_222B52610(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didWriteDataWithTag:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_222B52784(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "doWriteTimeout");

  objc_autoreleasePoolPop(v2);
}

void sub_222B528AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[6];

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:shouldTimeoutWriteWithTag:elapsed:bytesDone:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), *(double *)(*(_QWORD *)(a1 + 48) + 32));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject **)(v3 + 64);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_222B52938;
  v6[3] = &unk_24EB28188;
  v6[4] = v3;
  v6[5] = v5;
  dispatch_async(v4, v6);
  objc_autoreleasePoolPop(v2);
}

void sub_222B52938(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "doWriteTimeoutWithExtension:", *(double *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B52AE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 8) & 0x405) == 1)
  {
    objc_msgSend(*(id *)(v3 + 128), "addObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "addObject:", *(_QWORD *)(a1 + 40));
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) |= 0x400u;
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueRead");
    objc_msgSend(*(id *)(a1 + 32), "maybeDequeueWrite");
  }
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_222B53940(void *a1, uint64_t a2, uint64_t a3)
{
  const void **v5;
  uint64_t v6;
  void *v8;
  void *v9;

  v5 = a1;
  if (!dispatch_get_specific(v5[33]))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "OSStatus SSLReadFunction(SSLConnectionRef, void *, size_t *)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("GCDAsyncSocket.m"), 6100, CFSTR("What the deuce?"));

  }
  v6 = objc_msgSend(v5, "sslReadWithBuffer:length:", a2, a3);

  return v6;
}

uint64_t sub_222B539FC(void *a1, uint64_t a2, uint64_t a3)
{
  const void **v5;
  uint64_t v6;
  void *v8;
  void *v9;

  v5 = a1;
  if (!dispatch_get_specific(v5[33]))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "OSStatus SSLWriteFunction(SSLConnectionRef, const void *, size_t *)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("GCDAsyncSocket.m"), 6109, CFSTR("What the deuce?"));

  }
  v6 = objc_msgSend(v5, "sslWriteWithBuffer:length:", a2, a3);

  return v6;
}

void sub_222B53DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,char a27)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_222B53DF8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socketDidSecure:", *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B53E28(uint64_t a1, char a2)
{
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  id v7;
  int v8;
  char v9;

  v4 = (void *)MEMORY[0x227679C5C]();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B53ED8;
  block[3] = &unk_24EB299B8;
  v5 = *(NSObject **)(a1 + 32);
  block[4] = *(_QWORD *)(a1 + 40);
  objc_copyWeak(&v7, (id *)(a1 + 48));
  v9 = a2;
  v8 = *(_DWORD *)(a1 + 56);
  dispatch_async(v5, block);
  objc_destroyWeak(&v7);
  objc_autoreleasePoolPop(v4);
}

void sub_222B53ED8(uint64_t a1)
{
  void *v2;
  const void *v3;
  id WeakRetained;
  void *v5;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "ssl_shouldTrustPeer:stateIndex:", *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48));

  objc_autoreleasePoolPop(v2);
}

void sub_222B53F4C(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socket:didReceiveTrust:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(_QWORD *)(a1 + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_222B540EC(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x227679C5C]();
  objc_msgSend(*(id *)(a1 + 32), "socketDidSecure:", *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_222B543E8()
{
  dispatch_queue_t v0;
  void *v1;

  qword_25576FAB0 = 0;
  v0 = dispatch_queue_create("_DT_GCDAsyncSocket-CFStreamThreadSetup", 0);
  v1 = (void *)qword_25576FAB8;
  qword_25576FAB8 = (uint64_t)v0;

}

void sub_222B5441C(uint64_t a1)
{
  void *v2;
  uint64_t v4;
  void *v5;

  v2 = (void *)MEMORY[0x227679C5C]();
  if (!qword_25576FAB0++)
  {
    v4 = objc_msgSend(objc_alloc(MEMORY[0x24BDD17F0]), "initWithTarget:selector:object:", *(_QWORD *)(a1 + 32), sel_cfstreamThread, 0);
    v5 = (void *)qword_25576FAC0;
    qword_25576FAC0 = v4;

    objc_msgSend((id)qword_25576FAC0, "start");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B544C4()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v0 = (void *)MEMORY[0x227679C5C]();
  if (qword_25576FAB0)
  {
    if (!--qword_25576FAB0)
    {
      objc_msgSend((id)qword_25576FAC0, "cancel");
      v1 = qword_25576FAC0;
      objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      +[_DT_GCDAsyncSocket performSelector:onThread:withObject:waitUntilDone:](_DT_GCDAsyncSocket, "performSelector:onThread:withObject:waitUntilDone:", sel_ignore_, v1, v2, 0);

      v3 = (void *)qword_25576FAC0;
      qword_25576FAC0 = 0;

    }
  }
  objc_autoreleasePoolPop(v0);
}

void sub_222B54ACC(__CFReadStream *a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  id v8;
  CFErrorRef v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  _QWORD *v13;
  id v14;
  __CFReadStream *v15;
  _QWORD block[4];
  _QWORD *v17;
  __CFReadStream *v18;

  v5 = a3;
  v6 = v5;
  if (a2 == 2)
  {
    v7 = v5[8];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222B55B40;
    block[3] = &unk_24EB28188;
    v17 = v5;
    v18 = a1;
    dispatch_async(v7, block);
    v8 = v17;
  }
  else
  {
    v9 = CFReadStreamCopyError(a1);
    v10 = v9;
    if (a2 == 16 && !v9)
    {
      objc_msgSend(v6, "connectionClosedError");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v11 = v6[8];
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = sub_222B55BBC;
    v12[3] = &unk_24EB29990;
    v14 = v10;
    v15 = a1;
    v13 = v6;
    v8 = v10;
    dispatch_async(v11, v12);

  }
}

void sub_222B54BE8(__CFWriteStream *a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  id v8;
  CFErrorRef v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  _QWORD *v13;
  id v14;
  __CFWriteStream *v15;
  _QWORD block[4];
  _QWORD *v17;
  __CFWriteStream *v18;

  v5 = a3;
  v6 = v5;
  if (a2 == 4)
  {
    v7 = v5[8];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222B55C18;
    block[3] = &unk_24EB28188;
    v17 = v5;
    v18 = a1;
    dispatch_async(v7, block);
    v8 = v17;
  }
  else
  {
    v9 = CFWriteStreamCopyError(a1);
    v10 = v9;
    if (a2 == 16 && !v9)
    {
      objc_msgSend(v6, "connectionClosedError");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v11 = v6[8];
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = sub_222B55C94;
    v12[3] = &unk_24EB29990;
    v14 = v10;
    v15 = a1;
    v13 = v6;
    v8 = v10;
    dispatch_async(v11, v12);

  }
}

uint64_t sub_222B550BC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_WORD *)(*(_QWORD *)(result + 32) + 12) & 8) == 0;
  return result;
}

uint64_t sub_222B55168(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 32) + 12) = *(_WORD *)(*(_QWORD *)(result + 32) + 12) & 0xFFF7 | (8 * (*(_BYTE *)(result + 40) == 0));
  return result;
}

void sub_222B55B40(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __CFReadStream *v4;
  int v5;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(__CFReadStream **)(v3 + 216);
  if (v4 == *(__CFReadStream **)(a1 + 40))
  {
    v5 = *(_DWORD *)(v3 + 8);
    if ((~v5 & 0x1800) != 0)
    {
      *(_DWORD *)(v3 + 8) = v5 | 0x80000;
      objc_msgSend(*(id *)(a1 + 32), "doReadData");
    }
    else if (CFReadStreamHasBytesAvailable(v4))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) |= 0x80000u;
      objc_msgSend(*(id *)(a1 + 32), "cf_finishSSLHandshake");
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B55BBC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = a1[4];
  if (*(_QWORD *)(v3 + 216) == a1[6])
  {
    v4 = a1[5];
    if ((~*(_DWORD *)(v3 + 8) & 0x1800) != 0)
      objc_msgSend((id)v3, "closeWithError:", v4);
    else
      objc_msgSend((id)v3, "cf_abortSSLHandshake:", v4);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B55C18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __CFWriteStream *v4;
  int v5;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(__CFWriteStream **)(v3 + 224);
  if (v4 == *(__CFWriteStream **)(a1 + 40))
  {
    v5 = *(_DWORD *)(v3 + 8);
    if ((~v5 & 0x1800) != 0)
    {
      *(_DWORD *)(v3 + 8) = v5 | 0x80;
      objc_msgSend(*(id *)(a1 + 32), "doWriteData");
    }
    else if (CFWriteStreamCanAcceptBytes(v4))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) |= 0x80u;
      objc_msgSend(*(id *)(a1 + 32), "cf_finishSSLHandshake");
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B55C94(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x227679C5C]();
  v3 = a1[4];
  if (*(_QWORD *)(v3 + 224) == a1[6])
  {
    v4 = a1[5];
    if ((~*(_DWORD *)(v3 + 8) & 0x1800) != 0)
      objc_msgSend((id)v3, "closeWithError:", v4);
    else
      objc_msgSend((id)v3, "cf_abortSSLHandshake:", v4);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_222B57D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t **sub_222B57E3C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x38uLL);
    v10[2] = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v10 + 6) = v11;
    sub_222B57F00(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_222B57F00(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_222B57F54(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_222B57F54(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_222B580EC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_222B580EC(a1, *a2);
    sub_222B580EC(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_222B581C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B5828C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B5831C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;

  a10.super_class = (Class)DTKPSession;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

id sub_222B583A8(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0FC8];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("DTKPSession"), a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_222B58474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B5879C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_222B587E8(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (dword_24EB29A68[v1] != a1)
  {
    v1 += 4;
    if (v1 == 20)
      sub_222BC667C();
  }
  return *(_QWORD *)&dword_24EB29A68[v1 + 2];
}

void sub_222B58998(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B589E0(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = v3;
  if (a2)
  {
    *a2 = objc_retainAutorelease(v3);
  }
  else
  {
    v5 = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "localizedDescription");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      sub_222BC662C(v6, (uint64_t)v8, v7);
    }

  }
}

void sub_222B58A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B58C0C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B58E10(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B58F4C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_222B5A4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B5A518(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B5A528(uint64_t a1)
{

}

void sub_222B5A530(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_222B5A544(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_222B5A558(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(a2, "uuid");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 4
                                                         * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)) = objc_msgSend(v4, "intValue");

  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 4
                                                         * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)) = -1;
    NSLog(CFSTR("A trigger UUID (%@) was configured but doesn't exist in this trace."), v5);
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

}

void sub_222B5A850(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = objc_alloc(MEMORY[0x24BDBCE50]);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = sub_222B5A924;
  v8[3] = &unk_24EB29B30;
  v6 = *(id *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 64);
  v7 = (void *)objc_msgSend(v3, "initWithBytesNoCopy:length:deallocator:", v4, v5, v8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "write:error:", v7, *(_QWORD *)(a1 + 72));

}

uint64_t sub_222B5A924(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1[5] + 16))();
  *(_QWORD *)(a1[4] + 24) += a1[6];
  return result;
}

uint64_t sub_222B5AA1C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "write:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  result = objc_msgSend(*(id *)(a1 + 40), "length");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) += result;
  return result;
}

uint64_t sub_222B5AB20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B5AB30(uint64_t a1)
{

}

void sub_222B5AB38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "createNextStream:", 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
}

uint64_t sub_222B5AC28(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  return result;
}

void sub_222B5AE34(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  _BYTE v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (sub_222B5AF1C() && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = (void *)objc_opt_class();
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v6 = 138412546;
    *(_QWORD *)&v6[4] = v2;
    *(_WORD *)&v6[12] = 2048;
    *(_QWORD *)&v6[14] = v3;
    v4 = v2;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%@ channel for (service %p) disconnected: releasing claims on assertions", v6, 0x16u);

  }
  +[DTAssertionManager sharedInstance](DTAssertionManager, "sharedInstance", *(_OWORD *)v6, *(_QWORD *)&v6[16], v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeClaimsHeldByClient:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_222B5AF1C()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("DTProcessControlServiceLog"));

  return v1;
}

void sub_222B5AFF8(uint64_t a1)
{
  dispatch_source_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  _QWORD v10[5];
  id v11;
  _QWORD handler[4];
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t buf[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "containsObject:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v2 = dispatch_source_create(MEMORY[0x24BDAC9F8], *(int *)(a1 + 48), 0x4000000uLL, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 40));
    if (v2)
    {
      v3 = MEMORY[0x24BDAC760];
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 3221225472;
      handler[2] = sub_222B5B1F4;
      handler[3] = &unk_24EB296C8;
      v4 = *(id *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 32);
      v13 = v4;
      v14 = v5;
      v6 = v2;
      v15 = v6;
      dispatch_source_set_event_handler(v6, handler);
      v10[0] = v3;
      v10[1] = 3221225472;
      v10[2] = sub_222B5B520;
      v10[3] = &unk_24EB28350;
      v7 = *(void **)(a1 + 40);
      v10[4] = *(_QWORD *)(a1 + 32);
      v11 = v7;
      dispatch_source_set_cancel_handler(v6, v10);
      dispatch_resume(v6);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addObject:", *(_QWORD *)(a1 + 40));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addObject:", v6);
      +[DTAssertionManager sharedInstance](DTAssertionManager, "sharedInstance");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "takeAssertionsForPid:onBehalfOfClient:withOptions:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32), 0);

    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v9 = objc_msgSend(*(id *)(a1 + 40), "intValue");
      *(_DWORD *)buf = 67109120;
      v17 = v9;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to start observing process with pid %i", buf, 8u);
    }

  }
}

void sub_222B5B1F4(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  int8x16_t v14;
  _QWORD block[4];
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "intValue");
    *(_DWORD *)buf = 67109120;
    LODWORD(v20) = v2;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Process with pid %i exited", buf, 8u);
  }
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:objectArguments:", sel_pidDiedCallback_, *(_QWORD *)(a1 + 32), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_connection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "remoteCapabilityVersion:", CFSTR("com.apple.instruments.client.processcontrol.capability.terminationCallback"));

  if (v6 >= 1)
  {
    v17 = 0;
    v18 = 0;
    if (!dispatch_source_get_extended_data())
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "-[DTProcessControlService startObservingPid:]_block_invoke");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("DTProcessControlService.m"), 109, CFSTR("dispatch_source_get_extended_data returned zero"));

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", BYTE1(v18));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543618;
      v20 = v7;
      v21 = 2114;
      v22 = 0;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Exit code: %{public}@, crashing signal: %{public}@", buf, 0x16u);
    }
    objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:typesAndArguments:", sel_processWithPID_terminatedWithExitCode_orCrashingSignal_, 11, *(_QWORD *)(a1 + 32), 11, v7, 11, 0, 0);
    v8 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v8;
  }
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendControlAsync:replyHandler:", v3, 0);

  objc_msgSend(*(id *)(a1 + 40), "cleanupPid:", objc_msgSend(*(id *)(a1 + 32), "intValue"));
  dispatch_get_global_queue(21, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B5B514;
  block[3] = &unk_24EB28350;
  v14 = *(int8x16_t *)(a1 + 32);
  v11 = (id)v14.i64[0];
  v16 = vextq_s8(v14, v14, 8uLL);
  dispatch_async(v10, block);

}

uint64_t sub_222B5B514(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_stopObservingPid_);
}

void sub_222B5B520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "indexOfObject:", *(_QWORD *)(a1 + 40));
  if (v2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = v2;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectAtIndex:", v2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectAtIndex:", v3);
    +[DTAssertionManager sharedInstance](DTAssertionManager, "sharedInstance");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeAssertionsForPid:onBehalfOfClient:", objc_msgSend(*(id *)(a1 + 40), "intValue"), *(_QWORD *)(a1 + 32));

  }
}

id DTProcessControlEventUnarchive(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = (void *)MEMORY[0x24BDD1620];
  v2 = (void *)MEMORY[0x24BDBCF20];
  v3 = a1;
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v4, v5, v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "unarchivedObjectOfClasses:fromData:error:", v7, v3, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_222B5C2C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *MEMORY[0x24BDD1398];
    v8[0] = *MEMORY[0x24BDD0FC8];
    v8[1] = v5;
    v9[0] = CFSTR("Failed to insert view debugging libraries");
    v9[1] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.instruments"), -1, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  mach_port_deallocate(*MEMORY[0x24BDAEC58], *(_DWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", 0, v7);

}

void sub_222B5C718(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  close(*(_DWORD *)(a1 + 40));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 44));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeObjectForKey:", v5);

  }
}

uint64_t sub_222B5C7CC(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_handleRedirectionIterationForFileDescriptor_forPid_withDispatchSource_);
}

uint64_t sub_222B5C7DC(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_handleRedirectionIterationForFileDescriptor_forPid_withDispatchSource_);
}

void sub_222B5C7EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, v4);

  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
}

void sub_222B5C910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  uint32_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  int v14;
  int *v15;
  char *v16;
  void *v17;
  int v18;
  int *v19;
  char *v20;
  int v21;
  _BYTE v22[18];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = open((const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), 0x1000000);
  if ((v2 & 0x80000000) != 0)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return;
    v11 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
    v12 = __error();
    v13 = strerror(*v12);
    v21 = 136315394;
    *(_QWORD *)v22 = v11;
    *(_WORD *)&v22[8] = 2080;
    *(_QWORD *)&v22[10] = v13;
    v8 = MEMORY[0x24BDACB70];
    v9 = "Failed to open the I/O redirection file '%s' for reading: %s";
    v10 = 22;
    goto LABEL_10;
  }
  v3 = v2;
  v4 = malloc_type_malloc(0x2000uLL, 0xFDA0DC50uLL);
  while (objc_msgSend(*(id *)(a1 + 40), "maybeRedirectFromFileDescriptor:fromPid:withScratchBuffer:ofByteLength:", v3, *(unsigned int *)(a1 + 56), v4, 0x2000)- 5 < 0xFFFFFFFE);
  free(v4);
  if (close(v3))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return;
    v5 = *(_DWORD *)(a1 + 56);
    v6 = __error();
    v7 = strerror(*v6);
    v21 = 67109378;
    *(_DWORD *)v22 = v5;
    *(_WORD *)&v22[4] = 2080;
    *(_QWORD *)&v22[6] = v7;
    v8 = MEMORY[0x24BDACB70];
    v9 = "failed to close I/O redirection read-side file for pid %d: %s\n";
    goto LABEL_7;
  }
  if (unlink((const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"))
    && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v14 = *(_DWORD *)(a1 + 56);
    v15 = __error();
    v16 = strerror(*v15);
    v21 = 67109378;
    *(_DWORD *)v22 = v14;
    *(_WORD *)&v22[4] = 2080;
    *(_QWORD *)&v22[6] = v16;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed to remove I/O redirection read-side file for pid %d: %s\n", (uint8_t *)&v21, 0x12u);
  }
  v17 = *(void **)(a1 + 48);
  if (v17
    && rmdir((const char *)objc_msgSend(objc_retainAutorelease(v17), "UTF8String"))
    && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v18 = *(_DWORD *)(a1 + 56);
    v19 = __error();
    v20 = strerror(*v19);
    v21 = 67109378;
    *(_DWORD *)v22 = v18;
    *(_WORD *)&v22[4] = 2080;
    *(_QWORD *)&v22[6] = v20;
    v8 = MEMORY[0x24BDACB70];
    v9 = "failed to remove I/O redirection read-side file directory for pid %d: %s\n";
LABEL_7:
    v10 = 18;
LABEL_10:
    _os_log_impl(&dword_222B17000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v21, v10);
  }
}

void DTProcessControlOptionsSetEvent(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("launchevent"));

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("DTProcessControlOptionsSetEvent"), CFSTR("Event is not an NSDictionary or a DTProcessControlEvent. It is a '%@'."), objc_opt_class());
  }

}

id DTProcessControlOptionsGetEvent(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("launchevent"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    DTProcessControlEventUnarchive(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_222B5CDA8()
{
  objc_end_catch();
  JUMPOUT(0x222B5CDB0);
}

void DTProcessControlSendEventToPid(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a1;
  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x24BE2A960];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "messageWithSelector:objectArguments:", sel_sendProcessControlEvent_toPid_, v6, v8, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "sendControlAsync:replyHandler:", v9, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("DTProcessControlSendEventToPid"), CFSTR("Event is not an NSDictionary or a DTProcessControlEvent. It is a '%@'."), objc_opt_class());
  }

}

void sub_222B5D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B5D354(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B5D364(uint64_t a1)
{

}

void sub_222B5D36C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_222B5D380(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a2;
  v7 = v6;
  if (a4)
  {
    objc_msgSend(a4, "instantiateServiceWithChannel:", v6);
  }
  else
  {
    NSLog(CFSTR("Could not create service named %@"), a3);
    objc_msgSend(v7, "cancel");
  }

}

void sub_222B5D3E4(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315138;
    v5 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "publishing services in image path %s", (uint8_t *)&v4, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "publishServicesInImagePath:", v3);

}

void sub_222B5DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

void sub_222B5DAAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FAF0;
  qword_25576FAF0 = v0;

  v2 = objc_opt_new();
  v3 = (void *)qword_25576FAF8;
  qword_25576FAF8 = v2;

}

void sub_222B5DAF4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 48), "_taskInvalid:forPid:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "intValue"), *(unsigned int *)(a1 + 56));
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
}

void sub_222B5DC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_222B5DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_222B5E024(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_222B5E050(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (v3)
  {
    v6 = WeakRetained[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_222BC67AC(v6, v3);
  }

}

uint64_t sub_222B5E0B8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t result;

  if ((a2 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "clearStatusBar");

  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_222B5E1E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "statusBarAssertion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 40);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B5E298;
  v4[3] = &unk_24EB28000;
  objc_copyWeak(&v5, (id *)(a1 + 48));
  objc_msgSend(v2, "acquireWithHandler:invalidationHandler:", v3, v4);

  objc_destroyWeak(&v5);
}

void sub_222B5E284(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_222B5E298(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_222BC6838(v2);
  objc_msgSend(WeakRetained, "clearStatusBar");

}

id DTSKServiceErrorWithDescription(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v10 = (objc_class *)MEMORY[0x24BDD17C8];
  v11 = a2;
  v12 = (__CFString *)objc_msgSend([v10 alloc], "initWithFormat:arguments:", v11, &a9);

  v13 = &stru_24EB2CF78;
  if (v12)
    v13 = v12;
  v14 = v13;

  v15 = (void *)MEMORY[0x24BDD1540];
  v19 = *MEMORY[0x24BDD0FC8];
  v20[0] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.storekit.service"), a1, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id DTSKServiceErrorByAppendingDescription(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  id v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v10 = (objc_class *)MEMORY[0x24BDD17C8];
  v11 = a2;
  v12 = a1;
  v13 = (__CFString *)objc_msgSend([v10 alloc], "initWithFormat:arguments:", v11, &a9);

  v14 = &stru_24EB2CF78;
  if (v13)
    v14 = v13;
  v15 = v14;

  v16 = (void *)MEMORY[0x24BDD1540];
  objc_msgSend(v12, "domain");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v12, "code");
  v24 = *MEMORY[0x24BDD0FC8];
  objc_msgSend(v12, "localizedDescription");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v19, "stringByAppendingString:", v15);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v20;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "errorWithDomain:code:userInfo:", v17, v18, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

void DTKPSetupLogging()
{
  if (qword_25576FB08 != -1)
    dispatch_once(&qword_25576FB08, &unk_24EB27830);
}

void sub_222B5EB2C()
{
  dispatch_queue_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  os_log_t v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];

  v0 = dispatch_queue_create("com.apple.dt.Instruments.DTKP.logQueue", 0);
  v1 = (void *)sDTKPLogQueue;
  sDTKPLogQueue = (uint64_t)v0;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "integerForKey:", CFSTR("DTKPLogLevel"));

  if (v3 >= 1)
  {
    v4 = os_log_create("com.apple.dt.Instruments", "DTKP");
    v5 = (void *)sDTKPLogClient;
    sDTKPLogClient = (uint64_t)v4;

    v6 = sDTKPLogClient;
    if (os_log_type_enabled((os_log_t)sDTKPLogClient, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_222B17000, v6, OS_LOG_TYPE_INFO, "DTKPLogging: Enabled", v7, 2u);
    }
  }
}

uint64_t DTKPSetErrorAndOrLogWithFileAndLine(int a1, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD block[4];
  id v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v9 = a5;
  if (!a3)
    goto LABEL_3;
  v10 = (void *)MEMORY[0x24BDD1540];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x24BDD0FC8];
  v23[0] = v9;
  v13 = *MEMORY[0x24BDD0FD8];
  v22[0] = v12;
  v22[1] = v13;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Error #%d (%s): %@"), a4, DTKPGetConstantNameOfStatusCode(a4), v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, v22, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "errorWithDomain:code:userInfo:", v11, (int)a4, v15);
  *a3 = (id)objc_claimAutoreleasedReturnValue();

  if (a1)
  {
LABEL_3:
    v16 = sDTKPLogQueue;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222B5EDA8;
    block[3] = &unk_24EB281D0;
    v20 = a2;
    v21 = a4;
    v19 = v9;
    dispatch_async(v16, block);

  }
  return a4;
}

void sub_222B5EDA8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)sDTKPLogClient;
  if (os_log_type_enabled((os_log_t)sDTKPLogClient, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_DWORD *)(a1 + 48);
    v5 = v2;
    v6 = DTKPGetConstantNameOfStatusCode(v4);
    v7 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
    v8 = 136315906;
    v9 = v3;
    v10 = 1024;
    v11 = v4;
    v12 = 2080;
    v13 = v6;
    v14 = 2080;
    v15 = v7;
    _os_log_impl(&dword_222B17000, v5, OS_LOG_TYPE_INFO, "%s: Error #%d (%s): %s", (uint8_t *)&v8, 0x26u);

  }
}

void sub_222B5F018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B5F034(uint64_t a1)
{
  id v2;
  id WeakRetained;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = 138412290;
    v5 = (id)objc_opt_class();
    v2 = v5;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%@: DTX channel disconnected.", (uint8_t *)&v4, 0xCu);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_disconnectServiceConnection");

}

void sub_222B5F2E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v11 = 138412546;
    *(_QWORD *)&v11[4] = objc_opt_class();
    *(_WORD *)&v11[12] = 2112;
    *(_QWORD *)&v11[14] = v6;
    v7 = *(id *)&v11[4];
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%@: available condition inducers request failed with error: %@", v11, 0x16u);

  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v8 = (void *)objc_opt_class();
    v9 = v8;
    v10 = objc_msgSend(v5, "count");
    *(_DWORD *)v11 = 138412546;
    *(_QWORD *)&v11[4] = v8;
    *(_WORD *)&v11[12] = 2048;
    *(_QWORD *)&v11[14] = v10;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%@: Found %lu available condition inducers", v11, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 40), "invokeCompletionWithReturnValue:error:", v5, v6, *(_OWORD *)v11, *(_QWORD *)&v11[16], v12);

}

void sub_222B5F584(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _BYTE v15[22];
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)&v15[4] = objc_opt_class();
      v7 = *(id *)&v15[4];
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%@: active condition disabled successfully", v15, 0xCu);

    }
  }
  else
  {
    if (!v5)
    {
      v8 = (void *)MEMORY[0x24BDD1540];
      v16 = *MEMORY[0x24BDD0FC8];
      v17[0] = CFSTR("There was a problem disabling the condition inducer.");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 4, v9);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v10 = (void *)objc_opt_class();
      v11 = v10;
      objc_msgSend(v6, "localizedDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v15 = 138412546;
      *(_QWORD *)&v15[4] = v10;
      *(_WORD *)&v15[12] = 2112;
      *(_QWORD *)&v15[14] = v12;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%@: failed to disable active condition with error: %@", v15, 0x16u);

    }
  }
  v13 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a2, *(_OWORD *)v15);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "invokeCompletionWithReturnValue:error:", v14, v6);

}

void sub_222B5F8CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE v18[24];
  void *v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v7 = (void *)objc_opt_class();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v18 = 138412546;
      *(_QWORD *)&v18[4] = v7;
      *(_WORD *)&v18[12] = 2112;
      *(_QWORD *)&v18[14] = v8;
      v9 = v7;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%@: condition disabled successfully: %@", v18, 0x16u);

    }
  }
  else
  {
    if (!v5)
    {
      v10 = (void *)MEMORY[0x24BDD1540];
      v20 = *MEMORY[0x24BDD0FC8];
      v21[0] = CFSTR("There was a problem disabling the condition inducer.");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 4, v11);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_opt_class();
      v13 = *(_QWORD *)(a1 + 40);
      v14 = v12;
      objc_msgSend(v6, "localizedDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v18 = 138412802;
      *(_QWORD *)&v18[4] = v12;
      *(_WORD *)&v18[12] = 2112;
      *(_QWORD *)&v18[14] = v13;
      *(_WORD *)&v18[22] = 2112;
      v19 = v15;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%@: failed to disable %@ with error: %@", v18, 0x20u);

    }
  }
  v16 = *(void **)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a2, *(_OWORD *)v18, *(_QWORD *)&v18[16]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "invokeCompletionWithReturnValue:error:", v17, v6);

}

void sub_222B5FC70(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE v20[24];
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v7 = (void *)objc_opt_class();
      v8 = a1[5];
      v9 = a1[6];
      *(_DWORD *)v20 = 138412802;
      *(_QWORD *)&v20[4] = v7;
      *(_WORD *)&v20[12] = 2112;
      *(_QWORD *)&v20[14] = v8;
      *(_WORD *)&v20[22] = 2112;
      v21 = v9;
      v10 = v7;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%@: condition enabled successfully: %@ / %@", v20, 0x20u);

    }
  }
  else
  {
    if (!v5)
    {
      v11 = (void *)MEMORY[0x24BDD1540];
      v24 = *MEMORY[0x24BDD0FC8];
      v25[0] = CFSTR("There was a problem enabling the condition inducer.");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 3, v12);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_opt_class();
      v14 = a1[5];
      v15 = a1[6];
      v16 = v13;
      objc_msgSend(v6, "localizedDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v20 = 138413058;
      *(_QWORD *)&v20[4] = v13;
      *(_WORD *)&v20[12] = 2112;
      *(_QWORD *)&v20[14] = v14;
      *(_WORD *)&v20[22] = 2112;
      v21 = v15;
      v22 = 2112;
      v23 = v17;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%@: failed to enable %@ / %@ with error: %@", v20, 0x2Au);

    }
  }
  v18 = (void *)a1[7];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a2, *(_OWORD *)v20, *(_QWORD *)&v20[16], v21);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "invokeCompletionWithReturnValue:error:", v19, v6);

}

uint64_t sub_222B5FFFC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_222B601A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!v5 && (a2 & 1) == 0)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v9 = *MEMORY[0x24BDD0FC8];
    v10[0] = CFSTR("There was a problem enabling the condition inducer.");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 3, v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);

}

void sub_222B60408(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!v5 && (a2 & 1) == 0)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v9 = *MEMORY[0x24BDD0FC8];
    v10[0] = CFSTR("There was a problem disabling the condition inducer.");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 4, v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);

}

void sub_222B60658(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!v5 && (a2 & 1) == 0)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v9 = *MEMORY[0x24BDD0FC8];
    v10[0] = CFSTR("There was a problem disabling the condition inducer.");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("DTConditionInducerService"), 4, v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);

}

void sub_222B61B6C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BE80CD8];
  v4 = a2;
  objc_msgSend(v3, "predicateMatchingProcessTypeApplication");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setPredicates:", v6);

  objc_msgSend(MEMORY[0x24BE80CF8], "descriptor");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setStateDescriptor:", v7);

  objc_msgSend(v4, "setServiceClass:", 25);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = sub_222B61C8C;
  v8[3] = &unk_24EB29E20;
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v4, "setUpdateHandler:", v8);

}

void sub_222B61C8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  _QWORD v25[6];

  v25[5] = *MEMORY[0x24BDAC8D0];
  v24[0] = CFSTR("pid");
  v6 = (void *)MEMORY[0x24BDD16E0];
  v7 = a4;
  v8 = a3;
  objc_msgSend(v6, "numberWithInt:", objc_msgSend(v8, "pid"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v9;
  v24[1] = CFSTR("state_description");
  objc_msgSend(v7, "state");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "taskState") - 1;
  v12 = CFSTR("Unknown");
  if (v11 <= 3u)
    v12 = off_24EB29E68[(char)v11];
  v25[1] = v12;
  v24[2] = CFSTR("mach_absolute_time");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", mach_absolute_time());
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v25[2] = v13;
  v24[3] = CFSTR("appName");
  objc_msgSend(v8, "name");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (v14)
    v16 = (const __CFString *)v14;
  else
    v16 = CFSTR("Unknown");
  v25[3] = v16;
  v24[4] = CFSTR("execName");
  objc_msgSend(v8, "bundle");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "path");
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)v18;
  if (v18)
    v20 = (const __CFString *)v18;
  else
    v20 = CFSTR("Unknown");
  v25[4] = v20;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, v24, 5);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:objectArguments:", sel_applicationStateNotification_, v21, 0, v24[0]);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "channel");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "sendControlAsync:replyHandler:", v22, 0);

}

uint64_t sub_222B62034()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB10;
  qword_25576FB10 = v0;

  return objc_msgSend((id)qword_25576FB10, "addObject:", CFSTR("com.apple.safetykit.severe-vehicular-crash-simulated"));
}

void sub_222B622F8(uint64_t a1)
{
  ssize_t v2;
  int64_t v3;
  int64_t v4;
  _DWORD *v5;
  int v6;
  void *v7;
  _BYTE v8[53784];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = recv(*(_DWORD *)(a1 + 48), v8, 0xD218uLL, 0);
  if (v2 == -1)
  {
    NSLog(CFSTR("Error encountered when receiving memory event data from the event socket."));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  }
  else
  {
    v3 = v2;
    if (v2 >= 1)
    {
      v4 = 0;
      v5 = v8;
      do
      {
        if (v4 + *(unsigned int *)&v8[v4] > v3)
          return;
        if (v5[1] == 1 && v5[2] == 3 && v5[3] == 3)
        {
          v6 = v5[5];
          if ((v6 - 1) < 3)
          {
            v7 = *(void **)(a1 + 40);
LABEL_12:
            objc_msgSend(v7, "_memoryNotification:pid:");
            goto LABEL_13;
          }
          if (v6 == 4)
          {
            v7 = *(void **)(a1 + 40);
            goto LABEL_12;
          }
        }
LABEL_13:
        v4 += *(unsigned int *)&v8[v4];
        v5 = &v8[v4];
      }
      while (v4 < v3);
    }
  }
}

uint64_t sub_222B62424(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_222B629A4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B62B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B62B38(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleHARExternalNotificationChange");

}

uint64_t sub_222B62DA0(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  v3 = dispatch_walltime(0, 55000000000);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    sub_222BC6998();
  return objc_msgSend(*(id *)(a1 + 32), "updateHARLogPrefsWithIsEnabled:", 1);
}

void sub_222B6388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B638C8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_handleStopOfHARRecordingCausedByUser");
    WeakRetained = v2;
  }

}

uint64_t sub_222B643C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 16))();
}

void sub_222B647AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B647C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B647D4(uint64_t a1)
{

}

void sub_222B647DC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

__CFString *sub_222B64B64()
{
  const __CFUUID *v0;
  __CFString *v1;

  v0 = CFUUIDCreate(0);
  v1 = (__CFString *)CFUUIDCreateString(0, v0);
  CFRelease(v0);
  return v1;
}

void sub_222B64D54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = a2;
  v7 = (id)objc_msgSend(a3, "copyWithZone:", v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", v7, v6);

}

uint64_t sub_222B64F30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_222B65034(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_222B65628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B658F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_222B65DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_222B65F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B660A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B66220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B66344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B664B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_222B664CC(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("USCIndex"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntValue");

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("File"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, void *, void *))(v6 + 16))(v6, v4, v7, v5);

}

void sub_222B66574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_222B66628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_222B66644(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("SourceIndex"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntValue");

  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("BufferIndex"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "unsignedIntValue");

  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("File"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void *))(v8 + 16))(v8, v4, v6, v9, v7);

}

void sub_222B6671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  _Unwind_Resume(a1);
}

void sub_222B668EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B66D7C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_opt_new();
  objc_msgSend(v6, "setKind:", 7);
  objc_msgSend(v6, "setRunningMetadata:", v3);

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithObject:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendMessage:", v5);

}

void sub_222B66F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B670E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_222B67488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B676CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B67814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B678A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B67CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_222B68170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

_QWORD *sub_222B6820C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_222B68384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B68394(uint64_t a1)
{
  id *v2;
  dispatch_object_t *WeakRetained;
  dispatch_object_t *v4;
  NSObject *v5;
  dispatch_source_t v6;
  dispatch_object_t v7;
  unsigned __int8 *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;
  NSObject *v15;
  dispatch_time_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  _QWORD handler[4];
  id v23;

  v2 = (id *)(a1 + 40);
  WeakRetained = (dispatch_object_t *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[1];
    if (v5)
    {
      v6 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v5);
      v7 = v4[2];
      v4[2] = v6;

      v8 = *(unsigned __int8 **)(a1 + 32);
      v9 = v8[66];
      objc_msgSend(v8, "device");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "vendorName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "lowercaseString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v12, "rangeOfString:", CFSTR("amd")) == 0x7FFFFFFFFFFFFFFFLL && v9 == 0)
        v14 = 1000000;
      else
        v14 = 100000000;
      v15 = v4[2];
      v16 = dispatch_time(0, v14);
      dispatch_source_set_timer(v15, v16, v14, v14);
      v17 = v4[2];
      v18 = MEMORY[0x24BDAC760];
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 3221225472;
      handler[2] = sub_222B68578;
      handler[3] = &unk_24EB29FE0;
      objc_copyWeak(&v23, v2);
      dispatch_source_set_event_handler(v17, handler);
      v19 = v4[2];
      v20[0] = v18;
      v20[1] = 3221225472;
      v20[2] = sub_222B685C8;
      v20[3] = &unk_24EB29FE0;
      objc_copyWeak(&v21, v2);
      dispatch_source_set_cancel_handler(v19, v20);
      dispatch_resume(v4[2]);
      objc_destroyWeak(&v21);
      objc_destroyWeak(&v23);

    }
  }

}

void sub_222B68544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B68578(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_sampleCounters");

}

void sub_222B685B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B685C8(uint64_t a1)
{

}

NSObject *sub_222B68638(uint64_t a1)
{
  uint64_t v2;
  NSObject *result;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(NSObject **)(v2 + 16);
  if (result)
  {
    dispatch_source_cancel(result);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = mach_absolute_time();
    objc_msgSend(*(id *)(a1 + 32), "_sampleCounters");
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "stop");
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v2 + 64) = 0;
  return result;
}

void sub_222B68718(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[9];
  v3 = v1[10];
  if (v2 != v3)
  {
    if (!v1[7])
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = mach_absolute_time();
      v1 = *(_QWORD **)(a1 + 32);
      v2 = v1[9];
      v3 = v1[10];
    }
    if (v3 != v2)
    {
      v5 = 0;
      do
      {
        v20 = (_QWORD *)(v2 + 24 * v5 + 8);
        v21 = (uint64_t *)(v2 + 24 * v5);
        v6 = *v21;
        if (*v20 != *v21)
        {
          v7 = 0;
          v8 = 0;
          do
          {
            v9 = v6 + v7;
            v10 = *(_QWORD *)(a1 + 32);
            v11 = *(void **)(a1 + 40);
            v12 = *(_QWORD *)(v10 + 40);
            v13 = *(_QWORD *)(v10 + 56);
            v27[0] = MEMORY[0x24BDAC760];
            v27[1] = 3221225472;
            v27[2] = sub_222B68A40;
            v27[3] = &unk_24EB2A058;
            v28 = v11;
            v29 = v6 + v7;
            v30 = v8;
            v31 = v5;
            sub_222B68954((_QWORD *)(v6 + v7), v12, v13, v27);
            *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 32);
            sub_222B69CB0((void **)(v9 + 32), *(_QWORD *)v9 * *(_QWORD *)(v9 + 8));
            v14 = v6 + v7;
            *(_QWORD *)(v14 + 16) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            v15 = *(_QWORD *)(a1 + 32);
            v16 = *(void **)(a1 + 40);
            v17 = *(_QWORD *)(v15 + 40);
            v18 = *(_QWORD *)(v15 + 56);
            v22[0] = MEMORY[0x24BDAC760];
            v22[1] = 3221225472;
            v22[2] = sub_222B68A68;
            v22[3] = &unk_24EB2A058;
            v23 = v16;
            v24 = v6 + v7;
            v25 = v8;
            v26 = v5;
            sub_222B68954((_QWORD *)(v6 + v7 + 56), v17, v18, v22);
            *(_QWORD *)(v6 + v7 + 96) = *(_QWORD *)(v6 + v7 + 88);
            sub_222B69CB0((void **)(v6 + v7 + 88), *(_QWORD *)(v6 + v7 + 56) * *(_QWORD *)(v6 + v7 + 64));
            v19 = v6 + v7;
            *(_QWORD *)(v19 + 72) = 0;
            *(_QWORD *)(v19 + 80) = 0;

            ++v8;
            v6 = *v21;
            v7 += 112;
          }
          while (v8 < 0x6DB6DB6DB6DB6DB7 * ((*v20 - *v21) >> 4));
          v1 = *(_QWORD **)(a1 + 32);
        }
        ++v5;
        v2 = v1[9];
      }
      while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v1[10] - v2) >> 3));
    }
  }
}

void sub_222B68928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_222B68954(_QWORD *a1, unint64_t a2, uint64_t a3, void *a4)
{
  void (**v7)(_QWORD);
  void (**v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a4;
  v8 = v7;
  if (a2)
  {
    v11 = 0;
    v12 = 0;
    sub_222B693C4(a1, a2, a3, &v12, &v11);
    if (v12 < v11)
    {
      v8[2](v8);
      v9 = a1[3];
      if (v9)
      {
        if (v12 > a1[4] + 8 * v9)
          v8[2](v8);
      }
    }
  }
  else
  {
    if (a1[2] >= a1[1])
      v10 = a1[1];
    else
      v10 = a1[2];
    ((void (*)(void (**)(_QWORD), _QWORD, uint64_t))v7[2])(v7, a1[4], v10);
  }

}

void sub_222B68A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B68A40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_222B68A68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_222B68B04(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void ***)(v4 + 72);
  v6 = *(void ***)(v4 + 80);
  while (v6 != v5)
  {
    v6 -= 3;
    v7 = v6;
    sub_222B6A014(&v7);
  }
  *(_QWORD *)(v4 + 80) = v5;
}

void sub_222B68C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  id WeakRetained;

  LODWORD(v11) = a6;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
  objc_msgSend(WeakRetained, "readyToSendData:sampleCount:length:dataSource:sampleType:ringBufferIndex:sourceIndex:", a2, 0, a3, *(_QWORD *)(a1 + 32), a4, a5, v11);

}

void sub_222B68C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B68CA0(uint64_t a1, char *__src, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int v37[2];
  id WeakRetained;
  _QWORD *v39;
  _QWORD v40[6];
  int v41;
  unsigned int v42;
  _QWORD v43[6];
  int v44;
  unsigned int v45;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 + 72);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 80) - v8) >> 3) > a7)
  {
    v12 = (uint64_t *)(v8 + 24 * a7);
    v11 = *v12;
    if (0x6DB6DB6DB6DB6DB7 * ((v12[1] - *v12) >> 4) > (unint64_t)a6)
    {
      if (a5 == 2)
      {
        LODWORD(v34) = a7;
        WeakRetained = objc_loadWeakRetained((id *)(v7 + 120));
        objc_msgSend(WeakRetained, "readyToSendData:sampleCount:length:dataSource:sampleType:ringBufferIndex:sourceIndex:", __src, 1, 8 * a3, *(_QWORD *)(a1 + 32), 2, a6, v34);

      }
      else
      {
        *(_QWORD *)v37 = v11 + 112 * a6;
        if (a5 == 1)
        {
          v21 = v11 + 112 * a6;
          v23 = *(_QWORD *)(v21 + 56);
          v22 = (_QWORD *)(v21 + 56);
          v24 = v23 - 1;
          if (v23 - 1 <= a3)
          {
            v25 = 0;
            v26 = a3 / v24;
            v27 = v11 + 112 * a6;
            v28 = (_QWORD *)(v27 + 72);
            v39 = (_QWORD *)(v27 + 64);
            v35 = (void **)(v27 + 96);
            v36 = (void **)(v27 + 88);
            if (v26 <= 1)
              v29 = 1;
            else
              v29 = v26;
            do
            {
              sub_222B68FEC(v22, &__src[8 * (*v22 - 1) * v25], a4);
              v30 = *(_QWORD *)(a1 + 32);
              if ((unint64_t)(*(_QWORD *)(v30 + 40) + 1) <= 1 && *v28 == *v39)
              {
                v31 = objc_loadWeakRetained((id *)(v30 + 120));

                if (v31)
                {
                  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
                  v33 = mach_absolute_time();
                  v40[0] = MEMORY[0x24BDAC760];
                  v40[1] = 3221225472;
                  v40[2] = sub_222B691E0;
                  v40[3] = &unk_24EB2A0D0;
                  v40[4] = *(_QWORD *)(a1 + 32);
                  v40[5] = *(_QWORD *)v37;
                  v41 = a6;
                  v42 = a7;
                  sub_222B68954(v22, v32, v33, v40);
                  *v35 = *v36;
                  sub_222B69CB0(v36, *v22 * *v39);
                  *v28 = 0;
                  v28[1] = 0;
                }
              }
              ++v25;
            }
            while (v29 != v25);
          }
        }
        else if (!a5)
        {
          sub_222B68FEC(*(_QWORD **)v37, __src, a4);
          v17 = *(_QWORD *)(a1 + 32);
          if ((unint64_t)(*(_QWORD *)(v17 + 40) + 1) <= 1
            && *(_QWORD *)(*(_QWORD *)v37 + 16) == *(_QWORD *)(*(_QWORD *)v37 + 8))
          {
            v18 = objc_loadWeakRetained((id *)(v17 + 120));

            if (v18)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
              v20 = mach_absolute_time();
              v43[0] = MEMORY[0x24BDAC760];
              v43[1] = 3221225472;
              v43[2] = sub_222B6915C;
              v43[3] = &unk_24EB2A0D0;
              v43[4] = *(_QWORD *)(a1 + 32);
              v43[5] = *(_QWORD *)v37;
              v44 = a6;
              v45 = a7;
              sub_222B68954(*(_QWORD **)v37, v19, v20, v43);
              *(_QWORD *)(*(_QWORD *)v37 + 40) = *(_QWORD *)(*(_QWORD *)v37 + 32);
              sub_222B69CB0((void **)(*(_QWORD *)v37 + 32), **(_QWORD **)v37 * *(_QWORD *)(*(_QWORD *)v37 + 8));
              *(_QWORD *)(*(_QWORD *)v37 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)v37 + 24) = 0;
            }
          }
        }
      }
    }
  }
}

void sub_222B68FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(exception_object);
}

void *sub_222B68FEC(_QWORD *a1, char *__src, uint64_t a3)
{
  void **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *result;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1[2] >= a1[1])
  {
    v10 = (_QWORD *)(a1[4] + 8 * a1[3]);
    *v10 = a3;
    result = memcpy(v10 + 1, __src, 8 * *a1 - 8);
    a1[3] = (*a1 + a1[3]) % (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 3);
  }
  else
  {
    v6 = (void **)(a1 + 4);
    v7 = a1[6];
    v8 = (char *)a1[5];
    if ((unint64_t)v8 >= v7)
    {
      v12 = (char *)*v6;
      v13 = (v8 - (_BYTE *)*v6) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        sub_222B348D4();
      v15 = v7 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)sub_222B431C4((uint64_t)(a1 + 6), v16);
        v12 = (char *)a1[4];
        v8 = (char *)a1[5];
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = a3;
      v9 = (uint64_t)(v18 + 8);
      while (v8 != v12)
      {
        v20 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v18 - 1) = v20;
        v18 -= 8;
      }
      a1[4] = v18;
      a1[5] = v9;
      a1[6] = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_QWORD *)v8 = a3;
      v9 = (uint64_t)(v8 + 8);
    }
    a1[5] = v9;
    result = sub_222B69D44((uint64_t)(a1 + 4), v9, __src, &__src[8 * *a1 - 8], (8 * *a1 - 8) >> 3);
    ++a1[2];
  }
  return result;
}

void sub_222B6915C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  v8 = WeakRetained;
  objc_msgSend(WeakRetained, "readyToSendData:sampleCount:length:dataSource:sampleType:ringBufferIndex:sourceIndex:", a2, a3, 8 * a3 * **(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 32), 0, *(unsigned int *)(a1 + 48), v7);

}

void sub_222B691CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B691E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  v8 = WeakRetained;
  objc_msgSend(WeakRetained, "readyToSendData:sampleCount:length:dataSource:sampleType:ringBufferIndex:sourceIndex:", a2, a3, 8 * a3 * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), *(_QWORD *)(a1 + 32), 1, *(unsigned int *)(a1 + 48), v7);

}

void sub_222B69250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B692F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unint64_t sub_222B693C4(_QWORD *a1, unint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  mach_timebase_info info;

  result = mach_timebase_info(&info);
  v12 = a1[3];
  v11 = a1[4];
  v13 = a1[2] * *a1;
  v14 = v11 + 8 * v13;
  if (v12 >= v13)
  {
    v16 = v11 + 8 * v13;
    v17 = (_QWORD *)(v11 + 8 * v12);
LABEL_11:
    if (!a4)
      goto LABEL_13;
LABEL_12:
    *a4 = v17;
    goto LABEL_13;
  }
  v15 = (_QWORD *)(v11 + 8 * v12);
  v16 = v11 + 8 * v13;
  while ((a3 - *v15) * (unint64_t)info.numer / info.denom >= a2)
  {
    v17 = &v15[*a1];
    if ((unint64_t)v17 >= v16)
    {
      if (!v12)
        goto LABEL_11;
      result = v11 + 8 * v12;
      v15 = (_QWORD *)a1[4];
      if (v16 != v14)
        goto LABEL_11;
    }
    else
    {
      result = v16;
      v15 += *a1;
    }
    v16 = result;
    v17 = v15;
    if ((unint64_t)v15 >= result)
      goto LABEL_11;
  }
  v17 = v15;
  if (a4)
    goto LABEL_12;
LABEL_13:
  if (a5)
    *a5 = v16;
  return result;
}

void sub_222B699D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

uint64_t sub_222B69C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2 + 1;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  sub_222B69CB0((void **)(a1 + 32), (a2 + 1) * a3);
  return a1;
}

void sub_222B69C94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_222B69CB0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_222B348D4();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_222B431C4(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *sub_222B69D44(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_222B348D4();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_222B431C4(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_222B69F50((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_222B69F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_222B69F50(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_222B6A014(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        sub_222B6A098((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_222B6A098(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[11];
  if (v3)
  {
    a2[12] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

uint64_t sub_222B6A0DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249)
    sub_222B348D4();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_222B6A3C0((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[112 * v3];
  v13 = &v7[112 * v6];
  sub_222B6A200((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 112;
  sub_222B6A34C(a1, &v10);
  v8 = a1[1];
  sub_222B6A56C(&v10);
  return v8;
}

void sub_222B6A1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_222B6A56C((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_222B6A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  sub_222B6A294((_QWORD *)(a2 + 32), *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3);
  v6 = *(_OWORD *)(a3 + 56);
  v7 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return sub_222B6A294((_QWORD *)(a2 + 88), *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3);
}

void sub_222B6A278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_222B6A294(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_222B6A30C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222B6A2F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_222B6A30C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_222B348D4();
  result = (char *)sub_222B431C4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_222B6A34C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_222B6A408((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_222B6A3C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_222B41A84();
  return operator new(112 * a2);
}

uint64_t sub_222B6A408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v7 - 96) = v8;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 112;
      *((_QWORD *)&v15 + 1) -= 112;
      a3 -= 112;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_222B6A4E8((uint64_t)v12);
  return v10;
}

uint64_t sub_222B6A4E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_222B6A51C((uint64_t *)a1);
  return a1;
}

void sub_222B6A51C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_222B6A098(v3, v1);
      v1 += 14;
    }
    while (v1 != v2);
  }
}

void **sub_222B6A56C(void **a1)
{
  sub_222B6A59C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_222B6A59C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 112;
    sub_222B6A098(v4, (_QWORD *)(i - 112));
  }
}

_QWORD *sub_222B6A5E0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_222B6A76C(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_222B6A63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_222B6A644(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_222B348D4();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_222B6AA78(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_222B6A76C(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  v15 += 24;
  sub_222B6AA04(a1, v14);
  v12 = a1[1];
  sub_222B6ABD8(v14);
  return v12;
}

void sub_222B6A758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_222B6ABD8((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_222B6A76C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_222B6A7F0(result, a4);
    result = (_QWORD *)sub_222B6A844((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_222B6A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_222B6A014(&a9);
  _Unwind_Resume(a1);
}

char *sub_222B6A7F0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    sub_222B348D4();
  result = (char *)sub_222B6A3C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_222B6A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_222B6A8EC(a1, v4, v6);
      v6 += 112;
      v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_222B6A980((uint64_t)v9);
  return v4;
}

void sub_222B6A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_222B6A980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_222B6A8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  sub_222B6A294((_QWORD *)(a2 + 32), *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3);
  v6 = *(_OWORD *)(a3 + 56);
  v7 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return sub_222B6A294((_QWORD *)(a2 + 88), *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3);
}

void sub_222B6A964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_222B6A980(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_222B6A9B4((uint64_t *)a1);
  return a1;
}

void sub_222B6A9B4(uint64_t *a1)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)a1[1];
  v1 = (_QWORD **)a1[2];
  v3 = *v1;
  v4 = (_QWORD *)*v2;
  if (*v1 != (_QWORD *)*v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 14;
      sub_222B6A098(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_222B6AA04(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_222B6AABC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_222B6AA78(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_222B41A84();
  return operator new(24 * a2);
}

uint64_t sub_222B6AABC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_222B6AB5C((uint64_t)v11);
  return v9;
}

uint64_t sub_222B6AB5C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_222B6AB90(a1);
  return a1;
}

void sub_222B6AB90(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_222B6A014(&v3);
    v1 += 3;
  }
}

void **sub_222B6ABD8(void **a1)
{
  sub_222B6AC08((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_222B6AC08(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_222B6A014(&v5);
  }
}

void sub_222B6AC58(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_222B6A014(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_222B6BB00(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_222B6BB40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v5 = a2;
  objc_msgSend(a3, "description");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  v8 = &stru_24EB2CF78;
  if (v6)
    v8 = (__CFString *)v6;
  v9 = v8;

  objc_msgSend(v5, "stringByAppendingString:", CFSTR("="));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "stringByAppendingString:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = objc_retainAutorelease(v11);
  v12 = strdup((const char *)objc_msgSend(v16, "UTF8String"));
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(int *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_QWORD *)(v13 + 8 * v15) = v12;

}

uint64_t sub_222B6BC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "watchOutputFileDescriptor:forPid:", a4, a2);
}

void sub_222B6BD24()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)sTapFactory;
  sTapFactory = v0;

}

void sub_222B6C460(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[5];
  int v29;
  pid_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = 0;
LABEL_13:
    objc_msgSend(v4, "sendControlAsync:replyHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    goto LABEL_14;
  }
  v30 = -1;
  v6 = *(unsigned int *)(a1 + 56);
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "resourcePath");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByAppendingPathComponent:", CFSTR("LeakAgent"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = +[DTInstrumentServer taskForPid:](DTInstrumentServer, "taskForPid:", v6);
    if ((v10 - 1) < 0xFFFFFFFE)
    {
      DVTLaunchHelperProcess(v9, v6, &v30, v10);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "resume");
      mach_port_deallocate(*MEMORY[0x24BDAEC58], v10);
      v11 = 0;
      goto LABEL_9;
    }
    v15 = (void *)MEMORY[0x24BDD1540];
    v33 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unable to acquire required task port (%d:%d)"), v6, v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = v16;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("DTLeaksService"), -1, v17);
    v11 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = (void *)MEMORY[0x24BDD1540];
    v33 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unable to locate resource: 'LeakAgent'"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = v13;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("DTLeaksService"), -1, v14);
    v11 = (id)objc_claimAutoreleasedReturnValue();

  }
  v4 = 0;
LABEL_9:

  v18 = v11;
  v5 = v18;
  if (v4)
  {
    v19 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 56));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v4, v20);

    if (v30 >= 1)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 56));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, v23);

    }
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = sub_222B6C88C;
    v28[3] = &unk_24EB28028;
    v28[4] = *(_QWORD *)(a1 + 32);
    v29 = *(_DWORD *)(a1 + 56);
    objc_msgSend(v4, "registerDisconnectHandler:", v28);
    goto LABEL_13;
  }
  if (!v18)
  {
    v24 = (void *)MEMORY[0x24BDD1540];
    v31 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("an unknown error occurred launching the helper task"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v25;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "errorWithDomain:code:userInfo:", CFSTR("DTLeaksService"), -1, v26);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v27 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithError:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v4);
LABEL_14:

}

void sub_222B6C88C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = sub_222B6C8F8;
  v3[3] = &unk_24EB28028;
  v3[4] = v1;
  v4 = *(_DWORD *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_222B6C8F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", v3);

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 40));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObjectForKey:", v5);

}

void sub_222B6CAE0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d.%d.memgraph"), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  NSTemporaryDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v12 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "preserved to: %s", buf, 0xCu);
  }
  v6 = objc_retainAutorelease(v5);
  objc_msgSend(v2, "setFd:", open((const char *)objc_msgSend(v6, "UTF8String"), 16778754, 384));
  objc_msgSend(v2, "setSize:", objc_msgSend(*(id *)(a1 + 32), "length"));
  objc_msgSend(v2, "setToken:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v2, "setMetaDict:", *(_QWORD *)(a1 + 40));
  v7 = *(void **)(*(_QWORD *)(a1 + 48) + 48);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 64));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v2, v8);

  v9 = objc_retainAutorelease(v6);
  unlink((const char *)objc_msgSend(v9, "UTF8String"));
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1578]), "initWithFileDescriptor:closeOnDealloc:", objc_msgSend(v2, "fd"), 0);
  objc_msgSend(v10, "writeData:", *(_QWORD *)(a1 + 32));

}

void sub_222B6CD70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;
  uint64_t *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v11 = (void *)MEMORY[0x24BDD1540];
    v28 = *MEMORY[0x24BDD0FC8];
    v12 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("no preserved graph could be found for token: %#llx"), *(_QWORD *)(a1 + 48));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = v13;
    v14 = (void *)MEMORY[0x24BDBCE70];
    v15 = (void **)v29;
    v16 = &v28;
LABEL_8:
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", v15, v16, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("DTLeaksService"), -1, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "invokeCompletionWithReturnValue:error:", 0, v23);

    goto LABEL_9;
  }
  v5 = objc_msgSend(v4, "token");
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 != v6)
  {
    v17 = *(void **)(a1 + 40);
    v18 = (void *)MEMORY[0x24BDD1540];
    v26 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("preserved graph token already invalidated by later request: %#llx"), v6);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v19;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "errorWithDomain:code:userInfo:", CFSTR("DTLeaksService"), -1, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "invokeCompletionWithReturnValue:error:", 0, v21);

    goto LABEL_9;
  }
  v7 = mmap(0, objc_msgSend(v4, "size"), 1, 2, objc_msgSend(v4, "fd"), 0);
  if (v7 == (void *)-1)
  {
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("unable to mmap preserved graph for token: %#llx"), *(_QWORD *)(a1 + 48), *MEMORY[0x24BDD0FC8]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v13;
    v14 = (void *)MEMORY[0x24BDBCE70];
    v15 = &v25;
    v16 = &v24;
    goto LABEL_8;
  }
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytesNoCopy:length:deallocator:", v7, objc_msgSend(v4, "size"), &unk_24EB278B0);
  objc_msgSend(v4, "metaDict");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  objc_msgSend(v10, "setObject:forKeyedSubscript:", v8, DTLeaksServiceSerializedGraphKey);
  objc_msgSend(*(id *)(a1 + 40), "invokeCompletionWithReturnValue:error:", v10, 0);

LABEL_9:
}

uint64_t sub_222B6D074(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void sub_222B6D258(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", DTLeaksServiceOptionRetrieveGraphAsTokenKey);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "_preserveDict:forPid:", v3, *(unsigned int *)(a1 + 56));
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!v3)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = objc_msgSend(v3, "copy");
  }
  v7 = (void *)v6;
LABEL_7:
  v8 = *(void **)(a1 + 48);
  objc_msgSend(v10, "error");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "invokeCompletionWithReturnValue:error:", v7, v9);

}

void sub_222B6D454(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    v5 = (void *)objc_msgSend(v3, "copy");
  else
    v5 = 0;
  v6 = *(void **)(a1 + 32);
  objc_msgSend(v8, "error");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "invokeCompletionWithReturnValue:error:", v5, v7);

}

void sub_222B6D5E4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    v5 = (void *)objc_msgSend(v3, "copy");
  else
    v5 = 0;
  v6 = *(void **)(a1 + 32);
  objc_msgSend(v8, "error");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "invokeCompletionWithReturnValue:error:", v5, v7);

}

uint64_t sub_222B6D77C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "enumerateKeysAndObjectsUsingBlock:", &unk_24EB2A230);
}

void sub_222B6D798(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  if ((int)objc_msgSend(v3, "intValue") >= 1)
    kill(objc_msgSend(v3, "intValue"), 9);

}

uint64_t sub_222B6E3B0(void *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t result;

  v4 = *a3;
  result = objc_msgSend(objc_retainAutorelease(a1), "cStringUsingEncoding:", 1);
  *v4 = result;
  *a3 = v4 + 1;
  return result;
}

uint64_t sub_222B6E3E4(const char **a1, const char **a2)
{
  return strcasecmp(*a1, *a2);
}

uint64_t sub_222B6EA70(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "errorStatus");
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  return result;
}

void sub_222B6EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B6EECC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  _QWORD block[4];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (objc_msgSend(v3, "errorStatus") == 2)
    {
      objc_msgSend(WeakRetained, "serialQueue");
      v5 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_222B6EF94;
      block[3] = &unk_24EB27E30;
      v7 = WeakRetained;
      dispatch_async(v5, block);

    }
    else
    {
      objc_msgSend(WeakRetained, "messageReceived:", v3);
    }
  }

}

uint64_t sub_222B6EF94(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 64) = 0;
  return result;
}

void sub_222B6EFA8(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "errorStatus") == 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      sub_222BC6B1C(v3);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "errorStatus") == 2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      sub_222BC6B98(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_222B6F0C8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "messageReceived:", *(_QWORD *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "memoHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v2, "handleMemo:", v4);

}

void sub_222B6F1F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    NSLog(CFSTR("Exception caught at %s:%d - %@"));
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_222B6F25C(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "errorStatus") == 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      sub_222BC6BCC(v3);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "errorStatus") == 2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      sub_222BC6C48(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_222B6F43C(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "errorStatus") == 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      sub_222BC6C7C(v3);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "errorStatus") == 2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      sub_222BC6CF8(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_222B6F600(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "errorStatus") == 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      sub_222BC6D2C(v3);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "errorStatus") == 2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      sub_222BC6DA8(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_222B6F7C4(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "errorStatus") == 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      sub_222BC6DDC(v3);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "errorStatus") == 2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      sub_222BC6E58(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_222B6F9A4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id sub_222B6FC44(uint64_t a1)
{
  return (id)objc_msgSend(*(id *)(a1 + 32), "_fetchDataForReason:", 2);
}

void sub_222B6FF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B6FF80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B6FF90(uint64_t a1)
{

}

void sub_222B6FF98(uint64_t a1, void *a2, char a3)
{
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if ((*(_QWORD *)(a1 + 64) | 2) != 2)
    goto LABEL_7;
  if ((a3 & 1) == 0)
    sub_222BC70F4();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    sub_222BC70CC();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend(*(id *)(a1 + 32), "config"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "discardHeartbeatsWhenPossible"),
        v5,
        v6))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
LABEL_7:
    objc_msgSend(*(id *)(a1 + 32), "memoHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleMemo:", v12);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    if ((a3 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (*(_BYTE *)(v11 + 24))
        sub_222BC70A4();
      *(_BYTE *)(v11 + 24) = 1;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "waitUntilFinished");
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }

}

void sub_222B701A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

CFMutableDictionaryRef DTNStatSourceMapInitialize(CFMutableDictionaryRef *a1)
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(0, 1000, 0, MEMORY[0x24BDBD6B0]);
  *a1 = result;
  a1[1] = 0;
  return result;
}

void DTNStatSourceMapDestroy(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
}

void DTNStatSourceMapAddSource(uint64_t a1, const void *a2)
{
  DTNStatSourceMapEntry *v4;
  int64_t v5;
  XRNetworkingServiceObservationTuple *v6;
  DTNStatSourceMapEntry *value;

  v4 = objc_alloc_init(DTNStatSourceMapEntry);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5 + 1;
  value = v4;
  v4->_serialNumber = v5;
  -[DTNStatSourceMapEntry setPid:](v4, "setPid:", 0xFFFFFFFFLL);
  v6 = -[XRNetworkingServiceObservationTuple initWithKind:count:]([XRNetworkingServiceObservationTuple alloc], "initWithKind:count:", 2, 11);
  -[DTNStatSourceMapEntry setLastStats:](value, "setLastStats:", v6);

  CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
}

const void *DTNStatSourceMapGetSource(CFDictionaryRef *a1, const void *a2)
{
  return CFDictionaryGetValue(*a1, a2);
}

void DTNStatSourceMapRemoveSource(__CFDictionary **a1, const void *a2)
{
  __CFDictionary *v2;

  v2 = *a1;
  if (v2)
    CFDictionaryRemoveValue(v2, a2);
}

void sub_222B7039C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B706D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B70950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_222B70978(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0FC8];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("DTKPKTraceFileAgregator"), a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_222B70A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B7129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);

  sub_222B71624((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_222B71424()
{
  JUMPOUT(0x222B7141CLL);
}

void sub_222B71550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B71624(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      while (1)
      {
        v5 = (uint64_t *)v3[1];
        v6 = (uint64_t *)v3[5];
        if (v6 == v3 + 2)
          break;
        if (v6)
        {
          v7 = 5;
LABEL_7:
          (*(void (**)(void))(*v6 + 8 * v7))();
        }
        operator delete(v3);
        v3 = v5;
        if (v5 == a1)
          return;
      }
      v6 = v3 + 2;
      v7 = 4;
      goto LABEL_7;
    }
  }
}

uint64_t sub_222B716BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_222B71720(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_222B71788()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B7179C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27140;
  result[1] = v3;
  return result;
}

uint64_t sub_222B717D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27140;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B717EC(uint64_t a1)
{
  uint64_t result;

  result = kperf_sample_off();
  *(_BYTE *)(**(_QWORD **)(a1 + 8) + 16) = 0;
  return result;
}

uint64_t sub_222B71818(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26EB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B71854()
{
  return &unk_24EB26EB0;
}

void sub_222B71864()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B71878(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27198;
  result[1] = v3;
  return result;
}

uint64_t sub_222B718AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27198;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B718C8(uint64_t a1)
{
  uint64_t result;

  result = kperf_sample_off();
  *(_BYTE *)(**(_QWORD **)(a1 + 8) + 16) = 0;
  return result;
}

uint64_t sub_222B718F4(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26EC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B71930()
{
  return &unk_24EB26EC0;
}

void sub_222B71940()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B71954()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB271F0;
  return result;
}

void sub_222B71978(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB271F0;
}

uint64_t sub_222B71994(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26ED0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B719D0()
{
  return &unk_24EB26ED0;
}

void sub_222B71C50(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v7 = 67109120;
    v8 = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTap: (%d) start API: Began running", (uint8_t *)&v7, 8u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v4 + 32))
  {
    if (*(_BYTE *)(v4 + 8))
    {
      NSLog(CFSTR("Trying to start an already running DTTap. Ignoring."));
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 1;
      objc_msgSend(*(id *)(a1 + 32), "_start");
    }
  }
  else
  {
    NSLog(CFSTR("Trying to start a DTTap without first setting a configuration. Ignoring."));
  }
  sDTTapLogClient();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v7 = 67109120;
    v8 = v6;
    _os_log_impl(&dword_222B17000, v5, OS_LOG_TYPE_INFO, "DTTap: (%d) start API: Finished running", (uint8_t *)&v7, 8u);
  }

}

uint64_t sub_222B71D94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B71ED0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v9 = 67109120;
    v10 = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTap: (%d) stop API: Began running", (uint8_t *)&v9, 8u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_stop");
  v4 = (id)objc_msgSend(*(id *)(a1 + 32), "_fetchDataForReason:", 0);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;

  sDTTapLogClient();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v9 = 67109120;
    v10 = v8;
    _os_log_impl(&dword_222B17000, v7, OS_LOG_TYPE_INFO, "DTTap: (%d) stop API: Finished running", (uint8_t *)&v9, 8u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

uint64_t sub_222B72008(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B72144(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v6 = 67109120;
    v7 = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTap: (%d) pause API: Began running", (uint8_t *)&v6, 8u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_pause");
  sDTTapLogClient();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v6 = 67109120;
    v7 = v5;
    _os_log_impl(&dword_222B17000, v4, OS_LOG_TYPE_INFO, "DTTap: (%d) pause API: Finished running", (uint8_t *)&v6, 8u);
  }

}

uint64_t sub_222B72250(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B7238C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v6 = 67109120;
    v7 = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTap: (%d) unpause API: Began running", (uint8_t *)&v6, 8u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_unpause");
  sDTTapLogClient();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    v6 = 67109120;
    v7 = v5;
    _os_log_impl(&dword_222B17000, v4, OS_LOG_TYPE_INFO, "DTTap: (%d) unpause API: Finished running", (uint8_t *)&v6, 8u);
  }

}

uint64_t sub_222B72498(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B725B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void *v4;
  void *v5;
  NSObject *v6;
  int v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sDTTapLogClient();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl(&dword_222B17000, v2, OS_LOG_TYPE_INFO, "DTTap: (%d) fetchDataNow API: Began running", buf, 8u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_fetchDataForReason:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = (void *)MEMORY[0x24BE2A9B8];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = sub_222B7273C;
    v8[3] = &unk_24EB27E30;
    v9 = *(id *)(a1 + 40);
    objc_msgSend(v5, "runWhenOperationFinishes:block:", v4, v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "start");
  }
  sDTTapLogClient();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    *(_DWORD *)buf = 67109120;
    v11 = v7;
    _os_log_impl(&dword_222B17000, v6, OS_LOG_TYPE_INFO, "DTTap: (%d) fetchDataNow API: Finished running", buf, 8u);
  }

}

uint64_t sub_222B7273C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_222B7332C(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 2872));
  objc_exception_rethrow();
}

void sub_222B73348(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B73498(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 2872));
  objc_exception_rethrow();
}

void sub_222B734B0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_222B73C78(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t sub_222B73CB8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "displayName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

void sub_222B73E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B73E6C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B73E7C(uint64_t a1)
{

}

void sub_222B73E84(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_222B74054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B74070(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  int v8;
  void *v9;
  int v10;
  id v11;

  v11 = a2;
  objc_msgSend(v11, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
  objc_msgSend(v11, "alias");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_222B74254(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = *(void **)(a1 + 32);
  objc_msgSend(v8, "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  objc_msgSend(v8, "alias");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v8, "alias");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v7);

  }
}

void sub_222B744F4()
{
  uint64_t v0;
  void *v1;

  sub_222B74524((uint64_t)&unk_25576E6A8, 74);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB48;
  qword_25576FB48 = v0;

}

id sub_222B74524(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  LODWORD(v2) = a2;
  v4 = (void *)objc_opt_new();
  if ((_DWORD)v2)
  {
    v2 = v2;
    v5 = (uint64_t *)(a1 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v7);

      --v2;
    }
    while (v2);
  }
  return v4;
}

void sub_222B745E4()
{
  uint64_t v0;
  void *v1;

  sub_222B74524((uint64_t)&unk_25576EB48, 37);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB58;
  qword_25576FB58 = v0;

}

void sub_222B74654()
{
  uint64_t v0;
  void *v1;

  sub_222B74524((uint64_t)&unk_25576ED98, 11);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB68;
  qword_25576FB68 = v0;

}

void sub_222B746C4()
{
  uint64_t v0;
  void *v1;

  sub_222B746F4((uint64_t)&unk_25576E6A8, 0x4Au);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB78;
  qword_25576FB78 = v0;

}

id sub_222B746F4(uint64_t a1, unsigned int a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v4 = (void *)objc_opt_new();
  if (a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    v6 = a2;
    do
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *((unsigned int *)v5 - 2));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *v5;
      v5 += 2;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, v9);

      --v6;
    }
    while (v6);
  }
  return v4;
}

void sub_222B747DC()
{
  uint64_t v0;
  void *v1;

  sub_222B746F4((uint64_t)&unk_25576EB48, 0x25u);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB88;
  qword_25576FB88 = v0;

}

void sub_222B7484C()
{
  uint64_t v0;
  void *v1;

  sub_222B746F4((uint64_t)&unk_25576ED98, 0xBu);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25576FB98;
  qword_25576FB98 = v0;

}

void sub_222B75748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B757A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)DTGPUAGXCounterSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_222B75DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_222B75EFC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_222B77838(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_222B75F90(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "pullAndDrainCounters");

}

void sub_222B75FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B764F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  __p = &a16;
  sub_222B78004((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_222B76874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;

  a15 = &a18;
  sub_222B78004((void ***)&a15);

  _Unwind_Resume(a1);
}

void sub_222B770C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_222B77370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B7747C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B77584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B776B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B777D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B77838(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_222B348D4();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_222B6AA78(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_222B7799C(a1, &v15);
    sub_222B77B28((uint64_t)&v15);
  }
}

void sub_222B77988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_222B77B28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_222B7799C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_222B77A10((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_222B77A10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_222B77AB0((uint64_t)v11);
  return v9;
}

uint64_t sub_222B77AB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_222B77AE4(a1);
  return a1;
}

void sub_222B77AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_222B77B28(uint64_t a1)
{
  sub_222B77B5C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_222B77B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *sub_222B77BB4(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_222B77C24(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_222B77C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_222B77C24(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_222B348D4();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_222B77C64(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_222B348D4();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_222B77D8C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_222B77E10(result, a4);
    result = sub_222B77E60((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_222B77DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_222B78004(&a9);
  _Unwind_Resume(a1);
}

char *sub_222B77E10(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_222B348D4();
  result = (char *)sub_222B6AA78((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *sub_222B77E60(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_222B77F0C(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_222B77F84((uint64_t)v8);
  return v4;
}

void sub_222B77EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_222B77F84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_222B77F0C(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_222B77C24(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222B77F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_222B77F84(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_222B77FB8(a1);
  return a1;
}

void sub_222B77FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_222B78004(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_222B78044((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_222B78044(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *sub_222B78098(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_222B348D4();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_222B431C4(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_222B69F50((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_222B7826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_222B7873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B78760(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B78770(uint64_t a1)
{

}

void sub_222B78778(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t DTIntegerSysctlByName(const char *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;

  v9 = 0;
  v8 = 0;
  v7 = 0;
  result = sysctlbyname(a1, 0, &v7, 0, 0);
  if (!(_DWORD)result)
  {
    if (v7 == 4)
    {
      v5 = (uint64_t *)&v8;
    }
    else
    {
      if (v7 != 8)
        return 0xFFFFFFFFLL;
      v5 = &v9;
    }
    result = sysctlbyname(a1, v5, &v7, 0, 0);
    if (!(_DWORD)result)
    {
      if (v5 == (uint64_t *)&v8)
      {
        v6 = v8;
      }
      else
      {
        if (v5 != &v9)
          return 0;
        v6 = v9;
      }
      result = 0;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t DTGetCoreCount()
{
  size_t v1;
  unsigned int v2;
  int v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 0;
  *(_QWORD *)v3 = 0x300000006;
  v1 = 4;
  if (sysctl(v3, 2u, &v2, &v1, 0, 0))
    return 0;
  else
    return v2;
}

BOOL DTCoreIs64BitCapable()
{
  BOOL v0;
  uint64_t v2;

  v2 = -1;
  if (DTIntegerSysctlByName("hw.cpu64bit_capable", &v2))
    v0 = 1;
  else
    v0 = v2 == 0;
  return !v0;
}

uint64_t DTGetPhysicalMemorySize()
{
  size_t v1;
  uint64_t v2;
  int v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 0;
  *(_QWORD *)v3 = 0x1800000006;
  v1 = 8;
  if (sysctl(v3, 2u, &v2, &v1, 0, 0))
    return 0;
  else
    return v2;
}

uint64_t DTProcessIs64Bit(int a1)
{
  int v1;
  uint64_t result;
  size_t v3;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35[2];
  int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v35 = 0xE00000001;
  v36 = 1;
  v37 = a1;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  v3 = 648;
  v1 = sysctl(v35, 4u, v4, &v3, 0, 0);
  result = 0;
  if (!v1)
  {
    if (v3)
      return (v5 >> 2) & 1;
  }
  return result;
}

uint64_t DTProcessIsTranslated(int a1)
{
  int v1;
  uint64_t result;
  size_t v3;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35[2];
  int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v35 = 0xE00000001;
  v36 = 1;
  v37 = a1;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  v3 = 648;
  v1 = sysctl(v35, 4u, v4, &v3, 0, 0);
  result = 0;
  if (!v1)
  {
    if (v3)
      return (BYTE2(v5) >> 1) & 1;
  }
  return result;
}

uint64_t DTArchitectureOfProcess(int a1)
{
  int v1;
  uint64_t result;
  unsigned int v3;
  size_t v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36[2];
  int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0xFFFFFFFFLL;
  *(_QWORD *)v36 = 0xE00000001;
  v37 = 1;
  v38 = a1;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  v4 = 648;
  v1 = sysctl(v36, 4u, v5, &v4, 0, 0);
  result = 0xFFFFFFFFLL;
  if (!v1 && v4)
  {
    if ((v6 & 4) != 0)
      v3 = 16777228;
    else
      v3 = 12;
    if ((v6 & 0x20000) != 0)
      return 16777223;
    else
      return v3;
  }
  return result;
}

BOOL DTProcessIsSigStopped(int a1)
{
  _BOOL8 result;
  int *v3;
  char *v4;
  _DWORD v5[2];
  __int16 v6;
  char *v7;
  _OWORD buffer[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(buffer, 0, sizeof(buffer));
  if (proc_pidinfo(a1, 13, 0, buffer, 64) > 0)
    return HIDWORD(buffer[0]) == 4;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    v3 = __error();
    v4 = strerror(*v3);
    v5[0] = 67109378;
    v5[1] = a1;
    v6 = 2082;
    v7 = v4;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed to retrieve process info for pid %d: %{public}s", (uint8_t *)v5, 0x12u);
    return 0;
  }
  return result;
}

uint64_t DTNetworkLastInterfaceIndex()
{
  unsigned int v1;
  size_t v2;
  int v3[4];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v3 = xmmword_222BD22E0;
  v4 = 1;
  v2 = 4;
  v1 = 0;
  if (sysctl(v3, 5u, &v1, &v2, 0, 0))
    return 0;
  else
    return v1;
}

void DTNetworkInterfaceNameAtIndex(int a1, void *a2)
{
  id v2;
  id v3;
  _OWORD *v4;
  size_t v5;
  _OWORD v6[11];
  int v7;
  int v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v8 = xmmword_222BD1620;
  v8[4] = a1;
  v8[5] = 1;
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v5 = 180;
  v2 = a2;
  if (sysctl(v8, 6u, v6, &v5, 0, 0))
  {
    v3 = v2;
    v4 = 0;
  }
  else
  {
    v4 = v6;
    v3 = v2;
  }
  (*((void (**)(id, _OWORD *))v2 + 2))(v3, v4);

}

BOOL DTHostInDeveloperMode()
{
  BOOL v0;
  uint64_t v2;

  v2 = -1;
  if (DTIntegerSysctlByName("security.mac.amfi.developer_mode_status", &v2))
    v0 = 1;
  else
    v0 = v2 == 0;
  return !v0;
}

void sub_222B7A284(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_opt_new();
  v7 = objc_msgSend(v6, "unsignedIntegerValue");

  objc_msgSend(v8, "setPid:", v7);
  objc_msgSend(v8, "setAttributes:", v5);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
}

void sub_222B7A314(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_opt_new();
  v7 = objc_msgSend(v6, "unsignedIntegerValue");

  objc_msgSend(v8, "setCid:", v7);
  objc_msgSend(v8, "setAttributes:", v5);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
}

void sub_222B7A3A4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  DTSysmonCPUUsageEntry *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  DTSysmonCPUUsageEntry *v15;
  id v16;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = [DTSysmonCPUUsageEntry alloc];
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CPU_TotalLoad"));
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "doubleValue");
  v6 = v5;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CPU_UserLoad"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "doubleValue");
  v9 = v8;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CPU_SystemLoad"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "doubleValue");
  v12 = v11;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CPU_NiceLoad"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "doubleValue");
  v15 = -[DTSysmonCPUUsageEntry initWithTotal:user:system:nice:](v4, "initWithTotal:user:system:nice:", v6, v9, v12, v14);
  objc_msgSend(v2, "addObject:", v15);

}

void sub_222B7A584(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___DTCPRemoteCache;
  v1 = objc_msgSend(objc_msgSendSuper2(&v3, sel_allocWithZone_, 0), "init");
  v2 = (void *)qword_25576FBA8;
  qword_25576FBA8 = v1;

}

void sub_222B7AA48(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(v2 + 8) + 8 * v1));
  objc_exception_rethrow();
}

void sub_222B7AA68(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222B7ABA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B7ACB0(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel__runBlock);
}

uint64_t sub_222B7ACB8(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel__runBlock);
}

uint64_t sub_222B7AD34(uint64_t result)
{
  if (!atomic_load((unsigned int *)(*(_QWORD *)(result + 32) + 40)))
  {
    atomic_store(1u, (unsigned int *)(*(_QWORD *)(result + 32) + 40));
    return MEMORY[0x24BEDD108](*(_QWORD *)(result + 32), sel__runBlock);
  }
  return result;
}

uint64_t sub_222B7AE04(uint64_t result)
{
  atomic_store(2u, (unsigned int *)(*(_QWORD *)(result + 32) + 40));
  return result;
}

uint64_t sub_222B7AE18(uint64_t result)
{
  atomic_store(0, (unsigned int *)(*(_QWORD *)(result + 32) + 40));
  return result;
}

uint64_t sub_222B7AEA8(uint64_t result)
{
  atomic_store(3u, (unsigned int *)(*(_QWORD *)(result + 32) + 40));
  return result;
}

uint64_t sub_222B7AF34(uint64_t result)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)(result + 32) + 40));
  if (v1 == 3)
  {
    atomic_store(1u, (unsigned int *)(*(_QWORD *)(result + 32) + 40));
    return MEMORY[0x24BEDD108](*(_QWORD *)(result + 32), sel__runBlock);
  }
  return result;
}

void sub_222B7B05C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B7B06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = *v2;
    *(_QWORD *)(v3 + 8) = v2[1];
    *(_QWORD *)v2[1] = v3;
    *(_QWORD *)(a1 + 16) = v1 - 1;

    operator delete(v2);
  }
  else
  {
    __break(1u);
  }
}

void sub_222B7B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id sub_222B7B14C(uint64_t *a1, id *a2)
{
  _QWORD *v4;
  id result;
  uint64_t v6;

  v4 = operator new(0x18uLL);
  result = *a2;
  v4[1] = a1;
  v4[2] = result;
  v6 = *a1;
  *v4 = *a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void sub_222B7B1C8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_222B7B324()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FBC8;
  qword_25576FBC8 = v0;

}

uint64_t sub_222B7B4D8()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("DTXPCServiceControllerLog"));

  return v1;
}

void sub_222B7CC4C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x340], 8);
  _Block_object_dispose(&STACK[0x360], 8);
  _Block_object_dispose(&STACK[0x390], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B7CCA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B7CCB0(uint64_t a1)
{

}

void sub_222B7CCB8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  xpc_connection_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  char __str[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = sub_222B7D0EC;
  v24[3] = &unk_24EB2A410;
  v2 = *(void **)(a1 + 32);
  v25 = *(id *)(a1 + 40);
  v28 = *(_DWORD *)(a1 + 96);
  v3 = *(id *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 72);
  v26 = v3;
  v27 = v4;
  objc_msgSend(v2, "_matchRemove:", v24);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 96));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      v7 = (void *)objc_opt_new();
      v8 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 96));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v9);

    }
    if (*(_BYTE *)(a1 + 104))
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__str = 0u;
      v32 = 0u;
      if (*(_BYTE *)(a1 + 105) || *(_BYTE *)(a1 + 106))
      {
        if ((objc_msgSend(MEMORY[0x24BDD1760], "isAppleInternal") & 1) == 0)
        {
          v11 = *(_QWORD *)(a1 + 64);
          v12 = *(_QWORD *)(a1 + 40);
          v13 = *(unsigned int *)(a1 + 96);
          v14 = (void *)MEMORY[0x24BDD1540];
          v29 = *MEMORY[0x24BDD0FC8];
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Launching a Daemon or Agent is not supported on iOS devices."));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = v15;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("DTXPCServiceController"), 1, v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void *))(v11 + 16))(v11, v12, 0, v13, 0xFFFFFFFFLL, v17);

LABEL_28:
          goto LABEL_29;
        }
        snprintf(__str, 0x200uLL, "system/%s", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 56)), "UTF8String"));
        v10 = xpc_service_create_from_specifier();
      }
      else
      {
        objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String");
        v10 = xpc_service_create();
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v19 = *(void **)(v18 + 40);
      *(_QWORD *)(v18 + 40) = v10;

    }
    if (sub_222B7B4D8())
    {
      if (*(_BYTE *)(a1 + 104))
        goto LABEL_17;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = "com.apple.dt.instruments.dtsecurity.xpc";
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: calling xpc_connection_create: serviceName=%s", (uint8_t *)__str, 0xCu);
      }
    }
    if (!*(_BYTE *)(a1 + 104))
    {
      v21 = xpc_connection_create("com.apple.dt.instruments.dtsecurity.xpc", 0);
      v20 = 1;
      goto LABEL_19;
    }
LABEL_17:
    v20 = 0;
    v21 = 0;
LABEL_19:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v21);
    if (v20)

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40)
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
    {
      v22 = (void *)objc_opt_new();
      objc_msgSend(v22, "setServiceIdentifier:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v22, "setClient:", *(_QWORD *)(a1 + 48));
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      if (!v23)
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      objc_msgSend(v22, "setXpcObject:", v23);
      if (*(_BYTE *)(a1 + 107))
        objc_msgSend(v22, "setOneshotHandler:", *(_QWORD *)(a1 + 64));
      objc_msgSend(v7, "addObject:", v22);

    }
    goto LABEL_28;
  }
LABEL_29:

}

uint64_t sub_222B7D0EC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  uint64_t v8;

  v7 = a4;
  if (!sub_222B7D160(*(void **)(a1 + 32), a2, *(_DWORD *)(a1 + 56), a3))
    goto LABEL_4;
  v8 = 1;
  if (*(id *)(a1 + 40) != v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
LABEL_4:
    v8 = 0;
  }

  return v8;
}

uint64_t sub_222B7D160(void *a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  BOOL v9;
  uint64_t v11;

  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v7, "length")
    && objc_msgSend(v8, "length")
    && !objc_msgSend(v7, "isEqualToString:", v8))
  {
    v11 = 0;
  }
  else
  {
    if (a3)
      v9 = a4 == 0;
    else
      v9 = 1;
    v11 = v9 || a3 == a4;
  }

  return v11;
}

void sub_222B7D1E8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  int v6;

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = sub_222B7D280;
  v3[3] = &unk_24EB2A460;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 64);
  objc_msgSend(v2, "_matchRemove:", v3);

}

uint64_t sub_222B7D280(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  if (*(_QWORD *)(a1 + 32) == a4)
    return sub_222B7D160(*(void **)(a1 + 40), a2, *(_DWORD *)(a1 + 48), a3);
  else
    return 0;
}

void sub_222B7D2AC(uint64_t a1, pid_t pid)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  _BYTE buffer[1024];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (proc_pidpath(pid, buffer, 0x400u) >= 1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", buffer);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByDeletingLastPathComponent");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("Info.plist"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:", v6, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(MEMORY[0x24BDD1770], "propertyListWithData:options:format:error:", v7, 0, &v11, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = 0;
    }
    if (*(_QWORD *)(a1 + 32) && (objc_msgSend(v4, "isEqualToString:") & 1) != 0
      || *(_QWORD *)(a1 + 40)
      && (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CFBundleIdentifier")),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v10 = objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 40)),
          v9,
          v10))
    {
      kill(pid, 9);
    }

  }
}

void sub_222B7D41C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t pid;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  dispatch_source_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  dispatch_source_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  int v29;
  int v30;
  int v31;
  char v32;
  _QWORD handler[4];
  id v34;
  NSObject *v35;
  int v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint8_t buf[4];
  _BYTE v41[18];
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: xpc attach handler entered", buf, 2u);
  }
  pid = xpc_service_instance_get_pid();
  if (*(_BYTE *)(a1 + 92))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v41 = pid;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: xpc attach handler, pid = %d", buf, 8u);
    }
    if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      if (xpc_service_instance_is_configurable())
        v5 = "";
      else
        v5 = "non-";
      v6 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v41 = v5;
      *(_WORD *)&v41[8] = 2080;
      *(_QWORD *)&v41[10] = v6;
      v42 = 1024;
      v43 = pid;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "invoked for %sconfigurable service: %s pid: %d\n", buf, 0x1Cu);
    }
  }
  if ((_DWORD)pid)
  {
    v7 = (void *)objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
    v8 = v7;
    if (!*(_BYTE *)(a1 + 93))
      objc_msgSend(v7, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], DTAssertionManagerOptions_DontRemoveMemoryLimitsKey);
    objc_msgSend(v8, "removeObjectForKey:", DTProcessControlServiceOption_DisableMemoryLimitsKey[0]);
    v9 = dispatch_source_create(MEMORY[0x24BDAC9F8], (int)pid, 0x80000000uLL, 0);
    v10 = MEMORY[0x24BDAC760];
    if (v9)
    {
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 3221225472;
      handler[2] = sub_222B7DA30;
      handler[3] = &unk_24EB2A4D8;
      v37 = *(_BYTE *)(a1 + 92);
      v36 = pid;
      v34 = *(id *)(a1 + 48);
      v11 = v9;
      v35 = v11;
      dispatch_source_set_event_handler(v11, handler);
      dispatch_resume(v11);

    }
    else if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v41 = pid;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "DTXPCServiceController: Failed to start observing process with pid %i", buf, 8u);
    }
    if (xpc_service_instance_is_configurable())
    {
      v12 = objc_msgSend(*(id *)(a1 + 56), "_configureInstance:identifier:servicePid:environment:arguments:options:", v3, *(_QWORD *)(a1 + 32), pid, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40));
      if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v13 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v41 = pid;
        *(_WORD *)&v41[4] = 2080;
        *(_QWORD *)&v41[6] = v13;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Watching pid %d '%s' for exec", buf, 0x12u);
      }
      v14 = dispatch_source_create(MEMORY[0x24BDAC9F8], (int)pid, 0xA0000000uLL, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 56) + 24));
      v23[0] = v10;
      v23[1] = 3221225472;
      v23[2] = sub_222B7DB14;
      v23[3] = &unk_24EB2A500;
      v15 = v14;
      v24 = v15;
      v32 = *(_BYTE *)(a1 + 92);
      v29 = pid;
      v25 = *(id *)(a1 + 32);
      v26 = *(id *)(a1 + 48);
      v27 = v8;
      v28 = *(id *)(a1 + 80);
      v30 = *(_DWORD *)(a1 + 88);
      v31 = v12;
      dispatch_source_set_event_handler(v15, v23);
      dispatch_activate(v15);
      if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Calling xpc_service_instance_run", buf, 2u);
      }
      xpc_service_instance_run();

    }
    else
    {
      if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "xpc_service_instance_is_configurable(): false, existing service", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 94) && (int)pid >= 1)
      {
        if (*(_BYTE *)(a1 + 92) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "killing service because we were instructed to kill existing services", buf, 2u);
        }
        kill(pid, 9);
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 80);
        v17 = *(_QWORD *)(a1 + 32);
        v18 = *(unsigned int *)(a1 + 88);
        v19 = (void *)MEMORY[0x24BDD1540];
        v38 = *MEMORY[0x24BDD0FC8];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("attempted to attach to an existing process (pid=%d) for XPC service '%@' using DTXPCServiceController - should use generic attach instead"), pid, v17);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = v20;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("DTXPCServiceController"), 2, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v16 + 16))(v16, v17, pid, v18, 0xFFFFFFFFLL, v22);

      }
    }

  }
}

void sub_222B7DA30(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 52) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = *(_DWORD *)(a1 + 48);
    v3 = *(_QWORD *)(a1 + 32);
    v5[0] = 67109378;
    v5[1] = v2;
    v6 = 2112;
    v7 = v3;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: pid %d died, releasing claims on assertions taken on behalf of client %@", (uint8_t *)v5, 0x12u);
  }
  +[DTAssertionManager sharedInstance](DTAssertionManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAssertionsForPid:onBehalfOfClient:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32));

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

void sub_222B7DB14(uint64_t a1)
{
  NSObject *v2;
  int data;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(NSObject **)(a1 + 32);
  data = dispatch_source_get_data(v2);
  dispatch_source_cancel(v2);
  if ((data & 0x20000000) != 0)
  {
    if (*(_BYTE *)(a1 + 84) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v15 = *(_DWORD *)(a1 + 72);
      v16 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String");
      *(_DWORD *)buf = 67109378;
      v21 = v15;
      v22 = 2080;
      v23 = v16;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Service pid %d '%s' exec-ed", buf, 0x12u);
    }
    +[DTAssertionManager sharedInstance](DTAssertionManager, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "takeAssertionsForPid:onBehalfOfClient:withOptions:", *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else if (data < 0)
  {
    if (*(_BYTE *)(a1 + 84))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v4 = *(_DWORD *)(a1 + 72);
        v5 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String");
        *(_DWORD *)buf = 67109378;
        v21 = v4;
        v22 = 2080;
        v23 = v5;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Service pid %d '%s'  exited before exec", buf, 0x12u);
      }
    }
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 72);
    v9 = *(unsigned int *)(a1 + 76);
    v10 = *(unsigned int *)(a1 + 80);
    v11 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Service exited before exec %d '%@'. "), v8, v7, *MEMORY[0x24BDD0FC8]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v12;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("DTXPCServiceController"), 2, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v6 + 16))(v6, v7, v8, v9, v10, v14);

  }
}

void sub_222B7DD78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t v19[128];
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = objc_msgSend(v5, "count");
  if (!a3 && v6)
  {
    if ((unint64_t)objc_msgSend(v5, "count") >= 2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v7 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
      objc_msgSend(v5, "description");
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      v21 = v7;
      v22 = 2080;
      v23 = objc_msgSend(v8, "UTF8String");
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "warning: multiple plugins discovered for identifier '%s': { %s }\n", buf, 0x16u);

    }
    objc_msgSend(v5, "count");
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v16 != v12)
            objc_enumerationMutation(v9);
          if (*(_BYTE *)(a1 + 40))
          {
            v14 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
            if ((objc_msgSend(v14, "userElection", (_QWORD)v15) & 1) == 0)
              objc_msgSend(v14, "setUserElection:", 257);
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v11);
    }

  }
}

void sub_222B7DF40(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  BOOL v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "pkHandle");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v3 || (v6 = v3 == v5, v5 = v3, v6))
    objc_msgSend(v7, "setPkHandle:", v5);

}

void sub_222B7DF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  id v9;

  v8 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, uint64_t, _QWORD, uint64_t, _QWORD))(v8 + 16))(v8, v9, a3, *(unsigned int *)(a1 + 40), a5, 0);

}

void sub_222B7E2DC(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;

  v5 = objc_retainAutorelease(a2);
  v6 = a3;
  v7 = (const char *)objc_msgSend(v5, "UTF8String");
  objc_msgSend(v6, "description");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_retainAutorelease(v8);
  v10 = (const char *)objc_msgSend(v9, "UTF8String");

  if (v7)
  {
    if (v10)
      xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), v7, v10);
  }
}

void sub_222B7E5B4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t pid;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (*(_BYTE *)(a1 + 88) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: daemon launch xpc attach handler entered", (uint8_t *)&v6, 2u);
  }
  if (xpc_service_instance_is_configurable())
  {
    pid = xpc_service_instance_get_pid();
    if (*(_BYTE *)(a1 + 88) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v6 = 67109120;
      v7 = pid;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: daemon launch xpc attach handler, pid = %d", (uint8_t *)&v6, 8u);
    }
    v5 = objc_msgSend(*(id *)(a1 + 32), "_configureInstance:identifier:servicePid:environment:arguments:options:", v3, *(_QWORD *)(a1 + 40), pid, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), MEMORY[0x24BDBD1B8]);
    if (*(_BYTE *)(a1 + 88) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v6 = 67109120;
      v7 = v5;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCServiceController: daemon launch outputFD = %d", (uint8_t *)&v6, 8u);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
    objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 64)), "UTF8String");
    xpc_service_instance_set_path();
    xpc_service_instance_run();
    xpc_service_set_attach_handler();
  }

}

void sub_222B7E89C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  int v8;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_222B7E93C;
  v4[3] = &unk_24EB2A618;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 64);
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);

}

void sub_222B7E93C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v10);
        if (!*(_QWORD *)(a1 + 32)
          || (objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v10), "client"),
              v12 = (void *)objc_claimAutoreleasedReturnValue(),
              v13 = *(void **)(a1 + 32),
              v12,
              v12 == v13))
        {
          objc_msgSend(v11, "serviceIdentifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = sub_222B7D160(v14, *(void **)(a1 + 40), objc_msgSend(v5, "intValue"), *(_DWORD *)(a1 + 56));

          if (v15)
            (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

}

void sub_222B7EB34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = (void *)MEMORY[0x24BDD1698];
  v7 = a3;
  objc_msgSend(v6, "indexSet");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = sub_222B7EC14;
  v12[3] = &unk_24EB2A668;
  v9 = *(id *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v13 = v5;
  v10 = v8;
  v11 = v5;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v12);
  objc_msgSend(v7, "removeObjectsAtIndexes:", v10);

}

void sub_222B7EC14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v5, "serviceIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(*(id *)(a1 + 32), "intValue");
  objc_msgSend(v5, "client");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = (*(uint64_t (**)(uint64_t, void *, uint64_t, void *))(v6 + 16))(v6, v7, v8, v9);

  if ((_DWORD)v6)
  {
    objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
    objc_msgSend(v5, "pkHandle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(MEMORY[0x24BE72FB0], "defaultHost");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "cancelPlugInDiscovery:", v10);

    }
    objc_msgSend(v5, "oneshotHandler");
    v12 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = (void *)MEMORY[0x24BDD1540];
      v17 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("XPC Service observer canceled or superceded."));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = v14;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "errorWithDomain:code:userInfo:", CFSTR("DTXPCServiceController"), 1, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, void *))v12)[2](v12, 0, 0, 0, 0xFFFFFFFFLL, v16);

    }
  }

}

void sub_222B7EE90(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  int v6;

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = sub_222B7EF1C;
  v3[3] = &unk_24EB2A460;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  objc_msgSend(v2, "_matchRemove:", v3);

}

uint64_t sub_222B7EF1C(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  if (*(_QWORD *)(a1 + 32) == a4)
    return sub_222B7D160(*(void **)(a1 + 40), a2, *(_DWORD *)(a1 + 48), a3);
  else
    return 0;
}

uint64_t sub_222B7F0C4()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("DTXPCControlServiceLog"));

  return v1;
}

void sub_222B7F108(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (sub_222B7F0C4() && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v4 = 134217984;
    v5 = v2;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "channel for service %p disconnected: releasing claims on assertions", (uint8_t *)&v4, 0xCu);
  }
  +[DTXPCServiceController sharedInstance](DTXPCServiceController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "releaseAssertionsMadeByClient:", *(_QWORD *)(a1 + 32));

}

void sub_222B7F41C(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v12 = a6;
  if (sub_222B7F0C4() && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v12, "localizedDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138413314;
    v17 = v11;
    v18 = 1024;
    v19 = a3;
    v20 = 1024;
    v21 = a4;
    v22 = 1024;
    v23 = a5;
    v24 = 2112;
    v25 = v13;
    _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTXPCControlService launch process handler called: serviceIdentifier=%@, servicePid=%d, requestingPid=%d, outputFD=%d, error=%@", (uint8_t *)&v16, 0x28u);

  }
  objc_msgSend(*(id *)(a1 + 32), "watchOutputFileDescriptor:forPid:", a5, a3);
  v14 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "invokeCompletionWithReturnValue:error:", v15, v12);

}

void sub_222B7F7EC(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFString *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v8 = &stru_24EB2CF78;
  if (a2)
    v8 = a2;
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
    v9 = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:typesAndArguments:", sel_xpcServiceObserved_withProcessIdentifier_requestedByProcess_options_, 11, v8, 3, a3, 3, a4, 11, v9, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "watchOutputFileDescriptor:forPid:", a5, a3);
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendControlAsync:replyHandler:", v11, 0);

}

void sub_222B7FA54(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFString *v8;
  void *v9;
  void *v10;

  v8 = &stru_24EB2CF78;
  if (a2)
    v8 = a2;
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:typesAndArguments:", sel_xpcServiceObserved_withProcessIdentifier_requestedByProcess_options_, 11, v8, 3, a3, 3, a4, 11, *(_QWORD *)(a1 + 32), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "watchOutputFileDescriptor:forPid:", a5, a3);
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendControlAsync:replyHandler:", v10, 0);

}

void sub_222B7FCF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v6;
  void *v7;
  void *v8;

  v6 = (void *)MEMORY[0x227679C5C]();
  v7 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithBuffer:length:", a2, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "sendMessage:replyHandler:", v8, 0);

  objc_autoreleasePoolPop(v6);
}

uint64_t sub_222B7FF3C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 32);
  if (a2)
    v3 = MEMORY[0x24BDBD1C0];
  else
    v3 = MEMORY[0x24BDBD1C8];
  return objc_msgSend(v2, "invokeCompletionWithReturnValue:error:", v3, a2);
}

void sub_222B80008(uint64_t a1, void *a2)
{
  id v3;
  objc_class *v4;
  void *v5;
  const char *Name;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v4 = (objc_class *)objc_opt_class();
      NSStringFromClass(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      Name = sel_getName(*(SEL *)(a1 + 40));
      objc_msgSend(v3, "localizedDescription");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138412802;
      v9 = v5;
      v10 = 2080;
      v11 = Name;
      v12 = 2114;
      v13 = v7;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "-[%@ %s]: %{public}@", (uint8_t *)&v8, 0x20u);

    }
    objc_msgSend(*(id *)(a1 + 32), "stopCollection");
  }

}

void sub_222B80280(uint64_t a1, void *a2)
{
  void (**v2)(void);

  v2 = a2;
  v2[2]();

}

uint64_t sub_222B80470()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FBD8;
  qword_25576FBD8 = v0;

  v2 = objc_opt_new();
  v3 = (void *)qword_25576FBE0;
  qword_25576FBE0 = v2;

  v4 = (void *)qword_25576FBD8;
  v5 = (void *)objc_opt_new();
  objc_msgSend(v4, "addObject:", v5);

  objc_msgSend((id)qword_25576FBE0, "addObject:", DTProcessControlServiceOption_DisableWatchdogAssertionKey[0]);
  v6 = (void *)qword_25576FBD8;
  v7 = (void *)objc_opt_new();
  objc_msgSend(v6, "addObject:", v7);

  return objc_msgSend((id)qword_25576FBE0, "addObject:", DTAssertionManagerOptions_DontRemoveMemoryLimitsKey);
}

void sub_222B8056C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FBF0;
  qword_25576FBF0 = v0;

}

void sub_222B80798(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  int v15;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 56));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "addClaimForClient:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v4 = (void *)objc_opt_new();
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = sub_222B808D0;
    v11[3] = &unk_24EB2A780;
    v6 = *(id *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 32);
    v12 = v6;
    v13 = v7;
    v15 = *(_DWORD *)(a1 + 56);
    v14 = v4;
    v8 = v4;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v11);
    v9 = -[DTAssertionPidInfo initForPid:withRemoveBlocks:onBehalfOfClient:]([DTAssertionPidInfo alloc], "initForPid:withRemoveBlocks:onBehalfOfClient:", *(unsigned int *)(a1 + 56), v8, *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKeyedSubscript:", v9, v10);

  }
}

void sub_222B808D0(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  int v14;
  int v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _BYTE v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *(void **)(a1 + 32);
  if (!v6)
    goto LABEL_17;
  v7 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
  if (!v7)
    goto LABEL_17;
  v8 = v7;
  v9 = v6;
  if (objc_msgSend(v8, "count") <= a3)
    goto LABEL_16;
  objc_msgSend(v8, "objectAtIndexedSubscript:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
LABEL_15:

LABEL_16:
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = objc_msgSend(v11, "BOOLValue");
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v22 = 138412546;
      *(_QWORD *)&v22[4] = objc_opt_class();
      *(_WORD *)&v22[12] = 2112;
      *(_QWORD *)&v22[14] = v11;
      v17 = *(id *)&v22[4];
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "DTAssertionManager: options dictionary specified item of class %@ (%@) as disable value, don't know how to interpret so leaving enabled", v22, 0x16u);

    }
    goto LABEL_15;
  }
  v12 = objc_msgSend(v11, "integerValue") != 0;
LABEL_9:

  if ((v12 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "BOOLForKey:", CFSTR("DTAssertionManagerLog"));

    if (v14 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v15 = *(_DWORD *)(a1 + 56);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectAtIndex:", a3);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v22 = 67109378;
      *(_DWORD *)&v22[4] = v15;
      *(_WORD *)&v22[8] = 2112;
      *(_QWORD *)&v22[10] = v16;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "DTAssertionManager: skipping taking of assertion for pid %d due to option %@ being set", v22, 0x12u);

    }
    goto LABEL_20;
  }
LABEL_17:
  objc_msgSend(v5, "assertionForPid:", *(unsigned int *)(a1 + 56), *(_OWORD *)v22, *(_QWORD *)&v22[16], v23);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v18)
  {
    v20 = *(void **)(a1 + 48);
    v21 = _Block_copy(v18);
    objc_msgSend(v20, "addObject:", v21);

  }
LABEL_20:

}

void sub_222B80C04(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2
    && objc_msgSend(v2, "removeClaimFromClient:", *(_QWORD *)(a1 + 40))
    && objc_msgSend(v3, "hasNoMoreClients"))
  {
    objc_msgSend(v3, "removeAssertions");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObjectForKey:", v4);
  }

}

void sub_222B80D18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = (void *)objc_opt_new();
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_222B80DC8;
  v6[3] = &unk_24EB2A7A8;
  v7 = v3;
  v8 = v2;
  v5 = v2;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObjectsForKeys:", v5);

}

void sub_222B80DC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "removeClaimFromClient:", *(_QWORD *)(a1 + 32))
    && objc_msgSend(v5, "hasNoMoreClients"))
  {
    objc_msgSend(v5, "removeAssertions");
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
  }

}

void sub_222B80FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B80FC0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "stopLocationSimulation");

}

void sub_222B81350(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  _QWORD block[4];
  _QWORD *v4;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222B813C8;
  block[3] = &unk_24EB27E30;
  v4 = v1;
  dispatch_async(v2, block);

}

uint64_t sub_222B813C8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "closeFileTransfer", (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeAllObjects");
}

id sub_222B81694(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 1:
      v1 = (void *)MEMORY[0x24BDD1540];
      v29 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Invalid input provided"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v30[0] = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v1;
      v5 = 1;
      break;
    case 2:
      v10 = (void *)MEMORY[0x24BDD1540];
      v27 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unable to initiate file transfer"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v10;
      v5 = 2;
      break;
    case 3:
      v7 = (void *)MEMORY[0x24BDD1540];
      v25 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Error occurred while unarchived file transfer"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v7;
      v5 = 3;
      break;
    case 4:
      v8 = (void *)MEMORY[0x24BDD1540];
      v23 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Application could not be found"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v8;
      v5 = 4;
      break;
    case 5:
      v9 = (void *)MEMORY[0x24BDD1540];
      v21 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Invalid application provided"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v9;
      v5 = 5;
      break;
    case 6:
      v11 = (void *)MEMORY[0x24BDD1540];
      v19 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Error occurred while moving file into document inbox"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v11;
      v5 = 6;
      break;
    case 7:
      v12 = (void *)MEMORY[0x24BDD1540];
      v17 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Invalid filename provided for opening"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v12;
      v5 = 7;
      break;
    default:
      v6 = (void *)MEMORY[0x24BDD1540];
      v15 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown error"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v2;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v6;
      v5 = -1;
      break;
  }
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("DTFileTransferService"), v5, v3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_222B81A84(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  if ((objc_msgSend(*(id *)(a1 + 32), "_unarchivePackageIfNecessary:", *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    sub_222B81694(3);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "invokeCompletionWithReturnValue:error:", v2, v2);
  }
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v10 = v2;
  objc_msgSend(v3, "_moveFileTransfer:toDebugInboxOfApplicationWithBundleIdentifier:outError:", v4, v5, &v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v10;

  if (v6)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = v7;
    v9 = v7;
  }
  objc_msgSend(*(id *)(a1 + 48), "invokeCompletionWithReturnValue:error:", v8, v9);

}

id sub_222B81F50(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "dataContainerURL");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("Documents/Inbox/"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL sub_222B81FA0(void *a1)
{
  id v1;
  const char *v2;
  stat v5;

  objc_msgSend(a1, "path");
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = (const char *)objc_msgSend(v1, "fileSystemRepresentation");

  memset(&v5, 0, sizeof(v5));
  return !lstat(v2, &v5) && (v5.st_mode & 0xF000) == 0x4000;
}

id sub_222B82018(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "characterAtIndex:", 0) == 46)
  {
    objc_msgSend(v1, "stringByReplacingCharactersInRange:withString:", 0, 1, CFSTR("_"));
    v2 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v2;
  }
  objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), CFSTR("_"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t sub_222B82098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletionWithReturnValue:error:", a3, a3);
}

id sub_222B824A0()
{
  if (qword_25576FBF8 != -1)
    dispatch_once(&qword_25576FBF8, &unk_24EB27990);
  return (id)qword_25576FC00;
}

passwd *sub_222B824E0(const char *a1)
{
  passwd *result;

  result = getpwnam("mobile");
  if (result)
    return (passwd *)(lchown(a1, result->pw_uid, result->pw_gid) == 0);
  return result;
}

uint64_t sub_222B82520(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B82530(uint64_t a1)
{

}

void sub_222B82538(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v17 = 0;
  objc_msgSend(v2, "_moveFileTransfer:inDataContainerOfApplicationBundleIdentifier:withError:", v3, v4, &v17);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v17;
  v7 = *(_QWORD *)(a1[8] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
  sub_222B824A0();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "absoluteString");
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v13 = objc_msgSend(v12, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v19 = v13;
      _os_log_impl(&dword_222B17000, v11, OS_LOG_TYPE_INFO, "File transfer success: %s", buf, 0xCu);

    }
    v14 = (void *)a1[7];
    v15 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
    v16 = 0;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_222BC7200(v6);

    v14 = (void *)a1[7];
    v15 = 0;
    v16 = v6;
  }
  objc_msgSend(v14, "invokeCompletionWithReturnValue:error:", v15, v16);

}

id sub_222B82AA4(void *a1, uint64_t a2, int a3)
{
  void *v4;
  id v5;
  int v6;
  id v7;
  stat v9;

  objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:", a2, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "path", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = lstat((const char *)objc_msgSend(v5, "fileSystemRepresentation"), &v9);

  if (v6 || a3 && (v9.st_mode & 0xF000) == 0x4000)
    v7 = v4;
  else
    v7 = 0;

  return v7;
}

BOOL sub_222B82DD0(void *a1, int a2)
{
  id v3;
  const char *v4;
  int v5;
  _BOOL8 result;
  stat v7;

  objc_msgSend(a1, "path");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v3, "fileSystemRepresentation");

  memset(&v7, 0, sizeof(v7));
  if (lstat(v4, &v7))
  {
    if (!a2)
      return 1;
LABEL_6:
    if (mkdir(v4, 0x1FFu))
      return 0;
    sub_222B824E0(v4);
    return 1;
  }
  v5 = v7.st_mode & 0xF000;
  result = v5 == 0x4000;
  if (v5 == 0x4000 && (a2 & 1) != 0)
    goto LABEL_6;
  return result;
}

id sub_222B82E84(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  unsigned int v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v5 = a1;
  v6 = a2;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = sub_222B82520;
  v24 = sub_222B82530;
  v25 = 0;
  v7 = (void *)objc_opt_new();
  v14 = MEMORY[0x24BDAC760];
  v15 = 3221225472;
  v16 = sub_222B83870;
  v17 = &unk_24EB2A830;
  v8 = v5;
  v18 = v8;
  v19 = &v20;
  objc_msgSend(v7, "coordinateWritingItemAtURL:options:error:byAccessor:", v6, 8, 0, &v14);
  v9 = (void *)v21[5];
  if (!v9)
    goto LABEL_6;
  if (a3)
  {
    objc_msgSend(v9, "path", v14, v15, v16, v17);
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = sub_222B824E0((const char *)objc_msgSend(v10, "fileSystemRepresentation"));

    if (v11)
    {
      v9 = (void *)v21[5];
      goto LABEL_5;
    }
LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
LABEL_5:
  v12 = v9;
LABEL_7:

  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_222B82FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B83840()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Instruments", "DTFileTransferService");
  v1 = (void *)qword_25576FC00;
  qword_25576FC00 = (uint64_t)v0;

}

void sub_222B83870(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id obj;

  v3 = (void *)MEMORY[0x24BDD1580];
  v4 = a2;
  objc_msgSend(v3, "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "destinationURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v7 + 40);
  objc_msgSend(v5, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v4, v6, 0, 0, &obj, 0);

  objc_storeStrong((id *)(v7 + 40), obj);
}

void sub_222B83914(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id sub_222B83928(id a1)
{
  return objc_retainAutorelease(a1);
}

uint64_t sub_222B83C70(_QWORD *a1, uint64_t a2, const char *a3)
{
  return sub_222B83C8C(a1[5], a1[6], a2, a3, (id *)(a1[4] + 56));
}

uint64_t sub_222B83C8C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, id *a5)
{
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t Range;
  _QWORD aBlock[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  if (a4)
    CSSymbolicatorGetSymbolOwnerWithNameAtTime();
  v25 = 0;
  v26 = &v25;
  v27 = 0x3010000000;
  v29 = 0;
  v30 = 0;
  v28 = &unk_222BF3AAB;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_222B85448;
  aBlock[3] = &unk_24EB2A960;
  aBlock[4] = &v25;
  aBlock[5] = &v21;
  v8 = _Block_copy(aBlock);
  if ((CSIsNull() & 1) != 0)
    CSSymbolicatorForeachSymbolWithNameAtTime();
  else
    CSSymbolOwnerForeachSymbolWithName();
  if ((CSIsNull() & 1) != 0)
  {
    if (!*((_BYTE *)v22 + 24))
    {
      v9 = (void *)MEMORY[0x24BDD1540];
      v31 = *MEMORY[0x24BDD0FC8];
      v10 = "<any>";
      if (a4)
        v10 = a4;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unable to find symbol named '%s' in owner: %s."), a3, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = v11;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 2, v12);
      v13 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
  }
  else if (!*((_BYTE *)v22 + 24))
  {
    goto LABEL_16;
  }
  v14 = (void *)MEMORY[0x24BDD1540];
  v33 = *MEMORY[0x24BDD0FC8];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Found multiple symbols named '%s'; specified owner necessary"),
    a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 2, v12);
  v13 = objc_claimAutoreleasedReturnValue();
LABEL_13:
  v15 = (void *)v13;

  if (a5)
    objc_storeStrong(a5, v15);
  v16 = v26;
  v26[4] = 0;
  v16[5] = 0;

LABEL_16:
  if ((CSIsNull() & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    Range = CSSymbolGetRange();
    v17 = Range + CSSymbolIsThumb();
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v17;
}

void sub_222B83F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B83FCC(uint64_t a1, uint64_t a2, const char *a3)
{
  return sub_222B83C8C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3, 0);
}

void sub_222B84390(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_222B843B0(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  int v7;
  _QWORD v8[4];
  id v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 != 0x80000000)
  {
    v14 = v3;
    v15 = v4;
    v8[1] = 3221225472;
    v5 = a3[1];
    v10 = *a3;
    v6 = *(NSObject **)(a1 + 32);
    v8[0] = MEMORY[0x24BDAC760];
    v8[2] = sub_222B8444C;
    v8[3] = &unk_24EB2A8A0;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 48);
    v12 = a2;
    v13 = v7;
    objc_copyWeak(&v9, (id *)(a1 + 40));
    dispatch_sync(v6, v8);
    objc_destroyWeak(&v9);
  }
}

void sub_222B8444C(uint64_t a1)
{
  int v2;
  id WeakRetained;
  id v4;
  id v5;

  v2 = *(_DWORD *)(a1 + 72);
  switch(v2)
  {
    case 4098:
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      objc_msgSend(WeakRetained, "_lookupFunctionAddresses:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), WeakRetained);
LABEL_9:

      return;
    case 4096:
      v5 = objc_loadWeakRetained((id *)(a1 + 32));
      objc_msgSend(v5, "_lookupFunctionAddresses:", 0, 0, v5);
      goto LABEL_9;
    case 16:
      CSSymbolicatorSubscribeToTaskMainNotification();
      if (_dyld_process_info_create())
      {
        _dyld_process_info_get_state();
        _dyld_process_info_release();
      }
      break;
  }
}

uint64_t sub_222B84538(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_lookupFunctionAddresses:", 0, 0);
}

uint64_t sub_222B84548()
{
  return CSRelease();
}

uint64_t sub_222B84554(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 65);
  return result;
}

void sub_222B84DEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  _QWORD v19[5];
  id v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 65))
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!v3)
      return;
    v4 = (void *)MEMORY[0x24BDD1540];
    v23 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to load library %@ because target process %d appears to have exited"), *(_QWORD *)(a1 + 40), *(unsigned int *)(v2 + 12));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v5;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 1, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v7);

  }
  else if (*(_QWORD *)(v2 + 56))
  {
    v8 = *(_QWORD *)(a1 + 80);
    if (!v8)
      return;
    v9 = (void *)MEMORY[0x24BDD1540];
    v21[0] = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to load library %@ due to missing bootstrapping symbols"), *(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v21[1] = *MEMORY[0x24BDD1398];
    v22[0] = v5;
    v22[1] = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, v21, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 2, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", *(_QWORD *)(v2 + 24), 136);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BE2A960], "messageWithSelector:objectArguments:", sel_injectLibrary_withFunctionPayload_sandboxExtensions_callingFunction_arguments_, *(_QWORD *)(a1 + 40), v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x3032000000;
    v19[3] = sub_222B85104;
    v19[4] = sub_222B8512C;
    v20 = _Block_copy(*(const void **)(a1 + 80));
    v11 = *(void **)(a1 + 72);
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = sub_222B85134;
    v14[3] = &unk_24EB2A910;
    v18 = v19;
    v12 = *(id *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 32);
    v15 = v12;
    v16 = v13;
    v17 = *(id *)(a1 + 72);
    objc_msgSend(v11, "sendControlAsync:replyHandler:", v6, v14);

    _Block_object_dispose(v19, 8);
  }

}

void sub_222B850E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_222B85104(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_222B8512C(uint64_t a1)
{

}

void sub_222B85134(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if ((id)*MEMORY[0x24BE2A988] != v3)
  {
    objc_msgSend(v3, "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "BOOLValue");

    objc_msgSend(v4, "error");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "code");
    if (v8 == -1 || (v6 & 1) != 0)
    {

      if (v8 != -1)
      {
LABEL_5:
        objc_msgSend(v4, "error");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        if (v10)
        {
          if (v11)
          {
            objc_msgSend(v4, "error");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

          }
        }
        else if (v11)
        {
          (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
        }
LABEL_16:
        objc_msgSend(*(id *)(a1 + 48), "cancel");
        goto LABEL_17;
      }
    }
    else
    {
      objc_msgSend(v4, "error");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
        goto LABEL_5;
    }
    v18 = (void *)MEMORY[0x24BDD1540];
    v25 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to execute loader thread for %@ in target; target process %d likely exited"),
      *(_QWORD *)(a1 + 32),
      *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v19;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 1, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (v22)
      (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v21);

    goto LABEL_16;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v13)
  {
    v14 = (void *)MEMORY[0x24BDD1540];
    v27 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("RemoteInjectionAgent terminated unexpectedly"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v15;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 2, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v17);

  }
LABEL_17:
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = 0;

}

uint64_t sub_222B85448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = CSIsNull();
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v7 + 32) = a2;
    *(_QWORD *)(v7 + 40) = a3;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_222B854A8(uint64_t a1, _DWORD *a2, uint64_t a3, unint64_t a4)
{
  void *v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _DWORD *);
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v23 = MEMORY[0x24BDAC760];
  v24 = 3221225472;
  v25 = sub_222B85738;
  v26 = &unk_24EB2A988;
  v7 = *(void **)(a1 + 32);
  v27 = *(id *)(a1 + 40);
  v28 = *(id *)(a1 + 48);
  v8 = v7;
  v9 = &v23;
  if (*a2 == -17958194)
  {
    v10 = 7;
  }
  else
  {
    if (*a2 != -17958193)
    {
      v12 = (void *)MEMORY[0x24BDD1540];
      v29 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("path does not appear to be a valid mach-o: %@"), v8, v21, v22, v23, v24);
      goto LABEL_17;
    }
    v10 = 8;
  }
  v11 = a2[5];
  if (v10 * 4 + v11 > a4)
  {
    v12 = (void *)MEMORY[0x24BDD1540];
    v29 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("header is not long enough; found %lu but expected %lu: %@"),
      a4,
      v10 * 4 + v11,
      v8,
      v23,
      v24);
LABEL_17:
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = v19;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("RemoteBundleLoaderError"), 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_18;
  }
  if (a2[4])
  {
    v13 = 0;
    v14 = &a2[v10];
    v15 = (char *)&a2[v10] + v11;
    v16 = (unint64_t)&a2[v10];
    while (1)
    {
      if (v16 < (unint64_t)v14
        || v16 >= (unint64_t)(v15 - 8)
        || v16 + *(unsigned int *)(v16 + 4) > (unint64_t)v15)
      {
        v12 = (void *)MEMORY[0x24BDD1540];
        v29 = *MEMORY[0x24BDD0FC8];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("malformed load commmand at index %i: %@"), v13, v8, v22, v23, v24);
        goto LABEL_17;
      }
      v25((uint64_t)v9, (_DWORD *)v16);
      v17 = objc_claimAutoreleasedReturnValue();
      if (v17)
        break;
      v16 += *(unsigned int *)(v16 + 4);
      v13 = (v13 + 1);
      if (v13 >= a2[4])
        goto LABEL_15;
    }
    v18 = (void *)v17;
  }
  else
  {
LABEL_15:
    v18 = 0;
  }
LABEL_18:

}

uint64_t sub_222B85738(uint64_t a1, _DWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  unsigned __int8 v14;

  if (*a2 == -2147483620)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", (char *)a2 + a2[2]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "pathComponents");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "mutableCopy");

    if (objc_msgSend(v5, "count"))
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasPrefix:", CFSTR("@"));

      if (v7)
        objc_msgSend(v5, "replaceObjectAtIndex:withObject:", 0, *(_QWORD *)(a1 + 32));
      objc_msgSend(MEMORY[0x24BDD17C8], "pathWithComponents:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringByStandardizingPath");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = 0;
      objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "fileExistsAtPath:isDirectory:", v9, &v14);
      v12 = v14;

      if (v11 && v12)
        objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);

    }
  }
  return 0;
}

void sub_222B8772C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  void *v8;
  uint64_t v9;
  void *v10;

  LODWORD(v9) = a7;
  objc_msgSend(*(id *)(a1 + 32), "_constructMessagePayload:sampleCount:length:dataSource:sampleType:ringBufferIndex:sourceIndex:", a2, a3, a4, *(_QWORD *)(a1 + 40), a5, a6, v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v10 = v8;
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
    v8 = v10;
  }

}

void sub_222B87D20(uint64_t a1)
{
  id *v2;
  dispatch_object_t *WeakRetained;
  dispatch_object_t *v4;
  NSObject *v5;
  dispatch_source_t v6;
  dispatch_object_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  __int128 v13;
  uint64_t v14;

  v2 = (id *)(a1 + 32);
  WeakRetained = (dispatch_object_t *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[2];
    if (v5)
    {
      v6 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v5);
      v7 = v4[3];
      v4[3] = v6;

      v8 = v4[3];
      v9 = dispatch_time(0, 500000000);
      dispatch_source_set_timer(v8, v9, 0x1DCD6500uLL, 0x12A05F200uLL);
      v10 = v4[3];
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = sub_222B87E48;
      v11[3] = &unk_24EB2AA00;
      objc_copyWeak(&v12, v2);
      v14 = *(_QWORD *)(a1 + 56);
      v13 = *(_OWORD *)(a1 + 40);
      dispatch_source_set_event_handler(v10, v11);
      dispatch_resume(v4[3]);
      objc_destroyWeak(&v12);
    }
  }

}

void sub_222B87E48(uint64_t a1)
{
  dispatch_source_t *WeakRetained;
  void *v3;
  void *v4;
  dispatch_source_t v5;
  dispatch_source_t *v6;

  WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    -[dispatch_source_t _findDataSourcesForTargetProcess:](WeakRetained, "_findDataSourcesForTargetProcess:", *(unsigned int *)(a1 + 56));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3 && objc_msgSend(v3, "count"))
    {
      dispatch_source_cancel(v6[3]);
      v5 = v6[3];
      v6[3] = 0;

      -[dispatch_source_t _configureDataSourcesAndSendMessage:counterProfile:interval:windowLimit:](v6, "_configureDataSourcesAndSendMessage:counterProfile:interval:windowLimit:", v4, *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }

    WeakRetained = v6;
  }

}

void sub_222B87F88(uint64_t a1)
{
  id *v2;
  dispatch_object_t *WeakRetained;
  dispatch_object_t *v4;
  NSObject *v5;
  dispatch_source_t v6;
  dispatch_object_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;

  v2 = (id *)(a1 + 40);
  WeakRetained = (dispatch_object_t *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[2];
    if (v5)
    {
      v6 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v5);
      v7 = v4[4];
      v4[4] = v6;

      v8 = v4[4];
      v9 = dispatch_time(0, 100000000);
      dispatch_source_set_timer(v8, v9, 0x5F5E100uLL, 0x3B9ACA00uLL);
      v10 = v4[4];
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = sub_222B880A4;
      v11[3] = &unk_24EB2AA28;
      objc_copyWeak(&v12, v2);
      v11[4] = *(_QWORD *)(a1 + 32);
      dispatch_source_set_event_handler(v10, v11);
      dispatch_resume(v4[4]);
      objc_destroyWeak(&v12);
    }
  }

}

void sub_222B880A4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5[0] = &unk_24EB4EC00;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", mach_absolute_time());
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5[1] = v3;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "_sendMessage:", v4);
  }

}

void sub_222B881D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;

  }
}

uint64_t sub_222B885A4(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "setAPSCounterConfig:", *(_QWORD *)(a1 + 32));
}

void sub_222B89250()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_25576FC08;
  qword_25576FC08 = v0;

}

void sub_222B89368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B89380(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B89390(uint64_t a1)
{

}

void sub_222B89398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "activeHandlers");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_222B89614(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "activeHandlers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, v4);

  objc_msgSend(*(id *)(a1 + 32), "activeHandlers");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "description");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  syslog(7, "Registered new request handler. Current requests: %s", (const char *)objc_msgSend(v6, "UTF8String"));

}

void sub_222B89760(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "activeHandlers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", v3);

  objc_msgSend(*(id *)(a1 + 32), "activeHandlers");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allKeys");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "description");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  syslog(7, "Unregistered a request handler. Current requests: %s", (const char *)objc_msgSend(v5, "UTF8String"));

}

BOOL DTProcessShouldCaptureOutputWithOptions(void *a1)
{
  id v1;
  void *v2;
  char v3;
  _BOOL8 v4;
  void *v5;
  int v6;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", DTProcessControlServiceOption_CaptureOutputKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  if ((v3 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("iODestinationKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "intValue");

    v4 = v6 == 0;
  }

  return v4;
}

void DTProcessAddLegacyLaunchOptions(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  int v4;
  id v5;

  v1 = DTProcessControlServiceOption_CaptureOutputKey;
  v2 = a1;
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v4 ^ 1u);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("iODestinationKey"));

}

id DVTIFAttachToProcess(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mach_port_name_t v16;
  void *v17;

  v7 = a2;
  v8 = a3;
  v9 = +[DTInstrumentServer taskForPid:](DTInstrumentServer, "taskForPid:", a1);
  v16 = v9;
  if ((v9 - 1) >= 0xFFFFFFFE)
  {
    if (a4)
    {
      sub_222B8A3CC(0, CFSTR("Failed to get task for pid %d: %x"), v10, v11, v12, v13, v14, v15, a1);
      v17 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    DVTIFAttachToTask(v9, v7, v8, a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    mach_port_deallocate(*MEMORY[0x24BDAEC58], v16);
  }

  return v17;
}

id sub_222B8A3CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v10 = (objc_class *)MEMORY[0x24BDD17C8];
  v11 = a2;
  v12 = (__CFString *)objc_msgSend([v10 alloc], "initWithFormat:arguments:", v11, &a9);

  v13 = &stru_24EB2CF78;
  if (v12)
    v13 = v12;
  v14 = v13;

  v15 = (void *)MEMORY[0x24BDD1540];
  v19 = *MEMORY[0x24BDD0FC8];
  v20[0] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.ProcessAttachUtilities"), a1, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id DVTIFAttachToTask(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  ipc_space_t *v18;
  mach_error_t v19;
  NSObject *v20;
  id v21;
  const char *v22;
  pid_t v23;
  char *v24;
  mach_error_t inserted;
  NSObject *v26;
  id v27;
  const char *v28;
  pid_t v29;
  char *v30;
  uint64_t v31;
  void (**v32)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD v44[2];
  void (*v45)(uint64_t, uint64_t, void *);
  void *v46;
  id v47;
  id v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  id v64;
  int x;
  mach_port_name_t name[2];
  mach_port_name_t *v67;
  uint64_t v68;
  char v69;
  _BYTE buf[40];
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v14 = a3;
  x = 0;
  if ((a1 - 1) > 0xFFFFFFFD || pid_for_task(a1, &x))
  {
    if (a4)
    {
      sub_222B8A3CC(1, CFSTR("Invalid task port provided: %x"), v8, v9, v10, v11, v12, v13, a1);
      v15 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v15 = 0;
    }
    goto LABEL_28;
  }
  v59 = 0;
  v60 = &v59;
  v61 = 0x3032000000;
  v62 = sub_222B8A988;
  v63 = sub_222B8A998;
  v64 = 0;
  v53 = 0;
  v54 = &v53;
  v55 = 0x3032000000;
  v56 = sub_222B8A988;
  v57 = sub_222B8A998;
  v58 = 0;
  v16 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v45 = sub_222B8A9A0;
  v46 = &unk_24EB2AB90;
  v49 = &v59;
  v51 = a1;
  v52 = x;
  v47 = v7;
  v48 = v14;
  v50 = &v53;
  v17 = v44;
  name[0] = 0;
  v18 = (ipc_space_t *)MEMORY[0x24BDAEC58];
  v19 = mach_port_allocate(*MEMORY[0x24BDAEC58], 1u, name);
  if (v19)
  {
    v20 = MEMORY[0x24BDACB70];
    v21 = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v22 = getprogname();
      v23 = getpid();
      v24 = mach_error_string(v19);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v24;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v19;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)\n", buf, 0x22u);
    }

  }
  inserted = mach_port_insert_right(*v18, name[0], name[0], 0x14u);
  if (inserted)
  {
    v26 = MEMORY[0x24BDACB70];
    v27 = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v28 = getprogname();
      v29 = getpid();
      v30 = mach_error_string(inserted);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v29;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v30;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = inserted;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)\n", buf, 0x22u);
    }

  }
  v31 = name[0];
  *(_QWORD *)name = 0;
  v67 = name;
  v68 = 0x2020000000;
  v69 = 0;
  *(_QWORD *)buf = v16;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_222B8AD5C;
  *(_QWORD *)&buf[24] = &unk_24EB298F0;
  *(_QWORD *)&buf[32] = name;
  v71 = v31;
  v32 = (void (**)(_QWORD))_Block_copy(buf);
  v45((uint64_t)v17, v31, v32);
  v32[2](v32);

  _Block_object_dispose(name, 8);
  if (!v54[5] && !v60[5])
  {
    if (x)
    {
      if (kill(x, 0) != -1 || *__error() != 3)
      {
        sub_222B8A3CC(3, CFSTR("Attach to %d failed; an unknown error occurred"),
          v33,
          v34,
          v35,
          v36,
          v37,
          v38,
          x);
        v40 = objc_claimAutoreleasedReturnValue();
LABEL_23:
        v41 = (void *)v60[5];
        v60[5] = v40;

        goto LABEL_24;
      }
      v39 = x;
    }
    else
    {
      v39 = 0;
    }
    sub_222B8A3CC(2, CFSTR("Attach to %d failed to create transport; target likely exited"),
      v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39);
    v40 = objc_claimAutoreleasedReturnValue();
    goto LABEL_23;
  }
LABEL_24:
  if (a4)
  {
    v42 = (void *)v60[5];
    if (v42)
      *a4 = objc_retainAutorelease(v42);
  }
  v15 = (id)v54[5];

  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v59, 8);

LABEL_28:
  return v15;
}

void sub_222B8A948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B8A988(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B8A998(uint64_t a1)
{

}

void sub_222B8A9A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  ipc_space_t *v6;
  uint64_t v7;
  ipc_space_t v8;
  BOOLean_t is_self;
  mach_msg_type_name_t v10;
  uint64_t v11;
  ipc_space_t v12;
  mach_port_name_t v13;
  mach_port_t v14;
  mach_error_t v15;
  kern_return_t inserted;
  kern_return_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  RemoteBundleLoader *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  id v46;
  uint64_t v47;
  mach_port_name_t name;
  mach_port_t poly[2];
  _QWORD v50[2];

  v50[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = (ipc_space_t *)MEMORY[0x24BDAEC58];
  v7 = *MEMORY[0x24BDAEC58];
  v8 = *(_DWORD *)(a1 + 64);
  *(_QWORD *)poly = 0;
  is_self = mach_task_is_self(v7);
  if (is_self)
  {
    poly[1] = a2;
    v10 = 19;
  }
  else
  {
    v15 = MEMORY[0x227679A94](v7, a2, 19, &poly[1], poly);
    if (v15)
      goto LABEL_27;
    v10 = poly[0];
  }
  if (mach_task_is_self(v8))
  {
    v11 = poly[1];
    name = poly[1];
    if (v10 - 19 > 0xFFFFFFFC)
      goto LABEL_19;
    v12 = v8;
    v13 = poly[1];
    v14 = poly[1];
  }
  else
  {
    if ((_DWORD)v7 != v8)
    {
      while (1)
      {
        name = 0;
        v17 = mach_port_allocate(v8, 4u, &name);
        if (v17)
          break;
        v17 = mach_port_deallocate(v8, name);
        if (v17)
          break;
        inserted = mach_port_insert_right(v8, name, poly[1], v10);
        if ((inserted & 0xFFFFFFF7) != 5)
          goto LABEL_11;
      }
      v15 = v17;
      if (is_self)
        goto LABEL_27;
      goto LABEL_26;
    }
    name = a2;
    v14 = poly[1];
    v12 = v7;
    v13 = a2;
  }
  inserted = mach_port_insert_right(v12, v13, v14, v10);
LABEL_11:
  v15 = inserted;
  if (inserted)
  {
    if (!is_self)
LABEL_26:
      mach_port_mod_refs(*v6, poly[1], poly[0], -1);
LABEL_27:
    v33 = *(unsigned int *)(a1 + 68);
    mach_error_string(v15);
    sub_222B8A3CC(1, CFSTR("Attach to %d: Failed to transfer mach rights: %s (%d)."), v34, v35, v36, v37, v38, v39, v33);
    v40 = objc_claimAutoreleasedReturnValue();
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v24 = *(RemoteBundleLoader **)(v41 + 40);
    *(_QWORD *)(v41 + 40) = v40;
    goto LABEL_30;
  }
  v11 = name;
LABEL_19:
  if ((v11 - 1) >= 0xFFFFFFFE)
  {
    v15 = 5;
    goto LABEL_27;
  }
  v24 = -[RemoteBundleLoader initWithTask:]([RemoteBundleLoader alloc], "initWithTask:", *(unsigned int *)(a1 + 64));
  if (v24)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%x"), v11);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(_QWORD *)(a1 + 40);
    v50[0] = v25;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v50, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = MEMORY[0x24BDAC760];
    v45[1] = 3221225472;
    v45[2] = sub_222B8ACC4;
    v45[3] = &unk_24EB2AB68;
    v47 = *(_QWORD *)(a1 + 48);
    v46 = v5;
    -[RemoteBundleLoader scheduleLibraryLoad:calling:arguments:callback:](v24, "scheduleLibraryLoad:calling:arguments:callback:", v26, v27, v28, v45);

    objc_msgSend(MEMORY[0x24BE2A958], "fileDescriptorHandshakeWithReceivePort:", a2);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      v30 = objc_msgSend(objc_alloc(MEMORY[0x24BE2A948]), "initWithTransport:", v29);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v32 = *(void **)(v31 + 40);
      *(_QWORD *)(v31 + 40) = v30;

    }
  }
  else
  {
    sub_222B8A3CC(1, CFSTR("Unable to create a RemoteBundleLoader; target is already invalid"),
      v18,
      v19,
      v20,
      v21,
      v22,
      v23,
      v44);
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v25 = *(void **)(v43 + 40);
    *(_QWORD *)(v43 + 40) = v42;
  }

LABEL_30:
}

uint64_t sub_222B8ACC4(uint64_t result, void *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (a2)
  {
    v2 = result;
    v3 = a2;
    if (objc_msgSend(v3, "code") == 1)
      v4 = 2;
    else
      v4 = 3;
    objc_msgSend(v3, "localizedDescription");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    sub_222B8A3CC(v4, CFSTR("%@"), v6, v7, v8, v9, v10, v11, (uint64_t)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_222B8AD5C(uint64_t a1)
{
  unsigned __int8 *v2;
  mach_port_name_t v4;
  ipc_space_t *v5;
  kern_return_t v6;
  mach_error_t v7;
  kern_return_t v8;
  mach_error_t v9;
  const char *v10;
  pid_t v11;
  char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  pid_t v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  mach_error_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      return;
    }
  }
  while (__stlxr(1u, v2));
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 >= 2)
  {
    v5 = (ipc_space_t *)MEMORY[0x24BDAEC58];
    v6 = mach_port_mod_refs(*MEMORY[0x24BDAEC58], v4, 1u, -1);
    if (v6)
    {
      v7 = v6;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v13 = 136315906;
        v14 = getprogname();
        v15 = 1024;
        v16 = getpid();
        v17 = 2080;
        v18 = mach_error_string(v7);
        v19 = 1024;
        v20 = v7;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)\n", (uint8_t *)&v13, 0x22u);
      }
    }
    v8 = mach_port_deallocate(*v5, *(_DWORD *)(a1 + 40));
    if (v8)
    {
      v9 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v10 = getprogname();
        v11 = getpid();
        v12 = mach_error_string(v9);
        v13 = 136315906;
        v14 = v10;
        v15 = 1024;
        v16 = v11;
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = v9;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)\n", (uint8_t *)&v13, 0x22u);
      }
    }
  }
}

void sub_222B8B178(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_opt_new();
  objc_msgSend(v6, "setKind:", 7);
  objc_msgSend(v6, "setSessionMetadata:", v3);

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  objc_msgSend(MEMORY[0x24BE2A960], "messageWithObject:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendMessage:", v5);

}

void sub_222B8B2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B8B2B8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "isAllProcesses");
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_222B8BBDC(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "errorStatus");
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  return result;
}

void sub_222B8C438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B8C45C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B8C46C(uint64_t a1)
{

}

void sub_222B8C474(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v12 = a2;
  objc_msgSend(v12, "eventName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isEqualToString:", v8))
  {

LABEL_4:
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    goto LABEL_5;
  }
  objc_msgSend(v12, "eventOrAliasName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "aliasOrName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "isEqualToString:", v10);

  if (v11)
    goto LABEL_4;
LABEL_5:

}

void sub_222B8CAAC(uint64_t a1, void *a2)
{
  unint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "hwIdx");
  if (v3 > objc_msgSend(*(id *)(a1 + 32), "hwIdx"))
  {
    objc_msgSend(v5, "setHwIdx:", objc_msgSend(v5, "hwIdx") - 1);
    objc_msgSend(*(id *)(a1 + 40), "_counterNameForEvent:error:", v5, *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCounterName:", v4);

  }
}

uint64_t sub_222B8CEB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_222B8CF38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_222B8D020(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_222B8D038(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v5 = (void *)a1[4];
  v11 = 0;
  v6 = objc_msgSend(v5, "_counterIndexForEvent:absolute:error:", a2, 0, &v11);
  v7 = v11;
  v8 = a1[6];
  v9 = *(_QWORD *)(a1[5] + 8);
  v10 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v10 + 1;
  *(_QWORD *)(v8 + 8 * v10) = v6;
  if (v7 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_222BC7570((uint64_t)v7, a3);

}

void sub_222B8D9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B8DA0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B8DA1C(uint64_t a1)
{

}

void sub_222B8DA24(uint64_t a1, void *a2)
{
  _xpc_connection_s *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = xpc_shmem_create((void *)objc_msgSend(*(id *)(a1 + 32), "sharedMemory"), objc_msgSend(*(id *)(a1 + 32), "totalSharedMemorySize"));
  xpc_dictionary_set_value(v4, "dtx_shared_memory", v5);
  v6 = xpc_connection_send_message_with_reply_sync(v3, v4);

  if (MEMORY[0x22767A790](v6) == MEMORY[0x24BDACFB8])
  {
    v7 = (void *)MEMORY[0x24BDD1540];
    v18 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("XPC error contacting DTServiceHub: '%s'"), xpc_dictionary_get_string(v6, (const char *)*MEMORY[0x24BDACF40]));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("DTServiceHubClient"), 1, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v17 = v13;
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = 0;

  }
}

void sub_222B8DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B8DE84(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v2 + 24))
  {
    *(_BYTE *)(v2 + 24) = 1;
  }
  else
  {
    objc_msgSend(a2, "kdebugFilter");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v4, "containsClass:subclassID:", 43, 101);

  }
}

void sub_222B8E158(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "thermalState");

    objc_msgSend(WeakRetained, "_emitThermalState:currentState:", v2, v2);
  }

}

void sub_222B8E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B8E318(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
  {
    *(_BYTE *)(v4 + 24) = 1;
  }
  else
  {
    v7 = v3;
    objc_msgSend(v3, "kdebugFilter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "containsClass:subclassID:", 133, 2))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
    else
    {
      objc_msgSend(v7, "kdebugFilter");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v6, "containsClass:subclassID:", 133, 9);

    }
    v3 = v7;
  }

}

uint64_t sub_222B8E54C(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24), 1uLL);
  return notify_post("com.apple.Metal.AGXEnableOSSignposts");
}

void sub_222B8E67C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_222B8E698(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "_notifyShaderBinaryInfo");
    WeakRetained = v3;
  }

}

id DTKTraceTapLocalEventProducersForConfig(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_opt_new();
  if (+[DTKTraceTapLocalTimerBasedEventProducer supportsConfig:](DTKTraceTapLocalTimerBasedEventProducer, "supportsConfig:", v1))
  {
    v3 = (void *)objc_opt_new();
    objc_msgSend(v2, "addObject:", v3);

  }
  if (+[DTKTraceTapLocalShaderTimelineEventProducer supportsConfig:](DTKTraceTapLocalShaderTimelineEventProducer, "supportsConfig:", v1))
  {
    v4 = (void *)objc_opt_new();
    objc_msgSend(v2, "addObject:", v4);

  }
  if (+[DTKTraceTapLocalVFSTracePathsProducer supportsConfig:](DTKTraceTapLocalVFSTracePathsProducer, "supportsConfig:", v1))
  {
    v5 = (void *)objc_opt_new();
    objc_msgSend(v2, "addObject:", v5);

  }
  return v2;
}

void sub_222B8E9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_222B8EA08(uint64_t a1, void *a2)
{
  id WeakRetained;

  if (objc_msgSend(a2, "errorStatus") == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_helperConnectionError");

  }
}

void sub_222B902C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B90324(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x24BE80C78];
  objc_msgSend(MEMORY[0x24BE80CD8], "predicateMatchingBundleIdentifier:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleForPredicate:error:", v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "pid");
  v5 = v4 & ~(v4 >> 31);

  return v5;
}

uint64_t sub_222B9038C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B9039C(uint64_t a1)
{

}

uint64_t sub_222B903A4(uint64_t result)
{
  uint64_t v1;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40))
  {
    v1 = result;
    result = sub_222B90324(*(_QWORD *)(result + 32));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 24) = result;
  }
  return result;
}

void sub_222B903E4(uint64_t a1, int a2, id obj)
{
  id v5;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  v5 = obj;
  objc_msgSend(*(id *)(a1 + 32), "start");

}

void sub_222B910D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_222B91160(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Background Fetch failure for '%@'. Options: %@. FBSOpenApplicationOptions: %@."), a1[4], a1[5], a1[6]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v6 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      objc_msgSend(v4, "description");
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      v17 = v6;
      v18 = 2080;
      v19 = objc_msgSend(v7, "UTF8String");
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s.\nError: %s", buf, 0x16u);

    }
    v8 = (void *)MEMORY[0x24BDD1540];
    v9 = *MEMORY[0x24BDD1398];
    v14[0] = *MEMORY[0x24BDD0FC8];
    v14[1] = v9;
    v15[0] = v5;
    v15[1] = v4;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.deviceprocesscontrolservice"), 8, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1[7] + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

void sub_222B91300(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_222BC768C(v3);
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Clip Request error for bundleID:'%@' url:'%@'"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x24BDD1540];
    v6 = *MEMORY[0x24BDD1398];
    v11[0] = *MEMORY[0x24BDD0FC8];
    v11[1] = v6;
    v12[0] = v4;
    v12[1] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v12, v11, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.deviceprocesscontrolservice"), 8, v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_222B915DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B915F8(uint64_t a1, void *a2)
{
  id v4;
  id v5;

  v4 = a2;
  if (v4)
  {
    v5 = v4;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v4 = v5;
  }

}

void sub_222B91904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B9192C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = (void *)MEMORY[0x24BDD17C8];
    v5 = *(_QWORD *)(a1 + 32);
    v6 = a3;
    objc_msgSend(v4, "stringWithFormat:", CFSTR("Failed to show Notification Center Widget '%@' error: %@."), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v17 = objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    v8 = (void *)MEMORY[0x24BDD1540];
    v9 = *MEMORY[0x24BDD1398];
    v14[0] = *MEMORY[0x24BDD0FC8];
    v14[1] = v9;
    v15[0] = v7;
    v15[1] = v6;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.deviceprocesscontrolservice"), 8, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

void sub_222B91FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B92010(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to show Widget '%@' error: %@."), *(_QWORD *)(a1 + 32), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v15 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    v6 = (void *)MEMORY[0x24BDD1540];
    v7 = *MEMORY[0x24BDD1398];
    v12[0] = *MEMORY[0x24BDD0FC8];
    v12[1] = v7;
    v13[0] = v5;
    v13[1] = v4;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("com.apple.dt.deviceprocesscontrolservice"), 8, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_222B9233C()
{
  const void *v0;

  v0 = (const void *)IOHIDEventSystemClientCreate();
  IOHIDEventSystemClientDispatchEvent();
  CFRelease(v0);
}

void sub_222B92538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B92550(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B92560(uint64_t a1)
{

}

void sub_222B92568(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a2, "unsignedIntValue");
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v3 | 0xFFFCu);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

}

void sub_222B92658(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  const __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;

  v3 = objc_msgSend(a2, "unsignedIntValue");
  v4 = HIBYTE(v3);
  if ((_DWORD)v4 == 255)
  {
    v5 = CFSTR("*");
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), v4);
    v5 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  }
  v8 = (__CFString *)v5;
  if (BYTE2(v3) == 255)
  {
    v6 = CFSTR("*");
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), BYTE2(v3));
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  if ((unsigned __int16)v3 >> 2 == 0x3FFF)
  {
    v7 = CFSTR("*");
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), (unsigned __int16)v3 >> 2);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("{%@,%@,%@}"), v8, v6, v7);

}

uint64_t sub_222B927F8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addObject:", a2);
}

uint64_t sub_222B92B4C(uint64_t a1, void *a2)
{
  unsigned int v3;
  const __CFString *v4;
  const __CFString *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(a2, "unsignedIntValue");
  objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("<event type=\"KDebug\" "));
  if (HIBYTE(v3) == 255)
  {
    v4 = CFSTR("class=\"*\" ");
  }
  else
  {
    v8 = HIBYTE(v3);
    v4 = CFSTR("class=\"%d\" ");
  }
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", v4, v8);
  if (BYTE2(v3) == 255)
  {
    v5 = CFSTR("subclass=\"*\" ");
  }
  else
  {
    v9 = BYTE2(v3);
    v5 = CFSTR("subclass=\"%d\" ");
  }
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", v5, v9);
  v6 = *(void **)(a1 + 32);
  if ((unsigned __int16)v3 >> 2 == 0x3FFF)
    return objc_msgSend(v6, "appendFormat:", CFSTR("code=\"*\"/>"));
  else
    return objc_msgSend(v6, "appendFormat:", CFSTR("code=\"%d\"/>"), (unsigned __int16)v3 >> 2);
}

uint64_t sub_222B92CCC(uint64_t a1, void *a2)
{
  unsigned int v2;
  int i;
  uint64_t result;

  v2 = objc_msgSend(a2, "unsignedIntValue");
  if (HIBYTE(v2) == 255)
  {
    for (i = 0; i != 255; ++i)
      result = kperf_typefilter_enable_class();
  }
  else if ((~v2 & 0xFF0000) != 0)
  {
    return kperf_typefilter_enable_subclass();
  }
  else
  {
    return kperf_typefilter_enable_class();
  }
  return result;
}

uint64_t sub_222B92DC8(uint64_t a1, void *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t result;

  v2 = objc_msgSend(a2, "unsignedIntValue");
  if (HIBYTE(v2) == 255)
  {
    v3 = 0;
    v4 = 255;
    do
    {
      result = kperf_kdebug_filter_add_class();
      v3 += 0x1000000;
      --v4;
    }
    while (v4);
  }
  else if (BYTE2(v2) == 255)
  {
    return kperf_kdebug_filter_add_class();
  }
  else if ((unsigned __int16)v2 >> 2 == 0x3FFF)
  {
    return kperf_kdebug_filter_add_class_subclass();
  }
  else
  {
    return kperf_kdebug_filter_add_debugid();
  }
  return result;
}

void sub_222B93230(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 3096));
  objc_exception_rethrow();
}

void sub_222B93248(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id sub_222B9325C(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  FILE *v5;
  FILE *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  DTKPKDebugCodeWithName *v10;
  void *v11;
  id v13;
  size_t __linecapp;
  char *__linep;
  _BYTE v16[256];
  char v17[32];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v13 = (id)objc_opt_new();
  objc_msgSend(v3, "path");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v5 = fopen((const char *)objc_msgSend(v4, "UTF8String"), "re");
  if (v5)
  {
    v6 = v5;
    __linecapp = 0;
    __linep = 0;
    if (getline(&__linep, &__linecapp, v5) >= 1)
    {
      do
      {
        v7 = __linep;
        if (sscanf(__linep, "%31s %255s\n", v17, v16) == 2)
        {
          v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithUTF8String:", v16);
          v9 = strtoll_l(v17, 0, 0, 0);
          if ((_DWORD)v9)
          {
            v10 = -[DTKPKDebugCodeWithName initWithValue:name:]([DTKPKDebugCodeWithName alloc], "initWithValue:name:", v9, v8);

            if (v10)
            {
              objc_msgSend(v13, "addObject:", v10);

            }
            continue;
          }
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Could not convert kdebug code string '%s' into a number."), v17);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          DTKPSetErrorAndOrLogWithFileAndLine(1, (uint64_t)"DTKPKDebugCode", a2, 4294967286, v11);

        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Could not parse a kdebug code line: %s"), v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          DTKPSetErrorAndOrLogWithFileAndLine(1, (uint64_t)"DTKPKDebugCode", a2, 4294967286, v8);
        }

      }
      while (getline(&__linep, &__linecapp, v6) > 0);
    }
    free(__linep);
    fclose(v6);
  }

  return v13;
}

void sub_222B935C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  DTKPKDebugCodeWithName *v6;

  v5 = a2;
  v6 = -[DTKPKDebugCodeWithName initWithValue:name:]([DTKPKDebugCodeWithName alloc], "initWithValue:name:", a3, v5);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forIntegerKey:", v6, a3);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

}

void sub_222B93714(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = a2;
  objc_msgSend(v2, "setObject:forIntegerKey:", v3, objc_msgSend(v3, "kdebugCode"));

}

void sub_222B93938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DTAllocationsRecorder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_222B93AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B93DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_222B94360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222B94774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_222B94840(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = (void *)MEMORY[0x24BDD1540];
  v6 = *MEMORY[0x24BDD0FC8];
  v7[0] = v1;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", CFSTR("XRObjectAllocDomain"), -42, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_222B94900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B94924(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }

}

void sub_222B9496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B94980(uint64_t a1)
{
  uint64_t v2;
  mach_vm_address_t v3;
  vm_map_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  vm_map_t *v8;
  vm_map_t v9;
  kern_return_t v10;
  mach_vm_address_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, _QWORD *);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  vm_prot_t cur_protection[2];
  mach_vm_address_t target_address;
  uint8_t buf[4];
  mach_vm_address_t v22;
  __int16 v23;
  vm_map_t v24;
  __int16 v25;
  vm_prot_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  CSSymbolOwnerGetSymbolWithName();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CSSymbolGetRange();
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 56);
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v15 = sub_222B94C94;
    v16 = &unk_24EB2AE40;
    v5 = *(_QWORD *)(a1 + 48);
    v17 = v2;
    v18 = v5;
    v6 = v14;
    if (mach_task_is_self(v4))
    {
      v15((uint64_t)v6, (_QWORD *)v3);
    }
    else
    {
      v8 = (vm_map_t *)MEMORY[0x24BDAEC58];
      v9 = *MEMORY[0x24BDAEC58];
      *(_QWORD *)cur_protection = 0;
      target_address = 0;
      v10 = mach_vm_remap(v9, &target_address, 8uLL, 0, 1048577, v4, v3, 0, &cur_protection[1], cur_protection, 2u);
      if (v10)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          v22 = v3;
          v23 = 1024;
          v24 = v4;
          v25 = 1024;
          v26 = v10;
          _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to map memory for address: %#llx in task: %d (%d)\n", buf, 0x18u);
        }
        v11 = 0;
      }
      else
      {
        if ((~cur_protection[1] & 3) != 0)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218496;
            v22 = v3;
            v23 = 1024;
            v24 = v4;
            v25 = 1024;
            v26 = cur_protection[1];
            _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to map memory r/w for address: %#llx in task: %d (%d)\n", buf, 0x18u);
          }
          mach_vm_deallocate(v9, target_address, 8uLL);
        }
        v11 = target_address;
      }
      v15((uint64_t)v6, (_QWORD *)v11);
      mach_vm_deallocate(*v8, v11, 8uLL);
    }

    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      sub_222B94840(CFSTR("Failed to acquire memory location for pushing shared memory into target."));
      v13 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t))(v7 + 16))(v7);

    }
  }
}

void sub_222B94C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

uint64_t sub_222B94C94(uint64_t result, _QWORD *a2)
{
  if (a2)
    *a2 = *(_QWORD *)(result + 40);
  else
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

void sub_222B94E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_222B94E34(uint64_t a1, _DWORD *__src, unsigned int a3)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  int v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  void (*v17)(void);
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;

  if (__src)
  {
    v4 = a3;
    if (a3)
    {
      v5 = __src;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) += a3;
      while (1)
      {
        v6 = *(_QWORD *)(a1 + 32);
        if (*(int *)(v6 + 100) > 1)
          return;
        v7 = *(unsigned int *)(v6 + 68);
        if (v4 >= 0x30 && !(_DWORD)v7)
        {
          v8 = v5[2];
          v9 = (unsigned __int16)v5[3];
          if ((v8 & 0x800000) != 0)
            v9 = HIWORD(v5[3]);
          v10 = 8 * v9 + 56;
          if (v4 >= v10)
          {
            if (v9 >= 0x200)
            {
              objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("DTAllocationsRecorder.mm"), 348, CFSTR("Fatal: whole event too large (%d), stream malformed."), v10);

              v8 = v5[2];
              if ((v8 & 0x400000) == 0)
                goto LABEL_31;
            }
            else if ((v8 & 0x400000) == 0)
            {
LABEL_31:
              if ((v8 & 0x800000) != 0)
                objc_msgSend(*(id *)(a1 + 32), "createFullEventFromDelta:withEvent:", v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
              goto LABEL_39;
            }
            objc_msgSend(*(id *)(a1 + 32), "addKeyFrame:", v5);
LABEL_39:
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
            ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 72);
            v5 = (_DWORD *)((char *)v5 + v10);
            goto LABEL_40;
          }
        }
        v11 = *(_DWORD *)(v6 + 64);
        v12 = (void *)(*(_QWORD *)(v6 + 48) + v7);
        if (!v11)
        {
          v18 = 48 - v7;
          if (v18 >= v4)
            v10 = v4;
          else
            v10 = v18;
          memcpy(v12, v5, v10);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) += v10;
          v19 = *(_QWORD *)(a1 + 32);
          v20 = *(_DWORD *)(v19 + 68);
          if (v20 >= 0x31)
            sub_222BC7720();
          if (v20 == 48)
          {
            v21 = *(_QWORD *)(v19 + 48);
            v22 = *(_DWORD *)(v21 + 8);
            v24 = *(_DWORD *)(v21 + 12);
            v23 = HIWORD(v24);
            v24 = (unsigned __int16)v24;
            if ((v22 & 0x800000) != 0)
              v24 = v23;
            *(_DWORD *)(v19 + 64) = 8 * v24 + 56;
            v19 = *(_QWORD *)(a1 + 32);
          }
          v5 = (_DWORD *)((char *)v5 + v10);
          if (*(_DWORD *)(v19 + 64) >= 0x1031u)
          {
            objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));

          }
          goto LABEL_40;
        }
        v13 = v11 - v7;
        v10 = v13 >= v4 ? v4 : v13;
        memcpy(v12, v5, v10);
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) += v10;
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_DWORD *)(v14 + 68);
        if (v15 >= 0x1031)
          sub_222BC7748();
        v5 = (_DWORD *)((char *)v5 + v10);
        if (v15 == *(_DWORD *)(v14 + 64))
          break;
LABEL_40:
        v4 -= v10;
        if (!v4)
          return;
      }
      v16 = *(_DWORD *)(*(_QWORD *)(v14 + 48) + 8);
      if ((v16 & 0x400000) != 0)
      {
        objc_msgSend((id)v14, "addKeyFrame:");
        v25 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        if ((v16 & 0x800000) == 0)
        {
          v17 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_36:
          v17();
          ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 72);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) = 0;
          goto LABEL_40;
        }
        objc_msgSend((id)v14, "createFullEventFromDelta:withEvent:");
        v25 = *(_QWORD *)(a1 + 40);
      }
      v17 = *(void (**)(void))(v25 + 16);
      goto LABEL_36;
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_222B95148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_222B95160(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel__processIncomingData);
}

void sub_222B95318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  uint64_t v15;

  sub_222B964B4(v15, a12);
  sub_222B964B4((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_222B954E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;

  v5 = 0;
  v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "getBufferWithReturnedLength:", &v5);
  objc_msgSend(*(id *)(a1 + 40), "bufferHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "bufferHandler");
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v4[2](v4, v2, v5);

  }
}

void sub_222B95560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B955E8(uint64_t a1)
{
  uint64_t v2;
  mach_vm_address_t v3;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;

  dispatch_sync(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 40), &unk_24EB27A10);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    atomic_store(1u, (unsigned int *)(v3 + 48));
    if (*(_QWORD *)(v3 + 16))
    {
      if (!atomic_load((unsigned int *)(v3 + 44)))
        shm_unlink((const char *)(v3 + *(_QWORD *)(v3 + 16)));
    }
    mach_vm_deallocate(*MEMORY[0x24BDAEC58], v3, *(_QWORD *)v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v2 + 8) = 0;
  objc_msgSend(*(id *)(a1 + 32), "setEventHandler:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setBufferHandler:", 0);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 48);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
    v5 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)(v5 + 64) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) = 0;
  result = CSRelease();
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  return result;
}

void sub_222B95C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

double sub_222B95CA0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  double result;

  if ((a2 & 2) != 0)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 16;
  }
  else
  {
    if ((a2 & 0xFFFFFF) == 0 || (a2 & 4) != 0)
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(v7 + 8) = 19;
      goto LABEL_11;
    }
    if ((a2 & 0x10) != 0)
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(v7 + 8) = a2 & 0xFF000000 | 0x17;
      goto LABEL_9;
    }
    if ((a2 & 0x20) == 0)
      goto LABEL_12;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 26;
  }
  *(_DWORD *)(v7 + 8) = v8;
LABEL_9:
  *(_QWORD *)(v7 + 40) = a4;
LABEL_11:
  *(_QWORD *)(v7 + 16) = a3 ^ 0x5555;
LABEL_12:
  v9 = objc_msgSend(a6, "getFramesForStackID:stackFramesBuffer:", msl_payload_get_uniquing_table_index(), *(_QWORD *)(a1 + 40) + 48);
  v10 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v10 + 12) = v9;
  if (v9)
  {
    v11 = (double)mach_absolute_time();
    v12 = *(_QWORD *)(a1 + 40);
    *(double *)v12 = v11;
    v13 = *(_DWORD *)(v12 + 12);
    if (v13)
    {
      v14 = v13 - 1;
      do
      {
        if (*(_QWORD *)(v12 + 8 * v14 + 48) > 0xFFFuLL)
          break;
        --v14;
        *(_DWORD *)(v12 + 12) = --v13;
      }
      while (v13);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v10 = *(_QWORD *)(a1 + 40);
  }
  result = 0.0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  return result;
}

void sub_222B95DC0(uint64_t a1, const void *a2, size_t size, _BYTE *a4)
{
  int v5;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD aBlock[5];
  id v17;
  id v18;
  void *v19;
  int v20;

  v5 = size;
  v8 = size;
  v9 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + 88));
  if (v9 + size >= 0x2000001)
  {
    do
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
      v10 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + 88));
    }
    while (v10 + v8 > 0x2000000);
  }
  if (v5)
  {
    v11 = malloc_type_malloc(v8, 0x8CED4E69uLL);
    memcpy(v11, a2, v8);
  }
  else
  {
    v11 = 0;
  }
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_222B95F30;
  aBlock[3] = &unk_24EB2AF08;
  v18 = *(id *)(a1 + 48);
  v19 = v11;
  v20 = v5;
  v12 = *(void **)(a1 + 40);
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v17 = v12;
  v13 = _Block_copy(aBlock);
  v14 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 88);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + v8, v14));
  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 40), v13);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 100) == 2)
    *a4 = 1;

}

intptr_t sub_222B95F30(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  free(*(void **)(a1 + 56));
  v2 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 88);
  v3 = *(unsigned int *)(a1 + 64);
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - v3, v2));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_222B95F88(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return result;
}

uint64_t sub_222B9606C(uint64_t result, _QWORD *a2)
{
  if (a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void *sub_222B96084(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_222B960AC(uint64_t a1)
{

}

void sub_222B960B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

uint64_t sub_222B960EC(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  const char *v4;
  const char *Name;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40))
  {
    v2 = result;
    if (a2 == 256)
    {
      v4 = *(const char **)(result + 40);
      Name = (const char *)CSSymbolOwnerGetName();
      result = strcmp(v4, Name);
      if (!(_DWORD)result)
      {
        v3 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40) + 16);
        return v3();
      }
    }
    else if (a2 == 16)
    {
      CSSymbolicatorGetSymbolOwnerWithNameAtTime();
      result = CSIsNull();
      if ((result & 1) == 0)
      {
        v3 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40) + 16);
        return v3();
      }
    }
  }
  return result;
}

uint64_t *sub_222B961B0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_222B96204(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_222B961EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_222B964B4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_222B96204(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_222B96288(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_222B96288(uint64_t **a1, uint64_t *a2, unsigned int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_222B9630C(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_222B57F00(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_222B9630C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_222B964B4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_222B964B4(a1, *a2);
    sub_222B964B4(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_222B964F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, a3, a4, a5, *(_QWORD *)(a1 + 32));
}

uint64_t **sub_222B96504(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _DWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 8);
    sub_222B57F00(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_222B965C4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4];
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_222B96674(a1, a3, (uint64_t)&v10);
    sub_222B57F00((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_QWORD *sub_222B96674@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = a2[1];
  v8 = a2 + 2;
  v9 = a2[2];
  result[4] = *a2;
  result[5] = v7;
  result[6] = v9;
  v10 = result + 6;
  v11 = a2[3];
  result[7] = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    a2[1] = v8;
    *v8 = 0;
    a2[3] = 0;
  }
  else
  {
    result[5] = v10;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_222B966EC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_222B966EC(a1, *a2);
    sub_222B966EC(a1, a2[1]);
    sub_222B964B4((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_222B96BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B96D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_222B96DA4(void *a1, int a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  sub_222B986D0(a1, a2);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v2, "localizedDescription");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    sub_222BC662C(v3, (uint64_t)v6, v4);
  }

  return v2;
}

void sub_222B96E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B96F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B97664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);

  sub_222B71624((uint64_t *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

id sub_222B977AC(void *a1, int a2)
{
  sub_222B986D0(a1, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_222B977C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;

  v4 = operator new(0x30uLL);
  *v4 = 0;
  v4[1] = 0;
  result = sub_222B71720((uint64_t)(v4 + 2), a2);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *v4 = a1;
  v4[1] = v6;
  *v6 = v4;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7 + 1;
  return result;
}

_QWORD *sub_222B9781C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (result != a2)
  {
    v3 = result;
    while (1)
    {
      sub_222B716BC((uint64_t)v5, (uint64_t)(v3 + 2));
      if (!v6)
        sub_222B41964();
      (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 48))(v6);
      result = v6;
      if (v6 == v5)
        break;
      if (v6)
      {
        v4 = 5;
LABEL_8:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
      }
      v3 = (_QWORD *)v3[1];
      if (v3 == a2)
        return result;
    }
    result = v5;
    v4 = 4;
    goto LABEL_8;
  }
  return result;
}

void sub_222B978DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void sub_222B97998(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B97B58(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_222B97C58(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_222B97D2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_222B97DE0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_kernelCallbackNotifyCallblock:", 4);
  return objc_msgSend(*(id *)(a1 + 32), "_kernelCallbackStop");
}

void sub_222B97FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B980F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  id *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v7);
  _Unwind_Resume(a1);
}

void sub_222B98110(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void sub_222B9811C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

uint64_t sub_222B98124(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  v2 = objc_msgSend(WeakRetained, "_kernelCallbackImpl");

  return v2;
}

void sub_222B98160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9832C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B98428()
{
  return kperf_buffer_returnbuf();
}

void sub_222B984B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B98600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B986A0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Instruments", "dtkpkperfaggregator");
  v1 = (void *)qword_25576FC38;
  qword_25576FC38 = (uint64_t)v0;

}

id sub_222B986D0(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0FC8];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("DTKPKperfAgregator"), a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_222B98794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B987BC()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B987D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB26FE0;
  result[1] = v3;
  return result;
}

uint64_t sub_222B98804(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB26FE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B98820(uint64_t a1)
{
  uint64_t result;

  result = kperf_buffer_free();
  *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) = 0;
  return result;
}

uint64_t sub_222B98858(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26E70))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B98894()
{
  return &unk_24EB26E70;
}

void sub_222B988A4()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B988B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB27038;
  result[1] = v3;
  return result;
}

uint64_t sub_222B988EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB27038;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B98908(uint64_t a1)
{
  uint64_t result;

  result = kperf_sample_off();
  *(_BYTE *)(**(_QWORD **)(a1 + 8) + 48) = 0;
  return result;
}

uint64_t sub_222B98934(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26E80))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B98970()
{
  return &unk_24EB26E80;
}

void sub_222B98980()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B98994()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EB27090;
  return result;
}

void sub_222B989B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EB27090;
}

uint64_t sub_222B989D4(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B98A10()
{
  return &unk_24EB26E90;
}

void sub_222B98A20()
{
  JUMPOUT(0x227678FE4);
}

_QWORD *sub_222B98A34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EB270E8;
  result[1] = v3;
  return result;
}

uint64_t sub_222B98A68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EB270E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_222B98A84(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(**(id **)(a1 + 8), "_kernelCallbackStop");
  *(_BYTE *)(**(_QWORD **)(a1 + 8) + 32) = 0;
  return result;
}

uint64_t sub_222B98AB8(uint64_t a1, uint64_t a2)
{
  if (sub_222B41B9C(a2, (uint64_t)&unk_24EB26EA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_222B98AF4()
{
  return &unk_24EB26EA0;
}

void sub_222B98BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B98C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)DTGPUAPSCounterSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_222B98FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B99058(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "pullAndDrainCounters");

}

void sub_222B99094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_222B993C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void *v12;

  a12 = (void **)&a9;
  sub_222B78004(&a12);

  _Unwind_Resume(a1);
}

void sub_222B99508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void *v12;

  a12 = (void **)&a9;
  sub_222B78004(&a12);

  _Unwind_Resume(a1);
}

id DVTLaunchHelperProcess(void *a1, int a2, pid_t *a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int platform;
  uint64_t v12;
  pid_t v13;
  pid_t v14;
  NSObject *v15;
  dispatch_source_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  _QWORD handler[4];
  NSObject *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, int);
  void *v27;
  __int128 *v28;
  int v29;
  size_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65[2];
  int v66;
  pid_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  if (a3)
    *a3 = -1;
  v31 = *MEMORY[0x24BE2A920];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", DTArchitectureOfProcess(a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  *(_QWORD *)v65 = 0xE00000001;
  v66 = 1;
  v67 = getpid();
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v33 = 0u;
  v30 = 648;
  if (sysctl(v65, 4u, &v33, &v30, 0, 0) || !v30 || (v35 & 0x800) == 0)
    objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_24EB4EC18, *MEMORY[0x24BE2A940]);
  if ((a4 - 1) <= 0xFFFFFFFD)
  {
    if (_dyld_process_info_create())
    {
      platform = _dyld_process_info_get_platform();
      _dyld_process_info_release();
      if (platform == 6)
        objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_24EB4EC30, *MEMORY[0x24BE2A928]);
    }
  }
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = &v33;
  *(_QWORD *)&v34 = 0x3032000000;
  *((_QWORD *)&v34 + 1) = sub_222B9A004;
  *(_QWORD *)&v35 = sub_222B9A014;
  *((_QWORD *)&v35 + 1) = 0;
  v12 = MEMORY[0x24BDAC760];
  v24 = MEMORY[0x24BDAC760];
  v25 = 3221225472;
  v26 = sub_222B9A01C;
  v27 = &unk_24EB2B0C8;
  v29 = a4;
  v28 = &v33;
  v13 = DTXSpawnSubtask();
  v14 = v13;
  if (*(_QWORD *)(*((_QWORD *)&v33 + 1) + 40) && v13)
  {
    dispatch_get_global_queue(0, 0);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = dispatch_source_create(MEMORY[0x24BDAC9F8], v14, 0x80000000uLL, v15);

    if (v16)
    {
      handler[0] = v12;
      handler[1] = 3221225472;
      handler[2] = sub_222B9A174;
      handler[3] = &unk_24EB29678;
      v23 = &v33;
      v17 = v16;
      v22 = v17;
      dispatch_source_set_event_handler(v17, handler);
      dispatch_activate(v17);
      if (a3)
        *a3 = v14;
      v18 = objc_alloc(MEMORY[0x24BE2A948]);
      v19 = (void *)objc_msgSend(v18, "initWithTransport:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 40));

    }
    else
    {
      objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 40), "disconnect");
      v19 = 0;
    }

  }
  else
  {
    if (v13 >= 1)
      kill(v13, 9);
    v19 = 0;
  }
  _Block_object_dispose(&v33, 8);

  return v19;
}

void sub_222B99FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_222B9A004(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_222B9A014(uint64_t a1)
{

}

void sub_222B9A01C(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  mach_msg_return_t v7;
  mach_error_t v8;
  const char *v9;
  pid_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  mach_msg_header_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  pid_t v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  mach_error_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 1) <= 0xFFFFFFFD && (a3 - 1) <= 0xFFFFFFFD)
  {
    v6 = *(_DWORD *)(a1 + 40);
    *(_QWORD *)&v15.msgh_voucher_port = 0;
    v16 = 1;
    v18 = 0x13000000000000;
    v15.msgh_remote_port = a2;
    v15.msgh_local_port = 0;
    *(_QWORD *)&v15.msgh_bits = 0x2880001413;
    v17 = v6;
    v7 = mach_msg_send(&v15);
    if (v7)
    {
      v8 = v7;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v9 = getprogname();
        v10 = getpid();
        v11 = mach_error_string(v8);
        *(_DWORD *)buf = 136315906;
        v20 = v9;
        v21 = 1024;
        v22 = v10;
        v23 = 2080;
        v24 = v11;
        v25 = 1024;
        v26 = v8;
        _os_log_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s[%d]: [error] 'mach_msg_send' failed: %s (%d)\n", buf, 0x22u);
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x24BE2A958], "fileDescriptorHandshakeWithSendPort:", a2);
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

    }
  }
}

void sub_222B9A174(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "disconnect");
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
}

void sub_222B9A214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9A2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9A39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9A494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B9A648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9A7F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9A954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9AA04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_222B9AD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B9AEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_222B9B168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9B23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38)
{
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

void sub_222B9CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_222B9CD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_222B9DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;

  sub_222B9F818((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t sub_222B9DD7C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "counterIdx");
  if (v6 < objc_msgSend(v5, "counterIdx"))
    v7 = -1;
  else
    v7 = 1;

  return v7;
}

void sub_222B9DDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9DDF0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  int v8;

  objc_msgSend(a2, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("GpuTime"));

  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) = a3;
    *a4 = 1;
  }
}

void sub_222B9DE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9DFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9E2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_222B9E45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222B9E5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B9E5D4(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a3 >= 1)
  {
    v34 = v12;
    v35 = v11;
    v36 = v10;
    v37 = v9;
    v38 = v8;
    v39 = v7;
    v40 = v6;
    v41 = v5;
    v42 = v4;
    v43 = v3;
    v44 = v13;
    v45 = v14;
    v15 = a2;
    v16 = result;
    v17 = &OBJC_IVAR___DTXPCRegistration__oneshotHandler;
    v18 = (unint64_t)&a2[a3];
    do
    {
      do
      {
        v19 = v15;
        v21 = *v15++;
        v20 = v21;
        result = objc_msgSend(*(id *)(*(_QWORD *)(v16 + 32) + 96), "sampleMarker", v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
      }
      while ((unint64_t)v19 < v18 && v20 != result);
      if ((unint64_t)v15 >= v18)
        return result;
      v22 = 0;
      do
      {
        v23 = v19[++v22];
        v24 = objc_msgSend(*(id *)(*(_QWORD *)(v16 + 32) + 96), "sampleMarker");
      }
      while ((unint64_t)&v19[v22] < v18 && v23 != v24);
      v26 = v17[172];
      result = objc_msgSend(*(id *)(*(_QWORD *)(v16 + 32) + v26), "count");
      if (result == (v22 * 8 - 8) >> 3)
      {
        v27 = *(_QWORD *)(v16 + 32);
        if (*(_DWORD *)(v27 + 168))
        {
          v28 = *(_QWORD *)(v16 + 40);
          v29 = objc_msgSend(*(id *)(v27 + v26), "count");
          v30 = v15[*(_QWORD *)(*(_QWORD *)(v16 + 32) + 160)];
        }
        else
        {
          v31 = *(_QWORD *)(v27 + 144);
          v32 = v15[*(_QWORD *)(v27 + 160)];
          if (!v31)
          {
            *(_QWORD *)(v27 + 144) = v32;
            goto LABEL_18;
          }
          v33 = (v32 - v31 + 1500000) * (unint64_t)*(unsigned int *)(v27 + 156) / *(unsigned int *)(v27 + 152);
          v28 = *(_QWORD *)(v16 + 40);
          v29 = objc_msgSend(*(id *)(v27 + v26), "count");
          v30 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 136) + v33;
          v17 = &OBJC_IVAR___DTXPCRegistration__oneshotHandler;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))(v28 + 16))(v28, v15, v29, v30, 0, 0, 0);
      }
LABEL_18:
      v15 = &v19[v22];
    }
    while ((unint64_t)&v19[v22] < v18);
  }
  return result;
}

void sub_222B9F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_222B9F54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222B9F728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_222B9F818(uint64_t a1)
{
  void *v2;

  sub_222B9F850(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_222B9F850(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *sub_222B9F894(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_222B9FB20(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_222B9FFC8(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  *((_QWORD *)i + 6) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_222B42F44(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_222B9FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_222BA006C(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_222B9FB20(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_222B9FB5C((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_222B9FB5C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_222B9FF08(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_222B9FE5C(a2, a3);
  }
  else
  {
    return sub_222B9FD64(a2, a3);
  }
}

unint64_t sub_222B9FD64(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_222B9FE5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_222B9FF08(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_222B9FFC8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_222BA006C(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned __int8 *sub_222BA00B8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_222B9FB20((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_222B9FFC8(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_222BA1334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_222BA13A4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", CSSymbolOwnerGetPath());
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByResolvingSymlinksInPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  CSSymbolOwnerGetFlags();
  v5 = *(id *)(a1 + 32);
  v4 = v3;
  CSSymbolOwnerForeachSegment();

}

void sub_222BA1498(uint64_t a1)
{
  uint64_t Range;
  uint64_t v3;
  uint64_t v4;
  const char *Name;
  char *v6;
  char *v7;
  size_t v8;
  id v9;

  Range = CSRegionGetRange();
  v4 = v3;
  Name = (const char *)CSRegionGetName();
  v6 = (char *)Name;
  if (*(_BYTE *)(a1 + 64) && !strncmp(Name, "__LINKEDIT", *(_QWORD *)(a1 + 56)))
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      objc_msgSend(*(id *)(a1 + 32), "_annotateRange:withPath:type:", Range, v4, CFSTR("dyld_shared_cache"), CFSTR("__LINKEDIT"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  else
  {
    v7 = strchr(v6, 32);
    if (v7)
      v8 = v7 - v6;
    else
      v8 = strlen(v6);
    v9 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", v6, v8, 4);
    objc_msgSend(*(id *)(a1 + 32), "_annotateRange:withPath:type:", Range, v4, *(_QWORD *)(a1 + 40), v9);

  }
}

void sub_222BA2870(uint64_t a1)
{
  id v2;

  +[DTApplicationWorkspaceObserver sharedInstance](DTApplicationWorkspaceObserver, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "unregisterNotificationToken:observer:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_222BA2F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_222BA2F20(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && objc_msgSend(v3, "isEqualToString:", CFSTR("pid")))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

}

void sub_222BA2FA0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_222BA2FEC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && objc_msgSend(v3, "isEqualToString:", CFSTR("cid")))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

}

void sub_222BA3100(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 88));
  objc_exception_rethrow();
}

void sub_222BA3114(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_222BA37F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int value;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v3 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = -1;
  v4 = (void *)objc_opt_new();
  sysmon_row_get_value();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  value = xpc_uint64_get_value(v5);
  *((_DWORD *)v17 + 6) = value;

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = sub_222BA3964;
  v12[3] = &unk_24EB2B258;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  v15 = &v16;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v12);
  if (*((_DWORD *)v17 + 6) != -1)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    if (!v11 || objc_msgSend(v11, "containsObject:", v10))
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v10);

  }
  _Block_object_dispose(&v16, 8);

}

void sub_222BA3944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222BA3964(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint32_t v8;
  uint64_t v9;
  id v10;
  size_t v11;
  void *v12;
  void *v13;
  id v14;
  _BOOL8 v15;
  void *v16;
  void *v17;
  pid_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  uint32_t flags[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (objc_msgSend(v3, "integerValue") < 0)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != -1)
    {
      switch(objc_msgSend(v3, "integerValue"))
      {
        case -42000:
          v7 = *(void **)(a1 + 40);
          v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v9 = 0xFFFFFFFFLL;
          v22 = -1;
          v21 = 12;
          v10 = v7;
          if (sysctlnametomib("sysctl.proc_cputype", (int *)flags, &v21) != -1)
          {
            v11 = v21;
            flags[v21] = v8;
            v20 = 4;
            v21 = v11 + 1;
            if (sysctl((int *)flags, v11 + 1, &v22, &v20, 0, 0) == -1)
              v22 = -1;
            else
              v9 = v22;
          }
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v9);
          v19 = objc_claimAutoreleasedReturnValue();
          goto LABEL_20;
        case -41999:
          v13 = *(void **)(a1 + 40);
          flags[0] = 0;
          v14 = v13;
          if (csops() == -1)
            v15 = 0;
          else
            v15 = 0;
          goto LABEL_13;
        case -41998:
          v14 = *(id *)(a1 + 40);
          v15 = sandbox_check() != 0;
LABEL_13:
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "addObject:", v16);

          goto LABEL_22;
        case -41997:
          v17 = *(void **)(a1 + 40);
          v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          flags[0] = 0;
          v10 = v17;
          if (proc_get_dirty(v18, flags))
            objc_msgSend(MEMORY[0x24BDBCEF8], "null");
          else
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", (flags[0] & 7) == 3);
          v19 = objc_claimAutoreleasedReturnValue();
LABEL_20:
          v4 = (void *)v19;
          objc_msgSend(v10, "addObject:", v19);

          goto LABEL_21;
        default:
          break;
      }
    }
    v12 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v4);
  }
  else
  {
    objc_msgSend(v3, "unsignedIntValue");
    sysmon_row_get_value();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(void **)(a1 + 40);
    sub_222BA3C30(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v6);

  }
LABEL_21:

LABEL_22:
}

id sub_222BA3C30(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int64_t value;
  id v6;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  _QWORD applier[4];
  id v14;

  v1 = a1;
  v2 = MEMORY[0x22767A790]();
  if (v2 == MEMORY[0x24BDACF98])
  {
    v4 = (void *)MEMORY[0x24BDD16E0];
    value = xpc_date_get_value(v1);
LABEL_15:
    objc_msgSend(v4, "numberWithLongLong:", value);
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (v2 == MEMORY[0x24BDACFF8])
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", xpc_uint64_get_value(v1));
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (v2 == MEMORY[0x24BDACFD0])
  {
    v4 = (void *)MEMORY[0x24BDD16E0];
    value = xpc_int64_get_value(v1);
    goto LABEL_15;
  }
  if (v2 == MEMORY[0x24BDACFF0])
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", xpc_string_get_string_ptr(v1));
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (v2 == MEMORY[0x24BDACF80])
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", xpc_BOOL_get_value(v1));
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (v2 == MEMORY[0x24BDACFA8])
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", xpc_double_get_value(v1));
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (v2 == MEMORY[0x24BDACFE0])
    goto LABEL_11;
  if (v2 == MEMORY[0x24BDACF78])
  {
    v8 = (void *)objc_opt_new();
    applier[0] = MEMORY[0x24BDAC760];
    applier[1] = 3221225472;
    applier[2] = sub_222BA5E00;
    applier[3] = &unk_24EB2B3B8;
    v6 = v8;
    v14 = v6;
    xpc_array_apply(v1, applier);
    v9 = v14;
LABEL_23:

    goto LABEL_17;
  }
  if (v2 == MEMORY[0x24BDACFA0])
  {
    v10 = (void *)objc_opt_new();
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = sub_222BA5E40;
    v11[3] = &unk_24EB2B3E0;
    v6 = v10;
    v12 = v6;
    xpc_dictionary_apply(v1, v11);
    v9 = v12;
    goto LABEL_23;
  }
  if (v2 == MEMORY[0x24BDAD000])
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", xpc_uuid_get_bytes(v1));
    goto LABEL_16;
  }
LABEL_11:
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v3 = objc_claimAutoreleasedReturnValue();
LABEL_16:
  v6 = (id)v3;
LABEL_17:

  return v6;
}

void sub_222BA3EB4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  int v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "removeObject:", v6);
  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 112), "objectForKeyedSubscript:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "removeObjectForKey:", v6);

}

void sub_222BA412C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 160);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_222BA41C0;
  v7[3] = &unk_24EB2B2D0;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

}

void sub_222BA41C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  size_t v14;
  __int128 v15;
  __int128 v16;
  int v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (objc_msgSend(v3, "integerValue") < 0)
  {
    v7 = objc_msgSend(v3, "integerValue");

    v8 = *(void **)(a1 + 40);
    if (v7 == -42000)
    {
      *(_QWORD *)v17 = 0x500000002;
      v15 = 0u;
      v16 = 0u;
      v14 = 32;
      v9 = v8;
      if (sysctl(v17, 2u, &v15, &v14, 0, 0))
        v10 = 0;
      else
        v10 = v16;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObject:", v11);

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:");

    }
  }
  else
  {
    objc_msgSend(v3, "unsignedIntValue");

    sysmon_row_get_value();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(void **)(a1 + 40);
    v12 = v4;
    sub_222BA3C30(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v6);

  }
}

void sub_222BA45FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t value;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = -1;
  v4 = (void *)objc_opt_new();
  sysmon_row_get_value();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  value = xpc_uint64_get_value(v5);
  v17[3] = value;

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 168);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = sub_222BA4758;
  v12[3] = &unk_24EB2B258;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  v15 = &v16;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v12);
  if (v17[3] != -1)
  {
    v10 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v11);

  }
  _Block_object_dispose(&v16, 8);

}

void sub_222BA473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_222BA4758(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "integerValue") < 0)
  {
    v6 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v3);
  }
  else
  {
    objc_msgSend(v7, "unsignedIntValue");
    sysmon_row_get_value();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(void **)(a1 + 40);
    sub_222BA3C30(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
}

void sub_222BA4804(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  int v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "removeObject:", v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "objectForKeyedSubscript:", v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
    objc_msgSend(*(id *)(a1 + 48), "removeObjectForKey:", v6);

}

uint64_t sub_222BA4D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setObject:forKeyedSubscript:", a3, a2);
}

uint64_t sub_222BA4D34(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "removeObjectForKey:", a2);
}

uint64_t sub_222BA4D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setObject:forKeyedSubscript:", a3, a2);
}

uint64_t sub_222BA4D54(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "removeObjectForKey:", a2);
}

void sub_222BA5384(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    sub_222BC78D0();
  v4 = (void *)v3;
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_222BA53E0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = mach_absolute_time();
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 80);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222BA546C;
  block[3] = &unk_24EB29990;
  block[4] = v5;
  v9 = v3;
  v10 = v4;
  v7 = v3;
  dispatch_async(v6, block);

}

uint64_t sub_222BA546C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleSysmonProcessTable:startTime:endTime:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200) = *(_QWORD *)(a1 + 48) + 1;
  return result;
}

void sub_222BA54A8(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_msgSend(v2, "integerValue") & 0x8000000000000000) == 0)
  {
    objc_msgSend(v2, "unsignedIntValue");
    sysmon_request_add_attribute();
  }

}

void sub_222BA54FC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    sub_222BC78F8();
  v4 = (void *)v3;
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_222BA5558(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = mach_absolute_time();
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 80);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222BA55E4;
  block[3] = &unk_24EB29990;
  block[4] = v5;
  v9 = v3;
  v10 = v4;
  v7 = v3;
  dispatch_async(v6, block);

}

uint64_t sub_222BA55E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleSysmonSystemTable:startTime:endTime:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) = *(_QWORD *)(a1 + 48) + 1;
  return result;
}

void sub_222BA5620(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_msgSend(v2, "integerValue") & 0x8000000000000000) == 0)
  {
    objc_msgSend(v2, "unsignedIntValue");
    sysmon_request_add_attribute();
  }

}

void sub_222BA5674(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    sub_222BC7920();
  v4 = (void *)v3;
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_222BA56D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = mach_absolute_time();
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 80);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222BA575C;
  block[3] = &unk_24EB29990;
  block[4] = v5;
  v9 = v3;
  v10 = v4;
  v7 = v3;
  dispatch_async(v6, block);

}

uint64_t sub_222BA575C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleSysmonCoalitionTable:startTime:endTime:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216) = *(_QWORD *)(a1 + 48) + 1;
  return result;
}

void sub_222BA5798(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_msgSend(v2, "integerValue") & 0x8000000000000000) == 0)
  {
    objc_msgSend(v2, "unsignedIntValue");
    sysmon_request_add_attribute();
  }

}

void sub_222BA57EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = mach_absolute_time();
  v6 = (id)objc_opt_new();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_24EB4ED38, CFSTR("Type"));
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v3, CFSTR("StartMachAbsTime"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v4, CFSTR("EndMachAbsTime"));

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) = v2 + 1;
  objc_msgSend(*(id *)(a1 + 32), "_addCPUUsageToSample:", v6);
  objc_msgSend(*(id *)(a1 + 32), "_addSample:", v6);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 32) && *(_QWORD *)(v5 + 48) + *(_QWORD *)(v5 + 40) < v2)
    objc_msgSend((id)v5, "_purgeOldSamplesForCurrentTime:", v2);

}

void sub_222BA5C20(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 88));
  objc_exception_rethrow();
}

void sub_222BA5C54(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_222BA5C68(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;

  v4 = a3;
  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("EndMachAbsTime"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "unsignedLongLongValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("EndMachAbsTime"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "unsignedLongLongValue");
  if (v6 > v8)
    return -1;
  else
    return v6 < v8;
}

uint64_t sub_222BA5CF4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "insertObject:atIndex:", a2, 0);
}

uint64_t sub_222BA5E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a1 + 32);
  sub_222BA3C30(a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  return 1;
}

uint64_t sub_222BA5E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  sub_222BA3C30(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  return 1;
}

id DTUVPreviewServiceLog()
{
  if (qword_25576FC50 != -1)
    dispatch_once(&qword_25576FC50, &unk_24EB27A90);
  return (id)qword_25576FC48;
}

void sub_222BA5EF0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.dt.Previews", "Service");
  v1 = (void *)qword_25576FC48;
  qword_25576FC48 = (uint64_t)v0;

}

void sub_222BA5F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222BA605C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_222BA6080(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  int8x8_t v18;
  uint8x8_t v19;
  __int32 v20;
  void *v21;
  void *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t j;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  uint64_t v55;
  void *v56;
  void *v57;
  __CFString *v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  __CFString *v68;
  void *v69;
  void *v70;
  void *v71;
  __CFString *v72;
  void *v73;
  void *CFProperty;
  void *v75;
  void *v76;
  void *v77;
  id obj;
  id v79;
  __CFString *v80;
  uint64_t v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[4];
  _QWORD v100[4];
  _BYTE v101[128];
  _BYTE v102[128];
  _BYTE v103[128];
  _QWORD v104[3];
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v70 = v1;
  CFProperty = (void *)IORegistryEntryCreateCFProperty(objc_msgSend(v1, "acceleratorPort"), CFSTR("MetalPluginName"), 0, 0);
  v76 = (void *)IORegistryEntryCreateCFProperty(objc_msgSend(v1, "acceleratorPort"), CFSTR("MetalStatisticsName"), 0, 0);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v76;
    if (objc_msgSend(v2, "count"))
    {
      objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
      v80 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v80 = 0;
    }

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_9:
      v80 = CFSTR("MetalStatistics");
      goto LABEL_10;
    }
    v80 = v76;
  }
  if (!v80)
    goto LABEL_9;
LABEL_10:
  v71 = (void *)GRCCopyAllCounterSourceGroup();
  if (!objc_msgSend(v71, "count"))
    goto LABEL_14;
  objc_msgSend(v71, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x24BDBCED8];
  objc_msgSend(v3, "features");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ConstantAGX_CoreConfig"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dictionaryWithDictionary:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v77 = v7;
    if (objc_msgSend(v7, "count"))
      goto LABEL_16;
  }
  else
  {
LABEL_14:
    v77 = 0;
  }
  v8 = (void *)MEMORY[0x24BDBCED8];
  v9 = (void *)IORegistryEntryCreateCFProperty(objc_msgSend(v1, "acceleratorPort"), CFSTR("GPUConfigurationVariable"), 0, 0);
  objc_msgSend(v8, "dictionaryWithDictionary:", v9);
  v10 = objc_claimAutoreleasedReturnValue();

  v77 = (void *)v10;
LABEL_16:
  GRCReleaseAllCounterSourceGroup();
  if (v77)
  {
    objc_msgSend(v77, "objectForKeyedSubscript:", CFSTR("core_mask_list"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_opt_new();
    if (v11 && objc_msgSend(v11, "count"))
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v13 = v11;
      v14 = 0;
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v95, v105, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v96;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v96 != v16)
              objc_enumerationMutation(v13);
            v18.i32[0] = objc_msgSend(*(id *)(*((_QWORD *)&v95 + 1) + 8 * i), "unsignedIntValue");
            v19 = (uint8x8_t)vcnt_s8(v18);
            v19.i16[0] = vaddlv_u8(v19);
            v20 = v19.i32[0];
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v19.u32[0]);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v21);

            v14 = (v20 + v14);
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v95, v105, 16);
        }
        while (v15);
      }

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v14);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "setObject:forKeyedSubscript:", v22, CFSTR("num_cores"));

      objc_msgSend(v77, "setObject:forKeyedSubscript:", v12, CFSTR("num_cores_per_ringbuffer"));
    }

    v1 = v70;
  }
  v23 = (__CFString *)IORegistryEntryCreateCFProperty(objc_msgSend(v1, "acceleratorPort"), CFSTR("AGXInternalPerfCounterResourcesPath"), 0, 0);
  v24 = v23;
  v25 = CFSTR("/AppleInternal/Library/AGX/Performance");
  if (v23)
    v25 = v23;
  v72 = v25;
  v68 = v24;
  -[__CFString stringByAppendingPathComponent:](v72, "stringByAppendingPathComponent:", CFProperty);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v104[0] = v26;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("/System/Library/Extensions/%@.bundle"), CFProperty);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v104[1] = v27;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("/System/Library/Extensions/%@.bundle/Contents/Resources"), CFProperty);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v104[2] = v28;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v104, 3);
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  obj = v69;
  v29 = 0;
  v30 = 0;
  v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v103, 16);
  if (v31)
  {
    v32 = *(_QWORD *)v92;
    while (2)
    {
      v33 = 0;
      v34 = (void *)v29;
      v35 = (void *)v30;
      do
      {
        if (*(_QWORD *)v92 != v32)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v91 + 1) + 8 * v33), "stringByAppendingPathComponent:", v80);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "stringByAppendingString:", CFSTR("-counters.plist"));
        v37 = objc_claimAutoreleasedReturnValue();

        v38 = (void *)v37;
        objc_msgSend(v36, "stringByAppendingString:", CFSTR("-derived.js"));
        v39 = objc_claimAutoreleasedReturnValue();

        v40 = (void *)v39;
        if (objc_msgSend(v82, "fileExistsAtPath:", v38)
          && (objc_msgSend(v82, "fileExistsAtPath:", v39) & 1) != 0)
        {
          v29 = v39;
          v30 = (uint64_t)v38;
LABEL_43:

          goto LABEL_44;
        }
        objc_msgSend(v38, "stringByReplacingOccurrencesOfString:withString:", CFSTR("AGXMetalStatistics"), CFSTR("AGXMetalStatisticsExternal"));
        v30 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v40, "stringByReplacingOccurrencesOfString:withString:", CFSTR("AGXMetalStatistics"), CFSTR("AGXMetalStatisticsExternal"));
        v29 = objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v82, "fileExistsAtPath:", v30)
          && objc_msgSend(v82, "fileExistsAtPath:", v29))
        {
          goto LABEL_43;
        }

        ++v33;
        v34 = (void *)v29;
        v35 = (void *)v30;
      }
      while (v31 != v33);
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v103, 16);
      if (v31)
        continue;
      break;
    }
  }
LABEL_44:
  v73 = (void *)v29;
  v75 = (void *)v30;

  v41 = (void *)objc_opt_new();
  v42 = 50000;
  if (v30 && v29)
  {
    if (objc_msgSend(v82, "fileExistsAtPath:", v30)
      && objc_msgSend(v82, "fileExistsAtPath:", v29))
    {
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithContentsOfFile:", v30);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("Instruments"));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v67, "objectForKeyedSubscript:", CFSTR("DefaultSamplingInterval"));
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = objc_msgSend(v43, "unsignedIntegerValue");

      v45 = 50;
      if (v44 > 0x32)
        v45 = v44;
      v64 = v45;
      objc_msgSend(v67, "objectForKeyedSubscript:", CFSTR("Profiles"));
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "allValues");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v79 = v46;
      v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v87, v102, 16);
      if (v47)
      {
        v81 = *(_QWORD *)v88;
        do
        {
          for (j = 0; j != v47; ++j)
          {
            if (*(_QWORD *)v88 != v81)
              objc_enumerationMutation(v79);
            objc_msgSend(*(id *)(*((_QWORD *)&v87 + 1) + 8 * j), "objectForKeyedSubscript:", CFSTR("RawCounterWidth"));
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v49;
            if (v49)
            {
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              objc_msgSend(v49, "allKeys");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v83, v101, 16);
              if (v52)
              {
                v53 = *(_QWORD *)v84;
                do
                {
                  for (k = 0; k != v52; ++k)
                  {
                    if (*(_QWORD *)v84 != v53)
                      objc_enumerationMutation(v51);
                    v55 = *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * k);
                    objc_msgSend(v50, "objectForKeyedSubscript:", v55);
                    v56 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v41, "setObject:forKeyedSubscript:", v56, v55);

                  }
                  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v83, v101, 16);
                }
                while (v52);
              }

            }
          }
          v46 = v79;
          v47 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v87, v102, 16);
        }
        while (v47);
      }

      v42 = 1000 * v64;
    }
    else
    {
      v42 = 50000;
    }
  }
  -[__CFString stringByAppendingPathComponent:](v72, "stringByAppendingPathComponent:", CFSTR("../AGXRawCounterMapping.csv"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (v57)
  {
    v58 = &stru_24EB2CF78;
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = objc_msgSend(v59, "fileExistsAtPath:", v57);

    if (v60)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithContentsOfFile:encoding:error:", v57, 4, 0);
      v58 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v58 = &stru_24EB2CF78;
  }
  v99[0] = CFSTR("GPUConfigurationVariables");
  v99[1] = CFSTR("RawCounterWidth");
  v100[0] = v77;
  v100[1] = v41;
  v99[2] = CFSTR("RDESampleInterval");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v42);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v99[3] = CFSTR("CounterMapping");
  v100[2] = v61;
  v100[3] = v58;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v100, v99, 4);
  v62 = (void *)objc_claimAutoreleasedReturnValue();

  return v62;
}

void sub_222BA6A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,_Unwind_Exception *exception_object,void *a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_222BA7334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);

  sub_222BA8310((uint64_t)&a42);
  sub_222BA8310((uint64_t)&a51);
  sub_222B9F818((uint64_t)&a60);

  _Unwind_Resume(a1);
}

void sub_222BA7624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_222BA7704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222BA7BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_222BA7E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_222BA7FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *sub_222BA8090(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_222B9FB20(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_222B9FFC8(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  v17 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v18 = *((_QWORD *)a3 + 2);
  v19 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_222B42F44(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v26 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_222BA82F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_222BA006C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_222BA8310(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_222BA8358(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_222B42F44(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_222BA855C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_222BA8570(uint64_t a1, char *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)__src) >> 3;
      if (v21 >= a5)
      {
        v23 = *(char **)(v9 - 8);
        v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (_QWORD)__src) < 1)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          v27 = v20;
          v28 = *(_QWORD **)(v9 - 8);
          do
          {
            *v28++ = v27[2];
            v27 = (_QWORD *)*v27;
            v23 += 8;
          }
          while (v27 != a4);
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        v29 = &__src[8 * a5];
        v30 = &v23[-8 * a5];
        v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          v31 = v23;
          do
          {
            v32 = *(_QWORD *)v30;
            v30 += 8;
            *(_QWORD *)v31 = v32;
            v31 += 8;
          }
          while ((unint64_t)v30 < v12);
        }
        *(_QWORD *)(a1 + 8) = v31;
        if (v23 != v29)
          memmove(&v23[-8 * ((v23 - v29) >> 3)], __src, v23 - v29);
        if (v20 != v7)
        {
          v33 = v5;
          do
          {
            *(_QWORD *)v33 = v7[2];
            v33 += 8;
            v7 = (_QWORD *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 >> 61)
        sub_222B348D4();
      v15 = (__src - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v39 = v9;
      if (v17)
        v18 = (char *)sub_222B431C4(v9, v17);
      else
        v18 = 0;
      v24 = &v18[8 * v15];
      __p = v18;
      v36 = v24;
      v38 = &v18[8 * v17];
      v25 = 8 * a5;
      v26 = &v24[8 * a5];
      do
      {
        *(_QWORD *)v24 = v7[2];
        v24 += 8;
        v7 = (_QWORD *)*v7;
        v25 -= 8;
      }
      while (v25);
      v37 = v26;
      v5 = sub_222B69F50((void **)a1, (uint64_t)&__p, v5);
      if (v37 != v36)
        v37 += (v36 - v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_222BA8798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *sub_222BA87D0(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(a2 - 1);
        v42 = *v8;
        if (v41 < *v8)
        {
          *v8 = v41;
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return sub_222BA8EA0(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return sub_222BA90CC(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v43 = v8 + 1;
        v44 = v8 + 2;
        v45 = v8 + 3;
        result = sub_222BA90CC(v8, v8 + 1, v8 + 2, v8 + 3);
        v46 = *(a2 - 1);
        v47 = v8[3];
        if (v46 < v47)
        {
          *v45 = v46;
          *(a2 - 1) = v47;
          v48 = *v45;
          v49 = *v44;
          if (*v45 < *v44)
          {
            *v44 = v48;
            *v45 = v49;
            v50 = *v43;
            if (v48 < *v43)
            {
              v8[1] = v48;
              v8[2] = v50;
              v51 = *v8;
              if (v48 < *v8)
              {
                *v8 = v48;
                v8[1] = v51;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v52 = v8 + 1;
          v54 = v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = *v56;
                v56 = v52;
                v58 = *v52;
                if (v58 < v57)
                {
                  v59 = v55;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v59 + 8) = v57;
                    if (!v59)
                      break;
                    v57 = *(unint64_t *)((char *)v8 + v59 - 8);
                    v59 -= 8;
                    if (v58 >= v57)
                    {
                      v60 = (unint64_t *)((char *)v8 + v59 + 8);
                      goto LABEL_89;
                    }
                  }
                  v60 = v8;
LABEL_89:
                  *v60 = v58;
                }
                v52 = v56 + 1;
                v55 += 8;
              }
              while (v56 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v93 = 0;
            v94 = 1;
            while (1)
            {
              v95 = v8[v93];
              v93 = v94;
              v96 = *v52;
              if (*v52 < v95)
                break;
LABEL_139:
              v94 = v93 + 1;
              if (++v52 == a2)
                return result;
            }
            v97 = 0;
            while (1)
            {
              v98 = &v52[v97];
              *v98 = v95;
              if (!(v93 + v97))
                break;
              v95 = *(v98 - 2);
              --v97;
              if (v96 >= v95)
              {
                v52[v97] = v96;
                goto LABEL_139;
              }
            }
LABEL_141:
            __break(1u);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  v67 = v65[1];
                  v68 = v66 >= v67;
                  if (v66 <= v67)
                    v66 = v65[1];
                  if (!v68)
                  {
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v69 = &v8[v63];
                v70 = *v69;
                if (v66 >= *v69)
                {
                  do
                  {
                    v71 = v65;
                    *v69 = v66;
                    if (v61 < v64)
                      break;
                    v72 = (2 * v64) | 1;
                    v65 = &v8[v72];
                    v64 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v64 >= (uint64_t)v10)
                    {
                      v64 = v72;
                    }
                    else
                    {
                      result = v65 + 1;
                      v73 = v65[1];
                      v74 = v66 >= v73;
                      if (v66 <= v73)
                        v66 = v65[1];
                      if (v74)
                        v64 = v72;
                      else
                        ++v65;
                    }
                    v69 = v71;
                  }
                  while (v66 >= v70);
                  *v71 = v70;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *v8;
              v78 = v8;
              do
              {
                v79 = &v78[v76];
                v82 = v79[1];
                v80 = v79 + 1;
                v81 = v82;
                v83 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v76 = v83;
                }
                else
                {
                  v84 = v80[1];
                  v85 = v81 >= v84;
                  if (v81 <= v84)
                    v81 = v80[1];
                  if (v85)
                    v76 = v83;
                  else
                    ++v80;
                }
                *v78 = v81;
                v78 = v80;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v80 == --a2)
              {
                *v80 = v77;
              }
              else
              {
                *v80 = *a2;
                *a2 = v77;
                v86 = (char *)v80 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v8[v87];
                  v89 = *v88;
                  v90 = *v80;
                  if (*v88 < *v80)
                  {
                    do
                    {
                      v91 = v88;
                      *v80 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v8[v87];
                      v89 = *v88;
                      v80 = v91;
                    }
                    while (*v88 < v90);
                    *v91 = v90;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_222BA8EA0(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_222BA8EA0(v7, &v7[v10 >> 1], a2 - 1);
          sub_222BA8EA0(v7 + 1, v12 - 1, a2 - 2);
          sub_222BA8EA0(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_222BA8EA0(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v32 = v7 + 1;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              ++v32;
            }
            while (v14 >= *v8);
          }
          else
          {
            v30 = v7 + 1;
            do
            {
              if (v30 == a2)
                goto LABEL_141;
              v31 = *v30++;
            }
            while (v14 >= v31);
            v8 = v30 - 1;
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            while (v33 != v7)
            {
              v34 = *--v33;
              if (v14 >= v34)
                goto LABEL_50;
            }
            goto LABEL_141;
          }
LABEL_50:
          if (v8 < v33)
          {
            v35 = *v8;
            v36 = *v33;
            do
            {
              *v8 = v36;
              v37 = v8 + 1;
              *v33 = v35;
              do
              {
                if (v37 == a2)
                  goto LABEL_141;
                v38 = *v37++;
                v35 = v38;
              }
              while (v14 >= v38);
              v8 = v37 - 1;
              do
              {
                if (v33 == v7)
                  goto LABEL_141;
                v39 = *--v33;
                v36 = v39;
              }
              while (v14 < v39);
            }
            while (v8 < v33);
          }
          v40 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v40;
          a4 = 0;
          *v40 = v14;
          continue;
        }
        v15 = 0;
        do
        {
          v16 = &v7[v15 + 1];
          if (v16 == a2)
            goto LABEL_141;
          v17 = *v16;
          ++v15;
        }
        while (*v16 < v14);
        v18 = &v7[v15];
        v19 = a2;
        if (v15 != 1)
        {
          while (v19 != v7)
          {
            v20 = *--v19;
            if (v20 < v14)
              goto LABEL_21;
          }
          goto LABEL_141;
        }
        v19 = a2;
        do
        {
          if (v18 >= v19)
            break;
          v21 = *--v19;
        }
        while (v21 >= v14);
LABEL_21:
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v15];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            v25 = v23 + 1;
            do
            {
              if (v25 == a2)
                goto LABEL_141;
              v26 = *v25++;
              v17 = v26;
            }
            while (v26 < v14);
            v23 = v25 - 1;
            do
            {
              if (v24 == v7)
                goto LABEL_141;
              v27 = *--v24;
              v22 = v27;
            }
            while (v27 >= v14);
          }
          while (v23 < v24);
          v28 = v25 - 2;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_37:
          result = (unint64_t *)sub_222BA87D0(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = sub_222BA8F10(v7, v28);
        v8 = v28 + 1;
        result = (unint64_t *)sub_222BA8F10(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_37;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_222BA8EA0(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 >= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_222BA8F10(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_222BA8EA0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_222BA90CC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_222BA90CC(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (v20 < v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*v19 < *v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (v22 < *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (v22 < *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_222BA8EA0(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t *sub_222BA90CC(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = sub_222BA8EA0(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t *sub_222BA9148(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(a2 - 1);
        v42 = *v8;
        if (v41 < *v8)
        {
          *v8 = v41;
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return sub_222BA8EA0(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return sub_222BA90CC(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v43 = v8 + 1;
        v44 = v8 + 2;
        v45 = v8 + 3;
        result = sub_222BA90CC(v8, v8 + 1, v8 + 2, v8 + 3);
        v46 = *(a2 - 1);
        v47 = v8[3];
        if (v46 < v47)
        {
          *v45 = v46;
          *(a2 - 1) = v47;
          v48 = *v45;
          v49 = *v44;
          if (*v45 < *v44)
          {
            *v44 = v48;
            *v45 = v49;
            v50 = *v43;
            if (v48 < *v43)
            {
              v8[1] = v48;
              v8[2] = v50;
              v51 = *v8;
              if (v48 < *v8)
              {
                *v8 = v48;
                v8[1] = v51;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v52 = v8 + 1;
          v54 = v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = *v56;
                v56 = v52;
                v58 = *v52;
                if (v58 < v57)
                {
                  v59 = v55;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v59 + 8) = v57;
                    if (!v59)
                      break;
                    v57 = *(unint64_t *)((char *)v8 + v59 - 8);
                    v59 -= 8;
                    if (v58 >= v57)
                    {
                      v60 = (unint64_t *)((char *)v8 + v59 + 8);
                      goto LABEL_89;
                    }
                  }
                  v60 = v8;
LABEL_89:
                  *v60 = v58;
                }
                v52 = v56 + 1;
                v55 += 8;
              }
              while (v56 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v93 = 0;
            v94 = 1;
            while (1)
            {
              v95 = v8[v93];
              v93 = v94;
              v96 = *v52;
              if (*v52 < v95)
                break;
LABEL_139:
              v94 = v93 + 1;
              if (++v52 == a2)
                return result;
            }
            v97 = 0;
            while (1)
            {
              v98 = &v52[v97];
              *v98 = v95;
              if (!(v93 + v97))
                break;
              v95 = *(v98 - 2);
              --v97;
              if (v96 >= v95)
              {
                v52[v97] = v96;
                goto LABEL_139;
              }
            }
LABEL_141:
            __break(1u);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  v67 = v65[1];
                  v68 = v66 >= v67;
                  if (v66 <= v67)
                    v66 = v65[1];
                  if (!v68)
                  {
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v69 = &v8[v63];
                v70 = *v69;
                if (v66 >= *v69)
                {
                  do
                  {
                    v71 = v65;
                    *v69 = v66;
                    if (v61 < v64)
                      break;
                    v72 = (2 * v64) | 1;
                    v65 = &v8[v72];
                    v64 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v64 >= (uint64_t)v10)
                    {
                      v64 = v72;
                    }
                    else
                    {
                      result = v65 + 1;
                      v73 = v65[1];
                      v74 = v66 >= v73;
                      if (v66 <= v73)
                        v66 = v65[1];
                      if (v74)
                        v64 = v72;
                      else
                        ++v65;
                    }
                    v69 = v71;
                  }
                  while (v66 >= v70);
                  *v71 = v70;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *v8;
              v78 = v8;
              do
              {
                v79 = &v78[v76];
                v82 = v79[1];
                v80 = v79 + 1;
                v81 = v82;
                v83 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v76 = v83;
                }
                else
                {
                  v84 = v80[1];
                  v85 = v81 >= v84;
                  if (v81 <= v84)
                    v81 = v80[1];
                  if (v85)
                    v76 = v83;
                  else
                    ++v80;
                }
                *v78 = v81;
                v78 = v80;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v80 == --a2)
              {
                *v80 = v77;
              }
              else
              {
                *v80 = *a2;
                *a2 = v77;
                v86 = (char *)v80 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v8[v87];
                  v89 = *v88;
                  v90 = *v80;
                  if (*v88 < *v80)
                  {
                    do
                    {
                      v91 = v88;
                      *v80 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v8[v87];
                      v89 = *v88;
                      v80 = v91;
                    }
                    while (*v88 < v90);
                    *v91 = v90;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_222BA8EA0(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_222BA8EA0(v7, &v7[v10 >> 1], a2 - 1);
          sub_222BA8EA0(v7 + 1, v12 - 1, a2 - 2);
          sub_222BA8EA0(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_222BA8EA0(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v32 = v7 + 1;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              ++v32;
            }
            while (v14 >= *v8);
          }
          else
          {
            v30 = v7 + 1;
            do
            {
              if (v30 == a2)
                goto LABEL_141;
              v31 = *v30++;
            }
            while (v14 >= v31);
            v8 = v30 - 1;
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            while (v33 != v7)
            {
              v34 = *--v33;
              if (v14 >= v34)
                goto LABEL_50;
            }
            goto LABEL_141;
          }
LABEL_50:
          if (v8 < v33)
          {
            v35 = *v8;
            v36 = *v33;
            do
            {
              *v8 = v36;
              v37 = v8 + 1;
              *v33 = v35;
              do
              {
                if (v37 == a2)
                  goto LABEL_141;
                v38 = *v37++;
                v35 = v38;
              }
              while (v14 >= v38);
              v8 = v37 - 1;
              do
              {
                if (v33 == v7)
                  goto LABEL_141;
                v39 = *--v33;
                v36 = v39;
              }
              while (v14 < v39);
            }
            while (v8 < v33);
          }
          v40 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v40;
          a4 = 0;
          *v40 = v14;
          continue;
        }
        v15 = 0;
        do
        {
          v16 = &v7[v15 + 1];
          if (v16 == a2)
            goto LABEL_141;
          v17 = *v16;
          ++v15;
        }
        while (*v16 < v14);
        v18 = &v7[v15];
        v19 = a2;
        if (v15 != 1)
        {
          while (v19 != v7)
          {
            v20 = *--v19;
            if (v20 < v14)
              goto LABEL_21;
          }
          goto LABEL_141;
        }
        v19 = a2;
        do
        {
          if (v18 >= v19)
            break;
          v21 = *--v19;
        }
        while (v21 >= v14);
LABEL_21:
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v15];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            v25 = v23 + 1;
            do
            {
              if (v25 == a2)
                goto LABEL_141;
              v26 = *v25++;
              v17 = v26;
            }
            while (v26 < v14);
            v23 = v25 - 1;
            do
            {
              if (v24 == v7)
                goto LABEL_141;
              v27 = *--v24;
              v22 = v27;
            }
            while (v27 >= v14);
          }
          while (v23 < v24);
          v28 = v25 - 2;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_37:
          result = (unint64_t *)sub_222BA9148(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = sub_222BA9818(v7, v28);
        v8 = v28 + 1;
        result = (unint64_t *)sub_222BA9818(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_37;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_222BA9818(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_222BA8EA0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_222BA90CC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_222BA90CC(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (v20 < v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*v19 < *v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (v22 < *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (v22 < *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_222BA8EA0(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

id DTUVMakeServiceMessage(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (qword_25576FC68 != -1)
  {
    dispatch_once(&qword_25576FC68, &unk_24EB27AB0);
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a4)
LABEL_3:
    *a4 = objc_retainAutorelease((id)qword_25576FC60);
LABEL_4:
  v10 = (void *)objc_msgSend(objc_alloc((Class)qword_25576FC58), "initWithMessageType:payload:replyHandler:", v7, v8, v9);

  return v10;
}

void sub_222BA9A88()
{
  char v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v0 = sub_222BA9B3C(&v15);
  v1 = v15;
  v2 = v1;
  if ((v0 & 1) == 0)
  {
    v13 = v1;
    v12 = qword_25576FC60;
    qword_25576FC60 = (uint64_t)v13;
LABEL_6:

    goto LABEL_7;
  }
  qword_25576FC58 = (uint64_t)NSClassFromString(CFSTR("UVServiceHubMessage"));
  if (!qword_25576FC58)
  {
    DTUVServiceError(CFSTR("No class named 'UVServiceHubMessage' after loading PreviewsOSSupport."), v3, v4, v5, v6, v7, v8, v9, v14);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)qword_25576FC60;
    qword_25576FC60 = v10;

    DTUVPreviewServiceLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_222BC7948();
    goto LABEL_6;
  }
LABEL_7:

}

uint64_t sub_222BA9B3C(_QWORD *a1)
{
  if (qword_25576FCA8 != -1)
  {
    dispatch_once(&qword_25576FCA8, &unk_24EB2B498);
    if (!a1)
      return byte_25576FC98;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = objc_retainAutorelease((id)qword_25576FCA0);
  return byte_25576FC98;
}

id DTUVSharedServiceFactory(_QWORD *a1)
{
  if (qword_25576FC80 != -1)
  {
    dispatch_once(&qword_25576FC80, &unk_24EB27B10);
    if (!a1)
      return (id)qword_25576FC70;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = objc_retainAutorelease((id)qword_25576FC78);
  return (id)qword_25576FC70;
}

void sub_222BA9C04()
{
  char v0;
  id v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;

  v17 = 0;
  v0 = sub_222BA9B3C(&v17);
  v1 = v17;
  v2 = v1;
  if ((v0 & 1) != 0)
  {
    v3 = NSClassFromString(CFSTR("UVServiceHubServiceFactory"));
    if (v3)
    {
      v11 = objc_alloc_init(v3);
      v12 = qword_25576FC70;
      qword_25576FC70 = (uint64_t)v11;
    }
    else
    {
      DTUVServiceError(CFSTR("No class named 'UVServiceHubServiceFactory' after loading PreviewsOSSupport."), v4, v5, v6, v7, v8, v9, v10, v16);
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = (void *)qword_25576FC78;
      qword_25576FC78 = v14;

      DTUVPreviewServiceLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_222BC79CC();
    }
  }
  else
  {
    v13 = v1;
    v12 = qword_25576FC78;
    qword_25576FC78 = (uint64_t)v13;
  }

}

void DTUVLaunchPreviewShell(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;

  v1 = qword_25576FC90;
  v2 = a1;
  v4 = v2;
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&qword_25576FC90, &unk_24EB2B400);
    v3 = v4;
  }
  objc_msgSend((id)qword_25576FC88, "launchWithCompletion:", v3);

}

void sub_222BA9D30()
{
  _ShellLauncher *v0;
  void *v1;

  v0 = objc_alloc_init(_ShellLauncher);
  v1 = (void *)qword_25576FC88;
  qword_25576FC88 = (uint64_t)v0;

}

uint64_t sub_222BA9E58(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel__queue_launchWithCompletion_);
}

void sub_222BAA10C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  dispatch_time_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  _QWORD block[5];
  int v17;

  v3 = a2;
  DTUVPreviewServiceLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_222BC7A50(a1, (uint64_t)v3, v4);

  if (*(int *)(a1 + 40) < 1)
  {
    DTUVServiceError(CFSTR("failed to launch preview shell: %@"), v5, v6, v7, v8, v9, v10, v11, (uint64_t)v3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_queue_completeWithPid:error:", 0, v15);

  }
  else
  {
    v12 = dispatch_time(0, 1000000000);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(NSObject **)(v13 + 8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222BAA208;
    block[3] = &unk_24EB28028;
    block[4] = v13;
    v17 = *(_DWORD *)(a1 + 40);
    dispatch_after(v12, v14, block);
  }

}

uint64_t sub_222BAA208(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_launchWithRetries:", (*(_DWORD *)(a1 + 40) - 1));
}

void sub_222BAA21C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v9 = *(NSObject **)(v7 + 8);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = sub_222BAA2DC;
  v12[3] = &unk_24EB2B450;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v10 = v6;
  v11 = v5;
  dispatch_async(v9, v12);

}

uint64_t sub_222BAA2DC(uint64_t a1)
{
  BOOL v1;

  if (*(_QWORD *)(a1 + 32))
    v1 = *(_QWORD *)(a1 + 40) == 0;
  else
    v1 = 0;
  if (v1)
    return objc_msgSend(*(id *)(a1 + 48), "_queue_completeWithPid:error:", objc_msgSend(*(id *)(a1 + 32), "pid"), 0);
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_222BAA47C()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD block[5];

  if (qword_25576FCB8 != -1)
    dispatch_once(&qword_25576FCB8, &unk_24EB2B4B8);
  v0 = (const char *)objc_msgSend(objc_retainAutorelease((id)qword_25576FCB0), "UTF8String");
  if (dlopen_preflight(v0))
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_222BAA57C;
    block[3] = &unk_24EB29A28;
    block[4] = v0;
    dispatch_sync(MEMORY[0x24BDAC9B8], block);
    byte_25576FC98 = 1;
  }
  else
  {
    DTUVServiceError(CFSTR("Unable to dlopen PreviewsOSSupport at path %s"), v1, v2, v3, v4, v5, v6, v7, (uint64_t)v0);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)qword_25576FCA0;
    qword_25576FCA0 = v8;

    DTUVPreviewServiceLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_222BC7AD8();

  }
}

void *sub_222BAA57C(uint64_t a1)
{
  return dlopen(*(const char **)(a1 + 32), 10);
}

void sub_222BAA588()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = getenv("DYLD_ROOT_PATH");
  if (v0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v0, 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = objc_msgSend(&unk_24EB4E930, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v15;
LABEL_6:
    v6 = 0;
    v7 = v4;
    while (1)
    {
      if (*(_QWORD *)v15 != v5)
        objc_enumerationMutation(&unk_24EB4E930);
      v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v6);
      if (v1)
      {
        objc_msgSend(v1, "stringByAppendingPathComponent:", v8);
        v9 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v9 = v8;
      }
      v4 = v9;

      objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "fileExistsAtPath:", v4);

      if ((v11 & 1) != 0)
        break;
      ++v6;
      v7 = v4;
      if (v3 == v6)
      {
        v3 = objc_msgSend(&unk_24EB4E930, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v3)
          goto LABEL_6;
        break;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("PreviewsOSSupport"));
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_25576FCB0;
  qword_25576FCB0 = v12;

}

void sub_222BAA9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_222BAA9D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)CSSymbolicatorGetSharedCacheUUID();
  if (result)
  {
    v3 = *(uint64_t **)(a1 + 40);
    v5 = *v3;
    v4 = v3[1];
    if (*result == v5 && result[1] == v4)
    {
      result = (_QWORD *)CSRetain();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      *(_QWORD *)(v7 + 32) = result;
      *(_QWORD *)(v7 + 40) = v8;
    }
  }
  return result;
}

void sub_222BAAB6C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;

  if (a3)
  {
    DTUVServiceErrorWithUnderlying(a3, CFSTR("Error launching PreviewShell"), (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_replyToQueuedMessages:", v23);
    objc_msgSend(*(id *)(a1 + 40), "cancel");

  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 3221225472;
    v25[2] = sub_222BAACAC;
    v25[3] = &unk_24EB2B4E0;
    v26 = v9;
    v24 = 0;
    objc_msgSend(v26, "createExternalService:error:", v25, &v24);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v24;
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v10;

    v20 = *(_QWORD **)(a1 + 32);
    if (v20[3])
    {
      objc_msgSend(v20, "_bindServiceCancelationToChannelCancelation");
      objc_msgSend(*(id *)(a1 + 32), "_activateService");
    }
    else
    {
      DTUVServiceErrorWithUnderlying(v11, CFSTR("Error connecting to PreviewShell"), v14, v15, v16, v17, v18, v19, v22);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "_replyToQueuedMessages:", v21);
      objc_msgSend(*(id *)(a1 + 40), "cancel");

    }
  }
}

uint64_t sub_222BAACAC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:", a2);
}

void sub_222BAAD64(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "channel");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "cancel");

}

uint64_t sub_222BAAD94(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "cancel");
}

void sub_222BAAE08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD block[5];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_222BAAE90;
  block[3] = &unk_24EB2B428;
  block[4] = v4;
  v8 = v3;
  v6 = v3;
  dispatch_sync(v5, block);

}

uint64_t sub_222BAAE90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeAllObjects", (_QWORD)v11);
}

uint64_t sub_222BAB04C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v7, "replyHandler", (_QWORD)v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (v8)
        {
          objc_msgSend(v7, "replyHandler");
          v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v9[2](v9, 0, *(_QWORD *)(a1 + 40));

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeAllObjects");
}

uint64_t sub_222BAB2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  if (v2)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*(_QWORD *)(v1 + 40), *(_QWORD *)(a1 + 40));
  else
    return objc_msgSend(*(id *)(v1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

void sub_222BAB4B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "newReplyWithObject:", v10);
  }
  else
  {
    v7 = *(void **)(a1 + 32);
    if (v5)
      v6 = objc_msgSend(v7, "newReplyWithError:", v5);
    else
      v6 = objc_msgSend(v7, "newReply");
  }
  v8 = (void *)v6;
  objc_msgSend(*(id *)(a1 + 40), "channel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendControlAsync:replyHandler:", v8, 0);

}

void sub_222BAB6D0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void (**v6)(id, void *, void *);

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "replyHandler");
  v6 = (void (**)(id, void *, void *))objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "error");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6[2](v6, v4, v5);
}

uint64_t sub_222BABE18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F458);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F458);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id CoreMLPerfRunnerService.__allocating_init(channel:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithChannel_, a1);

  return v3;
}

id CoreMLPerfRunnerService.init(channel:)(void *a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = qword_25576F488;
  v4 = v1;
  if (v3 != -1)
    swift_once();
  v5 = qword_255770C70;
  type metadata accessor for CoreMLPerfRunnerServiceMessageHandler();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = type metadata accessor for CoreMLPerfCoordinator();
  v6[6] = &protocol witness table for CoreMLPerfCoordinator;
  v6[2] = v5;
  v6[7] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC24DVTInstrumentsFoundation23CoreMLPerfRunnerService_messageHandler] = v6;
  swift_retain();
  v7 = a1;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for CoreMLPerfRunnerService();
  v8 = objc_msgSendSuper2(&v10, sel_initWithChannel_, v7);

  return v8;
}

id CoreMLPerfRunnerService.__deallocating_deinit()
{
  void *v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  uint8_t *v5;
  objc_super v7;

  v1 = v0;
  if (qword_25576F450 != -1)
    swift_once();
  v2 = sub_222BC7DA4();
  sub_222BAC438(v2, (uint64_t)qword_25576F458);
  v3 = sub_222BC7E94();
  v4 = sub_222BC7D8C();
  if (os_log_type_enabled(v4, v3))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, v4, v3, "PerfRunnerService - deinit invoked", v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for CoreMLPerfRunnerService();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

id CoreMLPerfRunnerService.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CoreMLPerfRunnerService.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for CoreMLPerfRunnerService()
{
  return objc_opt_self();
}

uint64_t sub_222BAC438(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_222BAC450(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t dispatch thunk of ModelRunnerConnectionManager.launchXPCServiceInSuspendedState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ModelRunnerConnectionManager.kickoffModelPerfRunInXPCService(modelInfo:pid:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t sub_222BAC4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F5A0);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F5A0);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_222BAC530()
{
  qword_25576F5B8 = 0x74614472656D6974;
  unk_25576F5C0 = 0xE900000000000061;
}

_xpc_connection_s *sub_222BAC558()
{
  uint64_t v0;
  uint64_t v1;
  _xpc_connection_s *v2;
  uint64_t v3;
  _xpc_connection_s *result;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  xpc_object_t v9;
  os_log_type_t v10;
  NSObject *v11;
  uint8_t *v12;
  os_log_type_t v13;
  NSObject *v14;
  uint8_t *v15;
  os_log_type_t v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t pid;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  objc_msgSend((id)objc_opt_self(), sel_enableMonitoring);
  v2 = sub_222BAD3D0();
  v3 = OBJC_IVAR____TtC24DVTInstrumentsFoundation31XPCModelRunnerConnectionManager_serviceConnection;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC24DVTInstrumentsFoundation31XPCModelRunnerConnectionManager_serviceConnection) = v2;
  swift_unknownObjectRelease();
  result = *(_xpc_connection_s **)(v0 + v3);
  if (!result)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  xpc_connection_resume(result);
  if (qword_25576F470 != -1)
    swift_once();
  v5 = sub_222BC7DA4();
  sub_222BAC438(v5, (uint64_t)qword_25576F5A0);
  v6 = sub_222BC7E94();
  v7 = sub_222BC7D8C();
  if (os_log_type_enabled(v7, v6))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_222B17000, v7, v6, "xpc_connection_resume complete", v8, 2u);
    MEMORY[0x22767A418](v8, -1, -1);
  }

  v9 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v9, "command", "getPID");
  v10 = sub_222BC7E94();
  v11 = sub_222BC7D8C();
  if (os_log_type_enabled(v11, v10))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_222B17000, v11, v10, "set XPC dictionary string for getPID", v12, 2u);
    MEMORY[0x22767A418](v12, -1, -1);
  }

  v13 = sub_222BC7E94();
  v14 = sub_222BC7D8C();
  if (os_log_type_enabled(v14, v13))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_222B17000, v14, v13, "about to send XPC message for getPID", v15, 2u);
    MEMORY[0x22767A418](v15, -1, -1);
  }

  result = *(_xpc_connection_s **)(v0 + v3);
  if (!result)
    goto LABEL_18;
  xpc_connection_send_message_with_reply_sync(result, v9);
  swift_unknownObjectRelease();
  v16 = sub_222BC7E94();
  v17 = sub_222BC7D8C();
  if (os_log_type_enabled(v17, v16))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_222B17000, v17, v16, "sent XPC message for getPID", v18, 2u);
    MEMORY[0x22767A418](v18, -1, -1);
  }

  result = *(_xpc_connection_s **)(v1 + v3);
  if (!result)
    goto LABEL_19;
  pid = xpc_connection_get_pid(result);
  v20 = sub_222BC7FCC();
  v22 = v21;
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_222BD2620;
  *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v23 + 64) = sub_222BADCDC();
  *(_QWORD *)(v23 + 32) = v20;
  *(_QWORD *)(v23 + 40) = v22;
  sub_222BC7D80();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (_xpc_connection_s *)pid;
}

void sub_222BAC8F4(int64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  xpc_object_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _xpc_connection_s *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  os_log_type_t v17;
  NSObject *v18;
  uint8_t *v19;
  _QWORD v20[6];

  v8 = sub_222BAD790(a1);
  if (qword_25576F470 != -1)
    swift_once();
  v9 = sub_222BC7DA4();
  sub_222BAC438(v9, (uint64_t)qword_25576F5A0);
  v10 = sub_222BC7D8C();
  v11 = sub_222BC7EAC();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_222B17000, v10, v11, "about to send XPC message in kickoffModelPerfRunInXPCService", v12, 2u);
    MEMORY[0x22767A418](v12, -1, -1);
  }

  v13 = *(_xpc_connection_s **)&v4[OBJC_IVAR____TtC24DVTInstrumentsFoundation31XPCModelRunnerConnectionManager_serviceConnection];
  if (v13)
  {
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a3;
    *(_QWORD *)(v14 + 24) = a4;
    *(_QWORD *)(v14 + 32) = v4;
    *(_DWORD *)(v14 + 40) = a2;
    v20[4] = sub_222BADC74;
    v20[5] = v14;
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 1107296256;
    v20[2] = sub_222BAD0F0;
    v20[3] = &unk_24EB27B30;
    v15 = _Block_copy(v20);
    swift_unknownObjectRetain();
    swift_retain();
    v16 = v4;
    swift_release();
    xpc_connection_send_message_with_reply(v13, v8, 0, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();
    v17 = sub_222BC7E94();
    v18 = sub_222BC7D8C();
    if (os_log_type_enabled(v18, v17))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_222B17000, v18, v17, "sent XPC message in kickoffModelPerfRunInXPCService", v19, 2u);
      MEMORY[0x22767A418](v19, -1, -1);
    }

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

id sub_222BACB28(void *a1, void (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  uint8_t *v33;
  __int128 v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  uint8_t *v38;
  uint64_t v39;
  id result;
  _xpc_connection_s *v41;
  __int128 v42;
  char v43;

  v9 = MEMORY[0x22767A790]();
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_222BD2620;
  v11 = MEMORY[0x22767851C](v9);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v10 + 64) = sub_222BADCDC();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  if (qword_25576F478 != -1)
    swift_once();
  if (!xpc_dictionary_get_string(a1, "timerData"))
  {
    sub_222BADD20(a1);
    v24 = objc_msgSend((id)objc_opt_self(), sel_diagnoseNoXPCResponse_, a5);
    if (!v24)
    {
      if (qword_25576F470 != -1)
        swift_once();
      v35 = sub_222BC7DA4();
      sub_222BAC438(v35, (uint64_t)qword_25576F5A0);
      v36 = sub_222BC7E94();
      v37 = sub_222BC7D8C();
      if (os_log_type_enabled(v37, v36))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_222B17000, v37, v36, "kickoffModelPerfRunInXPCService - no data returned: Jetsam", v38, 2u);
        MEMORY[0x22767A418](v38, -1, -1);
      }

      v34 = xmmword_222BD2630;
      goto LABEL_36;
    }
    if (v24 == (id)1)
    {
      if (qword_25576F470 != -1)
        swift_once();
      v30 = sub_222BC7DA4();
      sub_222BAC438(v30, (uint64_t)qword_25576F5A0);
      v31 = sub_222BC7E94();
      v32 = sub_222BC7D8C();
      if (os_log_type_enabled(v32, v31))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_222B17000, v32, v31, "kickoffModelPerfRunInXPCService - no data returned: Crash", v33, 2u);
        MEMORY[0x22767A418](v33, -1, -1);
      }

      v34 = xmmword_222BD2640;
      goto LABEL_36;
    }
    if (v24 == (id)2)
    {
      if (qword_25576F470 != -1)
        swift_once();
      v25 = sub_222BC7DA4();
      sub_222BAC438(v25, (uint64_t)qword_25576F5A0);
      v26 = sub_222BC7E94();
      v27 = sub_222BC7D8C();
      if (!os_log_type_enabled(v27, v26))
        goto LABEL_35;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      v29 = "kickoffModelPerfRunInXPCService - no data returned: Unknown";
    }
    else
    {
      if (qword_25576F470 != -1)
        swift_once();
      v39 = sub_222BC7DA4();
      sub_222BAC438(v39, (uint64_t)qword_25576F5A0);
      v26 = sub_222BC7E94();
      v27 = sub_222BC7D8C();
      if (!os_log_type_enabled(v27, v26))
        goto LABEL_35;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      v29 = "kickoffModelPerfRunInXPCService - no data returned: Undefined cause";
    }
    _os_log_impl(&dword_222B17000, v27, v26, v29, v28, 2u);
    MEMORY[0x22767A418](v28, -1, -1);
LABEL_35:

    v34 = xmmword_222BD1660;
LABEL_36:
    v42 = v34;
    v43 = 1;
    a2(&v42);
    goto LABEL_37;
  }
  if (qword_25576F470 != -1)
    swift_once();
  v14 = sub_222BC7DA4();
  sub_222BAC438(v14, (uint64_t)qword_25576F5A0);
  v15 = sub_222BC7E94();
  v16 = sub_222BC7D8C();
  if (os_log_type_enabled(v16, v15))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_222B17000, v16, v15, "unboxed timerData", v17, 2u);
    MEMORY[0x22767A418](v17, -1, -1);
  }

  v18 = sub_222BC7E64();
  v20 = v19;
  v21 = sub_222BC7E94();
  v22 = sub_222BC7D8C();
  if (os_log_type_enabled(v22, v21))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_222B17000, v22, v21, "converted timerData", v23, 2u);
    MEMORY[0x22767A418](v23, -1, -1);
  }

  *(_QWORD *)&v42 = v18;
  *((_QWORD *)&v42 + 1) = v20;
  v43 = 0;
  a2(&v42);
  swift_bridgeObjectRelease();
LABEL_37:
  result = objc_msgSend((id)objc_opt_self(), sel_disableMonitoring);
  if (*(_QWORD *)(a4 + OBJC_IVAR____TtC24DVTInstrumentsFoundation31XPCModelRunnerConnectionManager_serviceConnection))
  {
    v41 = (_xpc_connection_s *)swift_unknownObjectRetain();
    sub_222BAE044(v41);
    return (id)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_222BAD0F0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_222BAD138(void *a1, _xpc_connection_s *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_222BD2620;
  v5 = objc_msgSend(a1, sel_description);
  v6 = sub_222BC7E1C();
  v8 = v7;

  v9 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  v10 = sub_222BADCDC();
  *(_QWORD *)(v4 + 64) = v10;
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  xpc_connection_get_pid(a2);
  sub_222BC7E94();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_222BD2620;
  v12 = sub_222BC7FCC();
  *(_QWORD *)(v11 + 56) = v9;
  *(_QWORD *)(v11 + 64) = v10;
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v13;
  sub_222BC7D80();
  return swift_bridgeObjectRelease();
}

id sub_222BAD330()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCModelRunnerConnectionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for XPCModelRunnerConnectionManager()
{
  return objc_opt_self();
}

_xpc_connection_s *sub_222BAD390()
{
  return sub_222BAC558();
}

void sub_222BAD3B0(int64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_222BAC8F4(a1, a2, a3, a4);
}

_xpc_connection_s *sub_222BAD3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  _xpc_connection_s *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  _QWORD aBlock[6];

  v0 = sub_222BC7EC4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_222BC7EB8();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_222BC7DE0();
  MEMORY[0x24BDAC7A8](v5);
  sub_222BAE37C();
  sub_222BC7DD4();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_222BAE3B8();
  sub_222BADC9C(&qword_25576F5F8);
  sub_222BAE400();
  sub_222BC7F18();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  v6 = sub_222BC7EDC();
  if (qword_25576F470 != -1)
    swift_once();
  v7 = sub_222BC7DA4();
  sub_222BAC438(v7, (uint64_t)qword_25576F5A0);
  v8 = sub_222BC7E94();
  v9 = sub_222BC7D8C();
  if (os_log_type_enabled(v9, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_222B17000, v9, v8, "Creating XPC connection", v10, 2u);
    MEMORY[0x22767A418](v10, -1, -1);
  }

  v11 = xpc_connection_create("com.apple.dt.DTMLModelRunnerService", v6);
  v12 = sub_222BC7E94();
  v13 = sub_222BC7D8C();
  if (os_log_type_enabled(v13, v12))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_222B17000, v13, v12, "Successfully created XPC connection", v14, 2u);
    MEMORY[0x22767A418](v14, -1, -1);
  }

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v11;
  aBlock[4] = sub_222BAE4B4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAD0F0;
  aBlock[3] = &unk_24EB2B668;
  v16 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_release();
  xpc_connection_set_event_handler(v11, v16);
  _Block_release(v16);
  v17 = sub_222BC7D8C();
  v18 = sub_222BC7EAC();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_222B17000, v17, v18, "Created XPC handler", v19, 2u);
    MEMORY[0x22767A418](v19, -1, -1);
    v20 = v6;
  }
  else
  {
    v20 = v17;
    v17 = v6;
  }

  return v11;
}

xpc_object_t sub_222BAD790(int64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t *v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD v42[4];
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  int64_t v48;

  v2 = type metadata accessor for ModelLocation();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModelInfo();
  sub_222BAE2FC((uint64_t)a1 + *(int *)(v5 + 24), (uint64_t)v4);
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v6, "command", "profile");
  sub_222BC7CD8();
  v7 = sub_222BC7E4C();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_string(v6, "containerGUID", (const char *)(v7 + 32));
  swift_release();
  v47 = v4;
  v8 = sub_222BC7E4C();
  xpc_dictionary_set_string(v6, "modelFileName", (const char *)(v8 + 32));
  swift_release();
  if (qword_25576F470 != -1)
    swift_once();
  v9 = sub_222BC7DA4();
  sub_222BAC438(v9, (uint64_t)qword_25576F5A0);
  v10 = sub_222BC7E94();
  v11 = sub_222BC7D8C();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_222B17000, v11, v12, "created XPC dictionary in kickoffModelPerfRunInXPCService", v13, 2u);
    MEMORY[0x22767A418](v13, -1, -1);
  }

  v14 = *a1;
  xpc_dictionary_set_int64(v6, "computeUnit", *a1);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_222BD2620;
  v48 = v14;
  v16 = sub_222BC7FCC();
  v18 = v17;
  *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
  v19 = sub_222BADCDC();
  *(_QWORD *)(v15 + 64) = v19;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v20 = (int64_t *)((char *)a1 + *(int *)(v5 + 28));
  v22 = *v20;
  v21 = v20[1];
  v24 = v20[2];
  v23 = v20[3];
  v26 = v20[4];
  v25 = v20[5];
  v27 = v20[6];
  swift_bridgeObjectRetain();
  xpc_dictionary_set_int64(v6, "experimentIterations", v22);
  xpc_dictionary_set_int64(v6, "loadCount", v21);
  xpc_dictionary_set_int64(v6, "predictionCount", v24);
  v44 = v23;
  xpc_dictionary_set_int64(v6, "maxPredictionTime", v23);
  v45 = v26;
  xpc_dictionary_set_int64(v6, "maxIterationTime", v26);
  if (v27)
  {
    v46 = v25;
    v28 = sub_222BC7E4C();
    xpc_dictionary_set_string(v6, "functionName", (const char *)(v28 + 32));
    swift_release();
  }
  else
  {
    v46 = 0x3E7465736E753CLL;
    v27 = 0xE700000000000000;
  }
  v42[3] = sub_222BC7E94();
  v43 = qword_255770C78;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_222BD2650;
  v48 = v22;
  v30 = sub_222BC7FCC();
  v31 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v29 + 64) = v19;
  *(_QWORD *)(v29 + 32) = v30;
  *(_QWORD *)(v29 + 40) = v32;
  v48 = v21;
  v33 = sub_222BC7FCC();
  *(_QWORD *)(v29 + 96) = v31;
  *(_QWORD *)(v29 + 104) = v19;
  *(_QWORD *)(v29 + 72) = v33;
  *(_QWORD *)(v29 + 80) = v34;
  v48 = v24;
  v35 = sub_222BC7FCC();
  *(_QWORD *)(v29 + 136) = v31;
  *(_QWORD *)(v29 + 144) = v19;
  *(_QWORD *)(v29 + 112) = v35;
  *(_QWORD *)(v29 + 120) = v36;
  v48 = v44;
  v37 = sub_222BC7FCC();
  *(_QWORD *)(v29 + 176) = v31;
  *(_QWORD *)(v29 + 184) = v19;
  *(_QWORD *)(v29 + 152) = v37;
  *(_QWORD *)(v29 + 160) = v38;
  v48 = v45;
  v39 = sub_222BC7FCC();
  *(_QWORD *)(v29 + 216) = v31;
  *(_QWORD *)(v29 + 224) = v19;
  *(_QWORD *)(v29 + 192) = v39;
  *(_QWORD *)(v29 + 200) = v40;
  *(_QWORD *)(v29 + 256) = v31;
  *(_QWORD *)(v29 + 264) = v19;
  *(_QWORD *)(v29 + 232) = v46;
  *(_QWORD *)(v29 + 240) = v27;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  sub_222BAE340((uint64_t)v47);
  return v6;
}

uint64_t sub_222BADC48()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

id sub_222BADC74(void *a1)
{
  uint64_t v1;

  return sub_222BACB28(a1, *(void (**)(__int128 *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned int *)(v1 + 40));
}

uint64_t sub_222BADC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_222BADC94()
{
  return swift_release();
}

uint64_t sub_222BADC9C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22767A370]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_222BADCDC()
{
  unint64_t result;

  result = qword_25576F5E0;
  if (!qword_25576F5E0)
  {
    result = MEMORY[0x22767A388](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25576F5E0);
  }
  return result;
}

uint64_t sub_222BADD20(void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC24DVTInstrumentsFoundation31XPCModelRunnerConnectionManager_serviceConnection);
  if (result)
  {
    v4 = xpc_connection_copy_invalidation_reason();
    v5 = MEMORY[0x24BEE0D00];
    if (v4)
    {
      if (qword_25576F470 != -1)
        swift_once();
      v6 = sub_222BC7DA4();
      sub_222BAC438(v6, (uint64_t)qword_25576F5A0);
      v7 = sub_222BC7E94();
      v8 = sub_222BC7D8C();
      if (os_log_type_enabled(v8, v7))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_222B17000, v8, v7, "attempting to convert error", v9, 2u);
        MEMORY[0x22767A418](v9, -1, -1);
      }

      v10 = sub_222BC7E64();
      v12 = v11;
      sub_222BC7EA0();
      if (qword_25576F498 != -1)
        swift_once();
      sub_222BADC9C(&qword_25576F5D8);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
      *(_QWORD *)(v13 + 56) = v5;
      *(_QWORD *)(v13 + 64) = sub_222BADCDC();
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v12;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_25576F470 != -1)
        swift_once();
      v14 = sub_222BC7DA4();
      sub_222BAC438(v14, (uint64_t)qword_25576F5A0);
      v15 = sub_222BC7EA0();
      v16 = sub_222BC7D8C();
      if (os_log_type_enabled(v16, v15))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_222B17000, v16, v15, "no invalidation reason", v17, 2u);
        MEMORY[0x22767A418](v17, -1, -1);
      }

    }
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_222BD2620;
    v19 = objc_msgSend(a1, sel_description);
    v20 = sub_222BC7E1C();
    v22 = v21;

    *(_QWORD *)(v18 + 56) = v5;
    *(_QWORD *)(v18 + 64) = sub_222BADCDC();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    sub_222BC7D80();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_222BAE044(_xpc_connection_s *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  pid_t pid;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;

  if (qword_25576F470 != -1)
    swift_once();
  v2 = sub_222BC7DA4();
  sub_222BAC438(v2, (uint64_t)qword_25576F5A0);
  v3 = sub_222BC7E94();
  v4 = sub_222BC7D8C();
  if (os_log_type_enabled(v4, v3))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, v4, v3, "about to cancel XPC serviceConnection", v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

  xpc_connection_cancel(a1);
  v6 = sub_222BC7E94();
  v7 = sub_222BC7D8C();
  if (os_log_type_enabled(v7, v6))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_222B17000, v7, v6, "canceled XPC serviceConnection", v8, 2u);
    MEMORY[0x22767A418](v8, -1, -1);
  }

  pid = xpc_connection_get_pid(a1);
  v10 = sub_222BC7FCC();
  v12 = v11;
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
  *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 64) = sub_222BADCDC();
  *(_QWORD *)(v13 + 32) = v10;
  *(_QWORD *)(v13 + 40) = v12;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  kill(pid, 9);
  v14 = sub_222BC7E94();
  v15 = sub_222BC7D8C();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_222B17000, v15, v16, "finished sending SIG_KILL to XPC service", v17, 2u);
    MEMORY[0x22767A418](v17, -1, -1);
  }

}

uint64_t sub_222BAE2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_222BAE340(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModelLocation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_222BAE37C()
{
  unint64_t result;

  result = qword_25576F5E8;
  if (!qword_25576F5E8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25576F5E8);
  }
  return result;
}

unint64_t sub_222BAE3B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25576F5F0;
  if (!qword_25576F5F0)
  {
    v1 = sub_222BC7EB8();
    result = MEMORY[0x22767A388](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_25576F5F0);
  }
  return result;
}

unint64_t sub_222BAE400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25576F600;
  if (!qword_25576F600)
  {
    v1 = sub_222BAE44C(&qword_25576F5F8);
    result = MEMORY[0x22767A388](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25576F600);
  }
  return result;
}

uint64_t sub_222BAE44C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22767A37C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_222BAE490()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_222BAE4B4(void *a1)
{
  uint64_t v1;

  return sub_222BAD138(a1, *(_xpc_connection_s **)(v1 + 16));
}

uint64_t sub_222BAE4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F610);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F610);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

DVTInstrumentsFoundation::PerfRunError_optional __swiftcall PerfRunError.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = rawValue - 101;
  if ((unint64_t)(rawValue - 101) >= 0xB)
    v2 = 11;
  *v1 = v2;
  return (DVTInstrumentsFoundation::PerfRunError_optional)rawValue;
}

uint64_t PerfRunError.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 101;
}

BOOL sub_222BAE578(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_222BAE58C()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

uint64_t sub_222BAE5D0()
{
  return sub_222BC8038();
}

uint64_t sub_222BAE5FC()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

DVTInstrumentsFoundation::PerfRunError_optional sub_222BAE63C(Swift::Int *a1)
{
  return PerfRunError.init(rawValue:)(*a1);
}

void sub_222BAE644(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 101;
}

uint64_t sub_222BAE658()
{
  sub_222BB591C();
  sub_222BB5960();
  return sub_222BC8020();
}

_QWORD *static CoreMLPerfCoordinator.TestFactory.create(connectionManager:modelDiskManager:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;
  uint64_t v23;

  sub_222BAE7F4(a1, (uint64_t)v21);
  sub_222BAE7F4(a2, (uint64_t)v18);
  type metadata accessor for CoreMLPerfCoordinator();
  v3 = (_QWORD *)swift_allocObject();
  v5 = v22;
  v4 = v23;
  v6 = sub_222BB4C74((uint64_t)v21, v22);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v9 + 16))(v8);
  v10 = v19;
  v11 = v20;
  v12 = sub_222BB4C74((uint64_t)v18, v19);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v15 + 16))(v14);
  v16 = sub_222BB4850((uint64_t)v8, (uint64_t)v14, (void (*)(void))nullsub_50, 0, v3, v5, v10, v4, v11);
  sub_222BB4C9C((uint64_t)v18);
  sub_222BB4C9C((uint64_t)v21);
  return v16;
}

uint64_t sub_222BAE7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for CoreMLPerfCoordinator()
{
  uint64_t result;

  result = qword_25576F658;
  if (!qword_25576F658)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_222BAE878()
{
  id v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  uint64_t result;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for XPCModelRunnerConnectionManager()), sel_init);
  type metadata accessor for ModelWriter();
  v1 = swift_allocObject();
  type metadata accessor for CoreMLPerfCoordinator();
  v2 = (_QWORD *)swift_allocObject();
  v3 = v0;
  swift_retain();
  v4 = sub_222BB446C((uint64_t)v3, v1, v2);

  result = swift_release();
  qword_255770C70 = (uint64_t)v4;
  return result;
}

uint64_t CoreMLPerfCoordinator.modelDiskManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_222BAE7F4(v1 + 16, a1);
}

unint64_t sub_222BAE938(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v30 = a2;
  v7 = sub_222BADC9C(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_222BADC9C(a3);
  v11 = sub_222BC7F60();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)&v10[*(int *)(v7 + 48)];
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v29 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_222BB5E48(v17, (uint64_t)v10, v30);
    result = sub_222BB35D4((uint64_t)v10);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = sub_222BC7CF0();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v10, v23);
    v24 = v12[7];
    v25 = a4(0);
    result = sub_222BB59A4(v14, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v21, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_222BAEAE4(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t (*)(uint64_t *), uint64_t, uint64_t, uint64_t);
  _DWORD *v47;
  _QWORD v48[4];
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;

  v54 = a2;
  v55 = a1;
  v3 = sub_222BC7CF0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_222BADC9C(&qword_25576F628);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModelInfo();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v51 = (uint64_t)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v2;
  sub_222BAF50C((uint64_t)v14);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v16 = 1;
  v52 = v3;
  v17 = v15(v14, 1, v3);
  sub_222BB5C18((uint64_t)v14, &qword_25576F630);
  if (v17 != 1)
  {
    aBlock = 0;
    v58 = 0;
    LOBYTE(v59) = 1;
    sub_222BAF920((uint64_t)&aBlock, v55);
    LODWORD(v24) = 0;
LABEL_11:
    v47 = v54;
    *v54 = v24;
    *((_BYTE *)v47 + 4) = v16;
    return;
  }
  v18 = v55;
  sub_222BAF190(v55, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_222BB5C18((uint64_t)v8, &qword_25576F628);
    if (qword_25576F480 != -1)
      swift_once();
    v19 = sub_222BC7DA4();
    sub_222BAC438(v19, (uint64_t)qword_25576F610);
    v20 = sub_222BC7EA0();
    v21 = sub_222BC7D8C();
    v22 = v20;
    if (os_log_type_enabled(v21, v20))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_222B17000, v21, v22, "Unable to start perf run, no modelInfo found for token", v23, 2u);
      MEMORY[0x22767A418](v23, -1, -1);
    }

    v16 = 1;
    LODWORD(v24) = 4;
    goto LABEL_11;
  }
  v25 = v51;
  sub_222BB59A4((uint64_t)v8, v51, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  v26 = v56;
  v27 = v56[12];
  v29 = v52;
  v28 = v53;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v49(v53, v18, v52);
  v30 = *(unsigned __int8 *)(v4 + 80);
  v31 = (v30 + 24) & ~v30;
  v48[2] = v30 | 7;
  v48[3] = v31 + v5;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v26;
  v50 = v31;
  v33 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v33(v32 + v31, v28, v29);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = sub_222BB4CC0;
  *(_QWORD *)(v34 + 24) = v32;
  v61 = sub_222BB4D00;
  v62 = v34;
  aBlock = MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_222BAF0B8;
  v60 = &unk_24EB27B58;
  v35 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v27, v35);
  _Block_release(v35);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v35 & 1) == 0)
  {
    v36 = v56;
    v48[1] = v32;
    v37 = v56[10];
    v38 = v56[11];
    sub_222BB4D38(v56 + 7, v37);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
    v39 = v33;
    v40 = v25;
    v42 = v36[10];
    v41 = v36[11];
    v48[0] = sub_222BB4D38(v36 + 7, v42);
    v43 = swift_allocObject();
    swift_weakInit();
    v44 = v53;
    v49(v53, v18, v29);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v43;
    v39(v45 + v50, v44, v29);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t *), uint64_t, uint64_t, uint64_t))(v41 + 16);
    swift_retain();
    v46(v40, v24, sub_222BB4DF8, v45, v42, v41);
    swift_release();
    sub_222BB5AB4(v40, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
    swift_release();
    swift_release();
    v16 = 0;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_222BAEFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_222BC7CF0();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a1 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken;
  swift_beginAccess();
  sub_222BB5D08((uint64_t)v6, v9, &qword_25576F630);
  return swift_endAccess();
}

uint64_t sub_222BAF0B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_222BAF0D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  _QWORD v8[2];
  char v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8[0] = v4;
    v8[1] = v5;
    v9 = v6;
    sub_222BAF920((uint64_t)v8, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_222BAF158(uint64_t a1)
{
  __int128 v2;
  char v3;

  v2 = xmmword_222BD26D0;
  v3 = 1;
  return sub_222BAF920((uint64_t)&v2, a1);
}

uint64_t sub_222BAF190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_222BC7CF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = sub_222BADC9C(&qword_25576F628);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModelInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = *(NSObject **)(v3 + 96);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_222BB5CC8;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB2BA28;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v17);
  _Block_release(v17);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_222BB5D88((uint64_t)v11, a2, &qword_25576F628);
    return swift_release();
  }
  return result;
}

uint64_t sub_222BAF3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = sub_222BADC9C(&qword_25576F628);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v9 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = sub_222BB35D4(a3);
    if ((v11 & 1) != 0)
    {
      v12 = v10;
      v13 = *(_QWORD *)(v9 + 56);
      v14 = type metadata accessor for ModelInfo();
      v15 = *(_QWORD *)(v14 - 8);
      sub_222BB5A2C(v13 + *(_QWORD *)(v15 + 72) * v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    }
    else
    {
      v17 = type metadata accessor for ModelInfo();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = type metadata accessor for ModelInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  return sub_222BB5D08((uint64_t)v8, a1, &qword_25576F628);
}

uint64_t sub_222BAF50C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = *(NSObject **)(v2 + 96);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_222BB5D70;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB2BAA0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_222BB5D88((uint64_t)v6, a1, &qword_25576F630);
    return swift_release();
  }
  return result;
}

uint64_t sub_222BAF6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken;
  swift_beginAccess();
  sub_222BB5E48(v7, (uint64_t)v6, &qword_25576F630);
  return sub_222BB5D08((uint64_t)v6, a1, &qword_25576F630);
}

uint64_t sub_222BAF75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  _QWORD aBlock[6];
  uint64_t v13;

  v1 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = -1;
  v4 = *(NSObject **)(v0 + 96);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v13;
  *(_QWORD *)(v5 + 24) = v0;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_222BB4E38;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB27BD0;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v13)
    {
      v9 = 0;
    }
    else
    {
      sub_222BAF50C((uint64_t)v3);
      v10 = sub_222BC7CF0();
      v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v3, 1, v10) == 1;
      sub_222BB5C18((uint64_t)v3, &qword_25576F630);
    }
    swift_release();
    return v9;
  }
  return result;
}

uint64_t sub_222BAF920(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  dispatch_queue_t v40;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for ModelLocation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v34 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BC7CF0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = sub_222BADC9C(&qword_25576F6B0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v35 = (uint64_t)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)a1;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = v17;
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v36 = v7;
  v37 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))((char *)&v33 - v15, 1, 1, v6);
  v40 = (dispatch_queue_t)v3[12];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v18 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v3;
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v22 = v3;
  v21(v20 + v18, (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v23 = v20 + ((v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v25 = v38;
  v24 = v39;
  *(_QWORD *)v23 = v39;
  *(_QWORD *)(v23 + 8) = v25;
  *(_BYTE *)(v23 + 16) = a1;
  *(_QWORD *)(v20 + v19) = v16;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = sub_222BB5BA0;
  *(_QWORD *)(v26 + 24) = v20;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB2B9B0;
  v27 = _Block_copy(aBlock);
  swift_retain();
  sub_222BB5C08(v24, v25, a1);
  swift_retain();
  swift_release();
  dispatch_sync(v40, v27);
  _Block_release(v27);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v29 = v35;
    sub_222BB5E48((uint64_t)v16, v35, &qword_25576F6B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v29, 1, v37) == 1)
    {
      sub_222BB5C18(v29, &qword_25576F6B0);
    }
    else
    {
      v30 = v34;
      sub_222BB59A4(v29, v34, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
      v31 = v22[5];
      v32 = v22[6];
      sub_222BB4D38(v22 + 2, v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, v31, v32);
      sub_222BB5AB4(v30, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
    }
    sub_222BB5C18((uint64_t)v16, &qword_25576F6B0);
    return swift_release();
  }
  return result;
}

uint64_t sub_222BAFC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *v43;
  uint8_t *v44;
  uint64_t v45;
  os_log_type_t v46;
  NSObject *v47;
  uint8_t *v48;
  void (*v49)(_QWORD *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD v79[2];
  char v80;

  v69 = a6;
  v68 = a5;
  v67 = a4;
  v66 = a3;
  v75 = sub_222BADC9C(&qword_25576F6B8);
  MEMORY[0x24BDAC7A8](v75);
  v78 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BADC9C(&qword_25576F630);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v70 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v77 = (char *)&v65 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v65 - v14;
  v16 = sub_222BC7CF0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_222BADC9C(&qword_25576F6B0);
  MEMORY[0x24BDAC7A8](v19);
  v65 = (uint64_t)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_222BADC9C(&qword_25576F628);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v73 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v65 - v24;
  v26 = type metadata accessor for ModelInfo();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v74 = a1;
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(v30 + 16);
  v71 = a2;
  if (!v31)
  {
    v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v72(v25, 1, 1, v26);
    v37 = v17;
    v38 = (uint64_t)v15;
LABEL_7:
    sub_222BB5C18((uint64_t)v25, &qword_25576F628);
    v40 = (uint64_t)v76;
    v39 = (uint64_t)v77;
    if (qword_25576F480 != -1)
      swift_once();
    v41 = sub_222BC7DA4();
    sub_222BAC438(v41, (uint64_t)qword_25576F610);
    v42 = sub_222BC7E94();
    v43 = sub_222BC7D8C();
    if (os_log_type_enabled(v43, v42))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_222B17000, v43, v42, "no postTraceCallback found", v44, 2u);
      MEMORY[0x22767A418](v44, -1, -1);
    }

    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v32 = sub_222BB35D4(a2);
  if ((v33 & 1) != 0)
  {
    sub_222BB5A2C(*(_QWORD *)(v30 + 56) + *(_QWORD *)(v27 + 72) * v32, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v35 = v25;
    v36 = 0;
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v35 = v25;
    v36 = 1;
  }
  v72 = v34;
  v34(v35, v36, 1, v26);
  v37 = v17;
  swift_bridgeObjectRelease();
  v38 = (uint64_t)v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    goto LABEL_7;
  sub_222BB59A4((uint64_t)v25, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  if (qword_25576F480 != -1)
    swift_once();
  v45 = sub_222BC7DA4();
  sub_222BAC438(v45, (uint64_t)qword_25576F610);
  v46 = sub_222BC7E94();
  v47 = sub_222BC7D8C();
  if (os_log_type_enabled(v47, v46))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_222B17000, v47, v46, "found a registered postTraceCallback", v48, 2u);
    MEMORY[0x22767A418](v48, -1, -1);
  }

  v49 = (void (*)(_QWORD *))*((_QWORD *)v29 + 1);
  v79[0] = v66;
  v79[1] = v67;
  v80 = v68 & 1;
  swift_retain();
  v49(v79);
  swift_release();
  v50 = v65;
  sub_222BB5A2C((uint64_t)&v29[*(int *)(v26 + 24)], v65, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
  sub_222BB5AB4((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  v51 = type metadata accessor for ModelLocation();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
  sub_222BB5D08(v50, v69, &qword_25576F6B0);
  v40 = (uint64_t)v76;
  v39 = (uint64_t)v77;
LABEL_17:
  v52 = v71;
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v53(v40, v71, v16);
  v54 = (uint64_t)v73;
  v72(v73, 1, 1, v26);
  swift_beginAccess();
  sub_222BB0428(v54, v40, &qword_25576F628, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo, &qword_25576F680);
  swift_endAccess();
  v55 = v52;
  v56 = v74 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken;
  swift_beginAccess();
  v53(v38, v55, v16);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
  v57(v38, 0, 1, v16);
  v58 = v78;
  v59 = v78 + *(int *)(v75 + 48);
  sub_222BB5E48(v56, v78, &qword_25576F630);
  sub_222BB5E48(v38, v59, &qword_25576F630);
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v60(v58, 1, v16) != 1)
  {
    sub_222BB5E48(v58, v39, &qword_25576F630);
    if (v60(v59, 1, v16) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v40, v59, v16);
      sub_222BB5E08(&qword_25576F690, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v62 = sub_222BC7E04();
      v63 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v63(v40, v16);
      sub_222BB5C18(v38, &qword_25576F630);
      v63(v39, v16);
      result = sub_222BB5C18(v58, &qword_25576F630);
      if ((v62 & 1) == 0)
        return result;
      goto LABEL_24;
    }
    sub_222BB5C18(v38, &qword_25576F630);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v16);
    return sub_222BB5C18(v58, &qword_25576F6B8);
  }
  sub_222BB5C18(v38, &qword_25576F630);
  if (v60(v59, 1, v16) != 1)
    return sub_222BB5C18(v58, &qword_25576F6B8);
  sub_222BB5C18(v58, &qword_25576F630);
LABEL_24:
  v64 = (uint64_t)v70;
  v57((uint64_t)v70, 1, 1, v16);
  swift_beginAccess();
  sub_222BB5D08(v64, v56, &qword_25576F630);
  return swift_endAccess();
}

uint64_t sub_222BB0428(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = v5;
  v12 = sub_222BADC9C(a3);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a4(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v23 - v16;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 48))(a1, 1) == 1)
  {
    sub_222BB5C18(a1, a3);
    sub_222BB3780(a2, a4, a5, (uint64_t)v14);
    v19 = sub_222BC7CF0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a2, v19);
    return sub_222BB5C18((uint64_t)v14, a3);
  }
  else
  {
    sub_222BB59A4(a1, (uint64_t)v17, a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v9;
    *v9 = 0x8000000000000000;
    sub_222BB3F68((uint64_t)v17, a2, isUniquelyReferenced_nonNull_native, a4, a5);
    *v9 = v24;
    swift_bridgeObjectRelease();
    v22 = sub_222BC7CF0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a2, v22);
  }
}

uint64_t CoreMLPerfCoordinator.deinit()
{
  uint64_t v0;

  sub_222BB4C9C(v0 + 16);
  sub_222BB4C9C(v0 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_222BB5C18(v0 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken, &qword_25576F630);
  return v0;
}

uint64_t CoreMLPerfCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  sub_222BB4C9C(v0 + 16);
  sub_222BB4C9C(v0 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_222BB5C18(v0 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken, &qword_25576F630);
  return swift_deallocClassInstance();
}

uint64_t sub_222BB067C@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return CoreMLPerfCoordinator.writeModelToDiskAndRegisterCallback(modelPayload:perfRunConfig:computeUnit:postTraceCompletionHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t CoreMLPerfCoordinator.writeModelToDiskAndRegisterCallback(modelPayload:perfRunConfig:computeUnit:postTraceCompletionHandler:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t result;
  _QWORD v55[2];
  char *v56;
  uint64_t v57;
  uint64_t v58;
  dispatch_queue_t v59;
  uint64_t v60;
  Class isa;
  uint64_t v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 aBlock;
  uint64_t (*v71)(uint64_t);
  void *v72;
  uint64_t (*v73)();
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v7 = v6;
  v65 = a5;
  v66 = a4;
  v60 = a3;
  v69 = a6;
  v68 = sub_222BC7CF0();
  v67 = *(_QWORD *)(v68 - 8);
  v10 = *(_QWORD *)(v67 + 64);
  MEMORY[0x24BDAC7A8](v68);
  v63 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = (dispatch_queue_t)type metadata accessor for ModelLocation();
  isa = v59[-1].isa;
  v11 = *((_QWORD *)isa + 8);
  v12 = MEMORY[0x24BDAC7A8](v59);
  v62 = (uint64_t)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v55 - v13;
  v64 = *a1;
  v15 = (uint64_t (*)(uint64_t))*((_QWORD *)a1 + 2);
  v16 = (void *)*((_QWORD *)a1 + 3);
  LOBYTE(a1) = *((_BYTE *)a1 + 32);
  v17 = a2[1];
  v75 = *a2;
  v76 = v17;
  v77 = a2[2];
  v78 = *((_QWORD *)a2 + 6);
  v18 = v7[5];
  v19 = v7[6];
  sub_222BB4D38(v7 + 2, v18);
  aBlock = v64;
  v71 = v15;
  v72 = v16;
  LOBYTE(v73) = (_BYTE)a1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v19 + 8))(&aBlock, v18, v19);
  v57 = v11;
  v58 = v10;
  v20 = v60;
  *(_QWORD *)&v64 = v7;
  v21 = v69;
  sub_222BC7CE4();
  v22 = sub_222BC7CD8();
  v24 = v23;
  LODWORD(v56) = sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  v55[1] = qword_255770C78;
  sub_222BADC9C(&qword_25576F5D8);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_222BD26F0;
  v26 = v20;
  *(_QWORD *)&aBlock = v20;
  v27 = sub_222BC7FCC();
  v29 = v28;
  v30 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  v31 = sub_222BADCDC();
  *(_QWORD *)(v25 + 64) = v31;
  *(_QWORD *)(v25 + 32) = v27;
  *(_QWORD *)(v25 + 40) = v29;
  v32 = sub_222BC7CD8();
  *(_QWORD *)(v25 + 96) = v30;
  *(_QWORD *)(v25 + 104) = v31;
  *(_QWORD *)(v25 + 72) = v32;
  *(_QWORD *)(v25 + 80) = v33;
  *(_QWORD *)(v25 + 136) = v30;
  *(_QWORD *)(v25 + 144) = v31;
  *(_QWORD *)(v25 + 112) = v22;
  *(_QWORD *)(v25 + 120) = v24;
  v34 = &v14[SHIDWORD(v59[2].isa)];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)(v25 + 176) = v30;
  *(_QWORD *)(v25 + 184) = v31;
  *(_QWORD *)(v25 + 152) = v36;
  *(_QWORD *)(v25 + 160) = v35;
  swift_bridgeObjectRetain();
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v59 = *(dispatch_queue_t *)(v64 + 96);
  v37 = v62;
  sub_222BB5A2C((uint64_t)v14, v62, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
  v38 = v67;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v56 = v14;
  v40 = v63;
  v41 = v68;
  v39(v63, v21, v68);
  v42 = (*((unsigned __int8 *)isa + 80) + 40) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
  v43 = (v57 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v43 + 63) & 0xFFFFFFFFFFFFFFF8;
  v45 = (*(unsigned __int8 *)(v38 + 80) + v44 + 8) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v46 = (_QWORD *)swift_allocObject();
  v47 = v66;
  v46[2] = v26;
  v46[3] = v47;
  v46[4] = v65;
  sub_222BB59A4(v37, (uint64_t)v46 + v42, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
  v48 = (char *)v46 + v43;
  v49 = v76;
  *(_OWORD *)v48 = v75;
  *((_OWORD *)v48 + 1) = v49;
  *((_OWORD *)v48 + 2) = v77;
  *((_QWORD *)v48 + 6) = v78;
  *(_QWORD *)((char *)v46 + v44) = v64;
  v50 = (char *)v46 + v45;
  v51 = v41;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v50, v40, v41);
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = sub_222BB4F80;
  *(_QWORD *)(v52 + 24) = v46;
  v73 = sub_222BB5E8C;
  v74 = v52;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v71 = sub_222BAF0B8;
  v72 = &unk_24EB27BF8;
  v53 = _Block_copy(&aBlock);
  swift_retain();
  sub_222BB5014((uint64_t)&v75);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v59, v53);
  _Block_release(v53);
  sub_222BB5AB4((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v41 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v69, 0, 1, v51);
    return swift_release();
  }
  return result;
}

void sub_222BB0CF0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_222BAEAE4(a1, a2);
}

uint64_t sub_222BB0D10(uint64_t a1)
{
  __int128 v2;
  char v3;

  v2 = xmmword_222BD26D0;
  v3 = 1;
  return sub_222BAF920((uint64_t)&v2, a1);
}

uint64_t sub_222BB0D54@<X0>(uint64_t a1@<X8>)
{
  return CoreMLPerfCoordinator.generateSegmentationConfig()(a1);
}

uint64_t CoreMLPerfCoordinator.generateSegmentationConfig()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v2 = v1;
  v17 = a1;
  v3 = sub_222BADC9C(&qword_25576F640);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for SegmentationConfig();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = *(NSObject **)(v2 + 112);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v2;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_222BB503C;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB27C20;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_222BB5E48((uint64_t)v8, (uint64_t)v6, &qword_25576F640);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9);
    if ((_DWORD)result != 1)
    {
      sub_222BB59A4((uint64_t)v6, v17, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
      sub_222BB5C18((uint64_t)v8, &qword_25576F640);
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_222BB0F8C(uint64_t a1)
{
  return CoreMLPerfCoordinator.writeSegment(payload:)(a1);
}

uint64_t CoreMLPerfCoordinator.writeSegment(payload:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  NSObject *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char isEscapingClosureAtFileLocation;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  dispatch_queue_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD aBlock[8];

  v3 = type metadata accessor for SegmentPayload();
  v26 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v26 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_222BC7CF0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - v10;
  v12 = *(int *)(v3 + 28);
  v25 = a1;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13((char *)&v24 - v10, a1 + v12, v5);
  v14 = *(NSObject **)(v1 + 112);
  v29 = v1;
  v30 = v1;
  v31 = v11;
  v28 = v14;
  v15 = aBlock[7];
  sub_222BC7ED0();
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v13(v9, (uint64_t)v11, v5);
  v17 = v27;
  sub_222BB5A2C(v25, v27, (uint64_t (*)(_QWORD))type metadata accessor for SegmentPayload);
  v18 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v19 = (v7 + *(unsigned __int8 *)(v26 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v18, v9, v5);
  sub_222BB59A4(v17, v20 + v19, (uint64_t (*)(_QWORD))type metadata accessor for SegmentPayload);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_222BB5170;
  *(_QWORD *)(v21 + 24) = v20;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB27C48;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v28, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_222BB1270(char *a1)
{
  return CoreMLPerfCoordinator.assembleModelSegments(modelToken:)(a1);
}

uint64_t CoreMLPerfCoordinator.assembleModelSegments(modelToken:)(char *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void (*v45)(char *, uint64_t);
  _QWORD v46[2];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  dispatch_queue_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  _QWORD aBlock[7];
  uint64_t v62;

  v2 = (_QWORD *)v1;
  v54 = sub_222BC7CF0();
  v57 = *(_QWORD *)(v54 - 8);
  v4 = *(_QWORD *)(v57 + 64);
  MEMORY[0x24BDAC7A8](v54);
  v55 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_222BC7C90();
  v58 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v58 + 64);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v46 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v46 - v11;
  v13 = *(NSObject **)(v1 + 112);
  v59 = v2;
  v60 = a1;
  v56 = a1;
  v14 = v62;
  result = sub_222BC7ED0();
  if (!v14)
  {
    v48 = v6;
    v49 = v4;
    v50 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v62 = 0;
    v51 = v13;
    v52 = v5;
    v53 = v10;
    sub_222BC7E94();
    if (qword_25576F498 != -1)
      swift_once();
    v46[1] = sub_222BADC9C(&qword_25576F5D8);
    v16 = swift_allocObject();
    v47 = xmmword_222BD2620;
    *(_OWORD *)(v16 + 16) = xmmword_222BD2620;
    v17 = v12;
    v18 = sub_222BC7C6C();
    v20 = v19;
    *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE0D00];
    v21 = sub_222BADCDC();
    *(_QWORD *)(v16 + 64) = v21;
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    v22 = v2;
    v23 = v2[5];
    v24 = v2[6];
    sub_222BB4D38(v2 + 2, v23);
    v25 = v53;
    v26 = v56;
    v27 = v62;
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v24 + 24))(v56, v17, v23, v24);
    v28 = v57;
    v62 = v27;
    if (v27)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v17, v52);
    }
    else
    {
      sub_222BC7E94();
      v46[0] = qword_255770C78;
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v47;
      v30 = v25;
      v31 = sub_222BC7C6C();
      *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v29 + 64) = v21;
      *(_QWORD *)(v29 + 32) = v31;
      *(_QWORD *)(v29 + 40) = v32;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      v33 = v54;
      v34 = v55;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v55, v26, v54);
      v35 = v58;
      v36 = v50;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v50, v30, v52);
      v37 = (*(unsigned __int8 *)(v28 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v38 = *(unsigned __int8 *)(v35 + 80);
      v56 = v17;
      v39 = v28;
      v40 = (v49 + v38 + v37) & ~v38;
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v41 + v37, v34, v33);
      v42 = v52;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v41 + v40, v36, v52);
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = sub_222BB5268;
      *(_QWORD *)(v43 + 24) = v41;
      aBlock[4] = sub_222BB5E8C;
      aBlock[5] = v43;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_222BAF0B8;
      aBlock[3] = &unk_24EB27C70;
      v44 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v51, v44);
      _Block_release(v44);
      v45 = *(void (**)(char *, uint64_t))(v35 + 8);
      v45(v53, v42);
      v45(v56, v42);
      LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((v42 & 1) != 0)
        __break(1u);
    }
  }
  return result;
}

uint64_t sub_222BB1740@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  return CoreMLPerfCoordinator.finalizeModel(modelName:modelToken:isCompressed:)(a1, a2, a3, a4, a5);
}

uint64_t CoreMLPerfCoordinator.finalizeModel(modelName:modelToken:isCompressed:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  dispatch_queue_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD aBlock[7];
  uint64_t v57;

  v6 = (_QWORD *)v5;
  v49 = a4;
  v50 = a1;
  v51 = a2;
  v45 = a5;
  v8 = sub_222BC7CF0();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  v9 = *(_QWORD *)(v47 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_222BC7C90();
  v53 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v40 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v40 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v40 - v20;
  v22 = *(NSObject **)(v5 + 112);
  v54 = v6;
  v55 = a3;
  v52 = a3;
  v23 = v57;
  result = sub_222BC7ED0();
  if (!v23)
  {
    v40 = v9;
    v44 = 0;
    v25 = v48;
    v42 = v22;
    v43 = v19;
    v57 = v10;
    v27 = v6[5];
    v26 = v6[6];
    v41 = v6;
    sub_222BB4D38(v6 + 2, v27);
    if ((v49 & 1) != 0)
    {
      v28 = *(void (**)(char *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t))(v26 + 32);
      v13 = v16;
    }
    else
    {
      v28 = *(void (**)(char *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t))(v26 + 40);
    }
    v29 = v44;
    v28(v21, v50, (void (*)(_QWORD, _QWORD, _QWORD))v51, v27, v26);
    v30 = v52;
    if (v29)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v21, v57);
    }
    else
    {
      v51 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
      v51(v43, v13, v57);
      v32 = v46;
      v31 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v30, v25);
      v33 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      v34 = (v40 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v41;
      (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v35 + v33, v32, v25);
      v36 = v43;
      *(_QWORD *)(v35 + v34) = v43;
      v37 = swift_allocObject();
      *(_QWORD *)(v37 + 16) = sub_222BB5384;
      *(_QWORD *)(v37 + 24) = v35;
      aBlock[4] = sub_222BB5E8C;
      aBlock[5] = v37;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_222BAF0B8;
      aBlock[3] = &unk_24EB27C98;
      v38 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v42, v38);
      _Block_release(v38);
      v39 = v57;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v57);
      LOBYTE(v38) = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((v38 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v51(v45, v36, v39);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_222BB1AF4(uint64_t a1, uint64_t a2, int a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return CoreMLPerfCoordinator.finalizePerfRunSetup(modelToken:modelURL:isCompressed:perfRunConfig:computeUnit:postTraceCompletionHandler:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t CoreMLPerfCoordinator.finalizePerfRunSetup(modelToken:modelURL:isCompressed:perfRunConfig:computeUnit:postTraceCompletionHandler:)(uint64_t a1, uint64_t a2, int a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  dispatch_queue_t v48;
  _QWORD aBlock[6];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v46 = a6;
  v47 = a7;
  v45 = a5;
  v44 = a3;
  v40 = a1;
  v10 = sub_222BC7CF0();
  v11 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  v13 = v11;
  v38 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_222BC7C90();
  v15 = *(_QWORD *)(v14 - 8);
  v39 = v14;
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a4[1];
  v50 = *a4;
  v51 = v18;
  v52 = a4[2];
  v53 = *((_QWORD *)a4 + 6);
  v48 = *(dispatch_queue_t *)(v7 + 96);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v10);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = v19 + v16;
  v21 = (v19 + v16) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 63) & 0xFFFFFFFFFFFFFFF8;
  v25 = (*(unsigned __int8 *)(v13 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v26 + v19, v17, v39);
  *(_BYTE *)(v26 + v20) = v44;
  v27 = v46;
  *(_QWORD *)(v21 + v26 + 8) = v45;
  v28 = (_QWORD *)(v26 + v22);
  v29 = v47;
  *v28 = v27;
  v28[1] = v29;
  v30 = v26 + v23;
  *(_QWORD *)(v30 + 48) = v53;
  v31 = v52;
  v32 = v50;
  *(_OWORD *)(v30 + 16) = v51;
  *(_OWORD *)(v30 + 32) = v31;
  *(_OWORD *)v30 = v32;
  v33 = v42;
  *(_QWORD *)(v26 + v24) = v43;
  (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v26 + v25, v33, v41);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = sub_222BB54D4;
  *(_QWORD *)(v34 + 24) = v26;
  aBlock[4] = sub_222BB5E8C;
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BAF0B8;
  aBlock[3] = &unk_24EB27CC0;
  v35 = _Block_copy(aBlock);
  swift_retain();
  sub_222BB5014((uint64_t)&v50);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v48, v35);
  _Block_release(v35);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v35 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_222BB1DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a7;
  v32 = a6;
  v29 = a1;
  v30 = a2;
  v10 = sub_222BADC9C(&qword_25576F628);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_222BC7CF0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModelInfo();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (uint64_t *)((char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_222BB5A2C(a4, (uint64_t)v21 + *(int *)(v19 + 24), (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
  v23 = v30;
  v22 = v31;
  *v21 = v29;
  v21[1] = v23;
  v21[2] = a3;
  v24 = (char *)v21 + *(int *)(v17 + 28);
  *((_QWORD *)v24 + 6) = *(_QWORD *)(a5 + 48);
  v25 = *(_OWORD *)(a5 + 32);
  v26 = *(_OWORD *)a5;
  *((_OWORD *)v24 + 1) = *(_OWORD *)(a5 + 16);
  *((_OWORD *)v24 + 2) = v25;
  *(_OWORD *)v24 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v22, v13);
  sub_222BB5A2C((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
  swift_beginAccess();
  swift_retain();
  sub_222BB5014(a5);
  sub_222BB0428((uint64_t)v12, (uint64_t)v16, &qword_25576F628, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo, &qword_25576F680);
  swift_endAccess();
  return sub_222BB5AB4((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
}

uint64_t sub_222BB1FE8(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v3 = sub_222BADC9C(&qword_25576F640);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_222BADC9C(&qword_25576F698);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BC7CF0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21 - v14;
  sub_222BC7CE4();
  sub_222BB5C18((uint64_t)a1, &qword_25576F640);
  v16 = type metadata accessor for SegmentationConfig();
  v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v17(&a1[*(int *)(v16 + 20)], v15, v9);
  *(_QWORD *)a1 = 524288000;
  v18 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v16);
  v17(v13, v15, v9);
  sub_222BB5E48((uint64_t)a1, (uint64_t)v5, &qword_25576F640);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_222BB59A4((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
    v20 = type metadata accessor for SegmentedModelState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 0, 1, v20);
    swift_beginAccess();
    sub_222BB0428((uint64_t)v8, (uint64_t)v13, &qword_25576F698, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState, &qword_25576F6A0);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_222BB2244(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a3;
  v5 = sub_222BC7C90();
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_222BADC9C(&qword_25576F698);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SegmentedModelState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v41 - v16;
  swift_beginAccess();
  v18 = a1[15];
  if (!*(_QWORD *)(v18 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_7:
    sub_222BB5C18((uint64_t)v10, &qword_25576F698);
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    return sub_222BC7D80();
  }
  swift_bridgeObjectRetain();
  v19 = sub_222BB35D4(a2);
  if ((v20 & 1) != 0)
  {
    sub_222BB5A2C(*(_QWORD *)(v18 + 56) + *(_QWORD *)(v12 + 72) * v19, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v21, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    goto LABEL_7;
  sub_222BB59A4((uint64_t)v10, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  sub_222BB5A2C((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v7, v15, v5);
    v44 = sub_222BC7E94();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v23 = swift_allocObject();
    v43 = xmmword_222BD2700;
    *(_OWORD *)(v23 + 16) = xmmword_222BD2700;
    v24 = MEMORY[0x24BEE1768];
    v25 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v23 + 64) = v25;
    v26 = v46;
    v27 = *(_QWORD *)(v46 + 24);
    v41 = *(_QWORD *)(v46 + 16);
    v42 = v27;
    *(_QWORD *)(v23 + 32) = v41;
    *(_QWORD *)(v23 + 96) = v24;
    *(_QWORD *)(v23 + 104) = v25;
    *(_QWORD *)(v23 + 72) = v27;
    v28 = sub_222BC7C6C();
    v30 = v29;
    *(_QWORD *)(v23 + 136) = MEMORY[0x24BEE0D00];
    v45 = sub_222BADCDC();
    *(_QWORD *)(v23 + 144) = v45;
    *(_QWORD *)(v23 + 112) = v28;
    *(_QWORD *)(v23 + 120) = v30;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    v31 = a1 + 2;
    v33 = a1[5];
    v32 = a1[6];
    sub_222BB4D38(v31, v33);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v32 + 16))(v26, v7, v33, v32);
    sub_222BC7E94();
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = v43;
    v35 = MEMORY[0x24BEE1768];
    *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE1768];
    v36 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v34 + 32) = v41;
    *(_QWORD *)(v34 + 96) = v35;
    *(_QWORD *)(v34 + 104) = v36;
    v37 = v42;
    *(_QWORD *)(v34 + 64) = v36;
    *(_QWORD *)(v34 + 72) = v37;
    v38 = sub_222BC7C6C();
    v39 = v45;
    *(_QWORD *)(v34 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v34 + 144) = v39;
    *(_QWORD *)(v34 + 112) = v38;
    *(_QWORD *)(v34 + 120) = v40;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v5);
  }
  else
  {
    sub_222BB5AB4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BC7D80();
  }
  return sub_222BB5AB4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
}

uint64_t sub_222BB27D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = sub_222BADC9C(&qword_25576F698);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_222BC7CF0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  v12 = sub_222BC7C90();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, a3, v12);
  v13 = type metadata accessor for SegmentedModelState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 0, 1, v13);
  swift_beginAccess();
  sub_222BB0428((uint64_t)v7, (uint64_t)v10, &qword_25576F698, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState, &qword_25576F6A0);
  return swift_endAccess();
}

uint64_t sub_222BB2930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = sub_222BADC9C(&qword_25576F698);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_222BC7CF0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  v12 = sub_222BC7C90();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, a3, v12);
  v13 = type metadata accessor for SegmentedModelState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 0, 1, v13);
  swift_beginAccess();
  sub_222BB0428((uint64_t)v7, (uint64_t)v10, &qword_25576F698, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState, &qword_25576F6A0);
  return swift_endAccess();
}

uint64_t sub_222BB2A8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v55 = a8;
  v56 = a7;
  v58 = a5;
  v59 = a6;
  v52 = a3;
  v53 = a4;
  v50 = a2;
  v9 = sub_222BADC9C(&qword_25576F628);
  MEMORY[0x24BDAC7A8](v9);
  v57 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ModelInfo();
  v51 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = type metadata accessor for ModelLocation();
  MEMORY[0x24BDAC7A8](v47);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_222BC7CF0();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v48 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v60 = (char *)&v46 - v22;
  v23 = sub_222BC7C90();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1;
  sub_222BC7C54();
  v27 = sub_222BC7C24();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  sub_222BC7CCC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_222BB5C18((uint64_t)v17, &qword_25576F630);
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_222BD2620;
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 64) = sub_222BADCDC();
    *(_QWORD *)(v30 + 32) = v27;
    *(_QWORD *)(v30 + 40) = v29;
    sub_222BC7D80();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = v60;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v60, v17, v18);
    v33 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v33(v14, v32, v18);
    v34 = sub_222BC7C24();
    v35 = v47;
    v36 = (uint64_t *)&v14[*(int *)(v47 + 20)];
    *v36 = v34;
    v36[1] = v37;
    v14[*(int *)(v35 + 24)] = v50 & 1;
    v38 = v54;
    sub_222BB5A2C((uint64_t)v14, (uint64_t)v12 + *(int *)(v54 + 24), (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
    v39 = v53;
    *v12 = v52;
    v12[1] = v39;
    v40 = v59;
    v12[2] = v58;
    v41 = (char *)v12 + *(int *)(v38 + 28);
    *((_QWORD *)v41 + 6) = *(_QWORD *)(v40 + 48);
    v42 = *(_OWORD *)(v40 + 32);
    v43 = *(_OWORD *)v40;
    *((_OWORD *)v41 + 1) = *(_OWORD *)(v40 + 16);
    *((_OWORD *)v41 + 2) = v42;
    *(_OWORD *)v41 = v43;
    v44 = (uint64_t)v48;
    v33(v48, v55, v18);
    v45 = v57;
    sub_222BB5A2C((uint64_t)v12, v57, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v45, 0, 1, v38);
    swift_beginAccess();
    swift_retain();
    sub_222BB5014(v40);
    sub_222BB0428(v45, v44, &qword_25576F628, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo, &qword_25576F680);
    swift_endAccess();
    sub_222BB5AB4((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
    sub_222BB5AB4((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModelLocation);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v60, v18);
  }
}

uint64_t sub_222BB2EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v6 = sub_222BADC9C(&qword_25576F698);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SegmentedModelState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24 - v14;
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 120);
  if (!*(_QWORD *)(v16 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_7:
    sub_222BB5C18((uint64_t)v8, &qword_25576F698);
    sub_222BB5A70();
    swift_allocError();
    *v20 = 7;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v17 = sub_222BB35D4(a2);
  if ((v18 & 1) != 0)
  {
    sub_222BB5A2C(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v10 + 72) * v17, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    goto LABEL_7;
  sub_222BB59A4((uint64_t)v8, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  sub_222BB5A2C((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_222BB5AB4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    v22 = sub_222BC7C90();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a3, v13, v22);
  }
  else
  {
    sub_222BB5A70();
    swift_allocError();
    *v23 = 8;
    swift_willThrow();
    sub_222BB5AB4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    return sub_222BB5AB4((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  }
}

uint64_t sub_222BB3174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v25;
  int EnumCaseMultiPayload;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = sub_222BC7CF0();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_222BC7C90();
  v7 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  v43 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BADC9C(&qword_25576F698);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for SegmentedModelState();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v36 - v19;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 120);
  if (!*(_QWORD *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_7:
    sub_222BB5C18((uint64_t)v13, &qword_25576F698);
    sub_222BB5A70();
    swift_allocError();
    *v25 = 7;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v37 = a2;
  v22 = sub_222BB35D4(a2);
  if ((v23 & 1) != 0)
  {
    sub_222BB5A2C(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v15 + 72) * v22, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v24(v13, 0, 1, v14);
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v24(v13, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    goto LABEL_7;
  sub_222BB59A4((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  sub_222BB5A2C((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (!EnumCaseMultiPayload)
    {
      v30 = v44;
      sub_222BBCF80(1, v44);
      if (!v2)
      {
        v31 = (uint64_t)v41;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v37, v40);
        v32 = v24;
        v33 = (uint64_t)v39;
        v34 = v30;
        v35 = v42;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v39, v34, v42);
        swift_storeEnumTagMultiPayload();
        v32((char *)v33, 0, 1, v14);
        swift_beginAccess();
        sub_222BB0428(v33, v31, &qword_25576F698, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState, &qword_25576F6A0);
        swift_endAccess();
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v35);
      }
    }
    sub_222BB5AB4((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    v29 = (uint64_t)v18;
  }
  else
  {
    sub_222BB5AB4((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BC7D80();
    sub_222BB5A70();
    swift_allocError();
    *v28 = 8;
    swift_willThrow();
    v29 = (uint64_t)v20;
  }
  return sub_222BB5AB4(v29, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
}

unint64_t sub_222BB35D4(uint64_t a1)
{
  uint64_t v2;

  sub_222BC7CF0();
  sub_222BB5E08(&qword_25576F688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_222BC7DEC();
  return sub_222BB3640(a1, v2);
}

unint64_t sub_222BB3640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_222BC7CF0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_222BB5E08(&qword_25576F690, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_222BC7E04();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_222BB3780@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v7 = v4;
  swift_bridgeObjectRetain();
  v10 = sub_222BB35D4(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v7;
    v21 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_222BB41A8(a2, a3);
      v13 = v21;
    }
    v14 = *(_QWORD *)(v13 + 48);
    v15 = sub_222BC7CF0();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v10, v15);
    v16 = *(_QWORD *)(v13 + 56);
    v17 = a2(0);
    v18 = *(_QWORD *)(v17 - 8);
    sub_222BB59A4(v16 + *(_QWORD *)(v18 + 72) * v10, a4, a2);
    sub_222BB3CC0(v10, v13, a2);
    *v7 = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a4, 0, 1, v17);
  }
  else
  {
    v20 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
}

uint64_t sub_222BB38CC(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD);

  v6 = v4;
  v51 = a3;
  v8 = a3(0);
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (uint64_t)&v44 - v9;
  v10 = sub_222BC7CF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  sub_222BADC9C(a4);
  v49 = a2;
  v15 = sub_222BC7F54();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_41;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v46 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v44 = v4;
  v45 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45)
      break;
    v28 = v46;
    v29 = v46[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v45)
        goto LABEL_34;
      v29 = v46[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          v6 = v44;
          if ((v49 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_43;
            if (v23 >= v45)
              goto LABEL_34;
            v29 = v46[v23];
            ++v30;
            if (v29)
              goto LABEL_21;
          }
        }
        v23 = v30;
      }
    }
LABEL_21:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    v31 = *(_QWORD *)(v11 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v13, v32, v10);
      v33 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      sub_222BB59A4(v33 + v34 * v26, v50, v51);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, v32, v10);
      v35 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      sub_222BB5A2C(v35 + v34 * v26, v50, v51);
    }
    sub_222BB5E08(&qword_25576F688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_222BC7DEC();
    v36 = -1 << *(_BYTE *)(v16 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v16 + 48) + v31 * v24, v13, v10);
    result = sub_222BB59A4(v50, *(_QWORD *)(v16 + 56) + v34 * v24, v51);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release();
  v6 = v44;
  v28 = v46;
  if ((v49 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v43 = 1 << *(_BYTE *)(v14 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v16;
  return result;
}

unint64_t sub_222BB3CC0(int64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v32 = a3;
  v5 = sub_222BC7CF0();
  v34 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v35 = a2 + 64;
    result = sub_222BC7F24();
    v12 = v35;
    if ((*(_QWORD *)(v35 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (result + 1) & v11;
      v14 = *(_QWORD *)(v34 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        v15 = v14 * v10;
        v33(v8, *(_QWORD *)(a2 + 48) + v14 * v10, v5);
        sub_222BB5E08(&qword_25576F688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v16 = sub_222BC7DEC();
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v8, v5);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_6;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_6;
        }
        if (v14 * a1 < v15 || *(_QWORD *)(a2 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v20 = *(_QWORD *)(a2 + 56);
        v21 = *(_QWORD *)(*(_QWORD *)(v32(0) - 8) + 72);
        v22 = v21 * a1;
        result = v20 + v21 * a1;
        v23 = v21 * v10;
        v24 = v20 + v21 * v10 + v21;
        if (v22 < v23 || result >= v24)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v22 == v23)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        v12 = v35;
      }
      while (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_222BB3F68(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a1;
  v7 = (_QWORD **)v5;
  v10 = sub_222BC7CF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_222BB35D4(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      v24 = a4(0);
      return sub_222BB59E8(v29, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a4);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_222BB41A8(a4, v28);
    goto LABEL_7;
  }
  sub_222BB38CC(v19, a3 & 1, a4, v28);
  v26 = sub_222BB35D4(a2);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_222BC7FE4();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_222BB40F0(v16, (uint64_t)v13, v29, v22, a4);
}

uint64_t sub_222BB40F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = sub_222BC7CF0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = a5(0);
  result = sub_222BB59A4(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

void *sub_222BB41A8(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = a1(0);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v34 - v5;
  v38 = sub_222BC7CF0();
  v6 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BADC9C(a2);
  v34 = v2;
  v8 = *v2;
  v9 = sub_222BC7F48();
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release();
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43; ; result = (void *)sub_222BB59A4(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    sub_222BB5A2C(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release();
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

_QWORD *sub_222BB446C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint8_t *v21;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[5];

  v24 = a3;
  v25 = sub_222BC7EC4();
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_222BC7EB8();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v8);
  v10 = sub_222BC7DE0();
  MEMORY[0x24BDAC7A8](v10);
  v28[3] = type metadata accessor for XPCModelRunnerConnectionManager();
  v28[4] = &off_24EB269C0;
  v28[0] = a1;
  v27[3] = type metadata accessor for ModelWriter();
  v27[4] = &off_24EB266E8;
  v27[0] = a2;
  v23[1] = sub_222BAE37C();
  sub_222BC7DC8();
  v26 = MEMORY[0x24BEE4AF8];
  v23[2] = sub_222BB5E08((unint64_t *)&qword_25576F5F0, v9, MEMORY[0x24BEE5698]);
  sub_222BADC9C(&qword_25576F5F8);
  sub_222BAE400();
  sub_222BC7F18();
  v11 = *MEMORY[0x24BEE5750];
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v12(v7, v11, v25);
  v13 = sub_222BC7EDC();
  v14 = v24;
  v24[12] = v13;
  v15 = MEMORY[0x24BEE4AF8];
  v14[13] = sub_222BAE938(MEMORY[0x24BEE4AF8], &qword_25576F6C8, &qword_25576F680, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  sub_222BC7DC8();
  v26 = v15;
  sub_222BC7F18();
  v12(v7, v11, v25);
  v14[14] = sub_222BC7EDC();
  v14[15] = sub_222BAE938(MEMORY[0x24BEE4AF8], &qword_25576F6C0, &qword_25576F6A0, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  v16 = (char *)v14 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken;
  v17 = sub_222BC7CF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_segmentSize) = 524288000;
  sub_222BAE7F4((uint64_t)v28, (uint64_t)(v14 + 7));
  sub_222BAE7F4((uint64_t)v27, (uint64_t)(v14 + 2));
  if (qword_25576F480 != -1)
    swift_once();
  v18 = sub_222BC7DA4();
  sub_222BAC438(v18, (uint64_t)qword_25576F610);
  v19 = sub_222BC7E94();
  v20 = sub_222BC7D8C();
  if (os_log_type_enabled(v20, v19))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_222B17000, v20, v19, "About to clear Core ML temp folder", v21, 2u);
    MEMORY[0x22767A418](v21, -1, -1);
  }

  sub_222BC14D8();
  sub_222BB4C9C((uint64_t)v27);
  sub_222BB4C9C((uint64_t)v28);
  return v14;
}

_QWORD *sub_222BB4850(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  uint8_t *v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41[5];
  uint64_t v42[6];

  v37 = a5;
  v38 = a4;
  v39 = a3;
  v14 = sub_222BC7EC4();
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_222BC7EB8();
  MEMORY[0x24BDAC7A8](v17);
  v18 = sub_222BC7DE0();
  MEMORY[0x24BDAC7A8](v18);
  v42[3] = a6;
  v42[4] = a8;
  v19 = sub_222BB5DCC(v42);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v19, a1, a6);
  v41[3] = a7;
  v41[4] = a9;
  v20 = sub_222BB5DCC(v41);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v20, a2, a7);
  sub_222BAE37C();
  sub_222BC7DC8();
  v40 = MEMORY[0x24BEE4AF8];
  v34[1] = sub_222BB5E08((unint64_t *)&qword_25576F5F0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  v34[0] = sub_222BADC9C(&qword_25576F5F8);
  v34[2] = sub_222BAE400();
  sub_222BC7F18();
  v21 = *MEMORY[0x24BEE5750];
  v22 = v36;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 104);
  v23(v16, v21, v36);
  v24 = sub_222BC7EDC();
  v25 = v37;
  v37[12] = v24;
  v26 = MEMORY[0x24BEE4AF8];
  v25[13] = sub_222BAE938(MEMORY[0x24BEE4AF8], &qword_25576F6C8, &qword_25576F680, (uint64_t (*)(_QWORD))type metadata accessor for ModelInfo);
  sub_222BC7DC8();
  v40 = v26;
  sub_222BC7F18();
  v23(v16, v21, v22);
  v25[14] = sub_222BC7EDC();
  v25[15] = sub_222BAE938(MEMORY[0x24BEE4AF8], &qword_25576F6C0, &qword_25576F6A0, (uint64_t (*)(_QWORD))type metadata accessor for SegmentedModelState);
  v27 = (char *)v25 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_currentRunToken;
  v28 = sub_222BC7CF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *(_QWORD *)((char *)v25 + OBJC_IVAR____TtC24DVTInstrumentsFoundation21CoreMLPerfCoordinator_segmentSize) = 524288000;
  sub_222BAE7F4((uint64_t)v42, (uint64_t)(v25 + 7));
  sub_222BAE7F4((uint64_t)v41, (uint64_t)(v25 + 2));
  if (qword_25576F480 != -1)
    swift_once();
  v29 = sub_222BC7DA4();
  sub_222BAC438(v29, (uint64_t)qword_25576F610);
  v30 = sub_222BC7E94();
  v31 = sub_222BC7D8C();
  if (os_log_type_enabled(v31, v30))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_222B17000, v31, v30, "About to clear Core ML temp folder", v32, 2u);
    MEMORY[0x22767A418](v32, -1, -1);
  }

  v39();
  sub_222BB4C9C((uint64_t)v41);
  sub_222BB4C9C((uint64_t)v42);
  return v25;
}

uint64_t sub_222BB4C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_222BB4C9C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_222BB4CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_222BC7CF0() - 8) + 80);
  return sub_222BAEFD0(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_222BB4CF0()
{
  return swift_deallocObject();
}

uint64_t sub_222BB4D00()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_222BB4D20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_222BB4D30()
{
  return swift_release();
}

_QWORD *sub_222BB4D38(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_222BB4D5C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_222BB4D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_222BB4DF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_222BC7CF0() - 8) + 80);
  return sub_222BAF0D8(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_222BB4E38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  result = swift_beginAccess();
  *v1 = *(_QWORD *)(*(_QWORD *)(v2 + 104) + 16);
  return result;
}

uint64_t sub_222BB4E7C()
{
  return swift_deallocObject();
}

uint64_t sub_222BB4E8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(type metadata accessor for ModelLocation() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v4 = sub_222BC7CF0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v3 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  v7 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v7(v0 + v2, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v7(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_222BB4F80()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for ModelLocation() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_222BC7CF0() - 8) + 80);
  return sub_222BB1DF8(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, (uint64_t)v0 + v3, *(uint64_t *)((char *)v0 + ((v3 + 63) & 0xFFFFFFFFFFFFFFF8)), (uint64_t)v0 + ((v4 + ((v3 + 63) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4));
}

uint64_t sub_222BB5004()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5014(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_222BB503C()
{
  uint64_t v0;

  return sub_222BB1FE8(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_222BB5044()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5054()
{
  uint64_t v0;

  return sub_222BB3174(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_222BB506C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(unint64_t, uint64_t);

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for SegmentPayload();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  swift_release();
  v8 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  sub_222BB512C(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v8(v0 + v7 + *(int *)(v5 + 28), v1);
  return swift_deallocObject();
}

uint64_t sub_222BB512C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_222BB5170()
{
  return sub_222BB527C((uint64_t (*)(_QWORD))type metadata accessor for SegmentPayload, (uint64_t (*)(_QWORD, unint64_t, unint64_t))sub_222BB2244);
}

uint64_t sub_222BB5184()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_222BB2EE8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_222BB51AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_222BC7C90();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_222BB5268()
{
  return sub_222BB527C((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, unint64_t, unint64_t))sub_222BB27D4);
}

uint64_t sub_222BB527C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(sub_222BC7CF0() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + v5, v2 + ((v5 + v6 + v7) & ~v7));
}

uint64_t sub_222BB52F4()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_222BB5384()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_222BC7CF0() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_222BB2930(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_222BB53C8()
{
  return swift_deallocObject();
}

uint64_t sub_222BB53D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = sub_222BC7C90();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((((v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 63) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_222BC7CF0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = v5;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v9);
  return swift_deallocObject();
}

uint64_t sub_222BB54D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_222BC7C90() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = ((v3 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_222BC7CF0() - 8) + 80);
  return sub_222BB2A8C(v0 + v2, *(unsigned __int8 *)(v0 + v3), *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v0 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8)), (char *)(v0 + ((v5 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5)));
}

uint64_t sub_222BB5580()
{
  return swift_deallocObject();
}

unint64_t sub_222BB5594()
{
  unint64_t result;

  result = qword_25576F648;
  if (!qword_25576F648)
  {
    result = MEMORY[0x22767A388](&protocol conformance descriptor for PerfRunError, &type metadata for PerfRunError);
    atomic_store(result, (unint64_t *)&qword_25576F648);
  }
  return result;
}

uint64_t dispatch thunk of PerfCoordinator.writeModelToDiskAndRegisterCallback(modelPayload:perfRunConfig:computeUnit:postTraceCompletionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of PerfCoordinator.kickoffSuspendedPerfRunForModel(forToken:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PerfCoordinator.cancelPerfRun(forModelToken:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PerfCoordinator.generateSegmentationConfig()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PerfCoordinator.writeSegment(payload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PerfCoordinator.assembleModelSegments(modelToken:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PerfCoordinator.finalizeModel(modelName:modelToken:isCompressed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of PerfCoordinator.finalizePerfRunSetup(modelToken:modelURL:isCompressed:perfRunConfig:computeUnit:postTraceCompletionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 64))();
}

_BYTE *initializeBufferWithCopyOfBuffer for PerfRunError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PerfRunError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PerfRunError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_222BB574C + 4 * byte_222BD2715[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_222BB5780 + 4 * byte_222BD2710[v4]))();
}

uint64_t sub_222BB5780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_222BB5788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x222BB5790);
  return result;
}

uint64_t sub_222BB579C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x222BB57A4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_222BB57A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_222BB57B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_222BB57BC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_222BB57C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PerfRunError()
{
  return &type metadata for PerfRunError;
}

uint64_t sub_222BB57DC()
{
  return type metadata accessor for CoreMLPerfCoordinator();
}

void sub_222BB57E4()
{
  unint64_t v0;

  sub_222BB58B8();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CoreMLPerfCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreMLPerfCoordinator.kickoffSuspendedPerfRunForModel(forToken:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CoreMLPerfCoordinator.cancelPerfRun(forModelToken:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CoreMLPerfCoordinator.__testOnly_isInternalStateClean.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

void sub_222BB58B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25576F668)
  {
    sub_222BC7CF0();
    v0 = sub_222BC7EF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25576F668);
  }
}

ValueMetadata *type metadata accessor for CoreMLPerfCoordinator.TestFactory()
{
  return &type metadata for CoreMLPerfCoordinator.TestFactory;
}

unint64_t sub_222BB591C()
{
  unint64_t result;

  result = qword_25576F670;
  if (!qword_25576F670)
  {
    result = MEMORY[0x22767A388](&protocol conformance descriptor for PerfRunError, &type metadata for PerfRunError);
    atomic_store(result, (unint64_t *)&qword_25576F670);
  }
  return result;
}

unint64_t sub_222BB5960()
{
  unint64_t result;

  result = qword_25576F678;
  if (!qword_25576F678)
  {
    result = MEMORY[0x22767A388](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_25576F678);
  }
  return result;
}

uint64_t sub_222BB59A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_222BB59E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_222BB5A2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_222BB5A70()
{
  unint64_t result;

  result = qword_25576F6A8;
  if (!qword_25576F6A8)
  {
    result = MEMORY[0x22767A388](&protocol conformance descriptor for PerfRunError, &type metadata for PerfRunError);
    atomic_store(result, (unint64_t *)&qword_25576F6A8);
  }
  return result;
}

uint64_t sub_222BB5AB4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_222BB5AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + *(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_222BB5B90(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  return swift_deallocObject();
}

uint64_t sub_222BB5B90(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_222BB5BA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_222BC7CF0() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  return sub_222BAFC74(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_222BB5BF8()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5C08(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_222BB5C18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_222BADC9C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_222BB5C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_222BC7CF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_222BB5CC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_222BC7CF0() - 8) + 80);
  return sub_222BAF3AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_222BB5CF8()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5D08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_222BADC9C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_222BB5D4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_222BB5D70()
{
  uint64_t v0;

  return sub_222BAF6B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_222BB5D78()
{
  return swift_deallocObject();
}

uint64_t sub_222BB5D88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_222BADC9C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_222BB5DCC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_222BB5E08(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22767A388](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_222BB5E48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_222BADC9C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_222BB5EE8@<X0>(uint64_t a1@<X8>)
{
  return sub_222BB5194(a1);
}

uint64_t ModelPayload.modelData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_222BB5F2C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_222BB5F2C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t ModelPayload.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelPayload.isCompressed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ModelPayload.init(modelData:modelName:isCompressed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

uint64_t ModelPayload.destinationFileName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_222BC7E58();
  sub_222BC7E58();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ModelPayload(uint64_t a1)
{
  sub_222BB512C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_222BB5F2C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_222BB5F2C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_222BB512C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for ModelPayload(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ModelPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_222BB512C(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelPayload()
{
  return &type metadata for ModelPayload;
}

void sub_222BB6264()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = sub_222BC7E1C();
    v4 = v3;

    qword_25576F6D0 = v2;
    *(_QWORD *)algn_25576F6D8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_222BB62EC()
{
  uint64_t result;

  sub_222BB6430();
  if (qword_25576F490 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  result = sub_222BC7EE8();
  qword_255770C78 = result;
  return result;
}

uint64_t sub_222BB6380()
{
  uint64_t v0;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_255770C80);
  sub_222BAC438(v0, (uint64_t)qword_255770C80);
  if (qword_25576F490 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return sub_222BC7D98();
}

unint64_t sub_222BB6430()
{
  unint64_t result;

  result = qword_25576F6E0;
  if (!qword_25576F6E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25576F6E0);
  }
  return result;
}

uint64_t sub_222BB646C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F6E8);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F6E8);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.modelToken.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_222BB6534()
{
  return 1;
}

uint64_t sub_222BB6548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_222BBA970(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_222BB6570()
{
  return 0;
}

void sub_222BB657C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_222BB6588()
{
  sub_222BB66E8();
  return sub_222BC8068();
}

uint64_t sub_222BB65B0()
{
  sub_222BB66E8();
  return sub_222BC8074();
}

uint64_t CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F700);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB66E8();
  sub_222BC805C();
  sub_222BC7CF0();
  sub_222BB5E08(&qword_25576F710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_222BC7FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_222BB66E8()
{
  unint64_t result;

  result = qword_25576F708;
  if (!qword_25576F708)
  {
    result = MEMORY[0x22767A388](&unk_222BD2D8C, &type metadata for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F708);
  }
  return result;
}

uint64_t CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = sub_222BC7CF0();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_222BADC9C(&qword_25576F718);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB66E8();
  sub_222BC8050();
  if (!v2)
  {
    sub_222BB5E08(&qword_25576F720, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_222BC7F84();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_222BB59A4((uint64_t)v11, v15, type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse);
  }
  return sub_222BB4C9C((uint64_t)a1);
}

uint64_t type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1)
{
  return sub_222BB6E48(a1, (uint64_t *)&unk_25576F760);
}

uint64_t sub_222BB690C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.init(from:)(a1, a2);
}

uint64_t sub_222BB6920(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F700);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB66E8();
  sub_222BC805C();
  sub_222BC7CF0();
  sub_222BB5E08(&qword_25576F710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_222BC7FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.segmentationConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_222BB6A3C(v1, a1);
}

uint64_t sub_222BB6A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SegmentationConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_222BB6A80()
{
  return 0xD000000000000012;
}

uint64_t sub_222BB6A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_222BBAA18(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_222BB6AC4()
{
  sub_222BB6C24();
  return sub_222BC8068();
}

uint64_t sub_222BB6AEC()
{
  sub_222BB6C24();
  return sub_222BC8074();
}

uint64_t CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F728);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB6C24();
  sub_222BC805C();
  type metadata accessor for SegmentationConfig();
  sub_222BB5E08(&qword_25576F738, (uint64_t (*)(uint64_t))type metadata accessor for SegmentationConfig, (uint64_t)&protocol conformance descriptor for SegmentationConfig);
  sub_222BC7FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_222BB6C24()
{
  unint64_t result;

  result = qword_25576F730;
  if (!qword_25576F730)
  {
    result = MEMORY[0x22767A388](&unk_222BD2D3C, &type metadata for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F730);
  }
  return result;
}

uint64_t CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for SegmentationConfig();
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_222BADC9C(&qword_25576F740);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB6C24();
  sub_222BC8050();
  if (!v2)
  {
    sub_222BB5E08(&qword_25576F748, (uint64_t (*)(uint64_t))type metadata accessor for SegmentationConfig, (uint64_t)&protocol conformance descriptor for SegmentationConfig);
    sub_222BC7F84();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_222BB59A4(v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
    sub_222BB59A4((uint64_t)v11, v13, type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse);
  }
  return sub_222BB4C9C((uint64_t)a1);
}

uint64_t type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(uint64_t a1)
{
  return sub_222BB6E48(a1, (uint64_t *)&unk_25576F770);
}

uint64_t sub_222BB6E48(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_222BB6E7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.init(from:)(a1, a2);
}

uint64_t sub_222BB6E90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F728);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB6C24();
  sub_222BC805C();
  type metadata accessor for SegmentationConfig();
  sub_222BB5E08(&qword_25576F738, (uint64_t (*)(uint64_t))type metadata accessor for SegmentationConfig, (uint64_t)&protocol conformance descriptor for SegmentationConfig);
  sub_222BC7FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_222BB6FA0()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

uint64_t sub_222BB6FE0()
{
  return sub_222BC8038();
}

uint64_t sub_222BB7004()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

uint64_t sub_222BB7044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_222BBAA9C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_222BB706C()
{
  sub_222BB71A4();
  return sub_222BC8068();
}

uint64_t sub_222BB7094()
{
  sub_222BB71A4();
  return sub_222BC8074();
}

uint64_t CoreMLModelWriterServiceMessageHandler.ErrorResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F750);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB71A4();
  sub_222BC805C();
  sub_222BC7F9C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_222BB71A4()
{
  unint64_t result;

  result = qword_25576F758;
  if (!qword_25576F758)
  {
    result = MEMORY[0x22767A388](&unk_222BD2CEC, &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F758);
  }
  return result;
}

uint64_t sub_222BB71E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_222BADC9C(&qword_25576F750);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB4D38(a1, a1[3]);
  sub_222BB71A4();
  sub_222BC805C();
  sub_222BC7F9C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t *CoreMLModelWriterServiceMessageHandler.__allocating_init(coordinator:channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = sub_222BB4C74(a1, v5);
  v8 = sub_222BBAB8C(v7, a2, v2, v5, v6);
  sub_222BB4C9C(a1);
  return v8;
}

uint64_t *CoreMLModelWriterServiceMessageHandler.init(coordinator:channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = sub_222BB4C74(a1, v5);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = sub_222BBA918((uint64_t)v9, a2, v2, v5, v6);
  sub_222BB4C9C(a1);
  return v11;
}

void sub_222BB73D8(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *v12;

  v2 = (void *)sub_222BC7E10();
  v3 = objc_msgSend(a1, sel_stringForMessageKey_, v2);

  if (v3)
  {
    v4 = sub_222BC7E1C();
    v6 = v5;

    sub_222BC7E94();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_222BD2620;
    *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v7 + 64) = sub_222BADCDC();
    *(_QWORD *)(v7 + 32) = v4;
    *(_QWORD *)(v7 + 40) = v6;
    swift_bridgeObjectRetain();
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    v8 = (char *)&loc_222BB7510 + dword_222BB77FC[sub_222BBAB44()];
    __asm { BR              X10 }
  }
  if (qword_25576F4A8 != -1)
    swift_once();
  v9 = sub_222BC7DA4();
  sub_222BAC438(v9, (uint64_t)qword_25576F6E8);
  v10 = sub_222BC7EA0();
  v12 = sub_222BC7D8C();
  if (os_log_type_enabled(v12, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_222B17000, v12, v10, "ModelWriterService (Handler) no command received. Model was not written to disk.", v11, 2u);
    MEMORY[0x22767A418](v11, -1, -1);
  }

}

void sub_222BB781C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  os_log_type_t v30;
  NSObject *v31;
  BOOL v32;
  uint8_t *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t isa;
  Class v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(_QWORD *, _QWORD *, id, uint64_t (*)(), NSObject *, uint64_t, Class);
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  os_log_type_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  os_log_type_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  void *v75;
  char *v76;
  __int128 v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  _QWORD v95[7];
  _QWORD v96[4];
  BOOL v97;

  v2 = sub_222BADC9C(&qword_25576F630);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v93 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v75 - v5;
  v7 = sub_222BC7CF0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v75 - v12;
  v14 = objc_msgSend(a1, sel_data);
  if (v14)
  {
    v15 = v14;
    v91 = v6;
    v92 = sub_222BC7CB4();
    v17 = v16;

    v18 = (void *)sub_222BC7E10();
    v19 = objc_msgSend(a1, sel_stringForMessageKey_, v18);

    v89 = v8;
    v90 = v7;
    v76 = v11;
    if (v19)
    {
      v87 = sub_222BC7E1C();
      v21 = v20;

    }
    else
    {
      sub_222BC7CE4();
      v87 = sub_222BC7CD8();
      v25 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21 = v26;
      v25(v13, v7);
    }
    v27 = (void *)sub_222BC7E10();
    v86 = objc_msgSend(a1, sel_integerForMessageKey_, v27);

    v28 = (void *)sub_222BC7E10();
    v29 = objc_msgSend(a1, sel_integerForMessageKey_, v28);

    v30 = sub_222BC7E94();
    if (qword_25576F498 != -1)
      swift_once();
    v31 = qword_255770C78;
    v32 = os_log_type_enabled((os_log_t)qword_255770C78, v30);
    v88 = v17;
    if (v32)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 67109120;
      LODWORD(v95[0]) = v29 == (id)1;
      sub_222BC7F00();
      _os_log_impl(&dword_222B17000, v31, v30, "Is Compressed: %{BOOL}d", v33, 8u);
      MEMORY[0x22767A418](v33, -1, -1);
    }
    v34 = (void *)sub_222BC7E10();
    v85 = objc_msgSend(a1, sel_integerForMessageKey_, v34);

    v35 = (void *)sub_222BC7E10();
    v84 = objc_msgSend(a1, sel_integerForMessageKey_, v35);

    v36 = (void *)sub_222BC7E10();
    v83 = objc_msgSend(a1, sel_integerForMessageKey_, v36);

    v37 = (void *)sub_222BC7E10();
    v82 = objc_msgSend(a1, sel_integerForMessageKey_, v37);

    v38 = (void *)sub_222BC7E10();
    v81 = objc_msgSend(a1, sel_integerForMessageKey_, v38);

    v39 = (void *)sub_222BC7E10();
    v40 = objc_msgSend(a1, sel_stringForMessageKey_, v39);

    v75 = a1;
    if (v40)
    {
      v79 = sub_222BC7E1C();
      v80 = v41;

    }
    else
    {
      v79 = 0;
      v80 = 0;
    }
    v78 = v29 == (id)1;
    sub_222BC7E94();
    sub_222BADC9C(&qword_25576F5D8);
    v42 = swift_allocObject();
    v77 = xmmword_222BD2620;
    *(_OWORD *)(v42 + 16) = xmmword_222BD2620;
    v43 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE0D00];
    v44 = sub_222BADCDC();
    *(_QWORD *)(v42 + 64) = v44;
    v45 = v87;
    *(_QWORD *)(v42 + 32) = v87;
    *(_QWORD *)(v42 + 40) = v21;
    swift_bridgeObjectRetain();
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    sub_222BC7E94();
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v77;
    v47 = v86;
    v95[0] = v86;
    v48 = sub_222BC7FCC();
    *(_QWORD *)(v46 + 56) = v43;
    *(_QWORD *)(v46 + 64) = v44;
    *(_QWORD *)(v46 + 32) = v48;
    *(_QWORD *)(v46 + 40) = v49;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    v50 = v21;
    v51 = v94;
    isa = (uint64_t)v94[5].isa;
    v53 = v94[6].isa;
    sub_222BB4D38(&v94[2].isa, isa);
    v54 = v92;
    v55 = v88;
    v96[0] = v92;
    v96[1] = v88;
    v96[2] = v45;
    v96[3] = v50;
    v97 = v78;
    v95[0] = v85;
    v95[1] = v84;
    v95[2] = v83;
    v95[3] = v82;
    v95[4] = v81;
    v95[5] = v79;
    v95[6] = v80;
    v56 = (void (*)(_QWORD *, _QWORD *, id, uint64_t (*)(), NSObject *, uint64_t, Class))*((_QWORD *)v53 + 1);
    sub_222BB5F2C(v92, v88);
    swift_retain();
    v57 = v47;
    v58 = (uint64_t)v91;
    v56(v96, v95, v57, sub_222BBB760, v51, isa, v53);
    swift_release();
    swift_bridgeObjectRelease();
    v59 = v93;
    sub_222BB5E48(v58, v93, &qword_25576F630);
    v60 = v89;
    v61 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v59, 1, v90) == 1)
    {
      sub_222BB5C18(v58, &qword_25576F630);
      sub_222BB512C(v54, v55);
      sub_222BB512C(v54, v55);
      swift_bridgeObjectRelease();
      v62 = v59;
    }
    else
    {
      v87 = v50;
      v63 = (uint64_t)v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v76, v59, v61);
      v64 = v75;
      if (qword_25576F4A8 != -1)
        swift_once();
      v65 = sub_222BC7DA4();
      sub_222BAC438(v65, (uint64_t)qword_25576F6E8);
      v66 = sub_222BC7E94();
      v67 = sub_222BC7D8C();
      v68 = v66;
      if (os_log_type_enabled(v67, v66))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v69 = 0;
        _os_log_impl(&dword_222B17000, v67, v68, "sendingReply from messageReceived", v69, 2u);
        MEMORY[0x22767A418](v69, -1, -1);
      }

      sub_222BB9740(v64, v63);
      v70 = sub_222BC7E94();
      v71 = sub_222BC7D8C();
      v72 = v70;
      if (os_log_type_enabled(v71, v70))
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_222B17000, v71, v72, "sent reply from messageReceived", v73, 2u);
        MEMORY[0x22767A418](v73, -1, -1);
      }
      v74 = v92;
      sub_222BB512C(v92, v55);

      swift_bridgeObjectRelease();
      sub_222BB512C(v74, v55);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v63, v61);
      v62 = v58;
    }
    sub_222BB5C18(v62, &qword_25576F630);
  }
  else
  {
    if (qword_25576F4A8 != -1)
      swift_once();
    v22 = sub_222BC7DA4();
    sub_222BAC438(v22, (uint64_t)qword_25576F6E8);
    v23 = sub_222BC7EA0();
    v94 = sub_222BC7D8C();
    if (os_log_type_enabled(v94, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_222B17000, v94, v23, "ModelWriterService (Handler) - no model data received", v24, 2u);
      MEMORY[0x22767A418](v24, -1, -1);
    }

  }
}

uint64_t sub_222BB81C8(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = type metadata accessor for SegmentationConfig();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v1[5];
  v7 = v1[6];
  sub_222BB4D38(v1 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_222BD2620;
  v9 = *v5;
  v10 = MEMORY[0x24BEE4060];
  *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE4008];
  *(_QWORD *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 32) = v9;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  sub_222BB9A3C(a1, (uint64_t)v5);
  return sub_222BB5AB4((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
}

void sub_222BB83F0(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(NSObject *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  os_log_type_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  NSObject *v65;

  v3 = type metadata accessor for SegmentPayload();
  MEMORY[0x24BDAC7A8](v3);
  v65 = ((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_222BC7CF0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_data);
  if (v12)
  {
    v13 = v12;
    v14 = sub_222BC7CB4();
    v16 = v15;

    v64 = v1;
    sub_222BBA5FC(a1, 0xD00000000000001ALL, 0x8000000222BE2400, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_222BB512C(v14, v16);
      sub_222BB5C18((uint64_t)v7, &qword_25576F630);
    }
    else
    {
      v62 = v14;
      v63 = v16;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      v20 = (void *)sub_222BC7E10();
      v21 = (objc_class *)objc_msgSend(a1, sel_integerForMessageKey_, v20);

      v22 = (void *)sub_222BC7E10();
      v23 = (objc_class *)objc_msgSend(a1, sel_integerForMessageKey_, v22);

      LODWORD(v61) = sub_222BC7E94();
      v60 = v8;
      v24 = v9;
      if (qword_25576F498 != -1)
        swift_once();
      v59 = sub_222BADC9C(&qword_25576F5D8);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_222BD2700;
      v26 = MEMORY[0x24BEE1768];
      v27 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v25 + 64) = v27;
      *(_QWORD *)(v25 + 32) = v21;
      *(_QWORD *)(v25 + 96) = v26;
      *(_QWORD *)(v25 + 104) = v27;
      *(_QWORD *)(v25 + 72) = v23;
      v28 = sub_222BC7CD8();
      v29 = v11;
      v31 = v30;
      *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
      v58 = sub_222BADCDC();
      *(_QWORD *)(v25 + 144) = v58;
      *(_QWORD *)(v25 + 112) = v28;
      *(_QWORD *)(v25 + 120) = v31;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      v32 = v21;
      v33 = v65;
      v34 = (char *)v65 + *(int *)(v3 + 28);
      v61 = v24;
      v35 = (uint64_t)v29;
      v36 = v29;
      v37 = v60;
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v34, v36, v60);
      v39 = v62;
      v38 = v63;
      v33->isa = (Class)v62;
      v33[1].isa = (Class)v38;
      v33[2].isa = v32;
      v33[3].isa = v23;
      v40 = v64[5];
      v41 = v64[6];
      sub_222BB4D38(v64 + 2, v40);
      v42 = *(void (**)(NSObject *, uint64_t, uint64_t))(v41 + 40);
      sub_222BB5F2C(v39, v38);
      v42(v33, v40, v41);
      v43 = v37;
      if (qword_25576F4A8 != -1)
        swift_once();
      v44 = sub_222BC7DA4();
      sub_222BAC438(v44, (uint64_t)qword_25576F6E8);
      v45 = sub_222BC7E94();
      v46 = sub_222BC7D8C();
      v47 = os_log_type_enabled(v46, v45);
      v48 = v61;
      if (v47)
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_222B17000, v46, v45, "handleIncomingSegmentedModel: sendingReply from messageReceived", v49, 2u);
        MEMORY[0x22767A418](v49, -1, -1);
      }

      sub_222BB9740(a1, v35);
      v50 = sub_222BC7E94();
      v51 = sub_222BC7D8C();
      v52 = v50;
      v53 = os_log_type_enabled(v51, v50);
      v55 = v62;
      v54 = v63;
      if (v53)
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl(&dword_222B17000, v51, v52, "handleIncomingSegmentedModel: sent reply from messageReceived", v56, 2u);
        MEMORY[0x22767A418](v56, -1, -1);
      }

      sub_222BB512C(v55, v54);
      sub_222BB5AB4((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for SegmentPayload);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v35, v43);
    }
  }
  else
  {
    if (qword_25576F4A8 != -1)
      swift_once();
    v17 = sub_222BC7DA4();
    sub_222BAC438(v17, (uint64_t)qword_25576F6E8);
    v18 = sub_222BC7EA0();
    v65 = sub_222BC7D8C();
    if (os_log_type_enabled(v65, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_222B17000, v65, v18, "handleIncomingSegmentedModel - no model data received", v19, 2u);
      MEMORY[0x22767A418](v19, -1, -1);
    }

  }
}

uint64_t sub_222BB8A54(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;

  v2 = v1;
  v4 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_222BC7CF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BBA5FC(a1, 0xD000000000000015, 0x8000000222BE1950, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_222BB5C18((uint64_t)v6, &qword_25576F630);
  v29 = a1;
  v12 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v31 = v7;
  v12(v10, v6, v7);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v13 = swift_allocObject();
  v30 = xmmword_222BD2620;
  *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
  v14 = sub_222BC7CD8();
  v16 = v15;
  *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 64) = sub_222BADCDC();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v17 = v2[5];
  v18 = v2[6];
  sub_222BB4D38(v2 + 2, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, v17, v18);
  if (qword_25576F4A8 != -1)
    swift_once();
  v19 = sub_222BC7DA4();
  sub_222BAC438(v19, (uint64_t)qword_25576F6E8);
  v20 = sub_222BC7E94();
  v21 = sub_222BC7D8C();
  v22 = v20;
  if (os_log_type_enabled(v21, v20))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_222B17000, v21, v22, "assembleModelSegments: sendingReply from messageReceived", v23, 2u);
    MEMORY[0x22767A418](v23, -1, -1);
  }

  sub_222BB9740(v29, (uint64_t)v10);
  v24 = sub_222BC7E94();
  v25 = sub_222BC7D8C();
  v26 = v24;
  if (os_log_type_enabled(v25, v24))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_222B17000, v25, v26, "assembleModelSegments: sent reply from messageReceived", v27, 2u);
    MEMORY[0x22767A418](v27, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v31);
}

uint64_t sub_222BB8E48(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  _BOOL8 v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  void (*v61)(uint64_t, uint64_t, _BOOL8, _QWORD *, id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  _BOOL4 v66;
  uint64_t v67;
  void *v68;
  uint8_t *v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  id v75;
  id v76;
  id v77;
  id v78;
  void (*v79)(char *, uint64_t);
  _QWORD *v80;
  uint64_t v81;
  id v82;
  id v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[7];
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;

  v2 = v1;
  v4 = sub_222BADC9C(&qword_25576F7E0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v75 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v90 = (uint64_t)&v75 - v11;
  v12 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_222BC7CF0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v75 - v20;
  sub_222BBA5FC(a1, 0xD000000000000015, 0x8000000222BE1950, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    return sub_222BB5C18((uint64_t)v14, &qword_25576F630);
  v87 = v7;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
  v23 = (void *)sub_222BC7E10();
  v24 = (uint64_t)v21;
  v25 = objc_msgSend(a1, sel_stringForMessageKey_, v23);

  v89 = v24;
  if (v25)
  {
    v26 = sub_222BC7E1C();
    v28 = v27;

    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
    if (v28)
      goto LABEL_8;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  }
  v26 = sub_222BC7CD8();
  v28 = v29;
LABEL_8:
  v79 = *(void (**)(char *, uint64_t))(v16 + 8);
  v79(v19, v15);
  v30 = (void *)sub_222BC7E10();
  v88 = a1;
  v31 = objc_msgSend(a1, sel_integerForMessageKey_, v30);

  v78 = v31;
  v32 = v31 == (id)1;
  v33 = sub_222BC7C90();
  v85 = *(_QWORD *)(v33 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56);
  v35 = v90;
  v34(v90, 1, 1, v33);
  v36 = v2 + 2;
  v80 = v2;
  v37 = v2[5];
  v38 = v2[6];
  v84 = v36;
  sub_222BB4D38(v36, v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t))(v38 + 56))(v26, v28, v89, v32, v37, v38);
  v86 = v33;
  sub_222BB5C18(v35, &qword_25576F7E0);
  swift_bridgeObjectRelease();
  v34((uint64_t)v10, 0, 1, v33);
  sub_222BBB794((uint64_t)v10, v35);
  v39 = v88;
  v81 = v15;
  v40 = (void *)sub_222BC7E10();
  v83 = objc_msgSend(v39, sel_integerForMessageKey_, v40);

  v41 = (void *)sub_222BC7E10();
  v82 = objc_msgSend(v39, sel_integerForMessageKey_, v41);

  v42 = (void *)sub_222BC7E10();
  v43 = objc_msgSend(v39, sel_integerForMessageKey_, v42);

  v44 = (void *)sub_222BC7E10();
  v45 = objc_msgSend(v39, sel_integerForMessageKey_, v44);

  v46 = (void *)sub_222BC7E10();
  v47 = objc_msgSend(v39, sel_integerForMessageKey_, v46);

  v48 = (void *)sub_222BC7E10();
  v75 = objc_msgSend(v39, sel_integerForMessageKey_, v48);

  v49 = (void *)sub_222BC7E10();
  v50 = objc_msgSend(v39, sel_stringForMessageKey_, v49);

  v77 = v45;
  v76 = v47;
  v51 = v43;
  if (v50)
  {
    v52 = sub_222BC7E1C();
    v54 = v53;

  }
  else
  {
    v52 = 0;
    v54 = 0;
  }
  v55 = v86;
  v56 = v85;
  sub_222BAE7F4((uint64_t)v84, (uint64_t)v92);
  v58 = v93;
  v57 = v94;
  sub_222BB4D38(v92, v93);
  v59 = (uint64_t)v87;
  sub_222BB5E48(v90, (uint64_t)v87, &qword_25576F7E0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v59, 1, v55);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v60 = v78 == (id)1;
    v91[0] = v82;
    v91[1] = v51;
    v91[2] = v77;
    v91[3] = v76;
    v91[4] = v75;
    v91[5] = v52;
    v91[6] = v54;
    v61 = *(void (**)(uint64_t, uint64_t, _BOOL8, _QWORD *, id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v57 + 64);
    v62 = v80;
    swift_retain();
    v61(v89, v59, v60, v91, v83, sub_222BBB760, v62, v58, v57);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v59, v55);
    sub_222BB4C9C((uint64_t)v92);
    if (qword_25576F4A8 != -1)
      swift_once();
    v63 = sub_222BC7DA4();
    sub_222BAC438(v63, (uint64_t)qword_25576F6E8);
    v64 = sub_222BC7E94();
    v65 = sub_222BC7D8C();
    v66 = os_log_type_enabled(v65, v64);
    v67 = v90;
    v68 = v88;
    if (v66)
    {
      v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v69 = 0;
      _os_log_impl(&dword_222B17000, v65, v64, "sendingReply from messageReceived", v69, 2u);
      MEMORY[0x22767A418](v69, -1, -1);
    }

    v70 = v89;
    sub_222BB9740(v68, v89);
    v71 = sub_222BC7E94();
    v72 = sub_222BC7D8C();
    v73 = v71;
    if (os_log_type_enabled(v72, v71))
    {
      v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v74 = 0;
      _os_log_impl(&dword_222B17000, v72, v73, "sent reply from messageReceived", v74, 2u);
      MEMORY[0x22767A418](v74, -1, -1);
    }

    sub_222BB5C18(v67, &qword_25576F7E0);
    return ((uint64_t (*)(uint64_t, uint64_t))v79)(v70, v81);
  }
  return result;
}

uint64_t sub_222BB9740(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BC7CF0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a2, v9);
  sub_222BC7BDC();
  swift_allocObject();
  sub_222BC7BD0();
  sub_222BB5E08(&qword_25576F7D8, type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse, (uint64_t)&protocol conformance descriptor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse);
  v10 = sub_222BC7BC4();
  v12 = v11;
  sub_222BB5AB4((uint64_t)v8, type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse);
  swift_release();
  sub_222BB5F2C(v10, v12);
  v13 = (void *)sub_222BC7CA8();
  v14 = objc_msgSend((id)objc_opt_self(), sel_messageWithData_, v13);
  sub_222BB512C(v10, v12);

  v15 = objc_msgSend(a1, sel_newReplyWithMessage_, v14);
  v16 = *(void **)(v3 + 56);
  aBlock[4] = sub_222BB9A30;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BC3504;
  aBlock[3] = &unk_24EB2BB70;
  v17 = _Block_copy(aBlock);
  objc_msgSend(v16, sel_sendMessage_replyHandler_, v15, v17);
  _Block_release(v17);

  return sub_222BB512C(v10, v12);
}

void sub_222BB9A30(uint64_t a1)
{
  sub_222BB9FD0(a1, "ModelWriterService (Handler) - received reply from message send");
}

uint64_t sub_222BB9A3C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BB6A3C(a2, (uint64_t)v8);
  sub_222BC7BDC();
  swift_allocObject();
  sub_222BC7BD0();
  sub_222BB5E08(&qword_25576F7D0, type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse, (uint64_t)&protocol conformance descriptor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse);
  v9 = sub_222BC7BC4();
  v11 = v10;
  sub_222BB5AB4((uint64_t)v8, type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse);
  swift_release();
  sub_222BB5F2C(v9, v11);
  v12 = (void *)sub_222BC7CA8();
  v13 = objc_msgSend((id)objc_opt_self(), sel_messageWithData_, v12);
  sub_222BB512C(v9, v11);

  v14 = objc_msgSend(a1, sel_newReplyWithMessage_, v13);
  v15 = *(void **)(v3 + 56);
  aBlock[4] = sub_222BB9A30;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_222BC3504;
  aBlock[3] = &unk_24EB2BB48;
  v16 = _Block_copy(aBlock);
  objc_msgSend(v15, sel_sendMessage_replyHandler_, v14, v16);
  _Block_release(v16);

  return sub_222BB512C(v9, v11);
}

void sub_222BB9D18(__int128 *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  os_log_type_t v17;
  NSObject *v18;
  uint8_t *v19;
  __int128 v20;
  __int128 aBlock;
  void (*v22)(uint64_t, void *);
  void *v23;
  void (*v24)(uint64_t);
  uint64_t v25;

  v20 = *a1;
  v2 = *((_BYTE *)a1 + 16);
  if (qword_25576F4A8 != -1)
    swift_once();
  v3 = sub_222BC7DA4();
  sub_222BAC438(v3, (uint64_t)qword_25576F6E8);
  v4 = sub_222BC7E94();
  v5 = sub_222BC7D8C();
  if (os_log_type_enabled(v5, v4))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_222B17000, v5, v4, "sendTimingInfoMessage, about to convert to data", v6, 2u);
    MEMORY[0x22767A418](v6, -1, -1);
  }

  aBlock = v20;
  LOBYTE(v22) = v2;
  v7 = sub_222BBB594((uint64_t *)&aBlock);
  v9 = v8;
  v10 = (void *)sub_222BC7CA8();
  v11 = objc_msgSend((id)objc_opt_self(), sel_messageWithData_, v10);

  v12 = sub_222BC7E94();
  v13 = sub_222BC7D8C();
  if (os_log_type_enabled(v13, v12))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_222B17000, v13, v12, "sendTimingInfoMessage, about to send", v14, 2u);
    MEMORY[0x22767A418](v14, -1, -1);
  }

  v15 = *(void **)(v1 + 56);
  v24 = sub_222BB9FC4;
  v25 = 0;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v22 = sub_222BC3504;
  v23 = &unk_24EB27B80;
  v16 = _Block_copy(&aBlock);
  objc_msgSend(v15, sel_sendMessage_replyHandler_, v11, v16);
  _Block_release(v16);
  v17 = sub_222BC7E94();
  v18 = sub_222BC7D8C();
  if (os_log_type_enabled(v18, v17))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_222B17000, v18, v17, "sendTimingInfoMessage, did send", v19, 2u);
    MEMORY[0x22767A418](v19, -1, -1);

    sub_222BB512C(v7, v9);
  }
  else
  {
    sub_222BB512C(v7, v9);

  }
}

void sub_222BB9FC4(uint64_t a1)
{
  sub_222BB9FD0(a1, "received reply in sendTimingInfoMessage");
}

void sub_222BB9FD0(uint64_t a1, const char *a2)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *log;

  if (qword_25576F4A8 != -1)
    swift_once();
  v3 = sub_222BC7DA4();
  sub_222BAC438(v3, (uint64_t)qword_25576F6E8);
  v4 = sub_222BC7E94();
  log = sub_222BC7D8C();
  if (os_log_type_enabled(log, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, log, v4, a2, v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

}

void sub_222BBA0A4(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v3 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_222BC7CF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25576F4A8 != -1)
    swift_once();
  v10 = sub_222BC7DA4();
  sub_222BAC438(v10, (uint64_t)qword_25576F6E8);
  v11 = sub_222BC7E94();
  v12 = sub_222BC7D8C();
  if (os_log_type_enabled(v12, v11))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_222B17000, v12, v11, "Calling cancelPerfRun", v13, 2u);
    MEMORY[0x22767A418](v13, -1, -1);
  }

  v14 = (void *)sub_222BC7E10();
  v15 = objc_msgSend(a1, sel_stringForMessageKey_, v14);

  if (!v15)
    goto LABEL_8;
  v16 = sub_222BC7E1C();
  v18 = v17;

  sub_222BC7CCC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_bridgeObjectRelease();
    sub_222BB5C18((uint64_t)v5, &qword_25576F630);
LABEL_8:
    v19 = sub_222BC7EA0();
    v20 = sub_222BC7D8C();
    if (os_log_type_enabled(v20, v19))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_222B17000, v20, v19, "No model token received in cancelPerfRun", v21, 2u);
      MEMORY[0x22767A418](v21, -1, -1);
    }

    v25 = xmmword_222BD2DE0;
    v26 = 1;
    sub_222BB9D18(&v25);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_222BD2620;
  *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v22 + 64) = sub_222BADCDC();
  *(_QWORD *)(v22 + 32) = v16;
  *(_QWORD *)(v22 + 40) = v18;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v24 = v1[5];
  v23 = v1[6];
  sub_222BB4D38(v1 + 2, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 24))(v9, v24, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CoreMLModelWriterServiceMessageHandler.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  uint8_t *v5;

  v1 = v0;
  if (qword_25576F4A8 != -1)
    swift_once();
  v2 = sub_222BC7DA4();
  sub_222BAC438(v2, (uint64_t)qword_25576F6E8);
  v3 = sub_222BC7E94();
  v4 = sub_222BC7D8C();
  if (os_log_type_enabled(v4, v3))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, v4, v3, "ModelWriterService (Handler) - deinit invoked", v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

  sub_222BB4C9C(v1 + 16);
  return v1;
}

uint64_t CoreMLModelWriterServiceMessageHandler.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  uint8_t *v5;

  v1 = v0;
  if (qword_25576F4A8 != -1)
    swift_once();
  v2 = sub_222BC7DA4();
  sub_222BAC438(v2, (uint64_t)qword_25576F6E8);
  v3 = sub_222BC7E94();
  v4 = sub_222BC7D8C();
  if (os_log_type_enabled(v4, v3))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, v4, v3, "ModelWriterService (Handler) - deinit invoked", v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

  sub_222BB4C9C(v1 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_222BBA5FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _DWORD v24[4];

  v8 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)sub_222BC7E10();
  v12 = objc_msgSend(a1, sel_stringForMessageKey_, v11);

  if (v12)
  {
    v13 = sub_222BC7E1C();
    v15 = v14;

    sub_222BC7CCC();
    v16 = sub_222BC7CF0();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16) == 1)
    {
      sub_222BB5C18((uint64_t)v10, &qword_25576F630);
      v24[3] = sub_222BC7EA0();
      if (qword_25576F498 != -1)
        swift_once();
      sub_222BADC9C(&qword_25576F5D8);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_222BD2DF0;
      v19 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
      v20 = sub_222BADCDC();
      *(_QWORD *)(v18 + 32) = a2;
      *(_QWORD *)(v18 + 40) = a3;
      *(_QWORD *)(v18 + 96) = v19;
      *(_QWORD *)(v18 + 104) = v20;
      *(_QWORD *)(v18 + 64) = v20;
      *(_QWORD *)(v18 + 72) = v13;
      *(_QWORD *)(v18 + 80) = v15;
      swift_bridgeObjectRetain();
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, 1, 1, v16);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4, v10, v16);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a4, 0, 1, v16);
    }
  }
  else
  {
    sub_222BC7EA0();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_222BD2620;
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 64) = sub_222BADCDC();
    *(_QWORD *)(v22 + 32) = a2;
    *(_QWORD *)(v22 + 40) = a3;
    swift_bridgeObjectRetain();
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    v23 = sub_222BC7CF0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a4, 1, 1, v23);
  }
}

uint64_t *sub_222BBA918(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;

  a3[5] = a4;
  a3[6] = a5;
  v9 = sub_222BB5DCC(a3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a1, a4);
  a3[7] = a2;
  return a3;
}

uint64_t sub_222BBA970(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6B6F546C65646F6DLL && a2 == 0xEA00000000006E65)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_222BC7FD8();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_222BBA9FC()
{
  return 0x6B6F546C65646F6DLL;
}

uint64_t sub_222BBAA18(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000222BE2290)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_222BC7FD8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_222BBAA9C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_222BC7FD8();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_222BBAB28()
{
  return 0x646F43726F727265;
}

uint64_t sub_222BBAB44()
{
  unint64_t v0;

  v0 = sub_222BC7F78();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t *sub_222BBAB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CoreMLModelWriterServiceMessageHandler();
  v12 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  v12[5] = a4;
  v12[6] = a5;
  v13 = sub_222BB5DCC(v12 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(v13, v11, a4);
  v12[7] = a2;
  return v12;
}

uint64_t type metadata accessor for CoreMLModelWriterServiceMessageHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoreMLModelWriterServiceMessageHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreMLModelWriterServiceMessageHandler.__allocating_init(coordinator:channel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CoreMLModelWriterServiceMessageHandler.respond(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t initializeBufferWithCopyOfBuffer for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BC7CF0();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBAE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_222BBB0D4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t storeEnumTagSinglePayload for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBAE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_222BBB128(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t sub_222BBAE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_222BBB174(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for SegmentationConfig();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v6 = *(int *)(v4 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_222BC7CF0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v2 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_QWORD *initializeWithCopy for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBB0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_222BBB0D4(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
}

uint64_t sub_222BBB0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBB11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_222BBB128(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for SegmentationConfig);
}

uint64_t sub_222BBB128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_222BBB168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_222BBB174(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for SegmentationConfig);
}

uint64_t sub_222BBB174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLModelWriterServiceMessageHandler.ErrorResponse()
{
  return &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse;
}

uint64_t sub_222BBB1F8()
{
  return 0;
}

ValueMetadata *type metadata accessor for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys()
{
  return &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys()
{
  return &type metadata for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys;
}

uint64_t _s24DVTInstrumentsFoundation38CoreMLModelWriterServiceMessageHandlerC13ErrorResponseV10CodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s24DVTInstrumentsFoundation38CoreMLModelWriterServiceMessageHandlerC13ErrorResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_222BBB2B0 + 4 * asc_222BD2934[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_222BBB2D0 + 4 * byte_222BD2939[v4]))();
}

_BYTE *sub_222BBB2B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_222BBB2D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_222BBB2D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_222BBB2E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_222BBB2E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_222BBB2F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys()
{
  return &type metadata for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys;
}

unint64_t sub_222BBB310()
{
  unint64_t result;

  result = qword_25576F780;
  if (!qword_25576F780)
  {
    result = MEMORY[0x22767A388](&unk_222BD2B54, &type metadata for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F780);
  }
  return result;
}

unint64_t sub_222BBB358()
{
  unint64_t result;

  result = qword_25576F788;
  if (!qword_25576F788)
  {
    result = MEMORY[0x22767A388](&unk_222BD2C0C, &type metadata for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F788);
  }
  return result;
}

unint64_t sub_222BBB3A0()
{
  unint64_t result;

  result = qword_25576F790;
  if (!qword_25576F790)
  {
    result = MEMORY[0x22767A388](&unk_222BD2CC4, &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F790);
  }
  return result;
}

unint64_t sub_222BBB3E8()
{
  unint64_t result;

  result = qword_25576F798;
  if (!qword_25576F798)
  {
    result = MEMORY[0x22767A388](&unk_222BD2C34, &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F798);
  }
  return result;
}

unint64_t sub_222BBB430()
{
  unint64_t result;

  result = qword_25576F7A0;
  if (!qword_25576F7A0)
  {
    result = MEMORY[0x22767A388](&unk_222BD2C5C, &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F7A0);
  }
  return result;
}

unint64_t sub_222BBB478()
{
  unint64_t result;

  result = qword_25576F7A8;
  if (!qword_25576F7A8)
  {
    result = MEMORY[0x22767A388](&unk_222BD2B7C, &type metadata for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F7A8);
  }
  return result;
}

unint64_t sub_222BBB4C0()
{
  unint64_t result;

  result = qword_25576F7B0;
  if (!qword_25576F7B0)
  {
    result = MEMORY[0x22767A388](&unk_222BD2BA4, &type metadata for CoreMLModelWriterServiceMessageHandler.SegmentationConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F7B0);
  }
  return result;
}

unint64_t sub_222BBB508()
{
  unint64_t result;

  result = qword_25576F7B8;
  if (!qword_25576F7B8)
  {
    result = MEMORY[0x22767A388](&unk_222BD2AC4, &type metadata for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F7B8);
  }
  return result;
}

unint64_t sub_222BBB550()
{
  unint64_t result;

  result = qword_25576F7C0;
  if (!qword_25576F7C0)
  {
    result = MEMORY[0x22767A388](&unk_222BD2AEC, &type metadata for CoreMLModelWriterServiceMessageHandler.ModelTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F7C0);
  }
  return result;
}

uint64_t sub_222BBB594(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_222BC7E40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  if ((a1[2] & 1) != 0)
  {
    sub_222BC7BDC();
    swift_allocObject();
    sub_222BC7BD0();
    v12 = v6 + 101;
LABEL_5:
    sub_222BBB71C();
    v7 = sub_222BC7BC4();
    swift_release();
    return v7;
  }
  sub_222BC7E34();
  v7 = sub_222BC7E28();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9 >> 60 == 15)
  {
    sub_222BC7BDC();
    swift_allocObject();
    sub_222BC7BD0();
    v12 = 102;
    goto LABEL_5;
  }
  return v7;
}

uint64_t sub_222BBB704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_222BBB714()
{
  return swift_release();
}

unint64_t sub_222BBB71C()
{
  unint64_t result;

  result = qword_25576F7C8;
  if (!qword_25576F7C8)
  {
    result = MEMORY[0x22767A388](&protocol conformance descriptor for CoreMLModelWriterServiceMessageHandler.ErrorResponse, &type metadata for CoreMLModelWriterServiceMessageHandler.ErrorResponse);
    atomic_store(result, (unint64_t *)&qword_25576F7C8);
  }
  return result;
}

void sub_222BBB764(uint64_t a1)
{
  char v1;
  __int128 v2;
  char v3;

  v1 = *(_BYTE *)(a1 + 16);
  v2 = *(_OWORD *)a1;
  v3 = v1;
  sub_222BB9D18(&v2);
}

uint64_t sub_222BBB794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_222BADC9C(&qword_25576F7E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SegmentedModelState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_222BBB840 + 4 * byte_222BD2E00[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for SegmentedModelState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      a1 += *(int *)(type metadata accessor for SegmentationConfig() + 20);
      v3 = sub_222BC7CF0();
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
      v3 = sub_222BC7C90();
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for SegmentedModelState()
{
  char *v0;

  v0 = (char *)sub_222BBBA18 + 4 * byte_222BD2E08[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_222BBBA18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  *v0 = *v1;
  v2 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v3 = (char *)v0 + v2;
  v4 = (char *)v1 + v2;
  v5 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for SegmentedModelState(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_222BBBC4C(result);
    v2 = (char *)&loc_222BBBB5C + 4 * byte_222BD2E0C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_222BBBC4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SegmentedModelState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SegmentedModelState()
{
  uint64_t result;

  result = qword_25576F7E8;
  if (!qword_25576F7E8)
    return swift_getSingletonMetadata();
  return result;
}

void initializeWithTake for SegmentedModelState()
{
  char *v0;

  v0 = (char *)sub_222BBBD08 + 4 * byte_222BD2E10[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_222BBBD08()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  *v0 = *v1;
  v2 = *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v3 = (char *)v0 + v2;
  v4 = (char *)v1 + v2;
  v5 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for SegmentedModelState(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_222BBBC4C(result);
    v2 = (char *)&loc_222BBBE4C + 4 * byte_222BD2E14[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SegmentedModelState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for SegmentedModelState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_222BBBF58()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_222BBBF68()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SegmentationConfig();
  if (v1 <= 0x3F)
  {
    result = sub_222BC7C90();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t PerfRunConfig.init(experimentIterations:loadCount:predictionCount:maxPredictionTime:maxIterationTime:functionName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t PerfRunConfig.experimentIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PerfRunConfig.loadCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PerfRunConfig.predictionCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PerfRunConfig.maxPredictionTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PerfRunConfig.maxIterationTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PerfRunConfig.functionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for PerfRunConfig()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PerfRunConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PerfRunConfig(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PerfRunConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PerfRunConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PerfRunConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PerfRunConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PerfRunConfig()
{
  return &type metadata for PerfRunConfig;
}

uint64_t SegmentationConfig.init(segmentSizeInBytes:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for SegmentationConfig() + 20);
  v5 = sub_222BC7CF0();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t type metadata accessor for SegmentationConfig()
{
  uint64_t result;

  result = qword_25576F810;
  if (!qword_25576F810)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_222BBC2B4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E656B6F74;
  else
    return 0xD000000000000012;
}

BOOL sub_222BBC2EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_222BBC304()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

uint64_t sub_222BBC348()
{
  return sub_222BC8038();
}

uint64_t sub_222BBC370()
{
  sub_222BC802C();
  sub_222BC8038();
  return sub_222BC8044();
}

uint64_t sub_222BBC3B0()
{
  char *v0;

  return sub_222BBC2B4(*v0);
}

uint64_t sub_222BBC3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_222BBCE1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_222BBC3DC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_222BBC3E8()
{
  sub_222BBC584();
  return sub_222BC8068();
}

uint64_t sub_222BBC410()
{
  sub_222BBC584();
  return sub_222BC8074();
}

uint64_t SegmentationConfig.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_222BADC9C(&qword_25576F7F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_222BB4D38(a1, a1[3]);
  sub_222BBC584();
  sub_222BC805C();
  v8[15] = 0;
  sub_222BC7FB4();
  if (!v1)
  {
    type metadata accessor for SegmentationConfig();
    v8[14] = 1;
    sub_222BC7CF0();
    sub_222BBC7EC(&qword_25576F710, MEMORY[0x24BDCEA70]);
    sub_222BC7FA8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_222BBC584()
{
  unint64_t result;

  result = qword_25576F800;
  if (!qword_25576F800)
  {
    result = MEMORY[0x22767A388](&unk_222BD2FC8, &type metadata for SegmentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F800);
  }
  return result;
}

uint64_t SegmentationConfig.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v25 = sub_222BC7CF0();
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_222BADC9C(&qword_25576F808);
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SegmentationConfig();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_222BB4D38(a1, a1[3]);
  sub_222BBC584();
  sub_222BC8050();
  if (!v2)
  {
    v21 = v8;
    v12 = v24;
    v11 = v25;
    v28 = 0;
    v13 = v26;
    v14 = sub_222BC7F90();
    v20 = v10;
    *v10 = v14;
    v27 = 1;
    sub_222BBC7EC(&qword_25576F720, MEMORY[0x24BDCEAA8]);
    v15 = v11;
    sub_222BC7F84();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    v16 = v22;
    v17 = (uint64_t)v20;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v20 + *(int *)(v21 + 20), v12, v15);
    sub_222BBC82C(v17, v16);
  }
  return sub_222BB4C9C((uint64_t)a1);
}

uint64_t sub_222BBC7EC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_222BC7CF0();
    result = MEMORY[0x22767A388](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_222BBC82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SegmentationConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_222BBC870@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SegmentationConfig.init(from:)(a1, a2);
}

uint64_t sub_222BBC884(_QWORD *a1)
{
  return SegmentationConfig.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SegmentationConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_222BC7CF0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SegmentationConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for SegmentationConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for SegmentationConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for SegmentationConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SegmentationConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SegmentationConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBCAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SegmentationConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BBCB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_222BBCB64()
{
  uint64_t result;
  unint64_t v1;

  result = sub_222BC7CF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SegmentationConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SegmentationConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_222BBCCB8 + 4 * byte_222BD2E95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_222BBCCEC + 4 * asc_222BD2E90[v4]))();
}

uint64_t sub_222BBCCEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_222BBCCF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x222BBCCFCLL);
  return result;
}

uint64_t sub_222BBCD08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x222BBCD10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_222BBCD14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_222BBCD1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_222BBCD28(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SegmentationConfig.CodingKeys()
{
  return &type metadata for SegmentationConfig.CodingKeys;
}

unint64_t sub_222BBCD48()
{
  unint64_t result;

  result = qword_25576F820;
  if (!qword_25576F820)
  {
    result = MEMORY[0x22767A388](&unk_222BD2FA0, &type metadata for SegmentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F820);
  }
  return result;
}

unint64_t sub_222BBCD90()
{
  unint64_t result;

  result = qword_25576F828;
  if (!qword_25576F828)
  {
    result = MEMORY[0x22767A388](&unk_222BD2F10, &type metadata for SegmentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F828);
  }
  return result;
}

unint64_t sub_222BBCDD8()
{
  unint64_t result;

  result = qword_25576F830;
  if (!qword_25576F830)
  {
    result = MEMORY[0x22767A388](&unk_222BD2F38, &type metadata for SegmentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25576F830);
  }
  return result;
}

uint64_t sub_222BBCE1C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000222BE25E0 || (sub_222BC7FD8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_222BC7FD8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t dispatch thunk of ModelIOManager.write(modelPayload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ModelIOManager.write(payload:inDirectory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ModelIOManager.assembleSegments(modelToken:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ModelIOManager.unarchiveModel(at:modelName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ModelIOManager.renameModel(at:modelName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ModelIOManager.deleteModel(atLocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void sub_222BBCF80(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  void (*v16)(char *, uint64_t);
  id v17;
  id v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = sub_222BC7CF0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BC7C90();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BBD224(a1, v12);
  if (!v2)
  {
    v21 = v5;
    sub_222BC7CE4();
    sub_222BC7CD8();
    sub_222BC7C3C();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v20 = a2;
    v14 = (void *)sub_222BC7C30();
    v22[0] = 0;
    v15 = objc_msgSend(v13, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v14, 1, 0, v22);

    if ((v15 & 1) != 0)
    {
      v16 = *(void (**)(char *, uint64_t))(v6 + 8);
      v17 = v22[0];
      v16(v8, v21);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v18 = v22[0];
      sub_222BC7C0C();

      swift_willThrow();
      v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v19(v20, v9);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
      v19((uint64_t)v12, v9);
    }
  }
}

uint64_t sub_222BBD194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F838);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F838);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_222BBD224(char a1@<W0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void (*v10)(char *, uint64_t);
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = sub_222BC7C90();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v9 = objc_msgSend(v8, sel_temporaryDirectory);
  sub_222BC7C60();

  sub_222BC7C3C();
  v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  v11 = &qword_222BD2000;
  v12 = MEMORY[0x24BEE0D00];
  if ((a1 & 1) != 0)
  {
    v36 = 1;
    sub_222BC7C78();
    v13 = (void *)sub_222BC7E10();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v8, sel_fileExistsAtPath_isDirectory_, v13, &v36);

    sub_222BC7E94();
    if ((v14 & 1) != 0)
    {
      if (qword_25576F498 != -1)
        swift_once();
      sub_222BC7D80();
    }
    else
    {
      if (qword_25576F498 != -1)
        swift_once();
      v34 = sub_222BADC9C(&qword_25576F5D8);
      v15 = swift_allocObject();
      v33 = xmmword_222BD2620;
      *(_OWORD *)(v15 + 16) = xmmword_222BD2620;
      v16 = sub_222BC7C78();
      v18 = v17;
      *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
      v32 = sub_222BADCDC();
      *(_QWORD *)(v15 + 64) = v32;
      *(_QWORD *)(v15 + 32) = v16;
      *(_QWORD *)(v15 + 40) = v18;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      v19 = (void *)sub_222BC7C30();
      v35 = 0;
      LODWORD(v18) = objc_msgSend(v8, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v19, 1, 0, &v35);

      if (!(_DWORD)v18)
      {
        v30 = v35;
        sub_222BC7C0C();

        swift_willThrow();
        v10(a2, v4);
        return;
      }
      v20 = v35;
      sub_222BC7E94();
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v33;
      v22 = sub_222BC7C78();
      v23 = MEMORY[0x24BEE0D00];
      v24 = v32;
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 64) = v24;
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 40) = v25;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      v12 = v23;
    }
    v11 = &qword_222BD2000;
  }
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = *((_OWORD *)v11 + 98);
  v27 = sub_222BC7C78();
  v29 = v28;
  *(_QWORD *)(v26 + 56) = v12;
  *(_QWORD *)(v26 + 64) = sub_222BADCDC();
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v29;
  sub_222BC7D80();
  swift_bridgeObjectRelease();

}

void sub_222BBD670(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  void (*v23)(char *, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  id v40[2];

  v37 = a3;
  v38 = a2;
  v39 = a5;
  v36 = a1;
  v40[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_222BC7CF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_222BC7C90();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  sub_222BBD224(a4, (char *)&v32 - v16);
  if (!v5)
  {
    v32 = v12;
    v33 = v11;
    v34 = v8;
    v35 = v7;
    v18 = v39;
    v19 = v10;
    sub_222BC7CE4();
    sub_222BC7CD8();
    sub_222BC7C3C();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v21 = (void *)sub_222BC7C30();
    v40[0] = 0;
    v22 = objc_msgSend(v20, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v21, 1, 0, v40);

    if ((v22 & 1) != 0)
    {
      v23 = *(void (**)(char *, uint64_t))(v32 + 8);
      v24 = v40[0];
      v25 = v33;
      v23(v15, v33);
      v23(v17, v25);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v18, v19, v35);
      v26 = type metadata accessor for ModelLocation();
      v27 = (_QWORD *)(v18 + *(int *)(v26 + 20));
      v28 = v38;
      *v27 = v36;
      v27[1] = v28;
      *(_BYTE *)(v18 + *(int *)(v26 + 24)) = v37 & 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = v40[0];
      sub_222BC7C0C();

      swift_willThrow();
      v30 = v33;
      v31 = *(void (**)(char *, uint64_t))(v32 + 8);
      v31(v15, v33);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v35);
      v31(v17, v30);
    }
  }
}

uint64_t sub_222BBD908()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ModelWriter()
{
  return objc_opt_self();
}

uint64_t sub_222BBD938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_222BBD94C(a1, a2);
}

uint64_t sub_222BBD94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  char *v34;
  uint8_t *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  char *v51;

  v46 = sub_222BC7C90();
  v4 = *(_QWORD *)(v46 - 8);
  v5 = MEMORY[0x24BDAC7A8](v46);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v41 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v41 - v11;
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(a1 + 32);
  v47 = *(_QWORD *)a1;
  v45 = *(_OWORD *)(a1 + 8);
  v48 = v45;
  v49 = v14;
  v50 = v15;
  v16 = ModelPayload.destinationFileName.getter();
  v17 = (uint64_t)v51;
  sub_222BBD670(v16, v18, v15, 1, a2);
  if (v17)
    return swift_bridgeObjectRelease();
  v44 = v15;
  v51 = (char *)v13;
  v41 = v7;
  v42 = v10;
  v43 = v4;
  swift_bridgeObjectRelease();
  sub_222BC498C((uint64_t)v12);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_222BD2620;
  v21 = sub_222BC7C78();
  v23 = v22;
  *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v20 + 64) = sub_222BADCDC();
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 40) = v23;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  if (v44)
  {
    sub_222BC7C54();
    sub_222BC7C48();
    sub_222BC7CC0();
    v24 = v46;
    v51 = v12;
    if (qword_25576F4B0 != -1)
      swift_once();
    v25 = sub_222BC7DA4();
    sub_222BAC438(v25, (uint64_t)qword_25576F838);
    v26 = sub_222BC7D8C();
    v27 = sub_222BC7EAC();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_222B17000, v26, v27, "successfully wrote archive file to disk", v28, 2u);
      MEMORY[0x22767A418](v28, -1, -1);
    }

    v29 = (uint64_t)v41;
    sub_222BC200C((uint64_t)v41, (uint64_t)v51);
    v31 = sub_222BC7D8C();
    v32 = sub_222BC7EAC();
    v33 = os_log_type_enabled(v31, v32);
    v34 = v42;
    if (v33)
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_222B17000, v31, v32, "successfully decompressed archive file", v35, 2u);
      MEMORY[0x22767A418](v35, -1, -1);
    }

    v30 = v43;
    v36 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v36(v29, v24);
    v36((uint64_t)v34, v24);
  }
  else
  {
    sub_222BC7CC0();
    v24 = v46;
    v51 = v12;
    v30 = v43;
  }
  if (qword_25576F4B0 != -1)
    swift_once();
  v37 = sub_222BC7DA4();
  sub_222BAC438(v37, (uint64_t)qword_25576F838);
  v38 = sub_222BC7D8C();
  v39 = sub_222BC7EAC();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_222B17000, v38, v39, "successfully wrote model to disk", v40, 2u);
    MEMORY[0x22767A418](v40, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v51, v24);
}

uint64_t sub_222BBDE80()
{
  return sub_222BC2CE4();
}

uint64_t sub_222BBDE94@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return sub_222BBDEA8(a1, a2, a3);
}

uint64_t sub_222BBDEA8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t result;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  unsigned int v84;
  _QWORD *v85;
  _QWORD *v86;
  void (*v87)(char *, uint64_t);
  _DWORD v88[4];
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  id v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105[5];

  v100 = a3;
  v101 = a1;
  v105[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v5 = sub_222BADC9C(&qword_25576F7E0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v96 = (char *)v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v91 = (char *)v88 - v8;
  v9 = sub_222BC7C90();
  v103 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v95 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v88 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v102 = (char *)v88 - v15;
  v16 = sub_222BC7C18();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = (id)objc_opt_self();
  v20 = objc_msgSend(v94, sel_defaultManager);
  sub_222BC7C6C();
  v21 = (void *)sub_222BC7E10();
  swift_bridgeObjectRelease();
  v105[0] = 0;
  v22 = objc_msgSend(v20, sel_contentsOfDirectoryAtPath_error_, v21, v105);

  v23 = v105[0];
  if (!v22)
  {
    v65 = v105[0];
    sub_222BC7C0C();

    return swift_willThrow();
  }
  v98 = v16;
  v99 = (uint64_t)v14;
  v24 = sub_222BC7E7C();
  v25 = v23;

  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)&v88[-4] = a2;
  v27 = sub_222BBF09C((void (*)(_QWORD *))sub_222BC2C28, (uint64_t)&v88[-8], v24);
  v28 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)&v88[-4] = v101;
  v105[0] = (_QWORD *)sub_222BBF284((uint64_t (*)(char *))sub_222BC2C44, (uint64_t)&v88[-8], v27);
  swift_bridgeObjectRetain();
  sub_222BBFA70(v105);
  v93 = v3;
  if (v3)
    goto LABEL_34;
  swift_bridgeObjectRelease();
  v29 = v105[0];
  v105[0] = (_QWORD *)sub_222BC7CD8();
  v105[1] = v30;
  v31 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x24BDCD7A0], v98);
  sub_222BC1FC8();
  sub_222BC7C84();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v31);
  swift_bridgeObjectRelease();
  v32 = sub_222BC7E94();
  v33 = v103;
  if (qword_25576F498 != -1)
    swift_once();
  v90 = qword_255770C78;
  v98 = sub_222BADC9C(&qword_25576F5D8);
  v34 = swift_allocObject();
  v97 = xmmword_222BD2620;
  v89 = (_QWORD *)v34;
  *(_OWORD *)(v34 + 16) = xmmword_222BD2620;
  v35 = v29[2];
  v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v92 = v29;
  if (v35)
  {
    v88[3] = v32;
    v105[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_222BC1144(0, v35, 0);
    v37 = (char *)v29 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
    v101 = *(_QWORD *)(v33 + 72);
    v38 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    do
    {
      v39 = v102;
      v40 = v104;
      v38(v102, v37, v104);
      v41 = sub_222BC7C6C();
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v40);
      v36 = v105[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_222BC1144(0, v36[2] + 1, 1);
        v36 = v105[0];
      }
      v45 = v36[2];
      v44 = v36[3];
      if (v45 >= v44 >> 1)
      {
        sub_222BC1144(v44 > 1, v45 + 1, 1);
        v36 = v105[0];
      }
      v36[2] = v45 + 1;
      v46 = &v36[2 * v45];
      v46[4] = v41;
      v46[5] = v43;
      v37 += v101;
      --v35;
      v33 = v103;
    }
    while (v35);
    v29 = v92;
  }
  v105[0] = v36;
  sub_222BADC9C(&qword_25576F878);
  sub_222BC2C60(&qword_25576F880, &qword_25576F878, MEMORY[0x24BEE12B0]);
  v47 = sub_222BC7DF8();
  v49 = v48;
  swift_bridgeObjectRelease();
  v50 = MEMORY[0x24BEE0D00];
  v51 = v89;
  v89[7] = MEMORY[0x24BEE0D00];
  v52 = sub_222BADCDC();
  v51[8] = v52;
  v51[4] = v47;
  v51[5] = v49;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  sub_222BC7E94();
  v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = v97;
  v54 = sub_222BC7C6C();
  *(_QWORD *)(v53 + 56) = v50;
  *(_QWORD *)(v53 + 64) = v52;
  v101 = v52;
  *(_QWORD *)(v53 + 32) = v54;
  *(_QWORD *)(v53 + 40) = v55;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v56 = v29[2];
  if (v56)
  {
    v57 = v103;
    v58 = (char *)v29 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80));
    v59 = *(_QWORD *)(v103 + 72);
    v60 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    swift_bridgeObjectRetain();
    v61 = v104;
    v62 = v93;
    v63 = v91;
    v64 = v99;
    while (1)
    {
      v60(v63, v58, v61);
      v102 = *(char **)(v57 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v102)(v63, 0, 1, v61);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v63, 1, v61) == 1)
      {
        v93 = v62;
        goto LABEL_23;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v64, v63, v61);
      sub_222BBF548(v64, 104857600);
      if (v62)
        break;
      v62 = 0;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v64, v61);
      v58 += v59;
      if (!--v56)
        goto LABEL_21;
    }
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v64, v61);
    swift_release();
    __break(1u);
LABEL_34:
    result = swift_release();
    __break(1u);
    return result;
  }
  v57 = v103;
  v102 = *(char **)(v103 + 56);
  swift_bridgeObjectRetain();
  v61 = v104;
  v62 = v93;
  v63 = v91;
LABEL_21:
  v93 = v62;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v102)(v63, 1, 1, v61);
LABEL_23:
  v67 = v92;
  swift_release();
  sub_222BC7E94();
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = v97;
  v69 = sub_222BC7C6C();
  v70 = v101;
  *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v68 + 64) = v70;
  *(_QWORD *)(v68 + 32) = v69;
  *(_QWORD *)(v68 + 40) = v71;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v72 = v67[2];
  if (v72)
  {
    v73 = (uint64_t)v67 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
    v99 = *(_QWORD *)(v57 + 72);
    v103 = *(_QWORD *)(v57 + 16);
    swift_retain();
    v74 = v104;
    v76 = v95;
    v75 = v96;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v103)(v75, v73, v74);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v102)(v75, 0, 1, v74);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v75, 1, v74) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v76, v75, v74);
      sub_222BC7E94();
      v77 = v57;
      v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = v97;
      v79 = sub_222BC7C6C();
      v80 = v101;
      *(_QWORD *)(v78 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v78 + 64) = v80;
      *(_QWORD *)(v78 + 32) = v79;
      *(_QWORD *)(v78 + 40) = v81;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      v82 = objc_msgSend(v94, sel_defaultManager);
      v83 = (void *)sub_222BC7C30();
      v105[0] = 0;
      v84 = objc_msgSend(v82, sel_removeItemAtURL_error_, v83, v105);

      if (!v84)
      {
        v86 = v105[0];
        sub_222BC7C0C();

        swift_willThrow();
        v87 = *(void (**)(char *, uint64_t))(v77 + 8);
        v87(v76, v74);
        swift_release();
        v87(v100, v74);
        return swift_release();
      }
      v85 = v105[0];
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v74);
      v73 += v99;
      --v72;
      v75 = v96;
      v57 = v77;
      if (!v72)
        goto LABEL_30;
    }
  }
  else
  {
    swift_retain();
    v74 = v104;
    v75 = v96;
LABEL_30:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v102)(v75, 1, 1, v74);
  }
  return swift_release_n();
}

uint64_t sub_222BBE8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_222BBE8C0(a1, a2, a3, a4);
}

uint64_t sub_222BBE8C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_222BC7C18();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_222BC7C90();
  v32 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BC7C54();
  v33 = a2;
  v34 = a3;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCD7A0], v8);
  sub_222BC1FC8();
  v14 = MEMORY[0x24BEE0D00];
  v31 = a4;
  sub_222BC7C84();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v15 = swift_allocObject();
  v29 = xmmword_222BD2620;
  *(_OWORD *)(v15 + 16) = xmmword_222BD2620;
  v16 = sub_222BC7C6C();
  v18 = v17;
  *(_QWORD *)(v15 + 56) = v14;
  v19 = sub_222BADCDC();
  *(_QWORD *)(v15 + 64) = v19;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v21 = v30;
  v20 = v31;
  sub_222BC200C(a1, v31);
  if (v21)
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v23 = v20;
    v24 = v35;
    v22(v23, v35);
    return ((uint64_t (*)(char *, uint64_t))v22)(v13, v24);
  }
  else
  {
    sub_222BC7E94();
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v29;
    v27 = sub_222BC7C6C();
    *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v26 + 64) = v19;
    *(_QWORD *)(v26 + 32) = v27;
    *(_QWORD *)(v26 + 40) = v28;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v35);
  }
}

uint64_t sub_222BBEB7C@<X0>(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_222BBEB90(a1, a2, a3);
}

uint64_t sub_222BBEB90@<X0>(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35[3];

  v35[2] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = sub_222BC7C18();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_222BC7C90();
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_222BC7C54();
  v35[0] = a1;
  v35[1] = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCD7A0], v6);
  sub_222BC1FC8();
  v13 = MEMORY[0x24BEE0D00];
  v32 = a3;
  sub_222BC7C84();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v14 = swift_allocObject();
  v31 = xmmword_222BD2620;
  *(_OWORD *)(v14 + 16) = xmmword_222BD2620;
  v15 = sub_222BC7C6C();
  v17 = v16;
  *(_QWORD *)(v14 + 56) = v13;
  v18 = sub_222BADCDC();
  *(_QWORD *)(v14 + 64) = v18;
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v20 = (void *)sub_222BC7C30();
  v21 = v32;
  v22 = (void *)sub_222BC7C30();
  v35[0] = 0;
  LOBYTE(v17) = objc_msgSend(v19, sel_moveItemAtURL_toURL_error_, v20, v22, v35);

  if ((v17 & 1) != 0)
  {
    v23 = v35[0];
    sub_222BC7E94();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v31;
    v25 = sub_222BC7C6C();
    *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v24 + 64) = v18;
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v26;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  }
  else
  {
    v28 = v35[0];
    sub_222BC7C0C();

    swift_willThrow();
    v29 = v34;
    v30 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v30(v21, v34);
    return ((uint64_t (*)(char *, uint64_t))v30)(v12, v29);
  }
}

uint64_t sub_222BBEEFC()
{
  uint64_t v1;

  v1 = sub_222BC7CD8();
  sub_222BC7E58();
  sub_222BC7FCC();
  sub_222BC7E58();
  swift_bridgeObjectRelease();
  sub_222BC7E58();
  sub_222BC7FCC();
  sub_222BC7E58();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_222BBEFC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = sub_222BC7C18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
  sub_222BC1FC8();
  sub_222BC7C84();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_222BBF09C(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = sub_222BC7C90();
  v6 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_222BC1160(0, v9, 0);
    v10 = v21;
    v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v12 = *v11;
      v20[0] = *(v11 - 1);
      v20[1] = v12;
      swift_bridgeObjectRetain();
      v18(v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v21 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_222BC1160(v13 > 1, v14 + 1, 1);
        v10 = v21;
      }
      v11 += 2;
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      if (!--v9)
        return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_222BBF210()
{
  char v0;

  sub_222BC7C24();
  sub_222BC7CD8();
  v0 = sub_222BC7E70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_222BBF284(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_222BADC9C(&qword_25576F7E0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_222BC7C90();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)&v26 - v14;
  v36 = MEMORY[0x24BEE4AF8];
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_222BC1160(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36;
        }
        v24 = *(_QWORD *)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_222BC1160(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        *(_QWORD *)(v21 + 16) = v25;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_222BC2CA4((uint64_t)v8);
    return v36;
  }
  return result;
}

void sub_222BBF548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;

  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_222BD2620;
  v3 = sub_222BC7C6C();
  v5 = v4;
  *(_QWORD *)(v2 + 56) = MEMORY[0x24BEE0D00];
  v6 = sub_222BADCDC();
  *(_QWORD *)(v2 + 64) = v6;
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v5;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v7 = objc_allocWithZone(MEMORY[0x24BDBCE90]);
  v8 = (void *)sub_222BC7C30();
  v9 = objc_msgSend(v7, sel_initWithURL_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_open);
    v10 = swift_slowAlloc();
    sub_222BC7E94();
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_222BD2620;
    v12 = objc_msgSend(v9, sel_hasBytesAvailable);
    *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v11 + 64) = v6;
    v13 = 0x7365747942206F4ELL;
    if (v12)
      v13 = 0x7365747942;
    v14 = 0xE800000000000000;
    if (v12)
      v14 = 0xE500000000000000;
    *(_QWORD *)(v11 + 32) = v13;
    *(_QWORD *)(v11 + 40) = v14;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    if (objc_msgSend(v9, sel_hasBytesAvailable))
    {
      do
      {
        if (objc_msgSend(v9, sel_read_maxLength_, v10, a2))
        {
          sub_222BC7C9C();
          v15 = objc_allocWithZone(MEMORY[0x24BDBCF08]);
          v16 = (void *)sub_222BC7C30();
          v17 = objc_msgSend(v15, sel_initWithURL_append_, v16, 1);

          if (v17)
          {
            objc_msgSend(v17, sel_open);
            JUMPOUT(0x222BBF970);
          }
          sub_222BB512C(0, 0xC000000000000000);
        }
      }
      while ((objc_msgSend(v9, sel_hasBytesAvailable) & 1) != 0);
    }
    objc_msgSend(v9, sel_close);
    MEMORY[0x22767A418](v10, -1, -1);

  }
}

uint64_t sub_222BBFA70(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_222BC7C90() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_222BC14C4(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_222BBFAF0(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_222BBFAF0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;

  v2 = v1;
  v4 = sub_222BC7C90();
  v159 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v146 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v153 = (char *)&v138 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v155 = (char *)&v138 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v154 = (char *)&v138 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v142 = (char *)&v138 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v149 = (char *)&v138 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v144 = (char *)&v138 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v143 = (char *)&v138 - v19;
  v158 = a1;
  v20 = a1[1];
  result = sub_222BC7FC0();
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_222BC0688(0, v20, 1, v158);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v139 = result;
  if (v20 < 2)
  {
    v27 = (char *)MEMORY[0x24BEE4AF8];
    v26 = MEMORY[0x24BEE4AF8]
        + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
    v138 = MEMORY[0x24BEE4AF8];
    if (v20 != 1)
    {
      v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_116:
      if (v29 >= 2)
      {
        v131 = *v158;
        do
        {
          v132 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v131)
            goto LABEL_157;
          v133 = *(_QWORD *)&v27[16 * v132 + 32];
          v134 = *(_QWORD *)&v27[16 * v29 + 24];
          v135 = v26;
          sub_222BC0950(v131 + *(_QWORD *)(v159 + 72) * v133, v131 + *(_QWORD *)(v159 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v131 + *(_QWORD *)(v159 + 72) * v134, v26);
          if (v2)
            break;
          if (v134 < v133)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = sub_222BC1130((uint64_t)v27);
          if (v132 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v136 = &v27[16 * v132 + 32];
          *(_QWORD *)v136 = v133;
          *((_QWORD *)v136 + 1) = v134;
          v137 = *((_QWORD *)v27 + 2);
          if (v29 > v137)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v137 - v29));
          *((_QWORD *)v27 + 2) = v137 - 1;
          v29 = v137 - 1;
          v26 = v135;
        }
        while (v137 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v138 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = sub_222BC7E88();
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v159 + 80);
    v138 = v24;
    v26 = v24 + ((v25 + 32) & ~v25);
  }
  v28 = 0;
  v27 = (char *)MEMORY[0x24BEE4AF8];
  v148 = v26;
  v152 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v39 = v28 + 1;
      goto LABEL_67;
    }
    v156 = v20;
    v32 = *v158;
    v33 = *(_QWORD *)(v159 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 16);
    v34(v143, *v158 + v33 * v31, v4);
    v147 = v30;
    v145 = v32;
    v157 = v33;
    v34(v144, v32 + v33 * v30, v4);
    v35 = sub_222BC7C24();
    v37 = v36;
    if (v35 == sub_222BC7C24() && v37 == v38)
      LODWORD(v151) = 0;
    else
      LODWORD(v151) = sub_222BC7FD8();
    v40 = v142;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v159 + 8);
    v42 = v152;
    v41(v144, v152);
    v41(v143, v42);
    v39 = v147 + 2;
    if (v147 + 2 < v156)
    {
      v140 = v27;
      v141 = v2;
      v150 = v157 * v31;
      v43 = v145;
      v44 = v157 * v39;
      while (1)
      {
        v45 = v152;
        v34(v149, v43 + v44, v152);
        v34(v40, v43 + v150, v45);
        v46 = sub_222BC7C24();
        v48 = v47;
        if (v46 == sub_222BC7C24() && v48 == v49)
          v50 = 0;
        else
          v50 = sub_222BC7FD8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v51 = v152;
        v41(v40, v152);
        v41(v149, v51);
        if (((v151 ^ v50) & 1) != 0)
          break;
        ++v39;
        v43 += v157;
        if (v156 == v39)
        {
          v52 = v156;
          v39 = v156;
          v27 = v140;
          v2 = v141;
          goto LABEL_32;
        }
      }
      v27 = v140;
      v2 = v141;
    }
    v52 = v156;
LABEL_32:
    v30 = v147;
    v53 = v145;
    if ((v151 & 1) == 0)
      break;
    if (v39 < v147)
      goto LABEL_151;
    if (v147 >= v39)
      break;
    v140 = v27;
    v141 = v2;
    v54 = 0;
    v55 = v157 * (v39 - 1);
    v56 = v39 * v157;
    v57 = v147;
    v58 = v147 * v157;
    do
    {
      if (v57 != v39 + v54 - 1)
      {
        if (!v53)
          goto LABEL_156;
        v60 = v39;
        v61 = v53 + v55;
        v151 = *(_QWORD *)(v159 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v151)(v146, v53 + v58, v152);
        if (v58 < v55 || v53 + v58 >= (unint64_t)(v53 + v56))
        {
          v59 = v152;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v59 = v152;
          if (v58 != v55)
            swift_arrayInitWithTakeBackToFront();
        }
        ((void (*)(uint64_t, char *, uint64_t))v151)(v61, v146, v59);
        v39 = v60;
        v53 = v145;
      }
      ++v57;
      --v54;
      v55 -= v157;
      v56 -= v157;
      v58 += v157;
    }
    while (v57 < v39 + v54);
    v27 = v140;
    v2 = v141;
    v62 = v152;
    v30 = v147;
    v52 = v156;
    if (v39 < v156)
      goto LABEL_48;
LABEL_67:
    if (v39 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_222BC0F2C(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v80 = *((_QWORD *)v27 + 2);
    v79 = *((_QWORD *)v27 + 3);
    v29 = v80 + 1;
    v26 = v148;
    v157 = v39;
    if (v80 >= v79 >> 1)
    {
      v130 = sub_222BC0F2C((char *)(v79 > 1), v80 + 1, 1, v27);
      v26 = v148;
      v27 = v130;
    }
    *((_QWORD *)v27 + 2) = v29;
    v81 = v27 + 32;
    v82 = &v27[16 * v80 + 32];
    v83 = v157;
    *(_QWORD *)v82 = v30;
    *((_QWORD *)v82 + 1) = v83;
    if (v80)
    {
      while (1)
      {
        v84 = v29 - 1;
        if (v29 >= 4)
        {
          v89 = &v81[16 * v29];
          v90 = *((_QWORD *)v89 - 8);
          v91 = *((_QWORD *)v89 - 7);
          v95 = __OFSUB__(v91, v90);
          v92 = v91 - v90;
          if (v95)
            goto LABEL_133;
          v94 = *((_QWORD *)v89 - 6);
          v93 = *((_QWORD *)v89 - 5);
          v95 = __OFSUB__(v93, v94);
          v87 = v93 - v94;
          v88 = v95;
          if (v95)
            goto LABEL_134;
          v96 = v29 - 2;
          v97 = &v81[16 * v29 - 32];
          v99 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          v95 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          if (v95)
            goto LABEL_136;
          v95 = __OFADD__(v87, v100);
          v101 = v87 + v100;
          if (v95)
            goto LABEL_139;
          if (v101 >= v92)
          {
            v119 = &v81[16 * v84];
            v121 = *(_QWORD *)v119;
            v120 = *((_QWORD *)v119 + 1);
            v95 = __OFSUB__(v120, v121);
            v122 = v120 - v121;
            if (v95)
              goto LABEL_143;
            v112 = v87 < v122;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v113 = *((_QWORD *)v27 + 4);
            v114 = *((_QWORD *)v27 + 5);
            v95 = __OFSUB__(v114, v113);
            v106 = v114 - v113;
            v107 = v95;
            goto LABEL_98;
          }
          v86 = *((_QWORD *)v27 + 4);
          v85 = *((_QWORD *)v27 + 5);
          v95 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          v88 = v95;
        }
        if ((v88 & 1) != 0)
          goto LABEL_135;
        v96 = v29 - 2;
        v102 = &v81[16 * v29 - 32];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v105 = __OFSUB__(v103, v104);
        v106 = v103 - v104;
        v107 = v105;
        if (v105)
          goto LABEL_138;
        v108 = &v81[16 * v84];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v95 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v95)
          goto LABEL_141;
        if (__OFADD__(v106, v111))
          goto LABEL_142;
        if (v106 + v111 >= v87)
        {
          v112 = v87 < v111;
LABEL_104:
          if (v112)
            v84 = v96;
          goto LABEL_106;
        }
LABEL_98:
        if ((v107 & 1) != 0)
          goto LABEL_137;
        v115 = &v81[16 * v84];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v95 = __OFSUB__(v116, v117);
        v118 = v116 - v117;
        if (v95)
          goto LABEL_140;
        if (v118 < v106)
          goto LABEL_14;
LABEL_106:
        v123 = v84 - 1;
        if (v84 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v158)
          goto LABEL_155;
        v124 = v27;
        v125 = &v81[16 * v123];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v84];
        v128 = *((_QWORD *)v127 + 1);
        sub_222BC0950(*v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v125, *v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v127, *v158 + *(_QWORD *)(v159 + 72) * v128, v26);
        if (v2)
          goto LABEL_127;
        if (v128 < v126)
          goto LABEL_130;
        if (v84 > *((_QWORD *)v124 + 2))
          goto LABEL_131;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v123 + 8] = v128;
        v129 = *((_QWORD *)v124 + 2);
        if (v84 >= v129)
          goto LABEL_132;
        v27 = v124;
        v29 = v129 - 1;
        memmove(&v81[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
        *((_QWORD *)v124 + 2) = v129 - 1;
        v26 = v148;
        if (v129 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v158[1];
    v28 = v157;
    v4 = v152;
    if (v157 >= v20)
      goto LABEL_116;
  }
  v62 = v152;
  if (v39 >= v52)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v39, v30))
    goto LABEL_149;
  if (v39 - v30 >= v139)
    goto LABEL_67;
  if (__OFADD__(v30, v139))
    goto LABEL_152;
  if (v30 + v139 >= v52)
    v63 = v52;
  else
    v63 = v30 + v139;
  if (v63 >= v30)
  {
    if (v39 != v63)
    {
      v147 = v30;
      v140 = v27;
      v141 = v2;
      v64 = *(_QWORD *)(v159 + 72);
      v150 = *(_QWORD *)(v159 + 16);
      v151 = v64;
      v156 = v39 * v64;
      v157 = v64 * (v39 - 1);
      v145 = v63;
      do
      {
        v66 = 0;
        v67 = v147;
        while (1)
        {
          v68 = *v158;
          v69 = (void (*)(char *, uint64_t, uint64_t))v150;
          ((void (*)(char *, uint64_t, uint64_t))v150)(v154, v156 + v66 + *v158, v62);
          v69(v155, v157 + v66 + v68, v62);
          v70 = sub_222BC7C24();
          v72 = v71;
          if (v70 == sub_222BC7C24() && v72 == v73)
            break;
          v74 = sub_222BC7FD8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v75 = *(void (**)(char *, uint64_t))(v159 + 8);
          v62 = v152;
          v75(v155, v152);
          v75(v154, v62);
          if ((v74 & 1) == 0)
            goto LABEL_58;
          v76 = *v158;
          if (!*v158)
            goto LABEL_154;
          v77 = (char *)(v76 + v157 + v66);
          v78 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 32);
          v78(v153, v76 + v156 + v66, v62);
          swift_arrayInitWithTakeFrontToBack();
          v78(v77, (uint64_t)v153, v62);
          v66 -= v151;
          if (v39 == ++v67)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n();
        v65 = *(void (**)(char *, uint64_t))(v159 + 8);
        v62 = v152;
        v65(v155, v152);
        v65(v154, v62);
LABEL_58:
        ++v39;
        v157 += v151;
        v156 += v151;
      }
      while (v39 != v145);
      v39 = v145;
      v27 = v140;
      v2 = v141;
      v30 = v147;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = sub_222BC7F3C();
  __break(1u);
  return result;
}

uint64_t sub_222BC0688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v37 = a4;
  v31 = a1;
  v6 = sub_222BC7C90();
  v38 = *(_QWORD **)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v29 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v29 - v12;
  v35 = a3;
  v30 = a2;
  if (a3 != a2)
  {
    v13 = v38[9];
    v32 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v33 = v13;
    v14 = v13 * (v35 - 1);
    v41 = v13 * v35;
LABEL_6:
    v16 = 0;
    v17 = v31;
    v34 = v14;
    while (1)
    {
      v18 = *v37;
      v19 = v32;
      v32(v39, v41 + v16 + *v37, v6);
      v19(v40, v14 + v16 + v18, v6);
      v20 = sub_222BC7C24();
      v22 = v21;
      if (v20 == sub_222BC7C24() && v22 == v23)
      {
        swift_bridgeObjectRelease_n();
        v15 = (void (*)(char *, uint64_t))v38[1];
        v15(v40, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v39, v6);
        v14 = v34;
LABEL_5:
        v14 += v33;
        v41 += v33;
        if (++v35 == v30)
          return result;
        goto LABEL_6;
      }
      v24 = sub_222BC7FD8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = (void (*)(char *, uint64_t))v38[1];
      v25(v40, v6);
      result = ((uint64_t (*)(char *, uint64_t))v25)(v39, v6);
      v14 = v34;
      if ((v24 & 1) == 0)
        goto LABEL_5;
      v26 = *v37;
      if (!*v37)
        break;
      v27 = v26 + v34 + v16;
      v28 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v28(v36, v26 + v41 + v16, v6);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v36, v6);
      v16 -= v33;
      if (v35 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_222BC0950(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v8 = sub_222BC7C90();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v54 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v54 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v54 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v59 = v18;
  v60 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v60 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v60 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v60;
  v63 = a1;
  v62 = a4;
  v22 = v20 / v60;
  if (v21 >= v20 / v60)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v60;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = a4 + v24;
      v61 = a4 + v24;
      v63 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v39 = -v60;
        v60 = *(_QWORD *)(v59 + 16);
        v55 = a4;
        v56 = a1;
        do
        {
          v40 = a3;
          v41 = (void (*)(char *, unint64_t, uint64_t))v60;
          ((void (*)(char *, unint64_t, uint64_t))v60)(v57, v37 + v39, v8);
          v42 = a2 + v39;
          v41(v58, a2 + v39, v8);
          v43 = sub_222BC7C24();
          v45 = v44;
          if (v43 == sub_222BC7C24() && v45 == v46)
            v47 = 0;
          else
            v47 = sub_222BC7FD8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 += v39;
          v48 = *(void (**)(char *, uint64_t))(v59 + 8);
          v48(v58, v8);
          v48(v57, v8);
          if ((v47 & 1) != 0)
          {
            if (v40 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v49 = v40 == a2;
              v50 = v55;
              v51 = v56;
              if (!v49)
                swift_arrayInitWithTakeBackToFront();
            }
            v63 += v39;
          }
          else
          {
            v52 = v61;
            v61 += v39;
            if (v40 < v52 || a3 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              v42 = a2;
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v51 = v56;
              if (v40 != v52)
                swift_arrayInitWithTakeBackToFront();
              v42 = a2;
              v50 = v55;
            }
          }
          v37 = v61;
          if (v61 <= v50)
            break;
          a2 = v42;
        }
        while (v42 > v51);
      }
LABEL_67:
      sub_222BC1024(&v63, &v62, (uint64_t *)&v61);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v60;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v58 = (char *)(a4 + v23);
    v61 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v26(v15, a4, v8);
        v27 = sub_222BC7C24();
        v29 = v28;
        if (v27 == sub_222BC7C24() && v29 == v30)
          break;
        v32 = sub_222BC7FD8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v59 + 8);
        v33(v15, v8);
        v33(v17, v8);
        if ((v32 & 1) == 0)
          goto LABEL_31;
        v34 = v63;
        v35 = a2 + v60;
        if (v63 < a2 || v63 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v63 == a2)
        {
          v34 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_37:
        v63 = v34 + v60;
        a4 = v62;
        if (v62 < (unint64_t)v58)
        {
          a2 = v35;
          if (v35 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      v31 = *(void (**)(char *, uint64_t))(v59 + 8);
      v31(v15, v8);
      v31(v17, v8);
LABEL_31:
      v34 = v63;
      v36 = v62 + v60;
      if (v63 < v62 || v63 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v63 != v62)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v62 = v36;
      v35 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = sub_222BC7F6C();
  __break(1u);
  return result;
}

char *sub_222BC0F2C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_222BADC9C(&qword_25576F890);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_222BC1024(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_222BC7C90();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_222BC7F6C();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_222BC1130(uint64_t a1)
{
  return sub_222BC0F2C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_222BC1144(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_222BC117C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_222BC1160(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_222BC12E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_222BC117C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_222BADC9C(&qword_25576F888);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_222BC7F6C();
  __break(1u);
  return result;
}

uint64_t sub_222BC12E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_222BADC9C(&qword_25576F898);
  v10 = *(_QWORD *)(sub_222BC7C90() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_222BC7C90() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_222BC7F6C();
  __break(1u);
  return result;
}

uint64_t sub_222BC14C4(_QWORD *a1)
{
  return sub_222BC12E4(0, a1[2], 0, a1);
}

void sub_222BC14D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  void *v28;
  unsigned int v29;
  id v30;
  os_log_type_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  id v47[2];

  v47[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = sub_222BC7C90();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v41 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - v8;
  if (qword_25576F4B0 != -1)
    swift_once();
  v46 = v9;
  v10 = sub_222BC7DA4();
  v11 = sub_222BAC438(v10, (uint64_t)qword_25576F838);
  v12 = sub_222BC7E94();
  v45 = v11;
  v13 = sub_222BC7D8C();
  if (os_log_type_enabled(v13, v12))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_222B17000, v13, v12, "About to delete Core ML temp folder", v14, 2u);
    MEMORY[0x22767A418](v14, -1, -1);
  }

  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_defaultManager);
  v17 = objc_msgSend(v16, sel_temporaryDirectory);
  sub_222BC7C60();

  sub_222BC7C3C();
  v44 = *(void (**)(char *, uint64_t))(v1 + 8);
  v44(v4, v0);
  sub_222BC7E94();
  v18 = v0;
  if (qword_25576F498 != -1)
    swift_once();
  v42 = sub_222BADC9C(&qword_25576F5D8);
  v19 = swift_allocObject();
  v41 = xmmword_222BD2620;
  *(_OWORD *)(v19 + 16) = xmmword_222BD2620;
  v20 = sub_222BC7C78();
  v22 = v21;
  *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
  v43 = sub_222BADCDC();
  *(_QWORD *)(v19 + 64) = v43;
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v22;
  sub_222BC7D80();
  swift_bridgeObjectRelease();

  v23 = v46;
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v46, v7, v18);
  LOBYTE(v19) = sub_222BC7E94();
  v24 = sub_222BC7D8C();
  v25 = v19;
  if (os_log_type_enabled(v24, (os_log_type_t)v19))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_222B17000, v24, v25, "Got location of temp folder", v26, 2u);
    MEMORY[0x22767A418](v26, -1, -1);
  }

  v27 = objc_msgSend(v15, sel_defaultManager);
  v28 = (void *)sub_222BC7C30();
  v47[0] = 0;
  v29 = objc_msgSend(v27, sel_removeItemAtURL_error_, v28, v47);

  if (v29)
  {
    v30 = v47[0];
    v31 = sub_222BC7E94();
    v32 = sub_222BC7D8C();
    v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_222B17000, v32, v33, "Successfully deleted Core ML temp folder", v34, 2u);
      MEMORY[0x22767A418](v34, -1, -1);
    }

    v44(v23, v18);
  }
  else
  {
    v35 = v47[0];
    v36 = (void *)sub_222BC7C0C();

    swift_willThrow();
    v44(v23, v18);
    sub_222BC7EA0();
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = v41;
    swift_getErrorValue();
    v38 = sub_222BC7FF0();
    v39 = v43;
    *(_QWORD *)(v37 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v37 + 64) = v39;
    *(_QWORD *)(v37 + 32) = v38;
    *(_QWORD *)(v37 + 40) = v40;
    sub_222BC7D80();
    swift_bridgeObjectRelease();

  }
}

void sub_222BC19F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  unsigned int v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  _QWORD v49[2];
  id v50;
  id v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61[9];

  v61[7] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = sub_222BC7C90();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)v49 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v49 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v49 - v11;
  sub_222BC498C((uint64_t)v49 - v11);
  v52 = v7;
  v53 = v10;
  v54 = v1;
  v57 = v12;
  v58 = v0;
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  v17 = sub_222BADC9C(&qword_25576F5D8);
  v18 = swift_allocObject();
  v56 = xmmword_222BD2620;
  *(_OWORD *)(v18 + 16) = xmmword_222BD2620;
  v19 = sub_222BC7C78();
  v21 = v20;
  *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
  v55 = sub_222BADCDC();
  *(_QWORD *)(v18 + 64) = v55;
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v21;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v50 = (id)objc_opt_self();
  v51 = objc_msgSend(v50, sel_defaultManager);
  v22 = objc_msgSend(v51, sel_temporaryDirectory);
  sub_222BC7C60();

  v23 = v52;
  sub_222BC7C3C();
  v24 = v54;
  v25 = *(void (**)(char *, uint64_t))(v54 + 8);
  v26 = v58;
  v25(v4, v58);
  sub_222BC7E94();
  v49[1] = v17;
  v27 = v57;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v56;
  v29 = sub_222BC7C78();
  v30 = v55;
  *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v28 + 64) = v30;
  *(_QWORD *)(v28 + 32) = v29;
  *(_QWORD *)(v28 + 40) = v31;
  sub_222BC7D80();
  swift_bridgeObjectRelease();

  v32 = v53;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v53, v23, v26);
  v33 = sub_222BC7C78();
  v35 = v34;
  v36 = v25;
  v37 = MEMORY[0x24BEE0D00];
  v36(v32, v26);
  v61[0] = (id)sub_222BC7C78();
  v61[1] = v38;
  v59 = v33;
  v60 = v35;
  sub_222BC1FC8();
  LOBYTE(v32) = sub_222BC7F0C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0)
  {
    sub_222BC7EA0();
    sub_222BC7D80();
    goto LABEL_11;
  }
  sub_222BC7E94();
  sub_222BC7D80();
  v39 = objc_msgSend(v50, sel_defaultManager);
  v40 = (void *)sub_222BC7C30();
  v61[0] = 0;
  v41 = objc_msgSend(v39, sel_removeItemAtURL_error_, v40, v61);

  if (v41)
  {
    v42 = v61[0];
    sub_222BC7E94();
    v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = v56;
    v44 = sub_222BC7C78();
    v45 = v55;
    *(_QWORD *)(v43 + 56) = v37;
    *(_QWORD *)(v43 + 64) = v45;
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v46;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
LABEL_11:
    v36(v27, v58);
    return;
  }
  v47 = v61[0];
  v48 = (void *)sub_222BC7C0C();

  swift_willThrow();
  v36(v27, v58);
  sub_222BC7EA0();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
  swift_getErrorValue();
  v14 = sub_222BC7FF0();
  v16 = v15;
  *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 64) = sub_222BADCDC();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  sub_222BC7D80();
  swift_bridgeObjectRelease();

}

unint64_t sub_222BC1FC8()
{
  unint64_t result;

  result = qword_25576F850;
  if (!qword_25576F850)
  {
    result = MEMORY[0x22767A388](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25576F850);
  }
  return result;
}

uint64_t sub_222BC200C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  unsigned __int8 v30;
  id v31;
  void *v32;
  unsigned int v33;
  id v34;
  char *v35;
  _OWORD *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  os_log_type_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  void *v53;
  uint8_t *v54;
  uint64_t v55;
  os_log_type_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  void *v60;
  uint8_t *v61;
  void *v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  void *v68;
  uint8_t *v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD v78[6];
  unint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  id v92[3];

  v86 = a2;
  v92[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_222BC7D38();
  v88 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v82 = (char *)v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v78 - v5;
  v7 = sub_222BC7DB0();
  v90 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v78 - v10;
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  v80 = sub_222BADC9C(&qword_25576F5D8);
  v12 = swift_allocObject();
  v83 = xmmword_222BD2620;
  *(_OWORD *)(v12 + 16) = xmmword_222BD2620;
  v13 = sub_222BC7C78();
  v15 = v14;
  *(_QWORD *)(v12 + 56) = MEMORY[0x24BEE0D00];
  v79 = sub_222BADCDC();
  *(_QWORD *)(v12 + 64) = v79;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  sub_222BC7C78();
  sub_222BC7DBC();
  sub_222BC7D20();
  v16 = sub_222BC7D08();
  v17 = v11;
  if (v16)
  {
    v18 = v16;
    v84 = v17;
    v19 = (void *)MEMORY[0x24BEE4AF8];
    v92[0] = (id)MEMORY[0x24BEE4AF8];
    v20 = sub_222BC2BE0();
    sub_222BADC9C(&qword_25576F860);
    v21 = sub_222BC2C60(&qword_25576F868, &qword_25576F860, MEMORY[0x24BEE12C8]);
    sub_222BC7F18();
    v85 = v18;
    v22 = sub_222BC7CFC();
    v23 = *(void (**)(char *, uint64_t))(v88 + 8);
    v23(v6, v2);
    if (v22)
    {
      v24 = sub_222BC7D74();
      v92[0] = v19;
      v78[3] = v21;
      v78[4] = v20;
      v81 = v23;
      v25 = v24;
      sub_222BC7F18();
      v26 = sub_222BC7D44();
      v81(v6, v2);
      v78[5] = v26;
      if (!v26)
      {
        v17 = v84;
        if (qword_25576F4B0 != -1)
          swift_once();
        v55 = sub_222BC7DA4();
        sub_222BAC438(v55, (uint64_t)qword_25576F838);
        v56 = sub_222BC7EA0();
        v57 = sub_222BC7D8C();
        v58 = v56;
        v59 = os_log_type_enabled(v57, v56);
        v60 = v89;
        if (v59)
        {
          v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v61 = 0;
          _os_log_impl(&dword_222B17000, v57, v58, "Unable to create decode stream", v61, 2u);
          MEMORY[0x22767A418](v61, -1, -1);
        }

        sub_222BC7D14();
        v62 = v60;
        if (v60)
        {

          v62 = 0;
        }
        v42 = v90;
        swift_release();
        sub_222BC7D14();
        if (v62)

        goto LABEL_47;
      }
      v78[1] = v25;
      v78[2] = v22;
      v27 = (void *)objc_opt_self();
      v28 = objc_msgSend(v27, sel_defaultManager);
      sub_222BC7C78();
      v29 = (void *)sub_222BC7E10();
      swift_bridgeObjectRelease();
      v30 = objc_msgSend(v28, sel_fileExistsAtPath_, v29);

      if ((v30 & 1) == 0)
      {
        v31 = objc_msgSend(v27, sel_defaultManager);
        sub_222BC7C78();
        v32 = (void *)sub_222BC7E10();
        swift_bridgeObjectRelease();
        v92[0] = 0;
        v33 = objc_msgSend(v31, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v32, 0, 0, v92);

        if (!v33)
        {
          v71 = v92[0];
          sub_222BC7C0C();

          swift_willThrow();
          sub_222BC7D5C();
          v42 = v90;
          v17 = v84;
          swift_release();
          sub_222BC7D14();
          goto LABEL_46;
        }
        v34 = v92[0];
      }
      sub_222BC7C78();
      v35 = v87;
      sub_222BC7DBC();
      sub_222BADC9C(&qword_25576F870);
      v36 = (_OWORD *)swift_allocObject();
      v36[1] = v83;
      sub_222BC7D2C();
      v92[0] = v36;
      sub_222BC7F18();
      v37 = MEMORY[0x22767833C](v35, 0, 0, v6, 0);
      v81(v6, v2);
      if (v37)
      {
        sub_222BC7E94();
        v38 = (void *)MEMORY[0x24BEE4AF8];
        sub_222BC7D80();
        v92[0] = v38;
        v39 = v82;
        sub_222BC7F18();
        v40 = v89;
        v41 = sub_222BC7D68();
        v17 = v84;
        if (v40)
        {
          v81(v39, v2);
          sub_222BC7D5C();
          v42 = v90;
          swift_release();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v87, v91);
          sub_222BC7D5C();
          swift_release();
          sub_222BC7D14();
LABEL_46:
          swift_release();
          sub_222BC7D14();
LABEL_47:
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v91);
        }
        v72 = (void *)v41;
        v81(v39, v2);
        sub_222BC7E94();
        v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = v83;
        v92[0] = v72;
        v74 = sub_222BC7FCC();
        v75 = v79;
        *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v73 + 64) = v75;
        *(_QWORD *)(v73 + 32) = v74;
        *(_QWORD *)(v73 + 40) = v76;
        sub_222BC7D80();
        swift_bridgeObjectRelease();
        sub_222BC7D5C();
        v70 = 0;
        v42 = v90;
        swift_release();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v87, v91);
        sub_222BC7D5C();
      }
      else
      {
        v17 = v84;
        if (qword_25576F4B0 != -1)
          swift_once();
        v63 = sub_222BC7DA4();
        sub_222BAC438(v63, (uint64_t)qword_25576F838);
        v64 = sub_222BC7EA0();
        v65 = sub_222BC7D8C();
        v66 = v64;
        v67 = os_log_type_enabled(v65, v64);
        v68 = v89;
        if (v67)
        {
          v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v69 = 0;
          _os_log_impl(&dword_222B17000, v65, v66, "Unable to create extract stream", v69, 2u);
          MEMORY[0x22767A418](v69, -1, -1);
        }

        v42 = v90;
        (*(void (**)(char *, uint64_t))(v90 + 8))(v87, v91);
        sub_222BC7D5C();
        v70 = v68;
        if (v68)
        {

          v70 = 0;
        }
      }
      swift_release();
      sub_222BC7D14();
      if (v70)

      goto LABEL_46;
    }
    if (qword_25576F4B0 != -1)
      swift_once();
    v48 = sub_222BC7DA4();
    sub_222BAC438(v48, (uint64_t)qword_25576F838);
    v49 = sub_222BC7EA0();
    v50 = sub_222BC7D8C();
    v51 = v49;
    v52 = os_log_type_enabled(v50, v49);
    v53 = v89;
    v17 = v84;
    if (v52)
    {
      v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v54 = 0;
      _os_log_impl(&dword_222B17000, v50, v51, "Unable to create decompression stream", v54, 2u);
      MEMORY[0x22767A418](v54, -1, -1);
    }

    sub_222BC7D14();
    if (v53)

    swift_release();
  }
  else
  {
    if (qword_25576F4B0 != -1)
      swift_once();
    v43 = sub_222BC7DA4();
    sub_222BAC438(v43, (uint64_t)qword_25576F838);
    v44 = sub_222BC7EA0();
    v45 = sub_222BC7D8C();
    v46 = v44;
    if (os_log_type_enabled(v45, v44))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_222B17000, v45, v46, "Unable to create read file stream", v47, 2u);
      MEMORY[0x22767A418](v47, -1, -1);
    }

  }
  v42 = v90;
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v91);
}

unint64_t sub_222BC2BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25576F858;
  if (!qword_25576F858)
  {
    v1 = sub_222BC7D38();
    result = MEMORY[0x22767A388](MEMORY[0x24BEDFF50], v1);
    atomic_store(result, (unint64_t *)&qword_25576F858);
  }
  return result;
}

uint64_t sub_222BC2C28(_QWORD *a1)
{
  return sub_222BBEFC4(a1);
}

uint64_t sub_222BC2C44()
{
  return sub_222BBF210() & 1;
}

uint64_t sub_222BC2C60(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_222BAE44C(a2);
    result = MEMORY[0x22767A388](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_222BC2CA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_222BADC9C(&qword_25576F7E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_222BC2CE4()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = sub_222BC7C90();
  v14 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v1 = (char *)&v12 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SegmentPayload();
  sub_222BBEEFC();
  sub_222BC7C48();
  swift_bridgeObjectRelease();
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v2 = swift_allocObject();
  v12 = xmmword_222BD2620;
  *(_OWORD *)(v2 + 16) = xmmword_222BD2620;
  v3 = sub_222BC7C6C();
  v5 = v4;
  *(_QWORD *)(v2 + 56) = MEMORY[0x24BEE0D00];
  v6 = sub_222BADCDC();
  *(_QWORD *)(v2 + 64) = v6;
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v5;
  sub_222BC7D80();
  swift_bridgeObjectRelease();
  v7 = v13;
  sub_222BC7CC0();
  if (!v7)
  {
    sub_222BC7E94();
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = v12;
    v9 = sub_222BC7C6C();
    *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v8 + 64) = v6;
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v10;
    sub_222BC7D80();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v1, v15);
}

uint64_t SegmentPayload.init(data:number:count:modelToken:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v7;
  uint64_t v8;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v7 = (char *)a6 + *(int *)(type metadata accessor for SegmentPayload() + 28);
  v8 = sub_222BC7CF0();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a5, v8);
}

uint64_t type metadata accessor for SegmentPayload()
{
  uint64_t result;

  result = qword_25576F8A0;
  if (!qword_25576F8A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SegmentPayload.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_222BB5F2C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SegmentPayload.number.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SegmentPayload.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SegmentPayload.modelToken.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SegmentPayload() + 28);
  v4 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

unint64_t initializeBufferWithCopyOfBuffer for SegmentPayload(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_222BB5F2C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    v9 = *(int *)(a3 + 28);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = sub_222BC7CF0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for SegmentPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_222BB512C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for SegmentPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_222BB5F2C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for SegmentPayload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_222BB5F2C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_222BB512C(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for SegmentPayload(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SegmentPayload(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_222BB512C(v6, v7);
  *(_OWORD *)(a1 + 16) = a2[1];
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_222BC7CF0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SegmentPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BC3310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_222BC7CF0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SegmentPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_222BC33A4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_222BC7CF0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_222BC3420()
{
  uint64_t result;
  unint64_t v1;

  result = sub_222BC7CF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *CoreMLPerfRunnerServiceMessageHandler.__allocating_init(coordinator:channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = sub_222BB4C74(a1, v5);
  v8 = sub_222BC41F4(v7, a2, v2, v5, v6);
  sub_222BB4C9C(a1);
  return v8;
}

void sub_222BC3504(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_222BC3554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_222BC7DA4();
  sub_222BAC450(v0, qword_25576F8B0);
  v1 = sub_222BAC438(v0, (uint64_t)qword_25576F8B0);
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BAC438(v0, (uint64_t)qword_255770C80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_222BC35E4()
{
  qword_25576F8C8 = 0x646E616D6D6F63;
  unk_25576F8D0 = 0xE700000000000000;
}

void sub_222BC3608()
{
  qword_25576F8D8 = 0x444950746567;
  unk_25576F8E0 = 0xE600000000000000;
}

uint64_t *CoreMLPerfRunnerServiceMessageHandler.init(coordinator:channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = sub_222BB4C74(a1, v5);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = sub_222BBA918((uint64_t)v9, a2, v2, v5, v6);
  sub_222BB4C9C(a1);
  return v11;
}

void sub_222BC36D0(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *log;

  if (qword_25576F4C0 != -1)
    swift_once();
  v2 = (void *)sub_222BC7E10();
  v3 = objc_msgSend(a1, sel_stringForMessageKey_, v2);

  if (v3)
  {
    v4 = sub_222BC7E1C();
    v6 = v5;

    sub_222BC7E94();
    if (qword_25576F498 != -1)
      swift_once();
    sub_222BADC9C(&qword_25576F5D8);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_222BD2620;
    v8 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
    v9 = sub_222BADCDC();
    *(_QWORD *)(v7 + 64) = v9;
    *(_QWORD *)(v7 + 32) = v4;
    *(_QWORD *)(v7 + 40) = v6;
    swift_bridgeObjectRetain();
    sub_222BC7D80();
    swift_bridgeObjectRelease();
    if (qword_25576F4C8 != -1)
      swift_once();
    if (qword_25576F8D8 == v4 && unk_25576F8E0 == v6 || (sub_222BC7FD8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_222BC39F8(a1);
    }
    else
    {
      sub_222BC7EA0();
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
      *(_QWORD *)(v13 + 56) = v8;
      *(_QWORD *)(v13 + 64) = v9;
      *(_QWORD *)(v13 + 32) = v4;
      *(_QWORD *)(v13 + 40) = v6;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_25576F4B8 != -1)
      swift_once();
    v10 = sub_222BC7DA4();
    sub_222BAC438(v10, (uint64_t)qword_25576F8B0);
    v11 = sub_222BC7EA0();
    log = sub_222BC7D8C();
    if (os_log_type_enabled(log, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_222B17000, log, v11, "no command received in perf runner service.", v12, 2u);
      MEMORY[0x22767A418](v12, -1, -1);
    }

  }
}

void sub_222BC39F8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  id v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  _BYTE v33[8];
  uint64_t v34;

  v2 = v1;
  v4 = sub_222BADC9C(&qword_25576F630);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_222BC7CF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (void *)sub_222BC7E10();
  v12 = objc_msgSend(a1, sel_stringForMessageKey_, v11);

  if (!v12)
    goto LABEL_4;
  sub_222BC7E1C();

  sub_222BC7CCC();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    v18 = v2[5];
    v19 = v2[6];
    sub_222BB4D38(v2 + 2, v18);
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t, uint64_t))(v19 + 16))(&v34, v10, v18, v19);
    v20 = v34;
    if (BYTE4(v34) == 1)
    {
      sub_222BC7EA0();
      if (qword_25576F498 != -1)
        swift_once();
      sub_222BADC9C(&qword_25576F5D8);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_222BD2DF0;
      v22 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v21 + 64) = v22;
      *(_QWORD *)(v21 + 32) = v20 + 101;
      v33[7] = v20;
      sub_222BB5A70();
      v23 = sub_222BC7FF0();
      v25 = v24;
      *(_QWORD *)(v21 + 96) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 104) = sub_222BADCDC();
      *(_QWORD *)(v21 + 72) = v23;
      *(_QWORD *)(v21 + 80) = v25;
      sub_222BC7D80();
      swift_bridgeObjectRelease();
      if (qword_25576F4B8 != -1)
        swift_once();
      v26 = sub_222BC7DA4();
      sub_222BAC438(v26, (uint64_t)qword_25576F8B0);
      v27 = sub_222BC7E94();
      v28 = sub_222BC7D8C();
      if (!os_log_type_enabled(v28, v27))
      {
        v20 = 0;
        goto LABEL_22;
      }
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_222B17000, v28, v27, "sending 0 as pid reply from runGetPidCommand", v29, 2u);
      v20 = 0;
    }
    else
    {
      if (qword_25576F4B8 != -1)
        swift_once();
      v30 = sub_222BC7DA4();
      sub_222BAC438(v30, (uint64_t)qword_25576F8B0);
      v31 = sub_222BC7E94();
      v28 = sub_222BC7D8C();
      v32 = v31;
      if (!os_log_type_enabled(v28, v31))
        goto LABEL_22;
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_222B17000, v28, v32, "sendingReply from runGetPidCommand", v29, 2u);
    }
    MEMORY[0x22767A418](v29, -1, -1);
LABEL_22:

    sub_222BC3EA8(a1, v20);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  sub_222BC4308((uint64_t)v6);
LABEL_4:
  if (qword_25576F4B8 != -1)
    swift_once();
  v13 = sub_222BC7DA4();
  sub_222BAC438(v13, (uint64_t)qword_25576F8B0);
  v14 = sub_222BC7EA0();
  v15 = sub_222BC7D8C();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_222B17000, v15, v16, "no modelToken provided", v17, 2u);
    MEMORY[0x22767A418](v17, -1, -1);
  }

}

void sub_222BC3EA8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[6];

  if (qword_25576F4B8 != -1)
    swift_once();
  v5 = sub_222BC7DA4();
  sub_222BAC438(v5, (uint64_t)qword_25576F8B0);
  v6 = sub_222BC7E94();
  v7 = sub_222BC7D8C();
  if (os_log_type_enabled(v7, v6))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_222B17000, v7, v6, "starting sendPidReply", v8, 2u);
    MEMORY[0x22767A418](v8, -1, -1);
  }

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInt_, a2);
  v10 = objc_msgSend((id)objc_opt_self(), sel_messageWithObject_, v9);

  v11 = objc_msgSend(a1, sel_newReplyWithMessage_, v10);
  v12 = *(void **)(v2 + 56);
  v17[4] = sub_222BC40D8;
  v17[5] = 0;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = sub_222BC3504;
  v17[3] = &unk_24EB27BA8;
  v13 = _Block_copy(v17);
  objc_msgSend(v12, sel_sendMessage_replyHandler_, v11, v13);
  _Block_release(v13);
  LOBYTE(v13) = sub_222BC7E94();
  v14 = sub_222BC7D8C();
  v15 = v13;
  if (os_log_type_enabled(v14, (os_log_type_t)v13))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_222B17000, v14, v15, "finished sendPidReply", v16, 2u);
    MEMORY[0x22767A418](v16, -1, -1);
  }

}

void sub_222BC40D8()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *log;

  if (qword_25576F4B8 != -1)
    swift_once();
  v0 = sub_222BC7DA4();
  sub_222BAC438(v0, (uint64_t)qword_25576F8B0);
  v1 = sub_222BC7E94();
  log = sub_222BC7D8C();
  if (os_log_type_enabled(log, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_222B17000, log, v1, "received reply from message send in sendPidReply", v2, 2u);
    MEMORY[0x22767A418](v2, -1, -1);
  }

}

uint64_t CoreMLPerfRunnerServiceMessageHandler.deinit()
{
  uint64_t v0;

  sub_222BB4C9C(v0 + 16);

  return v0;
}

uint64_t CoreMLPerfRunnerServiceMessageHandler.__deallocating_deinit()
{
  uint64_t v0;

  sub_222BB4C9C(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t *sub_222BC41F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CoreMLPerfRunnerServiceMessageHandler();
  v12 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  v12[5] = a4;
  v12[6] = a5;
  v13 = sub_222BB5DCC(v12 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(v13, v11, a4);
  v12[7] = a2;
  return v12;
}

uint64_t type metadata accessor for CoreMLPerfRunnerServiceMessageHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoreMLPerfRunnerServiceMessageHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreMLPerfRunnerServiceMessageHandler.__allocating_init(coordinator:channel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CoreMLPerfRunnerServiceMessageHandler.respond(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t sub_222BC42F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_222BC4300()
{
  return swift_release();
}

uint64_t sub_222BC4308(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_222BADC9C(&qword_25576F630);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id CoreMLModelWriterService.__allocating_init(channel:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithChannel_, a1);

  return v3;
}

id CoreMLModelWriterService.init(channel:)(void *a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = qword_25576F488;
  v4 = v1;
  if (v3 != -1)
    swift_once();
  v5 = qword_255770C70;
  type metadata accessor for CoreMLModelWriterServiceMessageHandler();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = type metadata accessor for CoreMLPerfCoordinator();
  v6[6] = &protocol witness table for CoreMLPerfCoordinator;
  v6[2] = v5;
  v6[7] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC24DVTInstrumentsFoundation24CoreMLModelWriterService_messageHandler] = v6;
  swift_retain();
  v7 = a1;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for CoreMLModelWriterService();
  v8 = objc_msgSendSuper2(&v10, sel_initWithChannel_, v7);

  return v8;
}

uint64_t type metadata accessor for CoreMLModelWriterService()
{
  return objc_opt_self();
}

id CoreMLModelWriterService.__deallocating_deinit()
{
  void *v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  uint8_t *v5;
  objc_super v7;

  v1 = v0;
  if (qword_25576F4A0 != -1)
    swift_once();
  v2 = sub_222BC7DA4();
  sub_222BAC438(v2, (uint64_t)qword_255770C80);
  v3 = sub_222BC7E94();
  v4 = sub_222BC7D8C();
  if (os_log_type_enabled(v4, v3))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_222B17000, v4, v3, "ModelWriterService - deinit", v5, 2u);
    MEMORY[0x22767A418](v5, -1, -1);
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for CoreMLModelWriterService();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

id CoreMLModelWriterService.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CoreMLModelWriterService.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ModelLocation.init(tempFolderGuid:fileName:isMLPackage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v10 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for ModelLocation();
  v12 = (_QWORD *)(a5 + *(int *)(result + 20));
  *v12 = a2;
  v12[1] = a3;
  *(_BYTE *)(a5 + *(int *)(result + 24)) = a4;
  return result;
}

uint64_t type metadata accessor for ModelLocation()
{
  uint64_t result;

  result = qword_25576F8F0;
  if (!qword_25576F8F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_222BC498C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a1;
  v1 = sub_222BC7C90();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v18 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v11 = objc_msgSend(v18, sel_temporaryDirectory);
  sub_222BC7C60();

  sub_222BC7C3C();
  v19 = v2;
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  sub_222BC7E94();
  if (qword_25576F498 != -1)
    swift_once();
  sub_222BADC9C(&qword_25576F5D8);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_222BD2620;
  v14 = sub_222BC7C78();
  v16 = v15;
  *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 64) = sub_222BADCDC();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  sub_222BC7D80();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v10, v8, v1);
  sub_222BC7CD8();
  sub_222BC7C3C();
  swift_bridgeObjectRelease();
  type metadata accessor for ModelLocation();
  sub_222BC7C3C();
  v12(v8, v1);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, v1);
}

uint64_t ModelLocation.tempFolderGuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_222BC7CF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ModelLocation.fileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelLocation() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelLocation.isMLPackage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelLocation() + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelLocation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_222BC7CF0();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelLocation(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for ModelLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for ModelLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BC4F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_222BC7CF0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BC4FE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_222BC7CF0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_222BC5064()
{
  uint64_t result;
  unint64_t v1;

  result = sub_222BC7CF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    v8 = a2[2];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_222BC7CF0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    v14 = type metadata accessor for ModelLocation();
    v15 = *(int *)(v14 + 20);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v19 = *(_QWORD *)v17;
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
    v10[*(int *)(v14 + 24)] = v11[*(int *)(v14 + 24)];
    v20 = *(int *)(a3 + 28);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v23;
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ModelInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for ModelLocation();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a2[1];
  v7 = a2[2];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_222BC7CF0();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  v12(v9, v10, v11);
  v13 = type metadata accessor for ModelLocation();
  v14 = *(int *)(v13 + 20);
  v15 = &v9[v14];
  v16 = &v10[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  v9[*(int *)(v13 + 24)] = v10[*(int *)(v13 + 24)];
  v19 = *(int *)(a3 + 28);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_222BC7CF0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = type metadata accessor for ModelLocation();
  v12 = *(int *)(v11 + 20);
  v13 = &v8[v12];
  v14 = &v9[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[*(int *)(v11 + 24)] = v9[*(int *)(v11 + 24)];
  v15 = *(int *)(a3 + 28);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  v16[3] = v17[3];
  v16[4] = v17[4];
  v16[5] = v17[5];
  v16[6] = v17[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for ModelLocation();
  *(_OWORD *)(v7 + *(int *)(v10 + 20)) = *(_OWORD *)(v8 + *(int *)(v10 + 20));
  *(_BYTE *)(v7 + *(int *)(v10 + 24)) = *(_BYTE *)(v8 + *(int *)(v10 + 24));
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  return a1;
}

uint64_t assignWithTake for ModelInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_222BC7CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for ModelLocation();
  v11 = *(int *)(v10 + 20);
  v12 = (_QWORD *)(v7 + v11);
  v13 = (uint64_t *)(v8 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + *(int *)(v10 + 24)) = *(_BYTE *)(v8 + *(int *)(v10 + 24));
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BC5610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ModelLocation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ModelInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_222BC5698(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ModelLocation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ModelInfo()
{
  uint64_t result;

  result = qword_25576F900;
  if (!qword_25576F900)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_222BC5748()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ModelLocation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_222BC57D4(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  void *v6;

  v4 = objc_begin_catch(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_end_catch();
}

void sub_222BC5810()
{
  __assert_rtn("-[DVTFileStream _updateFileSize]", "DVTFileStream.m", 41, "lseek(_fileHandle.fileDescriptor, tmp, SEEK_SET) == tmp");
}

void sub_222BC5838(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a2, "localizedDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 138543618;
  v5 = a1;
  v6 = 2114;
  v7 = v3;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to fetch app record for identifier: %{public}@, error: %{public}@", (uint8_t *)&v4, 0x16u);

}

void sub_222BC58E0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B20A08(&dword_222B17000, a2, a3, "Provider failed: %@", a5, a6, a7, a8, 2u);
}

void sub_222BC5948(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B20A08(&dword_222B17000, a2, a3, "Failed to append provider '%@', to a session", a5, a6, a7, a8, 2u);
}

void sub_222BC59B0()
{
  __assert_rtn("-[DTKTraceSessionCreator stopWithError:]", "DTKTraceHelpers.m", 243, "_stoppingSemaphore != NULL");
}

void sub_222BC59D8()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = __error();
  strerror(*v0);
  sub_222B20A08(&dword_222B17000, MEMORY[0x24BDACB70], v1, "Failed to fetch value of 'kern.monotonic.supported' syscall: %s", v2, v3, v4, v5, 2u);
}

void sub_222BC5A54(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B20A08(&dword_222B17000, a2, a3, "Could not retrieve an icon for app path: %@", a5, a6, a7, a8, 2u);
}

void sub_222BC5ABC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, a1, a3, "Invalid underlying socket.", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC5AEC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD50(&dword_222B17000, a2, a3, "Failed to create read source for socket %d.", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC5B50(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD50(&dword_222B17000, a2, a3, "Failed to create write source for socket %d.", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC5BB4(void *a1)
{
  NSObject *v1;
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;

  sub_222B2AD1C(a1);
  sub_222B2AD30();
  v3 = sub_222B2AD48();
  sub_222B2AD40(v3);
  v5 = 67109378;
  v6 = v2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v1, v4, "Failed to open connected socket pair. Error (%d): %{public}s.", (uint8_t *)&v5);

  sub_222B2ACF4();
}

void sub_222BC5C38(void *a1)
{
  NSObject *v1;
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;

  sub_222B2AD1C(a1);
  sub_222B2AD30();
  v3 = sub_222B2AD48();
  sub_222B2AD40(v3);
  v5 = 67109378;
  v6 = v2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v1, v4, "Failed to disable SIGPIPE on socket pair (%d): %{public}s", (uint8_t *)&v5);

  sub_222B2ACF4();
}

void sub_222BC5CBC(void *a1, int a2)
{
  NSObject *v2;
  uint64_t v4;
  _DWORD v5[6];

  sub_222B2AD1C(a1);
  sub_222B2AD24();
  v5[0] = 67109378;
  v5[1] = a2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v2, v4, "Failed to create proxy channel handler (%d): %{public}s", (uint8_t *)v5);

  sub_222B2ACF4();
}

void sub_222BC5D3C(void *a1)
{
  NSObject *v1;
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;

  sub_222B2AD1C(a1);
  sub_222B2AD30();
  v3 = sub_222B2AD48();
  sub_222B2AD40(v3);
  v5 = 67109378;
  v6 = v2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v1, v4, "Connection receive error (%d): %{public}s.", (uint8_t *)&v5);

  sub_222B2ACF4();
}

void sub_222BC5DC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, a1, a3, "Connection received zero bytes, EOF.", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC5DF0()
{
  __assert_rtn("-[DVTSecureSocketProxy receiveDataFromConnectionAndWriteToSocket]_block_invoke", "DVTSecureSocketProxy.m", 274, "receivedSize <= buffer.length");
}

void sub_222BC5E18(void *a1, int a2)
{
  NSObject *v2;
  uint64_t v4;
  _DWORD v5[6];

  sub_222B2AD1C(a1);
  sub_222B2AD24();
  v5[0] = 67109378;
  v5[1] = a2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v2, v4, "Socket write error (%d): %{public}s", (uint8_t *)v5);

  sub_222B2ACF4();
}

void sub_222BC5E98(void *a1, int a2)
{
  NSObject *v2;
  uint64_t v4;
  _DWORD v5[6];

  sub_222B2AD1C(a1);
  sub_222B2AD24();
  v5[0] = 67109378;
  v5[1] = a2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v2, v4, "Socket read error (%d): %{public}s.", (uint8_t *)v5);

  sub_222B2ACF4();
}

void sub_222BC5F18()
{
  __assert_rtn("-[DVTSecureSocketProxy readDataFromSocketAndSendToConnection]_block_invoke", "DVTSecureSocketProxy.m", 342, "receivedSize <= maxSendSize");
}

void sub_222BC5F40()
{
  __assert_rtn("-[DVTSecureSocketProxy _onIOQueue_sendDataToConnection:]_block_invoke", "DVTSecureSocketProxy.m", 386, "bytesSent <= bufferSize");
}

void sub_222BC5F68(void *a1)
{
  NSObject *v1;
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;

  sub_222B2AD1C(a1);
  sub_222B2AD30();
  v3 = sub_222B2AD48();
  sub_222B2AD40(v3);
  v5 = 67109378;
  v6 = v2;
  sub_222B2AD0C();
  sub_222B2AD00(&dword_222B17000, v1, v4, "Connection send error (%d): %{public}s.", (uint8_t *)&v5);

  sub_222B2ACF4();
}

void sub_222BC5FEC()
{
  __assert_rtn("with_authorized_xpc_message", "dt_xpc_rpc.m", 37, "block");
}

void sub_222BC6014()
{
  __assert_rtn("-[DTKPTriggerTime _timerIDDdealloc:]", "DTKPTriggerTime.m", 94, "(timerID < sTimerCount) && sAllocatedTimers[timerID]");
}

void sub_222BC603C()
{
  __assert_rtn("_decompressWithExpectedSize", "DTStateActionCoder.hpp", 978, "under <= UINT8_MAX");
}

void sub_222BC6064()
{
  __assert_rtn("_decompressWithExpectedSize", "DTStateActionCoder.hpp", 986, "head[i] == top->background");
}

void sub_222BC608C()
{
  __assert_rtn("authorized_ktrace_file", "dtsecurity_xpc_client.m", 134, "data");
}

void sub_222BC60B4()
{
  _os_assert_log();
  _os_crash();
  __break(1u);
}

void sub_222BC60CC(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  objc_msgSend(a2, "localizedDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B397A0(&dword_222B17000, v5, v6, "Failed to serialize config data: %@", v7, v8, v9, v10, 2u);

  sub_222B2ACF4();
}

void sub_222BC6158(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  objc_msgSend(a2, "localizedDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B397A0(&dword_222B17000, v5, v6, "Failed to unarchive error in when stopping ktrace: %@", v7, v8, v9, v10, 2u);

  sub_222B2ACF4();
}

void sub_222BC61E4()
{
  __assert_rtn("authorized_xpc_attach", "dtsecurity_xpc_client.m", 218, "handler");
}

void sub_222BC620C()
{
  __assert_rtn("-[DTKTraceTapMemoHandlerDelegate sendDataMemo:toBulkReceiver:]", "DTKTraceTapMemoHandlerDelegate.m", 48, "stream.fileURL");
}

void sub_222BC6234()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_fault_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "DTKTraceTapMemoHandler Programming Error: No sessionHandler was set.", v0, 2u);
}

void sub_222BC6278()
{
  __assert_rtn("-[DTKTraceTapMemoHandlerDelegate peekAtMemo:]", "DTKTraceTapMemoHandlerDelegate.m", 187, "0");
}

void sub_222BC62A0()
{
  __assert_rtn("copy", "DTTableRowCoder.hpp", 280, "ref.valid()");
}

void sub_222BC62C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_222B432C8("distance", "DTStateActionCoder.hpp", a3, "_generation == other._generation");
}

void sub_222BC62EC()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_debug_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "Encoding a RESET command", v0, 2u);
}

void sub_222BC6330()
{
  __assert_rtn("-[DTOSLogLoader _setupCommonStreamParameters:]_block_invoke_3", "DTOSLogLoader.mm", 1634, "_agentWaitingForStop == nil");
}

void sub_222BC6358(void *a1, uint8_t *buf)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Partial error attaching to log: %@", buf, 0xCu);

}

void sub_222BC63B0()
{
  __assert_rtn("-[DTOSLogLoaderFetchTicket holdAgent:loader:]_block_invoke_2", "DTOSLogLoader.mm", 2015, "loader->_agentWaitingForEvents == nil");
}

void sub_222BC63D8()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to turn off persistence for our internal heartbeat messages.", v0, 2u);
}

void sub_222BC641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_222B432D0("writeWord", "DTStateActionCoder.hpp", a3, "start <= head");
}

void sub_222BC6440()
{
  __assert_rtn("_writeActionToTape", "DTStateActionCoder.hpp", 276, "newRef >= 0");
}

void sub_222BC6468()
{
  __assert_rtn("push", "DTStateActionCoder.hpp", 432, "length == 0");
}

void sub_222BC6490()
{
  __assert_rtn("_findBackgroundPatternStart", "DTStateActionCoder.hpp", 256, "data == end || (data+1) == end || *(data+1) == _background");
}

void sub_222BC64B8()
{
  __assert_rtn("_findBackgroundPatternStart", "DTStateActionCoder.hpp", 240, "startOfPartiallyEncodedData != end");
}

void sub_222BC64E0()
{
  __assert_rtn("-[DTTapMemoHandler initWithConfig:delegate:]", "DTTapMemoHandler.m", 63, "config != nil");
}

void sub_222BC6508()
{
  __assert_rtn("-[DTTapMemoHandler initWithConfig:delegate:]", "DTTapMemoHandler.m", 64, "delegate != nil");
}

void sub_222BC6530()
{
  __assert_rtn("DTKDebugFilterMatchesEvent", "DTKPTriggerKDebug.m", 81, "filterType <= KPERF_KDEBUG_FILTER_DEBUGID_FN");
}

void sub_222BC6558(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3[0] = 67109378;
  v3[1] = a2;
  v4 = 2114;
  v5 = a1;
  _os_log_error_impl(&dword_222B17000, log, OS_LOG_TYPE_ERROR, "failed to acquire assertion for pid %d: %{public}@", (uint8_t *)v3, 0x12u);
}

void sub_222BC65DC()
{
  __assert_rtn("XRVMSetThreadVMRegionPageSize", "XRVMRegion.m", 75, "pageSize == 16*1024 || pageSize == 4*1024");
}

void sub_222BC6604()
{
  __assert_rtn("-[DVTKtraceSymbolsInformation getSymbolInfoForAddress:]", "DVTKtraceSymbolsInformation.mm", 39, "lookup_addr < address");
}

void sub_222BC662C(void *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_222B58F4C(&dword_222B17000, MEMORY[0x24BDACB70], a3, "%@", (uint8_t *)a2);

}

void sub_222BC667C()
{
  __assert_rtn("getSessionName", "DTKPSession.mm", 78, "0 && \"The current state should be added to SessionStateToName\"");
}

void sub_222BC66A4()
{
  __assert_rtn("-[DTKTraceTapMessageHandler initWithConfig:]", "DTKTraceTapMessageHandler.m", 42, "_datastream");
}

void sub_222BC66CC()
{
  __assert_rtn("-[DTKTraceTapMessageHandler messageReceived:]", "DTKTraceTapMessageHandler.m", 122, "nil != _datastream");
}

void sub_222BC66F4()
{
  __assert_rtn("-[DTKTraceTapMessageHandler messageReceived:]", "DTKTraceTapMessageHandler.m", 126, "_datastream");
}

void sub_222BC671C()
{
  __assert_rtn("-[DTKTraceTapMessageHandler messageReceived:]", "DTKTraceTapMessageHandler.m", 154, "nil != _datastream");
}

void sub_222BC6744(void *a1)
{
  NSLog(CFSTR("Received a legacy message (%d) when in Session mode."), objc_msgSend(a1, "kind"));
  __assert_rtn("-[DTKTraceTapMessageHandler messageReceived:]", "DTKTraceTapMessageHandler.m", 238, "0");
}

void sub_222BC6784()
{
  __assert_rtn("-[DTKTraceTapMessageHandler messageReceived:]", "DTKTraceTapMessageHandler.m", 76, "error == nil");
}

void sub_222BC67AC(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  objc_msgSend(a2, "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B397A0(&dword_222B17000, v5, v6, "Failed to register Developer Tools style override with error: %@", v7, v8, v9, v10, 2u);

  sub_222B2ACF4();
}

void sub_222BC6838(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_222B17000, log, OS_LOG_TYPE_ERROR, "Registered status bar assertion invalidated", v1, 2u);
}

void sub_222BC6878(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  objc_msgSend(a2, "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B397A0(&dword_222B17000, v5, v6, "Status Bar override registration invalidated with error: %@", v7, v8, v9, v10, 2u);

  sub_222B2ACF4();
}

void sub_222BC6904()
{
  __assert_rtn("-[DTActivityTraceTapLocalDelegate initWithConfig:]", "DTActivityTraceTapLocalDelegate.m", 96, "config != nil");
}

void sub_222BC692C()
{
  __assert_rtn("-[DTActivityTraceTapLocalDelegate setTap:]", "DTActivityTraceTapLocalDelegate.m", 185, "tap != nil");
}

void sub_222BC6954()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to dispatch registered notification", v0, 2u);
}

void sub_222BC6998()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_debug_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "Timer fired... updating HAR time on device", v0, 2u);
}

void sub_222BC69DC()
{
  __assert_rtn("-[DTActivityTraceTapLocalDelegate start]", "DTActivityTraceTapLocalDelegate.m", 439, "_dock.dockedAgent == _shuttle");
}

void sub_222BC6A04()
{
  __assert_rtn("-[DTTapMessageHandler initWithConfig:]", "DTTapMessageHandler.m", 19, "config != nil");
}

void sub_222BC6A2C()
{
  __assert_rtn("-[DTTapFactory createNewTapWithConfig:connection:options:]", "DTTapFactory.m", 162, "messageHandler == nil");
}

void sub_222BC6A54()
{
  __assert_rtn("-[DTTapRemote initWithConfig:memoHandler:messageHandler:connection:]", "DTTapRemote.m", 37, "messageHandler != nil");
}

void sub_222BC6A7C(uint64_t a1)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = 136315650;
  v2 = "/Library/Caches/com.apple.xbs/Sources/DVTInstrumentsFrameworks/Taps/DTTapRemote.m";
  v3 = 1024;
  v4 = 77;
  v5 = 2112;
  v6 = a1;
  _os_log_fault_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "Exception caught at %s:%d - %@", (uint8_t *)&v1, 0x1Cu);
}

void sub_222BC6B1C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "error");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B6F9A4(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Exception encountered trying to set tap configuration: %@", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, MEMORY[0x24BDACB70], a3, "Device disconnected while trying to set tap configuration", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC6BCC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "error");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B6F9A4(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Exception encountered trying to start tap: %@", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, MEMORY[0x24BDACB70], a3, "Device disconnected while trying to start tap", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC6C7C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "error");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B6F9A4(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Exception encountered trying to stop the tap: %@", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, MEMORY[0x24BDACB70], a3, "Device disconnected while trying to stop tap", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC6D2C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "error");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B6F9A4(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Exception encountered trying to pause the tap: %@", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, MEMORY[0x24BDACB70], a3, "Device disconnected while trying to pause tap", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC6DDC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "error");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B6F9A4(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Exception encountered trying to unpause the tap: %@", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, MEMORY[0x24BDACB70], a3, "Device disconnected while trying to unpause tap", a5, a6, a7, a8, 0);
  sub_222B2AD38();
}

void sub_222BC6E8C()
{
  __assert_rtn("-[DTTapLocal initWithConfig:memoHandler:delegate:]", "DTTapLocal.m", 31, "delegate != nil");
}

void sub_222BC6EB4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "delegate");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B701A0(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Tap with delegate named %@ started.", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6F30(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "delegate");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B701A0(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Tap with delegate named %@ stopped.", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC6FAC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "delegate");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B701A0(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Tap with delegate named %@ paused.", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC7028(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "delegate");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B6F9B4();
  sub_222B701A0(&dword_222B17000, MEMORY[0x24BDACB70], v2, "Tap with delegate named %@ unpaused.", v3, v4, v5, v6, v7);

  sub_222B2ACF4();
}

void sub_222BC70A4()
{
  __assert_rtn("-[DTTapLocal _fetchDataForReason:]_block_invoke", "DTTapLocal.m", 151, "!sawLastMemo");
}

void sub_222BC70CC()
{
  __assert_rtn("-[DTTapLocal _fetchDataForReason:]_block_invoke", "DTTapLocal.m", 132, "memoCount == 0");
}

void sub_222BC70F4()
{
  __assert_rtn("-[DTTapLocal _fetchDataForReason:]_block_invoke", "DTTapLocal.m", 131, "lastMemoForThisFetch");
}

void sub_222BC711C()
{
  __assert_rtn("-[DTTap initWithConfig:memoHandler:]", "DTTap.m", 37, "config != nil");
}

void sub_222BC7144()
{
  __assert_rtn("-[DTKPCPU initWithName:database:]", "DTKPCPU.m", 114, "db != NULL");
}

void sub_222BC716C()
{
  __assert_rtn("-[DVTQueueBasedTimer _runBlock]", "DVTQueueBasedTimer.mm", 66, "false && \"This shouldn't be happening.\"");
}

void sub_222BC7194(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(sub_222B83928(a1), "UTF8String");
  sub_222B6F9B4();
  sub_222B83914(&dword_222B17000, v1, v2, "Filename is invalid: %s", v3, v4, v5, v6, v7);
  sub_222B2ACF4();
}

void sub_222BC7200(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "localizedDescription");
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v1, "UTF8String");
  sub_222B6F9B4();
  sub_222B83914(&dword_222B17000, v2, v3, "Failed to transfer to app data container. Error: %s", v4, v5, v6, v7, v8);

  sub_222B2ACF4();
}

void sub_222BC7280(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(sub_222B83928(a1), "UTF8String");
  sub_222B6F9B4();
  sub_222B83914(&dword_222B17000, v1, v2, "Failed to find bundle record for application id: %s.", v3, v4, v5, v6, v7);
  sub_222B2ACF4();
}

void sub_222BC72EC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(sub_222B83928(a1), "UTF8String");
  sub_222B6F9B4();
  sub_222B83914(&dword_222B17000, v1, v2, "Couldn't find dataContainerURL for app: %s", v3, v4, v5, v6, v7);
  sub_222B2ACF4();
}

void sub_222BC7358(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, a1, a3, "Failed to transfer file into mobile directory.", a5, a6, a7, a8, 0);
}

void sub_222BC738C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_222B2AD60(&dword_222B17000, a1, a3, "Failed to find mobile directory.", a5, a6, a7, a8, 0);
}

void sub_222BC73C0()
{
  __assert_rtn("-[DTKTraceTapConfig _addTriggerConfig:]", "DTKTraceTapConfig.m", 146, "_kdebugTriggerIndex == ~0x0");
}

void sub_222BC73E8()
{
  __assert_rtn("-[DTCADebugService _switchNamed:toDebugOption:]", "DTCADebugService.m", 103, "optionOut != NULL");
}

void sub_222BC7410()
{
  __assert_rtn("-[DTKPCPUCounterAllocator initWithCPU:error:]", "DTKPCPUCounterAllocator.m", 62, "cpu != NULL");
}

void sub_222BC7438()
{
  __assert_rtn("-[DTKPCPUCounterAllocator _counterIndexForEvent:absolute:error:]", "DTKPCPUCounterAllocator.m", 126, "event");
}

void sub_222BC7460(id *a1)
{
  void *v1;
  int v2;
  void *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*a1, "localizedDescription");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = 138412290;
  v3 = v1;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "_counterIndexForEvent: %@", (uint8_t *)&v2, 0xCu);

}

void sub_222BC74F8()
{
  __assert_rtn("-[DTKPCPUCounterAllocator setPMIEventName:pmiThreshold:error:]", "DTKPCPUCounterAllocator.m", 240, "event.kpepEvent != NULL");
}

void sub_222BC7520()
{
  __assert_rtn("-[DTKPCPUCounterAllocator setPMIEventName:pmiThreshold:error:]", "DTKPCPUCounterAllocator.m", 249, "rc == KPEP_ERR_NONE");
}

void sub_222BC7548()
{
  __assert_rtn("-[DTKPCPUCounterAllocator addPMCEventName:error:]", "DTKPCPUCounterAllocator.m", 283, "event.kpepEvent != NULL");
}

void sub_222BC7570(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 134218242;
  v3 = a2;
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error recording config words into buffer (%zu): %@", (uint8_t *)&v2, 0x16u);
}

void sub_222BC75F8()
{
  __assert_rtn("-[DTKPCPUCounterAllocator configurePMIActionID:error:]", "DTKPCPUCounterAllocator.m", 435, "pmi");
}

void sub_222BC7620()
{
  __assert_rtn("-[DTTapMessageHandlerArchiver initWithConfig:archiveURL:]", "DTTapMessageHandlerArchiver.m", 22, "archiveURL");
}

void sub_222BC7648()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Clip Request install timed out.", v0, 2u);
}

void sub_222BC768C(void *a1)
{
  void *v1;
  int v2;
  void *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1, "localizedDescription");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = 138412290;
  v3 = v1;
  _os_log_error_impl(&dword_222B17000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Clip Request failed: %@", (uint8_t *)&v2, 0xCu);

}

void sub_222BC7720()
{
  __assert_rtn("-[DTAllocationsRecorder _startWithError:]_block_invoke", "DTAllocationsRecorder.mm", 317, "_partialFilled <= sizeof(OAAllocationEvent)");
}

void sub_222BC7748()
{
  __assert_rtn("-[DTAllocationsRecorder _startWithError:]_block_invoke", "DTAllocationsRecorder.mm", 328, "_partialFilled <= MAX_ALLOCATION_EVENT_SIZE");
}

void sub_222BC7770(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_222B17000, a2, OS_LOG_TYPE_ERROR, "Failed to call kperf_buffer_wait, returned with %d.", (uint8_t *)v2, 8u);
}

void sub_222BC77E4(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_222B58F4C(&dword_222B17000, a3, (uint64_t)a3, "_kernelCallbackImpl: Failed to flush data from kernel: %@", (uint8_t *)a2);

}

void sub_222BC7830()
{
  __assert_rtn("-[DTKPCPUEvent initWithName:alias:definition:kpepEvent:]", "DTKPCPUEvent.m", 26, "name.length > 0");
}

void sub_222BC7858()
{
  __assert_rtn("-[DTKPCPUEvent initWithName:alias:definition:kpepEvent:]", "DTKPCPUEvent.m", 27, "kpepEvent != NULL");
}

void sub_222BC7880()
{
  __assert_rtn("-[DTSysmonTapLocalDelegate initWithConfig:]", "DTSysmonTapLocalDelegate.m", 79, "config != nil");
}

void sub_222BC78A8()
{
  __assert_rtn("-[DTSysmonTapLocalDelegate setTap:]", "DTSysmonTapLocalDelegate.m", 182, "tap != nil");
}

void sub_222BC78D0()
{
  __assert_rtn("-[DTSysmonTapLocalDelegate start]_block_invoke", "DTSysmonTapLocalDelegate.m", 684, "attr");
}

void sub_222BC78F8()
{
  __assert_rtn("-[DTSysmonTapLocalDelegate start]_block_invoke_5", "DTSysmonTapLocalDelegate.m", 711, "attr");
}

void sub_222BC7920()
{
  __assert_rtn("-[DTSysmonTapLocalDelegate start]_block_invoke_9", "DTSysmonTapLocalDelegate.m", 738, "attr");
}

void sub_222BC7948()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)qword_25576FC60, "localizedDescription");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B83914(&dword_222B17000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);

  sub_222B2ACF4();
}

void sub_222BC79CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)qword_25576FC78, "localizedDescription");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B83914(&dword_222B17000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);

  sub_222B2ACF4();
}

void sub_222BC7A50(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 40);
  v4[0] = 67109378;
  v4[1] = v3;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_222B17000, log, OS_LOG_TYPE_ERROR, "failed to launch preview shell (%d retries remaining): %@", (uint8_t *)v4, 0x12u);
}

void sub_222BC7AD8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)qword_25576FCA0, "localizedDescription");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_222B83914(&dword_222B17000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);

  sub_222B2ACF4();
}

void sub_222BC7B9C()
{
  __assert_rtn("-[DTKPTrigger _actionDealloc:]", "DTKPTrigger.m", 95, "(action < sActionCount) && (action > DTKP_INVALID_ACTION) && sActionAllocations[action]");
}

uint64_t sub_222BC7BC4()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_222BC7BD0()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_222BC7BDC()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_222BC7BE8()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_222BC7BF4()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_222BC7C00()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_222BC7C0C()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_222BC7C18()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_222BC7C24()
{
  return MEMORY[0x24BDCD898]();
}

uint64_t sub_222BC7C30()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_222BC7C3C()
{
  return MEMORY[0x24BDCD918]();
}

uint64_t sub_222BC7C48()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t sub_222BC7C54()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t sub_222BC7C60()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_222BC7C6C()
{
  return MEMORY[0x24BDCD9E8]();
}

uint64_t sub_222BC7C78()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_222BC7C84()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t sub_222BC7C90()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_222BC7C9C()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_222BC7CA8()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_222BC7CB4()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_222BC7CC0()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_222BC7CCC()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_222BC7CD8()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_222BC7CE4()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_222BC7CF0()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_222BC7CFC()
{
  return MEMORY[0x24BEDFE40]();
}

uint64_t sub_222BC7D08()
{
  return MEMORY[0x24BEDFE50]();
}

uint64_t sub_222BC7D14()
{
  return MEMORY[0x24BEDFE58]();
}

uint64_t sub_222BC7D20()
{
  return MEMORY[0x24BEDFE88]();
}

uint64_t sub_222BC7D2C()
{
  return MEMORY[0x24BEDFF20]();
}

uint64_t sub_222BC7D38()
{
  return MEMORY[0x24BEDFF30]();
}

uint64_t sub_222BC7D44()
{
  return MEMORY[0x24BEDFF68]();
}

uint64_t sub_222BC7D50()
{
  return MEMORY[0x24BEDFF78]();
}

uint64_t sub_222BC7D5C()
{
  return MEMORY[0x24BEDFF88]();
}

uint64_t sub_222BC7D68()
{
  return MEMORY[0x24BEDFF90]();
}

uint64_t sub_222BC7D74()
{
  return MEMORY[0x24BEDFF98]();
}

uint64_t sub_222BC7D80()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_222BC7D8C()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_222BC7D98()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_222BC7DA4()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_222BC7DB0()
{
  return MEMORY[0x24BEE60D8]();
}

uint64_t sub_222BC7DBC()
{
  return MEMORY[0x24BEE6100]();
}

uint64_t sub_222BC7DC8()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_222BC7DD4()
{
  return MEMORY[0x24BEE54D8]();
}

uint64_t sub_222BC7DE0()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_222BC7DEC()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_222BC7DF8()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_222BC7E04()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_222BC7E10()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_222BC7E1C()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_222BC7E28()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_222BC7E34()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_222BC7E40()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_222BC7E4C()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_222BC7E58()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_222BC7E64()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_222BC7E70()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_222BC7E7C()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_222BC7E88()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_222BC7E94()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_222BC7EA0()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_222BC7EAC()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_222BC7EB8()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_222BC7EC4()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_222BC7ED0()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t sub_222BC7EDC()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_222BC7EE8()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t sub_222BC7EF4()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_222BC7F00()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_222BC7F0C()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_222BC7F18()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_222BC7F24()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_222BC7F30()
{
  return MEMORY[0x24BEE27B8]();
}

uint64_t sub_222BC7F3C()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_222BC7F48()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_222BC7F54()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_222BC7F60()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_222BC7F6C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_222BC7F78()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_222BC7F84()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_222BC7F90()
{
  return MEMORY[0x24BEE33A0]();
}

uint64_t sub_222BC7F9C()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_222BC7FA8()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_222BC7FB4()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_222BC7FC0()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_222BC7FCC()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_222BC7FD8()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_222BC7FE4()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_222BC7FF0()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_222BC7FFC()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_222BC8008()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_222BC8014()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_222BC8020()
{
  return MEMORY[0x24BEE3F18]();
}

uint64_t sub_222BC802C()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_222BC8038()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_222BC8044()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_222BC8050()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_222BC805C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_222BC8068()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_222BC8074()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t CARenderServerGetDebugOption()
{
  return MEMORY[0x24BDE5520]();
}

uint64_t CARenderServerGetFrameCounter()
{
  return MEMORY[0x24BDE5530]();
}

uint64_t CARenderServerSetDebugOption()
{
  return MEMORY[0x24BDE5558]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

uint64_t CFArrayCreateWithDTXPrimitiveArray()
{
  return MEMORY[0x24BE2A8E8]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x24BDBBA40](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBAC8](bundle);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x24BDBBDB8](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x24BDBBE48](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

Boolean CFHTTPMessageAppendBytes(CFHTTPMessageRef message, const UInt8 *newBytes, CFIndex numBytes)
{
  return MEMORY[0x24BDB7298](message, newBytes, numBytes);
}

CFStringRef CFHTTPMessageCopyRequestMethod(CFHTTPMessageRef request)
{
  return (CFStringRef)MEMORY[0x24BDB72B8](request);
}

CFURLRef CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request)
{
  return (CFURLRef)MEMORY[0x24BDB72C0](request);
}

CFDataRef CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x24BDB72C8](message);
}

CFHTTPMessageRef CFHTTPMessageCreateEmpty(CFAllocatorRef alloc, Boolean isRequest)
{
  return (CFHTTPMessageRef)MEMORY[0x24BDB72D0](alloc, isRequest);
}

CFHTTPMessageRef CFHTTPMessageCreateResponse(CFAllocatorRef alloc, CFIndex statusCode, CFStringRef statusDescription, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x24BDB72E0](alloc, statusCode, statusDescription, httpVersion);
}

Boolean CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef message)
{
  return MEMORY[0x24BDB72F8](message);
}

void CFHTTPMessageSetBody(CFHTTPMessageRef message, CFDataRef bodyData)
{
  MEMORY[0x24BDB7308](message, bodyData);
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
  MEMORY[0x24BDB7310](message, headerField, value);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x24BDBC098](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC178](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x24BDBC1A8](key, value, applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1E8](allocator, data, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x24BDBC218](stream);
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x24BDBC220](stream);
}

CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC240](stream);
}

Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC250](stream);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC258](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x24BDBC260](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x24BDBC268](stream, runLoop, runLoopMode);
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x24BDBC270](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDBC280](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x24BDBC290](stream, runLoop, runLoopMode);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x24BDBC2F8]();
}

void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
  MEMORY[0x24BDBC498](alloc, *(_QWORD *)&sock, readStream, writeStream);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x24BDBC790](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x24BDBC8D0](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x24BDBC8E0](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x24BDBC8E8](alloc, uuid);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x24BDBC918](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x24BDBC920](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x24BDBC950](userNotification, responseFlags, timeout);
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x24BDBC960](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x24BDBC968](stream);
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x24BDBC970](stream);
}

CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream)
{
  return MEMORY[0x24BDBC998](stream);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x24BDBC9A8](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x24BDBC9B0](stream, runLoop, runLoopMode);
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x24BDBC9B8](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDBC9C8](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x24BDBC9D8](stream, runLoop, runLoopMode);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x24BDBC9E0](stream, buffer, bufferLength);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x24BDBDC60](space);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x24BDBDDD8](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x24BDBDF30](c);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

uint64_t CSIsNull()
{
  return MEMORY[0x24BE286D0]();
}

uint64_t CSRangeContainsRange()
{
  return MEMORY[0x24BE286D8]();
}

uint64_t CSRegionGetName()
{
  return MEMORY[0x24BE286E8]();
}

uint64_t CSRegionGetRange()
{
  return MEMORY[0x24BE286F0]();
}

uint64_t CSRelease()
{
  return MEMORY[0x24BE286F8]();
}

uint64_t CSRetain()
{
  return MEMORY[0x24BE28700]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x24BE28760]();
}

uint64_t CSSymbolIsThumb()
{
  return MEMORY[0x24BE28768]();
}

uint64_t CSSymbolOwnerCreateSignature()
{
  return MEMORY[0x24BE28770]();
}

uint64_t CSSymbolOwnerForeachSegment()
{
  return MEMORY[0x24BE28790]();
}

uint64_t CSSymbolOwnerForeachSymbolWithName()
{
  return MEMORY[0x24BE287A0]();
}

uint64_t CSSymbolOwnerGetCFUUIDBytes()
{
  return MEMORY[0x24BE287B8]();
}

uint64_t CSSymbolOwnerGetFlags()
{
  return MEMORY[0x24BE287C0]();
}

uint64_t CSSymbolOwnerGetName()
{
  return MEMORY[0x24BE287C8]();
}

uint64_t CSSymbolOwnerGetPath()
{
  return MEMORY[0x24BE287D0]();
}

uint64_t CSSymbolOwnerGetSymbolWithName()
{
  return MEMORY[0x24BE287E8]();
}

uint64_t CSSymbolicatorCreateSignature()
{
  return MEMORY[0x24BE28828]();
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return MEMORY[0x24BE28838]();
}

uint64_t CSSymbolicatorCreateWithMachKernelFlagsAndNotification()
{
  return MEMORY[0x24BE28840]();
}

uint64_t CSSymbolicatorCreateWithSignature()
{
  return MEMORY[0x24BE28860]();
}

uint64_t CSSymbolicatorCreateWithTaskFlagsAndNotification()
{
  return MEMORY[0x24BE28868]();
}

uint64_t CSSymbolicatorForeachSharedCache()
{
  return MEMORY[0x24BE28878]();
}

uint64_t CSSymbolicatorForeachSymbolOwnerAtTime()
{
  return MEMORY[0x24BE28880]();
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime()
{
  return MEMORY[0x24BE28888]();
}

uint64_t CSSymbolicatorForeachSymbolWithNameAtTime()
{
  return MEMORY[0x24BE28890]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPath()
{
  return MEMORY[0x24BE28898]();
}

uint64_t CSSymbolicatorGetAOutSymbolOwner()
{
  return MEMORY[0x24BE288A8]();
}

uint64_t CSSymbolicatorGetFlagsForNListOnlyData()
{
  return MEMORY[0x24BE288B8]();
}

uint64_t CSSymbolicatorGetPid()
{
  return MEMORY[0x24BE288C8]();
}

uint64_t CSSymbolicatorGetSharedCacheUUID()
{
  return MEMORY[0x24BE288D8]();
}

uint64_t CSSymbolicatorGetSymbolOwner()
{
  return MEMORY[0x24BE288E0]();
}

uint64_t CSSymbolicatorGetSymbolOwnerCountAtTime()
{
  return MEMORY[0x24BE288E8]();
}

uint64_t CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime()
{
  return MEMORY[0x24BE288F8]();
}

uint64_t CSSymbolicatorGetSymbolOwnerWithNameAtTime()
{
  return MEMORY[0x24BE28900]();
}

uint64_t CSSymbolicatorSubscribeToTaskMainNotification()
{
  return MEMORY[0x24BE28920]();
}

uint64_t CSTaskIsTranslated()
{
  return MEMORY[0x24BE28928]();
}

uint64_t DTXPrimitiveArrayAppendValues()
{
  return MEMORY[0x24BE2A8F0]();
}

uint64_t DTXPrimitiveArrayCreateWithTypesAndValues()
{
  return MEMORY[0x24BE2A8F8]();
}

uint64_t DTXPrimitiveArrayDestroy()
{
  return MEMORY[0x24BE2A900]();
}

uint64_t DTXPrimitiveArrayGetSerialized()
{
  return MEMORY[0x24BE2A908]();
}

uint64_t DTXPrimitiveArrayReferencingSerialized()
{
  return MEMORY[0x24BE2A910]();
}

uint64_t DTXSpawnSubtask()
{
  return MEMORY[0x24BE2A918]();
}

uint64_t DVTIUCurrentDylibRootPath()
{
  return MEMORY[0x24BE2A990]();
}

uint64_t DVTIUIsAppleInternalOSEnvironment()
{
  return MEMORY[0x24BE2A998]();
}

uint64_t GRCCopyAllCounterSourceGroup()
{
  return MEMORY[0x24BE38F50]();
}

uint64_t GRCReleaseAllCounterSourceGroup()
{
  return MEMORY[0x24BE38F58]();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7F08](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x24BDD81D8]();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x24BDD8368]();
}

uint64_t IOHIDEventSystemClientDispatchEvent()
{
  return MEMORY[0x24BDD8378]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x24BDD8668](*(_QWORD *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x24BDD88A8](*(_QWORD *)&entry, properties, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x24BDD88D0](*(_QWORD *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x24BDD88E0](*(_QWORD *)&entry, name);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x24BDD8970](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x24BDD8990](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x24BDD89B8](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x24BDD11E8]();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x24BDD1218](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

uint64_t NStatManagerAddAllTCP()
{
  return MEMORY[0x24BE6B758]();
}

uint64_t NStatManagerAddAllUDP()
{
  return MEMORY[0x24BE6B760]();
}

uint64_t NStatManagerCreate()
{
  return MEMORY[0x24BE6B768]();
}

uint64_t NStatManagerDestroy()
{
  return MEMORY[0x24BE6B770]();
}

uint64_t NStatManagerQueryAllSources()
{
  return MEMORY[0x24BE6B778]();
}

uint64_t NStatSourceCopyProperty()
{
  return MEMORY[0x24BE6B790]();
}

uint64_t NStatSourceQueryDescription()
{
  return MEMORY[0x24BE6B798]();
}

uint64_t NStatSourceRemove()
{
  return MEMORY[0x24BE6B7A0]();
}

uint64_t NStatSourceSetCountsBlock()
{
  return MEMORY[0x24BE6B7A8]();
}

uint64_t NStatSourceSetDescriptionBlock()
{
  return MEMORY[0x24BE6B7B0]();
}

uint64_t NStatSourceSetRemovedBlock()
{
  return MEMORY[0x24BE6B7B8]();
}

CFArrayRef SCNetworkInterfaceCopyAll(void)
{
  return (CFArrayRef)MEMORY[0x24BDF5708]();
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  return (CFStringRef)MEMORY[0x24BDF5718](interface);
}

CFStringRef SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef interface)
{
  return (CFStringRef)MEMORY[0x24BDF5738](interface);
}

OSStatus SSLClose(SSLContextRef context)
{
  return MEMORY[0x24BDE8658](context);
}

OSStatus SSLCopyPeerTrust(SSLContextRef context, SecTrustRef *trust)
{
  return MEMORY[0x24BDE8660](context, trust);
}

SSLContextRef SSLCreateContext(CFAllocatorRef alloc, SSLProtocolSide protocolSide, SSLConnectionType connectionType)
{
  return (SSLContextRef)MEMORY[0x24BDE8668](alloc, *(_QWORD *)&protocolSide, *(_QWORD *)&connectionType);
}

OSStatus SSLGetBufferedReadSize(SSLContextRef context, size_t *bufferSize)
{
  return MEMORY[0x24BDE8670](context, bufferSize);
}

OSStatus SSLHandshake(SSLContextRef context)
{
  return MEMORY[0x24BDE86A8](context);
}

OSStatus SSLRead(SSLContextRef context, void *data, size_t dataLength, size_t *processed)
{
  return MEMORY[0x24BDE86E0](context, data, dataLength, processed);
}

OSStatus SSLSetCertificate(SSLContextRef context, CFArrayRef certRefs)
{
  return MEMORY[0x24BDE86E8](context, certRefs);
}

OSStatus SSLSetConnection(SSLContextRef context, SSLConnectionRef connection)
{
  return MEMORY[0x24BDE86F8](context, connection);
}

OSStatus SSLSetEnabledCiphers(SSLContextRef context, const SSLCipherSuite *ciphers, size_t numCiphers)
{
  return MEMORY[0x24BDE8700](context, ciphers, numCiphers);
}

OSStatus SSLSetIOFuncs(SSLContextRef context, SSLReadFunc readFunc, SSLWriteFunc writeFunc)
{
  return MEMORY[0x24BDE8708](context, readFunc, writeFunc);
}

OSStatus SSLSetPeerDomainName(SSLContextRef context, const char *peerName, size_t peerNameLen)
{
  return MEMORY[0x24BDE8718](context, peerName, peerNameLen);
}

OSStatus SSLSetPeerID(SSLContextRef context, const void *peerID, size_t peerIDLen)
{
  return MEMORY[0x24BDE8720](context, peerID, peerIDLen);
}

OSStatus SSLSetProtocolVersionMax(SSLContextRef context, SSLProtocol maxVersion)
{
  return MEMORY[0x24BDE8728](context, *(_QWORD *)&maxVersion);
}

OSStatus SSLSetProtocolVersionMin(SSLContextRef context, SSLProtocol minVersion)
{
  return MEMORY[0x24BDE8730](context, *(_QWORD *)&minVersion);
}

OSStatus SSLSetSessionOption(SSLContextRef context, SSLSessionOption option, Boolean value)
{
  return MEMORY[0x24BDE8748](context, *(_QWORD *)&option, value);
}

OSStatus SSLWrite(SSLContextRef context, const void *data, size_t dataLength, size_t *processed)
{
  return MEMORY[0x24BDE8750](context, data, dataLength, processed);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x24BDE8D60](task, entitlements, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

uint64_t VMURegionTypeDescriptionForTagShareProtAndPager()
{
  return MEMORY[0x24BEB3458]();
}

uint64_t XREngineeringTypeIDForMnemonic()
{
  return MEMORY[0x24BE2A9C8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return MEMORY[0x24BEDB098](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24EB25418(__p);
}

uint64_t operator delete()
{
  return off_24EB25420();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24EB25428(__sz);
}

uint64_t operator new()
{
  return off_24EB25430();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

uint64_t _dyld_process_info_create()
{
  return MEMORY[0x24BDACA98]();
}

uint64_t _dyld_process_info_get_platform()
{
  return MEMORY[0x24BDACAA0]();
}

uint64_t _dyld_process_info_get_state()
{
  return MEMORY[0x24BDACAA8]();
}

uint64_t _dyld_process_info_release()
{
  return MEMORY[0x24BDACAB0]();
}

uint64_t _dyld_shared_cache_real_path()
{
  return MEMORY[0x24BDACAC0]();
}

uint64_t _launch_service_stats_copy_impl()
{
  return MEMORY[0x24BDACAF0]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x24BDACB40]();
}

uint64_t _os_crash()
{
  return MEMORY[0x24BDACB50]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAD030](*(_QWORD *)&a1, a2, a3);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDAD2C8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAD990](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDADA10](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t create_sampling_context_for_task()
{
  return MEMORY[0x24BE28938]();
}

uint64_t csops()
{
  return MEMORY[0x24BDADC00]();
}

uint64_t destroy_sampling_context()
{
  return MEMORY[0x24BE28940]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCF8](queue, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x24BDADD48](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x24BDADD60](buffer, size, queue, destructor);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x24BDADD90](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x24BDADDB0](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
  MEMORY[0x24BDADE00](channel, flags);
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x24BDADE08](type, *(_QWORD *)&fd, queue, cleanup_handler);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  MEMORY[0x24BDADE28](channel, offset, length, queue, io_handler);
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
  MEMORY[0x24BDADE30](channel, low_water);
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  MEMORY[0x24BDADE38](channel, offset, data, queue, io_handler);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED8](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x24BDADF00](queue, key, context, destructor);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x24BDADF78](source);
}

uint64_t dispatch_source_get_extended_data()
{
  return MEMORY[0x24BDADF80]();
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFA0](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFC8](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x24BDADFE0](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x24BDAE008](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

BOOL dlopen_preflight(const char *__path)
{
  return MEMORY[0x24BDAE080](__path);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x24BDAE0B8](*(_QWORD *)&a1);
}

uint64_t dyld_process_create_for_task()
{
  return MEMORY[0x24BDAE110]();
}

uint64_t dyld_process_dispose()
{
  return MEMORY[0x24BDAE118]();
}

uint64_t dyld_process_snapshot_create_for_process()
{
  return MEMORY[0x24BDAE120]();
}

uint64_t dyld_process_snapshot_dispose()
{
  return MEMORY[0x24BDAE128]();
}

uint64_t dyld_process_snapshot_get_shared_cache()
{
  return MEMORY[0x24BDAE138]();
}

uint64_t dyld_shared_cache_get_base_address()
{
  return MEMORY[0x24BDAE168]();
}

uint64_t dyld_shared_cache_get_mapped_size()
{
  return MEMORY[0x24BDAE170]();
}

uint64_t dyld_shared_cache_is_mapped_private()
{
  return MEMORY[0x24BDAE178]();
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void freeaddrinfo(addrinfo *a1)
{
  MEMORY[0x24BDAE458](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x24BDAE468](a1);
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x24BDAE598](*(_QWORD *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x24BDAE5A0](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x24BDAE5F8]();
}

group *__cdecl getgrgid(gid_t a1)
{
  return (group *)MEMORY[0x24BDAE618](*(_QWORD *)&a1);
}

int gethostuuid(uuid_t a1, const timespec *a2)
{
  return MEMORY[0x24BDAE658](a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x24BDAE660](a1);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x24BDAE678](__linep, __linecapp, __stream);
}

int getpagesize(void)
{
  return MEMORY[0x24BDAE6B8]();
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAE6C0](*(_QWORD *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x24BDAE6E8]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x24BDAE710](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x24BDAE720](*(_QWORD *)&a1);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAE770](*(_QWORD *)&a1, a2, a3);
}

kern_return_t host_processor_info(host_t host, processor_flavor_t flavor, natural_t *out_processor_count, processor_info_array_t *out_processor_info, mach_msg_type_number_t *out_processor_infoCnt)
{
  return MEMORY[0x24BDAE808](*(_QWORD *)&host, *(_QWORD *)&flavor, out_processor_count, out_processor_info, out_processor_infoCnt);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x24BDAE8B0](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x24BDAE8C8](*(_QWORD *)&a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x24BDAE978](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

uint64_t kpc_force_all_ctrs_set()
{
  return MEMORY[0x24BECDC70]();
}

uint64_t kpc_set_actionid()
{
  return MEMORY[0x24BECDC88]();
}

uint64_t kpc_set_config()
{
  return MEMORY[0x24BECDC90]();
}

uint64_t kpc_set_counting()
{
  return MEMORY[0x24BECDC98]();
}

uint64_t kpc_set_period()
{
  return MEMORY[0x24BECDCA0]();
}

uint64_t kpdecode_cursor_clearchunk()
{
  return MEMORY[0x24BECDE48]();
}

uint64_t kpdecode_cursor_create()
{
  return MEMORY[0x24BECDE50]();
}

uint64_t kpdecode_cursor_free()
{
  return MEMORY[0x24BECDE58]();
}

uint64_t kpdecode_cursor_next_record()
{
  return MEMORY[0x24BECDE60]();
}

uint64_t kpdecode_cursor_setchunk()
{
  return MEMORY[0x24BECDE68]();
}

uint64_t kpdecode_record_free()
{
  return MEMORY[0x24BECDE70]();
}

uint64_t kpep_config_add_event()
{
  return MEMORY[0x24BECDE78]();
}

uint64_t kpep_config_add_event_trigger()
{
  return MEMORY[0x24BECDE80]();
}

uint64_t kpep_config_create()
{
  return MEMORY[0x24BECDE88]();
}

uint64_t kpep_config_force_counters()
{
  return MEMORY[0x24BECDE90]();
}

uint64_t kpep_config_free()
{
  return MEMORY[0x24BECDE98]();
}

uint64_t kpep_config_kpc()
{
  return MEMORY[0x24BECDEA0]();
}

uint64_t kpep_config_kpc_classes()
{
  return MEMORY[0x24BECDEA8]();
}

uint64_t kpep_config_kpc_map()
{
  return MEMORY[0x24BECDEB0]();
}

uint64_t kpep_config_kpc_periods()
{
  return MEMORY[0x24BECDEB8]();
}

uint64_t kpep_config_remove_event()
{
  return MEMORY[0x24BECDEC0]();
}

uint64_t kpep_db_counters_count()
{
  return MEMORY[0x24BECDEC8]();
}

uint64_t kpep_db_create()
{
  return MEMORY[0x24BECDED0]();
}

uint64_t kpep_db_deserialize()
{
  return MEMORY[0x24BECDED8]();
}

uint64_t kpep_db_event()
{
  return MEMORY[0x24BECDEE0]();
}

uint64_t kpep_db_events()
{
  return MEMORY[0x24BECDEE8]();
}

uint64_t kpep_db_events_count()
{
  return MEMORY[0x24BECDEF0]();
}

uint64_t kpep_db_free()
{
  return MEMORY[0x24BECDEF8]();
}

uint64_t kpep_db_name()
{
  return MEMORY[0x24BECDF00]();
}

uint64_t kpep_db_serialize()
{
  return MEMORY[0x24BECDF08]();
}

uint64_t kpep_event_alias()
{
  return MEMORY[0x24BECDF10]();
}

uint64_t kpep_event_description()
{
  return MEMORY[0x24BECDF18]();
}

uint64_t kpep_event_name()
{
  return MEMORY[0x24BECDF20]();
}

uint64_t kpep_strerror()
{
  return MEMORY[0x24BECDF28]();
}

uint64_t kperf_action_count_set()
{
  return MEMORY[0x24BECDCB0]();
}

uint64_t kperf_action_filter_set_by_pid()
{
  return MEMORY[0x24BECDCB8]();
}

uint64_t kperf_action_samplers_set()
{
  return MEMORY[0x24BECDCC8]();
}

uint64_t kperf_action_ucallstack_depth_set()
{
  return MEMORY[0x24BECDCD0]();
}

uint64_t kperf_action_userdata_set()
{
  return MEMORY[0x24BECDCD8]();
}

uint64_t kperf_bless_allow_preemption()
{
  return MEMORY[0x24BECDCE0]();
}

uint64_t kperf_bless_get()
{
  return MEMORY[0x24BECDCE8]();
}

uint64_t kperf_bless_set()
{
  return MEMORY[0x24BECDCF0]();
}

uint64_t kperf_buffer_create_live()
{
  return MEMORY[0x24BECDCF8]();
}

uint64_t kperf_buffer_free()
{
  return MEMORY[0x24BECDD00]();
}

uint64_t kperf_buffer_getbuf()
{
  return MEMORY[0x24BECDD08]();
}

uint64_t kperf_buffer_readdata_withmore()
{
  return MEMORY[0x24BECDD10]();
}

uint64_t kperf_buffer_returnbuf()
{
  return MEMORY[0x24BECDD18]();
}

uint64_t kperf_buffer_set_config()
{
  return MEMORY[0x24BECDD20]();
}

uint64_t kperf_buffer_wait()
{
  return MEMORY[0x24BECDD28]();
}

uint64_t kperf_kdbg_cswitch_set()
{
  return MEMORY[0x24BECDD30]();
}

uint64_t kperf_kdebug_action_set()
{
  return MEMORY[0x24BECDD40]();
}

uint64_t kperf_kdebug_filter_add_class()
{
  return MEMORY[0x24BECDD48]();
}

uint64_t kperf_kdebug_filter_add_class_subclass()
{
  return MEMORY[0x24BECDD50]();
}

uint64_t kperf_kdebug_filter_add_class_subclass_fn()
{
  return MEMORY[0x24BECDD58]();
}

uint64_t kperf_kdebug_filter_add_debugid()
{
  return MEMORY[0x24BECDD60]();
}

uint64_t kperf_kdebug_filter_create()
{
  return MEMORY[0x24BECDD68]();
}

uint64_t kperf_kdebug_filter_destroy()
{
  return MEMORY[0x24BECDD70]();
}

uint64_t kperf_kdebug_filter_get_filter()
{
  return MEMORY[0x24BECDD80]();
}

uint64_t kperf_kdebug_filter_get_n_filters()
{
  return MEMORY[0x24BECDD88]();
}

uint64_t kperf_kdebug_filter_set()
{
  return MEMORY[0x24BECDD90]();
}

uint64_t kperf_logging_flush()
{
  return MEMORY[0x24BECDD98]();
}

uint64_t kperf_logging_query_size()
{
  return MEMORY[0x24BECDDA0]();
}

uint64_t kperf_logging_set_kdebug()
{
  return MEMORY[0x24BECDDA8]();
}

uint64_t kperf_logging_set_size()
{
  return MEMORY[0x24BECDDB0]();
}

uint64_t kperf_logging_set_typefilter()
{
  return MEMORY[0x24BECDDB8]();
}

uint64_t kperf_logging_set_wrap()
{
  return MEMORY[0x24BECDDC0]();
}

uint64_t kperf_logging_start()
{
  return MEMORY[0x24BECDDC8]();
}

uint64_t kperf_logging_stop()
{
  return MEMORY[0x24BECDDD0]();
}

uint64_t kperf_ns_to_ticks()
{
  return MEMORY[0x24BECDDD8]();
}

uint64_t kperf_reset()
{
  return MEMORY[0x24BECDDE0]();
}

uint64_t kperf_sample_off()
{
  return MEMORY[0x24BECDDF0]();
}

uint64_t kperf_sample_on()
{
  return MEMORY[0x24BECDDF8]();
}

uint64_t kperf_timer_action_set()
{
  return MEMORY[0x24BECDE08]();
}

uint64_t kperf_timer_count_set()
{
  return MEMORY[0x24BECDE18]();
}

uint64_t kperf_timer_period_set()
{
  return MEMORY[0x24BECDE20]();
}

uint64_t kperf_timer_pet_set()
{
  return MEMORY[0x24BECDE28]();
}

uint64_t kperf_typefilter_enable_class()
{
  return MEMORY[0x24BECDE30]();
}

uint64_t kperf_typefilter_enable_subclass()
{
  return MEMORY[0x24BECDE38]();
}

uint64_t kperf_typefilter_invert()
{
  return MEMORY[0x24BECDE40]();
}

uint64_t ktrace_end()
{
  return MEMORY[0x24BECDF80]();
}

uint64_t ktrace_events_all()
{
  return MEMORY[0x24BECDF88]();
}

uint64_t ktrace_events_filter_bitmap()
{
  return MEMORY[0x24BECDF90]();
}

uint64_t ktrace_file_close()
{
  return MEMORY[0x24BECDFB8]();
}

uint64_t ktrace_file_earliest_timestamp()
{
  return MEMORY[0x24BECDFC8]();
}

uint64_t ktrace_file_open_fd()
{
  return MEMORY[0x24BECDFE0]();
}

uint64_t ktrace_session_create()
{
  return MEMORY[0x24BECDFE8]();
}

uint64_t ktrace_session_destroy()
{
  return MEMORY[0x24BECDFF0]();
}

uint64_t ktrace_session_provide()
{
  return MEMORY[0x24BECDFF8]();
}

uint64_t ktrace_session_set_default_event_names_enabled()
{
  return MEMORY[0x24BECE000]();
}

uint64_t ktrace_session_set_event_names_enabled()
{
  return MEMORY[0x24BECE008]();
}

uint64_t ktrace_set_collection_interval()
{
  return MEMORY[0x24BECE010]();
}

uint64_t ktrace_set_completion_handler()
{
  return MEMORY[0x24BECE018]();
}

uint64_t ktrace_set_only_do_time_sensitive_postprocess()
{
  return MEMORY[0x24BECE028]();
}

uint64_t ktrace_set_use_existing()
{
  return MEMORY[0x24BECE030]();
}

uint64_t ktrace_start_writing_fd()
{
  return MEMORY[0x24BECE040]();
}

uint64_t launch_service_stats_disable()
{
  return MEMORY[0x24BDAEA08]();
}

uint64_t launch_service_stats_enable()
{
  return MEMORY[0x24BDAEA10]();
}

int lchown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x24BDAEA28](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int listen(int a1, int a2)
{
  return MEMORY[0x24BDAEA78](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x24BDAEB58](*(_QWORD *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x24BDAEB60]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x24BDAEB68]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x24BDAEB80](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x24BDAEB90](a1);
}

mach_msg_return_t mach_msg_send(mach_msg_header_t *a1)
{
  return MEMORY[0x24BDAEB98](a1);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x24BDAEBA0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x24BDAEBB0](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_extract_right(ipc_space_t task, mach_port_name_t name, mach_msg_type_name_t msgt_name, mach_port_t *poly, mach_msg_type_name_t *polyPoly)
{
  return MEMORY[0x24BDAEBC8](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&msgt_name, poly, polyPoly);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x24BDAEBE8](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x24BDAEBF8](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

BOOLean_t mach_task_is_self(task_name_t task)
{
  return MEMORY[0x24BDAEC50](*(_QWORD *)&task);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x24BDAEC78](*(_QWORD *)&target, address, size);
}

kern_return_t mach_vm_page_range_query(vm_map_read_t target_map, mach_vm_offset_t address, mach_vm_size_t size, mach_vm_address_t dispositions, mach_vm_size_t *dispositions_count)
{
  return MEMORY[0x24BDAEC90](*(_QWORD *)&target_map, address, size, dispositions, dispositions_count);
}

kern_return_t mach_vm_region_recurse(vm_map_read_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt)
{
  return MEMORY[0x24BDAECB0](*(_QWORD *)&target_task, address, size, nesting_depth, info, infoCnt);
}

kern_return_t mach_vm_remap(vm_map_t target_task, mach_vm_address_t *target_address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, vm_map_t src_task, mach_vm_address_t src_address, BOOLean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x24BDAECB8](*(_QWORD *)&target_task, target_address, size, mask, *(_QWORD *)&flags, *(_QWORD *)&src_task, src_address, *(_QWORD *)&copy);
}

int macho_for_each_slice(const char *path, void *callback)
{
  return MEMORY[0x24BDAECF8](path, callback);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x24BDAEEA0]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x24BDAEF38](a1);
}

int mkfifo(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF48](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x24BDAEF80](a1, *(_QWORD *)&a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

uint64_t msl_payload_get_uniquing_table_index()
{
  return MEMORY[0x24BE63728]();
}

uint64_t msl_set_mode_for_pid()
{
  return MEMORY[0x24BE63730]();
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x24BDAF010](__rqtp, __rmtp);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x24BDAF168](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x24BDAF170](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x24BDAF198](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x24BEDD070]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x24BEDD0F8](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3E0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

void objc_terminate(void)
{
  MEMORY[0x24BEDD450]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x24BDAF438]();
}

void perror(const char *a1)
{
  MEMORY[0x24BDAF5A8](a1);
}

kern_return_t pid_for_task(mach_port_name_t t, int *x)
{
  return MEMORY[0x24BDAF5B0](*(_QWORD *)&t, x);
}

int pipe(int a1[2])
{
  return MEMORY[0x24BDAF5D0](a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x24BDAF5D8](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x24BDAF600](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_addchdir_np(posix_spawn_file_actions_t *a1, const char *a2)
{
  return MEMORY[0x24BDAF608](a1, a2);
}

int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *a1, int a2)
{
  return MEMORY[0x24BDAF610](a1, *(_QWORD *)&a2);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x24BDAF618](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x24BDAF630](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x24BDAF638](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x24BDAF640](a1);
}

int posix_spawnattr_getflags(const posix_spawnattr_t *a1, __int16 *a2)
{
  return MEMORY[0x24BDAF648](a1, a2);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x24BDAF650](a1);
}

int posix_spawnattr_setbinpref_np(posix_spawnattr_t *a1, size_t a2, cpu_type_t *a3, size_t *a4)
{
  return MEMORY[0x24BDAF658](a1, a2, a3, a4);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x24BDAF660](a1, a2);
}

int posix_spawnattr_setpgroup(posix_spawnattr_t *a1, pid_t a2)
{
  return MEMORY[0x24BDAF668](a1, *(_QWORD *)&a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int proc_get_dirty(pid_t pid, uint32_t *flags)
{
  return MEMORY[0x24BDAF6C0](*(_QWORD *)&pid, flags);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x24BDAF6F8](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x24BDAF708](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int proc_regionfilename(int pid, uint64_t address, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x24BDAF718](*(_QWORD *)&pid, address, buffer, *(_QWORD *)&buffersize);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x24BDAFAE0](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int rmdir(const char *a1)
{
  return MEMORY[0x24BDAFBB0](a1);
}

uint64_t sample_remote_thread()
{
  return MEMORY[0x24BE28950]();
}

uint64_t sampling_context_clear_cache()
{
  return MEMORY[0x24BE28958]();
}

uint64_t sandbox_check()
{
  return MEMORY[0x24BDAFBD8]();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x24BDAFC10]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x24BEDD500](sel);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x24BDAFD78](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int shm_unlink(const char *a1)
{
  return MEMORY[0x24BDAFDA8](a1);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x24BDAFE38](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x24BDAFE50](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return MEMORY[0x24BDAFE58](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BDAFED0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x24BDB0018](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x24BDB00F8](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x24BDB0108](a1, a2, a3);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

uint64_t sysmon_request_add_attribute()
{
  return MEMORY[0x24BEDE3B0]();
}

uint64_t sysmon_request_cancel()
{
  return MEMORY[0x24BEDE3B8]();
}

uint64_t sysmon_request_create()
{
  return MEMORY[0x24BEDE3C0]();
}

uint64_t sysmon_request_execute()
{
  return MEMORY[0x24BEDE3C8]();
}

uint64_t sysmon_request_set_interval()
{
  return MEMORY[0x24BEDE3D0]();
}

uint64_t sysmon_row_get_value()
{
  return MEMORY[0x24BEDE3D8]();
}

uint64_t sysmon_table_apply()
{
  return MEMORY[0x24BEDE3E0]();
}

kern_return_t task_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *t)
{
  return MEMORY[0x24BDB0160](*(_QWORD *)&target_tport, *(_QWORD *)&pid, t);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_resume(task_read_t target_task)
{
  return MEMORY[0x24BDB01A0](*(_QWORD *)&target_task);
}

kern_return_t task_resume2(task_suspension_token_t suspend_token)
{
  return MEMORY[0x24BDB01A8](*(_QWORD *)&suspend_token);
}

kern_return_t task_suspend(task_read_t target_task)
{
  return MEMORY[0x24BDB01B8](*(_QWORD *)&target_task);
}

kern_return_t task_suspend2(task_read_t target_task, task_suspension_token_t *suspend_token)
{
  return MEMORY[0x24BDB01C0](*(_QWORD *)&target_task, suspend_token);
}

kern_return_t task_threads(task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x24BDB01C8](*(_QWORD *)&target_task, act_list, act_listCnt);
}

kern_return_t thread_get_state(thread_read_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  return MEMORY[0x24BDB0208](*(_QWORD *)&target_act, *(_QWORD *)&flavor, old_state, old_stateCnt);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x24BDB0210](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_resume(thread_read_t target_act)
{
  return MEMORY[0x24BDB0228](*(_QWORD *)&target_act);
}

kern_return_t thread_suspend(thread_read_t target_act)
{
  return MEMORY[0x24BDB0238](*(_QWORD *)&target_act);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x24BDB0390](*(_QWORD *)&target_task, address, size);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x24BDB0478](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x24BDB0638](xarray, applier);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x24BDB06E0](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x24BDB0718](connection);
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x24BDB0728]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x24BDB0730](name, targetq);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x24BDB0740](name, targetq, flags);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return MEMORY[0x24BDB0770](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x24BDB0788](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x24BDB0798](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x24BDB07A8](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x24BDB07B0](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x24BDB07B8](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x24BDB07C8](connection, handler);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x24BDB0868](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x24BDB0870](ddata);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x24BDB0880](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x24BDB0888](xdata);
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return MEMORY[0x24BDB08A0](xdate);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x24BDB08B0](xdict, applier);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return MEMORY[0x24BDB08B8]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x24BDB08D8](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB08E0](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x24BDB0918](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0938](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x24BDB0948](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x24BDB0950](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x24BDB0968](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x24BDB0978](xdict, key, value);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x24BDB0988](xdict, key, bytes, length);
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
  MEMORY[0x24BDB09A0](xdict, key, *(_QWORD *)&fd);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x24BDB09A8](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x24BDB09C8](xdict, key, string);
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
  MEMORY[0x24BDB09D8](xdict, key, uuid);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  double result;

  MEMORY[0x24BDB09F0](xdouble);
  return result;
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x24BDB0A88](xint);
}

uint64_t xpc_service_create()
{
  return MEMORY[0x24BDB0AF0]();
}

uint64_t xpc_service_create_from_specifier()
{
  return MEMORY[0x24BDB0AF8]();
}

uint64_t xpc_service_instance_dup2()
{
  return MEMORY[0x24BDB0B00]();
}

uint64_t xpc_service_instance_get_pid()
{
  return MEMORY[0x24BDB0B08]();
}

uint64_t xpc_service_instance_is_configurable()
{
  return MEMORY[0x24BDB0B10]();
}

uint64_t xpc_service_instance_run()
{
  return MEMORY[0x24BDB0B18]();
}

uint64_t xpc_service_instance_set_environment()
{
  return MEMORY[0x24BDB0B20]();
}

uint64_t xpc_service_instance_set_jetsam_properties()
{
  return MEMORY[0x24BDB0B28]();
}

uint64_t xpc_service_instance_set_path()
{
  return MEMORY[0x24BDB0B30]();
}

uint64_t xpc_service_instance_set_start_suspended()
{
  return MEMORY[0x24BDB0B38]();
}

uint64_t xpc_service_kickstart_with_flags()
{
  return MEMORY[0x24BDB0B40]();
}

uint64_t xpc_service_set_attach_handler()
{
  return MEMORY[0x24BDB0B48]();
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x24BDB0B60](region, length);
}

uint64_t xpc_strerror()
{
  return MEMORY[0x24BDB0B78]();
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x24BDB0BA8](xstring);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x24BDB0BE0](xuint);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x24BDB0C00](xuuid);
}

