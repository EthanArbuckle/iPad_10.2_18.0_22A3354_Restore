id AXSettingsReturnObjectValueWithClass(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a2;
  v6 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectValueForPreferenceKey:ofClass:defaultValue:", v6, a3, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_18C62E60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void _XSimpleSendData(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(_BYTE *)(a1 + 51) == 1
      && (v4 = *(_DWORD *)(a1 + 52), v4 == *(_DWORD *)(a1 + 64)))
    {
      if (!*(_DWORD *)(a1 + 68))
      {
        v5 = *(_DWORD *)(a1 + 72);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          v7 = *(unsigned int *)(a1 + 12);
          v8 = *(unsigned int *)(a1 + 28);
          v9 = *(_QWORD *)(a1 + 40);
          v10 = *(_QWORD *)(a1 + 80);
          v11 = *(_OWORD *)(a1 + 104);
          v12[0] = *(_OWORD *)(a1 + 88);
          v12[1] = v11;
          *(_DWORD *)(a2 + 32) = __AXXIPCSimpleSendData(v7, v8, v9, v4, v10, v12);
          mig_deallocate(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52));
          *(_QWORD *)(a1 + 40) = 0;
          *(_DWORD *)(a1 + 52) = 0;
          return;
        }
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t __AXXIPCSimpleSendData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _OWORD *a6)
{
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  NSObject *v14;
  uint8_t buf[16];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a3, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  AXIPCServerGetServer(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = a6[1];
    *(_OWORD *)buf = *a6;
    v17 = v13;
    objc_msgSend(v11, "_handleIncomingMessage:securityToken:auditToken:clientPort:completion:", v10, a5, buf, a2, 0);
    if ((_DWORD)a2)
    {
      if (mach_port_deallocate(*MEMORY[0x1E0C83DA0], a2))
        _AXAssert();
      a2 = 0;
    }
  }
  else
  {
    AXLogIPC();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a1;
      _os_log_impl(&dword_18C62B000, v14, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }

    a2 = 5;
  }

  return a2;
}

id AXIPCServerGetServer(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)ServerPortLock, "lock");
  objc_msgSend((id)ServerPortMapping, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)ServerPortLock, "unlock");

  return v2;
}

BOOL AXIncrefSendRight(mach_port_name_t name)
{
  ipc_space_t *v2;
  kern_return_t v3;

  v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v3 = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], name, 0, 1);
  if (v3 == 17)
    mach_port_mod_refs(*v2, name, 4u, 1);
  return v3 == 0;
}

uint64_t AXSettingsReturnBoolValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValueForPreferenceKey:defaultValue:", v3, a2);

  return v5;
}

void sub_18C6301B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _AXIPCSimpleSendData(int a1, int a2, mach_msg_timeout_t timeout, uint64_t a4, int a5)
{
  uint64_t v6;
  _BYTE msg[36];
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  memset(&msg[4], 0, 32);
  *(_DWORD *)&msg[28] = a2;
  v9 = 1245184;
  v10 = a4;
  v11 = 16777472;
  v12 = a5;
  v13 = *MEMORY[0x1E0C804E8];
  v14 = a5;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(_QWORD *)&msg[20] = 0x2000D5AD3;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v6 = mach_msg((mach_msg_header_t *)msg, 17, 0x44u, 0, 0, timeout, 0);
  if ((v6 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v6;
}

void sub_18C630A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _AXDurationStringForDuration(char a1, double a2)
{
  id v4;
  void *v5;
  _QWORD v7[5];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__8;
  v13 = __Block_byref_object_dispose__8;
  v14 = 0;
  if (_AXCachedDateComponentsFormatter_onceToken != -1)
    dispatch_once(&_AXCachedDateComponentsFormatter_onceToken, &__block_literal_global_43);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___AXCachedDateComponentsFormatter_block_invoke_2;
  v7[3] = &unk_1E24C7520;
  v7[4] = &v9;
  v8 = a1;
  dispatch_sync((dispatch_queue_t)_AXCachedDateComponentsFormatter_AXDateComponentsFormatterQueue, v7);
  v4 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "stringFromTimeInterval:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void InitializeMaps()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  void *v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  void *v410;
  void *v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  void *v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  void *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  void *v431;
  void *v432;
  void *v433;
  void *v434;
  void *v435;
  void *v436;
  void *v437;
  void *v438;
  void *v439;
  void *v440;
  void *v441;
  void *v442;
  void *v443;
  void *v444;
  void *v445;
  void *v446;
  void *v447;
  void *v448;
  void *v449;
  void *v450;
  void *v451;
  void *v452;
  void *v453;
  void *v454;
  void *v455;
  void *v456;
  void *v457;
  void *v458;
  void *v459;
  void *v460;
  void *v461;
  void *v462;
  void *v463;
  void *v464;
  void *v465;
  void *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  _QWORD v471[467];
  _QWORD v472[467];
  _QWORD v473[509];
  _QWORD v474[511];

  MEMORY[0x1E0C80A78]();
  v474[509] = *MEMORY[0x1E0C80C00];
  v473[0] = CFSTR("LaserZoomPanningStyle");
  v473[1] = CFSTR("AssistiveTouchAlwaysShowMenu");
  v474[0] = &unk_1E24F7FB8;
  v474[1] = &unk_1E24F7FD0;
  v473[2] = CFSTR("AssistiveTouchOpenMenuSwaggle");
  v473[3] = CFSTR("AssistiveTouchMouseBehavesLikeFinger");
  v474[2] = &unk_1E24F7FD0;
  v474[3] = &unk_1E24F7FD0;
  v473[4] = CFSTR("AssistiveTouchMouseKeys");
  v473[5] = CFSTR("AssistiveTouchMouseKeysOptionToggle");
  v474[4] = &unk_1E24F7FB8;
  v474[5] = &unk_1E24F7FD0;
  v473[6] = CFSTR("AssistiveTouchMouseKeysUseMainKeyboardKeys");
  v473[7] = CFSTR("AssistiveTouchMouseKeysDelay");
  v474[6] = &unk_1E24F7FD0;
  v474[7] = &unk_1E24F7FD0;
  v473[8] = CFSTR("AssistiveTouchMouseAlwaysShowSoftwareKeyboard");
  v473[9] = CFSTR("AssistiveTouchMouseAllowAppleBluetoothDevicesPairing");
  v474[8] = &unk_1E24F7FD0;
  v474[9] = &unk_1E24F7FD0;
  v473[10] = CFSTR("AssistiveTouchMouseKeysMaxSpeed");
  v473[11] = CFSTR("AssistiveTouchVirtualTrackpadEnabled");
  v474[10] = &unk_1E24F7FD0;
  v474[11] = &unk_1E24F7FD0;
  v473[12] = CFSTR("AssistiveTouchVirtualTrackpadScrollToggle");
  v473[36] = CFSTR("AssistiveTouchScannerSelectTimeoutEnabled");
  v473[39] = kAXSAssistiveTouchScannerSpeechRatePreference;
  v473[55] = CFSTR("AssistiveTouchPointPickerDefaultsToRescanPreference");
  v473[84] = CFSTR("AXSAssistiveTouchMouseDwellControlMutatedMenuPreference");
  v474[118] = &unk_1E24F7FE8;
  v474[119] = &unk_1E24F7FE8;
  v474[120] = &unk_1E24F7FE8;
  v474[121] = &unk_1E24F7FE8;
  v474[122] = &unk_1E24F7FE8;
  v474[123] = &unk_1E24F7FE8;
  v474[124] = &unk_1E24F7FE8;
  v474[125] = &unk_1E24F7FE8;
  v474[126] = &unk_1E24F7FE8;
  v474[127] = &unk_1E24F7FE8;
  v474[128] = &unk_1E24F7FE8;
  v474[129] = &unk_1E24F7FE8;
  v474[130] = &unk_1E24F7FE8;
  v474[131] = &unk_1E24F7FE8;
  v474[132] = &unk_1E24F7FE8;
  v474[133] = &unk_1E24F7FE8;
  v474[134] = &unk_1E24F7FE8;
  v474[135] = &unk_1E24F7FE8;
  v474[136] = &unk_1E24F7FE8;
  v474[137] = &unk_1E24F7FE8;
  v474[138] = &unk_1E24F7FE8;
  v473[139] = CFSTR("SCSwitchControlPointPickerHighPrecisionEnabled");
  v474[139] = &unk_1E24F7FE8;
  v474[140] = &unk_1E24F7FE8;
  v474[141] = &unk_1E24F7FE8;
  v474[142] = &unk_1E24F7FE8;
  v474[143] = &unk_1E24F7FE8;
  v474[144] = &unk_1E24F7FE8;
  v474[145] = &unk_1E24F7FE8;
  v474[146] = &unk_1E24F7FE8;
  v474[147] = &unk_1E24F7FE8;
  v474[148] = &unk_1E24F7FE8;
  v474[149] = &unk_1E24F7FE8;
  v474[155] = &unk_1E24F8000;
  v474[156] = &unk_1E24F8000;
  v474[160] = &unk_1E24F8018;
  v474[161] = &unk_1E24F8018;
  v474[162] = &unk_1E24F8018;
  v474[163] = &unk_1E24F8018;
  v474[164] = &unk_1E24F8018;
  v474[165] = &unk_1E24F8018;
  v474[166] = &unk_1E24F8018;
  v474[167] = &unk_1E24F8018;
  v474[168] = &unk_1E24F8018;
  v474[169] = &unk_1E24F8018;
  v474[170] = &unk_1E24F8018;
  v474[171] = &unk_1E24F8018;
  v474[172] = &unk_1E24F8018;
  v474[173] = &unk_1E24F8018;
  v474[174] = &unk_1E24F8018;
  v474[175] = &unk_1E24F8018;
  v474[176] = &unk_1E24F8018;
  v474[177] = &unk_1E24F8018;
  v474[178] = &unk_1E24F8018;
  v474[179] = &unk_1E24F8018;
  v474[180] = &unk_1E24F8018;
  v474[181] = &unk_1E24F8018;
  v474[182] = &unk_1E24F8018;
  v474[183] = &unk_1E24F8018;
  v474[184] = &unk_1E24F8018;
  v474[185] = &unk_1E24F8018;
  v474[186] = &unk_1E24F8018;
  v474[187] = &unk_1E24F8018;
  v474[188] = &unk_1E24F8018;
  v474[189] = &unk_1E24F8018;
  v474[190] = &unk_1E24F8018;
  v474[191] = &unk_1E24F8018;
  v474[192] = &unk_1E24F8018;
  v474[193] = &unk_1E24F8018;
  v474[194] = &unk_1E24F8018;
  v474[195] = &unk_1E24F8018;
  v474[196] = &unk_1E24F8018;
  v474[197] = &unk_1E24F8018;
  v474[198] = &unk_1E24F8018;
  v474[199] = &unk_1E24F8018;
  v474[200] = &unk_1E24F8018;
  v474[201] = &unk_1E24F8030;
  v474[202] = &unk_1E24F8030;
  v474[203] = &unk_1E24F8030;
  v474[204] = &unk_1E24F8030;
  v474[205] = &unk_1E24F8030;
  v474[206] = &unk_1E24F8030;
  v474[207] = &unk_1E24F8030;
  v474[208] = &unk_1E24F8030;
  v474[209] = &unk_1E24F8030;
  v474[210] = &unk_1E24F8030;
  v474[211] = &unk_1E24F8030;
  v474[212] = &unk_1E24F8030;
  v474[213] = &unk_1E24F8030;
  v474[214] = &unk_1E24F8030;
  v474[215] = &unk_1E24F8030;
  v474[216] = &unk_1E24F8030;
  v474[217] = &unk_1E24F8030;
  v474[218] = &unk_1E24F8030;
  v474[219] = &unk_1E24F8030;
  v474[220] = &unk_1E24F8030;
  v474[221] = &unk_1E24F8030;
  v474[222] = &unk_1E24F8030;
  v474[245] = &unk_1E24F8048;
  v474[246] = &unk_1E24F8048;
  v474[247] = &unk_1E24F8048;
  v474[248] = &unk_1E24F8048;
  v474[249] = &unk_1E24F8048;
  v474[250] = &unk_1E24F8048;
  v474[251] = &unk_1E24F8048;
  v474[252] = &unk_1E24F8048;
  v474[253] = &unk_1E24F8048;
  v474[254] = &unk_1E24F8048;
  v474[255] = &unk_1E24F8048;
  v473[257] = CFSTR("SpeechCustomVoiceSettings");
  v473[260] = kAXSVoiceOverDelayUntilSpeakUnderTouch;
  v474[260] = &unk_1E24F8060;
  v474[261] = &unk_1E24F8048;
  v474[262] = &unk_1E24F8048;
  v474[263] = &unk_1E24F8048;
  v474[264] = &unk_1E24F8048;
  v474[265] = &unk_1E24F8048;
  v473[269] = *MEMORY[0x1E0DDE320];
  v474[270] = &unk_1E24F8060;
  v474[271] = &unk_1E24F8060;
  v474[272] = &unk_1E24F8060;
  v474[273] = &unk_1E24F8060;
  v474[274] = &unk_1E24F8060;
  v474[275] = &unk_1E24F8060;
  v474[276] = &unk_1E24F8060;
  v474[277] = &unk_1E24F8060;
  v473[278] = kAXSVoiceOverPitchPreference;
  v474[279] = &unk_1E24F8060;
  v474[280] = &unk_1E24F8060;
  v474[281] = &unk_1E24F8060;
  v474[282] = &unk_1E24F8060;
  v474[283] = &unk_1E24F8060;
  v474[284] = &unk_1E24F8060;
  v474[285] = &unk_1E24F8060;
  v474[286] = &unk_1E24F8060;
  v474[287] = &unk_1E24F8060;
  v474[288] = &unk_1E24F8060;
  v474[289] = &unk_1E24F8060;
  v474[290] = &unk_1E24F8060;
  v474[291] = &unk_1E24F8060;
  v474[293] = &unk_1E24F8060;
  v474[294] = &unk_1E24F8060;
  v474[295] = &unk_1E24F8060;
  v474[296] = &unk_1E24F8060;
  v474[297] = &unk_1E24F8060;
  v474[298] = &unk_1E24F8060;
  v474[299] = &unk_1E24F8060;
  v473[300] = CFSTR("VoiceOverSpeakNonfocusableElementsAfterDelay");
  v474[300] = &unk_1E24F8060;
  v473[301] = CFSTR("VoiceOverSilenceAnnouncements");
  v474[301] = &unk_1E24F8060;
  v473[302] = CFSTR("VoiceOverTouchTVInteractionMode");
  v473[309] = CFSTR("AXSVoiceOverTouchSingleLetterQuickNavPreference");
  v473[341] = kAXSVoiceOverDoubleTapInterval;
  v474[364] = &unk_1E24F8078;
  v474[389] = &unk_1E24F8018;
  v474[390] = &unk_1E24F8018;
  v474[393] = &unk_1E24F8090;
  v474[394] = &unk_1E24F8090;
  v474[395] = &unk_1E24F8090;
  v474[396] = &unk_1E24F8090;
  v473[397] = CFSTR("GizmoApplicationAccessibilityEnabled");
  v473[398] = CFSTR("GizmoAutoSpeakComplicationsPreference");
  v473[403] = CFSTR("AXSUltronRunningStatus");
  v474[403] = &unk_1E24F80A8;
  v473[404] = CFSTR("AXSUltronEnabled");
  v474[404] = &unk_1E24F80A8;
  v473[405] = CFSTR("AXSEnabledSoundDetectionState");
  v474[405] = &unk_1E24F80A8;
  v473[406] = CFSTR("AXSEnabledSoundDetectionTypes");
  v474[406] = &unk_1E24F80A8;
  v473[407] = CFSTR("AXSSoundDetectionSnoozeDictionary");
  v474[407] = &unk_1E24F80A8;
  v473[408] = CFSTR("AXSSoundDetectionSupportedTypes");
  v474[408] = &unk_1E24F80A8;
  v473[409] = CFSTR("AXSSoundDetectionMedinaSupportForced");
  v474[409] = &unk_1E24F80A8;
  v473[418] = kAXSCustomPronunciationSubstitutionsPreference;
  v474[428] = &unk_1E24F80C0;
  v474[429] = &unk_1E24F80C0;
  v474[430] = &unk_1E24F80C0;
  v474[431] = &unk_1E24F80C0;
  v474[432] = &unk_1E24F80C0;
  v474[433] = &unk_1E24F80C0;
  v474[434] = &unk_1E24F80C0;
  v474[435] = &unk_1E24F80C0;
  v474[436] = &unk_1E24F80C0;
  v474[437] = &unk_1E24F80C0;
  v474[438] = &unk_1E24F80C0;
  v474[439] = &unk_1E24F80C0;
  v474[440] = &unk_1E24F80C0;
  v474[444] = &unk_1E24F80D8;
  v474[445] = &unk_1E24F80D8;
  v474[446] = &unk_1E24F80D8;
  v474[447] = &unk_1E24F80D8;
  v474[448] = &unk_1E24F80D8;
  v473[467] = CFSTR("voiceOverBSIUsageCount");
  v473[468] = CFSTR("brokenHomeButtonCount");
  v473[469] = CFSTR("guidedAccessUsageCount");
  v473[470] = CFSTR("magnifierUsageCount");
  v473[471] = CFSTR("guidedAccessTimeLimitsUsageCount");
  v473[472] = CFSTR("assistiveTouchUsageCount");
  v473[473] = CFSTR("tapticTimeUsageCount");
  v473[474] = CFSTR("characterVoicesUsageCount");
  v473[475] = CFSTR("hearingAidControlPanelCount");
  v473[476] = CFSTR("hearingAidHandOffCount");
  v473[477] = CFSTR("switchControlPlatformSwitchedCount");
  v473[478] = CFSTR("lastAssistiveTouchTimeResetCount");
  v473[479] = CFSTR("lastPlatformSwitchTimeResetCount");
  v473[480] = CFSTR("lastMagnifierResetCount");
  v473[481] = CFSTR("lastHearingAidHandoffTimeResetCount");
  v473[482] = CFSTR("lastHearingAidControlPanelTimeResetCount");
  v473[483] = CFSTR("lastTapticTimeResetCount");
  v473[484] = CFSTR("lastBrailleScreenInputTimeResetCount");
  v473[485] = CFSTR("lastGuidedAccessTimeLimitResetCount");
  v473[486] = CFSTR("lastGuidedAccessTimeResetCount");
  v473[487] = CFSTR("lastCharacterVoiceTimeResetCount");
  v474[377] = &unk_1E24F8060;
  v473[488] = CFSTR("AXSLastSmartInvertColorsEnablement");
  v473[379] = CFSTR("AXSImageCaptioningDisabledApps");
  v474[467] = &unk_1E24F8000;
  v474[468] = &unk_1E24F8000;
  v474[469] = &unk_1E24F8000;
  v474[470] = &unk_1E24F8000;
  v474[471] = &unk_1E24F8000;
  v474[472] = &unk_1E24F8000;
  v474[473] = &unk_1E24F8000;
  v474[474] = &unk_1E24F8000;
  v474[475] = &unk_1E24F8000;
  v474[476] = &unk_1E24F8000;
  v474[477] = &unk_1E24F8000;
  v474[478] = &unk_1E24F8000;
  v474[479] = &unk_1E24F8000;
  v474[480] = &unk_1E24F8000;
  v474[481] = &unk_1E24F8000;
  v474[482] = &unk_1E24F8000;
  v474[483] = &unk_1E24F8000;
  v474[484] = &unk_1E24F8000;
  v474[485] = &unk_1E24F8000;
  v474[486] = &unk_1E24F8000;
  v474[487] = &unk_1E24F8000;
  v474[488] = &unk_1E24F8000;
  v474[489] = &unk_1E24F8000;
  v473[492] = CFSTR("AssistiveTouchScannerPrefersCompactForLanguagePreference");
  v473[493] = CFSTR("AssistiveTouchScannerAlternativeVoiceForLanguagePreference");
  v473[494] = CFSTR("AXSAssistiveTouchDefaultDialectPreference");
  v473[495] = CFSTR("QuickSpeakPrefersCompactForLanguage");
  v474[379] = &unk_1E24F8060;
  v473[496] = CFSTR("QuickSpeakAlternativeVoiceForLanguage");
  v473[380] = CFSTR("AXSVoiceOverLiveRegionAppStatus");
  v474[418] = &unk_1E24F8048;
  v474[495] = &unk_1E24F8048;
  v474[496] = &unk_1E24F8048;
  v473[378] = CFSTR("AXSVoiceOverNavigationStyle");
  v474[378] = &unk_1E24F8060;
  v474[374] = &unk_1E24F7FB8;
  v473[376] = CFSTR("kAXSVoiceOverInlineTextCompletionInsertionFeedbackPreference");
  v474[376] = &unk_1E24F7FB8;
  v473[377] = CFSTR("AXSImageCaptionGenderStrategy");
  v473[375] = CFSTR("kAXSVoiceOverInlineTextCompletionAppearanceFeedbackPreference");
  v474[375] = &unk_1E24F7FB8;
  v474[371] = &unk_1E24F7FB8;
  v473[373] = CFSTR("VoiceOverTapticChimesFrequencyEncoding");
  v474[373] = &unk_1E24F7FB8;
  v473[374] = CFSTR("VoiceOverTapticChimesSoundType");
  v473[372] = CFSTR("VoiceOverTapticChimesAvailability");
  v474[372] = &unk_1E24F7FB8;
  v474[368] = &unk_1E24F7FB8;
  v473[370] = CFSTR("VoiceOverTapticTimeSpeed");
  v474[370] = &unk_1E24F7FB8;
  v473[371] = CFSTR("VoiceOverTapticChimesEnabled");
  v473[369] = CFSTR("VoiceOverTapticTimeEncoding");
  v474[369] = &unk_1E24F7FB8;
  v474[366] = &unk_1E24F7FB8;
  v473[367] = CFSTR("TapToSpeakTimeAvailability");
  v474[367] = &unk_1E24F7FB8;
  v473[368] = CFSTR("VoiceOverTapticTimeMode");
  v474[302] = &unk_1E24F8060;
  v474[362] = &unk_1E24F8060;
  v474[365] = &unk_1E24F7FB8;
  v473[366] = CFSTR("TapToSpeakTimeEnabled");
  v473[364] = CFSTR("AXSVoiceOverSelectedActivityPreference");
  v473[365] = CFSTR("VoiceOverNavigationDirectionMode");
  v473[363] = CFSTR("AXSEnabledLiveRecognitionModes");
  v474[363] = &unk_1E24F8060;
  v474[359] = &unk_1E24F8060;
  v473[361] = CFSTR("AXSLiveRecognitionActive");
  v474[361] = &unk_1E24F7FB8;
  v473[362] = CFSTR("AXSLiveRecognitionOverlayOpen");
  v473[360] = CFSTR("VoiceOverDetectionModeItems");
  v474[360] = &unk_1E24F8060;
  v474[356] = &unk_1E24F8060;
  v473[358] = CFSTR("VoiceOverShouldDisallowUSBRestrictedMode");
  v474[358] = &unk_1E24F8060;
  v473[359] = CFSTR("VoiceOverUserDidReadUSBRestrictedModeAlert");
  v473[357] = CFSTR("AXSVoiceOverTouchBraillePreferredTableIdentifiers");
  v474[357] = &unk_1E24F8060;
  v474[353] = &unk_1E24F8060;
  v473[355] = CFSTR("VoiceOverSoundsAndHaptics");
  v474[355] = &unk_1E24F8060;
  v473[356] = CFSTR("AXSVoiceOverTouchUpdateBrailleWithoutConnectedDisplay");
  v473[354] = CFSTR("AXSVoiceOverAutomaticButtonLabelsPreference");
  v474[354] = &unk_1E24F8060;
  v474[350] = &unk_1E24F8060;
  v473[352] = CFSTR("AXSVoiceOverSpeakDiscoveredTextFeedbackPreference");
  v474[352] = &unk_1E24F8060;
  v473[353] = CFSTR("AXSVoiceOverNumberFeedback");
  v473[351] = CFSTR("AXSVoiceOverShouldSpeakDiscoveredTextPreference");
  v474[351] = &unk_1E24F8060;
  v474[347] = &unk_1E24F8060;
  v473[349] = CFSTR("AXSVoiceOverTouchBrailleShowTextStyleStatus");
  v474[349] = &unk_1E24F8060;
  v473[350] = CFSTR("AXSVoiceOverTouchBrailleShowGeneralStatus");
  v473[348] = CFSTR("AXSVoiceOverTouchBrailleGestureControl");
  v474[348] = &unk_1E24F8060;
  v474[344] = &unk_1E24F8060;
  v473[346] = CFSTR("AXSVoiceOverKeyboardModifierChoicePreference");
  v474[346] = &unk_1E24F8060;
  v473[347] = CFSTR("AXSVoiceOverTouchShouldReverseDots");
  v473[345] = CFSTR("VoiceOverBrailleKeyDebounceTimeout");
  v474[345] = &unk_1E24F8060;
  v474[341] = &unk_1E24F8060;
  v473[343] = CFSTR("AXSVoiceOverBrailleAlertsEnabled");
  v474[343] = &unk_1E24F8060;
  v473[344] = CFSTR("AXSVoiceOverBrailleAlertShowUntilDismissed");
  v473[342] = CFSTR("VoiceOverBrailleDisplayAlertDuration");
  v474[342] = &unk_1E24F8060;
  v473[303] = CFSTR("VoiceOverTouchTVPrefersFollowFocusNavigationStyle");
  v474[338] = &unk_1E24F8060;
  v473[340] = CFSTR("VoiceOverBrailleDisplays");
  v474[340] = &unk_1E24F8060;
  v473[339] = CFSTR("AXSVoiceOverLockScreenNotificationOutput");
  v474[339] = &unk_1E24F8060;
  v474[335] = &unk_1E24F8060;
  v473[337] = CFSTR("AXSVoiceOverRingerSwitchForNotificationsEnabled");
  v474[337] = &unk_1E24F8060;
  v473[338] = CFSTR("AXSVoiceOverBannerNotificationOutput");
  v473[336] = CFSTR("kAXSVoiceOverBrailleFormatting");
  v474[336] = &unk_1E24F8060;
  v474[332] = &unk_1E24F8060;
  v473[334] = CFSTR("VoiceOverBrailleDisplayDisconnectOnSleepPreference");
  v474[334] = &unk_1E24F8060;
  v473[335] = CFSTR("VoiceOverBrailleAutoAdvanceDuration");
  v473[333] = CFSTR("VoiceOverBrailleWordWrapEnabled");
  v474[333] = &unk_1E24F8060;
  v474[329] = &unk_1E24F8060;
  v473[331] = CFSTR("VoiceOverBrailleGesturesLockedTypingMode");
  v474[331] = &unk_1E24F8060;
  v473[332] = CFSTR("VoiceOverBrailleGesturesDidPlayCalibrationHint");
  v473[330] = CFSTR("VoiceOverBrailleGesturesLockedOrientation");
  v474[330] = &unk_1E24F8060;
  v474[326] = &unk_1E24F8060;
  v473[328] = CFSTR("VoiceOverCaptionPanelEnabled");
  v474[328] = &unk_1E24F8060;
  v473[329] = CFSTR("VoiceOverBrailleGesturesShouldUseLockedConfiguration");
  v473[327] = CFSTR("AXSVoiceOverTouchBrailleDisplaySyncInputOutputTables");
  v474[327] = &unk_1E24F8060;
  v474[323] = &unk_1E24F8060;
  v473[325] = CFSTR("VoiceOverAudioFollowsHDMIAudio");
  v474[325] = &unk_1E24F8060;
  v473[326] = CFSTR("VoiceOverIgnoreTrackpad");
  v473[324] = CFSTR("VoiceOverTouchAudioDuckingEnabled");
  v474[324] = &unk_1E24F8060;
  v474[320] = &unk_1E24F8060;
  v473[322] = CFSTR("AXSVoiceOverPunctuationLevelPreference");
  v474[322] = &unk_1E24F8060;
  v473[323] = CFSTR("AXSVoiceOverPunctuationGroupPreference");
  v473[321] = CFSTR("VoiceOverDiscoveredSensitiveContentFeedback");
  v474[321] = &unk_1E24F8060;
  v474[317] = &unk_1E24F8060;
  v473[319] = CFSTR("AXSVoiceOverContainerOutputFeedbackPreference");
  v474[319] = &unk_1E24F8060;
  v473[320] = CFSTR("AXSVoiceOverMoreContentOutputFeedbackPreference");
  v473[318] = CFSTR("AXSVoiceOverFirstInListOnlyActionsFeedback");
  v474[318] = &unk_1E24F8060;
  v474[314] = &unk_1E24F8060;
  v473[316] = CFSTR("AXSVoiceOverLinkFeedbackPreference");
  v474[316] = &unk_1E24F8060;
  v473[317] = CFSTR("AXSVoiceOverActionsFeedbackPreference");
  v473[315] = CFSTR("AXSVoiceOverDeletionFeedbackPreference");
  v474[315] = &unk_1E24F8060;
  v474[311] = &unk_1E24F8060;
  v473[313] = CFSTR("AXSVoiceOverCapitalLetterFeedbackPreference");
  v474[313] = &unk_1E24F8060;
  v473[314] = CFSTR("AXSVoiceOverRotorSummaryFeedbackPreference");
  v473[312] = CFSTR("AXSVoiceOverSpeakTableHeadersPreference");
  v474[312] = &unk_1E24F8060;
  v474[309] = &unk_1E24F8060;
  v473[310] = CFSTR("VoiceOverQuickNavAnnouncementFeedback");
  v474[310] = &unk_1E24F8060;
  v473[311] = CFSTR("AXSVoiceOverSpeakTableColumnRowInformationPreference");
  v474[303] = &unk_1E24F8060;
  v474[306] = &unk_1E24F8060;
  v473[308] = CFSTR("VoiceOverOutputToHearingAid");
  v474[308] = &unk_1E24F8060;
  v473[307] = CFSTR("VoiceOverCustomCammndProfile");
  v474[307] = &unk_1E24F8060;
  v474[304] = &unk_1E24F8060;
  v473[305] = CFSTR("VoiceOverTouchDescribedMedia");
  v474[305] = &unk_1E24F8060;
  v473[306] = CFSTR("QuickSettings");
  v473[304] = CFSTR("VoiceOverExploreFocusAffectsNativeFocus");
  v474[380] = &unk_1E24F8060;
  v474[381] = &unk_1E24F8060;
  v474[382] = &unk_1E24F8060;
  v474[383] = &unk_1E24F8060;
  v474[384] = &unk_1E24F8060;
  v474[387] = &unk_1E24F8060;
  v474[388] = &unk_1E24F8060;
  v474[497] = &unk_1E24F8060;
  v474[498] = &unk_1E24F8060;
  v474[499] = &unk_1E24F8060;
  v473[299] = CFSTR("VoiceOverShowGrade2AutoTranslate");
  v473[504] = CFSTR("AXSSoundActionsOverrideEnable");
  v474[12] = &unk_1E24F7FD0;
  v474[13] = &unk_1E24F7FD0;
  v473[298] = CFSTR("VoiceOverShowSWKeyboardWithBraille");
  v473[293] = CFSTR("voiceOverBrailleTableIdentifier");
  v473[297] = CFSTR("VOActivationWorkaround");
  v473[295] = CFSTR("com.apple.voiceovertouch.default.dialect");
  v473[296] = CFSTR("VoiceOverLanguageSpeakingRate");
  v473[294] = CFSTR("voiceOverAlwaysUseNemethCodeForMathEnabled");
  v474[14] = &unk_1E24F7FD0;
  v474[15] = &unk_1E24F7FD0;
  v473[292] = CFSTR("VoiceOverSpeakActionConfirmationPreference");
  v474[292] = &unk_1E24F7FB8;
  v474[16] = &unk_1E24F7FD0;
  v474[17] = &unk_1E24F7FD0;
  v473[290] = CFSTR("VoiceOverEditAppsActionEnabledPreference");
  v473[291] = CFSTR("AXSVoiceOverRotorUpdatesWithElementPreference");
  v474[18] = &unk_1E24F7FD0;
  v474[19] = &unk_1E24F7FD0;
  v474[20] = &unk_1E24F7FD0;
  v474[21] = &unk_1E24F7FD0;
  v473[289] = CFSTR("VoiceOverTouchRotorItemsPreference");
  v473[287] = CFSTR("SpeakingRateInRotorEnabled");
  v473[288] = CFSTR("SpeakNotificationInLockScreen");
  v473[286] = CFSTR("VoiceOverVerbosityEmojiFeedbackPreference");
  v474[22] = &unk_1E24F7FD0;
  v474[23] = &unk_1E24F7FD0;
  v473[284] = CFSTR("VoiceOverHapticIntensity");
  v473[285] = CFSTR("VoiceOverVerbosityEmojiSuffixEnabledPreference");
  v474[24] = &unk_1E24F7FD0;
  v474[25] = &unk_1E24F7FD0;
  v474[26] = &unk_1E24F7FD0;
  v474[27] = &unk_1E24F7FD0;
  v473[283] = CFSTR("VoiceOverAdjustSoundVolumeIndependently");
  v473[279] = CFSTR("VoiceOverUseSoundEffects");
  v473[282] = CFSTR("VoiceOverSoundVolume");
  v473[280] = CFSTR("VoiceOverHapticsEnabled");
  v473[281] = CFSTR("AXSVoiceOverTurnOnBluetoothEnabled");
  v474[28] = &unk_1E24F7FD0;
  v474[29] = &unk_1E24F7FD0;
  v474[278] = &unk_1E24F7FB8;
  v474[30] = &unk_1E24F7FD0;
  v474[31] = &unk_1E24F7FD0;
  v473[276] = CFSTR("VoiceOverTouchTypingBrailleGesturesFeedback");
  v473[277] = CFSTR("VoiceOverTouchHintsEnabled");
  v474[32] = &unk_1E24F7FD0;
  v474[33] = &unk_1E24F7FD0;
  v474[34] = &unk_1E24F7FD0;
  v474[35] = &unk_1E24F7FD0;
  v473[275] = CFSTR("VoiceOverTouchTypingFeedback");
  v473[270] = CFSTR("AXSVoiceOverSpeaksOverTelephoneCalls");
  v473[274] = CFSTR("VoiceOverTouchTypingHardwareFeedback");
  v473[272] = CFSTR("NavigateImagesPreference");
  v473[273] = CFSTR("VoiceOverTouchPhoneticsEnabledPreference");
  v473[271] = CFSTR("VoiceOverTouchHelpModePreference");
  v474[36] = &unk_1E24F7FD0;
  v474[37] = &unk_1E24F7FD0;
  v473[268] = CFSTR("VoiceOverHandwritingWasNativeAutocorrectEnabled");
  v474[268] = &unk_1E24F7FB8;
  v474[269] = &unk_1E24F7FB8;
  v474[266] = &unk_1E24F7FB8;
  v473[267] = CFSTR("AXSTeachableMomentsDelayBeforeSending");
  v474[267] = &unk_1E24F7FB8;
  v474[40] = &unk_1E24F7FD0;
  v474[41] = &unk_1E24F7FD0;
  v473[265] = CFSTR("SpokenContentShouldUseLanguageDetection");
  v473[266] = CFSTR("AXSTeachableMomentsNotificationSeen");
  v474[42] = &unk_1E24F7FD0;
  v474[43] = &unk_1E24F7FD0;
  v474[44] = &unk_1E24F7FD0;
  v474[45] = &unk_1E24F7FD0;
  v473[264] = CFSTR("SpokenContentDefaultFallbackLanguage");
  v473[258] = CFSTR("UserDidSelectVoiceForLanguage");
  v473[263] = CFSTR("SiriAutoUpdateListInitializedPreference");
  v473[261] = CFSTR("QuickSpeakNubbitNormalizedPosition");
  v473[262] = CFSTR("QuickSpeakSentenceHighlight");
  v474[258] = &unk_1E24F7FB8;
  v473[259] = CFSTR("VisionEngineCaptureDiagnosticsToDisk");
  v474[259] = &unk_1E24F7FB8;
  v474[46] = &unk_1E24F7FD0;
  v474[47] = &unk_1E24F7FD0;
  v473[255] = CFSTR("QuickSpeakVolume");
  v474[256] = &unk_1E24F7FB8;
  v474[257] = &unk_1E24F7FB8;
  v473[256] = CFSTR("SpeechVoiceIdentifierForLanguage");
  v474[48] = &unk_1E24F7FD0;
  v474[49] = &unk_1E24F7FD0;
  v473[253] = CFSTR("AXSQuickSpeakSentenceHighlightColorPreference");
  v473[254] = CFSTR("QuickSpeakUnderlineSentence");
  v474[50] = &unk_1E24F7FD0;
  v474[51] = &unk_1E24F7FD0;
  v474[52] = &unk_1E24F7FD0;
  v474[53] = &unk_1E24F7FD0;
  v473[252] = CFSTR("AXSQuickSpeakWordHighlightColorPreference");
  v473[250] = CFSTR("QuickSpeakLanguageSpeakingRate");
  v473[251] = CFSTR("QuickSpeakHighlightChoice");
  v474[54] = &unk_1E24F7FD0;
  v474[55] = &unk_1E24F7FD0;
  v473[249] = CFSTR("QuickSpeakRate");
  v474[56] = &unk_1E24F7FD0;
  v474[57] = &unk_1E24F7FD0;
  v473[248] = CFSTR("SpeechControllerDoubleTapAction");
  v473[223] = CFSTR("kAXSupportsAdvancedDisplayFiltersPreference");
  v473[247] = CFSTR("SpeechControllerLongPressAction");
  v473[245] = CFSTR("ShowSpeechController");
  v473[246] = CFSTR("SpeechControllerIdleOpacity");
  v473[242] = CFSTR("AXSInternalGuidedAccessOverrideTimeRestrictionDuration");
  v474[243] = &unk_1E24F7FB8;
  v473[244] = CFSTR("AXSAudioHardwareChannelLayoutsPreference");
  v474[244] = &unk_1E24F7FB8;
  v474[242] = &unk_1E24F7FB8;
  v473[243] = CFSTR("AXSInternalGuidedAccessEnableExperimentalUI");
  v473[239] = CFSTR("InternalSkipHearingAidMFiAuth");
  v474[240] = &unk_1E24F7FB8;
  v473[241] = CFSTR("AXSInternalGuidedAccessDisallowDirectInactiveToActiveTransition");
  v474[241] = &unk_1E24F7FB8;
  v474[239] = &unk_1E24F7FB8;
  v473[240] = CFSTR("InternalEnableHearingAidReporter");
  v473[236] = CFSTR("CharacterFeedbackDelayPreference");
  v474[237] = &unk_1E24F7FB8;
  v473[238] = CFSTR("WordFeedbackEnabled");
  v474[238] = &unk_1E24F7FB8;
  v474[236] = &unk_1E24F7FB8;
  v473[237] = CFSTR("QuickTypeWordFeedback");
  v473[233] = CFSTR("AXSTripleClickUserOrderedPreference");
  v474[234] = &unk_1E24F7FB8;
  v473[235] = CFSTR("PhoneticFeedbackEnabled");
  v474[235] = &unk_1E24F7FB8;
  v474[233] = &unk_1E24F7FB8;
  v473[234] = CFSTR("LetterFeedbackEnabled");
  v473[230] = CFSTR("UseNewAXBundleLoader");
  v474[231] = &unk_1E24F7FB8;
  v473[232] = CFSTR("SpeakCorrectionsEnabled");
  v474[232] = &unk_1E24F7FB8;
  v474[230] = &unk_1E24F7FB8;
  v473[231] = CFSTR("shouldPerformValidationsAtRuntime");
  v473[227] = CFSTR("IgnoreAXAsserts");
  v474[228] = &unk_1E24F7FB8;
  v473[229] = CFSTR("LogAXNotificationPosting");
  v474[229] = &unk_1E24F7FB8;
  v474[227] = &unk_1E24F7FB8;
  v473[228] = CFSTR("IgnoreAXServerEntitlements");
  v473[225] = CFSTR("ValidateSecondPartyApps");
  v474[225] = &unk_1E24F7FB8;
  v473[226] = CFSTR("IncludeBacktraceInLogs");
  v474[226] = &unk_1E24F7FB8;
  v474[223] = &unk_1E24F7FB8;
  v473[224] = CFSTR("InternalLoggingColorThemePreference");
  v474[224] = &unk_1E24F7FB8;
  v474[58] = &unk_1E24F7FD0;
  v474[59] = &unk_1E24F7FD0;
  v474[60] = &unk_1E24F7FD0;
  v474[61] = &unk_1E24F7FD0;
  v473[222] = CFSTR("GAXGlobalProfileLastPasscodeSetDate");
  v473[220] = CFSTR("GAXGlobalProfileProductBuildVersion");
  v473[221] = CFSTR("GAXGlobalProfileLastActivationDate");
  v474[62] = &unk_1E24F7FD0;
  v474[63] = &unk_1E24F7FD0;
  v474[64] = &unk_1E24F7FD0;
  v473[219] = CFSTR("GAXGlobalProfileECID");
  v473[217] = CFSTR("GAXInternalSettingTimeRestrictionHasExpired");
  v473[218] = CFSTR("GAXGlobalProfileSystemDidRestartDueToLowBattery");
  v474[65] = &unk_1E24F7FD0;
  v474[66] = &unk_1E24F7FD0;
  v474[67] = &unk_1E24F7FD0;
  v473[216] = CFSTR("AXGAXInternalSettingIsActiveAppSelfLocked");
  v473[214] = CFSTR("GAXGlobalProfileActiveAppOrientation");
  v473[215] = CFSTR("GAXGlobalProfileActiveAppID");
  v474[68] = &unk_1E24F7FD0;
  v474[69] = &unk_1E24F7FD0;
  v474[70] = &unk_1E24F7FD0;
  v473[213] = CFSTR("GAXGlobalProfileUserConfiguredAppIds");
  v473[211] = CFSTR("GAXGlobalProfileSavedAXFeatures");
  v473[212] = CFSTR("GAXGlobalProfileSavedAXTripleClickOptions");
  v474[71] = &unk_1E24F7FD0;
  v474[72] = &unk_1E24F7FD0;
  v474[73] = &unk_1E24F7FD0;
  v473[210] = CFSTR("GAXInternalSettingUserGlobalProfile");
  v473[208] = CFSTR("GuidedAccessUserPrefersMirroringForExternalDisplays");
  v473[209] = CFSTR("GAXInternalSettingUserAppProfile");
  v474[74] = &unk_1E24F7FD0;
  v474[75] = &unk_1E24F7FD0;
  v474[76] = &unk_1E24F7FD0;
  v473[207] = CFSTR("GuidedAccessAutoLockTimeInSeconds");
  v473[205] = CFSTR("GuidedAccessSpeakForTimeRestrictionEvent");
  v473[206] = CFSTR("kAXSGuidedAccessOverrideIdleTimePreference");
  v474[77] = &unk_1E24F7FD0;
  v474[78] = &unk_1E24F7FD0;
  v474[79] = &unk_1E24F7FD0;
  v473[204] = CFSTR("GuidedAccessToneIdentifierForTimeRestrictionEvent");
  v473[202] = CFSTR("kAXSGuidedAccessAXFeaturesEnabled");
  v473[203] = CFSTR("GuidedAccessAllowsUnlockWithTouchID");
  v474[80] = &unk_1E24F7FD0;
  v474[81] = &unk_1E24F7FD0;
  v474[82] = &unk_1E24F7FD0;
  v473[201] = CFSTR("GuidedAccessUsageCount");
  v473[199] = CFSTR("ZoomAutopannerShouldPanWithAccelerationPreference");
  v473[200] = CFSTR("ZoomShowZoomWhileMirroringPreference");
  v474[83] = &unk_1E24F7FD0;
  v474[84] = &unk_1E24F7FD0;
  v474[85] = &unk_1E24F7FD0;
  v473[198] = CFSTR("kAXZoomTrackpadGestureEnabledPreference");
  v473[196] = CFSTR("ZoomTempToggleZoomKeyboardShortcutEnabledPreference");
  v473[197] = CFSTR("ZoomScrollWheelKeyboardShortcutEnabledPreference");
  v474[86] = &unk_1E24F7FD0;
  v474[87] = &unk_1E24F7FD0;
  v474[88] = &unk_1E24F7FD0;
  v473[195] = CFSTR("ZoomSwitchZoomModeKeyboardShortcutEnabledPreference");
  v473[193] = CFSTR("ZoomPanZoomKeyboardShortcutEnabledPreference");
  v473[194] = CFSTR("ZoomResizeZoomWindowKeyboardShortcutEnabledPreference");
  v474[89] = &unk_1E24F7FD0;
  v474[90] = &unk_1E24F7FD0;
  v474[91] = &unk_1E24F7FD0;
  v473[192] = CFSTR("ZoomToggleZoomKeyboardShortcutEnabledPreference");
  v473[190] = CFSTR("ZoomShouldUseKeyboardShortcutsPreference");
  v473[191] = CFSTR("ZoomAdjustZoomLevelKeyboardShortcutEnabledPreference");
  v474[92] = &unk_1E24F7FD0;
  v474[93] = &unk_1E24F7FD0;
  v474[94] = &unk_1E24F7FD0;
  v473[189] = CFSTR("ZoomPeekZoomEverEnabled");
  v473[187] = CFSTR("ZoomShowedBanner");
  v473[188] = CFSTR("ZoomPeekZoomEnabled");
  v474[95] = &unk_1E24F7FD0;
  v474[96] = &unk_1E24F7FD0;
  v474[97] = &unk_1E24F7FD0;
  v473[186] = CFSTR("ZoomInStandby");
  v473[184] = CFSTR("ZoomDebugDisableZoomLensScaleTransform");
  v473[185] = CFSTR("ZoomDebugShowExternalFocusRectPreference");
  v474[98] = &unk_1E24F7FD0;
  v474[99] = &unk_1E24F7FD0;
  v474[100] = &unk_1E24F7FD0;
  v473[183] = CFSTR("ZoomShouldAllowFullscreenAutopanning");
  v473[181] = CFSTR("ZoomControllerColorPreference");
  v473[182] = CFSTR("ZoomAudioDestination");
  v474[101] = &unk_1E24F7FD0;
  v474[102] = &unk_1E24F7FD0;
  v474[103] = &unk_1E24F7FD0;
  v473[180] = CFSTR("ZoomIdleSlugOpacity");
  v473[178] = CFSTR("ZoomPreferredLensModes");
  v473[179] = CFSTR("ZoomPreferredDockPositions");
  v474[104] = &unk_1E24F7FD0;
  v474[105] = &unk_1E24F7FD0;
  v474[106] = &unk_1E24F7FD0;
  v473[177] = CFSTR("ZoomPreferredMaximumZoomScale");
  v473[175] = CFSTR("ZoomPreferredDockPosition");
  v473[176] = CFSTR("ZoomPreferredLensMode");
  v474[107] = &unk_1E24F7FD0;
  v474[108] = &unk_1E24F7FD0;
  v474[109] = &unk_1E24F7FD0;
  v473[174] = CFSTR("ZoomSlugTapAndSlideToAdjustZoomLevel");
  v473[172] = CFSTR("ZoomSlugDoubleTapAction");
  v473[173] = CFSTR("ZoomSlugTripleTapAction");
  v474[110] = &unk_1E24F7FD0;
  v474[111] = &unk_1E24F7FD0;
  v474[112] = &unk_1E24F7FD0;
  v473[171] = CFSTR("ZoomSlugSingleTapAction");
  v473[169] = CFSTR("ZoomShouldShowSlug");
  v473[170] = CFSTR("ZoomAlwaysUseWindowZoomForTyping");
  v474[113] = &unk_1E24F7FD0;
  v474[114] = &unk_1E24F7FD0;
  v474[115] = &unk_1E24F7FD0;
  v473[168] = CFSTR("ZoomShouldFollowFocus");
  v474[116] = &unk_1E24F7FD0;
  v473[167] = CFSTR("ZoomCurrentLensMode");
  v473[165] = CFSTR("ZoomSlugPosition");
  v473[166] = CFSTR("ZoomCurrentLensEffect");
  v474[117] = &unk_1E24F7FD0;
  v473[164] = CFSTR("ZoomPanOffset");
  v473[162] = CFSTR("DockSize");
  v473[163] = CFSTR("ZoomScale");
  v473[160] = CFSTR("ZoomPreferencesWereInitialized");
  v473[161] = CFSTR("ZoomWindowFrame");
  v474[462] = &unk_1E24F7FD0;
  v474[492] = &unk_1E24F7FD0;
  v474[493] = &unk_1E24F7FD0;
  v474[494] = &unk_1E24F7FD0;
  v474[38] = &unk_1E24F7FD0;
  v474[158] = &unk_1E24F7FB8;
  v473[159] = CFSTR("HoverTextTypingShowedBanner");
  v474[159] = &unk_1E24F7FB8;
  v474[157] = &unk_1E24F7FB8;
  v473[158] = CFSTR("HoverTextShowedBanner");
  v473[156] = CFSTR("AXSHapticMusicUsageStartDate");
  v473[157] = CFSTR("HoverTextScrollingSpeed");
  v474[39] = &unk_1E24F7FB8;
  v473[153] = CFSTR("AXSHapticMusicToggledInPreferences");
  v474[154] = &unk_1E24F7FB8;
  v473[155] = CFSTR("AXSHapticMusicUsagePerDay");
  v474[153] = &unk_1E24F7FB8;
  v473[154] = CFSTR("AXSHapticMusicAlgorithmSelection");
  v473[94] = CFSTR("AssistiveTouchMotionTrackerYNormalizationOffsetPreference");
  v474[151] = &unk_1E24F7FB8;
  v473[152] = CFSTR("AXSHapticMusicActive");
  v474[152] = &unk_1E24F7FB8;
  v474[150] = &unk_1E24F7FB8;
  v473[151] = CFSTR("AXSHapticMusicEnhancedVocals");
  v473[95] = CFSTR("AXSAssistiveTouchMotionTrackerShouldOffsetBufferPointsPreference");
  v473[150] = CFSTR("AXSHapticMusicEnhancedPercussion");
  v473[96] = CFSTR("AXSAssistiveTouchBubbleModeEnabled");
  v473[149] = CFSTR("SCCameraPointPickerDwellMovementToleranceRadiusPreference");
  v473[97] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideEnabled");
  v473[148] = CFSTR("SCCameraPointPickerDwellActivationTimeoutPreference");
  v473[98] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideTimeout");
  v473[147] = CFSTR("SCCameraPointPickerMode");
  v473[99] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideOpacity");
  v473[146] = CFSTR("SCCameraPointPickerMovementToleranceInJoystickMode");
  v473[100] = CFSTR("AXSAssistiveTouchMouseClickSounds");
  v473[145] = CFSTR("SCCameraPointPickerSensitivity");
  v473[101] = CFSTR("AssistiveTouchHeadMovementSensitivityPreference");
  v473[144] = CFSTR("SCUseCameraForPointPicker");
  v473[102] = CFSTR("AXSAssistiveTouchSwitchUsageConfirmedPreference");
  v473[143] = CFSTR("SCDebugLoggingEnabled");
  v473[103] = CFSTR("AssistiveTouchAutoAddedTCItem");
  v473[142] = CFSTR("SCUserDidReadUSBRestrictedModeAlert");
  v473[104] = CFSTR("AXSAssistiveTouchMainScreenCustomizationPreference");
  v473[141] = CFSTR("SCShouldDisallowUSBRestrictedMode");
  v473[105] = CFSTR("AXSAssistiveTouchOrbPreference");
  v473[140] = CFSTR("SCSwitchControlPointPickerSelectionStyle");
  v473[106] = CFSTR("AXSAssistiveTouchSingleTapAction");
  v473[107] = CFSTR("AXSAssistiveTouchDoubleTapAction");
  v473[108] = CFSTR("AXSAssistiveTouchLongPressAction");
  v473[138] = CFSTR("SCIgnoreInvalidSwitchConfiguration");
  v473[109] = CFSTR("AXSAssistiveTouchLongPressActionDuration");
  v473[137] = CFSTR("SCRestartScanningAtCurrentKey");
  v473[110] = CFSTR("AXSAssistiveTouchDoubleTapActionTimeout");
  v473[136] = CFSTR("SCScanAfterTapLocation");
  v473[111] = CFSTR("AXSAssistiveTouchMouseCustomizedClickActionsPreference");
  v473[135] = CFSTR("SCIsEnabledAsReceiver");
  v473[112] = CFSTR("AXSAssistiveTouchEyeTrackerCustomizedSettingsPreference");
  v473[134] = CFSTR("SCShouldAlwaysActivateKeyboardKeys");
  v473[113] = CFSTR("AssistiveTouchCameraSwitchPreviewEnabledPreference");
  v473[133] = CFSTR("SCTapBehaviorPreference");
  v473[114] = CFSTR("AssistiveTouchInternalOnlyHiddenNubbitModeEnabledPreference");
  v473[132] = CFSTR("SCDwellTime");
  v473[115] = CFSTR("AssistiveTouchInternalOnlyPearlTrackingEnabledPreference");
  v473[131] = CFSTR("SCFirstLaunchScanningMode");
  v473[116] = CFSTR("AXSAssistiveTouchIdleOpacityPreference");
  v473[130] = CFSTR("SCScanningStyle");
  v473[117] = CFSTR("AXSAssitiveTouchGameControllerPreference");
  v473[129] = CFSTR("SCMediaControlsMenuItems");
  v473[118] = CFSTR("SCRecipes");
  v473[128] = CFSTR("SCSettingsMenuItems");
  v473[119] = CFSTR("SCLaunchRecipeUUID");
  v473[127] = CFSTR("SCDeviceMenuItems");
  v473[120] = CFSTR("SCTopLevelMenuItems");
  v473[126] = CFSTR("SCGesturesMenuItems");
  v473[122] = CFSTR("SCDeviceTopLevelMenuItems");
  v473[125] = CFSTR("SCShouldUseShortFirstPage");
  v473[123] = CFSTR("SCSettingsTopLevelMenuItems");
  v473[124] = CFSTR("SCMediaControlsTopLevelMenuItems");
  v473[121] = CFSTR("SCGesturesTopLevelMenuItems");
  v474[385] = &unk_1E24F7FB8;
  v474[386] = &unk_1E24F7FB8;
  v474[391] = &unk_1E24F7FB8;
  v474[392] = &unk_1E24F7FB8;
  v474[397] = &unk_1E24F7FB8;
  v474[398] = &unk_1E24F7FB8;
  v474[399] = &unk_1E24F7FB8;
  v474[400] = &unk_1E24F7FB8;
  v474[401] = &unk_1E24F7FB8;
  v474[402] = &unk_1E24F7FB8;
  v474[410] = &unk_1E24F7FB8;
  v474[411] = &unk_1E24F7FB8;
  v474[412] = &unk_1E24F7FB8;
  v474[413] = &unk_1E24F7FB8;
  v474[414] = &unk_1E24F7FB8;
  v474[415] = &unk_1E24F7FB8;
  v474[416] = &unk_1E24F7FB8;
  v474[417] = &unk_1E24F7FB8;
  v474[419] = &unk_1E24F7FB8;
  v474[420] = &unk_1E24F7FB8;
  v474[421] = &unk_1E24F7FB8;
  v474[422] = &unk_1E24F7FB8;
  v474[423] = &unk_1E24F7FB8;
  v474[424] = &unk_1E24F7FB8;
  v474[425] = &unk_1E24F7FB8;
  v474[426] = &unk_1E24F7FB8;
  v474[427] = &unk_1E24F7FB8;
  v474[441] = &unk_1E24F7FB8;
  v474[442] = &unk_1E24F7FB8;
  v474[443] = &unk_1E24F7FB8;
  v474[449] = &unk_1E24F7FB8;
  v474[450] = &unk_1E24F7FB8;
  v474[451] = &unk_1E24F7FB8;
  v474[452] = &unk_1E24F7FB8;
  v474[453] = &unk_1E24F7FB8;
  v474[454] = &unk_1E24F7FB8;
  v474[455] = &unk_1E24F7FB8;
  v474[456] = &unk_1E24F7FB8;
  v474[457] = &unk_1E24F7FB8;
  v474[458] = &unk_1E24F7FB8;
  v474[459] = &unk_1E24F7FB8;
  v474[460] = &unk_1E24F7FB8;
  v474[461] = &unk_1E24F7FB8;
  v474[463] = &unk_1E24F7FB8;
  v474[464] = &unk_1E24F7FB8;
  v474[465] = &unk_1E24F7FB8;
  v474[466] = &unk_1E24F7FB8;
  v474[490] = &unk_1E24F7FB8;
  v474[491] = &unk_1E24F7FB8;
  v474[500] = &unk_1E24F7FB8;
  v474[501] = &unk_1E24F7FB8;
  v474[502] = &unk_1E24F7FB8;
  v474[503] = &unk_1E24F7FB8;
  v474[504] = &unk_1E24F7FB8;
  v474[505] = &unk_1E24F7FB8;
  v474[506] = &unk_1E24F7FB8;
  v474[507] = &unk_1E24F7FB8;
  v474[508] = &unk_1E24F7FB8;
  v473[93] = CFSTR("AssistiveTouchMotionTrackerXNormalizationOffsetPreference");
  v473[38] = CFSTR("AssistiveTouchScannerSoundEnabled");
  v473[54] = CFSTR("AssistiveTouchActionRepeatEnabledPreference");
  v473[13] = CFSTR("AssistiveTouchVirtualTrackpadFullScreenToggle");
  v473[92] = CFSTR("AssistiveTouchMotionTrackerYNormalizationOrderPreference");
  v473[90] = CFSTR("AssistiveTouchMotionTrackerSmoothingMaxDeltaPreference");
  v473[91] = CFSTR("AssistiveTouchMotionTrackerXNormalizationOrderPreference");
  v473[89] = CFSTR("AssistiveTouchMotionTrackerSmoothingBufferSizePreference");
  v473[14] = CFSTR("AssistiveTouchVirtualTrackpadSpeed");
  v473[15] = CFSTR("AssistiveTouchVirtualTrackpadScrollSpeed");
  v473[16] = CFSTR("AssistiveTouchVirtualTrackpadHoldDuration");
  v473[17] = CFSTR("AssistiveTouchVirtualTrackpadFadeDelay");
  v473[88] = CFSTR("AssistiveTouchForceEyeTrackerExperiencePreference");
  v473[86] = CFSTR("AssistiveTouchMouseZoomPanningStylePreference");
  v473[87] = CFSTR("AssistiveTouchMotionTrackerConfigurablePreference");
  v473[85] = CFSTR("AssistiveTouchMouseDwellControlShowPromptPreference");
  v473[18] = CFSTR("AssistiveTouchVirtualTrackpadBorderColor");
  v473[19] = CFSTR("AssistiveTouchVirtualTrackpadInnerColor");
  v473[20] = CFSTR("AssistiveTouchVirtualTrackpadBorderOpacity");
  v473[21] = CFSTR("AssistiveTouchVirtualTrackpadInnerOpacity");
  v473[22] = CFSTR("AssistiveTouchVirtualTrackpadBorderWidth");
  v473[23] = CFSTR("AssistiveTouchSpeed");
  v473[83] = CFSTR("kAXSAssistiveTouchMouseDwellControlCornerCustomizationPreference");
  v473[81] = CFSTR("AssistiveTouchMouseDwellControlActivationTimeoutPreference");
  v473[82] = CFSTR("AssistiveTouchMouseDwellControlMovementToleranceRadiusPreference");
  v473[80] = CFSTR("AssistiveTouchMouseDwellControlAutorevertActionPreference");
  v473[24] = CFSTR("AssistiveTouchCustomGestures");
  v473[25] = CFSTR("AssistiveTouchRecentGestures");
  v473[26] = CFSTR("AssistiveTouchSavedGestures");
  v473[27] = CFSTR("AssistiveTouchScanningModePreference");
  v473[79] = CFSTR("AssistiveTouchMouseDwellControlAutorevertEnabledPreference");
  v473[77] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur");
  v473[78] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategyPreference");
  v473[76] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseMotionFilte");
  v473[28] = CFSTR("AssistiveTouchPreferredPointPickerPreference");
  v473[29] = CFSTR("AssistiveTouchAutoScanningEnabled");
  v473[30] = CFSTR("AssistiveTouchScanShouldGroupElements");
  v473[31] = CFSTR("AssistiveTouchScanShouldUseCompactMenu");
  v473[75] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages");
  v473[73] = CFSTR("AXSAssistiveTouchEnabledByOnDeviceEyeTracking");
  v473[74] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints");
  v473[72] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideOpacity");
  v473[32] = CFSTR("AssistiveTouchScannerMenuLabelsEnabled");
  v473[33] = CFSTR("AssistiveTouchStepInterval");
  v473[34] = CFSTR("AssistiveTouchScanCyclesPreference");
  v473[35] = CFSTR("AssistiveTouchScannerSelectTimeout");
  v473[71] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideTimeout");
  v473[37] = CFSTR("AssistiveTouchScannerScanTimeout");
  v473[70] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideEnabled");
  v473[69] = CFSTR("AssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizePreference");
  v473[40] = CFSTR("AssistiveTouchSwitchesPreference");
  v473[41] = CFSTR("AssistiveTouchCameraPointPickerSwitchesPreference");
  v473[68] = CFSTR("AssistiveTouchForceOnDeviceEyeTrackingExperiencePreference");
  v473[67] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMapPreference");
  v473[42] = CFSTR("AssistiveTouchCursorHighVisibilityPreference");
  v473[43] = CFSTR("AssistiveTouchInputCoalescingDurationPreference");
  v473[66] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingCalibratedValuesPreference");
  v473[65] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompletedPreference");
  v473[44] = CFSTR("AssistiveTouchInputCoalescingEnabledPreference");
  v473[45] = CFSTR("AssistiveTouchInputHoldDurationPreference");
  v473[64] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingOnboardingCompletedPreference");
  v473[62] = CFSTR("AssistiveTouchMouseDwellControlEnabledPreference");
  v473[63] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnabledPreference");
  v473[46] = CFSTR("AssistiveTouchLongPressDurationPreference");
  v473[47] = CFSTR("AssistiveTouchInputHoldEnabledPreference");
  v473[60] = CFSTR("AssistiveTouchMousePointerTimeoutEnabledPreference");
  v473[61] = CFSTR("AssistiveTouchMousePointerTimeoutPreference");
  v473[48] = CFSTR("AssistiveTouchLongPressDurationEnabledPreference");
  v473[49] = CFSTR("AssistiveTouchLongPressPauseScanningEnabledPreference");
  v473[58] = CFSTR("AssistiveTouchMousePointerColorPreference");
  v473[59] = CFSTR("AssistiveTouchMousePointerSizeMultiplierPreference");
  v473[50] = CFSTR("AssistiveTouchDelayAfterInputPreference");
  v473[51] = CFSTR("AssistiveTouchDelayAfterInputEnabledPreference");
  v473[56] = CFSTR("AssistiveTouchScannerScanTimeoutEnabled");
  v473[57] = CFSTR("AssistiveTouchCursorColorPreference");
  v473[52] = CFSTR("AssistiveTouchAxisSweepSpeed");
  v473[53] = CFSTR("AssistiveTouchActionRepeatIntervalPreference");
  v473[381] = CFSTR("AXSVoiceOverDirectTouchEnabledApps");
  v473[382] = CFSTR("AXSSceneDescriptions");
  v473[383] = CFSTR("AXSVoiceOverSoundCurtain");
  v473[384] = CFSTR("AXSVoiceOverFlashlightNotificationsEnabled");
  v473[385] = CFSTR("VoiceOverWatchHandGestures");
  v473[386] = CFSTR("VoiceOverWatchHandGesturesActionCustomizations");
  v473[387] = CFSTR("VoiceOverTouchMediaDuckingVolume");
  v473[388] = CFSTR("VoiceOverTouchMediaDuckingMode");
  v473[389] = CFSTR("ZoomWatchHandGestures");
  v473[390] = CFSTR("ZoomWatchHandGesturesActionCustomizations");
  v473[391] = CFSTR("TapticTimeInternalFlashScreenEnabled");
  v473[392] = CFSTR("AXSIgnoreTrackpad");
  v473[393] = CFSTR("HearingAidControlAvailableOnLockScreen");
  v473[394] = CFSTR("HearingAidStreamToLeft");
  v473[395] = CFSTR("HearingAidStreamToRight");
  v473[396] = CFSTR("HearingAidEarIndependencePreference");
  v473[399] = CFSTR("VoiceOverSpeakSecondsEncoding");
  v473[400] = CFSTR("LeftRightBalanceEnabled");
  v473[401] = CFSTR("LeftRightBalanceValue");
  v473[402] = CFSTR("RemoteHandGestureCustomizedActions");
  v473[410] = CFSTR("AXSAlexLocalAssetURL");
  v473[411] = CFSTR("LEDFlashOnRingerSwitchSilent");
  v473[412] = CFSTR("LEDFlashWhileUnlocked");
  v473[413] = CFSTR("LimitDisplayRefreshRate");
  v473[414] = CFSTR("LocCaptionShowFilePath");
  v473[415] = CFSTR("LocCaptionShowUSString");
  v473[416] = CFSTR("LocCaptionShowLocalizedString");
  v473[417] = CFSTR("AXSSecurePayAssertionActive");
  v473[419] = CFSTR("TTYMedicalPreamble");
  v473[420] = CFSTR("SpeakMedicalPreamble");
  v473[421] = CFSTR("SOSMedicalPreamble");
  v473[422] = CFSTR("VoiceOverPronunciationCloudKitSyncingEnabled");
  v473[423] = CFSTR("AutomaticAccessibilityEnabled");
  v473[424] = CFSTR("AutomaticAccessibilityIgnoreAppAccessibilityPreferred");
  v473[425] = CFSTR("AutomaticAccessibilityVisualizationsEnabled");
  v473[426] = CFSTR("AutomaticAccessibilityModes");
  v473[427] = CFSTR("AXSDidResetD22Preferences");
  v473[428] = CFSTR("TouchAccommodationsEnabledPreference");
  v473[429] = CFSTR("TouchAccommodationsUsageConfirmedPreference");
  v473[430] = CFSTR("AXSTouchAccommodationsTripleClickConfirmedPreference");
  v473[431] = CFSTR("TouchAccommodationsHoldDurationEnabledPreference");
  v473[432] = CFSTR("TouchAccommodationsHoldDurationPreference");
  v473[433] = CFSTR("TouchAccommodationsAllowsSwipeGesturesToBypassPreference");
  v473[434] = CFSTR("TouchAccommodationsHoldDurationAllowsSwipeGesturesToBypassPreference");
  v473[435] = CFSTR("TouchAccommodationsHoldDurationSwipeGestureSensitivityPreference");
  v473[436] = CFSTR("TouchAccommodationsHoldDurationSwipeGestureMinimumDistancePreference");
  v473[437] = CFSTR("TouchAccommodationsIgnoreRepeatEnabledPreference");
  v473[438] = CFSTR("TouchAccommodationsIgnoreRepeatDurationPreference");
  v473[439] = CFSTR("TouchAccommodationsTapActivationMethodPreference");
  v473[440] = CFSTR("TouchAccommodationsTapActivationTimeOutPreference");
  v473[441] = CFSTR("StickyKeysEnabled");
  v473[442] = CFSTR("StickyKeysShiftToggleEnabled");
  v473[443] = CFSTR("StickyKeysBeepEnabled");
  v473[444] = CFSTR("CommandMapData");
  v473[445] = CFSTR("FocusRingTimeout");
  v473[446] = CFSTR("FocusRingTimeoutEnabled");
  v473[447] = CFSTR("ShouldShowTextEditingModeInstructions");
  v473[448] = CFSTR("FullKeyboardAccessShouldShowDebugKeyCommandsViewPreference");
  v473[449] = CFSTR("FullKeyboardAccessLargeFocusRingEnabled");
  v473[450] = CFSTR("FullKeyboardAccessFocusRingHighContrastEnabled");
  v473[451] = CFSTR("FullKeyboardAccessFocusRingColor");
  v473[452] = CFSTR("AXSAppValidatingTestingPreference");
  v473[453] = CFSTR("IsAXValidationRunnerCollectingValidations");
  v473[454] = CFSTR("AXSClassicInvertColorsPreference");
  v473[455] = CFSTR("VoiceOverSleepOnWristDownPreference");
  v473[456] = CFSTR("AssistiveTouchSleepOnWristDownPreference");
  v473[457] = CFSTR("AXSBackTapDoubleTapAction");
  v473[458] = CFSTR("AXSBackTapTripleTapAction");
  v473[459] = CFSTR("AXSBackTapFalsePositiveAlertsEnabled");
  v473[460] = CFSTR("AXSBackTapRNNModelEnabled");
  v473[461] = CFSTR("AXSBackTapUsageCount");
  v473[462] = CFSTR("AXSAssistiveTouchActionBySoundActionsPreference");
  v473[463] = CFSTR("HoverTextActivationLock");
  v473[464] = CFSTR("HoverTextActivatorKey");
  v473[465] = CFSTR("AXSliveSpeechMaxRecentsCountPreference");
  v473[466] = CFSTR("AutomationTrueTouch");
  v473[489] = CFSTR("AXSDidTriggerSOSToday");
  v473[490] = CFSTR("CallAudioRoutingAutoAnswerPreference");
  v473[491] = CFSTR("CallAudioRoutingAutoAnswerEnabledPreference");
  v473[497] = CFSTR("VoiceOverTouchPitchCompactVoice");
  v473[498] = CFSTR("AXSVoiceOverAlternativeVoicesPreference");
  v473[499] = CFSTR("AXSVoiceOverCompactVoicePreference");
  v473[500] = CFSTR("AXSPerAppSettingsCustomizedAppIDs");
  v473[501] = CFSTR("AXSPerAppSettingsStats");
  v473[502] = CFSTR("AXSAudiogramIngestionLastModelAccess");
  v473[503] = CFSTR("AXSSoundActionsLastModelAccess");
  v473[505] = CFSTR("AXSoundDetectionLastModelAccess");
  v473[506] = CFSTR("CameraButtonSensitivity");
  v473[507] = CFSTR("StartupSoundEnabled");
  v473[508] = CFSTR("AdaptiveVoiceShortcuts");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v474, v473, 509);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)PreferenceKeyToDomainMap;
  PreferenceKeyToDomainMap = v0;

  NSStringFromSelector(sel_automationTrueTouch);
  v470 = (void *)objc_claimAutoreleasedReturnValue();
  v471[0] = v470;
  v472[0] = CFSTR("AutomationTrueTouch");
  NSStringFromSelector(sel_laserZoomPanningStyle);
  v469 = (void *)objc_claimAutoreleasedReturnValue();
  v471[1] = v469;
  v472[1] = CFSTR("LaserZoomPanningStyle");
  NSStringFromSelector(sel_assistiveTouchAlwaysShowMenuEnabled);
  v468 = (void *)objc_claimAutoreleasedReturnValue();
  v471[2] = v468;
  v472[2] = CFSTR("AssistiveTouchAlwaysShowMenu");
  NSStringFromSelector(sel_assistiveTouchOpenMenuSwaggleEnabled);
  v467 = (void *)objc_claimAutoreleasedReturnValue();
  v471[3] = v467;
  v472[3] = CFSTR("AssistiveTouchOpenMenuSwaggle");
  NSStringFromSelector(sel_assistiveTouchMouseBehavesLikeFinger);
  v466 = (void *)objc_claimAutoreleasedReturnValue();
  v471[4] = v466;
  v472[4] = CFSTR("AssistiveTouchMouseBehavesLikeFinger");
  NSStringFromSelector(sel_assistiveTouchMouseKeysEnabled);
  v465 = (void *)objc_claimAutoreleasedReturnValue();
  v471[5] = v465;
  v472[5] = CFSTR("AssistiveTouchMouseKeys");
  NSStringFromSelector(sel_assistiveTouchMouseKeysOptionToggleEnabled);
  v464 = (void *)objc_claimAutoreleasedReturnValue();
  v471[6] = v464;
  v472[6] = CFSTR("AssistiveTouchMouseKeysOptionToggle");
  NSStringFromSelector(sel_assistiveTouchMouseKeysUseMainKeyboardKeys);
  v463 = (void *)objc_claimAutoreleasedReturnValue();
  v471[7] = v463;
  v472[7] = CFSTR("AssistiveTouchMouseKeysUseMainKeyboardKeys");
  NSStringFromSelector(sel_assistiveTouchMouseKeysDelay);
  v462 = (void *)objc_claimAutoreleasedReturnValue();
  v471[8] = v462;
  v472[8] = CFSTR("AssistiveTouchMouseKeysDelay");
  NSStringFromSelector(sel_assistiveTouchMouseAlwaysShowSoftwareKeyboardEnabled);
  v461 = (void *)objc_claimAutoreleasedReturnValue();
  v471[9] = v461;
  v472[9] = CFSTR("AssistiveTouchMouseAlwaysShowSoftwareKeyboard");
  NSStringFromSelector(sel_assistiveTouchMouseAllowAppleBluetoothDevicesPairing);
  v460 = (void *)objc_claimAutoreleasedReturnValue();
  v471[10] = v460;
  v472[10] = CFSTR("AssistiveTouchMouseAllowAppleBluetoothDevicesPairing");
  NSStringFromSelector(sel_assistiveTouchMouseKeysMaxSpeed);
  v459 = (void *)objc_claimAutoreleasedReturnValue();
  v471[11] = v459;
  v472[11] = CFSTR("AssistiveTouchMouseKeysMaxSpeed");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadEnabled);
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  v471[12] = v458;
  v472[12] = CFSTR("AssistiveTouchVirtualTrackpadEnabled");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadSpeed);
  v457 = (void *)objc_claimAutoreleasedReturnValue();
  v471[13] = v457;
  v472[13] = CFSTR("AssistiveTouchVirtualTrackpadSpeed");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadScrollToggleEnabled);
  v456 = (void *)objc_claimAutoreleasedReturnValue();
  v471[14] = v456;
  v472[14] = CFSTR("AssistiveTouchVirtualTrackpadScrollToggle");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadFullScreenToggleEnabled);
  v455 = (void *)objc_claimAutoreleasedReturnValue();
  v471[15] = v455;
  v472[15] = CFSTR("AssistiveTouchVirtualTrackpadFullScreenToggle");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadScrollSpeed);
  v454 = (void *)objc_claimAutoreleasedReturnValue();
  v471[16] = v454;
  v472[16] = CFSTR("AssistiveTouchVirtualTrackpadScrollSpeed");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadHoldDuration);
  v453 = (void *)objc_claimAutoreleasedReturnValue();
  v471[17] = v453;
  v472[17] = CFSTR("AssistiveTouchVirtualTrackpadHoldDuration");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadFadeDelay);
  v452 = (void *)objc_claimAutoreleasedReturnValue();
  v471[18] = v452;
  v472[18] = CFSTR("AssistiveTouchVirtualTrackpadFadeDelay");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderColor);
  v451 = (void *)objc_claimAutoreleasedReturnValue();
  v471[19] = v451;
  v472[19] = CFSTR("AssistiveTouchVirtualTrackpadBorderColor");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadInnerColor);
  v450 = (void *)objc_claimAutoreleasedReturnValue();
  v471[20] = v450;
  v472[20] = CFSTR("AssistiveTouchVirtualTrackpadInnerColor");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderOpacity);
  v449 = (void *)objc_claimAutoreleasedReturnValue();
  v471[21] = v449;
  v472[21] = CFSTR("AssistiveTouchVirtualTrackpadBorderOpacity");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadInnerOpacity);
  v448 = (void *)objc_claimAutoreleasedReturnValue();
  v471[22] = v448;
  v472[22] = CFSTR("AssistiveTouchVirtualTrackpadInnerOpacity");
  NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderWidth);
  v447 = (void *)objc_claimAutoreleasedReturnValue();
  v471[23] = v447;
  v472[23] = CFSTR("AssistiveTouchVirtualTrackpadBorderWidth");
  NSStringFromSelector(sel_assistiveTouchSpeed);
  v446 = (void *)objc_claimAutoreleasedReturnValue();
  v471[24] = v446;
  v472[24] = CFSTR("AssistiveTouchSpeed");
  NSStringFromSelector(sel_assistiveTouchCustomGestures);
  v445 = (void *)objc_claimAutoreleasedReturnValue();
  v471[25] = v445;
  v472[25] = CFSTR("AssistiveTouchCustomGestures");
  NSStringFromSelector(sel_assistiveTouchRecentGestures);
  v444 = (void *)objc_claimAutoreleasedReturnValue();
  v471[26] = v444;
  v472[26] = CFSTR("AssistiveTouchRecentGestures");
  NSStringFromSelector(sel_assistiveTouchSavedGestures);
  v443 = (void *)objc_claimAutoreleasedReturnValue();
  v471[27] = v443;
  v472[27] = CFSTR("AssistiveTouchSavedGestures");
  NSStringFromSelector(sel_assistiveTouchScanningMode);
  v442 = (void *)objc_claimAutoreleasedReturnValue();
  v471[28] = v442;
  v472[28] = CFSTR("AssistiveTouchScanningModePreference");
  NSStringFromSelector(sel_assistiveTouchPreferredPointPicker);
  v441 = (void *)objc_claimAutoreleasedReturnValue();
  v471[29] = v441;
  v472[29] = CFSTR("AssistiveTouchPreferredPointPickerPreference");
  NSStringFromSelector(sel_assistiveTouchAutoScanningEnabled);
  v440 = (void *)objc_claimAutoreleasedReturnValue();
  v471[30] = v440;
  v472[30] = CFSTR("AssistiveTouchAutoScanningEnabled");
  NSStringFromSelector(sel_assistiveTouchGroupElementsEnabled);
  v439 = (void *)objc_claimAutoreleasedReturnValue();
  v471[31] = v439;
  v472[31] = CFSTR("AssistiveTouchScanShouldGroupElements");
  NSStringFromSelector(sel_assistiveTouchScannerCompactMenuEnabled);
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  v471[32] = v438;
  v472[32] = CFSTR("AssistiveTouchScanShouldUseCompactMenu");
  NSStringFromSelector(sel_assistiveTouchScannerMenuLabelsEnabled);
  v437 = (void *)objc_claimAutoreleasedReturnValue();
  v471[33] = v437;
  v472[33] = CFSTR("AssistiveTouchScannerMenuLabelsEnabled");
  NSStringFromSelector(sel_assistiveTouchStepInterval);
  v436 = (void *)objc_claimAutoreleasedReturnValue();
  v471[34] = v436;
  v472[34] = CFSTR("AssistiveTouchStepInterval");
  NSStringFromSelector(sel_assistiveTouchScanCycles);
  v435 = (void *)objc_claimAutoreleasedReturnValue();
  v471[35] = v435;
  v472[35] = CFSTR("AssistiveTouchScanCyclesPreference");
  NSStringFromSelector(sel_assistiveTouchScanTimeout);
  v434 = (void *)objc_claimAutoreleasedReturnValue();
  v471[36] = v434;
  v472[36] = CFSTR("AssistiveTouchScannerScanTimeout");
  NSStringFromSelector(sel_assistiveTouchScannerSoundEnabled);
  v433 = (void *)objc_claimAutoreleasedReturnValue();
  v471[37] = v433;
  v472[37] = CFSTR("AssistiveTouchScannerSoundEnabled");
  NSStringFromSelector(sel_assistiveTouchScannerSpeechRate);
  v432 = (void *)objc_claimAutoreleasedReturnValue();
  v471[38] = v432;
  v472[38] = kAXSAssistiveTouchScannerSpeechRatePreference;
  NSStringFromSelector(sel_assistiveTouchSwitches);
  v431 = (void *)objc_claimAutoreleasedReturnValue();
  v471[39] = v431;
  v472[39] = CFSTR("AssistiveTouchSwitchesPreference");
  NSStringFromSelector(sel_ignoreTrackpad);
  v430 = (void *)objc_claimAutoreleasedReturnValue();
  v471[40] = v430;
  v472[40] = CFSTR("AXSIgnoreTrackpad");
  NSStringFromSelector(sel_assistiveTouchCameraPointPickerSwitches);
  v429 = (void *)objc_claimAutoreleasedReturnValue();
  v471[41] = v429;
  v472[41] = CFSTR("AssistiveTouchCameraPointPickerSwitchesPreference");
  NSStringFromSelector(sel_teachableMomentsNotificationsSeen);
  v428 = (void *)objc_claimAutoreleasedReturnValue();
  v471[42] = v428;
  v472[42] = CFSTR("AXSTeachableMomentsNotificationSeen");
  NSStringFromSelector(sel_teachableMomentsDelayBeforeSending);
  v427 = (void *)objc_claimAutoreleasedReturnValue();
  v471[43] = v427;
  v472[43] = CFSTR("AXSTeachableMomentsDelayBeforeSending");
  NSStringFromSelector(sel_assistiveTouchScannerCursorHighVisibilityEnabled);
  v426 = (void *)objc_claimAutoreleasedReturnValue();
  v471[44] = v426;
  v472[44] = CFSTR("AssistiveTouchCursorHighVisibilityPreference");
  NSStringFromSelector(sel_assistiveTouchInputCoalescingDuration);
  v425 = (void *)objc_claimAutoreleasedReturnValue();
  v471[45] = v425;
  v472[45] = CFSTR("AssistiveTouchInputCoalescingDurationPreference");
  NSStringFromSelector(sel_assistiveTouchInputCoalescingEnabled);
  v424 = (void *)objc_claimAutoreleasedReturnValue();
  v471[46] = v424;
  v472[46] = CFSTR("AssistiveTouchInputCoalescingEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchInputHoldDuration);
  v423 = (void *)objc_claimAutoreleasedReturnValue();
  v471[47] = v423;
  v472[47] = CFSTR("AssistiveTouchInputHoldDurationPreference");
  NSStringFromSelector(sel_assistiveTouchLongPressDuration);
  v422 = (void *)objc_claimAutoreleasedReturnValue();
  v471[48] = v422;
  v472[48] = CFSTR("AssistiveTouchLongPressDurationPreference");
  NSStringFromSelector(sel_assistiveTouchInputHoldEnabled);
  v421 = (void *)objc_claimAutoreleasedReturnValue();
  v471[49] = v421;
  v472[49] = CFSTR("AssistiveTouchInputHoldEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchLongPressEnabled);
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  v471[50] = v420;
  v472[50] = CFSTR("AssistiveTouchLongPressDurationEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchLongPressPauseScanningEnabled);
  v419 = (void *)objc_claimAutoreleasedReturnValue();
  v471[51] = v419;
  v472[51] = CFSTR("AssistiveTouchLongPressPauseScanningEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchDelayAfterInput);
  v418 = (void *)objc_claimAutoreleasedReturnValue();
  v471[52] = v418;
  v472[52] = CFSTR("AssistiveTouchDelayAfterInputPreference");
  NSStringFromSelector(sel_assistiveTouchDelayAfterInputEnabled);
  v417 = (void *)objc_claimAutoreleasedReturnValue();
  v471[53] = v417;
  v472[53] = CFSTR("AssistiveTouchDelayAfterInputEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchAxisSweepSpeed);
  v416 = (void *)objc_claimAutoreleasedReturnValue();
  v471[54] = v416;
  v472[54] = CFSTR("AssistiveTouchAxisSweepSpeed");
  NSStringFromSelector(sel_assistiveTouchActionRepeatInterval);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  v471[55] = v415;
  v472[55] = CFSTR("AssistiveTouchActionRepeatIntervalPreference");
  NSStringFromSelector(sel_assistiveTouchActionRepeatEnabled);
  v414 = (void *)objc_claimAutoreleasedReturnValue();
  v471[56] = v414;
  v472[56] = CFSTR("AssistiveTouchActionRepeatEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchScanTimeoutEnabled);
  v413 = (void *)objc_claimAutoreleasedReturnValue();
  v471[57] = v413;
  v472[57] = CFSTR("AssistiveTouchScannerScanTimeoutEnabled");
  NSStringFromSelector(sel_assistiveTouchCursorColor);
  v412 = (void *)objc_claimAutoreleasedReturnValue();
  v471[58] = v412;
  v472[58] = CFSTR("AssistiveTouchCursorColorPreference");
  NSStringFromSelector(sel_assistiveTouchMousePointerColor);
  v411 = (void *)objc_claimAutoreleasedReturnValue();
  v471[59] = v411;
  v472[59] = CFSTR("AssistiveTouchMousePointerColorPreference");
  NSStringFromSelector(sel_assistiveTouchMousePointerSizeMultiplier);
  v410 = (void *)objc_claimAutoreleasedReturnValue();
  v471[60] = v410;
  v472[60] = CFSTR("AssistiveTouchMousePointerSizeMultiplierPreference");
  NSStringFromSelector(sel_assistiveTouchMousePointerTimeoutEnabled);
  v409 = (void *)objc_claimAutoreleasedReturnValue();
  v471[61] = v409;
  v472[61] = CFSTR("AssistiveTouchMousePointerTimeoutEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchMousePointerTimeout);
  v408 = (void *)objc_claimAutoreleasedReturnValue();
  v471[62] = v408;
  v472[62] = CFSTR("AssistiveTouchMousePointerTimeoutPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlEnabled);
  v407 = (void *)objc_claimAutoreleasedReturnValue();
  v471[63] = v407;
  v472[63] = CFSTR("AssistiveTouchMouseDwellControlEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnabled);
  v406 = (void *)objc_claimAutoreleasedReturnValue();
  v471[64] = v406;
  v472[64] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingOnBoardingCompleted);
  v405 = (void *)objc_claimAutoreleasedReturnValue();
  v471[65] = v405;
  v472[65] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingOnboardingCompletedPreference");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompleted);
  v404 = (void *)objc_claimAutoreleasedReturnValue();
  v471[66] = v404;
  v472[66] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompletedPreference");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingCalibratedValues);
  v403 = (void *)objc_claimAutoreleasedReturnValue();
  v471[67] = v403;
  v472[67] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingCalibratedValuesPreference");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMap);
  v402 = (void *)objc_claimAutoreleasedReturnValue();
  v471[68] = v402;
  v472[68] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMapPreference");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingConfigurable);
  v401 = (void *)objc_claimAutoreleasedReturnValue();
  v471[69] = v401;
  v472[69] = CFSTR("AssistiveTouchForceOnDeviceEyeTrackingExperiencePreference");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize);
  v400 = (void *)objc_claimAutoreleasedReturnValue();
  v471[70] = v400;
  v472[70] = CFSTR("AssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizePreference");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideEnabled);
  v399 = (void *)objc_claimAutoreleasedReturnValue();
  v471[71] = v399;
  v472[71] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideEnabled");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideTimeout);
  v398 = (void *)objc_claimAutoreleasedReturnValue();
  v471[72] = v398;
  v472[72] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideTimeout");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideOpacity);
  v397 = (void *)objc_claimAutoreleasedReturnValue();
  v471[73] = v397;
  v472[73] = CFSTR("AXSAssistiveTouchOnDeviceEyeTrackingAutoHideOpacity");
  NSStringFromSelector(sel_assistiveTouchEnabledByOnDeviceEyeTracking);
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  v471[74] = v396;
  v472[74] = CFSTR("AXSAssistiveTouchEnabledByOnDeviceEyeTracking");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints);
  v395 = (void *)objc_claimAutoreleasedReturnValue();
  v471[75] = v395;
  v472[75] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages);
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  v471[76] = v394;
  v472[76] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseMotionFilter);
  v393 = (void *)objc_claimAutoreleasedReturnValue();
  v471[77] = v393;
  v472[77] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseMotionFilte");
  NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur);
  v392 = (void *)objc_claimAutoreleasedReturnValue();
  v471[78] = v392;
  v472[78] = CFSTR("AssistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur");
  NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategy);
  v391 = (void *)objc_claimAutoreleasedReturnValue();
  v471[79] = v391;
  v472[79] = CFSTR("AssistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategyPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlAutorevertEnabled);
  v390 = (void *)objc_claimAutoreleasedReturnValue();
  v471[80] = v390;
  v472[80] = CFSTR("AssistiveTouchMouseDwellControlAutorevertEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlAutorevertAction);
  v389 = (void *)objc_claimAutoreleasedReturnValue();
  v471[81] = v389;
  v472[81] = CFSTR("AssistiveTouchMouseDwellControlAutorevertActionPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlActivationTimeout);
  v388 = (void *)objc_claimAutoreleasedReturnValue();
  v471[82] = v388;
  v472[82] = CFSTR("AssistiveTouchMouseDwellControlActivationTimeoutPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlMovementToleranceRadius);
  v387 = (void *)objc_claimAutoreleasedReturnValue();
  v471[83] = v387;
  v472[83] = CFSTR("AssistiveTouchMouseDwellControlMovementToleranceRadiusPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlCornerCustomization);
  v386 = (void *)objc_claimAutoreleasedReturnValue();
  v471[84] = v386;
  v472[84] = CFSTR("kAXSAssistiveTouchMouseDwellControlCornerCustomizationPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlMutatedMenu);
  v385 = (void *)objc_claimAutoreleasedReturnValue();
  v471[85] = v385;
  v472[85] = CFSTR("AssistiveTouchMouseDwellControlShowPromptPreference");
  NSStringFromSelector(sel_assistiveTouchMouseDwellControlShowPrompt);
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  v471[86] = v384;
  v472[86] = CFSTR("AssistiveTouchMouseDwellControlShowPromptPreference");
  NSStringFromSelector(sel_assistiveTouchMouseZoomPanningStyle);
  v383 = (void *)objc_claimAutoreleasedReturnValue();
  v471[87] = v383;
  v472[87] = CFSTR("AssistiveTouchMouseZoomPanningStylePreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerConfigurable);
  v382 = (void *)objc_claimAutoreleasedReturnValue();
  v471[88] = v382;
  v472[88] = CFSTR("AssistiveTouchMotionTrackerConfigurablePreference");
  NSStringFromSelector(sel_assistiveTouchForceEyeTrackerExperience);
  v381 = (void *)objc_claimAutoreleasedReturnValue();
  v471[89] = v381;
  v472[89] = CFSTR("AssistiveTouchForceEyeTrackerExperiencePreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerSmoothingBufferSize);
  v380 = (void *)objc_claimAutoreleasedReturnValue();
  v471[90] = v380;
  v472[90] = CFSTR("AssistiveTouchMotionTrackerSmoothingBufferSizePreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerSmoothingMaxDelta);
  v379 = (void *)objc_claimAutoreleasedReturnValue();
  v471[91] = v379;
  v472[91] = CFSTR("AssistiveTouchMotionTrackerSmoothingMaxDeltaPreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerXNormalizationOrder);
  v378 = (void *)objc_claimAutoreleasedReturnValue();
  v471[92] = v378;
  v472[92] = CFSTR("AssistiveTouchMotionTrackerXNormalizationOrderPreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerYNormalizationOrder);
  v377 = (void *)objc_claimAutoreleasedReturnValue();
  v471[93] = v377;
  v472[93] = CFSTR("AssistiveTouchMotionTrackerYNormalizationOrderPreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerXNormalizationOffset);
  v376 = (void *)objc_claimAutoreleasedReturnValue();
  v471[94] = v376;
  v472[94] = CFSTR("AssistiveTouchMotionTrackerXNormalizationOffsetPreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerYNormalizationOffset);
  v375 = (void *)objc_claimAutoreleasedReturnValue();
  v471[95] = v375;
  v472[95] = CFSTR("AssistiveTouchMotionTrackerYNormalizationOffsetPreference");
  NSStringFromSelector(sel_assistiveTouchMotionTrackerShouldOffsetBufferPoints);
  v374 = (void *)objc_claimAutoreleasedReturnValue();
  v471[96] = v374;
  v472[96] = CFSTR("AXSAssistiveTouchMotionTrackerShouldOffsetBufferPointsPreference");
  NSStringFromSelector(sel_assistiveTouchBubbleModeEnabled);
  v373 = (void *)objc_claimAutoreleasedReturnValue();
  v471[97] = v373;
  v472[97] = CFSTR("AXSAssistiveTouchBubbleModeEnabled");
  NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideEnabled);
  v372 = (void *)objc_claimAutoreleasedReturnValue();
  v471[98] = v372;
  v472[98] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideEnabled");
  NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideTimeout);
  v371 = (void *)objc_claimAutoreleasedReturnValue();
  v471[99] = v371;
  v472[99] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideTimeout");
  NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideOpacity);
  v370 = (void *)objc_claimAutoreleasedReturnValue();
  v471[100] = v370;
  v472[100] = CFSTR("AXSAssistiveTouchEyeTrackingAutoHideOpacity");
  NSStringFromSelector(sel_assistiveTouchMouseClickSoundsEnabled);
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  v471[101] = v369;
  v472[101] = CFSTR("AXSAssistiveTouchMouseClickSounds");
  NSStringFromSelector(sel_assistiveTouchHeadMovementSensitivity);
  v368 = (void *)objc_claimAutoreleasedReturnValue();
  v471[102] = v368;
  v472[102] = CFSTR("AssistiveTouchHeadMovementSensitivityPreference");
  NSStringFromSelector(sel_assistiveTouchSwitchUsageConfirmed);
  v367 = (void *)objc_claimAutoreleasedReturnValue();
  v471[103] = v367;
  v472[103] = CFSTR("AXSAssistiveTouchSwitchUsageConfirmedPreference");
  NSStringFromSelector(sel_assistiveTouchCameraSwitchPreviewEnabled);
  v366 = (void *)objc_claimAutoreleasedReturnValue();
  v471[104] = v366;
  v472[104] = CFSTR("AssistiveTouchCameraSwitchPreviewEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchInternalOnlyHiddenNubbitModeEnabled);
  v365 = (void *)objc_claimAutoreleasedReturnValue();
  v471[105] = v365;
  v472[105] = CFSTR("AssistiveTouchInternalOnlyHiddenNubbitModeEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchInternalOnlyPearlTrackingEnabled);
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  v471[106] = v364;
  v472[106] = CFSTR("AssistiveTouchInternalOnlyPearlTrackingEnabledPreference");
  NSStringFromSelector(sel_assistiveTouchScannerAddedTripleClickAutomatically);
  v363 = (void *)objc_claimAutoreleasedReturnValue();
  v471[107] = v363;
  v472[107] = CFSTR("AssistiveTouchAutoAddedTCItem");
  NSStringFromSelector(sel_assistiveTouchMainScreenCustomization);
  v362 = (void *)objc_claimAutoreleasedReturnValue();
  v471[108] = v362;
  v472[108] = CFSTR("AXSAssistiveTouchMainScreenCustomizationPreference");
  NSStringFromSelector(sel_assistiveTouchOrbAction);
  v361 = (void *)objc_claimAutoreleasedReturnValue();
  v471[109] = v361;
  v472[109] = CFSTR("AXSAssistiveTouchOrbPreference");
  NSStringFromSelector(sel_assistiveTouchSingleTapAction);
  v360 = (void *)objc_claimAutoreleasedReturnValue();
  v471[110] = v360;
  v472[110] = CFSTR("AXSAssistiveTouchSingleTapAction");
  NSStringFromSelector(sel_assistiveTouchDoubleTapAction);
  v359 = (void *)objc_claimAutoreleasedReturnValue();
  v471[111] = v359;
  v472[111] = CFSTR("AXSAssistiveTouchDoubleTapAction");
  NSStringFromSelector(sel_assistiveTouchLongPressAction);
  v358 = (void *)objc_claimAutoreleasedReturnValue();
  v471[112] = v358;
  v472[112] = CFSTR("AXSAssistiveTouchLongPressAction");
  NSStringFromSelector(sel_assistiveTouchLongPressActionDuration);
  v357 = (void *)objc_claimAutoreleasedReturnValue();
  v471[113] = v357;
  v472[113] = CFSTR("AXSAssistiveTouchLongPressActionDuration");
  NSStringFromSelector(sel_assistiveTouchDoubleTapActionTimeout);
  v356 = (void *)objc_claimAutoreleasedReturnValue();
  v471[114] = v356;
  v472[114] = CFSTR("AXSAssistiveTouchDoubleTapActionTimeout");
  NSStringFromSelector(sel_assistiveTouchMouseCustomizedClickActions);
  v355 = (void *)objc_claimAutoreleasedReturnValue();
  v471[115] = v355;
  v472[115] = CFSTR("AXSAssistiveTouchMouseCustomizedClickActionsPreference");
  NSStringFromSelector(sel_assistiveTouchEyeTrackerCustomizedSettings);
  v354 = (void *)objc_claimAutoreleasedReturnValue();
  v471[116] = v354;
  v472[116] = CFSTR("AXSAssistiveTouchEyeTrackerCustomizedSettingsPreference");
  NSStringFromSelector(sel_assistiveTouchIdleOpacity);
  v353 = (void *)objc_claimAutoreleasedReturnValue();
  v471[117] = v353;
  v472[117] = CFSTR("AXSAssistiveTouchIdleOpacityPreference");
  NSStringFromSelector(sel_assistiveTouchGameControllerEnabled);
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  v471[118] = v352;
  v472[118] = CFSTR("AXSAssitiveTouchGameControllerPreference");
  NSStringFromSelector(sel_switchControlRecipes);
  v351 = (void *)objc_claimAutoreleasedReturnValue();
  v471[119] = v351;
  v472[119] = CFSTR("SCRecipes");
  NSStringFromSelector(sel_switchControlLaunchRecipeUUID);
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  v471[120] = v350;
  v472[120] = CFSTR("SCLaunchRecipeUUID");
  NSStringFromSelector(sel_switchControlTopLevelMenuItems);
  v349 = (void *)objc_claimAutoreleasedReturnValue();
  v471[121] = v349;
  v472[121] = CFSTR("SCTopLevelMenuItems");
  NSStringFromSelector(sel_switchControlGesturesTopLevelMenuItems);
  v348 = (void *)objc_claimAutoreleasedReturnValue();
  v471[122] = v348;
  v472[122] = CFSTR("SCGesturesTopLevelMenuItems");
  NSStringFromSelector(sel_switchControlDeviceTopLevelMenuItems);
  v347 = (void *)objc_claimAutoreleasedReturnValue();
  v471[123] = v347;
  v472[123] = CFSTR("SCDeviceTopLevelMenuItems");
  NSStringFromSelector(sel_switchControlSettingsTopLevelMenuItems);
  v346 = (void *)objc_claimAutoreleasedReturnValue();
  v471[124] = v346;
  v472[124] = CFSTR("SCSettingsTopLevelMenuItems");
  NSStringFromSelector(sel_switchControlMediaControlsTopLevelMenuItems);
  v345 = (void *)objc_claimAutoreleasedReturnValue();
  v471[125] = v345;
  v472[125] = CFSTR("SCMediaControlsTopLevelMenuItems");
  NSStringFromSelector(sel_switchControlShouldUseShortFirstPage);
  v344 = (void *)objc_claimAutoreleasedReturnValue();
  v471[126] = v344;
  v472[126] = CFSTR("SCShouldUseShortFirstPage");
  NSStringFromSelector(sel_switchControlGesturesMenuItems);
  v343 = (void *)objc_claimAutoreleasedReturnValue();
  v471[127] = v343;
  v472[127] = CFSTR("SCGesturesMenuItems");
  NSStringFromSelector(sel_switchControlDeviceMenuItems);
  v342 = (void *)objc_claimAutoreleasedReturnValue();
  v471[128] = v342;
  v472[128] = CFSTR("SCDeviceMenuItems");
  NSStringFromSelector(sel_switchControlSettingsMenuItems);
  v341 = (void *)objc_claimAutoreleasedReturnValue();
  v471[129] = v341;
  v472[129] = CFSTR("SCSettingsMenuItems");
  NSStringFromSelector(sel_switchControlMediaControlsMenuItems);
  v340 = (void *)objc_claimAutoreleasedReturnValue();
  v471[130] = v340;
  v472[130] = CFSTR("SCMediaControlsMenuItems");
  NSStringFromSelector(sel_switchControlScanningStyle);
  v339 = (void *)objc_claimAutoreleasedReturnValue();
  v471[131] = v339;
  v472[131] = CFSTR("SCScanningStyle");
  NSStringFromSelector(sel_switchControlFirstLaunchScanningMode);
  v338 = (void *)objc_claimAutoreleasedReturnValue();
  v471[132] = v338;
  v472[132] = CFSTR("SCFirstLaunchScanningMode");
  NSStringFromSelector(sel_switchControlDwellTime);
  v337 = (void *)objc_claimAutoreleasedReturnValue();
  v471[133] = v337;
  v472[133] = CFSTR("SCDwellTime");
  NSStringFromSelector(sel_switchControlTapBehavior);
  v336 = (void *)objc_claimAutoreleasedReturnValue();
  v471[134] = v336;
  v472[134] = CFSTR("SCTapBehaviorPreference");
  NSStringFromSelector(sel_switchControlAutoTapTimeout);
  v335 = (void *)objc_claimAutoreleasedReturnValue();
  v471[135] = v335;
  v472[135] = CFSTR("AssistiveTouchScannerSelectTimeout");
  NSStringFromSelector(sel_switchControlShouldAlwaysActivateKeyboardKeys);
  v334 = (void *)objc_claimAutoreleasedReturnValue();
  v471[136] = v334;
  v472[136] = CFSTR("SCShouldAlwaysActivateKeyboardKeys");
  NSStringFromSelector(sel_switchControlIsEnabledAsReceiver);
  v333 = (void *)objc_claimAutoreleasedReturnValue();
  v471[137] = v333;
  v472[137] = CFSTR("SCIsEnabledAsReceiver");
  NSStringFromSelector(sel_switchControlScanAfterTapLocation);
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  v471[138] = v332;
  v472[138] = CFSTR("SCScanAfterTapLocation");
  NSStringFromSelector(sel_switchControlRestartScanningAtCurrentKey);
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  v471[139] = v331;
  v472[139] = CFSTR("SCRestartScanningAtCurrentKey");
  NSStringFromSelector(sel_switchControlIgnoreInvalidSwitchConfiguration);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  v471[140] = v330;
  v472[140] = CFSTR("SCIgnoreInvalidSwitchConfiguration");
  NSStringFromSelector(sel_switchControlPointPickerSelectionStyle);
  v329 = (void *)objc_claimAutoreleasedReturnValue();
  v471[141] = v329;
  v472[141] = CFSTR("SCSwitchControlPointPickerSelectionStyle");
  NSStringFromSelector(sel_switchControlShouldDisallowUSBRestrictedMode);
  v328 = (void *)objc_claimAutoreleasedReturnValue();
  v471[142] = v328;
  v472[142] = CFSTR("SCShouldDisallowUSBRestrictedMode");
  NSStringFromSelector(sel_switchControlUserDidReadUSBRestrictedModeAlert);
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  v471[143] = v327;
  v472[143] = CFSTR("SCUserDidReadUSBRestrictedModeAlert");
  NSStringFromSelector(sel_securePayAssertionActive);
  v326 = (void *)objc_claimAutoreleasedReturnValue();
  v471[144] = v326;
  v472[144] = CFSTR("AXSSecurePayAssertionActive");
  NSStringFromSelector(sel_switchControlDebugLoggingEnabled);
  v325 = (void *)objc_claimAutoreleasedReturnValue();
  v471[145] = v325;
  v472[145] = CFSTR("SCDebugLoggingEnabled");
  NSStringFromSelector(sel_switchControlUseCameraForPointMode);
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  v471[146] = v324;
  v472[146] = CFSTR("SCUseCameraForPointPicker");
  NSStringFromSelector(sel_switchControlCameraPointPickerSensitivity);
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  v471[147] = v323;
  v472[147] = CFSTR("SCCameraPointPickerSensitivity");
  NSStringFromSelector(sel_switchControlCameraPointPickerMovementToleranceInJoystickMode);
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  v471[148] = v322;
  v472[148] = CFSTR("SCCameraPointPickerMovementToleranceInJoystickMode");
  NSStringFromSelector(sel_switchControlCameraPointPickerMode);
  v321 = (void *)objc_claimAutoreleasedReturnValue();
  v471[149] = v321;
  v472[149] = CFSTR("SCCameraPointPickerMode");
  NSStringFromSelector(sel_switchControlCameraPointPickerDwellActivationTimeout);
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  v471[150] = v320;
  v472[150] = CFSTR("SCCameraPointPickerDwellActivationTimeoutPreference");
  NSStringFromSelector(sel_switchControlCameraPointPickerDwellMovementToleranceRadius);
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  v471[151] = v319;
  v472[151] = CFSTR("SCCameraPointPickerDwellMovementToleranceRadiusPreference");
  NSStringFromSelector(sel_hapticMusicActive);
  v318 = (void *)objc_claimAutoreleasedReturnValue();
  v471[152] = v318;
  v472[152] = CFSTR("AXSHapticMusicActive");
  NSStringFromSelector(sel_hapticMusicToggledInPreferences);
  v317 = (void *)objc_claimAutoreleasedReturnValue();
  v471[153] = v317;
  v472[153] = CFSTR("AXSHapticMusicToggledInPreferences");
  NSStringFromSelector(sel_hapticMusicEnhancedVocals);
  v316 = (void *)objc_claimAutoreleasedReturnValue();
  v471[154] = v316;
  v472[154] = CFSTR("AXSHapticMusicEnhancedVocals");
  NSStringFromSelector(sel_hapticMusicEnhancedPercussion);
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  v471[155] = v315;
  v472[155] = CFSTR("AXSHapticMusicEnhancedPercussion");
  NSStringFromSelector(sel_hapticMusicAlgorithmSelection);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  v471[156] = v314;
  v472[156] = CFSTR("AXSHapticMusicAlgorithmSelection");
  NSStringFromSelector(sel_hapticMusicUsagePerDay);
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  v471[157] = v313;
  v472[157] = CFSTR("AXSHapticMusicUsagePerDay");
  NSStringFromSelector(sel_hapticMusicUsageStartDate);
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  v471[158] = v312;
  v472[158] = CFSTR("AXSHapticMusicUsageStartDate");
  NSStringFromSelector(sel_hoverTextScrollingSpeed);
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  v471[159] = v311;
  v472[159] = CFSTR("HoverTextScrollingSpeed");
  NSStringFromSelector(sel_hoverTextShowedBanner);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  v471[160] = v310;
  v472[160] = CFSTR("HoverTextShowedBanner");
  NSStringFromSelector(sel_hoverTextTypingShowedBanner);
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  v471[161] = v309;
  v472[161] = CFSTR("HoverTextTypingShowedBanner");
  NSStringFromSelector(sel_supportsAdvancedDisplayFilters);
  v308 = (void *)objc_claimAutoreleasedReturnValue();
  v471[162] = v308;
  v472[162] = CFSTR("kAXSupportsAdvancedDisplayFiltersPreference");
  NSStringFromSelector(sel_zoomPreferencesWereInitialized);
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  v471[163] = v307;
  v472[163] = CFSTR("ZoomPreferencesWereInitialized");
  NSStringFromSelector(sel_zoomWindowFrame);
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  v471[164] = v306;
  v472[164] = CFSTR("ZoomWindowFrame");
  NSStringFromSelector(sel_dockSize);
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  v471[165] = v305;
  v472[165] = CFSTR("DockSize");
  NSStringFromSelector(sel_zoomScale);
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  v471[166] = v304;
  v472[166] = CFSTR("ZoomScale");
  NSStringFromSelector(sel_zoomPanOffset);
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  v471[167] = v303;
  v472[167] = CFSTR("ZoomPanOffset");
  NSStringFromSelector(sel_zoomSlugNormalizedPosition);
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  v471[168] = v302;
  v472[168] = CFSTR("ZoomSlugPosition");
  NSStringFromSelector(sel_zoomCurrentLensEffect);
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  v471[169] = v301;
  v472[169] = CFSTR("ZoomCurrentLensEffect");
  NSStringFromSelector(sel_zoomCurrentLensMode);
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  v471[170] = v300;
  v472[170] = CFSTR("ZoomCurrentLensMode");
  NSStringFromSelector(sel_zoomPeekZoomEnabled);
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  v471[171] = v299;
  v472[171] = CFSTR("ZoomPeekZoomEnabled");
  NSStringFromSelector(sel_zoomPeekZoomEverEnabled);
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  v471[172] = v298;
  v472[172] = CFSTR("ZoomPeekZoomEverEnabled");
  NSStringFromSelector(sel_zoomShouldFollowFocus);
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  v471[173] = v297;
  v472[173] = CFSTR("ZoomShouldFollowFocus");
  NSStringFromSelector(sel_zoomShouldShowSlug);
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  v471[174] = v296;
  v472[174] = CFSTR("ZoomShouldShowSlug");
  NSStringFromSelector(sel_zoomSlugSingleTapAction);
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  v471[175] = v295;
  v472[175] = CFSTR("ZoomSlugSingleTapAction");
  NSStringFromSelector(sel_zoomSlugDoubleTapAction);
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  v471[176] = v294;
  v472[176] = CFSTR("ZoomSlugDoubleTapAction");
  NSStringFromSelector(sel_zoomSlugTripleTapAction);
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  v471[177] = v293;
  v472[177] = CFSTR("ZoomSlugTripleTapAction");
  NSStringFromSelector(sel_zoomSlugTapAndSlideToAdjustZoomLevelEnabled);
  v292 = (void *)objc_claimAutoreleasedReturnValue();
  v471[178] = v292;
  v472[178] = CFSTR("ZoomSlugTapAndSlideToAdjustZoomLevel");
  NSStringFromSelector(sel_zoomAlwaysUseWindowedZoomForTyping);
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v471[179] = v291;
  v472[179] = CFSTR("ZoomAlwaysUseWindowZoomForTyping");
  NSStringFromSelector(sel_zoomPreferredCurrentLensMode);
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  v471[180] = v290;
  v472[180] = CFSTR("ZoomPreferredLensMode");
  NSStringFromSelector(sel_zoomPreferredCurrentDockPosition);
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  v471[181] = v289;
  v472[181] = CFSTR("ZoomPreferredDockPosition");
  NSStringFromSelector(sel_zoomPreferredMaximumZoomScale);
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  v471[182] = v288;
  v472[182] = CFSTR("ZoomPreferredMaximumZoomScale");
  NSStringFromSelector(sel_zoomPreferredLensModes);
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  v471[183] = v287;
  v472[183] = CFSTR("ZoomPreferredLensModes");
  NSStringFromSelector(sel_zoomPreferredDockPositions);
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  v471[184] = v286;
  v472[184] = CFSTR("ZoomPreferredDockPositions");
  NSStringFromSelector(sel_zoomIdleSlugOpacity);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  v471[185] = v285;
  v472[185] = CFSTR("ZoomIdleSlugOpacity");
  NSStringFromSelector(sel_zoomControllerColor);
  v284 = (void *)objc_claimAutoreleasedReturnValue();
  v471[186] = v284;
  v472[186] = CFSTR("ZoomControllerColorPreference");
  NSStringFromSelector(sel_zoomPreferredAudioDestination);
  v283 = (void *)objc_claimAutoreleasedReturnValue();
  v471[187] = v283;
  v472[187] = CFSTR("ZoomAudioDestination");
  NSStringFromSelector(sel_zoomShouldAllowFullscreenAutopanning);
  v282 = (void *)objc_claimAutoreleasedReturnValue();
  v471[188] = v282;
  v472[188] = CFSTR("ZoomShouldAllowFullscreenAutopanning");
  NSStringFromSelector(sel_zoomInStandby);
  v281 = (void *)objc_claimAutoreleasedReturnValue();
  v471[189] = v281;
  v472[189] = CFSTR("ZoomInStandby");
  NSStringFromSelector(sel_zoomShowedBanner);
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  v471[190] = v280;
  v472[190] = CFSTR("ZoomShowedBanner");
  NSStringFromSelector(sel_zoomKeyboardShortcutsEnabled);
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  v471[191] = v279;
  v472[191] = CFSTR("ZoomShouldUseKeyboardShortcutsPreference");
  NSStringFromSelector(sel_zoomAdjustZoomLevelKbShortcutEnabled);
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  v471[192] = v278;
  v472[192] = CFSTR("ZoomAdjustZoomLevelKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomToggleZoomKbShortcutEnabled);
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  v471[193] = v277;
  v472[193] = CFSTR("ZoomToggleZoomKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomPanZoomKbShortcutEnabled);
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  v471[194] = v276;
  v472[194] = CFSTR("ZoomPanZoomKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomResizeZoomWindowKbShortcutEnabled);
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  v471[195] = v275;
  v472[195] = CFSTR("ZoomResizeZoomWindowKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomSwitchZoomModeKbShortcutEnabled);
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  v471[196] = v274;
  v472[196] = CFSTR("ZoomSwitchZoomModeKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomTempToggleZoomKbShortcutEnabled);
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  v471[197] = v273;
  v472[197] = CFSTR("ZoomTempToggleZoomKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomScrollWheelKbShortcutEnabled);
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  v471[198] = v272;
  v472[198] = CFSTR("ZoomScrollWheelKeyboardShortcutEnabledPreference");
  NSStringFromSelector(sel_zoomTrackpadGestureEnabled);
  v271 = (void *)objc_claimAutoreleasedReturnValue();
  v471[199] = v271;
  v472[199] = CFSTR("kAXZoomTrackpadGestureEnabledPreference");
  NSStringFromSelector(sel_zoomAutopannerShouldPanWithAcceleration);
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  v471[200] = v270;
  v472[200] = CFSTR("ZoomAutopannerShouldPanWithAccelerationPreference");
  NSStringFromSelector(sel_zoomDebugDisableZoomLensScaleTransform);
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  v471[201] = v269;
  v472[201] = CFSTR("ZoomDebugDisableZoomLensScaleTransform");
  NSStringFromSelector(sel_zoomDebugShowExternalFocusRect);
  v268 = (void *)objc_claimAutoreleasedReturnValue();
  v471[202] = v268;
  v472[202] = CFSTR("ZoomDebugShowExternalFocusRectPreference");
  NSStringFromSelector(sel_zoomShowWhileMirroring);
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  v471[203] = v267;
  v472[203] = CFSTR("ZoomShowZoomWhileMirroringPreference");
  NSStringFromSelector(sel_guidedAccessUsageCount);
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  v471[204] = v266;
  v472[204] = CFSTR("GuidedAccessUsageCount");
  NSStringFromSelector(sel_guidedAccessAXFeaturesEnabled);
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  v471[205] = v265;
  v472[205] = CFSTR("kAXSGuidedAccessAXFeaturesEnabled");
  NSStringFromSelector(sel_guidedAccessAllowsUnlockWithTouchID);
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  v471[206] = v264;
  v472[206] = CFSTR("GuidedAccessAllowsUnlockWithTouchID");
  NSStringFromSelector(sel_guidedAccessToneIdentifierForTimeRestrictionEvents);
  v263 = (void *)objc_claimAutoreleasedReturnValue();
  v471[207] = v263;
  v472[207] = CFSTR("GuidedAccessToneIdentifierForTimeRestrictionEvent");
  NSStringFromSelector(sel_guidedAccessShouldSpeakForTimeRestrictionEvents);
  v262 = (void *)objc_claimAutoreleasedReturnValue();
  v471[208] = v262;
  v472[208] = CFSTR("GuidedAccessSpeakForTimeRestrictionEvent");
  NSStringFromSelector(sel_guidedAccessOverrideIdleTime);
  v261 = (void *)objc_claimAutoreleasedReturnValue();
  v471[209] = v261;
  v472[209] = CFSTR("kAXSGuidedAccessOverrideIdleTimePreference");
  NSStringFromSelector(sel_guidedAccessAutoLockTimeInSeconds);
  v260 = (void *)objc_claimAutoreleasedReturnValue();
  v471[210] = v260;
  v472[210] = CFSTR("GuidedAccessAutoLockTimeInSeconds");
  NSStringFromSelector(sel_guidedAccessUserPrefersMirroringForExternalDisplays);
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  v471[211] = v259;
  v472[211] = CFSTR("GuidedAccessUserPrefersMirroringForExternalDisplays");
  NSStringFromSelector(sel_gaxInternalSettingsUserAppProfile);
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  v471[212] = v258;
  v472[212] = CFSTR("GAXInternalSettingUserAppProfile");
  NSStringFromSelector(sel_gaxInternalSettingsUserGlobalProfile);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  v471[213] = v257;
  v472[213] = CFSTR("GAXInternalSettingUserGlobalProfile");
  NSStringFromSelector(sel_gaxInternalSettingsSavedAccessibilityFeatures);
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v471[214] = v256;
  v472[214] = CFSTR("GAXGlobalProfileSavedAXFeatures");
  NSStringFromSelector(sel_gaxInternalSettingsSavedAccessibilityTripleClickOptions);
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v471[215] = v255;
  v472[215] = CFSTR("GAXGlobalProfileSavedAXTripleClickOptions");
  NSStringFromSelector(sel_gaxInternalSettingsUserConfiguredAppIDs);
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  v471[216] = v254;
  v472[216] = CFSTR("GAXGlobalProfileUserConfiguredAppIds");
  NSStringFromSelector(sel_gaxInternalSettingsActiveAppOrientation);
  v253 = (void *)objc_claimAutoreleasedReturnValue();
  v471[217] = v253;
  v472[217] = CFSTR("GAXGlobalProfileActiveAppOrientation");
  NSStringFromSelector(sel_gaxInternalSettingsActiveAppID);
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  v471[218] = v252;
  v472[218] = CFSTR("GAXGlobalProfileActiveAppID");
  NSStringFromSelector(sel_gaxInternalSettingsIsActiveAppSelfLocked);
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  v471[219] = v251;
  v472[219] = CFSTR("AXGAXInternalSettingIsActiveAppSelfLocked");
  NSStringFromSelector(sel_gaxInternalSettingsTimeRestrictionHasExpired);
  v250 = (void *)objc_claimAutoreleasedReturnValue();
  v471[220] = v250;
  v472[220] = CFSTR("GAXInternalSettingTimeRestrictionHasExpired");
  NSStringFromSelector(sel_gaxInternalSettingsSystemDidRestartDueToLowBattery);
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  v471[221] = v249;
  v472[221] = CFSTR("GAXGlobalProfileSystemDidRestartDueToLowBattery");
  NSStringFromSelector(sel_gaxInternalSettingsECID);
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v471[222] = v248;
  v472[222] = CFSTR("GAXGlobalProfileECID");
  NSStringFromSelector(sel_gaxInternalSettingsProductBuildVersion);
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  v471[223] = v247;
  v472[223] = CFSTR("GAXGlobalProfileProductBuildVersion");
  NSStringFromSelector(sel_gaxInternalSettingsLastActivationDate);
  v246 = (void *)objc_claimAutoreleasedReturnValue();
  v471[224] = v246;
  v472[224] = CFSTR("GAXGlobalProfileLastActivationDate");
  NSStringFromSelector(sel_gaxInternalSettingsLastPasscodeSetDate);
  v245 = (void *)objc_claimAutoreleasedReturnValue();
  v471[225] = v245;
  v472[225] = CFSTR("GAXGlobalProfileLastPasscodeSetDate");
  NSStringFromSelector(sel_internalLoggingColorTheme);
  v244 = (void *)objc_claimAutoreleasedReturnValue();
  v471[226] = v244;
  v472[226] = CFSTR("InternalLoggingColorThemePreference");
  NSStringFromSelector(sel_validateSecondPartyApps);
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  v471[227] = v243;
  v472[227] = CFSTR("ValidateSecondPartyApps");
  NSStringFromSelector(sel_includeBacktraceInLogs);
  v242 = (void *)objc_claimAutoreleasedReturnValue();
  v471[228] = v242;
  v472[228] = CFSTR("IncludeBacktraceInLogs");
  NSStringFromSelector(sel_ignoreAXAsserts);
  v241 = (void *)objc_claimAutoreleasedReturnValue();
  v471[229] = v241;
  v472[229] = CFSTR("IgnoreAXAsserts");
  NSStringFromSelector(sel_ignoreAXServerEntitlements);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  v471[230] = v240;
  v472[230] = CFSTR("IgnoreAXServerEntitlements");
  NSStringFromSelector(sel_logAXNotificationPosting);
  v239 = (void *)objc_claimAutoreleasedReturnValue();
  v471[231] = v239;
  v472[231] = CFSTR("LogAXNotificationPosting");
  NSStringFromSelector(sel_useNewAXBundleLoader);
  v238 = (void *)objc_claimAutoreleasedReturnValue();
  v471[232] = v238;
  v472[232] = CFSTR("UseNewAXBundleLoader");
  NSStringFromSelector(sel_shouldPerformValidationsAtRuntime);
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  v471[233] = v237;
  v472[233] = CFSTR("shouldPerformValidationsAtRuntime");
  NSStringFromSelector(sel_skipHearingAidMFiAuth);
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v471[234] = v236;
  v472[234] = CFSTR("InternalSkipHearingAidMFiAuth");
  NSStringFromSelector(sel_enableHearingAidReporter);
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  v471[235] = v235;
  v472[235] = CFSTR("InternalEnableHearingAidReporter");
  NSStringFromSelector(sel_guidedAccessDisallowDirectInactiveToActiveTransition);
  v234 = (void *)objc_claimAutoreleasedReturnValue();
  v471[236] = v234;
  v472[236] = CFSTR("AXSInternalGuidedAccessDisallowDirectInactiveToActiveTransition");
  NSStringFromSelector(sel_guidedAccessOverrideTimeRestrictionDuration);
  v233 = (void *)objc_claimAutoreleasedReturnValue();
  v471[237] = v233;
  v472[237] = CFSTR("AXSInternalGuidedAccessOverrideTimeRestrictionDuration");
  NSStringFromSelector(sel_guidedAccessEnableExperimentalUI);
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  v471[238] = v232;
  v472[238] = CFSTR("AXSInternalGuidedAccessEnableExperimentalUI");
  NSStringFromSelector(sel_speakCorrectionsEnabled);
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  v471[239] = v231;
  v472[239] = CFSTR("SpeakCorrectionsEnabled");
  NSStringFromSelector(sel_tripleClickOrderedOptions);
  v230 = (void *)objc_claimAutoreleasedReturnValue();
  v471[240] = v230;
  v472[240] = CFSTR("AXSTripleClickUserOrderedPreference");
  NSStringFromSelector(sel__audioHardwareChannelLayout);
  v229 = (void *)objc_claimAutoreleasedReturnValue();
  v471[241] = v229;
  v472[241] = CFSTR("AXSAudioHardwareChannelLayoutsPreference");
  NSStringFromSelector(sel_showSpeechController);
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v471[242] = v228;
  v472[242] = CFSTR("ShowSpeechController");
  NSStringFromSelector(sel_speechControllerIdleOpacity);
  v227 = (void *)objc_claimAutoreleasedReturnValue();
  v471[243] = v227;
  v472[243] = CFSTR("SpeechControllerIdleOpacity");
  NSStringFromSelector(sel_speechControllerLongPressAction);
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  v471[244] = v226;
  v472[244] = CFSTR("SpeechControllerLongPressAction");
  NSStringFromSelector(sel_speechControllerDoubleTapAction);
  v225 = (void *)objc_claimAutoreleasedReturnValue();
  v471[245] = v225;
  v472[245] = CFSTR("SpeechControllerDoubleTapAction");
  NSStringFromSelector(sel_quickSpeakSpeakingRate);
  v224 = (void *)objc_claimAutoreleasedReturnValue();
  v471[246] = v224;
  v472[246] = CFSTR("QuickSpeakRate");
  NSStringFromSelector(sel_quickSpeakSpeakingRateForLanguage_);
  v223 = (void *)objc_claimAutoreleasedReturnValue();
  v471[247] = v223;
  v472[247] = CFSTR("QuickSpeakLanguageSpeakingRate");
  NSStringFromSelector(sel_quickSpeakHighlightOption);
  v222 = (void *)objc_claimAutoreleasedReturnValue();
  v471[248] = v222;
  v472[248] = CFSTR("QuickSpeakHighlightChoice");
  NSStringFromSelector(sel_quickSpeakWordHighlightColor);
  v221 = (void *)objc_claimAutoreleasedReturnValue();
  v471[249] = v221;
  v472[249] = CFSTR("AXSQuickSpeakWordHighlightColorPreference");
  NSStringFromSelector(sel_quickSpeakSentenceHighlightColor);
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  v471[250] = v220;
  v472[250] = CFSTR("AXSQuickSpeakSentenceHighlightColorPreference");
  NSStringFromSelector(sel_quickSpeakUnderlineSentence);
  v219 = (void *)objc_claimAutoreleasedReturnValue();
  v471[251] = v219;
  v472[251] = CFSTR("QuickSpeakUnderlineSentence");
  NSStringFromSelector(sel_quickSpeakVolume);
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  v471[252] = v218;
  v472[252] = CFSTR("QuickSpeakVolume");
  NSStringFromSelector(sel_quickSpeakSentenceHighlightOption);
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  v471[253] = v217;
  v472[253] = CFSTR("QuickSpeakSentenceHighlight");
  NSStringFromSelector(sel_speechVoiceIdentifierForLanguage);
  v216 = (void *)objc_claimAutoreleasedReturnValue();
  v471[254] = v216;
  v472[254] = CFSTR("SpeechVoiceIdentifierForLanguage");
  NSStringFromSelector(sel_userDidSelectVoiceForLanguage);
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  v471[255] = v215;
  v472[255] = CFSTR("UserDidSelectVoiceForLanguage");
  NSStringFromSelector(sel_quickSpeakNubbitNormalizedPosition);
  v214 = (void *)objc_claimAutoreleasedReturnValue();
  v471[256] = v214;
  v472[256] = CFSTR("QuickSpeakNubbitNormalizedPosition");
  NSStringFromSelector(sel_siriAutoUpdateListInitialized);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v471[257] = v213;
  v472[257] = CFSTR("SiriAutoUpdateListInitializedPreference");
  NSStringFromSelector(sel_letterFeedbackEnabled);
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  v471[258] = v212;
  v472[258] = CFSTR("LetterFeedbackEnabled");
  NSStringFromSelector(sel_phoneticFeedbackEnabled);
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  v471[259] = v211;
  v472[259] = CFSTR("PhoneticFeedbackEnabled");
  NSStringFromSelector(sel_quickTypeWordFeedbackEnabled);
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  v471[260] = v210;
  v472[260] = CFSTR("QuickTypeWordFeedback");
  NSStringFromSelector(sel_wordFeedbackEnabled);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v471[261] = v209;
  v472[261] = CFSTR("WordFeedbackEnabled");
  NSStringFromSelector(sel_characterFeedbackDelayDuration);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  v471[262] = v208;
  v472[262] = CFSTR("CharacterFeedbackDelayPreference");
  NSStringFromSelector(sel_spokenContentDefaultFallbackLanguage);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v471[263] = v207;
  v472[263] = CFSTR("SpokenContentDefaultFallbackLanguage");
  NSStringFromSelector(sel_spokenContentShouldUseLanguageDetection);
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  v471[264] = v206;
  v472[264] = CFSTR("SpokenContentShouldUseLanguageDetection");
  NSStringFromSelector(sel_voiceOverHelpMode);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v471[265] = v205;
  v472[265] = CFSTR("VoiceOverTouchHelpModePreference");
  NSStringFromSelector(sel_voiceOverNavigateImagesOption);
  v204 = (void *)objc_claimAutoreleasedReturnValue();
  v471[266] = v204;
  v472[266] = CFSTR("NavigateImagesPreference");
  NSStringFromSelector(sel_voiceOverPhoneticsFeedback);
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v471[267] = v203;
  v472[267] = CFSTR("VoiceOverTouchPhoneticsEnabledPreference");
  NSStringFromSelector(sel_voiceOverHardwareTypingFeedback);
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  v471[268] = v202;
  v472[268] = CFSTR("VoiceOverTouchTypingHardwareFeedback");
  NSStringFromSelector(sel_voiceOverSoftwareTypingFeedback);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  v471[269] = v201;
  v472[269] = CFSTR("VoiceOverTouchTypingFeedback");
  NSStringFromSelector(sel_voiceOverBrailleGesturesTypingFeedback);
  v200 = (void *)objc_claimAutoreleasedReturnValue();
  v471[270] = v200;
  v472[270] = CFSTR("VoiceOverTouchTypingBrailleGesturesFeedback");
  NSStringFromSelector(sel_voiceOverCompactVoiceEnabled);
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  v471[271] = v199;
  v472[271] = CFSTR("VoiceOverTouchPitchCompactVoice");
  NSStringFromSelector(sel_voiceOverHintsEnabled);
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v471[272] = v198;
  v472[272] = CFSTR("VoiceOverTouchHintsEnabled");
  NSStringFromSelector(sel_voiceOverPitch);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  v471[273] = v197;
  v472[273] = kAXSVoiceOverPitchPreference;
  NSStringFromSelector(sel_voiceOverSoundEffectsEnabled);
  v196 = (void *)objc_claimAutoreleasedReturnValue();
  v471[274] = v196;
  v472[274] = CFSTR("VoiceOverUseSoundEffects");
  NSStringFromSelector(sel_voiceOverHapticsEnabled);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v471[275] = v195;
  v472[275] = CFSTR("VoiceOverHapticsEnabled");
  NSStringFromSelector(sel_voiceOverAlwaysTurnOnBluetooth);
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  v471[276] = v194;
  v472[276] = CFSTR("AXSVoiceOverTurnOnBluetoothEnabled");
  NSStringFromSelector(sel_voiceOverSoundVolume);
  v193 = (void *)objc_claimAutoreleasedReturnValue();
  v471[277] = v193;
  v472[277] = CFSTR("VoiceOverSoundVolume");
  NSStringFromSelector(sel_voiceOverAdjustSoundVolumeIndependently);
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v471[278] = v192;
  v472[278] = CFSTR("VoiceOverAdjustSoundVolumeIndependently");
  NSStringFromSelector(sel_voiceOverHapticIntensity);
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  v471[279] = v191;
  v472[279] = CFSTR("VoiceOverHapticIntensity");
  NSStringFromSelector(sel_voiceOverVerbosityEmojiSuffixEnabled);
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  v471[280] = v190;
  v472[280] = CFSTR("VoiceOverVerbosityEmojiSuffixEnabledPreference");
  NSStringFromSelector(sel_voiceOverVerbosityEmojiFeedback);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  v471[281] = v189;
  v472[281] = CFSTR("VoiceOverVerbosityEmojiFeedbackPreference");
  NSStringFromSelector(sel_voiceOverSpeakingRateInRotorEnabled);
  v188 = (void *)objc_claimAutoreleasedReturnValue();
  v471[282] = v188;
  v472[282] = CFSTR("SpeakingRateInRotorEnabled");
  NSStringFromSelector(sel_voiceOverSpeakNotificationsEnabled);
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  v471[283] = v187;
  v472[283] = CFSTR("SpeakNotificationInLockScreen");
  NSStringFromSelector(sel_voiceOverRotorItems);
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  v471[284] = v186;
  v472[284] = CFSTR("VoiceOverTouchRotorItemsPreference");
  NSStringFromSelector(sel_voiceOverEditAppsActionEnabled);
  v185 = (void *)objc_claimAutoreleasedReturnValue();
  v471[285] = v185;
  v472[285] = CFSTR("VoiceOverEditAppsActionEnabledPreference");
  NSStringFromSelector(sel_voiceOverRotorUpdatesWithElement);
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  v471[286] = v184;
  v472[286] = CFSTR("AXSVoiceOverRotorUpdatesWithElementPreference");
  NSStringFromSelector(sel_voiceOverSpeakActionConfirmation);
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  v471[287] = v183;
  v472[287] = CFSTR("VoiceOverSpeakActionConfirmationPreference");
  NSStringFromSelector(sel_voiceOverQuickNavAnnouncementFeedback);
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  v471[288] = v182;
  v472[288] = CFSTR("VoiceOverQuickNavAnnouncementFeedback");
  NSStringFromSelector(sel_voiceOverBrailleTableIdentifier);
  v181 = (void *)objc_claimAutoreleasedReturnValue();
  v471[289] = v181;
  v472[289] = CFSTR("voiceOverBrailleTableIdentifier");
  NSStringFromSelector(sel_voiceOverAlwaysUseNemethCodeForMathEnabled);
  v180 = (void *)objc_claimAutoreleasedReturnValue();
  v471[290] = v180;
  v472[290] = CFSTR("voiceOverAlwaysUseNemethCodeForMathEnabled");
  NSStringFromSelector(sel_voiceOverDefaultDialect);
  v179 = (void *)objc_claimAutoreleasedReturnValue();
  v471[291] = v179;
  v472[291] = CFSTR("com.apple.voiceovertouch.default.dialect");
  NSStringFromSelector(sel_voiceOverHandwritingWasNativeAutocorrectEnabled);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  v471[292] = v178;
  v472[292] = CFSTR("VoiceOverHandwritingWasNativeAutocorrectEnabled");
  NSStringFromSelector(sel_voiceOverSpeakingRateForLanguage_);
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  v471[293] = v177;
  v472[293] = CFSTR("VoiceOverLanguageSpeakingRate");
  NSStringFromSelector(sel_voiceOverSpeakingRate);
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v471[294] = v176;
  v472[294] = *MEMORY[0x1E0DDE320];
  NSStringFromSelector(sel_voiceOverActivationWorkaround);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  v471[295] = v175;
  v472[295] = CFSTR("VOActivationWorkaround");
  NSStringFromSelector(sel_voiceOverShowSoftwareKeyboardWithBraille);
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  v471[296] = v174;
  v472[296] = CFSTR("VoiceOverShowSWKeyboardWithBraille");
  NSStringFromSelector(sel_voiceOverBrailleGradeTwoAutoTranslateEnabled);
  v173 = (void *)objc_claimAutoreleasedReturnValue();
  v471[297] = v173;
  v472[297] = CFSTR("VoiceOverShowGrade2AutoTranslate");
  NSStringFromSelector(sel_voiceOverSilenceAnnouncements);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  v471[298] = v172;
  v472[298] = CFSTR("VoiceOverSilenceAnnouncements");
  NSStringFromSelector(sel_voiceOverPreferredTVInteractionMode);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v471[299] = v171;
  v472[299] = CFSTR("VoiceOverTouchTVInteractionMode");
  NSStringFromSelector(sel_voiceOverPrefersFollowFocusNavigationStyle);
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  v471[300] = v170;
  v472[300] = CFSTR("VoiceOverTouchTVPrefersFollowFocusNavigationStyle");
  NSStringFromSelector(sel_voiceOverDescribedMedia);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  v471[301] = v169;
  v472[301] = CFSTR("VoiceOverTouchDescribedMedia");
  NSStringFromSelector(sel_voiceOverQuickSettings);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v471[302] = v168;
  v472[302] = CFSTR("QuickSettings");
  NSStringFromSelector(sel_voiceOverCustomCommandProfile);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v471[303] = v167;
  v472[303] = CFSTR("VoiceOverCustomCammndProfile");
  NSStringFromSelector(sel_voiceOverSpeakNonfocusableElementsAfterDelay);
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v471[304] = v166;
  v472[304] = CFSTR("VoiceOverSpeakNonfocusableElementsAfterDelay");
  NSStringFromSelector(sel_voiceOverExploreFocusAffectsNativeFocus);
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  v471[305] = v165;
  v472[305] = CFSTR("VoiceOverExploreFocusAffectsNativeFocus");
  NSStringFromSelector(sel_voiceOverShouldOutputToHearingAid);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  v471[306] = v164;
  v472[306] = CFSTR("VoiceOverOutputToHearingAid");
  NSStringFromSelector(sel_customPronunciationSubstitutions);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v471[307] = v163;
  v472[307] = kAXSCustomPronunciationSubstitutionsPreference;
  NSStringFromSelector(sel_voiceOverAlternativeVoiceIdentifier_);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v471[308] = v162;
  v472[308] = CFSTR("AXSVoiceOverAlternativeVoicesPreference");
  NSStringFromSelector(sel_voiceOverPrefersCompact_);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  v471[309] = v161;
  v472[309] = CFSTR("AXSVoiceOverCompactVoicePreference");
  NSStringFromSelector(sel_voiceOverAudioDuckingEnabled);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v471[310] = v160;
  v472[310] = CFSTR("VoiceOverTouchAudioDuckingEnabled");
  NSStringFromSelector(sel_voiceOverAudioFollowsHDMIAudio);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v471[311] = v159;
  v472[311] = CFSTR("VoiceOverAudioFollowsHDMIAudio");
  NSStringFromSelector(sel_voiceOverIgnoreTrackpad);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v471[312] = v158;
  v472[312] = CFSTR("VoiceOverIgnoreTrackpad");
  NSStringFromSelector(sel_voiceOverTouchBrailleDisplaySyncInputOutputTables);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v471[313] = v157;
  v472[313] = CFSTR("AXSVoiceOverTouchBrailleDisplaySyncInputOutputTables");
  NSStringFromSelector(sel_voiceOverBrailleWordWrapEnabled);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  v471[314] = v156;
  v472[314] = CFSTR("VoiceOverBrailleWordWrapEnabled");
  NSStringFromSelector(sel_voiceOverBrailleDisconnectOnSleep);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v471[315] = v155;
  v472[315] = CFSTR("VoiceOverBrailleDisplayDisconnectOnSleepPreference");
  NSStringFromSelector(sel_voiceOverBrailleAutoAdvanceDuration);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  v471[316] = v154;
  v472[316] = CFSTR("VoiceOverBrailleAutoAdvanceDuration");
  NSStringFromSelector(sel_voiceOverBrailleFormattingEnabled);
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  v471[317] = v153;
  v472[317] = CFSTR("kAXSVoiceOverBrailleFormatting");
  NSStringFromSelector(sel_voiceOverUseRingerSwitchToControlNotificationOutput);
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  v471[318] = v152;
  v472[318] = CFSTR("AXSVoiceOverRingerSwitchForNotificationsEnabled");
  NSStringFromSelector(sel_voiceOverBannerNotificationOutput);
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  v471[319] = v151;
  v472[319] = CFSTR("AXSVoiceOverBannerNotificationOutput");
  NSStringFromSelector(sel_voiceOverLockedScreenNotificationOutput);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v471[320] = v150;
  v472[320] = CFSTR("AXSVoiceOverLockScreenNotificationOutput");
  NSStringFromSelector(sel_voiceOverBrailleDisplays);
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v471[321] = v149;
  v472[321] = CFSTR("VoiceOverBrailleDisplays");
  NSStringFromSelector(sel_enableVoiceOverCaptions);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v471[322] = v148;
  v472[322] = CFSTR("VoiceOverCaptionPanelEnabled");
  NSStringFromSelector(sel_syncPronunciationsWithCloudKit);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  v471[323] = v147;
  v472[323] = CFSTR("VoiceOverPronunciationCloudKitSyncingEnabled");
  NSStringFromSelector(sel_shouldCaptureVisionEngineDiagnosticsToDisk);
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  v471[324] = v146;
  v472[324] = CFSTR("VisionEngineCaptureDiagnosticsToDisk");
  NSStringFromSelector(sel_voiceOverDelayUntilSpeakUnderTouch);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  v471[325] = v145;
  v472[325] = kAXSVoiceOverDelayUntilSpeakUnderTouch;
  NSStringFromSelector(sel_automaticAccessibilityEnabled);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v471[326] = v144;
  v472[326] = CFSTR("AutomaticAccessibilityEnabled");
  NSStringFromSelector(sel_automaticAccessibilityIgnoreAppAccessibilityPreferred);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  v471[327] = v143;
  v472[327] = CFSTR("AutomaticAccessibilityIgnoreAppAccessibilityPreferred");
  NSStringFromSelector(sel_automaticAccessibilityVisualizationsEnabled);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  v471[328] = v142;
  v472[328] = CFSTR("AutomaticAccessibilityVisualizationsEnabled");
  NSStringFromSelector(sel_automaticAccessibilityModes);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v471[329] = v141;
  v472[329] = CFSTR("AutomaticAccessibilityModes");
  NSStringFromSelector(sel_voiceOverSpeaksOverTelephoneCalls);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  v471[330] = v140;
  v472[330] = CFSTR("AXSVoiceOverSpeaksOverTelephoneCalls");
  NSStringFromSelector(sel_voiceOverFlashlightNotificationsEnabled);
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  v471[331] = v139;
  v472[331] = CFSTR("AXSVoiceOverFlashlightNotificationsEnabled");
  NSStringFromSelector(sel_didTriggerSOSToday);
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  v471[332] = v138;
  v472[332] = CFSTR("AXSDidTriggerSOSToday");
  NSStringFromSelector(sel_voiceOverSpeakTableColumnRowInformation);
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v471[333] = v137;
  v472[333] = CFSTR("AXSVoiceOverSpeakTableColumnRowInformationPreference");
  NSStringFromSelector(sel_voiceOverSpeakTableHeaders);
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  v471[334] = v136;
  v472[334] = CFSTR("AXSVoiceOverSpeakTableHeadersPreference");
  NSStringFromSelector(sel_voiceOverTouchBrailleGesturesShouldUseLockedConfiguration);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  v471[335] = v135;
  v472[335] = CFSTR("VoiceOverBrailleGesturesShouldUseLockedConfiguration");
  NSStringFromSelector(sel_voiceOverTouchBrailleGesturesLockedOrientation);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  v471[336] = v134;
  v472[336] = CFSTR("VoiceOverBrailleGesturesLockedOrientation");
  NSStringFromSelector(sel_voiceOverTouchBrailleGesturesLockedTypingMode);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  v471[337] = v133;
  v472[337] = CFSTR("VoiceOverBrailleGesturesLockedTypingMode");
  NSStringFromSelector(sel_voiceOverTouchBrailleGesturesDidPlayCalibrationHint);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v471[338] = v132;
  v472[338] = CFSTR("VoiceOverBrailleGesturesDidPlayCalibrationHint");
  NSStringFromSelector(sel_voiceOverDoubleTapInterval);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  v471[339] = v131;
  v472[339] = kAXSVoiceOverDoubleTapInterval;
  NSStringFromSelector(sel_voiceOverBrailleAlertDisplayDuration);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  v471[340] = v130;
  v472[340] = CFSTR("VoiceOverBrailleDisplayAlertDuration");
  NSStringFromSelector(sel_voiceOverBrailleAlertsEnabled);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v471[341] = v129;
  v472[341] = CFSTR("AXSVoiceOverBrailleAlertsEnabled");
  NSStringFromSelector(sel_voiceOverBrailleAlertShowUntilDismissed);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  v471[342] = v128;
  v472[342] = CFSTR("AXSVoiceOverBrailleAlertShowUntilDismissed");
  NSStringFromSelector(sel_voiceOverBrailleKeyDebounceTimeout);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  v471[343] = v127;
  v472[343] = CFSTR("VoiceOverBrailleKeyDebounceTimeout");
  NSStringFromSelector(sel_voiceOverNavigationDirectionMode);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v471[344] = v126;
  v472[344] = CFSTR("VoiceOverNavigationDirectionMode");
  NSStringFromSelector(sel_voiceOverKeyboardModifierChoice);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  v471[345] = v125;
  v472[345] = CFSTR("AXSVoiceOverKeyboardModifierChoicePreference");
  NSStringFromSelector(sel_voiceOverTouchBrailleShouldReverseDots);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v471[346] = v124;
  v472[346] = CFSTR("AXSVoiceOverTouchShouldReverseDots");
  NSStringFromSelector(sel_voiceOverTouchBrailleGestureControl);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v471[347] = v123;
  v472[347] = CFSTR("AXSVoiceOverTouchBrailleGestureControl");
  NSStringFromSelector(sel_voiceOverTouchBrailleShowTextStyleStatus);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v471[348] = v122;
  v472[348] = CFSTR("AXSVoiceOverTouchBrailleShowTextStyleStatus");
  NSStringFromSelector(sel_voiceOverTouchBrailleShowGeneralStatus);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  v471[349] = v121;
  v472[349] = CFSTR("AXSVoiceOverTouchBrailleShowGeneralStatus");
  NSStringFromSelector(sel_voiceOverTouchUpdateBrailleWithoutConnectedDisplay);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v471[350] = v120;
  v472[350] = CFSTR("AXSVoiceOverTouchUpdateBrailleWithoutConnectedDisplay");
  NSStringFromSelector(sel_voiceOverTouchPreferredBrailleTableIdentifiers);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v471[351] = v119;
  v472[351] = CFSTR("AXSVoiceOverTouchBraillePreferredTableIdentifiers");
  NSStringFromSelector(sel_voiceOverShouldSpeakDiscoveredText);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v471[352] = v118;
  v472[352] = CFSTR("AXSVoiceOverShouldSpeakDiscoveredTextPreference");
  NSStringFromSelector(sel_voiceOverNeuralElementFeedback);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  v471[353] = v117;
  v472[353] = CFSTR("AXSVoiceOverSpeakDiscoveredTextFeedbackPreference");
  NSStringFromSelector(sel_voiceOverNumberFeedback);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  v471[354] = v116;
  v472[354] = CFSTR("AXSVoiceOverNumberFeedback");
  NSStringFromSelector(sel_voiceOverAutomaticButtonLabels);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v471[355] = v115;
  v472[355] = CFSTR("AXSVoiceOverAutomaticButtonLabelsPreference");
  NSStringFromSelector(sel_voiceOverSoundAndHapticPreferences);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v471[356] = v114;
  v472[356] = CFSTR("VoiceOverSoundsAndHaptics");
  NSStringFromSelector(sel_tapToSpeakTimeEnabled);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  v471[357] = v113;
  v472[357] = CFSTR("TapToSpeakTimeEnabled");
  NSStringFromSelector(sel_tapToSpeakTimeAvailability);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v471[358] = v112;
  v472[358] = CFSTR("TapToSpeakTimeAvailability");
  NSStringFromSelector(sel_voiceOverTapticTimeMode);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v471[359] = v111;
  v472[359] = CFSTR("VoiceOverTapticTimeMode");
  NSStringFromSelector(sel_voiceOverTapticTimeEncoding);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  v471[360] = v110;
  v472[360] = CFSTR("VoiceOverTapticTimeEncoding");
  NSStringFromSelector(sel_voiceOverTapticTimeSpeed);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  v471[361] = v109;
  v472[361] = CFSTR("VoiceOverTapticTimeSpeed");
  NSStringFromSelector(sel_tapticTimeInternalFlashScreenEnabled);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v471[362] = v108;
  v472[362] = CFSTR("TapticTimeInternalFlashScreenEnabled");
  NSStringFromSelector(sel_voiceOverTapticChimesEnabled);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v471[363] = v107;
  v472[363] = CFSTR("VoiceOverTapticChimesEnabled");
  NSStringFromSelector(sel_voiceOverTapticChimesAvailability);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v471[364] = v106;
  v472[364] = CFSTR("VoiceOverTapticChimesAvailability");
  NSStringFromSelector(sel_voiceOverTapticChimesFrequencyEncoding);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  v471[365] = v105;
  v472[365] = CFSTR("VoiceOverTapticChimesFrequencyEncoding");
  NSStringFromSelector(sel_voiceOverTapticChimesSoundType);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v471[366] = v104;
  v472[366] = CFSTR("VoiceOverTapticChimesSoundType");
  NSStringFromSelector(sel_voiceOverSpeakSecondsEncoding);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v471[367] = v103;
  v472[367] = CFSTR("VoiceOverSpeakSecondsEncoding");
  NSStringFromSelector(sel_voiceOverCapitalLetterFeedback);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v471[368] = v102;
  v472[368] = CFSTR("AXSVoiceOverCapitalLetterFeedbackPreference");
  NSStringFromSelector(sel_voiceOverDeletionFeedback);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v471[369] = v101;
  v472[369] = CFSTR("AXSVoiceOverDeletionFeedbackPreference");
  NSStringFromSelector(sel_voiceOverPunctuationLevel);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v471[370] = v100;
  v472[370] = CFSTR("AXSVoiceOverPunctuationLevelPreference");
  NSStringFromSelector(sel_voiceOverPunctuationGroup);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v471[371] = v99;
  v472[371] = CFSTR("AXSVoiceOverPunctuationGroupPreference");
  NSStringFromSelector(sel_voiceOverLinkFeedback);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  v471[372] = v98;
  v472[372] = CFSTR("AXSVoiceOverLinkFeedbackPreference");
  NSStringFromSelector(sel_voiceOverInlineTextCompletionAppearanceFeedback);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  v471[373] = v97;
  v472[373] = CFSTR("kAXSVoiceOverInlineTextCompletionAppearanceFeedbackPreference");
  NSStringFromSelector(sel_voiceOverInlineTextCompletionInsertionFeedback);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v471[374] = v96;
  v472[374] = CFSTR("kAXSVoiceOverInlineTextCompletionInsertionFeedbackPreference");
  NSStringFromSelector(sel_voiceOverActionsFeedback);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  v471[375] = v95;
  v472[375] = CFSTR("AXSVoiceOverActionsFeedbackPreference");
  NSStringFromSelector(sel_voiceOverActionFeedbackFirstInListOnly);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v471[376] = v94;
  v472[376] = CFSTR("AXSVoiceOverFirstInListOnlyActionsFeedback");
  NSStringFromSelector(sel_voiceOverContainerOutputFeedback);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v471[377] = v93;
  v472[377] = CFSTR("AXSVoiceOverContainerOutputFeedbackPreference");
  NSStringFromSelector(sel_voiceOverMoreContentOutputFeedback);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v471[378] = v92;
  v472[378] = CFSTR("AXSVoiceOverMoreContentOutputFeedbackPreference");
  NSStringFromSelector(sel_voiceOverRotorSummaryFeedback);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v471[379] = v91;
  v472[379] = CFSTR("AXSVoiceOverRotorSummaryFeedbackPreference");
  NSStringFromSelector(sel_voiceOverDiscoveredSensitiveContentFeedback);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v471[380] = v90;
  v472[380] = CFSTR("VoiceOverDiscoveredSensitiveContentFeedback");
  NSStringFromSelector(sel_voiceOverShouldDisallowUSBRestrictedMode);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v471[381] = v89;
  v472[381] = CFSTR("VoiceOverShouldDisallowUSBRestrictedMode");
  NSStringFromSelector(sel_voiceOverUserDidReadUSBRestrictedModeAlert);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v471[382] = v88;
  v472[382] = CFSTR("VoiceOverUserDidReadUSBRestrictedModeAlert");
  NSStringFromSelector(sel_voiceOverSelectedActivity);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v471[383] = v87;
  v472[383] = CFSTR("AXSVoiceOverSelectedActivityPreference");
  NSStringFromSelector(sel_voiceOverDetectionModeItems);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v471[384] = v86;
  v472[384] = CFSTR("VoiceOverDetectionModeItems");
  NSStringFromSelector(sel_liveRecognitionActive);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v471[385] = v85;
  v472[385] = CFSTR("AXSLiveRecognitionActive");
  NSStringFromSelector(sel_liveRecognitionOverlayOpen);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v471[386] = v84;
  v472[386] = CFSTR("AXSLiveRecognitionOverlayOpen");
  NSStringFromSelector(sel_enabledLiveRecognitionModes);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v471[387] = v83;
  v472[387] = CFSTR("AXSEnabledLiveRecognitionModes");
  NSStringFromSelector(sel_imageCaptionGenderStrategy);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v471[388] = v82;
  v472[388] = CFSTR("AXSImageCaptionGenderStrategy");
  NSStringFromSelector(sel_liveRegionStatusForWebOrApp);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v471[389] = v81;
  v472[389] = CFSTR("AXSVoiceOverLiveRegionAppStatus");
  NSStringFromSelector(sel_imageCaptioningDisabledApps);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v471[390] = v80;
  v472[390] = CFSTR("AXSImageCaptioningDisabledApps");
  NSStringFromSelector(sel_voiceOverDirectTouchEnabledApps);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v471[391] = v79;
  v472[391] = CFSTR("AXSVoiceOverDirectTouchEnabledApps");
  NSStringFromSelector(sel_voiceOverSceneDescriptionsEnabled);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v471[392] = v78;
  v472[392] = CFSTR("AXSSceneDescriptions");
  NSStringFromSelector(sel_voiceOverSoundCurtain);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v471[393] = v77;
  v472[393] = CFSTR("AXSVoiceOverSoundCurtain");
  NSStringFromSelector(sel_voiceOverNavigationStyle);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v471[394] = v76;
  v472[394] = CFSTR("AXSVoiceOverNavigationStyle");
  NSStringFromSelector(sel_voiceOverHandGesturesEnabled);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v471[395] = v75;
  v472[395] = CFSTR("VoiceOverWatchHandGestures");
  NSStringFromSelector(sel_voiceOverHandGesturesActionCustomizations);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v471[396] = v74;
  v472[396] = CFSTR("VoiceOverWatchHandGesturesActionCustomizations");
  NSStringFromSelector(sel_voiceOverMediaDuckingVolume);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v471[397] = v73;
  v472[397] = CFSTR("VoiceOverTouchMediaDuckingVolume");
  NSStringFromSelector(sel_voiceOverMediaDuckingMode);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v471[398] = v72;
  v472[398] = CFSTR("VoiceOverTouchMediaDuckingMode");
  NSStringFromSelector(sel_remoteHandGestureCustomizedActions);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v471[399] = v71;
  v472[399] = CFSTR("RemoteHandGestureCustomizedActions");
  NSStringFromSelector(sel_zoomHandGesturesEnabled);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v471[400] = v70;
  v472[400] = CFSTR("ZoomWatchHandGestures");
  NSStringFromSelector(sel_zoomHandGesturesActionCustomizations);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v471[401] = v69;
  v472[401] = CFSTR("ZoomWatchHandGesturesActionCustomizations");
  NSStringFromSelector(sel_allowHearingAidControlOnLockScreen);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v471[402] = v68;
  v472[402] = CFSTR("HearingAidControlAvailableOnLockScreen");
  NSStringFromSelector(sel_shouldStreamToLeftAid);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v471[403] = v67;
  v472[403] = CFSTR("HearingAidStreamToLeft");
  NSStringFromSelector(sel_shouldStreamToRightAid);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v471[404] = v66;
  v472[404] = CFSTR("HearingAidStreamToRight");
  NSStringFromSelector(sel_independentHearingAidSettings);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v471[405] = v65;
  v472[405] = CFSTR("HearingAidEarIndependencePreference");
  NSStringFromSelector(sel_shouldFlashForAlertInSilentMode);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v471[406] = v64;
  v472[406] = CFSTR("LEDFlashOnRingerSwitchSilent");
  NSStringFromSelector(sel_shouldFlashWhileUnlocked);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v471[407] = v63;
  v472[407] = CFSTR("LEDFlashWhileUnlocked");
  NSStringFromSelector(sel_shouldSpeakMedicalPreamble);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v471[408] = v62;
  v472[408] = CFSTR("SpeakMedicalPreamble");
  NSStringFromSelector(sel_shouldTTYMedicalPreamble);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v471[409] = v61;
  v472[409] = CFSTR("TTYMedicalPreamble");
  NSStringFromSelector(sel_medicalPreamble);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v471[410] = v60;
  v472[410] = CFSTR("SOSMedicalPreamble");
  NSStringFromSelector(sel_shouldLimitDisplayRefreshRate);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v471[411] = v59;
  v472[411] = CFSTR("LimitDisplayRefreshRate");
  NSStringFromSelector(sel_didResetD22Preferences);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v471[412] = v58;
  v472[412] = CFSTR("AXSDidResetD22Preferences");
  NSStringFromSelector(sel_leftRightBalanceValue);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v471[413] = v57;
  v472[413] = CFSTR("LeftRightBalanceValue");
  NSStringFromSelector(sel_leftRightBalanceEnabled);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v471[414] = v56;
  v472[414] = CFSTR("LeftRightBalanceEnabled");
  NSStringFromSelector(sel_localizationQACaptionShowFilePath);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v471[415] = v55;
  v472[415] = CFSTR("LocCaptionShowFilePath");
  NSStringFromSelector(sel_localizationQACaptionShowUSString);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v471[416] = v54;
  v472[416] = CFSTR("LocCaptionShowUSString");
  NSStringFromSelector(sel_localizationQACaptionShowLocalizedString);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v471[417] = v53;
  v472[417] = CFSTR("LocCaptionShowLocalizedString");
  NSStringFromSelector(sel_alexLocalAssetURL);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v471[418] = v52;
  v472[418] = CFSTR("AXSAlexLocalAssetURL");
  NSStringFromSelector(sel_touchAccommodationsEnabled);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v471[419] = v51;
  v472[419] = CFSTR("TouchAccommodationsEnabledPreference");
  NSStringFromSelector(sel_touchAccommodationsUsageConfirmed);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v471[420] = v50;
  v472[420] = CFSTR("TouchAccommodationsUsageConfirmedPreference");
  NSStringFromSelector(sel_touchAccommodationsTripleClickConfirmed);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v471[421] = v49;
  v472[421] = CFSTR("AXSTouchAccommodationsTripleClickConfirmedPreference");
  NSStringFromSelector(sel_touchAccommodationsHoldDurationEnabled);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v471[422] = v48;
  v472[422] = CFSTR("TouchAccommodationsHoldDurationEnabledPreference");
  NSStringFromSelector(sel_touchAccommodationsHoldDuration);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v471[423] = v47;
  v472[423] = CFSTR("TouchAccommodationsHoldDurationPreference");
  NSStringFromSelector(sel_touchAccommodationsAllowsSwipeGesturesToBypass);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v471[424] = v46;
  v472[424] = CFSTR("TouchAccommodationsAllowsSwipeGesturesToBypassPreference");
  NSStringFromSelector(sel_touchAccommodationsHoldDurationAllowsSwipeGesturesToBypass);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v471[425] = v45;
  v472[425] = CFSTR("TouchAccommodationsHoldDurationAllowsSwipeGesturesToBypassPreference");
  NSStringFromSelector(sel_touchAccommodationsHoldDurationSwipeGestureSensitivity);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v471[426] = v44;
  v472[426] = CFSTR("TouchAccommodationsHoldDurationSwipeGestureSensitivityPreference");
  NSStringFromSelector(sel_touchAccommodationsSwipeGestureMinimumDistance);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v471[427] = v43;
  v472[427] = CFSTR("TouchAccommodationsHoldDurationSwipeGestureMinimumDistancePreference");
  NSStringFromSelector(sel_touchAccommodationsIgnoreRepeatEnabled);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v471[428] = v42;
  v472[428] = CFSTR("TouchAccommodationsIgnoreRepeatEnabledPreference");
  NSStringFromSelector(sel_touchAccommodationsIgnoreRepeatDuration);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v471[429] = v41;
  v472[429] = CFSTR("TouchAccommodationsIgnoreRepeatDurationPreference");
  NSStringFromSelector(sel_touchAccommodationsTapActivationMethod);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v471[430] = v40;
  v472[430] = CFSTR("TouchAccommodationsTapActivationMethodPreference");
  NSStringFromSelector(sel_touchAccommodationsTapActivationTimeout);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v471[431] = v39;
  v472[431] = CFSTR("TouchAccommodationsTapActivationTimeOutPreference");
  NSStringFromSelector(sel_stickyKeysEnabled);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v471[432] = v38;
  v472[432] = CFSTR("StickyKeysEnabled");
  NSStringFromSelector(sel_stickyKeysShiftToggleEnabled);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v471[433] = v37;
  v472[433] = CFSTR("StickyKeysShiftToggleEnabled");
  NSStringFromSelector(sel_stickyKeysBeepEnabled);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v471[434] = v36;
  v472[434] = CFSTR("StickyKeysBeepEnabled");
  NSStringFromSelector(sel_fullKeyboardAccessCommandMapData);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v471[435] = v35;
  v472[435] = CFSTR("CommandMapData");
  NSStringFromSelector(sel_fullKeyboardAccessFocusRingTimeout);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v471[436] = v34;
  v472[436] = CFSTR("FocusRingTimeout");
  NSStringFromSelector(sel_fullKeyboardAccessFocusRingTimeoutEnabled);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v471[437] = v33;
  v472[437] = CFSTR("FocusRingTimeoutEnabled");
  NSStringFromSelector(sel_fullKeyboardAccessLargeFocusRingEnabled);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v471[438] = v32;
  v472[438] = CFSTR("FullKeyboardAccessLargeFocusRingEnabled");
  NSStringFromSelector(sel_fullKeyboardAccessFocusRingHighContrastEnabled);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v471[439] = v31;
  v472[439] = CFSTR("FullKeyboardAccessFocusRingHighContrastEnabled");
  NSStringFromSelector(sel_fullKeyboardAccessFocusRingColor);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v471[440] = v30;
  v472[440] = CFSTR("FullKeyboardAccessFocusRingColor");
  NSStringFromSelector(sel_fullKeyboardAccessShouldShowTextEditingModeInstructions);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v471[441] = v29;
  v472[441] = CFSTR("ShouldShowTextEditingModeInstructions");
  NSStringFromSelector(sel_fullKeyboardAccessShouldShowDebugKeyCommandsView);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v471[442] = v28;
  v472[442] = CFSTR("FullKeyboardAccessShouldShowDebugKeyCommandsViewPreference");
  NSStringFromSelector(sel_appValidationTestingMode);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v471[443] = v27;
  v472[443] = CFSTR("AXSAppValidatingTestingPreference");
  NSStringFromSelector(sel_isAXValidationRunnerCollectingValidations);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v471[444] = v26;
  v472[444] = CFSTR("IsAXValidationRunnerCollectingValidations");
  NSStringFromSelector(sel_callAudioRoutingAutoAnswerDelay);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v471[445] = v25;
  v472[445] = CFSTR("CallAudioRoutingAutoAnswerPreference");
  NSStringFromSelector(sel_callAudioRoutingAutoAnswerEnabled);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v471[446] = v24;
  v472[446] = CFSTR("CallAudioRoutingAutoAnswerEnabledPreference");
  NSStringFromSelector(sel_voiceOverSleepOnWristDownPreference);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v471[447] = v23;
  v472[447] = CFSTR("VoiceOverSleepOnWristDownPreference");
  NSStringFromSelector(sel_assistiveTouchSleepOnWristDownPreference);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v471[448] = v22;
  v472[448] = CFSTR("AssistiveTouchSleepOnWristDownPreference");
  NSStringFromSelector(sel_classicInvertColors);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v471[449] = v21;
  v472[449] = CFSTR("AXSClassicInvertColorsPreference");
  NSStringFromSelector(sel_backTapDoubleTapAction);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v471[450] = v20;
  v472[450] = CFSTR("AXSBackTapDoubleTapAction");
  NSStringFromSelector(sel_backTapTripleTapAction);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v471[451] = v19;
  v472[451] = CFSTR("AXSBackTapTripleTapAction");
  NSStringFromSelector(sel_backTapFalsePositiveAlertsEnabled);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v471[452] = v18;
  v472[452] = CFSTR("AXSBackTapFalsePositiveAlertsEnabled");
  NSStringFromSelector(sel_backTapRNNModelEnabled);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v471[453] = v17;
  v472[453] = CFSTR("AXSBackTapRNNModelEnabled");
  NSStringFromSelector(sel_backTapUsageCount);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v471[454] = v16;
  v472[454] = CFSTR("AXSBackTapUsageCount");
  NSStringFromSelector(sel_assistiveTouchActionsBySoundAction);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v471[455] = v15;
  v472[455] = CFSTR("AXSAssistiveTouchActionBySoundActionsPreference");
  NSStringFromSelector(sel_hoverTextActivationLockEnabled);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v471[456] = v14;
  v472[456] = CFSTR("HoverTextActivationLock");
  NSStringFromSelector(sel_hoverTextPreferredActivatorKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v471[457] = v2;
  v472[457] = CFSTR("HoverTextActivatorKey");
  NSStringFromSelector(sel_liveSpeechMaxRecentsCount);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v471[458] = v3;
  v472[458] = CFSTR("AXSliveSpeechMaxRecentsCountPreference");
  NSStringFromSelector(sel_perAppSettingsCustomizedAppIDs);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v471[459] = v4;
  v472[459] = CFSTR("AXSPerAppSettingsCustomizedAppIDs");
  NSStringFromSelector(sel_perAppSettingsStats);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v471[460] = v5;
  v472[460] = CFSTR("AXSPerAppSettingsStats");
  NSStringFromSelector(sel_audiogramIngestionLastModelAccess);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v471[461] = v6;
  v472[461] = CFSTR("AXSAudiogramIngestionLastModelAccess");
  NSStringFromSelector(sel_soundActionsLastModelAccess);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v471[462] = v7;
  v472[462] = CFSTR("AXSSoundActionsLastModelAccess");
  NSStringFromSelector(sel_soundDetectionLastModelAccess);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v471[463] = v8;
  v472[463] = CFSTR("AXSoundDetectionLastModelAccess");
  NSStringFromSelector(sel_cameraButtonSensitivity);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v471[464] = v9;
  v472[464] = CFSTR("CameraButtonSensitivity");
  NSStringFromSelector(sel_startupSoundEnabled);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v471[465] = v10;
  v472[465] = CFSTR("StartupSoundEnabled");
  NSStringFromSelector(sel_isAdaptiveVoiceShortcutsEnabled);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v471[466] = v11;
  v472[466] = CFSTR("AdaptiveVoiceShortcuts");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v472, v471, 467);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)SelectorToPreferenceKeyMap;
  SelectorToPreferenceKeyMap = v12;

}

BOOL AXInPreboardScenario()
{
  if ((AXDeviceIsAudioAccessory() & 1) != 0)
    return 0;
  if (AXInPreboardScenario_onceToken != -1)
    dispatch_once(&AXInPreboardScenario_onceToken, &__block_literal_global_0);
  return InPreBoardMode != 0;
}

uint64_t AXDeviceSupportsBootSound()
{
  NSObject *v1;
  uint8_t v2[16];

  if ((_os_feature_enabled_impl() & 1) != 0)
    return MGGetBoolAnswer();
  AXLogCommon();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_18C62B000, v1, OS_LOG_TYPE_DEFAULT, "Boot chime - feature flag off", v2, 2u);
  }

  return 0;
}

void sub_18C638B30(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void _handleInPreBoardModeUpdate()
{
  NSObject *v0;

  AXPreBoardQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_35);

}

id AXPreBoardQueue()
{
  if (AXPreBoardQueue_onceToken != -1)
    dispatch_once(&AXPreBoardQueue_onceToken, &__block_literal_global_36);
  return (id)AXPreBoardQueue_PreBoardQueue;
}

uint64_t AXInCheckerBoardScenario()
{
  if (AXInCheckerBoardScenario_onceToken != -1)
    dispatch_once(&AXInCheckerBoardScenario_onceToken, &__block_literal_global_5);
  return InCheckerBoardMode;
}

void _handleInCheckerBoardModeUpdate()
{
  void *v0;
  __CFNotificationCenter *LocalCenter;

  +[AXBackBoardServer server](AXBackBoardServer, "server");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  InCheckerBoardMode = objc_msgSend(v0, "inCheckerBoardMode");

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("AXInCheckerBoardScenarioUpdatedNotification"), 0, 0, 1u);
}

uint64_t AXSessionIsLoginSession(BOOL *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AXSessionIsLoginSession_onceToken != -1)
    dispatch_once(&AXSessionIsLoginSession_onceToken, &__block_literal_global_8);
  v2 = (void *)SessionIsLoginSession;
  if (SessionIsLoginSession)
  {
    if (a1)
      *a1 = 1;
  }
  else
  {
    +[AXBackBoardServer server](AXBackBoardServer, "server");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sessionIsLoginSessionWithResult:", &__block_literal_global_10);

    v4 = SessionIsLoginSession;
    if (a1)
      *a1 = SessionIsLoginSession != 0;
    AXLogCommon();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109120;
      v7[1] = v4 != 0;
      _os_log_impl(&dword_18C62B000, v5, OS_LOG_TYPE_INFO, "Login session uninitialized, attempting to retrieve (initialized: %d now)", (uint8_t *)v7, 8u);
    }

    v2 = (void *)SessionIsLoginSession;
  }
  return objc_msgSend(v2, "BOOLValue");
}

void _handleSessionIsLoginSessionUpdate()
{
  id v0;

  +[AXBackBoardServer server](AXBackBoardServer, "server");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "sessionIsLoginSessionWithResult:", &__block_literal_global_38);

}

uint64_t AXUtilitiesFrameworkBundle()
{
  return objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
}

BOOL AXUICanShowPointerControlSettings()
{
  void *v0;
  int v1;
  int v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;

  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "laserEnabled");

  if (!v1)
    return 0;
  v2 = _AXSAssistiveTouchEnabled();
  v3 = v2 | _AXSAssistiveTouchScannerEnabled();
  +[AXPointerDeviceManager sharedInstance](AXPointerDeviceManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "connectedDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (AXDeviceIsPhone())
    return v6 && v3 != 0;
  else
    return v6 || v3 != 0;
}

id AXZoomLensDefault()
{
  int IsPad;
  id *v1;

  IsPad = AXDeviceIsPad();
  v1 = (id *)MEMORY[0x1E0CF38A8];
  if (!IsPad)
    v1 = (id *)MEMORY[0x1E0CF38A0];
  return *v1;
}

id AXZoomAllLensEffects()
{
  if (AXZoomAllLensEffects_onceToken != -1)
    dispatch_once(&AXZoomAllLensEffects_onceToken, &__block_literal_global_15);
  return (id)AXZoomAllLensEffects_Result;
}

id AXZoomAllLensModes()
{
  if (AXZoomAllLensModes_onceToken != -1)
    dispatch_once(&AXZoomAllLensModes_onceToken, &__block_literal_global_18);
  return (id)AXZoomAllLensModes_Result;
}

id AXZoomUserSelectableLensModes()
{
  if (AXZoomUserSelectableLensModes_onceToken != -1)
    dispatch_once(&AXZoomUserSelectableLensModes_onceToken, &__block_literal_global_23);
  return (id)AXZoomUserSelectableLensModes_Result;
}

id AXZoomDockPositions()
{
  if (AXZoomDockPositions_onceToken != -1)
    dispatch_once(&AXZoomDockPositions_onceToken, &__block_literal_global_24);
  return (id)AXZoomDockPositions_Result;
}

uint64_t AXGetSiriRequireSiriForInterruptionsInValue()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0CFE978], "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isSiriAccessibilityBargeInEnabled") ^ 1;

  return v1;
}

void AXSetSiriRequireSiriForInterruptionsInValue(int a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CFE978], "sharedPreferences");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSiriAccessibilityBargeInEnabled:", a1 ^ 1u);

}

uint64_t AXGetSiriCallHangUpValue()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(getVTPreferencesClass(), "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "canUseVoiceTriggerDuringPhoneCall");

  return v1;
}

id getVTPreferencesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVTPreferencesClass_softClass;
  v7 = getVTPreferencesClass_softClass;
  if (!getVTPreferencesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVTPreferencesClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getVTPreferencesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C639CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXSetSiriCallHangUpValue(uint64_t a1)
{
  id v2;

  objc_msgSend(getVTPreferencesClass(), "sharedPreferences");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setCanUseVoiceTriggerDuringPhoneCall:", a1);

}

uint64_t AXApplicationSupportsHapticMusic(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = a1;
  objc_msgSend(v1, "URL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = objc_alloc(MEMORY[0x1E0D01700]);
    objc_msgSend(v1, "URL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v3, "initWithURL:", v4);

    objc_opt_class();
    objc_msgSend(v5, "infoDictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", CFSTR("MusicHapticsSupported"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    __UIAccessibilityCastAsClass();
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v8, "BOOLValue") & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      objc_msgSend(v1, "bundleIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "isEqualToString:", CFSTR("com.apple.Music")) & 1) != 0)
      {
        v9 = 1;
      }
      else
      {
        objc_msgSend(v1, "bundleIdentifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.music.classical")) & 1) != 0)
        {
          v9 = 1;
        }
        else
        {
          objc_msgSend(v1, "bundleIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v12, "isEqualToString:", CFSTR("com.apple.Preferences"));

        }
      }

    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void ___handleInPreBoardModeUpdate_block_invoke()
{
  void *v0;
  __CFNotificationCenter *LocalCenter;

  +[AXBackBoardServer server](AXBackBoardServer, "server");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  InPreBoardMode = objc_msgSend(v0, "inPreboardMode");

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("AXInPreBoardScenarioUpdatedNotification"), 0, 0, 1u);
}

void ___handleSessionIsLoginSessionUpdate_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  __CFNotificationCenter *LocalCenter;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v2 = a2;
  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)SessionIsLoginSession;
  SessionIsLoginSession = v3;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("AXSessionIsLoginSessionUpdatedNotification"), 0, 0, 1u);
  AXLogCommon();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v2;
    _os_log_impl(&dword_18C62B000, v6, OS_LOG_TYPE_INFO, "Updated login session status: %d", (uint8_t *)v7, 8u);
  }

}

Class __getVTPreferencesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!VoiceTriggerLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4B00;
    v5 = 0;
    VoiceTriggerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!VoiceTriggerLibraryCore_frameworkLibrary)
    __getVTPreferencesClass_block_invoke_cold_1(&v3);
  result = objc_getClass("VTPreferences");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVTPreferencesClass_block_invoke_cold_2();
  getVTPreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C63A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id soft_AXUIAssistiveTouchStringForName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getAXUIAssistiveTouchStringForNameSymbolLoc_ptr;
  v9 = getAXUIAssistiveTouchStringForNameSymbolLoc_ptr;
  if (!getAXUIAssistiveTouchStringForNameSymbolLoc_ptr)
  {
    v3 = (void *)AccessibilityUIUtilitiesLibrary();
    v2 = dlsym(v3, "AXUIAssistiveTouchStringForName");
    v7[3] = (uint64_t)v2;
    getAXUIAssistiveTouchStringForNameSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    soft_AXUIAssistiveTouchStringForName_cold_1();
  ((void (*)(id, uint64_t))v2)(v1, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_18C63A5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C63AA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_paCurrentRouteSupportsTransparencyAccommodations()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr;
  v7 = getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr;
  if (!getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr)
  {
    v1 = (void *)PersonalAudioLibrary();
    v0 = dlsym(v1, "paCurrentRouteSupportsTransparencyAccommodations");
    v5[3] = (uint64_t)v0;
    getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
    soft_paCurrentRouteSupportsTransparencyAccommodations_cold_1();
  return ((uint64_t (*)(uint64_t))v0)(v2);
}

void sub_18C63AB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_paBluetoothDeviceSupportsSSL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr;
  v9 = getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr;
  if (!getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr)
  {
    v3 = (void *)PersonalAudioLibrary();
    v2 = dlsym(v3, "paBluetoothDeviceSupportsSSL");
    v7[3] = (uint64_t)v2;
    getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    soft_paBluetoothDeviceSupportsSSL_cold_1();
  v4 = ((uint64_t (*)(id))v2)(v1);

  return v4;
}

void sub_18C63ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getPASettingsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPASettingsClass_softClass;
  v7 = getPASettingsClass_softClass;
  if (!getPASettingsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPASettingsClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getPASettingsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C63AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getWatchControlSettingsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getWatchControlSettingsClass_softClass;
  v7 = getWatchControlSettingsClass_softClass;
  if (!getWatchControlSettingsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getWatchControlSettingsClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getWatchControlSettingsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C63AF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C63B23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAXUIClientClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAXUIClientClass_softClass;
  v7 = getAXUIClientClass_softClass;
  if (!getAXUIClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAXUIClientClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getAXUIClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C63B3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C63BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C63C90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAXPISystemActionHelperClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAXPISystemActionHelperClass_softClass;
  v7 = getAXPISystemActionHelperClass_softClass;
  if (!getAXPISystemActionHelperClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAXPISystemActionHelperClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getAXPISystemActionHelperClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C63C9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _handleTripleClickPrefNotificationChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  AXLogCommon();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = a3;
    _os_log_impl(&dword_18C62B000, v4, OS_LOG_TYPE_DEFAULT, "Handling triple click notification for %@", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0D10018], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reloadControlsForExtension:kind:reason:", CFSTR("com.apple.AccessibilityUIServer.AccessibilityControlsExtension"), 0, CFSTR("AX shortcut preference changed"));

}

uint64_t AccessibilityUIUtilitiesLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!AccessibilityUIUtilitiesLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C4D00;
    v3 = 0;
    AccessibilityUIUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AccessibilityUIUtilitiesLibraryCore_frameworkLibrary)
    AccessibilityUIUtilitiesLibrary_cold_1(&v1);
  return AccessibilityUIUtilitiesLibraryCore_frameworkLibrary;
}

Class __getHUComfortSoundsSettingsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!HearingUtilitiesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4D18;
    v5 = 0;
    HearingUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HearingUtilitiesLibraryCore_frameworkLibrary)
    __getHUComfortSoundsSettingsClass_block_invoke_cold_1(&v3);
  result = objc_getClass("HUComfortSoundsSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getHUComfortSoundsSettingsClass_block_invoke_cold_2();
  getHUComfortSoundsSettingsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t PersonalAudioLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!PersonalAudioLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C4D30;
    v3 = 0;
    PersonalAudioLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PersonalAudioLibraryCore_frameworkLibrary)
    PersonalAudioLibrary_cold_1(&v1);
  return PersonalAudioLibraryCore_frameworkLibrary;
}

Class __getPASettingsClass_block_invoke(uint64_t a1)
{
  Class result;

  PersonalAudioLibrary();
  result = objc_getClass("PASettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPASettingsClass_block_invoke_cold_1();
  getPASettingsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getWatchControlSettingsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!WatchControlSettingsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4D48;
    v5 = 0;
    WatchControlSettingsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!WatchControlSettingsLibraryCore_frameworkLibrary)
    __getWatchControlSettingsClass_block_invoke_cold_1(&v3);
  result = objc_getClass("WatchControlSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getWatchControlSettingsClass_block_invoke_cold_2();
  getWatchControlSettingsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAXUIClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AccessibilityUILibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4D60;
    v5 = 0;
    AccessibilityUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AccessibilityUILibraryCore_frameworkLibrary)
    __getAXUIClientClass_block_invoke_cold_1(&v3);
  result = objc_getClass("AXUIClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getAXUIClientClass_block_invoke_cold_2();
  getAXUIClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAXPISystemActionHelperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4D78;
    v5 = 0;
    AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary)
    __getAXPISystemActionHelperClass_block_invoke_cold_1(&v3);
  result = objc_getClass("AXPISystemActionHelper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getAXPISystemActionHelperClass_block_invoke_cold_2();
  getAXPISystemActionHelperClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSpeakThisServicesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SpeakThisServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C4D90;
    v5 = 0;
    SpeakThisServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpeakThisServicesLibraryCore_frameworkLibrary)
    __getSpeakThisServicesClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SpeakThisServices");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSpeakThisServicesClass_block_invoke_cold_2();
  getSpeakThisServicesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

char *OUTLINED_FUNCTION_0()
{
  return dlerror();
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id AXVoiceNameForVoiceId(void *a1, int a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  if (a1)
  {
    AXResourceFromVoiceId(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v3;
    v6 = v5;
    v7 = v4;
    if (a2)
    {
      v7 = v4;
      if (objc_msgSend(v5, "type") == 3)
      {
        if (objc_msgSend(v6, "subtype") != 7
          || (v7 = v4, objc_msgSend(v6, "subtype") == 7) && (v7 = v4, objc_msgSend(v6, "footprint") != 3))
        {
          +[AXLanguageManager sharedInstance](AXLanguageManager, "sharedInstance");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "primaryLanguage");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "dialectForLanguageID:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          v11 = (void *)MEMORY[0x1E0CB3940];
          AXLocalizedString(CFSTR("siri.and.locale"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "localeNameInCurrentLocale");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "stringWithFormat:", v12, v4, v13);
          v7 = (id)objc_claimAutoreleasedReturnValue();

        }
      }
    }

    v14 = v7;
  }
  else
  {
    v14 = 0;
  }
  return v14;
}

id AXResourceFromVoiceId(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0DBEF08];
  v2 = a1;
  objc_msgSend(v1, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "resourceWithVoiceId:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id AXVoiceNameForVoiceIdWithFootprint(void *a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    AXResourceFromVoiceId(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "localizedNameWithFootprint");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id AXSiriTTSSynthesisVoiceFromVoiceIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(MEMORY[0x1E0DBEF18], "isSiriVoiceIdentifier:", v3))
  {
    v17 = v4;
    v18 = 0;
    v16 = 0;
    v5 = (id *)&v16;
    TTSGetComponentsInNamedSiriVoiceIdentifier();
    v6 = v18;
    v7 = v17;

    v4 = v7;
LABEL_5:
    v8 = *v5;
    goto LABEL_7;
  }
  if (objc_msgSend(MEMORY[0x1E0DBEF18], "isVocalizerVoiceIdentifier:", v3))
  {
    v14 = 0;
    v15 = 0;
    v5 = (id *)&v14;
    TTSGetComponentsInNashvilleVoiceIdentifier();
    v6 = v15;
    goto LABEL_5;
  }
  v6 = 0;
  v8 = 0;
LABEL_7:
  v9 = objc_alloc(MEMORY[0x1E0DA7900]);
  objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "initWithLanguage:name:", v10, v6);

  if ((objc_msgSend(MEMORY[0x1E0DBEF18], "isNeuralAXSiriVoiceIdentifier:", v3) & 1) != 0)
  {
    v12 = 5;
  }
  else if ((objc_msgSend(MEMORY[0x1E0DBEF18], "isNeuralSiriVoiceIdentifier:", v3) & 1) != 0)
  {
    v12 = 4;
  }
  else if (objc_msgSend(MEMORY[0x1E0DBEF18], "isSiriVoiceIdentifier:", v3))
  {
    v12 = 3;
  }
  else
  {
    v12 = 1;
  }
  objc_msgSend(v11, "setType:", v12);

  return v11;
}

uint64_t AXSiriTTSSynthesisVoiceAssetsAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "language");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "language");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", v6)
    && (v7 = objc_msgSend(v3, "type"), v7 == objc_msgSend(v4, "type")))
  {
    objc_msgSend(v3, "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "isEqualToString:", v9);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id AXClientsForSiriResource(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  dispatch_semaphore_t v7;
  id v8;
  NSObject *v9;
  id v10;
  dispatch_time_t v11;
  dispatch_semaphore_t v12;
  id v13;
  _QWORD v15[4];
  id v16;
  id v17;
  dispatch_semaphore_t v18;

  v1 = a1;
  if (objc_msgSend(v1, "type") == 3)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_alloc_init(MEMORY[0x1E0DA78B0]);
    objc_msgSend(v1, "voiceId");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "primaryLanguage");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    AXSiriTTSSynthesisVoiceFromVoiceIdentifier(v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = dispatch_semaphore_create(0);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __AXClientsForSiriResource_block_invoke;
    v15[3] = &unk_1E24C4F00;
    v16 = v6;
    v8 = v2;
    v17 = v8;
    v18 = v7;
    v9 = v7;
    v10 = v6;
    objc_msgSend(v3, "subscribedVoicesWithReply:", v15);
    v11 = dispatch_time(0, 2000000000);
    dispatch_semaphore_wait(v9, v11);
    v12 = v18;
    v13 = v8;

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id AXClientsForSiriVoice(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  dispatch_semaphore_t v8;
  id v9;
  NSObject *v10;
  id v11;
  dispatch_time_t v12;
  dispatch_semaphore_t v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  dispatch_semaphore_t v19;

  v1 = (void *)MEMORY[0x1E0C99DE8];
  v2 = a1;
  objc_msgSend(v1, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0DA78B0]);
  objc_msgSend(v2, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "language");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  AXSiriTTSSynthesisVoiceFromVoiceIdentifier(v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = dispatch_semaphore_create(0);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __AXClientsForSiriVoice_block_invoke;
  v16[3] = &unk_1E24C4F00;
  v17 = v7;
  v9 = v3;
  v18 = v9;
  v19 = v8;
  v10 = v8;
  v11 = v7;
  objc_msgSend(v4, "subscribedVoicesWithReply:", v16);
  v12 = dispatch_time(0, 2000000000);
  dispatch_semaphore_wait(v10, v12);
  v13 = v19;
  v14 = v9;

  return v14;
}

uint64_t AXResourceActivelyUsed(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;

  v1 = a1;
  AXClientsForSiriResource(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "selectedSpeechVoiceIdentifiers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "voiceId");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "containsObject:", v5);
  if (objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(v2, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.accessibility.AccessibilityUIServer")) & 1) != 0)
    {

      if ((v6 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      objc_msgSend(v2, "firstObject");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.AccessibilityUIServer")) & 1) != 0)
      {

        if (!(_DWORD)v6)
          goto LABEL_13;
      }
      else
      {
        objc_msgSend(v2, "firstObject");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.accessibility.axassetsd"));

        if (((v10 ^ 1 | v6) & 1) == 0)
        {
LABEL_12:
          v6 = 0;
          goto LABEL_13;
        }
      }
    }
  }
  if (objc_msgSend(v2, "count"))
    v6 = 1;
  else
    v6 = v6;
LABEL_13:

  return v6;
}

void AXSwapSpeechSettingsIdentifiers(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  v33 = a1;
  v5 = a2;
  v6 = a3;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x1E0CF37F0];
  objc_msgSend(v7, "speechVoiceIdentifierForLanguageWithoutFallback:sourceKey:", v6, *MEMORY[0x1E0CF37F0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "isEqualToString:", v33))
  {
    AXCRemapLanguageCodeToFallbackIfNeccessary();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", v5, v10, v8);

    if ((objc_msgSend(v10, "isEqualToString:", v6) & 1) == 0)
    {
      +[AXSettings sharedInstance](AXSettings, "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", 0, v6, v8);

    }
  }
  AXCLanguageCanonicalFormToGeneralLanguageUsingFallback();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "speechVoiceIdentifierForLanguageWithoutFallback:sourceKey:", v13, v8);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v15, "isEqualToString:", v33))
  {
    AXCLanguageCanonicalFormToGeneralLanguage();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", v5, v16, v8);

    if ((objc_msgSend(v16, "isEqualToString:", v6) & 1) == 0)
    {
      +[AXSettings sharedInstance](AXSettings, "sharedInstance");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", 0, v13, v8);

    }
  }
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = *MEMORY[0x1E0CF37D8];
  objc_msgSend(v19, "speechVoiceIdentifierForLanguageWithoutFallback:sourceKey:", v13, *MEMORY[0x1E0CF37D8]);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v21, "isEqualToString:", v33))
  {
    AXCLanguageCanonicalFormToGeneralLanguage();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", v5, v22, v20);

    if ((objc_msgSend(v22, "isEqualToString:", v6) & 1) == 0)
    {
      +[AXSettings sharedInstance](AXSettings, "sharedInstance");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", 0, v13, v20);

    }
  }
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = *MEMORY[0x1E0CF37E0];
  objc_msgSend(v25, "speechVoiceIdentifierForLanguageWithoutFallback:sourceKey:", v13, *MEMORY[0x1E0CF37E0]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v27, "isEqualToString:", v33))
  {
    v32 = v15;
    v28 = v9;
    AXCLanguageCanonicalFormToGeneralLanguage();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", v5, v29, v26);

    if ((objc_msgSend(v29, "isEqualToString:", v6) & 1) == 0)
    {
      +[AXSettings sharedInstance](AXSettings, "sharedInstance");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setSpeechVoiceIdentifier:forLanguage:sourceKey:", 0, v13, v26);

    }
    v9 = v28;
    v15 = v32;
  }

}

uint64_t AXVoiceActivelyUsed(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;

  v5 = a1;
  AXClientsForSiriVoice((void *)v5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "selectedSpeechVoiceIdentifiers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v5, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v5) = objc_msgSend(v3, "containsObject:", v4);
  if (objc_msgSend(v1, "count") == 1
    && (objc_msgSend(v1, "firstObject"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("com.apple.accessibility.AccessibilityUIServer")),
        v6,
        (v7 ^ 1 | v5) != 1))
  {
    v5 = 0;
  }
  else if (objc_msgSend(v1, "count"))
  {
    v5 = 1;
  }
  else
  {
    v5 = v5;
  }

  return v5;
}

id AXSiriDisplayNameForIdentifier()
{
  id v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  TTSGetComponentsInNamedSiriVoiceIdentifier();
  v0 = 0;
  v1 = 0;
  objc_msgSend(MEMORY[0x1E0CFE900], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "outputVoiceDescriptorForOutputLanguageCode:voiceName:", v1, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CFE900], "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "lowercaseString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "outputVoiceDescriptorForOutputLanguageCode:voiceName:", v1, v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v5, "localizedDisplay");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t AXForceTouchAvailableAndEnabled()
{
  uint64_t result;

  result = _AXSForceTouchEnabled();
  if ((_DWORD)result)
    return MGGetBoolAnswer();
  return result;
}

double AXForceTouchThreshold()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0)
    _registerForSensitivityChangedNotifications();
  return *(float *)&_cachedPeek;
}

double AXForceTouchThresholdPeek()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0)
    _registerForSensitivityChangedNotifications();
  return *(float *)&_cachedPeek;
}

double AXForceTouchThresholdPeekPopMidpoint()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0)
    _registerForSensitivityChangedNotifications();
  return *(float *)&_cachedPeekPopMidpoint;
}

float _registerForSensitivityChangedNotifications()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_handleMultiplerChanged, (CFStringRef)*MEMORY[0x1E0DDE0B0], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  _listeningForSensitivityMultiplerChanged = 1;
  return _calculateThresholds();
}

double AXForceTouchThresholdPop()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0)
    _registerForSensitivityChangedNotifications();
  return *(float *)&_cachedPop;
}

float _calculateThresholds()
{
  float v0;
  float v1;
  float result;

  _AXSForceTouchSensitivity();
  *(float *)&_cachedPeek = v0 * 300.0;
  _AXSForceTouchSensitivity();
  *(float *)&_cachedPop = v1 * 400.0;
  result = (float)((float)(v1 * 400.0) - *(float *)&_cachedPeek) * 0.5 + *(float *)&_cachedPeek;
  _cachedPeekPopMidpoint = LODWORD(result);
  return result;
}

void sub_18C641180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_18C642084(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_18C643030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

uint64_t _axEventTapHIDCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a3;
  +[AXEventTapManager sharedManager](AXEventTapManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "_processHIDEvent:taskPort:bundleId:", a1, a2, v5);

  return v7;
}

uint64_t _ioHIDEventFilterCallback(uint64_t a1, void *a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  double Current;
  int Type;
  BOOL v9;
  BOOL v10;
  CFTypeRef v11;
  const void *v12;
  CFTypeRef v13;
  uint64_t v14;
  void *v15;
  char v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t (**v21)(_QWORD, _QWORD);
  id v23;
  id v24;

  Current = CFAbsoluteTimeGetCurrent();
  Type = IOHIDEventGetType();
  if (Type != 17 && Type != 11)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_15;
  }
  if (IOHIDEventGetIntegerValue())
    v9 = IOHIDEventGetIntegerValue() != 0;
  else
    v9 = 0;
  v10 = 0;
  if (a3 && !v9)
  {
    v11 = IOHIDServiceClientCopyProperty(a3, CFSTR("Transport"));
    if (v11)
    {
      v12 = v11;
      if (!CFEqual(v11, CFSTR("AirPlay")))
      {
        v10 = 0;
        goto LABEL_14;
      }
      CFRelease(v12);
      v13 = IOHIDServiceClientCopyProperty(a3, CFSTR("Category"));
      if (v13)
      {
        v12 = v13;
        v10 = CFEqual(v13, CFSTR("Automotive")) != 0;
LABEL_14:
        CFRelease(v12);
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
LABEL_15:
  v14 = 0;
  if (a4 && !v10)
  {
    if (IOHIDEventGetType() == 15)
      return 0;
    +[AXEventTapManager sharedManager](AXEventTapManager, "sharedManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "_accessibilityShouldIgnoreHIDServiceForContinuity:", a3);

    if ((v16 & 1) != 0)
    {
      return 0;
    }
    else
    {
      v17 = (void *)MEMORY[0x18D7864C8]();
      v18 = a2;
      objc_msgSend(v18, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[AXEventRepresentation representationWithHIDEvent:serviceClient:hidStreamIdentifier:](AXEventRepresentation, "representationWithHIDEvent:serviceClient:hidStreamIdentifier:", a4, a3, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "handler");
      v21 = (uint64_t (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v14 = ((uint64_t (**)(_QWORD, void *))v21)[2](v21, v20);

      if (CFAbsoluteTimeGetCurrent() - Current >= 0.016)
      {
        v23 = v18;
        v24 = v20;
        AXPerformBlockAsynchronouslyOnMainThread();

      }
      objc_autoreleasePoolPop(v17);
    }
  }
  return v14;
}

void ___ioHIDEventFilterCallback_block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  VOTLogCommon();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_18C62B000, v2, OS_LOG_TYPE_DEFAULT, "Failed to handle event in time for event tap: %@", (uint8_t *)&v6, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "failedToHandleInTime");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "failedToHandleInTime");
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v5[2](v5, *(_QWORD *)(a1 + 40));

  }
}

id AXRetainAutorelease(void *a1)
{
  return a1;
}

id AXSBTitleForMedusaGesture(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __CFString *v10;
  void *v11;
  const __CFString *v12;
  const __CFString *v13;

  v10 = CFSTR("SIDE_APP_RESIZE_TO_HALF");
  switch(a1)
  {
    case 0:
      goto LABEL_15;
    case 1:
      v12 = CFSTR("SIDE_APP_SHRINK_LEFT_APP");
      v13 = CFSTR("SIDE_APP_SHRINK_RIGHT_APP");
      goto LABEL_12;
    case 2:
      v12 = CFSTR("SIDE_APP_SHRINK_RIGHT_APP");
      v13 = CFSTR("SIDE_APP_SHRINK_LEFT_APP");
      goto LABEL_12;
    case 3:
      v12 = CFSTR("SIDE_APP_EXPAND_LEFT");
      v13 = CFSTR("SIDE_APP_EXPAND_RIGHT");
      goto LABEL_12;
    case 4:
      v12 = CFSTR("SIDE_APP_EXPAND_RIGHT");
      v13 = CFSTR("SIDE_APP_EXPAND_LEFT");
      goto LABEL_12;
    case 5:
    case 6:
      v10 = CFSTR("FLOAT_APP_SPLIT_VIEW");
      goto LABEL_15;
    case 7:
    case 8:
      v10 = CFSTR("FLOAT_APP_SLIDE_OVER");
      goto LABEL_15;
    case 9:
      v12 = CFSTR("FLOAT_APP_MOVE_RIGHT");
      v13 = CFSTR("FLOAT_APP_MOVE_LEFT");
      goto LABEL_12;
    case 10:
      v12 = CFSTR("FLOAT_APP_MOVE_LEFT");
      v13 = CFSTR("FLOAT_APP_MOVE_RIGHT");
LABEL_12:
      if (a2)
        v10 = (__CFString *)v13;
      else
        v10 = (__CFString *)v12;
      goto LABEL_15;
    case 11:
      v10 = CFSTR("FLOATING_APP_REMOVE_LEFT");
      goto LABEL_15;
    case 12:
      v10 = CFSTR("FLOATING_APP_REMOVE_RIGHT");
      goto LABEL_15;
    case 13:
      v10 = CFSTR("FLOAT_APP_SLIDE_OPEN_APP");
      goto LABEL_15;
    case 14:
      v10 = CFSTR("FLOAT_APP_DISMISS");
      goto LABEL_15;
    case 15:
      v10 = CFSTR("FLOATING_APP_SWITCHER");
      goto LABEL_15;
    case 16:
      v10 = CFSTR("FLOATING_APP_SWITCHER_SWIPE_RIGHT");
LABEL_15:
      AXParameterizedLocalizedString(1, v10, a3, a4, a5, a6, a7, a8, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v11 = 0;
      break;
  }
  return v11;
}

void sub_18C6465E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_18C647680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C647870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C64796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _isUILocked()
{
  uint64_t state64;

  if ((_isUILocked_isTokenInitialized & 1) == 0)
  {
    if (notify_register_check("com.apple.springboard.lockstate", &_isUILocked_token))
    {
      if (_isUILocked_isTokenInitialized != 1)
        return 0;
    }
    else
    {
      _isUILocked_isTokenInitialized = 1;
    }
  }
  state64 = 0;
  notify_get_state(_isUILocked_token, &state64);
  return state64 != 0;
}

BOOL _isDeviceLockedWithPasscode()
{
  uint64_t state64;

  if ((_isDeviceLockedWithPasscode_isTokenInitialized & 1) == 0)
  {
    if (notify_register_check("com.apple.springboard.passcodeLockedOrBlocked", &_isDeviceLockedWithPasscode_token))
    {
      if (_isDeviceLockedWithPasscode_isTokenInitialized != 1)
        return 0;
    }
    else
    {
      _isDeviceLockedWithPasscode_isTokenInitialized = 1;
    }
  }
  state64 = 0;
  notify_get_state(_isDeviceLockedWithPasscode_token, &state64);
  return state64 != 0;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t AXBTRouteIsAirpods(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = AXBTRouteIsAirpods_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&AXBTRouteIsAirpods_onceToken, &__block_literal_global_5);
  v3 = objc_msgSend((id)AXBTRouteIsAirpods_ValidAirPodRoutes, "containsObject:", v2);

  return v3;
}

BOOL AXIsBeatsProductId(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  if (objc_msgSend(v1, "vendorId") == 76)
    v2 = objc_msgSend(v1, "productId") == 8203
      || objc_msgSend(v1, "productId") == 8210
      || objc_msgSend(v1, "productId") == 8230
      || objc_msgSend(v1, "productId") == 8218
      || objc_msgSend(v1, "productId") == 8221;
  else
    v2 = 0;

  return v2;
}

void sub_18C64FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18C650118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18C650438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

uint64_t accessoryEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return objc_msgSend(a5, "_accessoryEventForManager:event:device:state:", a1, a2, a3, a4);
}

uint64_t serviceEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return objc_msgSend(a6, "_serviceEventForDevice:serviceMask:eventType:specificEvent:result:", a1, a2, a3, a4, a5);
}

uint64_t sessionEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "_sessionEventForSession:event:result:", a1, a2, a3);
}

void _prefChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  NSObject *v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  AXLogAirPodSettings();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v11 = a3;
    _os_log_impl(&dword_18C62B000, v4, OS_LOG_TYPE_DEFAULT, "Received pref change for %@", buf, 0xCu);
  }

  +[AXAirPodSettingsManager sharedInstance](AXAirPodSettingsManager, "sharedInstance");
  v5 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "ignoreSettingNotifications"))
  {
    AXLogAirPodSettings();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18C62B000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring preference change", buf, 2u);
    }
  }
  else
  {
    v7 = (void *)v5[6];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___prefChangedCallback_block_invoke;
    v8[3] = &unk_1E24C4C38;
    v9 = v5;
    objc_msgSend(v7, "afterDelay:processBlock:", v8, 0.2);
    v6 = v9;
  }

}

uint64_t ___prefChangedCallback_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applySettings");
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_18C6546BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AXUIAddressForBTDevice()
{
  _QWORD v1[32];

  v1[31] = *MEMORY[0x1E0C80C00];
  if (BTDeviceGetAddressString())
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_18C656188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18C658C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18C659138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_18C659438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_18C659C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAssistiveTouchChangeIconCount(void *a1, unint64_t a2)
{
  id v3;
  void *v4;
  unint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a1;
  if (objc_msgSend(v3, "count") >= a2)
  {
    if (objc_msgSend(v3, "count") <= a2)
    {
      v11 = v3;
    }
    else
    {
      AXAssistiveTouchRemoveIconsFromDictionary(v3, objc_msgSend(v3, "count") - a2);
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    v10 = v11;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a2 - objc_msgSend(v3, "count"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = objc_msgSend(v3, "count") + 1; i <= a2; ++i)
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "UUIDString");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("__empty%d__%@"), i, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v9);

    }
    AXAssistiveTouchInsertIconsIntoDictionary(v3, v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v10;
}

id AXAssistiveTouchInsertIconsIntoDictionary(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v3 = a2;
  v4 = (void *)objc_msgSend(a1, "mutableCopy");
  v5 = (void *)objc_msgSend(v3, "mutableCopy");
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;

  v9 = objc_msgSend(v4, "count");
  v10 = objc_msgSend(v8, "count") + v9;
  while (objc_msgSend(v4, "count") < v10)
  {
    if (objc_msgSend(v4, "count") < v10)
    {
      objc_msgSend(v8, "firstObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v4, "count"))
      {
        case 1:
          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidMiddle"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v15, CFSTR("AXAssistiveTouchIconLocationMidLeft"));

          objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("AXAssistiveTouchIconLocationMidRight"));
          objc_msgSend(v4, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationMidMiddle"));
          break;
        case 2:
        case 7:
          goto LABEL_10;
        case 3:
        case 5:
          v12 = v4;
          v13 = v11;
          v14 = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
          goto LABEL_12;
        case 4:
          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopMiddle"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v16, CFSTR("AXAssistiveTouchIconLocationTopLeft"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidRight"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v17, CFSTR("AXAssistiveTouchIconLocationTopRight"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationBottomMiddle"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v18, CFSTR("AXAssistiveTouchIconLocationMidRight"));

          objc_msgSend(v4, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationBottomMiddle"));
LABEL_10:
          v12 = v4;
          v13 = v11;
          v14 = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
          goto LABEL_12;
        case 6:
          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidLeft"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v19, CFSTR("AXAssistiveTouchIconLocationBottomLeft"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidRight"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v20, CFSTR("AXAssistiveTouchIconLocationBottomRight"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopLeft"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v21, CFSTR("AXAssistiveTouchIconLocationMidLeft"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopRight"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v22, CFSTR("AXAssistiveTouchIconLocationMidRight"));

          objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopMiddle"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v23, CFSTR("AXAssistiveTouchIconLocationTopLeft"));

          objc_msgSend(v4, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationTopMiddle"));
          v12 = v4;
          v13 = v11;
          v14 = CFSTR("AXAssistiveTouchIconLocationTopRight");
LABEL_12:
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, v14);
          break;
        default:
          break;
      }
      if (objc_msgSend(v8, "count"))
        objc_msgSend(v8, "removeObjectAtIndex:", 0);

    }
  }

  return v4;
}

id AXAssistiveTouchRemoveIconsFromDictionary(void *a1, uint64_t a2)
{
  void *v3;
  unint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = (void *)objc_msgSend(a1, "mutableCopy");
  v4 = objc_msgSend(v3, "count") - a2;
  if (objc_msgSend(v3, "count") > v4)
  {
    do
    {
      if (objc_msgSend(v3, "count") > v4)
      {
        v6 = objc_msgSend(v3, "count");
        v5 = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
        switch(v6)
        {
          case 2:
            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidLeft"));
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("AXAssistiveTouchIconLocationMidMiddle"));

            objc_msgSend(v3, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationMidRight"));
            v5 = CFSTR("AXAssistiveTouchIconLocationMidLeft");
            goto LABEL_8;
          case 3:
          case 8:
            goto LABEL_8;
          case 4:
          case 6:
            v5 = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
            goto LABEL_8;
          case 5:
            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidRight"));
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("AXAssistiveTouchIconLocationBottomMiddle"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopLeft"));
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("AXAssistiveTouchIconLocationTopMiddle"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopRight"));
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("AXAssistiveTouchIconLocationMidRight"));

            objc_msgSend(v3, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationTopLeft"));
            v5 = CFSTR("AXAssistiveTouchIconLocationTopRight");
            goto LABEL_8;
          case 7:
            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationTopLeft"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("AXAssistiveTouchIconLocationTopMiddle"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidRight"));
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("AXAssistiveTouchIconLocationTopRight"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationMidLeft"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("AXAssistiveTouchIconLocationTopLeft"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationBottomRight"));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v14, CFSTR("AXAssistiveTouchIconLocationMidRight"));

            objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AXAssistiveTouchIconLocationBottomLeft"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v15, CFSTR("AXAssistiveTouchIconLocationMidLeft"));

            objc_msgSend(v3, "removeObjectForKey:", CFSTR("AXAssistiveTouchIconLocationBottomRight"));
            v5 = CFSTR("AXAssistiveTouchIconLocationBottomLeft");
LABEL_8:
            objc_msgSend(v3, "removeObjectForKey:", v5);
            break;
          default:
            break;
        }
      }
    }
    while (objc_msgSend(v3, "count", v5) > v4);
  }
  return v3;
}

id AXAssistiveTouchIcons()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  AXAssistiveTouchSystemIcons();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  AXAssistiveTouchAccessibilityIcons();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "arrayByAddingObjectsFromArray:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  AXAssistiveTouchScrollIcons();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "arrayByAddingObjectsFromArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  AXAssistiveTouchCustomGesturesIcons();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "arrayByAddingObjectsFromArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  AXAssistiveTouchSpecificActionIcons();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "arrayByAddingObjectsFromArray:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  AXAssistiveTouchSiriShortcutsIcons();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  AXAssistiveTouchDwellIcons();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id AXAssistiveTouchSystemIcons()
{
  void *v0;

  if (AXAssistiveTouchSystemIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchSystemIcons_onceToken, &__block_literal_global_9);
  v0 = (void *)objc_msgSend((id)AXAssistiveTouchSystemIcons_Array, "mutableCopy");
  if ((AXDeviceCanArmApplePay() & 1) == 0)
  {
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIcontTypeArmApplePay"));
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIcontTypeConfirmApplePay"));
  }
  if (!AXDeviceIsSiriAvailable())
  {
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIconTypeSiri"));
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIconTypeTypeToSiri"));
  }
  if ((AXDeviceIsVoiceControlAvailable() & 1) == 0)
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIconTypeVoiceControl"));
  if ((AXForceTouchAvailableAndEnabled() & 1) == 0)
    objc_msgSend(v0, "removeObject:", CFSTR("AXAssistiveTouchIconTypeForceTap"));
  return v0;
}

id AXAssistiveTouchAccessibilityIcons()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (AXAssistiveTouchAccessibilityIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchAccessibilityIcons_onceToken, &__block_literal_global_223);
  v0 = (id)AXAssistiveTouchAccessibilityIcons_Array;
  if (AXRuntimeCheck_SupportsNearbyDeviceControl())
  {
    objc_msgSend(v0, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeNearbyDeviceControl"));
    v1 = objc_claimAutoreleasedReturnValue();

    v0 = (id)v1;
  }
  if (AXDeviceSupportsHoverTextTyping())
  {
    objc_msgSend(v0, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeHoverTextTyping"));
    v2 = objc_claimAutoreleasedReturnValue();

    v0 = (id)v2;
  }
  if (AXDeviceSupportsWatchRemoteScreen())
  {
    objc_msgSend(v0, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeWatchRemoteScreen"));
    v3 = objc_claimAutoreleasedReturnValue();

    v0 = (id)v3;
  }
  if (AXHasCapability(CFSTR("LiveTranscription")))
  {
    objc_msgSend(v0, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeLiveCaptions"));
    v4 = objc_claimAutoreleasedReturnValue();

    v0 = (id)v4;
  }
  objc_msgSend(v0, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeLiveSpeech"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (AXDeviceSupportsPhotosensitiveMitigation())
  {
    objc_msgSend(v5, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeDimFlashingLights"));
    v6 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v6;
  }
  if (AXDeviceSupportsMotionCues())
  {
    objc_msgSend(v5, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeMotionCues"));
    v7 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v7;
  }
  if (AXDeviceSupportsHapticMusic())
  {
    objc_msgSend(v5, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeHapticMusic"));
    v8 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v8;
  }
  if (AXHasCapability(CFSTR("AXClarityUI")))
  {
    objc_msgSend(v5, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeAssistiveAccess"));
    v9 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v9;
  }
  if (AXDeviceSupportsCameraButton())
  {
    objc_msgSend(v5, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeCameraButton"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeCameraButtonLightPress"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "arrayByAddingObject:", CFSTR("AXAssistiveTouchIconTypeCameraButtonDoubleLightPress"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

id AXAssistiveTouchScrollIcons()
{
  if (AXAssistiveTouchScrollIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchScrollIcons_onceToken, &__block_literal_global_232);
  return (id)AXAssistiveTouchScrollIcons_Array;
}

id AXAssistiveTouchCustomGesturesIcons()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "assistiveTouchCustomGestures");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v7), "name");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "stringWithFormat:", CFSTR("CustomGesture-%@"), v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v10);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v2;
}

id AXAssistiveTouchSpecificActionIcons()
{
  if (AXAssistiveTouchSpecificActionIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchSpecificActionIcons_onceToken, &__block_literal_global_233);
  return (id)AXAssistiveTouchSpecificActionIcons_Array;
}

id AXAssistiveTouchSiriShortcutsIcons()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  +[AXSiriShortcutsManager sharedManager](AXSiriShortcutsManager, "sharedManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "shortcuts");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12 = v1;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v7), "identifier");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("SiriShortcut"), v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v10);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

    v1 = v12;
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v2;
}

id AXAssistiveTouchDwellIcons()
{
  if (AXAssistiveTouchDwellIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchDwellIcons_onceToken, &__block_literal_global_231);
  return (id)AXAssistiveTouchDwellIcons_Array;
}

id AXAssistiveTouchEyeTrackingIcons()
{
  if (AXAssistiveTouchEyeTrackingIcons_onceToken != -1)
    dispatch_once(&AXAssistiveTouchEyeTrackingIcons_onceToken, &__block_literal_global_237);
  return (id)AXAssistiveTouchEyeTrackingIcons_Array;
}

double AXAssitiveTouchPosition(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;

  v3 = a1;
  v4 = v3;
  switch(a2)
  {
    case 1:
      v6 = 0.5;
      if ((objc_msgSend(v3, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidMiddle")) & 1) == 0)
      {
        _AXAssert();
        goto LABEL_9;
      }
      break;
    case 2:
    case 3:
    case 4:
      v5 = _AXAssitiveTouchPositionForDefault4(v3);
      goto LABEL_5;
    case 5:
    case 6:
      v5 = _AXAssitiveTouchPositionForDefault6(v3);
      goto LABEL_5;
    case 7:
    case 8:
      v5 = _AXAssitiveTouchPositionForDefault8(v3);
LABEL_5:
      v6 = v5;
      break;
    default:
LABEL_9:
      v6 = *MEMORY[0x1E0C9D538];
      break;
  }

  return v6;
}

double _AXAssitiveTouchPositionForDefault8(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopLeft")) & 1) != 0)
  {
LABEL_2:
    v2 = 0.205;
    goto LABEL_8;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopMiddle")) & 1) != 0)
    goto LABEL_4;
  v2 = 0.794;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopRight")) & 1) != 0)
    goto LABEL_8;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidLeft")) & 1) != 0)
    goto LABEL_2;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidRight")) & 1) != 0)
    goto LABEL_8;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationBottomLeft")) & 1) != 0)
    goto LABEL_2;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationBottomMiddle")) & 1) != 0)
  {
LABEL_4:
    v2 = 0.5;
    goto LABEL_8;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationBottomRight")) & 1) == 0)
  {
    _AXAssert();
    v2 = *MEMORY[0x1E0C9D538];
  }
LABEL_8:

  return v2;
}

double _AXAssitiveTouchPositionForDefault6(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopLeft")) & 1) != 0)
  {
LABEL_2:
    v2 = 0.217;
    goto LABEL_6;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopMiddle")) & 1) != 0)
    goto LABEL_4;
  v2 = 0.782;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopRight")) & 1) != 0)
    goto LABEL_6;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidLeft")) & 1) != 0)
    goto LABEL_2;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationBottomMiddle")) & 1) != 0)
  {
LABEL_4:
    v2 = 0.5;
    goto LABEL_6;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidRight")) & 1) == 0)
  {
    _AXAssert();
    v2 = *MEMORY[0x1E0C9D538];
  }
LABEL_6:

  return v2;
}

double _AXAssitiveTouchPositionForDefault4(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  v2 = 0.5;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationTopMiddle")) & 1) == 0)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidLeft")) & 1) != 0)
    {
      v2 = 0.203;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationMidRight")) & 1) != 0)
    {
      v2 = 0.806;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AXAssistiveTouchIconLocationBottomMiddle")) & 1) == 0)
    {
      _AXAssert();
      v2 = *MEMORY[0x1E0C9D538];
    }
  }

  return v2;
}

id AXAssistiveTouchLocationsForLayout(uint64_t a1)
{
  void *v1;
  const __CFString **v2;
  uint64_t v3;
  const __CFString *v5;
  _QWORD v6[2];
  _QWORD v7[3];
  _QWORD v8[4];
  _QWORD v9[5];
  _QWORD v10[6];
  _QWORD v11[7];
  _QWORD v12[9];

  v12[8] = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 1:
      v5 = CFSTR("AXAssistiveTouchIconLocationMidMiddle");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = &v5;
      v3 = 1;
      break;
    case 2:
      v6[0] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v6[1] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v6;
      v3 = 2;
      break;
    case 3:
      v7[0] = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
      v7[1] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v7[2] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v7;
      v3 = 3;
      break;
    case 4:
      v8[0] = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
      v8[1] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v8[2] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v8[3] = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v8;
      v3 = 4;
      break;
    case 5:
      v9[0] = CFSTR("AXAssistiveTouchIconLocationTopLeft");
      v9[1] = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
      v9[2] = CFSTR("AXAssistiveTouchIconLocationTopRight");
      v9[3] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v9[4] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v9;
      v3 = 5;
      break;
    case 7:
      v11[0] = CFSTR("AXAssistiveTouchIconLocationTopLeft");
      v11[1] = CFSTR("AXAssistiveTouchIconLocationTopRight");
      v11[2] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v11[3] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v11[4] = CFSTR("AXAssistiveTouchIconLocationBottomLeft");
      v11[5] = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
      v11[6] = CFSTR("AXAssistiveTouchIconLocationBottomRight");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v11;
      v3 = 7;
      break;
    case 8:
      v12[0] = CFSTR("AXAssistiveTouchIconLocationTopLeft");
      v12[1] = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
      v12[2] = CFSTR("AXAssistiveTouchIconLocationTopRight");
      v12[3] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v12[4] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v12[5] = CFSTR("AXAssistiveTouchIconLocationBottomLeft");
      v12[6] = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
      v12[7] = CFSTR("AXAssistiveTouchIconLocationBottomRight");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v12;
      v3 = 8;
      break;
    default:
      v10[0] = CFSTR("AXAssistiveTouchIconLocationTopLeft");
      v10[1] = CFSTR("AXAssistiveTouchIconLocationTopMiddle");
      v10[2] = CFSTR("AXAssistiveTouchIconLocationTopRight");
      v10[3] = CFSTR("AXAssistiveTouchIconLocationMidLeft");
      v10[4] = CFSTR("AXAssistiveTouchIconLocationMidRight");
      v10[5] = CFSTR("AXAssistiveTouchIconLocationBottomMiddle");
      v1 = (void *)MEMORY[0x1E0C99D20];
      v2 = (const __CFString **)v10;
      v3 = 6;
      break;
  }
  objc_msgSend(v1, "arrayWithObjects:count:", v2, v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t AXAssistiveTouchNamedLayout(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 8)
    return 0;
  return result;
}

const __CFString *AXAssistiveTouchDefaultIconTypeForMouseButton(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("__NONE__");
  else
    return off_1E24C5E88[a1 - 1];
}

const __CFString *AXAssistiveTouchDefaultLaserIconTypeForMouseButton(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("__NONE__");
  if (a1 == 2)
    v1 = CFSTR("AXAssistiveTouchIconTypeMouseSecondaryClick");
  if (a1 == 1)
    return CFSTR("AXAssistiveTouchIconTypeMousePrimaryClick");
  else
    return v1;
}

void sub_18C65F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t AXHasCapability(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  +[AXCapabilityManager sharedManager](AXCapabilityManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapabilityAvailable:", v1);

  return v3;
}

void sub_18C6633D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getRTTTelephonyUtilitiesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getRTTTelephonyUtilitiesClass_softClass;
  v7 = getRTTTelephonyUtilitiesClass_softClass;
  if (!getRTTTelephonyUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getRTTTelephonyUtilitiesClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getRTTTelephonyUtilitiesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C663598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C663B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVCCaptionsClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AVConferenceLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C6DB0;
    v5 = 0;
    AVConferenceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AVConferenceLibraryCore_frameworkLibrary)
    __getAVCCaptionsClientClass_block_invoke_cold_1(&v3);
  result = objc_getClass("AVCCaptionsClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getAVCCaptionsClientClass_block_invoke_cold_2();
  getAVCCaptionsClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUITextInputModeClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!UIKitLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C6DC8;
    v5 = 0;
    UIKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary)
    __getUITextInputModeClass_block_invoke_cold_1(&v3);
  result = objc_getClass("UITextInputMode");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getUITextInputModeClass_block_invoke_cold_2();
  getUITextInputModeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getRTTTelephonyUtilitiesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!RTTUtilitiesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C6DE0;
    v5 = 0;
    RTTUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!RTTUtilitiesLibraryCore_frameworkLibrary)
    __getRTTTelephonyUtilitiesClass_block_invoke_cold_1(&v3);
  result = objc_getClass("RTTTelephonyUtilities");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getRTTTelephonyUtilitiesClass_block_invoke_cold_2();
  getRTTTelephonyUtilitiesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCSPreferencesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!CoreSpeechLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C6DF8;
    v5 = 0;
    CoreSpeechLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreSpeechLibraryCore_frameworkLibrary)
    __getCSPreferencesClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CSPreferences");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCSPreferencesClass_block_invoke_cold_2();
  getCSPreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C664280(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 120));
  _Unwind_Resume(a1);
}

__CFString *AXNameForDetectionMode(unsigned int a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E24C6E60[a1];
}

id AXLocalizedNameForDetectionMode(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1 > 5)
    return 0;
  AXParameterizedLocalizedString(1, off_1E24C6E60[a1], a3, a4, a5, a6, a7, a8, v8);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t AXDetectionModeForName(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("detection.people")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("detection.doors")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("detection.scenes")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("detection.point.speak")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("detection.text")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("detection.furniture")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 2;
  }

  return v2;
}

void sub_18C665BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void AXIPCServerSetServerPort(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (AXIPCServerSetServerPort_onceToken != -1)
    dispatch_once(&AXIPCServerSetServerPort_onceToken, &__block_literal_global_284);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)ServerPortLock, "lock");
  if (v4)
    objc_msgSend((id)ServerPortMapping, "setObject:forKey:", v4, v3);
  else
    objc_msgSend((id)ServerPortMapping, "removeObjectForKey:", v3);
  objc_msgSend((id)ServerPortLock, "unlock");

}

void sub_18C6681E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_18C668A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCSendData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  int v14;
  void *v15;
  NSObject *v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v20[2];
  _QWORD v21[5];
  int v22;
  uint8_t buf[8];
  uint8_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v14 = a1;
  v27 = *MEMORY[0x1E0C80C00];
  AXIPCServerGetServer(a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a4, a5);
    v16 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    v24 = buf;
    v25 = 0x2020000000;
    v26 = 0;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ____AXXIPCSendData_block_invoke;
    v21[3] = &unk_1E24C7110;
    v21[4] = buf;
    v22 = a2;
    v17 = a9[1];
    v20[0] = *a9;
    v20[1] = v17;
    objc_msgSend(v15, "_handleIncomingMessage:securityToken:auditToken:clientPort:completion:", v16, a8, v20, a3, v21);
    if ((_DWORD)a3 && mach_port_deallocate(*MEMORY[0x1E0C83DA0], a3))
      _AXAssert();
    _Block_object_dispose(buf, 8);
    v18 = 4294966991;
  }
  else
  {
    AXLogIPC();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl(&dword_18C62B000, v16, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }
    v18 = 5;
  }

  return v18;
}

void sub_18C669F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCSimpleSendDataWithFencePort(uint64_t a1, uint64_t a2, mach_port_name_t a3, uint64_t a4, unsigned int a5, uint64_t a6, _OWORD *a7)
{
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  ipc_space_t *v16;
  uint64_t v17;
  NSObject *v18;
  _OWORD v20[2];
  _QWORD v21[5];
  mach_port_name_t v22;
  uint8_t buf[8];
  uint8_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a4, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  AXIPCServerGetServer(a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    *(_QWORD *)buf = 0;
    v24 = buf;
    v25 = 0x2020000000;
    v26 = 0;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ____AXXIPCSimpleSendDataWithFencePort_block_invoke;
    v21[3] = &unk_1E24C7110;
    v21[4] = buf;
    v22 = a3;
    v15 = a7[1];
    v20[0] = *a7;
    v20[1] = v15;
    objc_msgSend(v13, "_handleIncomingMessage:securityToken:auditToken:clientPort:completion:", v12, a6, v20, a2, v21);
    v16 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (a3)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], a3);
    if ((_DWORD)a2 && mach_port_deallocate(*v16, a2))
      _AXAssert();
    _Block_object_dispose(buf, 8);
    v17 = 0;
  }
  else
  {
    AXLogIPC();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a1;
      _os_log_impl(&dword_18C62B000, v18, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }

    v17 = 5;
  }

  return v17;
}

void sub_18C66A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66A41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCSendDataWithAsyncReply(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, _OWORD *a7)
{
  int v13;
  NSObject *v14;
  NSObject *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v19[2];
  _QWORD v20[5];
  int v21;
  uint8_t buf[8];
  uint8_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((a3 - 1) >= 0xFFFFFFFE)
  {
    AXLogIPC();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_18C62B000, v14, OS_LOG_TYPE_DEFAULT, "Reply port was invalid, name: 0x%x", buf, 8u);
    }
    v17 = 17;
  }
  else
  {
    v13 = a1;
    AXIPCServerGetServer(a1);
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a4, a5);
      v15 = objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = 0;
      v23 = buf;
      v24 = 0x2020000000;
      v25 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = ____AXXIPCSendDataWithAsyncReply_block_invoke;
      v20[3] = &unk_1E24C7110;
      v20[4] = buf;
      v21 = a3;
      v16 = a7[1];
      v19[0] = *a7;
      v19[1] = v16;
      -[NSObject _handleIncomingMessage:securityToken:auditToken:clientPort:completion:](v14, "_handleIncomingMessage:securityToken:auditToken:clientPort:completion:", v15, a6, v19, a2, v20);
      if ((_DWORD)a2 && mach_port_deallocate(*MEMORY[0x1E0C83DA0], a2))
        _AXAssert();
      _Block_object_dispose(buf, 8);
      v17 = 0;
    }
    else
    {
      AXLogIPC();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v13;
        _os_log_impl(&dword_18C62B000, v15, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
      }
      v17 = 5;
    }

  }
  return v17;
}

void sub_18C66A674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIWindowClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!UIKitLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E24C7178;
    v5 = 0;
    UIKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_0)
    __getUIWindowClass_block_invoke_cold_1(&v3);
  result = objc_getClass("UIWindow");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getUIWindowClass_block_invoke_cold_2();
  getUIWindowClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_18C66AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAXUIClientClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AccessibilityUILibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E24C71B0;
    v5 = 0;
    AccessibilityUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!AccessibilityUILibraryCore_frameworkLibrary_0)
    __getAXUIClientClass_block_invoke_cold_1_0(&v3);
  result = objc_getClass("AXUIClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getAXUIClientClass_block_invoke_cold_2_0();
  getAXUIClientClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void _sendOnceRightDestroyedCallback(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "sendOnceRightDestroyed");

}

void sub_18C66CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_18C66CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_18C66CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66D09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66D544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXIPCClient_handlePortInvalidCallback()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t v8[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  +[AXIPCClient allClients](AXIPCClient, "allClients");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        objc_msgSend(v5, "serverPort");
        if (AXSafeEqual())
        {
          objc_msgSend(v5, "portDeathHandler");
          v6 = (void *)objc_claimAutoreleasedReturnValue();

          if (v6)
            objc_msgSend(v5, "_serverDied");
        }
      }
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  AXLogIPC();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_18C62B000, v7, OS_LOG_TYPE_INFO, "Client went invalid", v8, 2u);
  }

}

void sub_18C66DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C66E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCReplyToAsyncRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v5;
  void *v6;

  +[AXIPCOutstandingAsyncRequest lookupByPort:](AXIPCOutstandingAsyncRequest, "lookupByPort:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a2, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v5, "rawResponseReceived:", v6);

  return 0;
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t deviceMatchingCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "didAddDevice:", a4);
}

uint64_t deviceRemovalCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "didRemoveDevice:", a4);
}

uint64_t AXHomeClickHapticsSupported()
{
  if (AXHomeClickHapticsSupported_onceToken != -1)
    dispatch_once(&AXHomeClickHapticsSupported_onceToken, &__block_literal_global_18);
  return AXHomeClickHapticsSupported_HapticsSupported;
}

uint64_t AXMIDINoteValueForNoteOrdinal(int a1)
{
  return (a1 - 12 * ((171 * a1) >> 11));
}

uint64_t AXMIDINoteOctaveForNoteOrdinal(int a1)
{
  return (171 * a1) >> 11;
}

id AXDateFromStringWithFormat(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = AXDateFromStringWithFormat_predicate;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&AXDateFromStringWithFormat_predicate, &__block_literal_global_22);
  objc_msgSend((id)AXDateFromStringWithFormat_formatter, "setDateFormat:", v4);

  objc_msgSend((id)AXDateFromStringWithFormat_formatter, "dateFromString:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id AXDateStringForFormat(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _AXCachedDateFormatterForFormat(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _AXCachedDateFormatterForFormat(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__8;
  v13 = __Block_byref_object_dispose__8;
  v14 = 0;
  if (_AXCachedDateFormatterForFormat_onceToken != -1)
    dispatch_once(&_AXCachedDateFormatterForFormat_onceToken, &__block_literal_global_38_0);
  v2 = _AXCachedDateFormatterForFormat_AXDateFormatterQueue;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___AXCachedDateFormatterForFormat_block_invoke_2;
  v6[3] = &unk_1E24C52F0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

id AXDateStringForFormatWithTimeZone(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a2;
  v6 = a1;
  _AXCachedDateFormatterForFormat(a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTimeZone:", v5);

  objc_msgSend(v7, "stringFromDate:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "setTimeZone:", 0);
  return v8;
}

id AXDateStringForFormatWithLocale(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a3;
  v6 = a1;
  _AXCachedDateFormatterForFormat(a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "locale");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setLocale:", v5);

  objc_msgSend(v7, "stringFromDate:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "setLocale:", v8);
  return v9;
}

id AXDateStringForFormatWithLocaleInCalendarAndTimeZone(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a1;
  _AXCachedDateFormatterForFormat(a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "locale");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "calendar");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "timeZone");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setLocale:", v11);

  objc_msgSend(v13, "setCalendar:", v10);
  objc_msgSend(v13, "setTimeZone:", v9);

  objc_msgSend(v13, "stringFromDate:", v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "setLocale:", v14);
  objc_msgSend(v13, "setCalendar:", v15);
  objc_msgSend(v13, "setTimeZone:", v16);

  return v17;
}

id AXShortDurationStringForDuration(double a1)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "setZeroFormattingBehavior:", 1);
  objc_msgSend(v3, "setUnitsStyle:", 1);
  objc_msgSend(v3, "setAllowedUnits:", 224);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "stringFromTimeInterval:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

id AXDurationStringForDuration(double a1)
{
  return _AXDurationStringForDuration(1, a1);
}

double AXDurationForDurationString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), &stru_1E24CAB08);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "reverseObjectEnumerator");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "allObjects");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = 0.0;
  if ((unint64_t)objc_msgSend(v4, "count") >= 3)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (double)(3600 * objc_msgSend(v6, "integerValue"));

  }
  if ((unint64_t)objc_msgSend(v4, "count") >= 2)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v5 + (double)(60 * objc_msgSend(v7, "integerValue"));

  }
  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v5 + (double)objc_msgSend(v8, "integerValue");

  }
  return v5;
}

uint64_t AXPositionalStyleDurationStringForDuration(double a1)
{
  uint64_t *v2;

  if (AXPositionalStyleDurationStringForDuration_onceToken != -1)
    dispatch_once(&AXPositionalStyleDurationStringForDuration_onceToken, &__block_literal_global_7);
  v2 = &AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter;
  if (a1 < 3600.0)
    v2 = &AXPositionalStyleDurationStringForDuration_minuteSecondFormatter;
  return objc_msgSend((id)*v2, "stringFromTimeInterval:", a1);
}

id AXClockTimeStringForDate(void *a1)
{
  void *v1;
  void *v2;

  AXDateStringForFormat(a1, CFSTR("jjmm"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CF40C0], "axAttributedStringWithString:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAttribute:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CF4160]);

  return v2;
}

id AXLocalizeDurationTime(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  double v10;
  uint64_t v11;
  float v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v1 = a1;
  if ((objc_msgSend(v1, "containsString:", CFSTR(":")) & 1) != 0)
  {
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), "init");
    v4 = objc_msgSend(v2, "count");
    v5 = v4 - 1;
    if (v4 >= 1)
    {
      v6 = 0;
      while (1)
      {
        objc_msgSend(v2, "objectAtIndex:", v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        if (!v6)
          break;
        if (v6 == 2)
        {
          if ((int)objc_msgSend(v7, "intValue") >= 1)
          {
            v9 = 3;
            goto LABEL_12;
          }
        }
        else if (v6 == 1 && (int)objc_msgSend(v7, "intValue") > 0)
        {
          v9 = 2;
          goto LABEL_12;
        }
LABEL_16:

        ++v6;
        if (--v5 == -1)
          goto LABEL_17;
      }
      v9 = 1;
LABEL_12:
      objc_msgSend(v8, "doubleValue");
      if (v10 < 10.0 && objc_msgSend(v8, "length") == 2)
      {
        objc_msgSend(v8, "substringFromIndex:", 1);
        v11 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v11;
      }
      objc_msgSend(v8, "floatValue");
      AXTimeStringForType(v9, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v13);

      goto LABEL_16;
    }
LABEL_17:
    objc_msgSend(v3, "reverseObjectEnumerator");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "allObjects");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "componentsJoinedByString:", CFSTR(", "));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = v16;
  }
  else
  {
    v17 = v1;
  }

  return v17;
}

id AXTimeStringForType(int a1, float a2)
{
  void *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  void *v7;

  switch(a1)
  {
    case 1:
      if (vabds_f32(floorf(a2), a2) <= 0.00001)
      {
        v5 = CFSTR("seconds.format.integer");
        goto LABEL_9;
      }
      v3 = (void *)MEMORY[0x1E0CB3940];
      AXLocalizedString(CFSTR("seconds.format.float"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "localizedStringWithFormat:", v4, a2);
      goto LABEL_10;
    case 2:
      v5 = CFSTR("minutes.format");
      goto LABEL_9;
    case 3:
      v5 = CFSTR("hours.format");
      goto LABEL_9;
    case 4:
      v5 = CFSTR("days.format");
      goto LABEL_9;
    default:
      v5 = 0;
LABEL_9:
      v6 = (void *)MEMORY[0x1E0CB3940];
      AXLocalizedString(v5);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "localizedStringWithFormat:", v4, (int)a2);
LABEL_10:
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      return v7;
  }
}

id AXLocDuration(uint64_t a1, double a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = objc_alloc_init(MEMORY[0x1E0CB3570]);
  v5 = v4;
  if (a1)
    v6 = 3;
  else
    v6 = 1;
  objc_msgSend(v4, "setUnitsStyle:", v6);
  v7 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v7, "setSecond:", (uint64_t)a2);
  objc_msgSend(v7, "setNanosecond:", (uint64_t)((a2 - (double)objc_msgSend(v7, "second")) * 1000000000.0));
  objc_msgSend(v5, "stringFromDateComponents:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "second");
  if (!a1 && a2 - (double)v9 > 0.0)
  {
    AXFormatFloat();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    AXParameterizedLocalizedString(1, CFSTR("AX_SUB_SECOND_ABBREVIATION"), v11, v12, v13, v14, v15, v16, (uint64_t)v10);
    v17 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v17;
  }

  return v8;
}

id AXStringForTimeSince(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:toDate:options:", 64, v1, v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:toDate:options:", 32, v1, v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hour");

    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:toDate:options:", 16, v1, v8, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "day");

    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:toDate:options:", 8, v1, v11, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "month");

    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:toDate:options:", 4, v1, v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "year");

    if (v16 < 1)
    {
      if (v13 < 1)
      {
        if (v10 < 1)
        {
          if (v7 < 1)
          {
LABEL_12:
            objc_msgSend(MEMORY[0x1E0CB3570], "localizedStringFromDateComponents:unitsStyle:", v4, 4);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            goto LABEL_13;
          }
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = v2;
          v19 = 32;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = v2;
          v19 = 16;
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v2;
        v19 = 8;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v2;
      v19 = 4;
    }
    objc_msgSend(v18, "components:fromDate:toDate:options:", v19, v1, v17, 0);
    v21 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v21;
    goto LABEL_12;
  }
  _AXLogWithFacility();
  v20 = 0;
LABEL_13:

  return v20;
}

id AXTimeAgoStringForTimeSince(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  AXStringForTimeSince(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    AXLocalizedString(CFSTR("time.ago"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "localizedStringWithFormat:", v3, v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t AXCurrentTimeForWatchFaces()
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "date");
}

id AXClockTimeStringForDateIncludingSeconds(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    AXDateStringForFormat(v3, CFSTR("jjmm"));
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "component:fromDate:", 128, v4);

    v8 = (void *)MEMORY[0x1E0CB3940];
    AXLocalizedString(CFSTR("time.with.seconds.format"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringWithFormat:", v9, v7, v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  else
  {
    AXDateStringForFormat(v3, CFSTR("jjmma"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(MEMORY[0x1E0CF40C0], "axAttributedStringWithString:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setAttribute:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CF4160]);

  return v11;
}

id AXClockTimeVoiceOverSpokenStringForWatchFaces(int a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  AXClockTimeStringForDateIncludingSeconds(v2, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

id AXTemperatureFromIntegerInUnits(uint64_t a1, int a2, int a3)
{
  float v6;
  float v7;
  void *v8;
  void *v9;
  void *v10;

  if (AXTemperatureFromIntegerInUnits_predicate != -1)
    dispatch_once(&AXTemperatureFromIntegerInUnits_predicate, &__block_literal_global_23);
  if (a2 != a3)
  {
    v6 = (float)a1;
    if (a3)
      v7 = (float)((float)(v6 + -32.0) * 5.0) / 9.0;
    else
      v7 = (float)((float)(v6 * 9.0) / 5.0) + 32.0;
    a1 = llroundf(v7);
  }
  v8 = (void *)AXTemperatureFromIntegerInUnits_formatter;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringFromNumber:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

__CFString *AXTemperatureFromStringInUnits(void *a1, int a2, int a3)
{
  id v5;
  void *v6;
  __CFString *v7;

  v5 = a1;
  v6 = v5;
  if (v5 && objc_msgSend(v5, "length"))
  {
    v7 = CFSTR("--");
    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("--")) & 1) == 0)
    {
      AXTemperatureFromIntegerInUnits(objc_msgSend(v6, "integerValue"), a2, a3);
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v7 = CFSTR("--");
  }

  return v7;
}

double AX_CGRectGetCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

double AX_CGPointGetDistanceToPoint(double a1, double a2, double a3, double a4)
{
  return sqrt((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
}

double AX_CGRectBySubtractingRect(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  double v20;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  if (CGRectIsEmpty(*(CGRect *)&a3))
    return a3;
  v27.origin.x = a7;
  v27.origin.y = a8;
  v27.size.width = a9;
  v27.size.height = a10;
  if (CGRectIsEmpty(v27))
    return a3;
  v28.origin.x = a3;
  v28.origin.y = a4;
  v28.size.width = a5;
  v28.size.height = a6;
  v32.origin.x = a7;
  v32.origin.y = a8;
  v32.size.width = a9;
  v32.size.height = a10;
  if (!CGRectIntersectsRect(v28, v32))
    return a3;
  v29.origin.x = a7;
  v29.origin.y = a8;
  v29.size.width = a9;
  v29.size.height = a10;
  v33.origin.x = a3;
  v33.origin.y = a4;
  v33.size.width = a5;
  v33.size.height = a6;
  if (CGRectContainsRect(v29, v33))
    return *MEMORY[0x1E0C9D648];
  v30.origin.x = a3;
  v30.origin.y = a4;
  v30.size.width = a5;
  v30.size.height = a6;
  v34.origin.x = a7;
  v34.origin.y = a8;
  v34.size.width = a9;
  v34.size.height = a10;
  v31 = CGRectIntersection(v30, v34);
  v22 = a4 + a6;
  v23 = v31.origin.y + v31.size.height;
  if (a4 >= v31.origin.y || v22 > v23)
  {
    if (a4 < v31.origin.y || v22 <= v23)
    {
      v24 = v31.origin.y - a4 > 0.0;
      if (!a2)
        v24 = 0;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    v24 = 1;
  }
  v25 = a3 + a5;
  v20 = v31.origin.x + v31.size.width;
  if (a3 < v31.origin.x && v25 <= v20)
  {
    v20 = a3;
LABEL_23:
    if (v24 && a1)
      return a3;
    return v20;
  }
  if (a3 >= v31.origin.x && v25 > v20)
    goto LABEL_23;
  v20 = a3;
  if (a2)
  {
    if (v31.origin.x - a3 > 0.0)
      goto LABEL_23;
  }
  return v20;
}

BOOL AX_CGRectAlmostEqualToRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double MinX;
  double MinY;
  double MaxX;
  double MaxY;
  CGFloat v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v35 = CGRectStandardize(*(CGRect *)&a1);
  x = v35.origin.x;
  y = v35.origin.y;
  width = v35.size.width;
  height = v35.size.height;
  v35.origin.x = a5;
  v35.origin.y = a6;
  v35.size.width = a7;
  v35.size.height = a8;
  v36 = CGRectStandardize(v35);
  v25 = v36.origin.x;
  v26 = v36.origin.y;
  v27 = v36.size.width;
  v28 = v36.size.height;
  v34 = x;
  v36.origin.x = x;
  v36.origin.y = y;
  v36.size.width = width;
  v36.size.height = height;
  MinX = CGRectGetMinX(v36);
  v37.origin.x = v25;
  v37.origin.y = v26;
  v37.size.width = v27;
  v37.size.height = v28;
  if (vabdd_f64(MinX, CGRectGetMinX(v37)) >= a9)
    return 0;
  v38.origin.y = y;
  v38.origin.x = v34;
  v38.size.width = width;
  v38.size.height = height;
  MinY = CGRectGetMinY(v38);
  v39.origin.x = v25;
  v39.origin.y = v26;
  v39.size.width = v27;
  v39.size.height = v28;
  if (vabdd_f64(MinY, CGRectGetMinY(v39)) >= a9)
    return 0;
  v40.origin.x = v34;
  v40.origin.y = y;
  v40.size.width = width;
  v40.size.height = height;
  MaxX = CGRectGetMaxX(v40);
  v41.origin.x = v25;
  v41.origin.y = v26;
  v41.size.width = v27;
  v41.size.height = v28;
  if (vabdd_f64(MaxX, CGRectGetMaxX(v41)) >= a9)
    return 0;
  v42.origin.x = v34;
  v42.origin.y = y;
  v42.size.width = width;
  v42.size.height = height;
  MaxY = CGRectGetMaxY(v42);
  v43.origin.x = v25;
  v43.origin.y = v26;
  v43.size.width = v27;
  v43.size.height = v28;
  return vabdd_f64(MaxY, CGRectGetMaxY(v43)) < a9;
}

double AX_CGPointGetMidpointToPoint(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

double AX_CGPointGetMidpointOfAllPoints(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t i;
  double v11;
  double v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = v2;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v1;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      v8 = 0.0;
      v9 = 0.0;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v8 = v8 + AX_CGPointFromString(*(void **)(*((_QWORD *)&v14 + 1) + 8 * i));
          v9 = v9 + v11;
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v6);
    }
    else
    {
      v8 = 0.0;
    }

    v12 = v8 / (double)v3;
  }
  else
  {
    v12 = *MEMORY[0x1E0C9D538];
  }

  return v12;
}

double AX_CGPointFromString(void *a1)
{
  id v1;
  double DoubleValue;
  __CFString *v3;
  CFIndex Length;
  CFIndex v5;
  uint64_t v6;
  int v7;
  CFIndex v8;
  CFIndex location;
  CFIndex v10;
  CFIndex v11;
  int CharacterAtIndex;
  CFIndex v14;
  const __CFString *v15;
  const __CFString *v16;
  CFIndex *v18;
  CFIndex v19;
  CFRange result;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  v1 = a1;
  DoubleValue = *MEMORY[0x1E0C9D538];
  if ((unint64_t)objc_msgSend(v1, "length") >= 5)
  {
    v3 = (__CFString *)v1;
    if (!ParseBracesAndCommas___braceCharacters)
      ParseBracesAndCommas___braceCharacters = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("{[,]}"));
    v19 = 0;
    Length = CFStringGetLength(v3);
    result.location = 0;
    result.length = 0;
    if (Length < 1)
    {
      v6 = 0;
      location = -1;
    }
    else
    {
      v5 = Length;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v18 = &v19;
      location = -1;
      v10 = Length;
      v11 = -1;
      while (1)
      {
        v21.location = v8;
        v21.length = v10;
        if (!CFStringFindCharacterFromSet(v3, (CFCharacterSetRef)ParseBracesAndCommas___braceCharacters, v21, 0, &result))break;
        if (result.location >= v5 || result.length != 1)
          break;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v3, result.location);
        if ((CharacterAtIndex & 0xFFFFFFDF) == 0x5B)
        {
          if (!v7)
            location = result.location;
          ++v7;
        }
        else if (CharacterAtIndex == 44)
        {
          if (v7 == 1)
          {
            if (v6 <= 0)
            {
              *v18++ = result.location;
              ++v6;
            }
            v7 = 1;
          }
        }
        else if ((CharacterAtIndex & 0xFFFFFFDF) == 0x5D && !--v7)
        {
          v11 = result.location;
          goto LABEL_28;
        }
        if (result.location + 1 < v5)
        {
          v10 += v8 + ~result.location;
          v8 = result.location + 1;
          if (v10 > 0)
            continue;
        }
        goto LABEL_28;
      }
    }
    v11 = -1;
LABEL_28:
    if (location == -1 || v11 == -1 || v6 != 1 || location >= v11 || (v14 = v19, v19 <= location + 1) || v19 >= v11 - 1)
    {

    }
    else
    {
      v22.length = v19 + ~location;
      v22.location = location + 1;
      v15 = CFStringCreateWithSubstring(0, v3, v22);
      v23.location = v14 + 1;
      v23.length = v11 + ~v14;
      v16 = CFStringCreateWithSubstring(0, v3, v23);

      DoubleValue = CFStringGetDoubleValue(v15);
      CFStringGetDoubleValue(v16);
      CFRelease(v15);
      CFRelease(v16);
    }
  }

  return DoubleValue;
}

double AX_CGPointGetOffsetAlongVectorWithDistance(double a1, double a2, double a3, double a4, double a5)
{
  double result;
  double v6;

  if (a3 - a1 == 0.0)
    return 0.0;
  v6 = sqrt(a5 * a5 / ((a4 - a2) / (a3 - a1) * ((a4 - a2) / (a3 - a1)) + 1.0));
  if (a3 >= a1)
    result = v6;
  else
    result = -v6;
  if (a5 < 0.0)
    return -result;
  return result;
}

CGFloat AX_CGRectToOrientation(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MainScreenBounds;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;

  MainScreenBounds = AXDeviceGetMainScreenBounds();
  return AX_CGRectToOrientationWithScreenBounds(a1, a2, a3, a4, a5, MainScreenBounds, v11, v12, v13);
}

CGFloat AX_CGRectToOrientationWithScreenBounds(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v17;
  double v18;
  double MaxY;
  CGFloat MinY;
  double MaxX;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  if (a1 == 4)
  {
    v27.origin.x = a6;
    v27.origin.y = a7;
    v27.size.width = a8;
    v27.size.height = a9;
    MaxY = CGRectGetMaxY(v27);
    v28.origin.x = a2;
    v28.origin.y = a3;
    v28.size.width = a4;
    v28.size.height = a5;
    v18 = MaxY - CGRectGetMaxY(v28);
    v29.origin.x = a2;
    v29.origin.y = a3;
    v29.size.width = a4;
    v29.size.height = a5;
    CGRectGetMinX(v29);
LABEL_7:
    v32.origin.x = a2;
    v32.origin.y = a3;
    v32.size.width = a4;
    v32.size.height = a5;
    CGRectGetHeight(v32);
    v33.origin.x = a2;
    v33.origin.y = a3;
    v33.size.width = a4;
    v33.size.height = a5;
    CGRectGetWidth(v33);
    return v18;
  }
  if (a1 == 3)
  {
    MinY = CGRectGetMinY(*(CGRect *)&a2);
    v30.origin.x = a6;
    v30.origin.y = a7;
    v30.size.width = a8;
    v18 = MinY;
    v30.size.height = a9;
    CGRectGetMaxX(v30);
    v31.origin.x = a2;
    v31.origin.y = a3;
    v31.size.width = a4;
    v31.size.height = a5;
    CGRectGetMaxX(v31);
    goto LABEL_7;
  }
  if (a1 != 2)
    return a2;
  v23.origin.x = a6;
  v23.origin.y = a7;
  v23.size.width = a8;
  v23.size.height = a9;
  MaxX = CGRectGetMaxX(v23);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  v17 = MaxX - CGRectGetMaxX(v24);
  v25.origin.x = a6;
  v25.origin.y = a7;
  v25.size.width = a8;
  v18 = v17;
  v25.size.height = a9;
  CGRectGetMaxY(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  CGRectGetMaxY(v26);
  return v18;
}

void AX_CGPathEnumerateElementsUsingBlock(const CGPath *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD aBlock[4];
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[4];
  _QWORD v11[3];
  char v12;

  v3 = a2;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __AX_CGPathEnumerateElementsUsingBlock_block_invoke;
  aBlock[3] = &unk_1E24C7578;
  v8 = v11;
  v4 = v3;
  v7 = v4;
  v9 = v10;
  v5 = _Block_copy(aBlock);
  CGPathApply(a1, v5, (CGPathApplierFunction)_CGPathEnumerationIteration);

  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);

}

void sub_18C679438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void _CGPathEnumerationIteration(const void *a1, uint64_t a2)
{
  void (**v3)(id, _QWORD);

  v3 = (void (**)(id, _QWORD))_Block_copy(a1);
  v3[2](v3, a2);

}

double AX_CGPathGetIntersectionPointWithOtherPath(const CGPath *a1, const CGPath *a2, char a3)
{
  double Center;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  int64x2_t v24;
  _QWORD v25[6];
  uint64_t v26;
  double *v27;
  uint64_t v28;
  void *v29;
  int64x2_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  void *v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int64x2_t v40;
  const CGPath *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  void *v50;
  int64x2_t v51;
  CGRect v52;

  if ((a3 & 1) != 0)
  {
    v47 = 0;
    v48 = (double *)&v47;
    v49 = 0x3010000000;
    v50 = &unk_18C749431;
    v51 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v42 = 0;
    v43 = (uint64_t)&v42;
    v44 = 0x3010000000;
    v45 = &unk_18C749431;
    v46 = *MEMORY[0x1E0C9D538];
    v36 = MEMORY[0x1E0C809B0];
    v37 = 3221225472;
    v38 = (uint64_t)___AX_CGPathGetIntersectionPointWithOtherPathExhaustive_block_invoke;
    v39 = &unk_1E24C7688;
    v40.i64[1] = (uint64_t)&v47;
    v41 = a2;
    v40.i64[0] = (uint64_t)&v42;
    AX_CGPathEnumerateElementsUsingBlock(a1, &v36);
    Center = v48[4];
    _Block_object_dispose(&v42, 8);
    v5 = &v47;
  }
  else
  {
    v36 = 0;
    v37 = (uint64_t)&v36;
    v38 = 0x3010000000;
    v39 = &unk_18C749431;
    v40 = *(int64x2_t *)MEMORY[0x1E0C9D538];
    v47 = 0;
    v48 = (double *)&v47;
    v49 = 0x3010000000;
    v50 = &unk_18C749431;
    v24 = v40;
    v51 = v40;
    v6 = MEMORY[0x1E0C809B0];
    v42 = MEMORY[0x1E0C809B0];
    v43 = 3221225472;
    v44 = (uint64_t)___AX_CGPathGetIntersectionPointWithOtherPathNonExhaustive_block_invoke;
    v45 = &unk_1E24C75C8;
    *(_QWORD *)&v46 = &v36;
    *((_QWORD *)&v46 + 1) = &v47;
    AX_CGPathEnumerateElementsUsingBlock(a1, &v42);
    v31 = 0;
    v32 = (double *)&v31;
    v33 = 0x3010000000;
    v34 = &unk_18C749431;
    v35 = v24;
    v26 = 0;
    v27 = (double *)&v26;
    v28 = 0x3010000000;
    v29 = &unk_18C749431;
    v30 = v24;
    v25[0] = v6;
    v25[1] = 3221225472;
    v25[2] = ___AX_CGPathGetIntersectionPointWithOtherPathNonExhaustive_block_invoke_2;
    v25[3] = &unk_1E24C75C8;
    v25[4] = &v31;
    v25[5] = &v26;
    AX_CGPathEnumerateElementsUsingBlock(a2, v25);
    v7 = v48[4];
    v8 = v48[5];
    v9 = *(double *)(v37 + 32);
    v10 = *(double *)(v37 + 40);
    if (v7 >= v9)
      v11 = *(_QWORD *)(v37 + 32);
    else
      v11 = *((_QWORD *)v48 + 4);
    if (v8 >= v10)
      v12 = *(_QWORD *)(v37 + 40);
    else
      v12 = *((_QWORD *)v48 + 5);
    v13 = fmax(vabdd_f64(v7, v9), 3.0);
    v14 = fmax(vabdd_f64(v8, v10), 3.0);
    v15 = v27[4];
    v16 = v27[5];
    v17 = v32[4];
    v18 = v32[5];
    if (v15 >= v17)
      v19 = *((_QWORD *)v32 + 4);
    else
      v19 = *((_QWORD *)v27 + 4);
    if (v16 >= v18)
      v20 = *((_QWORD *)v32 + 5);
    else
      v20 = *((_QWORD *)v27 + 5);
    v21 = fmax(vabdd_f64(v15, v17), 3.0);
    v22 = fmax(vabdd_f64(v16, v18), 3.0);
    v52 = CGRectIntersection(*(CGRect *)&v11, *(CGRect *)&v19);
    Center = 1.79769313e308;
    if (v52.size.width > 0.0 && v52.size.height != 0.0)
      Center = AX_CGRectGetCenter(v52.origin.x, v52.origin.y, v52.size.width, v52.size.height);
    _Block_object_dispose(&v26, 8);
    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v47, 8);
    v5 = &v36;
  }
  _Block_object_dispose(v5, 8);
  return Center;
}

void sub_18C6797B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v30 - 96), 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

double AX_CGPathGetIntersectionPointWithRect(const CGPath *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat MinX;
  CGFloat MaxX;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  _OWORD *v15;
  CGPath *Mutable;
  CGPath *v17;
  double *v18;
  CGFloat v19;
  CGFloat v20;
  double *v21;
  CGFloat v22;
  CGFloat v23;
  double IntersectionPointWithOtherPath;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  _QWORD v31[5];
  uint64_t v32;
  double *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  _OWORD v37[4];
  _QWORD v38[9];
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v38[8] = *MEMORY[0x1E0C80C00];
  MinX = CGRectGetMinX(*(CGRect *)&a2);
  v39.origin.x = a2;
  v39.origin.y = a3;
  v39.size.width = a4;
  v39.size.height = a5;
  *(CGFloat *)v38 = MinX;
  v38[1] = CGRectGetMinY(v39);
  v40.origin.x = a2;
  v40.origin.y = a3;
  v40.size.width = a4;
  v40.size.height = a5;
  MaxX = CGRectGetMaxX(v40);
  v41.origin.x = a2;
  v41.origin.y = a3;
  v41.size.width = a4;
  v41.size.height = a5;
  *(CGFloat *)&v38[2] = MaxX;
  v38[3] = CGRectGetMinY(v41);
  v42.origin.x = a2;
  v42.origin.y = a3;
  v42.size.width = a4;
  v42.size.height = a5;
  v12 = CGRectGetMaxX(v42);
  v43.origin.x = a2;
  v43.origin.y = a3;
  v43.size.width = a4;
  v43.size.height = a5;
  *(CGFloat *)&v38[4] = v12;
  v38[5] = CGRectGetMaxY(v43);
  v44.origin.x = a2;
  v44.origin.y = a3;
  v44.size.width = a4;
  v44.size.height = a5;
  v13 = CGRectGetMinX(v44);
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  v14 = 0;
  *(CGFloat *)&v38[6] = v13;
  v38[7] = CGRectGetMaxY(v45);
  v15 = (_OWORD *)MEMORY[0x1E0C9D538];
  do
  {
    Mutable = CGPathCreateMutable();
    if (Mutable)
    {
      v17 = Mutable;
      v18 = (double *)&v38[2 * v14];
      v19 = *v18;
      v20 = v18[1];
      v21 = (double *)&v38[2 * ((v14 + 1) & 3)];
      v22 = *v21;
      v23 = v21[1];
      CGPathMoveToPoint(Mutable, 0, v19, v20);
      CGPathAddLineToPoint(v17, 0, v22, v23);
      IntersectionPointWithOtherPath = AX_CGPathGetIntersectionPointWithOtherPath(a1, v17, 1);
      v25 = &v37[v14];
      *(double *)v25 = IntersectionPointWithOtherPath;
      *((_QWORD *)v25 + 1) = v26;
      CGPathRelease(v17);
    }
    else
    {
      v37[v14] = *v15;
    }
    ++v14;
  }
  while (v14 != 4);
  v32 = 0;
  v33 = (double *)&v32;
  v34 = 0x3010000000;
  v35 = &unk_18C749431;
  v36 = *v15;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __AX_CGPathGetIntersectionPointWithRect_block_invoke;
  v31[3] = &unk_1E24C75A0;
  v31[4] = &v32;
  AX_CGPathEnumerateElementsUsingBlock(a1, v31);
  v27 = 0;
  v28 = *(double *)v15;
  do
  {
    v29 = *(double *)&v37[v27];
    if (AX_CGPointGetDistanceToPoint(v29, *((double *)&v37[v27] + 1), v33[4], v33[5]) < 1.79769313e308)
      v28 = v29;
    ++v27;
  }
  while (v27 != 4);
  _Block_object_dispose(&v32, 8);
  return v28;
}

void sub_18C679AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AX_CGPathGetNumberOfElements(const CGPath *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __AX_CGPathGetNumberOfElements_block_invoke;
  v3[3] = &unk_1E24C75A0;
  v3[4] = &v4;
  AX_CGPathEnumerateElementsUsingBlock(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C679B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AX_CGPathGetStartingAndEndingPoints(const CGPath *a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3010000000;
  v14 = &unk_18C749431;
  v15 = *MEMORY[0x1E0C9D538];
  v6 = 0;
  v7 = &v6;
  v8 = 0x3010000000;
  v9 = &unk_18C749431;
  v10 = v15;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __AX_CGPathGetStartingAndEndingPoints_block_invoke;
  v5[3] = &unk_1E24C75C8;
  v5[4] = &v11;
  v5[5] = &v6;
  AX_CGPathEnumerateElementsUsingBlock(a1, v5);
  if (a2)
    *a2 = *((_OWORD *)v12 + 2);
  if (a3)
    *a3 = *((_OWORD *)v7 + 2);
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v11, 8);
}

void sub_18C679C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

double AX_CGPathGetPointForElementAtIndex(const CGPath *a1, uint64_t a2)
{
  double v2;
  _QWORD v4[6];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x3010000000;
  v8 = &unk_18C749431;
  v9 = *MEMORY[0x1E0C9D538];
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __AX_CGPathGetPointForElementAtIndex_block_invoke;
  v4[3] = &unk_1E24C75F0;
  v4[4] = &v5;
  v4[5] = a2;
  AX_CGPathEnumerateElementsUsingBlock(a1, v4);
  v2 = v6[4];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_18C679D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGMutablePathRef AX_CGCreatePathPathWithUniformInset(const CGPath *a1, double a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MidX;
  CGFloat MidY;
  CGMutablePathRef Mutable;
  _QWORD v12[8];
  CGRect BoundingBox;
  CGRect v14;

  BoundingBox = CGPathGetBoundingBox(a1);
  x = BoundingBox.origin.x;
  y = BoundingBox.origin.y;
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  MidX = CGRectGetMidX(BoundingBox);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  MidY = CGRectGetMidY(v14);
  Mutable = CGPathCreateMutable();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AX_CGCreatePathPathWithUniformInset_block_invoke;
  v12[3] = &__block_descriptor_64_e33_v44__0i8__CGPoint_dd_12Q20Q28_B36l;
  *(CGFloat *)&v12[4] = MidX;
  *(CGFloat *)&v12[5] = MidY;
  *(double *)&v12[6] = a2;
  v12[7] = Mutable;
  AX_CGPathEnumerateElementsUsingBlock(a1, v12);
  return Mutable;
}

double AX_CGPointInset(double a1, double a2, double a3, double a4, double a5)
{
  double v6;
  double v7;

  v6 = a1;
  if (vabdd_f64(a1, a3) >= 2.22044605e-16)
  {
    v7 = atan2(a2 - a4, a1 - a3);
    return v6 - a5 * __sincos_stret(v7).__cosval;
  }
  return v6;
}

id AX_CGPathGetDescription(const CGPath *a1)
{
  void *v2;
  id v3;
  _QWORD v5[4];
  id v6;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("\n"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __AX_CGPathGetDescription_block_invoke;
  v5[3] = &unk_1E24C7638;
  v3 = v2;
  v6 = v3;
  AX_CGPathEnumerateElementsUsingBlock(a1, v5);

  return v3;
}

uint64_t AX_CGPathCopyDataRepresentation(uint64_t result)
{
  if (result)
    return CGPathCreateEncodedData();
  return result;
}

uint64_t AX_CGPathCreateWithDataRepresentation(uint64_t result)
{
  if (result)
    return CGPathCreateWithData();
  return result;
}

void sub_18C67A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAudioHDMIChannelLabelDescription(uint64_t a1)
{
  __CFString *v2;
  void *v3;

  if ((int)a1 <= 32)
  {
    switch((int)a1)
    {
      case 1:
      case 5:
      case 10:
        goto LABEL_8;
      case 2:
      case 6:
      case 11:
        goto LABEL_9;
      case 3:
      case 9:
        goto LABEL_10;
      case 7:
        v2 = CFSTR("ChannelLayout_LeftCenter");
        goto LABEL_16;
      case 8:
        v2 = CFSTR("ChannelLayout_RightCenter");
        goto LABEL_16;
      default:
        goto LABEL_18;
    }
  }
  if ((int)a1 <= 43)
  {
    if ((_DWORD)a1 == 33)
    {
      v2 = CFSTR("ChannelLayout_RearLeft");
      goto LABEL_16;
    }
    if ((_DWORD)a1 == 34)
    {
      v2 = CFSTR("ChannelLayout_RearRight");
      goto LABEL_16;
    }
  }
  else
  {
    switch((_DWORD)a1)
    {
      case 0x2C:
LABEL_10:
        v2 = CFSTR("ChannelLayout_Center");
        goto LABEL_16;
      case 0x12E:
LABEL_9:
        v2 = CFSTR("ChannelLayout_Right");
        goto LABEL_16;
      case 0x12D:
LABEL_8:
        v2 = CFSTR("ChannelLayout_Left");
LABEL_16:
        AXLocalizedString(v2);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        return v3;
    }
  }
LABEL_18:
  if (AXIsInternalInstall())
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d - Unknown channel name - file a bug"), a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_18C67C128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18C67E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXAssertMainThreadCallback()
{
  void *v0;
  void *v1;

  dispatch_get_current_queue();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C80D38];

  if (v0 != v1)
    _AXAssert();
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_1_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id LocalizedString(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = a1;
  objc_msgSend(v1, "bundleForClass:", objc_opt_class());
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", v2, &stru_1E24CAB08, CFSTR("TeachableMoments"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id LocalizedItemString(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("TeachableMomentItems-%@-%@"), a2, CFSTR("iOS"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", v3, 0, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6 || objc_msgSend(v6, "isEqualToString:", v3))
  {
    AXLocStringKeyForModel(v3);
    v7 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringForKey:value:table:", v7, 0, v4);
    v9 = objc_claimAutoreleasedReturnValue();

    v3 = (id)v7;
    v6 = (void *)v9;
  }

  return v6;
}

uint64_t AXDeviceIsJ5XX()
{
  return MGIsDeviceOneOfType();
}

uint64_t AXDeviceHasTopTouchIDButton()
{
  if ((MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return MGIsDeviceOneOfType();
  }
}

uint64_t AXDeviceHasLongPress3dTouch()
{
  if (AXDeviceHasLongPress3dTouch_onceToken != -1)
    dispatch_once(&AXDeviceHasLongPress3dTouch_onceToken, &__block_literal_global_27);
  return AXDeviceHasLongPress3dTouch_HasLongPress3dTouch;
}

uint64_t AXDeviceHasHomeButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1)
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_35_0);
  return AXDeviceHasHomeButton_hasHomeButton;
}

uint64_t AXDeviceHasForcePress3dTouch()
{
  if (AXDeviceHasForcePress3dTouch_onceToken != -1)
    dispatch_once(&AXDeviceHasForcePress3dTouch_onceToken, &__block_literal_global_33);
  return AXDeviceHasForcePress3dTouch_HasForcePress3dTouch;
}

uint64_t AXDeviceHas3DTouch()
{
  if (AXDeviceHas3DTouch_onceToken != -1)
    dispatch_once(&AXDeviceHas3DTouch_onceToken, &__block_literal_global_34);
  return AXDeviceHas3DTouch_Has3DTouch;
}

uint64_t AXDeviceHasTopButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1)
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_35_0);
  if (AXDeviceHasHomeButton_hasHomeButton)
    return 0;
  else
    return AXDeviceIsPad();
}

uint64_t AXDeviceHasSideButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1)
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_35_0);
  if (AXDeviceHasHomeButton_hasHomeButton || (AXDeviceHasTopButton() & 1) != 0)
    return 0;
  else
    return AXDeviceIsRealityDevice() ^ 1;
}

uint64_t AXDeviceHasReduceTransparency()
{
  return 1;
}

BOOL AXDeviceHasPearl()
{
  if (_AXSMossdeepEnabled())
    return 0;
  if (AXDeviceHasPearl_onceToken != -1)
    dispatch_once(&AXDeviceHasPearl_onceToken, &__block_literal_global_38_1);
  return AXDeviceHasPearl_hasPearl != 0;
}

uint64_t AXDeviceCanArmApplePay()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPKPassLibraryClass_softClass;
  v7 = getPKPassLibraryClass_softClass;
  if (!getPKPassLibraryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPKPassLibraryClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getPKPassLibraryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  return objc_msgSend(v1, "contactlessInterfaceCanBePresentedFromSource:", 0);
}

void sub_18C68184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsSecureDoubleClick()
{
  if (AXDeviceSupportsSecureDoubleClick_onceToken != -1)
    dispatch_once(&AXDeviceSupportsSecureDoubleClick_onceToken, &__block_literal_global_41);
  return AXDeviceSupportsSecureDoubleClick_supportsSecureDoubleClick;
}

BOOL AXDeviceIsSiriAvailable()
{
  void *v0;
  _BOOL8 v1;

  if (!MGGetBoolAnswer())
    return 0;
  objc_msgSend(MEMORY[0x1E0CFE978], "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "assistantIsEnabled"))
    v1 = _AXSHomeButtonAssistant() != 1;
  else
    v1 = 0;

  return v1;
}

BOOL AXDeviceIsSiriAvailableInClarity()
{
  void *v0;
  _BOOL8 IsSiriAvailable;

  objc_msgSend(MEMORY[0x1E0D10778], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "allowSiri"))
    IsSiriAvailable = AXDeviceIsSiriAvailable();
  else
    IsSiriAvailable = 0;

  return IsSiriAvailable;
}

uint64_t AXDeviceIsVoiceControlAvailable()
{
  uint64_t result;
  void *v1;
  int v2;
  void *v3;
  int v4;
  unsigned int v5;
  void *v6;
  int v7;

  result = MGGetBoolAnswer();
  if ((_DWORD)result)
  {
    if (_AXSHomeButtonAssistant() == 1
      && (objc_msgSend(MEMORY[0x1E0D10780], "sharedSystemShellSwitcher"),
          v1 = (void *)objc_claimAutoreleasedReturnValue(),
          v2 = objc_msgSend(v1, "isClarityBoardEnabled"),
          v1,
          (v2 & 1) == 0))
    {
      +[AXSpringBoardServer server](AXSpringBoardServer, "server");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "isScreenLockedWithPasscode:", 0);

      if (v4)
      {
        v5 = v2 ^ 1;
        objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46EE8]);

        if (v7 == 2)
          return 0;
        else
          return v5;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AXDeviceIsRingerSwitchAvailable()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceIsSOSAvailable()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSOSManagerClass_softClass;
  v7 = getSOSManagerClass_softClass;
  if (!getSOSManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSOSManagerClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getSOSManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  return objc_msgSend(v1, "deviceSupportsSOS");
}

void sub_18C681B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsPencil()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsPhotosensitiveMitigation()
{
  if (AXDeviceSupportsPhotosensitiveMitigation_onceToken != -1)
    dispatch_once(&AXDeviceSupportsPhotosensitiveMitigation_onceToken, &__block_literal_global_58);
  return AXDeviceSupportsPhotosensitiveMitigation_SupportsPSE;
}

uint64_t AXDeviceSupportsHeadphoneNotifications()
{
  return AXDeviceIsPad() ^ 1;
}

void AXDeviceSizeMM()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(double *)&AXDeviceSizeMM__ResolvedValue_0 == 0.0 || *(double *)&AXDeviceSizeMM__ResolvedValue_1 == 0.0)
  {
    v0 = (void *)MGCopyAnswer();
    objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("main-screen-pitch"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    v3 = v2;

    objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("main-screen-width"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "doubleValue");
    v6 = v5;

    objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("main-screen-height"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "doubleValue");
    v9 = v8;

    if (v3 <= 0.0 || v6 <= 0.0 || v9 <= 0.0)
    {
      AXLogDisplay();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        AXDeviceSizeMM_cold_1();

      if (AXFallbackDeviceSizeMM_onceToken != -1)
        dispatch_once(&AXFallbackDeviceSizeMM_onceToken, &__block_literal_global_220);
      v10 = *(double *)&AXFallbackDeviceSizeMM_DeviceDimensions_0;
      v11 = *(double *)&AXFallbackDeviceSizeMM_DeviceDimensions_1;
      AXLogDisplay();
      v12 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v15 = 134218240;
      v16 = v10;
      v17 = 2048;
      v18 = v11;
      v13 = "Using (fallback!) physical device dimensions: [%.2fmm x %.2fmm]";
    }
    else
    {
      v10 = v6 / v3 * 25.4;
      v11 = v9 / v3 * 25.4;
      AXLogDisplay();
      v12 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:

        AXDeviceSizeMM__ResolvedValue_0 = *(_QWORD *)&v10;
        AXDeviceSizeMM__ResolvedValue_1 = *(_QWORD *)&v11;

        return;
      }
      v15 = 134218240;
      v16 = v10;
      v17 = 2048;
      v18 = v11;
      v13 = "Using physical device dimensions: [%.2fmm x %.2fmm]";
    }
    _os_log_impl(&dword_18C62B000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, 0x16u);
    goto LABEL_15;
  }
}

id AXDeviceGetLocalizedShortModelName()
{
  if (AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelNameOnceToken != -1)
    dispatch_once(&AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelNameOnceToken, &__block_literal_global_79);
  return (id)AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelName;
}

const __CFString *AXkMobileKeyBagLockStatusNotificationID()
{
  return CFSTR("com.apple.mobile.keybagd.lock_status");
}

uint64_t AXDeviceSupportsSideApp()
{
  if (AXDeviceSupportsSideApp_onceToken != -1)
    dispatch_once(&AXDeviceSupportsSideApp_onceToken, &__block_literal_global_84_0);
  return AXDeviceSupportsSideApp_DeviceSupportsMedusa;
}

BOOL AXDeviceIsUnlocked()
{
  int v0;

  v0 = MKBGetDeviceLockState();
  return !v0 || v0 == 3;
}

BOOL AXDeviceHasSystemPasscode()
{
  return MKBGetDeviceLockState() != 3;
}

uint64_t AXCanQueryGraphicServicesFunctions()
{
  return 1;
}

void AXDeviceRegisterForDisplayUpdates(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  objc_class *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE074430) && !_AXSMossdeepEnabled())
  {
    AXLogDisplay();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (objc_class *)objc_opt_class();
      NSStringFromClass(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412546;
      v8 = v5;
      v9 = 2048;
      v10 = v1;
      _os_log_impl(&dword_18C62B000, v3, OS_LOG_TYPE_DEFAULT, "Did register for display updates: %@<%p>", (uint8_t *)&v7, 0x16u);

    }
    _AXSharedDisplayManager();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "displayMonitor");
    v2 = objc_claimAutoreleasedReturnValue();

    -[NSObject addObserver:](v2, "addObserver:", v1);
    goto LABEL_9;
  }
  if (!_AXSMossdeepEnabled())
  {
    AXLogDisplay();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      AXDeviceRegisterForDisplayUpdates_cold_1();
LABEL_9:

  }
}

id _AXSharedDisplayManager()
{
  if ((_AXSharedDisplayManager_CanAccessDisplayManager & 1) != 0)
    return 0;
  if (_AXSharedDisplayManager_onceToken != -1)
    dispatch_once(&_AXSharedDisplayManager_onceToken, &__block_literal_global_226);
  return (id)_AXSharedDisplayManager__Shared;
}

void AXDeviceUnregisterForDisplayUpdates(void *a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = a1;
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE074430) && !_AXSMossdeepEnabled())
  {
    _AXSharedDisplayManager();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "displayMonitor");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "removeObserver:", v3);
  }
  else
  {
    _AXAssert();
  }

}

double AXDeviceGetMainScreenBounds()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  _AXSharedDisplayManager();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v0, "isInitialized") & 1) != 0)
  {
    objc_msgSend(v0, "coreAnimationMainDisplay");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "referenceBounds");
    v3 = v2;

  }
  else
  {
    v3 = *MEMORY[0x1E0C9D648];
  }

  return v3;
}

double AXDeviceGetMainScreenPixelBounds()
{
  void *v0;
  void *v1;
  double *v2;
  double v3;

  _AXSharedDisplayManager();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v0, "isInitialized") & 1) != 0)
  {
    objc_msgSend(v0, "coreAnimationMainDisplay");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "size");

    v2 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v2 = (double *)MEMORY[0x1E0C9D648];
  }
  v3 = *v2;

  return v3;
}

double AXDeviceGetMainScreenScaleFactor()
{
  void *v0;
  double v1;
  void *v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  _AXSharedDisplayManager();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = 1.0;
  if (objc_msgSend(v0, "isInitialized"))
  {
    objc_msgSend(v0, "coreAnimationMainDisplay");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "scale");
    v1 = v3;

    objc_msgSend(v0, "coreAnimationMainDisplay");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "size");
    v6 = v5;
    v8 = v7;

    if (v1 == 3.0 && v6 == 1280.0 && v8 == 2272.0)
      v1 = 4.0;
  }

  return v1;
}

id AXDevicePrimeDisplayManager()
{
  return _AXSharedDisplayManager();
}

uint64_t AXDeviceSupportsBackTap()
{
  int v0;

  if ((AXRuntimeCheck_HasANE() & 1) != 0 || (AXDeviceIsD22() & 1) != 0)
    v0 = 1;
  else
    v0 = MGIsDeviceOneOfType();
  return AXDeviceIsPhone() & v0;
}

uint64_t AXDeviceSupportsHeadTracking()
{
  if ((AXRuntimeCheck_HasANE() & 1) != 0 || (AXDeviceIsD22() & 1) != 0)
    return 1;
  else
    return MGIsDeviceOneOfType();
}

uint64_t AXDeviceSupportsDetectionMode()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if (AXDeviceSupportsDetectionMode_onceToken != -1)
      dispatch_once(&AXDeviceSupportsDetectionMode_onceToken, &__block_literal_global_148);
    return AXDeviceSupportsDetectionMode__AXDeviceSupportsDetectionMode != 0;
  }
  return result;
}

uint64_t AXDeviceSupportsHuman()
{
  if (AXDeviceSupportsHuman_onceToken != -1)
    dispatch_once(&AXDeviceSupportsHuman_onceToken, &__block_literal_global_151);
  return AXDeviceSupportsHuman__AXDeviceSupportsHuman;
}

uint64_t AXDeviceSupportsVoiceTriggers()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsVoicesRotor()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsAudiogramIngestion()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsComfortSounds()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsLaneChange()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if (AXDeviceSupportsLaneChange_onceToken != -1)
      dispatch_once(&AXDeviceSupportsLaneChange_onceToken, &__block_literal_global_158);
    return AXDeviceSupportsLaneChange__AXDeviceSupportsLaneChange != 0;
  }
  return result;
}

uint64_t AXDeviceSupportsWatchRemoteScreen()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v0 = getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr;
  v10 = getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr;
  if (!getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr)
  {
    v1 = (void *)AXWatchRemoteScreenServicesLibrary();
    v0 = dlsym(v1, "AXWatchRemoteScreenIsTwiceFeatureOn");
    v8[3] = (uint64_t)v0;
    getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v7, 8);
  if (!v0)
    AXDeviceSupportsWatchRemoteScreen_cold_1();
  result = ((uint64_t (*)(uint64_t))v0)(v2);
  if ((_DWORD)result)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v4 = getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr;
    v10 = getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr;
    if (!getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr)
    {
      v5 = (void *)AXWatchRemoteScreenServicesLibrary();
      v4 = dlsym(v5, "AXWatchRemoteScreenIsPairedGizmoSupported");
      v8[3] = (uint64_t)v4;
      getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr = v4;
    }
    _Block_object_dispose(&v7, 8);
    if (!v4)
      AXDeviceSupportsWatchRemoteScreen_cold_2();
    return ((uint64_t (*)(uint64_t))v4)(v6);
  }
  return result;
}

void sub_18C682AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsConcurrentHPLPMics()
{
  if (AXDeviceSupportsConcurrentHPLPMics_onceToken != -1)
    dispatch_once(&AXDeviceSupportsConcurrentHPLPMics_onceToken, &__block_literal_global_159);
  return AXDeviceSupportsConcurrentHPLPMics__AXDeviceSupportsConcurrentHPLPMics;
}

uint64_t AXDeviceSupportsHoverText()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if (AXDeviceIsPhone())
    {
      return AXUICanShowPointerControlSettings();
    }
    else if ((AXDeviceIsPad() & 1) != 0)
    {
      return 1;
    }
    else
    {
      return AXDeviceIsTV();
    }
  }
  return result;
}

uint64_t AXDeviceSupportsHoverTextTyping()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if ((AXDeviceIsPad() & 1) != 0)
      return 1;
    else
      return AXDeviceIsPhone();
  }
  return result;
}

uint64_t AXDeviceHasJindo()
{
  uint64_t (*v1)(void);
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  if ((AXProcessIsBackboard() & 1) != 0)
    return 0;
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v1 = (uint64_t (*)(void))getSBUIIsSystemApertureEnabledSymbolLoc_ptr;
  v6 = getSBUIIsSystemApertureEnabledSymbolLoc_ptr;
  if (!getSBUIIsSystemApertureEnabledSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke;
    v2[3] = &unk_1E24C4AE0;
    v2[4] = &v3;
    __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke((uint64_t)v2);
    v1 = (uint64_t (*)(void))v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v1)
    AXDeviceHasJindo_cold_1();
  return v1();
}

void sub_18C682C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsPencilHover()
{
  if (AXDeviceSupportsPencilHover_onceToken != -1)
    dispatch_once(&AXDeviceSupportsPencilHover_onceToken, &__block_literal_global_164);
  return AXDeviceSupportsPencilHover_isSupported;
}

uint64_t AXDeviceSupportsHapticMusic()
{
  if (AXDeviceSupportsHapticMusic_onceToken != -1)
    dispatch_once(&AXDeviceSupportsHapticMusic_onceToken, &__block_literal_global_174);
  return AXDeviceSupportsHapticMusic_Supported;
}

uint64_t AXDeviceSupportsSonification()
{
  return AXDeviceIsAudioAccessory() ^ 1;
}

uint64_t AXDeviceSupportsLiveSpeech()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsLiveSpeechCategories()
{
  return _os_feature_enabled_impl();
}

BOOL AXDeviceSupportsConfirmWith()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  _BOOL8 v4;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPasscodeSet");
  if ((v3 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D02838], "manager");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "identities:", 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v1, "count"))
    {
      v4 = 0;
LABEL_8:

      goto LABEL_9;
    }
  }
  if (AXDeviceSupportsSecureDoubleClick_onceToken != -1)
    dispatch_once(&AXDeviceSupportsSecureDoubleClick_onceToken, &__block_literal_global_41);
  v4 = AXDeviceSupportsSecureDoubleClick_supportsSecureDoubleClick != 0;
  if ((v3 & 1) == 0)
    goto LABEL_8;
LABEL_9:

  return v4;
}

uint64_t AXDeviceSupportsHaptics()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsReachability()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsVibration()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsVoiceBanking()
{
  uint64_t result;

  result = AXDeviceSupportsVoiceBankingSpeech();
  if ((_DWORD)result)
    return AXDeviceSupportsVoiceBankingTraining();
  return result;
}

uint64_t AXDeviceSupportsMotionCues()
{
  if (AXDeviceSupportsMotionCues_onceToken != -1)
    dispatch_once(&AXDeviceSupportsMotionCues_onceToken, &__block_literal_global_192);
  return AXDeviceSupportsMotionCues_DeviceSupportsMotionCues;
}

uint64_t AXDeviceSupportsVirtualTrackpad()
{
  uint64_t result;

  result = AXDeviceIsPad();
  if ((_DWORD)result)
    return _os_feature_enabled_impl();
  return result;
}

uint64_t AXDeviceSupportsVoiceOverOnboarding()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsAirPodsHeadGestures()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if ((AXDeviceIsPhone() & 1) != 0 || (AXDeviceIsPad() & 1) != 0)
      return 1;
    else
      return AXDeviceIsRealityDevice();
  }
  return result;
}

uint64_t AXDeviceSupportsRealWorldDetection()
{
  return 1;
}

uint64_t AXDeviceSupportsMedina()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceIsSoundDetectionMedinaEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsKShotMedina()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    return MGGetBoolAnswer();
  return result;
}

uint64_t AXDeviceIsKShotMedinaEnabled()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC12D0]), "initWithDomain:authenticationContext:", 0, 0);
  v1 = objc_msgSend(v0, "BOOLForKey:", 20);

  return v1;
}

BOOL AXDeviceHasFrontCameraPhysicallyMountedUpsideDown()
{
  return MGGetSInt32Answer() == 180;
}

uint64_t AXDeviceSupportsCameraButton()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsGreyMatterSAE()
{
  return _os_feature_enabled_impl();
}

Class __getPKPassLibraryClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!PassKitCoreLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C7A00;
    v5 = 0;
    PassKitCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PassKitCoreLibraryCore_frameworkLibrary)
    __getPKPassLibraryClass_block_invoke_cold_1(&v3);
  result = objc_getClass("PKPassLibrary");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPKPassLibraryClass_block_invoke_cold_2();
  getPKPassLibraryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSOSManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SOSLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C7A18;
    v5 = 0;
    SOSLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary)
    __getSOSManagerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SOSManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSManagerClass_block_invoke_cold_2();
  getSOSManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C683A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAXMDisplayManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AXMediaUtilitiesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C7AF0;
    v5 = 0;
    AXMediaUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AXMediaUtilitiesLibraryCore_frameworkLibrary)
    __getAXMDisplayManagerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("AXMDisplayManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getAXMDisplayManagerClass_block_invoke_cold_2();
  getAXMDisplayManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AXWatchRemoteScreenServicesLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C7B08;
    v3 = 0;
    AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary)
    AXWatchRemoteScreenServicesLibrary_cold_1(&v1);
  return AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary;
}

void *__getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C7B20;
    v5 = 0;
    SpringBoardUIServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary)
    __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)SpringBoardUIServicesLibraryCore_frameworkLibrary, "SBUIIsSystemApertureEnabled");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSBUIIsSystemApertureEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void _btSessionEventCallback(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  void *v8;
  id v9;
  void *v10;
  __CFString *v11;
  _QWORD *v12;
  NSObject *v13;
  void *v14;
  uint8_t buf[4];
  __CFString *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x18D7864C8]();
  v9 = a4;
  v10 = v9;
  if (a3 | a2)
  {
    if (a2 >= 4)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a2);
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = off_1E24C7C18[(int)a2];
    }
    AXLogBluetooth();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v16 = v11;
      v17 = 1024;
      v18 = a3;
      _os_log_impl(&dword_18C62B000, v13, OS_LOG_TYPE_DEFAULT, "VOTBTM: session attach called back with %{public}@ (%d)", buf, 0x12u);
    }

    if (objc_msgSend(v10, "available"))
    {
      objc_msgSend(v10, "postNotificationName:object:", CFSTR("VOSBluetoothAvailabilityChangedNotification"), *MEMORY[0x1E0C9AE40]);
      objc_msgSend(v10, "_cleanup:", 1);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "attach:", v14);

  }
  else
  {
    if ((objc_msgSend(v9, "_setup:", a1) & 1) != 0)
    {
      v12 = (_QWORD *)MEMORY[0x1E0C9AE50];
    }
    else
    {
      objc_msgSend(v10, "_cleanup:", 0);
      v12 = (_QWORD *)MEMORY[0x1E0C9AE40];
    }
    objc_msgSend(v10, "postNotificationName:object:", CFSTR("VOSBluetoothAvailabilityChangedNotification"), *v12);
  }

  objc_autoreleasePoolPop(v8);
}

void _btLocalStatusEventCallback(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];

  v6 = (void *)MEMORY[0x18D7864C8]();
  v7 = a4;
  switch(a2)
  {
    case 0:
      AXLogBluetooth();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18C62B000, v9, OS_LOG_TYPE_INFO, "Received BT_LOCAL_DEVICE_POWER_STATE_CHANGED event", buf, 2u);
      }

      objc_msgSend(v7, "_powerChanged");
      break;
    case 3:
      AXLogBluetooth();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_18C62B000, v11, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_CONNECTABILITY_CHANGED event", v13, 2u);
      }

      objc_msgSend(v7, "_connectabilityChanged");
      break;
    case 5:
      AXLogBluetooth();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_18C62B000, v10, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_CONNECTION_STATUS_CHANGED event", v14, 2u);
      }

      objc_msgSend(v7, "_connectedStatusChanged");
      break;
    case 6:
    case 7:
      AXLogBluetooth();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_18C62B000, v8, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_DISCOVERY_STARTED/STOPPED event", v12, 2u);
      }

      objc_msgSend(v7, "_discoveryStateChanged");
      break;
    default:
      break;
  }

  objc_autoreleasePoolPop(v6);
}

void _btDiscoveryStatusEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v7;

  v7 = (void *)MEMORY[0x18D7864C8]();
  if (a2 == 1)
    objc_msgSend(a5, "_restartScan");
  objc_autoreleasePoolPop(v7);
}

void _btDiscoveryEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  _QWORD *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x18D7864C8]();
  v9 = a5;
  objc_msgSend(v9, "addDeviceIfNeeded:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  AXLogBluetooth();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 138543362;
    v18 = v10;
    _os_log_impl(&dword_18C62B000, v11, OS_LOG_TYPE_DEFAULT, "VOTBTM: Discovery event for device %{public}@", (uint8_t *)&v17, 0xCu);
  }

  if (v10)
  {
    if (a2 == 1)
    {
      AXLogBluetooth();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 138543362;
        v18 = v10;
        _os_log_impl(&dword_18C62B000, v13, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_DISCOVERY_DEVICE_LOST event for device %{public}@", (uint8_t *)&v17, 0xCu);
      }

      v14 = (void *)v9[11];
      objc_msgSend(v10, "address");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", 0, v15);

      objc_msgSend(v9, "_removeDevice:", v10);
      objc_msgSend(v9, "postNotificationName:object:", CFSTR("VOSBluetoothDeviceRemovedNotification"), v10);
      v16 = v9[14];
      if (v16)
        (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v10);
    }
    else if (!a2)
    {
      AXLogBluetooth();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 138543362;
        v18 = v10;
        _os_log_impl(&dword_18C62B000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_DISCOVERY_DEVICE_FOUND event for device %{public}@", (uint8_t *)&v17, 0xCu);
      }

      objc_msgSend(v9, "_addDiscoveredDevice:", v10);
    }
  }

  objc_autoreleasePoolPop(v8);
}

void pairingAgentStatusEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  int v18;
  void *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x18D7864C8]();
  v10 = a5;
  v11 = v10;
  if (a3 == 4294901761)
  {
    v12 = 0;
  }
  else
  {
    objc_msgSend(v10, "addDeviceIfNeeded:", a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      switch(a2)
      {
        case 0:
          AXLogBluetooth();
          v13 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
          LOWORD(v18) = 0;
          v14 = "VOTBTM: received BT_PAIRING_AGENT_STARTED event";
          goto LABEL_9;
        case 1:
          AXLogBluetooth();
          v13 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
          LOWORD(v18) = 0;
          v14 = "VOTBTM: received BT_PAIRING_AGENT_STOPPED event";
LABEL_9:
          v15 = v13;
          v16 = 2;
          goto LABEL_12;
        case 2:
          AXLogBluetooth();
          v13 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
          v18 = 138543362;
          v19 = v12;
          v14 = "VOTBTM: received BT_PAIRING_ATTEMPT_STARTED event for device %{public}@";
          v15 = v13;
          v16 = 12;
LABEL_12:
          _os_log_impl(&dword_18C62B000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v18, v16);
          goto LABEL_17;
        case 3:
          AXLogBluetooth();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = 138543618;
            v19 = v12;
            v20 = 1024;
            v21 = a4;
            _os_log_impl(&dword_18C62B000, v17, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_PAIRING_ATTEMPT_COMPLETE event for device %{public}@ with result %d", (uint8_t *)&v18, 0x12u);
          }

          if ((_DWORD)a4)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
            v13 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "postNotificationName:object:error:", CFSTR("VOSBluetoothPairingPINResultFailedNotification"), v12, v13);
LABEL_17:

          }
          else
          {
            objc_msgSend(v11, "postNotificationName:object:", CFSTR("VOSBluetoothPairingPINResultSuccessNotification"), v12);
          }
          break;
        default:
          break;
      }
    }
  }

  objc_autoreleasePoolPop(v9);
}

void pairingAgentPincodeCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x18D7864C8]();
  v7 = a4;
  objc_msgSend(v7, "addDeviceIfNeeded:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  AXLogBluetooth();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_18C62B000, v9, OS_LOG_TYPE_DEFAULT, "VOTBTM: received pincode request for device %{public}@", (uint8_t *)&v10, 0xCu);
  }

  if (v8)
    objc_msgSend(v7, "postNotificationName:object:", CFSTR("VOSBluetoothPairingPINRequestNotification"), v8);

  objc_autoreleasePoolPop(v6);
}

void pairingAgentUserConfirmationCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  void *v9;
  id v10;
  void *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x18D7864C8]();
  v10 = a5;
  objc_msgSend(v10, "addDeviceIfNeeded:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    AXLogBluetooth();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a4)
    {
      if (v13)
      {
        *(_DWORD *)buf = 67109378;
        v18[0] = a3;
        LOWORD(v18[1]) = 2114;
        *(_QWORD *)((char *)&v18[1] + 2) = v11;
        _os_log_impl(&dword_18C62B000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received user confirmation request (numeric comparison to %06u) for device %{public}@", buf, 0x12u);
      }

      v14 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "dictionaryWithObjectsAndKeys:", v11, CFSTR("device"), v15, CFSTR("value"), 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "postNotificationName:object:", CFSTR("VOSBluetoothPairingUserNumericComparisionNotification"), v16);

    }
    else
    {
      if (v13)
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)v18 = v11;
        _os_log_impl(&dword_18C62B000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received user confirmation request for device %{public}@", buf, 0xCu);
      }

      objc_msgSend(v10, "postNotificationName:object:", CFSTR("VOSBluetoothPairingUserConfirmationNotification"), v11);
    }
  }

  objc_autoreleasePoolPop(v9);
}

void pairingAgentPassKeyDisplayCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x18D7864C8]();
  v8 = a4;
  objc_msgSend(v8, "addDeviceIfNeeded:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  AXLogBluetooth();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v15 = v9;
    _os_log_impl(&dword_18C62B000, v10, OS_LOG_TYPE_DEFAULT, "VOTBTM: received passkey display request for device %{public}@", buf, 0xCu);
  }

  if (v9)
  {
    v11 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "dictionaryWithObjectsAndKeys:", v9, CFSTR("device"), v12, CFSTR("value"), 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "postNotificationName:object:", CFSTR("VOSBluetoothPairingPassKeyDisplayNotification"), v13);

  }
  objc_autoreleasePoolPop(v7);
}

id VOSAddressForBTDevice()
{
  _QWORD v1[32];

  v1[31] = *MEMORY[0x1E0C80C00];
  if (BTDeviceGetAddressString())
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void _btServiceEventCallback(uint64_t a1, int a2, int a3, int a4, uint64_t a5, void *a6)
{
  void *v12;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  const __CFString *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  BOOL v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  int v38;
  _BYTE v39[10];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x18D7864C8]();
  v13 = a6;
  objc_msgSend(v13, "addDeviceIfNeeded:", a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3 != 601)
  {
    AXLogBluetooth();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 67109888;
      *(_DWORD *)v39 = a2;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = a3;
      v40 = 1024;
      v41 = a4;
      v42 = 1024;
      v43 = a5;
      _os_log_impl(&dword_18C62B000, v15, OS_LOG_TYPE_DEFAULT, "VOTBTM: _btServiceEventCallback: service = %u eventType = %d event = %d result = %d", (uint8_t *)&v38, 0x1Au);
    }

  }
  if (a2 == -1 || (a2 & 0x40) == 0)
  {
    switch(a3)
    {
      case 2:
        if (a2 != -1)
        {
          if (a2 != 1)
            break;
          AXLogBluetooth();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v38) = 0;
            _os_log_impl(&dword_18C62B000, v22, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DEPENDENT_EVENT event for BT_SERVICE_HANDSFREE", (uint8_t *)&v38, 2u);
          }

          if (a4 != 101 || (_DWORD)a5)
          {
            if (a4 != 102 || (_DWORD)a5)
              break;
            v23 = v13;
            v24 = 0;
          }
          else
          {
            v23 = v13;
            v24 = 1;
          }
          objc_msgSend(v23, "setAudioConnected:", v24);
          break;
        }
        AXLogBluetooth();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v38) = 0;
          _os_log_impl(&dword_18C62B000, v34, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DEPENDENT_EVENT event for BT_SERVICE_ALL", (uint8_t *)&v38, 2u);
        }

        if (a4 == 701 && !(_DWORD)a5)
        {
          objc_msgSend(v14, "clearName");
          objc_msgSend(v13, "postNotificationName:object:", CFSTR("VOSBluetoothDeviceUpdatedNotification"), v14);
          v35 = v13[13];
          if (v35)
            (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v14);
          v36 = (void *)v13[11];
          objc_msgSend(v14, "address");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v14, v37);

        }
        break;
      case 1:
        v25 = objc_msgSend(v14, "connectedServicesCount");
        if (a4 != 12 || (_DWORD)a5)
        {
          if (a4 == 2 && !(_DWORD)a5)
            break;
          AXLogBluetooth();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v38 = 134217984;
            *(_QWORD *)v39 = v25;
            _os_log_impl(&dword_18C62B000, v33, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DISCONNECT event type with %lu currently connected services", (uint8_t *)&v38, 0xCu);
          }

          if (v25)
            break;
          v21 = CFSTR("VOSBluetoothDeviceDisconnectFailedNotification");
        }
        else
        {
          AXLogBluetooth();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v38 = 134217984;
            *(_QWORD *)v39 = v25;
            _os_log_impl(&dword_18C62B000, v26, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DISCONNECTION_RESULT event with %lu currently connected services", (uint8_t *)&v38, 0xCu);
          }

          if (v25)
            break;
          v21 = CFSTR("VOSBluetoothDeviceDisconnectSuccessNotification");
        }
LABEL_51:
        objc_msgSend(v13, "postNotificationName:object:", v21, v14);
        break;
      case 0:
        v16 = objc_msgSend(v14, "connectedServicesCount");
        if ((objc_msgSend(v14, "isNameCached") & 1) == 0 && !BTDeviceGetName())
        {
          v17 = (void *)v13[11];
          objc_msgSend(v14, "address");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "setObject:forKeyedSubscript:", v14, v18);

          objc_msgSend(v13, "postNotificationName:object:", CFSTR("VOSBluetoothDeviceUpdatedNotification"), v14);
          v19 = v13[13];
          if (v19)
            (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v14);
        }
        if (a4 == 11 && !(_DWORD)a5)
        {
          AXLogBluetooth();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v38 = 134217984;
            *(_QWORD *)v39 = v16;
            _os_log_impl(&dword_18C62B000, v20, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_CONNECTION_RESULT event with %lu currently connected services", (uint8_t *)&v38, 0xCu);
          }

          v21 = CFSTR("VOSBluetoothDeviceConnectSuccessNotification");
          goto LABEL_51;
        }
        v28 = a4 == 1 && (_DWORD)a5 == 0;
        if (a4 && !v28)
        {
          AXLogBluetooth();
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v38 = 134217984;
            *(_QWORD *)v39 = v16;
            _os_log_impl(&dword_18C62B000, v29, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_CONNECT event type with %lu currently connected services", (uint8_t *)&v38, 0xCu);
          }

          AXLogBluetooth();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v38 = 67109120;
            *(_DWORD *)v39 = a5;
            _os_log_impl(&dword_18C62B000, v30, OS_LOG_TYPE_DEFAULT, "VOTBTM: result = %d", (uint8_t *)&v38, 8u);
          }

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "postNotificationName:object:error:", CFSTR("VOSBluetoothDeviceConnectFailedNotification"), v14, v31);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "postNotificationName:object:error:", CFSTR("VOSBluetoothDeviceConnectFailedNotification"), v14, v32);

        }
        break;
    }
  }

  objc_autoreleasePoolPop(v12);
}

void OUTLINED_FUNCTION_0_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

id AXLocStringKeyForModel(void *a1)
{
  id v1;
  void *v2;
  const __CFString *v3;
  void *v4;
  int IsWatch;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    if ((AXDeviceIsRealityDevice() & 1) != 0)
    {
      v3 = CFSTR("VISION");
    }
    else if ((AXDeviceIsPad() & 1) != 0)
    {
      v3 = CFSTR("IPAD");
    }
    else if ((AXDeviceIsPod() & 1) != 0)
    {
      v3 = CFSTR("IPOD");
    }
    else
    {
      IsWatch = AXDeviceIsWatch();
      v3 = CFSTR("IPHONE");
      if (IsWatch)
        v3 = CFSTR("WATCH");
    }
    objc_msgSend(v2, "stringWithFormat:", CFSTR("%@_%@"), v1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id AXLocStringForDeviceVariant(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, void *);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a1;
  v4 = a2;
  AXLocStringKeyForHomeButton(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  AXLocStringKeyForModel(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2](v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v7 || objc_msgSend(v7, "isEqualToString:", v6))
  {
    v4[2](v4, v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9 && !objc_msgSend(v9, "isEqualToString:", v5))
    {
      v8 = v9;
    }
    else
    {
      AXLocStringKeyForModel(v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v4[2](v4, v10);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v8 || objc_msgSend(v8, "isEqualToString:", v10))
      {
        v4[2](v4, v3);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v11 || objc_msgSend(v11, "isEqualToString:", v3) && !_AXSMossdeepEnabled())
        {
          v12 = 0;
          goto LABEL_14;
        }
        v8 = v11;
      }
      v6 = v10;
    }
  }
  v12 = v8;
  v10 = v6;
  v11 = v12;
LABEL_14:

  return v12;
}

id AXLocStringKeyForHomeButton(void *a1)
{
  void *v1;
  id v2;
  int HasHomeButton;
  const __CFString *v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  HasHomeButton = AXDeviceHasHomeButton();
  v4 = CFSTR("_NHB");
  if (HasHomeButton)
    v4 = &stru_1E24CAB08;
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%@%@"), v2, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id AXLocStringKeyForExclusiveModel(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int IsPod;
  const __CFString *v7;
  const __CFString *v8;
  id v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  if (a1 == 2)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    IsPod = AXDeviceIsPod();
    v7 = &stru_1E24CAB08;
    v8 = CFSTR("_IPOD");
  }
  else if (a1 == 1)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    IsPod = AXDeviceIsPad();
    v7 = &stru_1E24CAB08;
    v8 = CFSTR("_IPAD");
  }
  else
  {
    if (a1)
    {
      v9 = v3;
      goto LABEL_11;
    }
    v5 = (void *)MEMORY[0x1E0CB3940];
    IsPod = AXDeviceIsPhone();
    v7 = &stru_1E24CAB08;
    v8 = CFSTR("_IPHONE");
  }
  if (IsPod)
    v7 = v8;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%@%@"), v4, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v10 = v9;

  return v10;
}

id AXLocStringKeyForHomeButtonAndExclusiveModel(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  AXLocStringKeyForHomeButton(a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (AXDeviceHasHomeButton())
  {
    v4 = v3;
  }
  else
  {
    AXLocStringKeyForExclusiveModel(a1, v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  v5 = v4;

  return v5;
}

id AXLocalizedStringWithLocale(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  AXUtilitiesFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  _AXLocTables(1, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v9)
        objc_enumerationMutation(v6);
      AXNSLocalizedStringForLocale();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v11)
      {
        if (!objc_msgSend(v11, "isEqualToString:", v3, v16))
          break;
      }

      if (v8 == ++v10)
      {
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v12 = 0;
  }

  if (v12)
    v13 = v12;
  else
    v13 = v3;
  v14 = v13;

  return v14;
}

id _AXLocTables(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  _QWORD v10[4];
  __CFString *v11;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", &stru_1E24CAB08);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a1 == 2)
  {
    objc_msgSend(v4, "addObject:", CFSTR("-D94"));
    v6 = CFSTR("SwitchControl");
  }
  else if (a1 == 1)
  {
    v6 = CFSTR("GeneralAccessibility");
  }
  else
  {
    v6 = 0;
  }
  if (a2 == 2)
  {
    -[__CFString stringByAppendingString:](v6, "stringByAppendingString:", CFSTR("-iOS"));
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___AXLocTables_block_invoke;
  v10[3] = &unk_1E24C7CB8;
  v11 = v6;
  v7 = v6;
  objc_msgSend(v5, "axMapObjectsUsingBlock:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id AXLocalizedString(void *a1)
{
  return AXLocalizedStringWithLocale(a1, 0);
}

id AXParameterizedLocalizedString(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  AXUtilitiesFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _AXLocTables(a1, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _AXLocTables(a1, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  objc_msgSend(v12, "arrayByAddingObjectsFromArray:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v25;
LABEL_3:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v25 != v17)
        objc_enumerationMutation(v14);
      objc_msgSend(v11, "localizedStringForKey:value:table:", v10, &stru_1E24CAB08, *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v18));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (v19)
      {
        if (!objc_msgSend(v19, "isEqualToString:", v10))
          break;
      }

      if (v16 == ++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        if (v16)
          goto LABEL_3;
        goto LABEL_10;
      }
    }

    if (objc_msgSend(v20, "isEqualToString:", v10))
      goto LABEL_12;
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v20, &a9);
  }
  else
  {
LABEL_10:

    v20 = 0;
LABEL_12:
    v21 = v10;
  }
  v22 = v21;

  return v22;
}

id AXAssistiveTouchScannerColorDescription(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __CFString *v9;
  uint64_t v11;
  void *v12;

  v8 = a1;
  if (a1 >= 8)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v11) = 1;
    _AXLogWithFacility();

    v9 = CFSTR("CURSOR_COLOR_BLUE");
  }
  else
  {
    v9 = off_1E24C7CF0[a1];
  }
  AXParameterizedLocalizedString(2, v9, v8, a4, a5, a6, a7, a8, v11);
  return (id)objc_claimAutoreleasedReturnValue();
}

id AXVoiceOverLocString(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  VOTBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  AXNSLocalizedStringForLocale();
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id AXVoiceOverRotorLocString(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v1 = a1;
  if (!AXVoiceOverRotorLocString_VoiceOverBundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", CFSTR("/System/Library/CoreServices/VoiceOverTouch.app"));
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)AXVoiceOverRotorLocString_VoiceOverBundle;
    AXVoiceOverRotorLocString_VoiceOverBundle = v2;

  }
  v4 = v1;
  if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E70]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.typing.mode");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DA8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.slide.to.type");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E60]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.textselection");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D90]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.character");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E98]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.word");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DE8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.line");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DC0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.header");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DF0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.link");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DB0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.formelement");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E80]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.visitedlink");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E10]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.nonvisitedlink");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DD0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.image");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E48]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.statictext");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E68]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.zoom");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E50]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.table");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DF8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.list");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DD8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.landmark");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D58]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.article");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D88]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.button");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E58]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.textfield");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E30]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.searchfield");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E20]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.radiobutton");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D98]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.checkbox");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E28]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.same");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D50]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.allitems");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DC8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.hints");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E40]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.rate");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E18]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.punctuation");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E38]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.sounds");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E90]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.volume");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D60]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.audio.ducking");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DB8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.handwriting");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D70]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.braille.gesture");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DA0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.container");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E78]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.vertical.navigation");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E08]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.navigation.direction");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DE0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.languages");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E88]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.voices");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D80]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.braille.languages");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D78]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.braille.input.languages");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D68]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.auto.advance.speed");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D48]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.zoom");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D20]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.intensity");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D30]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.horizontal.pan");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D38]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.vertical.pan");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D28]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.invert");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D40]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.2dbraille.text.mode");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D00]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.audio.destination");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3CF8]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.activities");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3EA0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.neural.vision");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3EB0]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.toggle.live.regions");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D10]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.exploration.mode");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3EA8]) & 1) != 0)
  {
    v5 = CFSTR("rotor.interaction.style");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D18]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.image.descriptions");
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3D08]) & 1) != 0)
  {
    v5 = CFSTR("search.rotor.detection.mode");
  }
  else if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3E00]))
  {
    v5 = CFSTR("search.rotor.misspelled.words");
  }
  else
  {
    v5 = 0;
  }

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.settings"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)AXVoiceOverRotorLocString_VoiceOverBundle, "localizedStringForKey:value:table:", v6, 0, CFSTR("VOTLocalizedStrings"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7 && !objc_msgSend(v7, "isEqualToString:", v6))
    {
      v9 = v6;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.visual"), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend((id)AXVoiceOverRotorLocString_VoiceOverBundle, "localizedStringForKey:value:table:", v9, 0, CFSTR("VOTLocalizedStrings"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v8 = v10;
      }
      else
      {
        objc_msgSend((id)AXVoiceOverRotorLocString_VoiceOverBundle, "localizedStringForKey:value:table:", v5, 0, CFSTR("VOTLocalizedStrings"));
        v8 = (id)objc_claimAutoreleasedReturnValue();

      }
    }

  }
  else
  {
    v8 = v4;
  }

  return v8;
}

id AXVoiceOverMediaDescriptionLocString(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;

  if ((a1 & 3) == 3)
    v9 = CFSTR("described.media.speech.and.braille");
  else
    v9 = off_1E24C7D30[a1 & 3];
  return AXParameterizedLocalizedString(1, v9, a3, a4, a5, a6, a7, a8, a9);
}

void AXVOLocalizedStringLoadPunctuationTable(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  const __CFURL *v9;
  CFBundleRef v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  VOTBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  AXLocalizationForLocale();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "length"))
  {
    v25 = (uint64_t)v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "languageIdentifier");
    v5 = objc_claimAutoreleasedReturnValue();

    VOTBundle();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    AXLocalizationForLocale();
    v7 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v7;
    v25 = v5;
  }
  VOTBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bundleURL");
  v9 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v10 = CFBundleCreate(0, v9);

  v26 = v3;
  v11 = CFBundleCopyLocalizedStringTableForLocalization();
  v12 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = v11;

  CFRelease(v10);
  v13 = objc_opt_new();
  v14 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = v13;

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend((id)__outputPunctuationTableStrings, "allKeys");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v28 != v18)
          objc_enumerationMutation(v15);
        v20 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend((id)__outputPunctuationTableStrings, "objectForKeyedSubscript:", v20, v25, v26);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("%#@unicodehex@"));

        if (v22)
        {
          objc_msgSend((id)__outputPunctuationTableStrings, "objectForKeyedSubscript:", v20);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)__outputPunctuationTableStringsDict, "setObject:forKeyedSubscript:", v23, v20);

        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v17);
  }

  v24 = (void *)_outputPunctuationTableLocale;
  _outputPunctuationTableLocale = v25;

}

void AXVOLocalizedStringFreePunctuationTable()
{
  void *v0;
  void *v1;

  v0 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = 0;

  v1 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = 0;

}

id AXVOLocalizedStringForCharacter(uint64_t a1, void *a2)
{
  return AXVOLocalizedStringForCharacterWithPrefix(a1, a2, CFSTR("UnicodeHex."));
}

id AXVOLocalizedStringForCharacterWithPrefix(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  if (WORD1(a1))
    v8 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@%08x"), v6, a1);
  else
    v8 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@%04x"), CFSTR("UnicodeHex."), a1);
  v9 = (void *)v8;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "languageIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (objc_msgSend(v5, "isEqualToString:", _outputPunctuationTableLocale)
    && __outputPunctuationTableStrings
    && __outputPunctuationTableStringsDict
    && (objc_msgSend((id)__outputPunctuationTableStringsDict, "objectForKey:", v9),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        v11,
        !v11))
  {
    objc_msgSend((id)__outputPunctuationTableStrings, "objectForKey:", v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x1E0CB3940];
    VOTBundle();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    AXNSLocalizedStringForLocale();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "localizedStringWithFormat:", v14, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if ((objc_msgSend(v15, "isEqualToString:", v9) & 1) != 0)
    v16 = 0;
  else
    v16 = v15;

  return v16;
}

void AXLoadPunctuationTable(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[4];
  id v33;
  _QWORD aBlock[4];
  id v35;
  id v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  v8 = 1;
  if (a2 == 3)
  {
    v8 = 2;
    v9 = &unk_1E24F8D68;
  }
  else
  {
    v9 = 0;
  }
  if (a2 == 1)
    v10 = 0;
  else
    v10 = v8;
  AXVOLocalizedStringLoadPunctuationTable(v6);
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __AXLoadPunctuationTable_block_invoke;
  aBlock[3] = &unk_1E24C7C40;
  v25 = v7;
  v35 = v25;
  v12 = v5;
  v36 = v12;
  v13 = _Block_copy(aBlock);
  objc_msgSend(getSCRCPunctuationVerbosenessClass(), "verbosenessDictionaryForLevel:", v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = v11;
  v32[1] = 3221225472;
  v32[2] = __AXLoadPunctuationTable_block_invoke_2;
  v32[3] = &unk_1E24C7C68;
  v23 = v13;
  v33 = v23;
  _AXEnumeratePunctuationDictionary(v14, v32);
  v30 = 0u;
  v31 = 0u;
  if (a2 == 2)
    v15 = &unk_1E24F8D50;
  else
    v15 = v9;
  v28 = 0uLL;
  v29 = 0uLL;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16, v23);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v29 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(getSCRCPunctuationVerbosenessClass(), "punctuationDictionaryForLevel:", (int)objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "intValue"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v26[0] = v11;
        v26[1] = 3221225472;
        v26[2] = __AXLoadPunctuationTable_block_invoke_78;
        v26[3] = &unk_1E24C7C90;
        v27 = v12;
        _AXEnumeratePunctuationDictionary(v20, v26);

      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    }
    while (v17);
  }
  v21 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = 0;

  v22 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = 0;

}

__CFString *AXCopyUnicodeDescriptionStringForCharacter(UChar32 a1)
{
  const __CFAllocator *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFString *MutableCopy;
  const __CFLocale *System;
  int v8;
  char buffer[500];
  uint64_t v10;
  CFRange v11;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  if (u_charName(a1, U_EXTENDED_CHAR_NAME, buffer, 500, (UErrorCode *)&v8) < 1 || v8 != 0)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], buffer, 0x8000100u);
  if (!v3)
    return 0;
  v4 = v3;
  v11.location = 0;
  v11.length = 1;
  if (CFStringCompareWithOptions(v3, CFSTR("<"), v11, 0))
  {
    MutableCopy = CFStringCreateMutableCopy(v2, 0, v4);
    System = CFLocaleGetSystem();
    CFStringLowercase(MutableCopy, System);
  }
  else
  {
    MutableCopy = 0;
  }
  CFRelease(v4);
  return MutableCopy;
}

id getSCRCPunctuationVerbosenessClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSCRCPunctuationVerbosenessClass_softClass;
  v7 = getSCRCPunctuationVerbosenessClass_softClass;
  if (!getSCRCPunctuationVerbosenessClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSCRCPunctuationVerbosenessClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getSCRCPunctuationVerbosenessClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C68AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AXEnumeratePunctuationDictionary(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, uint64_t, _QWORD);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "allKeys", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v3, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (int)objc_msgSend(v11, "intValue");

        v13 = strtol((const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), 0, 16);
        v4[2](v4, v12, v13);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

uint64_t AXUnicodeCodePointForCharacterString(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  if ((unint64_t)(v2 - 1) < 2 || (_AXAssert(), v2))
  {
    LODWORD(v3) = 0;
    v4 = 0;
    do
      v3 = objc_msgSend(v1, "characterAtIndex:", v4++) | ((_DWORD)v3 << 16);
    while (v2 != v4);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AXFormatAndListWithElements(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t i;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  _QWORD v24[2];
  id v25;
  int v26;
  _QWORD v27[502];

  v27[500] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v26 = 0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localeIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_retainAutorelease(v3);
  objc_msgSend(v4, "UTF8String");
  v5 = ulistfmt_open();
  if (v5)
  {
    v25 = v4;
    v7 = objc_msgSend(v1, "count", v5);
    v24[1] = v24;
    if (v7 >= 0x64)
      v9 = 100;
    else
      v9 = v7;
    MEMORY[0x1E0C80A78](v7, v8);
    v11 = (void **)((char *)v24 - v10);
    if ((unint64_t)(8 * v9) >= 0x200)
      v12 = 512;
    else
      v12 = 8 * v9;
    bzero(v11, v12);
    bzero(v11, 8 * v9);
    MEMORY[0x1E0C80A78](v13, v14);
    v16 = (char *)v24 - v15;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        objc_msgSend(v1, "objectAtIndexedSubscript:", i);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v19 = objc_msgSend(v18, "length");
          if (v19 >= 0x1F4)
            v20 = 500;
          else
            v20 = v19;
          v21 = malloc_type_malloc(2 * v20, 0x1000040BDFB0063uLL);
          objc_msgSend(v18, "getCharacters:range:", v21, 0, v20);
          v11[i] = v21;
          *(_DWORD *)&v16[4 * i] = v20;
        }

      }
    }
    v22 = ulistfmt_format();
    ulistfmt_close();
    for (; v9; --v9)
    {
      if (*v11)
        free(*v11);
      ++v11;
    }
    if (v26 < 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", v27, v22);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
    v4 = v25;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id AXAirPodsLocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  AXUtilitiesFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E24CAB08, CFSTR("AXAirPods"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id AXAirPodsB494LocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  AXUtilitiesFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E24CAB08, CFSTR("AXAirPods-B494"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id AXAirPodsB698LocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  AXUtilitiesFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E24CAB08, CFSTR("AXAirPods-B698"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id AXBeats463LocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  AXUtilitiesFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E24CAB08, CFSTR("AXBeats-B463"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id AXWatchControlEltonLocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  AXUtilitiesFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E24CAB08, CFSTR("WatchControl-elton"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PSESettingsFooterText()
{
  return AXLocalizedStringWithLocale(CFSTR("PSE_FOOTER_TEXT"), 0);
}

Class __getSCRCPunctuationVerbosenessClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ScreenReaderCoreLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C7CD8;
    v5 = 0;
    ScreenReaderCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ScreenReaderCoreLibraryCore_frameworkLibrary)
    __getSCRCPunctuationVerbosenessClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SCRCPunctuationVerboseness");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSCRCPunctuationVerbosenessClass_block_invoke_cold_2();
  getSCRCPunctuationVerbosenessClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C68CB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C68D73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t _ASUIEventFilterCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v5;

  if (SCATIsKeyboardKeyEvent())
  {
    if (IOHIDEventGetIntegerValue())
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (SCATIsGamepadKeyEvent() && (SCATIsATVRemoteButtonEvent() & 1) == 0)
  {
    if (+[AXGameControllerEvent axGameControllerKeyCodeForEvent:](AXGameControllerEvent, "axGameControllerKeyCodeForEvent:", a4))
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    v5 = 1;
  }
  if (AXIsInternalInstall() && SCATIsATVRemoteButtonSwitchCandidateEvent())
  {
    if (IOHIDEventGetIntegerValue())
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    return 1;
  }
  return v5;
}

void _ASUIDeviceMatchingCallback(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  uint64_t v6;
  id context;

  LOBYTE(v6) = 1;
  _AXLogWithFacility();
  if (objc_msgSend((id)IOHIDDeviceGetProperty(a4, CFSTR("IAPHIDAccessoryCategory")), "intValue", v6, CFSTR("Matched MFi device: %@"), a4) == 7|| IOHIDDeviceConformsTo(a4, 1u, 0xAu))
  {
    if (IOHIDDeviceOpen(a4, 0))
      _AXLogWithFacility();
    context = a1;
    objc_msgSend(context, "setDevice:", a4);
    IOHIDDeviceRegisterInputValueCallback(a4, (IOHIDValueCallback)_ASUIInputValueCallback, context);

  }
  else
  {
    _AXLogWithFacility();
  }
}

uint64_t _ASUIInputValueCallback(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDValue *a4)
{
  uint64_t result;

  result = SCATIsMFIButtonDownValue(a4);
  if ((_DWORD)result)
  {
    CFRetain(a4);
    return AXPerformBlockAsynchronouslyOnMainThread();
  }
  return result;
}

id _languageAndRegionNameForNonConformingCodes(void *a1, void *a2)
{
  id v3;
  id v4;
  __CFString *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("zh_CN-U-SD@sd=cnln")) & 1) != 0)
  {
    v5 = CFSTR("Dongbei_CN");
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("zh_CN-U-SD@sd=cnsn")) & 1) != 0)
  {
    v5 = CFSTR("Shaanxi_CN");
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("wuu_CN")) & 1) != 0)
  {
    v5 = CFSTR("Shanghainese_CN");
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("zh_CN-U-SD@sd=cnsc")) & 1) != 0)
  {
    v5 = CFSTR("Sichuanese_CN");
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("ca_ES-U-SD@sd=esvc")) & 1) != 0)
  {
    v5 = CFSTR("Valencian_ES");
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("ar_001")) & 1) != 0)
  {
    v5 = CFSTR("Arabic_WW");
  }
  else
  {
    if (!objc_msgSend(v3, "isEqualToString:", CFSTR("en_GB-U-SD@sd=gbsct")))
    {
      v6 = 0;
      goto LABEL_16;
    }
    v5 = CFSTR("English_Scotland");
  }
  AXLocalizedStringWithLocale(v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

  return v6;
}

id _icuDisplayNameForLocale(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v32;
  void *v33;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    objc_msgSend(v5, "localeIdentifier");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v8, "UTF8String");
    v9 = uldn_openForContext();

    objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)*MEMORY[0x1E0C997E8];
    objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C997E8]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    _icuDisplayName(v9, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    _languageAndRegionNameForNonConformingCodes(v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "isEqualToString:", v12))
    {
      v16 = (void *)*MEMORY[0x1E0C997B0];
      objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C997B0]);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      _icuDisplayName(v9, v16, v17);
      v18 = objc_claimAutoreleasedReturnValue();

      v19 = (void *)v18;
      v20 = (void *)*MEMORY[0x1E0C99820];
      objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C99820]);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      _icuDisplayName(v9, v20, v21);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      v22 = (void *)*MEMORY[0x1E0C99848];
      objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C99848]);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      _icuDisplayName(v9, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v25;
      if (v19)
        objc_msgSend(v25, "addObject:", v19);
      if (v33)
        objc_msgSend(v26, "addObject:");
      if (v24)
        objc_msgSend(v26, "addObject:", v24);
      if (objc_msgSend(v26, "count"))
      {
        v27 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v26, "componentsJoinedByString:", CFSTR(", "));
        v32 = v19;
        v28 = v15;
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "stringWithFormat:", CFSTR("%@ (%@)"), v28, v29);
        v10 = (id)objc_claimAutoreleasedReturnValue();

        v15 = v28;
        v19 = v32;
      }
      else
      {
        v10 = v15;
      }

    }
    else if (!objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0C997E0])
           || (_languageAndRegionNameForNonConformingCodes(v7, 0),
               (v10 = (id)objc_claimAutoreleasedReturnValue()) == 0))
    {
      _icuDisplayName(v9, v6, v7);
      v10 = (id)objc_claimAutoreleasedReturnValue();
    }
    uldn_close();

    if (objc_msgSend(v10, "isEqualToString:", v7))
    {
      objc_msgSend(v5, "displayNameForKey:value:", v6, v7);
      v30 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v30;
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id _icuDisplayName(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  char v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, unint64_t, int *);
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  void *v21;
  void *v23;
  id v24;
  int v25;

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C997E0]) & 1) != 0)
  {
    v7 = 0;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E0DE6318];
    if (!v6)
      goto LABEL_28;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C997E8]) & 1) != 0)
  {
    v7 = 0;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E0DE6310];
    if (!v6)
      goto LABEL_28;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C997B0]) & 1) != 0)
  {
    v7 = 0;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E0DE6330];
    if (!v6)
      goto LABEL_28;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C99820]) & 1) != 0)
  {
    v7 = 0;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E0DE6338];
    if (!v6)
      goto LABEL_28;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C99848]) & 1) != 0)
  {
    v7 = 0;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E0DE6340];
    if (!v6)
      goto LABEL_28;
  }
  else
  {
    if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0C997A0]) & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *_icuDisplayName(const ULocaleDisplayNames *, NSString *__strong, NSString *__strong)");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("AXDialectMap.m"), 423, CFSTR("Unsupported key type %@"), v5);

    }
    v8 = 0;
    v7 = 1;
    if (!v6)
      goto LABEL_28;
  }
  v25 = 0;
  v11 = objc_retainAutorelease(v6);
  v12 = objc_msgSend(v11, "UTF8String");
  if ((v7 & 1) != 0)
    v13 = uldn_keyValueDisplayName();
  else
    v13 = v8(a1, v12, 0, 0, &v25);
  if (v25 == 15)
  {
    v25 = 0;
    objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 2 * v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
    v16 = objc_retainAutorelease(v14);
    v17 = objc_msgSend(v16, "mutableBytes");
    v18 = (unint64_t)(int)objc_msgSend(v16, "length") >> 1;
    if ((v7 & 1) != 0)
      v19 = uldn_keyValueDisplayName();
    else
      v19 = v8(a1, v15, v17, v18, &v25);
    v20 = v19;
    if (v25 <= 0)
    {
      v23 = (void *)MEMORY[0x1E0CB3940];
      v24 = objc_retainAutorelease(v16);
      objc_msgSend(v23, "stringWithCharacters:length:", objc_msgSend(v24, "bytes"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_29;
    }

  }
LABEL_28:
  v21 = 0;
LABEL_29:

  return v21;
}

void _updateLocaleForLanguagePreference(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = (void *)_AXSQuickSpeakCopyPreferredLocalesForLanguages();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend(v2, "langMaps", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v9, "generalLanguageID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          objc_msgSend(v9, "dialectWithLocaleIdentifier:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v9, "setUserPreferredDialect:", v12);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  objc_msgSend(v2, "updateCachedDialects");
}

void sub_18C6935AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

uint64_t AXLanguageSupportedBySynthesizer(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (AXLanguageSupportedBySynthesizer_registerOnce != -1)
    dispatch_once(&AXLanguageSupportedBySynthesizer_registerOnce, &__block_literal_global_214);
  if ((objc_msgSend((id)AXLanguageSupportedBySynthesizer_Languages, "containsObject:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = (void *)AXLanguageSupportedBySynthesizer_Languages;
    AXCLanguageConvertToCanonicalForm();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "containsObject:", v4);

  }
  return v2;
}

id AXSystemLanguageReport()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t k;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t n;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ii;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t jj;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t kk;
  void *v56;
  void *v57;
  void *v59;
  void *v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  _BYTE v98[128];
  _BYTE v99[128];
  _BYTE v100[128];
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "systemLanguages");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  AXSupportedVoiceOverLanguages();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v4 = v0;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v90, v101, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v91;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v91 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * i), "axLanguageCode");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "axSafelyAddObject:", v9);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v90, v101, 16);
    }
    while (v6);
  }

  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v10 = v1;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v86, v100, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v87;
    do
    {
      for (j = 0; j != v12; ++j)
      {
        if (*(_QWORD *)v87 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v86 + 1) + 8 * j), "axLanguageCode");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "axSafelyAddObject:", v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v86, v100, 16);
    }
    while (v12);
  }

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v18 = v4;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v82, v99, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v83;
    do
    {
      for (k = 0; k != v20; ++k)
      {
        if (*(_QWORD *)v83 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * k);
        if (objc_msgSend(v23, "axIsRegionalLanguageCode"))
          objc_msgSend(v16, "addObject:", v23);
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v82, v99, 16);
    }
    while (v20);
  }

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v24 = v10;
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v78, v98, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v79;
    do
    {
      for (m = 0; m != v26; ++m)
      {
        if (*(_QWORD *)v79 != v27)
          objc_enumerationMutation(v24);
        v29 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * m);
        if (objc_msgSend(v29, "axIsRegionalLanguageCode"))
          objc_msgSend(v17, "addObject:", v29);
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v78, v98, 16);
    }
    while (v26);
  }
  v59 = v24;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v31 = v2;
  v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v74, v97, 16);
  if (v32)
  {
    v33 = v32;
    v34 = *(_QWORD *)v75;
    do
    {
      for (n = 0; n != v33; ++n)
      {
        if (*(_QWORD *)v75 != v34)
          objc_enumerationMutation(v31);
        _AXDictForLanguageData(*(void **)(*((_QWORD *)&v74 + 1) + 8 * n), 1, objc_msgSend(v3, "containsObject:", *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * n)));
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "addObject:", v36);

      }
      v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v74, v97, 16);
    }
    while (v33);
  }
  v60 = v18;

  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v37 = v3;
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v70, v96, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v71;
    do
    {
      for (ii = 0; ii != v39; ++ii)
      {
        if (*(_QWORD *)v71 != v40)
          objc_enumerationMutation(v37);
        v42 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * ii);
        if ((objc_msgSend(v31, "containsObject:", v42) & 1) == 0)
        {
          _AXDictForLanguageData(v42, 0, 1);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "addObject:", v43);

        }
      }
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v70, v96, 16);
    }
    while (v39);
  }

  objc_msgSend(v61, "setObject:forKeyedSubscript:", v30, CFSTR("language"));
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v45 = v16;
  v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v66, v95, 16);
  if (v46)
  {
    v47 = v46;
    v48 = *(_QWORD *)v67;
    do
    {
      for (jj = 0; jj != v47; ++jj)
      {
        if (*(_QWORD *)v67 != v48)
          objc_enumerationMutation(v45);
        _AXDictForLanguageData(*(void **)(*((_QWORD *)&v66 + 1) + 8 * jj), 1, objc_msgSend(v17, "containsObject:", *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * jj)));
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "addObject:", v50);

      }
      v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v66, v95, 16);
    }
    while (v47);
  }

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v51 = v17;
  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v62, v94, 16);
  if (v52)
  {
    v53 = v52;
    v54 = *(_QWORD *)v63;
    do
    {
      for (kk = 0; kk != v53; ++kk)
      {
        if (*(_QWORD *)v63 != v54)
          objc_enumerationMutation(v51);
        v56 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * kk);
        if ((objc_msgSend(v45, "containsObject:", v56) & 1) == 0)
        {
          _AXDictForLanguageData(v56, 0, 1);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "addObject:", v57);

        }
      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v62, v94, 16);
    }
    while (v53);
  }

  objc_msgSend(v61, "setObject:forKeyedSubscript:", v44, CFSTR("locale"));
  return v61;
}

id AXSupportedVoiceOverLanguages()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v13;
  const __CFString *v14;
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  AXVoiceServicesTTSResourcesDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  objc_msgSend(v1, "contentsOfDirectoryAtPath:error:", v0, &v21);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v21;
  v4 = v3;
  if (v3)
  {
    v14 = CFSTR("%@");
    v15 = v3;
    LOBYTE(v13) = 1;
    _AXLogWithFacility();
    v5 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v16 = v0;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v6 = v2;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v18 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if (objc_msgSend(v11, "rangeOfString:", CFSTR("-")) != 0x7FFFFFFFFFFFFFFFLL
            && objc_msgSend(v11, "length") == 5)
          {
            objc_msgSend(v5, "addObject:", v11);
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      }
      while (v8);
    }

    v0 = v16;
  }
  objc_msgSend(v5, "addObjectsFromArray:", &unk_1E24F8DE0, v13, v14, v15);

  return v5;
}

id _AXDictForLanguageData(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[5];
  _QWORD v20[6];

  v20[5] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  +[AXLanguageManager nonlocalizedNameForLanguage:](AXLanguageManager, "nonlocalizedNameForLanguage:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
    v8 = (__CFString *)v6;
  else
    v8 = CFSTR("Unknown");
  v9 = v8;

  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  _icuDisplayNameForLocale(v10, (void *)*MEMORY[0x1E0C997E0], v5);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
    v13 = (__CFString *)v11;
  else
    v13 = CFSTR("Unknown");
  v14 = v13;

  v19[0] = CFSTR("languageID");
  v19[1] = CFSTR("localName");
  v20[0] = v5;
  v20[1] = v9;
  v20[2] = v14;
  v19[2] = CFSTR("currentName");
  v19[3] = CFSTR("supportedBySystem");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20[3] = v15;
  v19[4] = CFSTR("supportedByVoiceOver");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[4] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 5);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_18C6979A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18C699238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_18C6997B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C69ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

BOOL AXEventTypeIsKeyboardKey(int a1)
{
  return a1 == 12 || (a1 & 0xFFFFFFFE) == 10;
}

BOOL AXEventTypeShouldLetBackboardProcess(int a1)
{
  return (a1 - 1029) < 2;
}

uint64_t AXEventTypeIsHomeButtonPress(int a1)
{
  return ((a1 - 1000) < 0x24) & (0xC00000003uLL >> (a1 + 24));
}

BOOL AXEventTypeIsLockButtonPress(int a1)
{
  return a1 == 1014 || (a1 & 0xFFFFFFFE) == 1010;
}

BOOL AXEventTypeIsVolumeButtonPress(int a1)
{
  return (a1 - 1006) < 4;
}

BOOL AXEventTypeIsRingerSwitchStateChange(int a1)
{
  return (a1 & 0xFFFFFFFE) == 1012;
}

BOOL AXEventTypeIsMotion(int a1)
{
  return a1 == 23;
}

BOOL AXEventTypeIsShake(int a1)
{
  return a1 == 1020;
}

BOOL AXEventTypeIsTouch(int a1)
{
  return a1 == 3001;
}

BOOL AXEventTypeIsOrientationChange(int a1)
{
  return a1 == 50;
}

void AXDenormalizePoint()
{
  AXDeviceGetMainScreenPixelBounds();
  AXDeviceGetMainScreenScaleFactor();
}

double AXNormalizePoint(int a1, double a2)
{
  double v4;
  double v5;

  AXDeviceGetMainScreenPixelBounds();
  v5 = a2 / v4;
  if (a1)
    return v5 * AXDeviceGetMainScreenScaleFactor();
  return v5;
}

__CFString *AXDebugDescriptionForAXHandEventType(unsigned int a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return off_1E24C8348[a1];
}

void sub_18C69D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AXEventKeyInfoSetSimulatedFNKeyDown(uint64_t result)
{
  _AXSimulatedEventKeyDown = result;
  return result;
}

void sub_18C69D644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 256), 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose((const void *)(v41 - 128), 8);
  _Block_object_dispose((const void *)(v41 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

Class __getUIKeyboardInputModeControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!UIKitLibraryCore_frameworkLibrary_1)
  {
    v4 = xmmword_1E24C84B8;
    v5 = 0;
    UIKitLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_1)
    __getUIKeyboardInputModeControllerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("UIKeyboardInputModeController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getUIKeyboardInputModeControllerClass_block_invoke_cold_2();
  getUIKeyboardInputModeControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _ContextIDFromEvent(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (!a1)
    return 0;
  BKSHIDEventGetBaseAttributes();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "token");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "_identifierOfCAContext");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t _setInitialTouchCount(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v3 = _initializeHIDStreamCountsIfNeeded_onceToken;
  v4 = a2;
  if (v3 != -1)
    dispatch_once(&_initializeHIDStreamCountsIfNeeded_onceToken, &__block_literal_global_708);
  objc_msgSend((id)HIDStreamLock, "lock");
  v5 = (void *)HIDStreamIdentifierTouchCounts;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKey:", v6, v4);

  return objc_msgSend((id)HIDStreamLock, "unlock");
}

uint64_t AX_EventRepresentationContainsAnyTouchesInPath(void *a1, const CGPath *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  __int128 v8;
  char v9;
  unint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  NSObject *v22;
  __int128 v24;
  uint8_t buf[4];
  CGFloat v26;
  __int16 v27;
  CGFloat v28;
  __int16 v29;
  const CGPath *v30;
  uint64_t v31;
  CGPoint v32;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    if (CGPathIsEmpty(a2))
    {
      v4 = 0;
    }
    else
    {
      objc_msgSend(v3, "handInfo");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "paths");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "count");

      if (v7)
      {
        v9 = 0;
        v10 = 1;
        *(_QWORD *)&v8 = 134218498;
        v24 = v8;
        do
        {
          objc_msgSend(v5, "paths", v24);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "objectAtIndexedSubscript:", v10 - 1);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "pathLocation");
          v14 = v13;
          v16 = v15;
          +[AXBackBoardServer server](AXBackBoardServer, "server");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "convertFrame:fromContextId:", objc_msgSend(v12, "pathWindowContextID"), v14, v16, 0.0, 0.0);
          v19 = v18;
          v21 = v20;

          GAXLogBlockedTouches();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v24;
            v26 = v19;
            v27 = 2048;
            v28 = v21;
            v29 = 2112;
            v30 = a2;
            _os_log_debug_impl(&dword_18C62B000, v22, OS_LOG_TYPE_DEBUG, "checking if touched point is contained in ignored path:\n touch (%f, %f), %@", buf, 0x20u);
          }

          v32.x = v19;
          v32.y = v21;
          if (CGPathContainsPoint(a2, 0, v32, 1))
            v9 = 1;

          v4 = v9 & 1;
          if (v10 >= v7)
            break;
          ++v10;
        }
        while ((v9 & 1) == 0);
      }
      else
      {
        v4 = 0;
      }

    }
  }

  return v4;
}

BOOL AX_EventRepresentationContainsOnlyPathsForContextID(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  int v10;
  _BOOL8 v11;

  v3 = a1;
  if (objc_msgSend(v3, "type") == 3001)
  {
    objc_msgSend(v3, "handInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "paths");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (v6)
    {
      v7 = 1;
      do
      {
        objc_msgSend(v4, "paths");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectAtIndexedSubscript:", v7 - 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        v10 = objc_msgSend(v9, "pathWindowContextID");
        v11 = v10 == a2;

        if (v7 >= v6)
          break;
        ++v7;
      }
      while (v10 == a2);
    }
    else
    {
      v11 = 1;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void ___initializeHIDStreamCountsIfNeeded_block_invoke()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)HIDStreamIdentifierTouchCounts;
  HIDStreamIdentifierTouchCounts = (uint64_t)v0;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (void *)HIDStreamIdentifierPhasesForTouches;
  HIDStreamIdentifierPhasesForTouches = (uint64_t)v2;

  v4 = objc_alloc_init(MEMORY[0x1E0CB3740]);
  v5 = (void *)HIDStreamLock;
  HIDStreamLock = (uint64_t)v4;

}

id _GetSubEventInfoFromDigitizerEventForPathEvent(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t IntegerValue;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v2 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if (IOHIDEventGetType() == 11
      && IOHIDEventGetAttributeDataLength()
      && (IntegerValue = IOHIDEventGetIntegerValue(),
          BKSHIDEventGetDigitizerAttributes(),
          (v4 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v5 = v4;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      objc_msgSend(v4, "pathAttributes", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v14;
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v14 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
            if (objc_msgSend(v11, "pathIndex") == IntegerValue)
            {
              v2 = v11;
              goto LABEL_18;
            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
          if (v8)
            continue;
          break;
        }
      }
      v2 = 0;
LABEL_18:

    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

uint64_t _accessibilitySupportSettingDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[5];

  if (_accessibilitySupportSettingDidChange_onceToken != -1)
    dispatch_once(&_accessibilitySupportSettingDidChange_onceToken, &__block_literal_global_3887);
  objc_msgSend((id)_accessibilitySupportSettingDidChange_Timer, "cancel");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___accessibilitySupportSettingDidChange_block_invoke_2;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = a3;
  return objc_msgSend((id)_accessibilitySupportSettingDidChange_Timer, "afterDelay:processBlock:", v5, 0.1);
}

void sub_18C6A4B44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t AXSettingsReturnIntegerValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "integerValueForPreferenceKey:defaultValue:", v3, a2);

  return v5;
}

double AXSettingsReturnDoubleValue(void *a1, double a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;

  v3 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "doubleValueForPreferenceKey:defaultValue:", v3, a2);
  v6 = v5;

  return v6;
}

void sub_18C6A8218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C6AC50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C6AC5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C6AE260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_18C6B040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B1D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B3448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B5FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B62F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B7184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18C6B722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

double assistiveTouchXYScannerSpeedForNormalizedUserPreference(uint64_t a1)
{
  return *MEMORY[0x1E0CF3AF8] + (double)(a1 - 1) * *MEMORY[0x1E0CF3AE8];
}

uint64_t assistiveTouchXYScannerNormalizedUserPreferenceForSpeed(double a1)
{
  return (uint64_t)((a1 - *MEMORY[0x1E0CF3AF8]) / *MEMORY[0x1E0CF3AE8]) + 1;
}

double switchControlNormalizedHeadTrackingSensitivityForUserPreference(uint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E0CF3EE8])
       / (double)(unint64_t)(*MEMORY[0x1E0CF3EE0] - *MEMORY[0x1E0CF3EE8]);
}

unint64_t switchControlUserPreferenceForNormalizedHeadTrackingSensitivity(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E0CF3EE8]+ a1 * (double)(unint64_t)(*MEMORY[0x1E0CF3EE0] - *MEMORY[0x1E0CF3EE8]));
}

double switchControlNormalizedHeadTrackingMovementToleranceInJoystickModeForUserPreference(uint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E0CF3ED8])
       / (double)(unint64_t)(*MEMORY[0x1E0CF3ED0] - *MEMORY[0x1E0CF3ED8]);
}

unint64_t switchControlUserPreferenceForNormalizedHeadTrackingMovementToleranceInJoystickMode(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E0CF3ED8]+ a1 * (double)(unint64_t)(*MEMORY[0x1E0CF3ED0] - *MEMORY[0x1E0CF3ED8]));
}

double assistiveTouchNormalizedMotionTrackerSmoothingBufferSizeForUserPreference(unint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E0CF3B70])
       / (double)(unint64_t)(*MEMORY[0x1E0CF3B68] - *MEMORY[0x1E0CF3B70]);
}

unint64_t assistiveTouchUserPreferenceForNormalizedMotionTrackerSmoothingBufferSize(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E0CF3B70]+ a1 * (double)(unint64_t)(*MEMORY[0x1E0CF3B68] - *MEMORY[0x1E0CF3B70]));
}

void sub_18C6B8C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXShouldAskBeforeDisablingTransportMethods()
{
  _BOOL8 v0;
  void *v1;
  void *v2;

  if (_AXSAssistiveTouchScannerEnabled())
    return 1;
  if (!_AXSVoiceOverTouchEnabled())
    return 0;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "voiceOverBrailleDisplays");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v0 = objc_msgSend(v2, "count") != 0;

  return v0;
}

BOOL AXShouldHideVoiceOverRotorItemFromSettings(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  char v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v1 = a1;
  objc_msgSend(v1, "objectForKey:", CFSTR("RotorItem"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CF3E08]);

  if (v3 && !AXIsAnyPreferredLanguageRTL()
    || (objc_msgSend(v1, "objectForKey:", CFSTR("RotorItem")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CF3DE0]),
        v4,
        (v5 & 1) != 0))
  {
    v6 = 1;
  }
  else
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("RotorItem"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0CF3D80]))
    {

    }
    else
    {
      objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("RotorItem"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CF3D78]);

      if (!v9)
      {
        v6 = 0;
        goto LABEL_10;
      }
    }
    v10 = (void *)_AXSVoiceOverTouchCopyBrailleLanguageRotorItems();
    v6 = objc_msgSend(v10, "count") == 0;

  }
LABEL_10:

  return v6;
}

id AXSystemActionIconTypes()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithObjects:", CFSTR("__NONE__"), CFSTR("AXAssistiveTouchIconTypeTripleClick"), CFSTR("AXAssistiveTouchIconTypeMultitasking"), CFSTR("AXAssistiveTouchIconTypeControlCenter"), CFSTR("AXAssistiveTouchIconTypeHome"), CFSTR("AXAssistiveTouchIconTypeLockScreen"), CFSTR("AXAssistiveTouchIconTypeMute"), CFSTR("AXAssistiveTouchIconTypeNotificationCenter"), CFSTR("AXAssistiveTouchIconTypeReachability"), CFSTR("AXAssistiveTouchIconTypeScreenshot"), CFSTR("AXAssistiveTouchIconTypeShake"), CFSTR("AXAssistiveTouchIconTypeSiri"), CFSTR("AXAssistiveTouchIconTypeSpotlight"), CFSTR("AXAssistiveTouchIconTypeCommandAndControl"), CFSTR("AXAssistiveTouchIconTypeVolumeUp"), CFSTR("AXAssistiveTouchIconTypeVolumeDown"), CFSTR("AXAssistiveTouchIconTypeScrollUp"),
    CFSTR("AXAssistiveTouchIconTypeScrollDown"),
    CFSTR("AXAssistiveTouchIconTypeAssistiveTouch"),
    CFSTR("AXAssistiveTouchIconTypeClassicInvert"),
    CFSTR("AXAssistiveTouchIconTypeColorFilters"),
    CFSTR("AXAssistiveTouchIconTypeMagnifier"),
    CFSTR("AXAssistiveTouchIconTypeVoiceOver"),
    CFSTR("AXAssistiveTouchIconTypeSmartInvert"),
    CFSTR("AXAssistiveTouchIconTypeZoom"),
    CFSTR("AXAssistiveTouchIconTypeZoomController"),
    CFSTR("AXAssistiveTouchIconTypeSpeakScreen"),
    CFSTR("AXAssistiveTouchIconTypeOrientation"),
    CFSTR("AXAssistiveTouchIconTypeCamera"),
    CFSTR("AXAssistiveTouchIconTypeTorch"),
    CFSTR("AXAssistiveTouchIconTypeBackgroundSounds"),
    CFSTR("AXAssistiveTouchIconTypeDetectionMode"),
    CFSTR("AXAssistiveTouchIconTypeFrontFacingCamera"),
    0,
    CFSTR("AXAssistiveTouchIconTypeControlCenter"),
    CFSTR("AXAssistiveTouchIconTypeMultitasking"),
    CFSTR("AXAssistiveTouchIconTypeTripleClick"),
    MEMORY[0x1E0C99E20]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (AXRuntimeCheck_SupportsNearbyDeviceControl())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeNearbyDeviceControl"));
  if (AXDeviceSupportsWatchRemoteScreen())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeWatchRemoteScreen"));
  if (AXHasCapability(CFSTR("LiveTranscription")))
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeLiveCaptions"));
  objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeLiveSpeech"));
  if (AXDeviceHasStaccato())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeActionButton"));
  if (AXDeviceSupportsPhotosensitiveMitigation())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeDimFlashingLights"));
  if (AXDeviceSupportsMotionCues())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeMotionCues"));
  if (AXDeviceSupportsHapticMusic())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeHapticMusic"));
  if (AXDeviceSupportsHoverTextTyping())
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeHoverTextTyping"));
  if (AXHasCapability(CFSTR("AXClarityUI")))
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeAssistiveAccess"));
  if (AXHasCapability(CFSTR("AXVirtualTrackpad")))
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeTrackpad"));
  if (AXDeviceSupportsCameraButton())
  {
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeCameraButton"));
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeCameraButtonLightPress"));
    objc_msgSend(v0, "addObject:", CFSTR("AXAssistiveTouchIconTypeCameraButtonDoubleLightPress"));
  }
  return v0;
}

void ___accessibilitySupportSettingDidChange_block_invoke()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0CF3978]);
  v1 = objc_msgSend(v0, "initWithTargetSerialQueue:", MEMORY[0x1E0C80D38]);
  v2 = (void *)_accessibilitySupportSettingDidChange_Timer;
  _accessibilitySupportSettingDidChange_Timer = v1;

}

void ___accessibilitySupportSettingDidChange_block_invoke_2(uint64_t a1)
{
  id v1;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", *MEMORY[0x1E0DDE150]))
  {
    if (!_AXSInvertColorsEnabled())
    {
      +[AXSettings sharedInstance](AXSettings, "sharedInstance");
      v1 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "postNotificationForPreferenceKey:", CFSTR("AXSClassicInvertColorsPreference"));

    }
  }
}

Class __getTLToneManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  ToneLibraryLibrary();
  result = objc_getClass("TLToneManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getTLToneManagerClass_block_invoke_cold_1();
  getTLToneManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ToneLibraryLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!ToneLibraryLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C89A0;
    v3 = 0;
    ToneLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ToneLibraryLibraryCore_frameworkLibrary)
    ToneLibraryLibrary_cold_1(&v1);
  return ToneLibraryLibraryCore_frameworkLibrary;
}

uint64_t ScreenReaderOutputLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!ScreenReaderOutputLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C89B8;
    v3 = 0;
    ScreenReaderOutputLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ScreenReaderOutputLibraryCore_frameworkLibrary)
    ScreenReaderOutputLibrary_cold_1(&v1);
  return ScreenReaderOutputLibraryCore_frameworkLibrary;
}

Class __getVOSVoiceOverGreyCommandInfoClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!VoiceOverServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C89D0;
    v5 = 0;
    VoiceOverServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!VoiceOverServicesLibraryCore_frameworkLibrary)
    __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_1(&v3);
  result = objc_getClass("VOSVoiceOverGreyCommandInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_2();
  getVOSVoiceOverGreyCommandInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getZoomServicesGreyCommandInfoClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!operator||)
  {
    v4 = xmmword_1E24C89E8;
    v5 = 0;
    operator|| = _sl_dlopen();
  }
  if (!operator||)
    __getZoomServicesGreyCommandInfoClass_block_invoke_cold_1(&v3);
  result = objc_getClass("ZoomServicesGreyCommandInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getZoomServicesGreyCommandInfoClass_block_invoke_cold_2();
  getZoomServicesGreyCommandInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SpringBoardServicesLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E24C8A00;
    v3 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
    SpringBoardServicesLibrary_cold_1(&v1);
  return SpringBoardServicesLibraryCore_frameworkLibrary;
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id AXLocalizedStringForHandGestureEventUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __CFString *v9;
  void *v10;
  __CFString *v11;

  switch(a1)
  {
    case 1:
      v9 = CFSTR("HAND_GESTURE_CLENCH");
      goto LABEL_6;
    case 2:
      v9 = CFSTR("HAND_GESTURE_DOUBLE_CLENCH");
LABEL_6:
      AXParameterizedLocalizedString(1, v9, a3, a4, a5, a6, a7, a8, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      return v10;
    case 3:
      v11 = CFSTR("HAND_GESTURE_TAP");
      goto LABEL_9;
    case 4:
      v11 = CFSTR("HAND_GESTURE_DOUBLE_TAP");
LABEL_9:
      AXWatchControlEltonLocalizedStringForKey(v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v10 = 0;
      break;
  }
  return v10;
}

double AXTapticTimeIntervalForTapType(unint64_t a1, float a2)
{
  double v2;

  v2 = 0.0;
  if (a1 <= 6)
    v2 = dbl_18C737100[a1];
  return v2 / a2;
}

uint64_t AXGetComponentsInSiriVoiceIdentifier()
{
  return TTSGetComponentsInNamedSiriVoiceIdentifier();
}

uint64_t _AXFeatureSupportsNonSightedUsage()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  if (_AXSVoiceOverTouchEnabled())
    return 1;
  result = _AXSAssistiveTouchScannerEnabled();
  if ((_DWORD)result)
  {
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "assistiveTouchScannerSpeechEnabled");

    return v2;
  }
  return result;
}

void sub_18C6BEBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id AXPerformPrivilegedAttributedStringTransformation(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a1;
  if ((objc_msgSend(v3, "isAXAttributedString") & 1) != 0)
  {
    applyTransform(v3, a2);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = objc_msgSend(v3, "copy");
  }
  v5 = (void *)v4;

  return v5;
}

id applyTransform(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  void (*v15)(uint64_t);
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  id v31;
  void (*v32)(uint64_t);
  id v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  const void *v41;
  char v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  BOOL v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  id v71;
  _QWORD v72[4];
  id v73;
  uint64_t *v74;
  id v75;
  id v76;
  _QWORD v77[2];

  v77[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  v5 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 7)
  {

LABEL_6:
    v9 = objc_msgSend(v4, "copy");
LABEL_7:
    v10 = (id)v9;
    goto LABEL_8;
  }
  v6 = (_QWORD *)qword_1E24C8D38[v5];
  objc_msgSend(v3, "coalescedAttributes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "allKeys");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v6) = objc_msgSend(v8, "containsObject:", *v6);

  if ((v6 & 1) == 0)
    goto LABEL_6;
  switch(v5)
  {
    case 0:
      performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E0CF4298], &__block_literal_global_37, CFSTR("kbd"));
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 1:
      v29 = v4;
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CF40C0]), "initWithString:", &stru_1E24CAB08);
      v65 = MEMORY[0x1E0C809B0];
      v66 = 3221225472;
      v67 = (uint64_t)__performShareSheetLabelTransform_block_invoke_47;
      v68 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E24C8BE8;
      v69 = v29;
      v71 = &__block_literal_global_41_0;
      v31 = v30;
      v70 = v31;
      v32 = v29;
      objc_msgSend(v32, "enumerateAttributesUsingBlock:", &v65);
      v33 = v70;
      v10 = v31;

      break;
    case 2:
      v12 = v4;
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CF40C0]), "initWithString:", &stru_1E24CAB08);
      v65 = MEMORY[0x1E0C809B0];
      v66 = 3221225472;
      v67 = (uint64_t)__performShareSheetValueTransform_block_invoke_3;
      v68 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E24C8BE8;
      v69 = v12;
      v71 = &__block_literal_global_62;
      v14 = v13;
      v70 = v14;
      v15 = v12;
      objc_msgSend(v15, "enumerateAttributesUsingBlock:", &v65);
      v16 = v70;
      v10 = v14;

      break;
    case 3:
      v17 = v4;
      if (performTelephonyCarrierStringTransform_onceToken != -1)
        dispatch_once(&performTelephonyCarrierStringTransform_onceToken, &__block_literal_global_63);
      v18 = (void *)objc_msgSend(objc_alloc(NSClassFromString(CFSTR("CoreTelephonyClient"))), "initWithQueue:", performTelephonyCarrierStringTransform_TelephonyQueue);
      if (!v18)
      {
        AXLogAppAccessibility();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
          applyTransform_cold_3(v19);

      }
      v76 = 0;
      objc_msgSend(v18, "getSubscriptionInfoWithError:", &v76);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v76;
      v65 = 0;
      v66 = (uint64_t)&v65;
      v67 = 0x3032000000;
      v68 = __Block_byref_object_copy__13;
      v69 = __Block_byref_object_dispose__13;
      v70 = 0;
      if (v21)
      {
        AXLogAppAccessibility();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          applyTransform_cold_2((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        objc_msgSend(v20, "subscriptions");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "firstObject");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "context");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = 0;
        objc_msgSend(v18, "getLocalizedOperatorName:error:", v51, &v75);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v75;
        v53 = objc_msgSend(v52, "copy");
        v54 = *(void **)(v66 + 40);
        *(_QWORD *)(v66 + 40) = v53;

        if (v22)
        {
          AXLogAppAccessibility();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            applyTransform_cold_1((uint64_t)v22, v55, v56, v57, v58, v59, v60, v61);

        }
      }

      v62 = (void *)objc_msgSend(v17, "copy");
      if (!*(_QWORD *)(v66 + 40))
        *(_QWORD *)(v66 + 40) = &stru_1E24CAB08;
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = __performTelephonyCarrierStringTransform_block_invoke_70;
      v72[3] = &unk_1E24C8C80;
      v10 = v62;
      v73 = v10;
      v74 = &v65;
      objc_msgSend(v17, "enumerateAttributesUsingBlock:", v72);
      v77[0] = *MEMORY[0x1E0CF4310];
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v77, 1);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "removeAttributes:", v63);

      _Block_object_dispose(&v65, 8);
      break;
    case 4:
      performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E0CF42D0], &__block_literal_global_71, CFSTR("sociallayerd"));
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 5:
      v34 = v4;
      v10 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CF40C0]), "initWithString:", &stru_1E24CAB08);
      LOBYTE(v65) = 0;
      objc_opt_class();
      objc_msgSend(v34, "attributeValueForKey:", *MEMORY[0x1E0CF4108]);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      __UIAccessibilityCastAsClass();
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      v37 = objc_msgSend(v36, "longValue");
      LOBYTE(v65) = 0;
      objc_opt_class();
      objc_msgSend(v34, "attributeValueForKey:", *MEMORY[0x1E0CF4110]);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      __UIAccessibilityCastAsClass();
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      v40 = objc_msgSend(v39, "unsignedLongLongValue");
      v41 = 0;
      v42 = 1;
      v43 = 0;
      if (!(_DWORD)v37 || !v40)
        goto LABEL_37;
      v41 = (const void *)MEMORY[0x18D7860C0](v37, v40, 9999);
      if (v41)
      {
        objc_msgSend(MEMORY[0x1E0CF40C8], "elementWithAXUIElement:", v41);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "visibleElements");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "firstObject");
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        if (v43)
        {
          objc_msgSend(v43, "label");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = v46 == 0;

          if (!v47)
          {
            objc_msgSend(v43, "label");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "appendString:", v48);

            goto LABEL_38;
          }
        }
        v42 = 0;
      }
      else
      {
        v43 = 0;
      }
LABEL_37:
      objc_msgSend(v34, "string");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "appendString:", v64);

      if ((v42 & 1) != 0)
        goto LABEL_39;
LABEL_38:
      CFRelease(v41);
LABEL_39:

      break;
    case 6:
      performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E0CF4168], &__block_literal_global_91, CFSTR("sociallayerd"));
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    default:
      goto LABEL_6;
  }
LABEL_8:

  return v10;
}

void sub_18C6BF490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXPerformPrivilegedAttributedStringTransformations(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isAXAttributedString"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        v10 = v3;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          applyTransform(v10, objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "unsignedIntegerValue", (_QWORD)v13));
          v3 = (id)objc_claimAutoreleasedReturnValue();

          ++v9;
          v10 = v3;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

  }
  v11 = v3;

  return v11;
}

uint64_t AXGuidedAccessGetAvailability()
{
  void *v0;
  uint64_t v1;

  +[AXBackBoardServer server](AXBackBoardServer, "server");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "guidedAccessAvailability");

  return v1;
}

void __performProactiveSuggestionTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  v5 = objc_msgSend(a2, "unsignedLongValue");
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x1E0DBDB10];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __performProactiveSuggestionTransform_block_invoke_2;
    v7[3] = &unk_1E24C8B30;
    v8 = v4;
    objc_msgSend(v6, "requestLabelForProactiveCandidateWithSlotID:completionHandler:", v5, v7);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

uint64_t __performProactiveSuggestionTransform_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id performXPCTransformWithBlock(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, _QWORD *);
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  dispatch_semaphore_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  dispatch_time_t v19;
  void *v20;
  NSObject *v21;
  id v22;
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t *v27;
  _QWORD v28[4];
  NSObject *v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  _QWORD v38[3];

  v38[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(v7, "attributeValueForKey:", v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x3032000000;
    v35 = __Block_byref_object_copy__13;
    v36 = __Block_byref_object_dispose__13;
    v37 = 0;
    v13 = dispatch_group_create();
    dispatch_group_enter(v13);
    dispatch_group_enter(v13);
    dispatch_get_global_queue(-32768, 0);
    v14 = objc_claimAutoreleasedReturnValue();
    dispatch_group_notify(v13, v14, &__block_literal_global_36_0);

    v15 = dispatch_semaphore_create(0);
    v16 = MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __performXPCTransformWithBlock_block_invoke_2;
    v28[3] = &unk_1E24C8B78;
    v31 = &v32;
    v17 = v15;
    v29 = v17;
    v18 = v13;
    v30 = v18;
    v9[2](v9, v12, v28);
    v19 = dispatch_time(0, 1000000000);
    if (dispatch_semaphore_wait(v17, v19))
    {
      _AXLogWithFacility();
    }
    else
    {
      if (objc_msgSend((id)v33[5], "length"))
      {
        v24[0] = v16;
        v24[1] = 3221225472;
        v24[2] = __performXPCTransformWithBlock_block_invoke_3;
        v24[3] = &unk_1E24C8BA0;
        v25 = v8;
        v26 = v11;
        v27 = &v32;
        objc_msgSend(v26, "enumerateAttributesUsingBlock:", v24);

      }
      v38[0] = v8;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "removeAttributes:", v20);

    }
    dispatch_group_leave(v18);
    v21 = v30;
    v22 = v11;

    _Block_object_dispose(&v32, 8);
  }

  return v11;
}

void sub_18C6BF9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __performXPCTransformWithBlock_block_invoke_2(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __performXPCTransformWithBlock_block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  int v8;

  objc_msgSend(a2, "allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", *(_QWORD *)(a1 + 32));

  if (v8)
    objc_msgSend(*(id *)(a1 + 40), "replaceCharactersInRange:withString:", a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __performShareSheetLabelTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id SFAccessibilityClientClass;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(a2, "unsignedLongValue");
  AXLogCommon();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v12 = v7;
    _os_log_impl(&dword_18C62B000, v6, OS_LOG_TYPE_DEFAULT, "Transforming slot id: %@", buf, 0xCu);

  }
  if ((_DWORD)v5)
  {
    SFAccessibilityClientClass = getSFAccessibilityClientClass();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __performShareSheetLabelTransform_block_invoke_43;
    v9[3] = &unk_1E24C8B30;
    v10 = v4;
    objc_msgSend(SFAccessibilityClientClass, "requestLabelForActivityWithSlotID:completionHandler:", v5, v9);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

id getSFAccessibilityClientClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSFAccessibilityClientClass_softClass;
  v7 = getSFAccessibilityClientClass_softClass;
  if (!getSFAccessibilityClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSFAccessibilityClientClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getSFAccessibilityClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C6BFCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __performShareSheetLabelTransform_block_invoke_43(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  int v7;
  id v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  _AXApplicationNameLabelForBundleIdentifier(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  AXLogCommon();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_18C62B000, v5, OS_LOG_TYPE_DEFAULT, "Share sheet transform: %@/%@", (uint8_t *)&v7, 0x16u);
  }

  if (v4)
    v6 = v4;
  else
    v6 = v3;
  (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v6);

}

id _AXApplicationNameLabelForBundleIdentifier(void *a1)
{
  id v1;
  void (*v2)(id);
  void *v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = (void (*)(id))getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr;
  v9 = getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr;
  if (!getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke;
    v5[3] = &unk_1E24C4AE0;
    v5[4] = &v6;
    __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke((uint64_t)v5);
    v2 = (void (*)(id))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    _AXApplicationNameLabelForBundleIdentifier_cold_1();
  v2(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_18C6BFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __performShareSheetLabelTransform_block_invoke_47(id *a1)
{
  void *v2;
  id v3;

  objc_msgSend(a1[4], "substringWithRange:");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  performXPCTransformWithBlock(v3, (void *)*MEMORY[0x1E0CF42C0], a1[6], CFSTR("sharingd"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "appendAXAttributedString:", v2);

}

Class __getSFAccessibilityClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SharingLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C8C08;
    v5 = 0;
    SharingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SharingLibraryCore_frameworkLibrary)
    __getSFAccessibilityClientClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SFAccessibilityClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSFAccessibilityClientClass_block_invoke_cold_2();
  getSFAccessibilityClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AXFrontBoardUtilsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E24C8C20;
    v5 = 0;
    AXFrontBoardUtilsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AXFrontBoardUtilsLibraryCore_frameworkLibrary)
    __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)AXFrontBoardUtilsLibraryCore_frameworkLibrary, "AXApplicationNameLabelForBundleIdentifier");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void __performShareSheetValueTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  id SFAccessibilityClientClass;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  v5 = objc_msgSend(a2, "unsignedLongValue");
  if ((_DWORD)v5)
  {
    SFAccessibilityClientClass = getSFAccessibilityClientClass();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __performShareSheetValueTransform_block_invoke_2;
    v7[3] = &unk_1E24C8B30;
    v8 = v4;
    objc_msgSend(SFAccessibilityClientClass, "requestLabelForActivityWithSlotID:completionHandler:", v5, v7);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

void __performShareSheetValueTransform_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  _AXApplicationNameLabelForBundleIdentifier(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (id)v4;
  if (!v4)
    v4 = (uint64_t)v3;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4);

}

void __performShareSheetValueTransform_block_invoke_3(id *a1)
{
  void *v2;
  id v3;

  objc_msgSend(a1[4], "substringWithRange:");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  performXPCTransformWithBlock(v3, (void *)*MEMORY[0x1E0CF42C8], a1[6], CFSTR("sharingd"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "appendAXAttributedString:", v2);

}

void __performTelephonyCarrierStringTransform_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  id v2;

  v0 = dispatch_queue_create("ax-telephony-retrieval", 0);
  v1 = (void *)performTelephonyCarrierStringTransform_TelephonyQueue;
  performTelephonyCarrierStringTransform_TelephonyQueue = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework"));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isLoaded") & 1) == 0)
    objc_msgSend(v2, "load");

}

void __performTelephonyCarrierStringTransform_block_invoke_70(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  int v8;

  objc_msgSend(a2, "allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", *MEMORY[0x1E0CF4310]);

  if (v8)
    objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void __performSocialAttributionStringTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  v4 = a2;
  v5 = a3;
  if (audit_stringAXFrontBoardUtils_block_invoke_onceToken != -1)
    dispatch_once(&audit_stringAXFrontBoardUtils_block_invoke_onceToken, &__block_literal_global_72_1);
  objc_msgSend((id)audit_stringAXFrontBoardUtils_block_invoke_proxy, "remoteService");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE074490))
  {
    v7 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __performSocialAttributionStringTransform_block_invoke_3;
      v19[3] = &unk_1E24C8B30;
      v20 = v5;
      objc_msgSend(v7, "accessibilityLabelForAttributionIdentifiers:reply:", v4, v19);
      v8 = v20;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v4, "length"))
      {
        (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
        goto LABEL_14;
      }
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __performSocialAttributionStringTransform_block_invoke_4;
      v17[3] = &unk_1E24C8B30;
      v18 = v5;
      objc_msgSend(v7, "accessibilityLabelForAttributionIdentifier:reply:", v4, v17);
      v8 = v18;
    }

LABEL_14:
    goto LABEL_15;
  }
  AXLogAppAccessibility();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    __performSocialAttributionStringTransform_block_invoke_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);

  (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
LABEL_15:

}

uint64_t __performSocialAttributionStringTransform_block_invoke_2()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  id SLDServiceProxyClass;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  AXSLDServiceProxyDelegateObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.Accessibility.SLDPillService", v0);
  v2 = (void *)audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue;
  audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue = (uint64_t)v1;

  SLDServiceProxyClass = getSLDServiceProxyClass();
  v13 = 0;
  v14 = &v13;
  v15 = 0x2050000000;
  v4 = (void *)getSLDPillServiceClass_softClass;
  v16 = getSLDPillServiceClass_softClass;
  if (!getSLDPillServiceClass_softClass)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __getSLDPillServiceClass_block_invoke;
    v12[3] = &unk_1E24C4AE0;
    v12[4] = &v13;
    __getSLDPillServiceClass_block_invoke((uint64_t)v12);
    v4 = (void *)v14[3];
  }
  v5 = objc_retainAutorelease(v4);
  _Block_object_dispose(&v13, 8);
  v6 = objc_opt_class();
  v7 = audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue;
  v8 = objc_alloc_init(AXSLDServiceProxyDelegateObject);
  objc_msgSend(SLDServiceProxyClass, "proxyForServiceClass:targetSerialQueue:delegate:", v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)audit_stringAXFrontBoardUtils_block_invoke_proxy;
  audit_stringAXFrontBoardUtils_block_invoke_proxy = v9;

  return objc_msgSend((id)audit_stringAXFrontBoardUtils_block_invoke_proxy, "connect");
}

void sub_18C6C0640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSLDServiceProxyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSLDServiceProxyClass_softClass;
  v7 = getSLDServiceProxyClass_softClass;
  if (!getSLDServiceProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSLDServiceProxyClass_block_invoke;
    v3[3] = &unk_1E24C4AE0;
    v3[4] = &v4;
    __getSLDServiceProxyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C6C06F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __performSocialAttributionStringTransform_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __performSocialAttributionStringTransform_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

Class __getSLDServiceProxyClass_block_invoke(uint64_t a1)
{
  Class result;

  SocialLayerLibrary();
  result = objc_getClass("SLDServiceProxy");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSLDServiceProxyClass_block_invoke_cold_1();
  getSLDServiceProxyClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void SocialLayerLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!SocialLayerLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E24C8CE0;
    v2 = 0;
    SocialLayerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SocialLayerLibraryCore_frameworkLibrary)
    SocialLayerLibrary_cold_1(&v0);
}

Class __getSLDPillServiceClass_block_invoke(uint64_t a1)
{
  Class result;

  SocialLayerLibrary();
  result = objc_getClass("SLDPillService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSLDPillServiceClass_block_invoke_cold_1();
  getSLDPillServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __performCollaborationAttributionStringTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;

  v4 = a2;
  v5 = a3;
  if (audit_stringSocialLayer_block_invoke_2_onceToken != -1)
    dispatch_once(&audit_stringSocialLayer_block_invoke_2_onceToken, &__block_literal_global_92);
  objc_msgSend((id)audit_stringSocialLayer_block_invoke_2_proxy, "remoteService");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE0744F0))
  {
    v7 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __performCollaborationAttributionStringTransform_block_invoke_3;
      v16[3] = &unk_1E24C8B30;
      v17 = v5;
      objc_msgSend(v7, "accessibilityLabelForAttributionIdentifiers:reply:", v4, v16);

    }
    else
    {
      (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
    }

  }
  else
  {
    AXLogAppAccessibility();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __performSocialAttributionStringTransform_block_invoke_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);

    (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
  }

}

uint64_t __performCollaborationAttributionStringTransform_block_invoke_2()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  id SLDServiceProxyClass;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  AXSLDServiceProxyDelegateObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.Accessibility.SLDCollaborationAttributionViewService", v0);
  v2 = (void *)audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue;
  audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue = (uint64_t)v1;

  SLDServiceProxyClass = getSLDServiceProxyClass();
  v13 = 0;
  v14 = &v13;
  v15 = 0x2050000000;
  v4 = (void *)getSLDCollaborationAttributionViewServiceClass_softClass;
  v16 = getSLDCollaborationAttributionViewServiceClass_softClass;
  if (!getSLDCollaborationAttributionViewServiceClass_softClass)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __getSLDCollaborationAttributionViewServiceClass_block_invoke;
    v12[3] = &unk_1E24C4AE0;
    v12[4] = &v13;
    __getSLDCollaborationAttributionViewServiceClass_block_invoke((uint64_t)v12);
    v4 = (void *)v14[3];
  }
  v5 = objc_retainAutorelease(v4);
  _Block_object_dispose(&v13, 8);
  v6 = objc_opt_class();
  v7 = audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue;
  v8 = objc_alloc_init(AXSLDServiceProxyDelegateObject);
  objc_msgSend(SLDServiceProxyClass, "proxyForServiceClass:targetSerialQueue:delegate:", v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)audit_stringSocialLayer_block_invoke_2_proxy;
  audit_stringSocialLayer_block_invoke_2_proxy = v9;

  return objc_msgSend((id)audit_stringSocialLayer_block_invoke_2_proxy, "connect");
}

void sub_18C6C0B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __performCollaborationAttributionStringTransform_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

Class __getSLDCollaborationAttributionViewServiceClass_block_invoke(uint64_t a1)
{
  Class result;

  SocialLayerLibrary();
  result = objc_getClass("SLDCollaborationAttributionViewService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSLDCollaborationAttributionViewServiceClass_block_invoke_cold_1();
  getSLDCollaborationAttributionViewServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C6C1484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AXSwitchRecipeMappingSwitchUUIDs(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(v1, "mappings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(v1, "mappings", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v10, "switchUUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          objc_msgSend(v10, "switchUUID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v12);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

  return v4;
}

id AXSwitchRecipeMappingNameForAction(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Exit")) & 1) != 0)
  {
    v2 = CFSTR("EXIT_RECIPE");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Select")) & 1) != 0)
  {
    v2 = CFSTR("SELECT_ITEM_AUTOSCANNING");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Gesture")) & 1) != 0)
  {
    v2 = CFSTR("CUSTOM_GESTURE");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CenterTap")) & 1) != 0)
  {
    v2 = CFSTR("CENTER_TAP");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RightToLeftSwipe")) & 1) != 0)
  {
    v2 = CFSTR("RIGHT_TO_LEFT_SWIPE");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LeftToRightSwipe")) & 1) != 0)
  {
    v2 = CFSTR("LEFT_TO_RIGHT_SWIPE");
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("HoldAtPoint")))
    {
      v3 = 0;
      goto LABEL_16;
    }
    v2 = CFSTR("HOLD_POINT");
  }
  AXLocalizedString(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

  return v3;
}

uint64_t AXSwitchRecipeMappingActionAllowsLongPress(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("HoldAtPoint")) ^ 1;
}

void sub_18C6C62C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18C6C65FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _AXSSetTestBuddyData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;

  v8 = a1;
  v7 = a2;
  if (_AXSInUnitTestMode())
    +[AXBuddyDataPackage setTestData:forModel:hasHomeButton:largeTextUsesExtendedRange:](AXBuddyDataPackage, "setTestData:forModel:hasHomeButton:largeTextUsesExtendedRange:", v8, v7, a3, a4);

}

void OUTLINED_FUNCTION_0_9(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void SCATRemoveSwitchFromSettings(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    v1 = a1;
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "assistiveTouchSwitches");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v2, "mutableCopy");
    objc_msgSend(v3, "removeObject:", v1);

    objc_msgSend(v4, "setAssistiveTouchSwitches:", v3);
  }
}

void SCATAddOrUpdateSwitchToSettings(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "assistiveTouchSwitches");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "mutableCopy");

    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    v7 = v5;
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v13;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v10);
        if ((objc_msgSend(v1, "isEqual:", v11, (_QWORD)v12) & 1) != 0)
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v8)
            goto LABEL_4;
          v7 = v5;
          goto LABEL_13;
        }
      }
      v7 = v11;

      if (!v7)
        goto LABEL_14;
      objc_msgSend(v5, "removeObject:", v7);
    }
LABEL_13:

LABEL_14:
    objc_msgSend(v5, "addObject:", v1, (_QWORD)v12);
    objc_msgSend(v2, "setAssistiveTouchSwitches:", v5);

  }
}

void SCATAddOrUpdateCameraSwitchToSettings(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    +[AXSettings sharedInstance](AXSettings, "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "assistiveTouchCameraPointPickerSwitches");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "mutableCopy");

    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    v7 = v5;
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v13;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v10);
        if ((objc_msgSend(v1, "isEqual:", v11, (_QWORD)v12) & 1) != 0)
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v8)
            goto LABEL_4;
          v7 = v5;
          goto LABEL_13;
        }
      }
      v7 = v11;

      if (!v7)
        goto LABEL_14;
      objc_msgSend(v5, "removeObject:", v7);
    }
LABEL_13:

LABEL_14:
    objc_msgSend(v5, "addObject:", v1, (_QWORD)v12);
    objc_msgSend(v2, "setAssistiveTouchCameraPointPickerSwitches:", v5);

  }
}

uint64_t SCATSwitchExistsWithName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v1 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "assistiveTouchSwitches");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __SCATSwitchExistsWithName_block_invoke;
  v7[3] = &unk_1E24C8FB0;
  v4 = v1;
  v8 = v4;
  v9 = &v10;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);
  v5 = *((unsigned __int8 *)v11 + 24);

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_18C6CB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SCATNextAvailableSwitchName()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  AXFormatInteger();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  AXParameterizedLocalizedString(2, CFSTR("SWITCH_NAME_PREFIX"), v1, v2, v3, v4, v5, v6, (uint64_t)v0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (SCATSwitchExistsWithName(v7))
  {
    v8 = 2;
    do
    {
      AXFormatInteger();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      AXParameterizedLocalizedString(2, CFSTR("SWITCH_NAME_PREFIX"), v10, v11, v12, v13, v14, v15, (uint64_t)v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      ++v8;
      v7 = v16;
    }
    while ((SCATSwitchExistsWithName(v16) & 1) != 0);
  }
  else
  {
    v16 = v7;
  }
  return v16;
}

const __CFString *SCATActionDescription(uint64_t a1)
{
  const __CFString *result;
  uint64_t v2;

  if (a1 <= 199)
  {
    v2 = a1 - 100;
    result = CFSTR("activate");
    switch(v2)
    {
      case 0:
        return result;
      case 1:
        result = CFSTR("menu");
        break;
      case 2:
        result = CFSTR("run");
        break;
      case 3:
        result = CFSTR("select");
        break;
      case 4:
        result = CFSTR("step next");
        break;
      case 5:
        result = CFSTR("step previous");
        break;
      case 6:
        result = CFSTR("stop");
        break;
      case 7:
        result = CFSTR("voice shortcuts");
        break;
      case 8:
        result = CFSTR("apple watch remote screen");
        break;
      case 9:
        result = CFSTR("select and resume autoscanning");
        break;
      default:
LABEL_38:
        result = CFSTR("unknown");
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 200:
        result = CFSTR("app switcher");
        break;
      case 201:
        result = CFSTR("home");
        break;
      case 202:
        result = CFSTR("notifications");
        break;
      case 203:
        result = CFSTR("siri");
        break;
      case 204:
        result = CFSTR("volume down");
        break;
      case 205:
        result = CFSTR("volume up");
        break;
      case 206:
        result = CFSTR("3d touch");
        break;
      case 207:
        result = CFSTR("toggle dictation");
        break;
      case 208:
        result = CFSTR("accessibility shortcut");
        break;
      case 209:
        result = CFSTR("control center");
        break;
      case 210:
        result = CFSTR("escape");
        break;
      case 211:
        result = CFSTR("camera button");
        break;
      case 212:
        result = CFSTR("camera button light press");
        break;
      case 213:
        result = CFSTR("camera button double light press");
        break;
      default:
        switch(a1)
        {
          case 300:
            result = CFSTR("ATV Select");
            break;
          case 301:
            result = CFSTR("ATV Menu");
            break;
          case 302:
            result = CFSTR("ATV Home");
            break;
          case 303:
            result = CFSTR("ATV Play/Pause");
            break;
          case 304:
            result = CFSTR("ATV Up");
            break;
          case 305:
            result = CFSTR("ATV Down");
            break;
          case 306:
            result = CFSTR("ATV Left");
            break;
          case 307:
            result = CFSTR("ATV Right");
            break;
          default:
            if (a1 != 400)
              goto LABEL_38;
            result = CFSTR("Active Hold and Drag");
            break;
        }
        break;
    }
  }
  return result;
}

BOOL SCATSwitchConfigurationRendersDeviceUnusable(char a1)
{
  void *v2;
  void *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "assistiveTouchSwitches");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __SCATSwitchConfigurationRendersDeviceUnusable_block_invoke;
  v8[3] = &unk_1E24C9068;
  v8[4] = &v9;
  v8[5] = &v13;
  v8[6] = &v17;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v8);
  if ((a1 & 1) != 0)
    goto LABEL_2;
  v5 = objc_msgSend(v2, "switchControlScanningStyle");
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*((_BYTE *)v18 + 24))
        goto LABEL_2;
    }
    else if (v5 != 2)
    {
      goto LABEL_2;
    }
    v6 = v14;
  }
  else
  {
    v6 = v18;
  }
  if (*((_BYTE *)v6 + 24))
  {
    v4 = 0;
    goto LABEL_12;
  }
LABEL_2:
  v4 = *((_BYTE *)v10 + 24) != 0;
LABEL_12:
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);

  return v4;
}

void sub_18C6CBBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void *SCATScannerSwitchActions()
{
  return &unk_1E24F8E40;
}

id SCATSystemSwitchActions()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", &unk_1E24F8E58);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "addObject:", &unk_1E24F8330);
  objc_msgSend(v0, "addObject:", &unk_1E24F8348);
  objc_msgSend(v0, "addObject:", &unk_1E24F8360);
  objc_msgSend(v0, "addObject:", &unk_1E24F8378);
  objc_msgSend(v0, "addObject:", &unk_1E24F8390);
  objc_msgSend(MEMORY[0x1E0D51838], "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "getActivePairedDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    objc_msgSend(v0, "addObject:", &unk_1E24F83A8);
  objc_msgSend(v0, "addObject:", &unk_1E24F83C0);
  objc_msgSend(v0, "addObject:", &unk_1E24F83D8);
  if (MGGetBoolAnswer())
    objc_msgSend(v0, "addObject:", &unk_1E24F83F0);
  if (AXForceTouchAvailableAndEnabled())
    objc_msgSend(v0, "addObject:", &unk_1E24F8408);
  objc_msgSend(v0, "addObject:", &unk_1E24F8420);
  objc_msgSend(v0, "addObject:", &unk_1E24F8438);
  if (AXDeviceSupportsCameraButton())
  {
    objc_msgSend(v0, "addObject:", &unk_1E24F8450);
    objc_msgSend(v0, "addObject:", &unk_1E24F8468);
    objc_msgSend(v0, "addObject:", &unk_1E24F8480);
  }
  return v0;
}

void *SCATATVRemoteSwitchActions()
{
  return &unk_1E24F8E70;
}

void *SCATHeadTrackingSwitchActions()
{
  return &unk_1E24F8E88;
}

id SCATLocStringForAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFString *v8;
  id result;
  uint64_t v10;

  switch(a1)
  {
    case 200:
      v8 = CFSTR("SWITCH_ACTION_APP_SWITCHER_LABEL");
      goto LABEL_28;
    case 201:
      v8 = CFSTR("SWITCH_ACTION_HOME_LABEL");
      goto LABEL_28;
    case 202:
      v8 = CFSTR("SWITCH_ACTION_NOTIFICATION_CENTER_LABEL");
      goto LABEL_28;
    case 203:
      v8 = CFSTR("SWITCH_ACTION_SIRI_LABEL");
      goto LABEL_28;
    case 204:
      v8 = CFSTR("SWITCH_ACTION_VOLUME_DOWN_LABEL");
      goto LABEL_28;
    case 205:
      v8 = CFSTR("SWITCH_ACTION_VOLUME_UP_LABEL");
      goto LABEL_28;
    case 206:
      v8 = CFSTR("CUSTOMIZE_MENU_ForceTouch");
      goto LABEL_28;
    case 207:
      v8 = CFSTR("SWITCH_ACTION_DICTATE_LABEL");
      goto LABEL_28;
    case 208:
      v8 = CFSTR("SWITCH_ACTION_TRIPLE_CLICK");
      goto LABEL_28;
    case 209:
      v8 = CFSTR("SWITCH_ACTION_CONTROL_CENTER_LABEL");
      goto LABEL_28;
    case 210:
      v8 = CFSTR("SWITCH_ACTION_ESCAPE_LABEL");
      goto LABEL_28;
    case 211:
      v8 = CFSTR("SWITCH_ACTION_CAMERA_BUTTON");
      goto LABEL_28;
    case 212:
      v8 = CFSTR("SWITCH_ACTION_CAMERA_BUTTON_LIGHT_PRESS");
      goto LABEL_28;
    case 213:
      v8 = CFSTR("SWITCH_ACTION_CAMERA_BUTTON_DOUBLE_LIGHT_PRESS");
LABEL_28:
      AXParameterizedLocalizedString(2, v8, a3, a4, a5, a6, a7, a8, v10);
      result = (id)objc_claimAutoreleasedReturnValue();
      break;
    default:
      switch(a1)
      {
        case 'd':
          v8 = CFSTR("SWITCH_ACTION_ACTIVATE_LABEL");
          goto LABEL_28;
        case 'e':
          v8 = CFSTR("SWITCH_ACTION_MENU_LABEL");
          goto LABEL_28;
        case 'f':
          v8 = CFSTR("SWITCH_ACTION_RUN_LABEL");
          goto LABEL_28;
        case 'g':
        case 'm':
          v8 = CFSTR("SWITCH_ACTION_SELECT_LABEL");
          goto LABEL_28;
        case 'h':
          v8 = CFSTR("SWITCH_ACTION_STEP_NEXT_LABEL");
          goto LABEL_28;
        case 'i':
          v8 = CFSTR("SWITCH_ACTION_STEP_PREVIOUS_LABEL");
          goto LABEL_28;
        case 'j':
          v8 = CFSTR("SWITCH_ACTION_STOP_LABEL");
          goto LABEL_28;
        case 'k':
          v8 = CFSTR("SWITCH_ACTION_VOICE_SHORTCUTS_MENU_LABEL");
          goto LABEL_28;
        case 'l':
          v8 = CFSTR("SWITCH_ACTION_APPLE_WATCH_REMOTE_SCREEN_MENU_LABEL");
          goto LABEL_28;
        default:
          if (a1 == 400)
          {
            v8 = CFSTR("SWITCH_ACTION_ACTIVE_HOLD_AND_DRAG_LABEL");
            goto LABEL_28;
          }
          _AXLogWithFacility();
          result = 0;
          break;
      }
      break;
  }
  return result;
}

id SCATSwitchesWithSource(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "assistiveTouchSwitches");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __SCATSwitchesWithSource_block_invoke;
  v7[3] = &unk_1E24C9090;
  v8 = v1;
  v4 = v1;
  objc_msgSend(v3, "objectsPassingTest:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id SCATSwitchesWithType(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  +[AXSettings sharedInstance](AXSettings, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "assistiveTouchSwitches");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __SCATSwitchesWithType_block_invoke;
  v7[3] = &unk_1E24C9090;
  v8 = v1;
  v4 = v1;
  objc_msgSend(v3, "objectsPassingTest:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

BOOL SCATIsMFIButtonDownValue(__IOHIDValue *a1)
{
  __IOHIDElement *Element;

  Element = IOHIDValueGetElement(a1);
  return IOHIDElementGetUsagePage(Element) == 9 && IOHIDValueGetIntegerValue(a1) > 0;
}

BOOL SCATIsKeyboardKeyEvent()
{
  return IOHIDEventGetType() == 3 && IOHIDEventGetIntegerValue() == 7;
}

uint64_t SCATIsATVRemoteButtonSwitchCandidateEvent()
{
  uint64_t result;
  uint64_t IntegerValue;

  result = SCATIsATVRemoteButtonEvent();
  if ((_DWORD)result)
  {
    IntegerValue = IOHIDEventGetIntegerValue();
    return IntegerValue == 4 || (unint64_t)(IntegerValue - 233) < 2 || IntegerValue == 205 || IntegerValue == 96;
  }
  return result;
}

uint64_t SCATIsATVRemoteButtonEvent()
{
  unint64_t IntegerValue;
  int64x2_t v1;
  char v2;

  if (IOHIDEventGetType() != 3)
    goto LABEL_6;
  if (IOHIDEventGetIntegerValue() != 12)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      v2 = IOHIDEventGetIntegerValue() == 134;
      return v2 & 1;
    }
LABEL_6:
    v2 = 0;
    return v2 & 1;
  }
  IntegerValue = IOHIDEventGetIntegerValue();
  v1 = vdupq_n_s64(IntegerValue);
  v2 = vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C737250), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C737260)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C737270), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C737280))))) | vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C737290), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18C7372A0)))) | (IntegerValue == 67 || (IntegerValue & 0xFFFFFFFFFFFFFFFELL) == 68 || IntegerValue - 233 < 2);
  return v2 & 1;
}

void *SCATATVRemoteDeviceMatchingDictionary()
{
  return &unk_1E24F9098;
}

BOOL SCATIsGamepadKeyEvent()
{
  return (IOHIDEventGetType() & 0xFFFFFFDF) == 3;
}

void sub_18C6CDA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_18C6CE580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCVoiceShortcutClientClass_block_invoke(uint64_t a1)
{
  Class result;

  VoiceShortcutClientLibrary();
  result = objc_getClass("VCVoiceShortcutClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVCVoiceShortcutClientClass_block_invoke_cold_1();
  getVCVoiceShortcutClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void VoiceShortcutClientLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E24C91D0;
    v2 = 0;
    VoiceShortcutClientLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary)
    VoiceShortcutClientLibrary_cold_1(&v0);
}

Class __getWFAccessibilityWorkflowRunnerClientClass_block_invoke(uint64_t a1)
{
  Class result;

  VoiceShortcutClientLibrary();
  result = objc_getClass("WFAccessibilityWorkflowRunnerClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getWFAccessibilityWorkflowRunnerClientClass_block_invoke_cold_1();
  getWFAccessibilityWorkflowRunnerClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _AXMIDIHandleErrorOSStatus(int a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = (void *)MEMORY[0x1E0CB35C8];
    v6 = *MEMORY[0x1E0CB2F90];
    v7 = a3;
    objc_msgSend(v5, "errorWithDomain:code:userInfo:", v6, a1, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0CB35C8];
    v10 = AXMIDIErrorDomain;
    v11 = *MEMORY[0x1E0CB2D50];
    v16 = *MEMORY[0x1E0CB3388];
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@"), v7, v16, v11, v8);

    v17[1] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "errorWithDomain:code:userInfo:", v10, a2, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    AXMIDILogError(v14);
  }
  return a1 != 0;
}

void AXMIDILogError(void *a1)
{
  id v1;
  uint64_t v2;
  const __CFString *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  NSObject *v11;

  v1 = a1;
  v2 = objc_msgSend(v1, "code");
  if ((unint64_t)(v2 - 1) > 6)
    v3 = CFSTR("Unknown");
  else
    v3 = (const __CFString *)*((_QWORD *)&off_1E24C91E8 + v2 - 1);
  v4 = objc_alloc(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v1, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D50]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("AX MIDI Error: %@ - %@"), v3, v6);

  objc_msgSend(v1, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v7, "appendFormat:", CFSTR(" [Underlying Error: %@]"), v9);
    v10 = objc_msgSend(v9, "code") + 10844;
    if (v10 <= 0xE)
      objc_msgSend(v7, "appendString:", *((_QWORD *)&off_1E24C9220 + v10));
  }
  AXLogMIDI();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    AXMIDILogError_cold_1((uint64_t)v7, v11);

}

BOOL _AXMIDIHandlePropertyLookupError(int a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1 != -10835 && a1)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], a1, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB35C8];
    v6 = AXMIDIErrorDomain;
    v7 = *MEMORY[0x1E0CB2D50];
    v12 = *MEMORY[0x1E0CB3388];
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Error fetching MIDI property '%@'"), v3, v12, v7, v4);
    v13[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "errorWithDomain:code:userInfo:", v6, 5, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    AXMIDILogError(v10);
  }

  return a1 != 0;
}

__CFString *_AXMIDIStringProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  id v5;
  OSStatus StringProperty;
  __CFString *v7;
  CFStringRef str;

  str = 0;
  v5 = a3;
  StringProperty = MIDIObjectGetStringProperty(a1, a2, &str);
  LODWORD(a2) = _AXMIDIHandlePropertyLookupError(StringProperty, v5);

  v7 = (__CFString *)str;
  if ((_DWORD)a2)
    v7 = 0;
  return v7;
}

id _AXMIDIIntegerProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  id v5;
  OSStatus IntegerProperty;
  SInt32 outValue;

  outValue = 0;
  v5 = a3;
  IntegerProperty = MIDIObjectGetIntegerProperty(a1, a2, &outValue);
  LOBYTE(a2) = _AXMIDIHandlePropertyLookupError(IntegerProperty, v5);

  if ((a2 & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", outValue);
  return (id)objc_claimAutoreleasedReturnValue();
}

id _AXMIDIBooleanProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  id v5;
  OSStatus IntegerProperty;
  SInt32 outValue;

  outValue = 0;
  v5 = a3;
  IntegerProperty = MIDIObjectGetIntegerProperty(a1, a2, &outValue);
  LOBYTE(a2) = _AXMIDIHandlePropertyLookupError(IntegerProperty, v5);

  if ((a2 & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", outValue);
  return (id)objc_claimAutoreleasedReturnValue();
}

id AXMIDIEntityForEndpoint(MIDIEndpointRef a1)
{
  OSStatus Entity;
  void *v2;
  MIDIEntityRef outEntity;

  outEntity = 0;
  Entity = MIDIEndpointGetEntity(a1, &outEntity);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to find entity for endpoint"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(Entity) = _AXMIDIHandleErrorOSStatus(Entity, 5, v2);

  if ((Entity & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outEntity);
  return (id)objc_claimAutoreleasedReturnValue();
}

id AXMIDIDeviceForEntity(MIDIEntityRef a1)
{
  OSStatus Device;
  void *v2;
  MIDIDeviceRef outDevice;

  outDevice = 0;
  Device = MIDIEntityGetDevice(a1, &outDevice);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to find device for entity"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(Device) = _AXMIDIHandleErrorOSStatus(Device, 5, v2);

  if ((Device & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDevice);
  return (id)objc_claimAutoreleasedReturnValue();
}

id AXMIDIDeviceForEndpoint(MIDIEndpointRef a1)
{
  OSStatus Entity;
  void *v2;
  OSStatus Device;
  void *v4;
  MIDIDeviceRef outDevice;
  MIDIEntityRef outEntity;

  outEntity = 0;
  Entity = MIDIEndpointGetEntity(a1, &outEntity);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to find entity for endpoint"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(Entity) = _AXMIDIHandleErrorOSStatus(Entity, 5, v2);

  if ((Entity & 1) != 0)
    return 0;
  outDevice = 0;
  Device = MIDIEntityGetDevice(outEntity, &outDevice);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to find device for entity"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(Device) = _AXMIDIHandleErrorOSStatus(Device, 5, v4);

  if ((Device & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDevice);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _AXIPCSendData(int a1, int a2, mach_msg_timeout_t a3, uint64_t a4, int a5, _QWORD *a6, _DWORD *a7)
{
  mach_port_name_t reply_port;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE msg[36];
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  memset(&msg[4], 0, 32);
  *(_DWORD *)&msg[24] = 2;
  *(_DWORD *)&msg[28] = a2;
  v17 = 1245184;
  v18 = a4;
  v19 = 16777472;
  v20 = a5;
  v21 = *MEMORY[0x1E0C804E8];
  v22 = a5;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0xD5AD200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v12 = mach_msg((mach_msg_header_t *)msg, 275, 0x44u, 0x40u, reply_port, a3, 0);
  v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v12)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v13 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 875318)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v13 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v13 = 4294966996;
              else
                v13 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v13 = 4294966996;
          }
          goto LABEL_28;
        }
        v13 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 56 && !*(_DWORD *)&msg[8] && HIBYTE(v17) == 1)
        {
          v14 = v18;
          if ((_DWORD)v18 == v20)
          {
            v13 = 0;
            *a6 = *(_QWORD *)&msg[28];
            *a7 = v14;
            return v13;
          }
        }
      }
      else
      {
        v13 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v13;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_28;
  }
  return v13;
}

uint64_t _AXIPCSimpleSendDataWithFencePort(mach_port_name_t a1, int a2, int a3, mach_msg_timeout_t timeout, uint64_t a5, int a6)
{
  uint64_t v7;
  int v9;
  mach_port_name_t name[4];
  uint64_t v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v11 = 0;
  v13 = 0u;
  *(_OWORD *)name = 0u;
  v12 = a2;
  DWORD1(v13) = 1245184;
  DWORD2(v13) = a3;
  v14 = 1245184;
  v15 = a5;
  v16 = 16777472;
  v17 = a6;
  v18 = *MEMORY[0x1E0C804E8];
  v19 = a6;
  v9 = -2147483629;
  name[1] = a1;
  v11 = 0x3000D5AD4;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  v7 = mach_msg((mach_msg_header_t *)&v9, 17, 0x50u, 0, 0, timeout, 0);
  if ((v7 - 268435459) <= 1)
  {
    if ((v9 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], name[2]);
    mach_msg_destroy((mach_msg_header_t *)&v9);
  }
  return v7;
}

uint64_t _AXIPCSendDataWithAsyncReply(mach_port_name_t a1, int a2, int a3, mach_msg_timeout_t timeout, uint64_t a5, int a6)
{
  uint64_t v7;
  int v9;
  mach_port_name_t name[4];
  uint64_t v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v11 = 0;
  v13 = 0u;
  *(_OWORD *)name = 0u;
  v12 = a2;
  DWORD1(v13) = 1245184;
  DWORD2(v13) = a3;
  v14 = 1376256;
  v15 = a5;
  v16 = 16777472;
  v17 = a6;
  v18 = *MEMORY[0x1E0C804E8];
  v19 = a6;
  v9 = -2147483629;
  name[1] = a1;
  v11 = 0x3000D5AD5;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  v7 = mach_msg((mach_msg_header_t *)&v9, 17, 0x50u, 0, 0, timeout, 0);
  if ((v7 - 268435459) <= 1)
  {
    if ((v9 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], name[2]);
    mach_msg_destroy((mach_msg_header_t *)&v9);
  }
  return v7;
}

uint64_t (*_AXIPCServer_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 875222) >= 0xFFFFFFFC)
    return __AXXIPC_AXIPCServer_subsystem[5 * (v1 - 875218) + 5];
  else
    return 0;
}

void _XSendData(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  _OWORD v16[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 68)
  {
    v5 = -304;
    goto LABEL_12;
  }
  if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112
    || *(_BYTE *)(a1 + 51) != 1
    || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 64))
  {
    v5 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 68) || (v4 = *(_DWORD *)(a1 + 72), v4 <= 7) || v4 - 8 <= 0x1F)
  {
    v5 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v5;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  v6 = a2 + 52;
  *(_DWORD *)(a2 + 36) = 16777472;
  v7 = a2 + 28;
  v9 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  v10 = *(unsigned int *)(a1 + 28);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_DWORD *)(a1 + 52);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 104);
  v16[0] = *(_OWORD *)(a1 + 88);
  v16[1] = v14;
  v15 = __AXXIPCSendData(v8, v9, v10, v11, v12, v7, v6, v13, v16);
  mig_deallocate(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52));
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (!v15)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v15;
LABEL_13:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void _XSimpleSendDataWithFencePort(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  mach_port_name_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 3 && *(_DWORD *)(a1 + 4) == 80)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned __int16 *)(a1 + 50) << 16 == 1114112
      && *(_BYTE *)(a1 + 63) == 1
      && (v4 = *(_DWORD *)(a1 + 64), v4 == *(_DWORD *)(a1 + 76)))
    {
      if (!*(_DWORD *)(a1 + 80))
      {
        v5 = *(_DWORD *)(a1 + 84);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          v7 = *(unsigned int *)(a1 + 12);
          v8 = *(unsigned int *)(a1 + 28);
          v9 = *(_DWORD *)(a1 + 40);
          v10 = *(_QWORD *)(a1 + 52);
          v11 = *(_QWORD *)(a1 + 92);
          v12 = *(_OWORD *)(a1 + 116);
          v13[0] = *(_OWORD *)(a1 + 100);
          v13[1] = v12;
          *(_DWORD *)(a2 + 32) = __AXXIPCSimpleSendDataWithFencePort(v7, v8, v9, v10, v4, v11, v13);
          mig_deallocate(*(_QWORD *)(a1 + 52), *(unsigned int *)(a1 + 64));
          *(_QWORD *)(a1 + 52) = 0;
          *(_DWORD *)(a1 + 64) = 0;
          return;
        }
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void _XSendDataWithAsyncReply(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 3 && *(_DWORD *)(a1 + 4) == 80)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned __int16 *)(a1 + 50) << 16 == 1179648
      && *(_BYTE *)(a1 + 63) == 1
      && (v4 = *(_DWORD *)(a1 + 64), v4 == *(_DWORD *)(a1 + 76)))
    {
      if (!*(_DWORD *)(a1 + 80))
      {
        v5 = *(_DWORD *)(a1 + 84);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          v7 = *(unsigned int *)(a1 + 12);
          v8 = *(unsigned int *)(a1 + 28);
          v9 = *(_DWORD *)(a1 + 40);
          v10 = *(_QWORD *)(a1 + 52);
          v11 = *(_QWORD *)(a1 + 92);
          v12 = *(_OWORD *)(a1 + 116);
          v13[0] = *(_OWORD *)(a1 + 100);
          v13[1] = v12;
          *(_DWORD *)(a2 + 32) = __AXXIPCSendDataWithAsyncReply(v7, v8, v9, v10, v4, v11, v13);
          mig_deallocate(*(_QWORD *)(a1 + 52), *(unsigned int *)(a1 + 64));
          *(_QWORD *)(a1 + 52) = 0;
          *(_DWORD *)(a1 + 64) = 0;
          return;
        }
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t _AXIPCServer_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 875222) >= 0xFFFFFFFC
    && (v5 = (void (*)(void))__AXXIPC_AXIPCServer_subsystem[5 * (v4 - 875218) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t _AXIPCAsyncSendDataReply(unsigned int a1, int a2, uint64_t a3, int a4)
{
  int v5;
  mach_msg_size_t v6;
  _BYTE msg[36];
  __int128 v9;
  int v10;

  v10 = 0;
  v9 = 0u;
  memset(&msg[4], 0, 32);
  if (a2)
  {
    *(_DWORD *)&msg[32] = a2;
    *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
    v5 = 18;
  }
  else
  {
    *(_DWORD *)&msg[24] = 1;
    *(_QWORD *)&msg[28] = a3;
    LODWORD(v9) = 16777472;
    DWORD1(v9) = a4;
    *((_QWORD *)&v9 + 1) = *MEMORY[0x1E0C804E8];
    v10 = a4;
    v5 = -2147483630;
  }
  *(_DWORD *)msg = v5;
  *(_QWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[16] = 0;
  *(_DWORD *)&msg[20] = 875318;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  if (a2)
    v6 = 36;
  else
    v6 = 56;
  return mach_msg((mach_msg_header_t *)msg, 1, v6, 0, 0, 0, 0);
}

uint64_t _AXIPCReplyToAsyncRequest(int a1, uint64_t a2, int a3)
{
  _BYTE msg[28];
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  v5 = a2;
  v6 = 16777472;
  v7 = a3;
  v8 = *MEMORY[0x1E0C804E8];
  v9 = a3;
  *(_QWORD *)msg = 2147483666;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_18C7372E0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  return mach_msg((mach_msg_header_t *)msg, 1, 0x38u, 0, 0, 0, 0);
}

void (*_AXIPCAsyncRequestReply_server_routine(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == 2015010900)
    return _XReplyToAsyncRequest;
  else
    return 0;
}

void _XReplyToAsyncRequest(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1)
    {
      v3 = *(_DWORD *)(a1 + 40);
      if (v3 == *(_DWORD *)(a1 + 52))
      {
        *(_DWORD *)(a2 + 32) = __AXXIPCReplyToAsyncRequest(*(unsigned int *)(a1 + 12), *(_QWORD *)(a1 + 28), v3);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t _AXIPCAsyncRequestReply_server(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v5;
  uint64_t result;
  int v7;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = *(_DWORD *)a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = *(_DWORD *)(a1 + 20) + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (*(_DWORD *)(a1 + 20) != 2015010900)
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 56)
  {
    v7 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return 1;
  }
  if (*(_BYTE *)(a1 + 39) != 1 || (v5 = *(_DWORD *)(a1 + 40), v5 != *(_DWORD *)(a1 + 52)))
  {
    v7 = -300;
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 32) = __AXXIPCReplyToAsyncRequest(*(unsigned int *)(a1 + 12), *(_QWORD *)(a1 + 28), v5);
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

void sub_18C6D02F4(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled, a2);
}

void sub_18C6D0300(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled);
}

uint64_t sub_18C6D030C()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled);
}

void sub_18C6D0318(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled);
}

uint64_t (*sub_18C6D0324(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D0388()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled);
  v2 = sub_18C711E14();

  return v2;
}

void sub_18C6D03C4(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight, a2);
}

void sub_18C6D03D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
}

uint64_t sub_18C6D03DC()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
}

void sub_18C6D03E8(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
}

uint64_t (*sub_18C6D03F4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D0454()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight));
  v2 = sub_18C711E14();

  return v2;
}

void sub_18C6D0490(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization, a2);
}

void sub_18C6D049C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization);
}

uint64_t sub_18C6D04A8()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization);
}

void sub_18C6D04B4(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization);
}

uint64_t (*sub_18C6D04C0(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D0520()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization));
  v2 = sub_18C711E14();

  return v2;
}

double sub_18C6D055C@<D0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_18C6D08C0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel, a2);
}

void sub_18C6D0568(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0918(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel);
}

double sub_18C6D0574()
{
  return sub_18C6D096C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel);
}

void sub_18C6D0580()
{
  sub_18C6D09B8(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel);
}

uint64_t (*sub_18C6D058C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D05EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel);
  v2 = sub_18C711E14();

  return v2;
}

void sub_18C6D0628(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = *(id *)(*a1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  sub_18C711DFC();

  *a2 = v4;
}

void sub_18C6D0678(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = *(id *)(*a2 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  sub_18C711E08();

}

uint64_t sub_18C6D06C4()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  sub_18C711DFC();

  return v3;
}

void sub_18C6D0708()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  sub_18C711E08();

}

uint64_t (*sub_18C6D074C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D07AC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier);
  v2 = sub_18C711E14();

  return v2;
}

double sub_18C6D07E8@<D0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_18C6D08C0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast, a2);
}

void sub_18C6D07F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0918(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast);
}

double sub_18C6D0800()
{
  return sub_18C6D096C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast);
}

void sub_18C6D080C()
{
  sub_18C6D09B8(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast);
}

uint64_t (*sub_18C6D0818(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D0878()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast);
  v2 = sub_18C711E14();

  return v2;
}

double sub_18C6D08B4@<D0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_18C6D08C0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness, a2);
}

double sub_18C6D08C0@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, double *a3@<X8>)
{
  id v4;
  double result;
  double v6;

  v4 = *(id *)(*a1 + *a2);
  sub_18C711DFC();

  result = v6;
  *a3 = v6;
  return result;
}

void sub_18C6D090C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0918(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness);
}

void sub_18C6D0918(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v5;

  v5 = *(id *)(*a2 + *a5);
  sub_18C711E08();

}

double sub_18C6D0960()
{
  return sub_18C6D096C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness);
}

double sub_18C6D096C(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  double v4;

  v2 = *(id *)(v1 + *a1);
  sub_18C711DFC();

  return v4;
}

void sub_18C6D09AC()
{
  sub_18C6D09B8(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness);
}

void sub_18C6D09B8(_QWORD *a1)
{
  uint64_t v1;
  id v2;

  v2 = *(id *)(v1 + *a1);
  sub_18C711E08();

}

uint64_t (*sub_18C6D09F8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D0A58()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness);
  v2 = sub_18C711E14();

  return v2;
}

void sub_18C6D0A94(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato, a2);
}

void sub_18C6D0AA0(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  id v4;
  char v5;

  v4 = *(id *)(*a1 + *a2);
  sub_18C711DFC();

  *a3 = v5;
}

void sub_18C6D0AEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato);
}

void sub_18C6D0AF8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v5;

  v5 = *(id *)(*a2 + *a5);
  sub_18C711E08();

}

uint64_t sub_18C6D0B40()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato);
}

uint64_t sub_18C6D0B4C(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  unsigned __int8 v4;

  v2 = *(id *)(v1 + *a1);
  sub_18C711DFC();

  return v4;
}

void sub_18C6D0B8C(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato);
}

void sub_18C6D0B98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(v2 + *a2);
  sub_18C711E08();

}

uint64_t (*sub_18C6D0BD8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

void sub_18C6D0C38(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t sub_18C6D0C6C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato);
  v2 = sub_18C711E14();

  return v2;
}

id AXPreferences.Magnifier.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AXPreferences.Magnifier.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  objc_super v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__enabled;
  v6 = sub_18C711DA8();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v4, 1, 1, v6);
  v8 = v0;
  *(_QWORD *)&v0[v5] = sub_18C6D110C(1, 0x64656C62616E65, 0xE700000000000000, 0, 0, 11, (uint64_t)v4);
  v9 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v9] = sub_18C6D110C(0, 0xD000000000000022, 0x800000018C734060, 0, 0, 11, (uint64_t)v4);
  v10 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__shouldUseVideoStabilization;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v10] = sub_18C6D110C(0, 0xD00000000000001BLL, 0x800000018C734090, 0, 0, 11, (uint64_t)v4);
  v11 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__liveZoomLevel;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v11] = sub_18C6D1454(2.0, 0x6D6F6F5A6576696CLL, 0xED00006C6576654CLL, 0, 0, 11, (uint64_t)v4);
  v12 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__filterSetIdentifier;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v12] = sub_18C6D17A0(0, 0xD000000000000013, 0x800000018C7340B0, 0, 0, 11, (uint64_t)v4);
  v13 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__contrast;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v13] = sub_18C6D1454(1.0, 0x74736172746E6F63, 0xE800000000000000, 0, 0, 11, (uint64_t)v4);
  v14 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__brightness;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v14] = sub_18C6D1454(0.0, 0x656E746867697262, 0xEA00000000007373, 0, 0, 11, (uint64_t)v4);
  v15 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9Magnifier__didLaunchFromStaccato;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v15] = sub_18C6D110C(0, 0xD000000000000015, 0x800000018C7340D0, 0, 0, 11, (uint64_t)v4);

  v16 = (objc_class *)type metadata accessor for AXPreferences.Magnifier();
  v18.receiver = v8;
  v18.super_class = v16;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D786948]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id AXPreferences.Magnifier.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.Magnifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C6D110C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v35 = a6;
  v29[1] = a4;
  v30 = a5;
  v9 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_18C711DA8();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v31 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (_QWORD *)((char *)v29 - v23);
  v32 = a7;
  sub_18C6D2528(a7, (uint64_t)v16);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v33 = v9;
  v34 = v12;
  if (v25 == 1)
  {
    v36 = 0x656966696E67616DLL;
    v37 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v26 = v37;
    *v24 = v36;
    v24[1] = v26;
    v24[2] = 0;
    v24[3] = 0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v24, *MEMORY[0x1E0CF2F50], v17);
    sub_18C6D2570((uint64_t)v16);
  }
  else
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v18 + 32))(v24, v16, v17);
  }
  if (!v30)
  {
    v36 = 0x656966696E67614DLL;
    v37 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE043930);
  v40 = a1 & 1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 16))(v31, v24, v17);
  v36 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v38 = sub_18C711C70();
  v39 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v36);
  sub_18C711C64();
  v27 = sub_18C711DD8();
  sub_18C6D2570(v32);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v24, v17);
  return v27;
}

uint64_t sub_18C6D1454(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;

  v35 = a6;
  v30 = a4;
  v10 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_18C711DA8();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v31 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (uint64_t *)((char *)&v30 - v24);
  v32 = a7;
  sub_18C6D2528(a7, (uint64_t)v17);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  v33 = v10;
  v34 = v13;
  if (v26 != 1)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 32))(v25, v17, v18);
    if (a5)
      goto LABEL_3;
LABEL_5:
    v36 = 0x656966696E67614DLL;
    v37 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v36 = 0x656966696E67616DLL;
  v37 = 0xE900000000000072;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v27 = v37;
  *v25 = v36;
  v25[1] = v27;
  v25[2] = 0;
  v25[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v25, *MEMORY[0x1E0CF2F50], v18);
  sub_18C6D2570((uint64_t)v17);
  if (!a5)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043928);
  v40 = a1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 16))(v31, v25, v18);
  v36 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v38 = sub_18C711C70();
  v39 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v36);
  sub_18C711C64();
  v28 = sub_18C711DD8();
  sub_18C6D2570(v32);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v25, v18);
  return v28;
}

uint64_t sub_18C6D17A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a6;
  v29[1] = a4;
  v30 = a5;
  v9 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_18C711DA8();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v31 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (_QWORD *)((char *)v29 - v23);
  v32 = a7;
  sub_18C6D2528(a7, (uint64_t)v16);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v33 = v9;
  v34 = v12;
  if (v25 == 1)
  {
    v36 = 0x656966696E67616DLL;
    v37 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v26 = v37;
    *v24 = v36;
    v24[1] = v26;
    v24[2] = 0;
    v24[3] = 0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v24, *MEMORY[0x1E0CF2F50], v17);
    sub_18C6D2570((uint64_t)v16);
  }
  else
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v18 + 32))(v24, v16, v17);
  }
  if (!v30)
  {
    v36 = 0x656966696E67614DLL;
    v37 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043908);
  v40 = a1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 16))(v31, v24, v17);
  v36 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v38 = sub_18C711C70();
  v39 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v36);
  sub_18C711C64();
  v27 = sub_18C711DD8();
  sub_18C6D2570(v32);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v24, v17);
  return v27;
}

uint64_t type metadata accessor for AXPreferences.Magnifier()
{
  return objc_opt_self();
}

uint64_t sub_18C6D1B04(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C90, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.Magnifier, (uint64_t)&protocol conformance descriptor for AXPreferences.Magnifier);
}

uint64_t sub_18C6D1B30()
{
  sub_18C6D2488(&qword_1EE043900, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXMagnifierFilterSetIdentifier, (uint64_t)&unk_18C7377F8);
  return sub_18C711F34();
}

uint64_t sub_18C6D1BA8()
{
  sub_18C6D2488(&qword_1EE043900, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXMagnifierFilterSetIdentifier, (uint64_t)&unk_18C7377F8);
  return sub_18C711F10();
}

uint64_t method lookup function for AXPreferences.Magnifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.enabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.enabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.enabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$enabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$shouldAdjustFiltersForAmbientLight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldUseVideoStabilization.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldUseVideoStabilization.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.shouldUseVideoStabilization.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$shouldUseVideoStabilization.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.liveZoomLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.liveZoomLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.liveZoomLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$liveZoomLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.filterSetIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.filterSetIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.filterSetIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$filterSetIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.contrast.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.contrast.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.contrast.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$contrast.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.brightness.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.brightness.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.brightness.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$brightness.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.didLaunchFromStaccato.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.didLaunchFromStaccato.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.didLaunchFromStaccato.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of AXPreferences.Magnifier.$didLaunchFromStaccato.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

void type metadata accessor for AXSVoiceOverBrailleGesturesSoundOption(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042CA8);
}

void type metadata accessor for AXMagnifierFilterSetIdentifier(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1ECE670E8);
}

void type metadata accessor for AXSVoiceOverBrailleMode(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1ECE670C8);
}

void type metadata accessor for AXSVoiceOverKeyboardModifierChoice(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042C38);
}

void type metadata accessor for AXSVoiceOverNavigationStyle(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042C08);
}

void type metadata accessor for AXSVoiceOverTouchTypingMode(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042C20);
}

void type metadata accessor for AXSVoiceOverNumberFeedback(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042BD8);
}

void type metadata accessor for AXSVoiceOverFeedbackOption(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1EE042BC0);
}

void type metadata accessor for AXSSVoiceOverTextualContext(uint64_t a1)
{
  sub_18C6D2050(a1, &qword_1ECE670E0);
}

void sub_18C6D2050(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_18C6D2094()
{
  uint64_t v0;

  sub_18C711EA4();
  v0 = sub_18C711E80();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18C6D20CC(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_18C711E8C();
  *a2 = 0;
  return result;
}

uint64_t sub_18C6D2140(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_18C711E98();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_18C6D21BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_18C711EA4();
  v2 = sub_18C711E80();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_18C6D21FC()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

uint64_t sub_18C6D2240()
{
  return sub_18C712294();
}

uint64_t sub_18C6D2268()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

BOOL sub_18C6D22A8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18C6D22BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_18C711E80();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_18C6D2300@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_18C711EA4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18C6D2328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_18C711EA4();
  v2 = v1;
  if (v0 == sub_18C711EA4() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_18C712264();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

_QWORD *sub_18C6D23B0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_18C6D23C0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_18C6D23CC()
{
  sub_18C6D2488(&qword_1ECE670D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&protocol conformance descriptor for AXSSVoiceOverTextualContext);
  sub_18C6D2488(&qword_1EE0438F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C737580);
  return sub_18C7121A4();
}

uint64_t sub_18C6D2458()
{
  return sub_18C6D2488(&qword_1EE042BE8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C737548);
}

uint64_t sub_18C6D2488(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x18D786960](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18C6D24C8()
{
  return sub_18C6D2488(&qword_1EE0438E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C737520);
}

uint64_t sub_18C6D24F8()
{
  return sub_18C6D2488(&qword_1EE0438F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverBrailleMode, (uint64_t)&unk_18C737790);
}

uint64_t sub_18C6D2528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6D2570(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_18C6D25B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE043920;
  if (!qword_1EE043920)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE043918);
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE043920);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D786954](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_18C6D2688(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_18C6D2690()
{
  uint64_t v0;

  return sub_18C6D26A4(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x1E0DEE9E8]);
}

uint64_t sub_18C6D26A4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_18C6D26B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18C6D4524();
  *a1 = result;
  return result;
}

uint64_t sub_18C6D26D8()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
}

void sub_18C6D26E4(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
}

uint64_t (*sub_18C6D26F0(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

unint64_t sub_18C6D2750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A18);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A20);
  v7 = sub_18C71218C();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_18C6D5138(v13, (uint64_t)v6, &qword_1EE043A18);
    result = sub_18C6F9344((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_18C711A90();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = v8[7];
    v21 = sub_18C711D54();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18C6D2908(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67070);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A08);
  v7 = sub_18C71218C();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_18C6D5138(v13, (uint64_t)v6, &qword_1ECE67070);
    result = sub_18C6F9344((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_18C711A90();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72) * v17;
    v22 = v18 + v21;
    v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
    v23(v22, v6, v19);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v8[7] + v21, v10, v19);
    v24 = v8[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_11;
    v8[2] = v26;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18C6D2AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (_QWORD *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439F8);
  v7 = sub_18C71218C();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (char *)v6 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_18C6D5138(v13, (uint64_t)v6, &qword_1EE0439F0);
    v15 = *v6;
    v16 = v6[1];
    result = sub_18C6F9454(*v6, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = sub_18C711D54();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18C6D2C50(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439E0);
  v2 = sub_18C71218C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_18C6D5138(v6, (uint64_t)&v15, &qword_1EE0439E8);
    v7 = v15;
    v8 = v16;
    result = sub_18C6F9454(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_18C6D44DC((uint64_t)&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18C6D2D90(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439D0);
  v2 = (_QWORD *)sub_18C71218C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_18C6D5138(v4, (uint64_t)&v16, &qword_1EE0439D8);
    v5 = v16;
    v6 = v17;
    result = sub_18C6F9454(v16, v17);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    v10 = v2[7] + 40 * result;
    v11 = v18;
    v12 = v19;
    *(_QWORD *)(v10 + 32) = v20;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18C6D2ED8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439C8);
  v2 = (_QWORD *)sub_18C71218C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_18C6F9454(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_18C6D2FF0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D302C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16[5];

  v6 = sub_18C711D84();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  MEMORY[0x1E0C80A78](v6, v8);
  v9 = sub_18C711DA8();
  MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(char *, _QWORD))(v12 + 104))((char *)&v16[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CF2F40]);
  v16[0] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v7, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v16[3] = sub_18C711C70();
  v16[4] = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(v16);
  sub_18C711C64();
  v15 = a1;
  v13 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(a4));
  return sub_18C711DE4();
}

void sub_18C6D31CC(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  id v4;
  uint64_t v5;

  v4 = *(id *)(*a1 + *a2);
  sub_18C711DFC();

  *a3 = v5;
}

void sub_18C6D3218(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  id v6;

  v5 = *(void **)(*a2 + *a5);
  swift_bridgeObjectRetain();
  v6 = v5;
  sub_18C711E08();

}

uint64_t sub_18C6D3264()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
}

uint64_t sub_18C6D3270(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;

  v2 = *(id *)(v1 + *a1);
  sub_18C711DFC();

  return v4;
}

void sub_18C6D32B0(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
}

void sub_18C6D32BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(v2 + *a2);
  sub_18C711E08();

}

uint64_t (*sub_18C6D32FC(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D335C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D3398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_18C6D33B4()
{
  _QWORD *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = objc_retain(*(id *)(v0[6]
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage));
  v2 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v3 = v0[2];
  v0[7] = v3;
  sub_18C711B8C();
  v4 = sub_18C711B80();
  v0[8] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v0[9] = v5;
  *v5 = v0;
  v5[1] = sub_18C6D3470;
  return Dictionary<>.speechVoiceIdentifier(forLanguage:withResolver:exists:)(v0[3], v0[4], v4, v0[5], v3);
}

uint64_t sub_18C6D3470(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_18C6D3618(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18C711EA4();
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  v4[4] = v9;
  v10 = a4;
  v11 = (_QWORD *)swift_task_alloc();
  v4[5] = v11;
  *v11 = v4;
  v11[1] = sub_18C6D36D0;
  v11[5] = a2;
  v11[6] = v10;
  v11[3] = a1;
  v11[4] = v9;
  return swift_task_switch();
}

uint64_t sub_18C6D36D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (a2)
  {
    v7 = (void *)sub_18C711E80();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void (***)(_QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, void *))v8)[2](v8, v7);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_18C6D3780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  return swift_task_switch();
}

uint64_t sub_18C6D37A0()
{
  uint64_t *v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void **)(v0[10]
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v0[11] = (uint64_t)v1;
  v2 = v1;
  v0[12] = sub_18C711DF0();
  sub_18C711B8C();
  v3 = sub_18C711B80();
  v0[13] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sub_18C6D3848;
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v0[6], v0[7], v0[8], v0[9], v3);
}

uint64_t sub_18C6D3848()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  void *v3;
  uint64_t v5;

  v1 = *v0 + 16;
  v3 = *(void **)(*v0 + 88);
  v2 = *(void (**)(uint64_t, _QWORD))(*v0 + 96);
  v5 = *v0;
  swift_task_dealloc();
  swift_release();
  v2(v1, 0);

  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_18C6D39F0(uint64_t a1, int a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4[6] = a4;
  v4[7] = _Block_copy(aBlock);
  if (a1)
  {
    v7 = sub_18C711EA4();
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v4[8] = v7;
  v4[9] = v8;
  v4[10] = sub_18C711EA4();
  v4[11] = v9;
  v10 = a4;
  return swift_task_switch();
}

uint64_t sub_18C6D3A74()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void **)(v0[6]
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v0[12] = v1;
  v2 = v1;
  v0[13] = sub_18C711DF0();
  sub_18C711B8C();
  v3 = sub_18C711B80();
  v0[14] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_18C6D3B1C;
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v0[8], v0[9], v0[10], v0[11], v3);
}

uint64_t sub_18C6D3B1C()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  uint64_t v7;

  v1 = *v0 + 16;
  v3 = *(void **)(*v0 + 96);
  v2 = *(void (**)(uint64_t, _QWORD))(*v0 + 104);
  v5 = *(void **)(*v0 + 48);
  v4 = *(void (***)(_QWORD))(*v0 + 56);
  v7 = *v0;
  swift_task_dealloc();
  swift_release();
  v2(v1, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4[2](v4);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

id AXPreferences.SpokenContentSettings.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AXPreferences.SpokenContentSettings.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage;
  v2 = v0;
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_18C6D2750(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v0[v1] = sub_18C6D302C(v4, 0xD00000000000002DLL, 0x800000018C734310, &qword_1EE043A10);
  v5 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations;
  v6 = sub_18C6D2908(v3);
  *(_QWORD *)&v2[v5] = sub_18C6D302C(v6, 0xD000000000000029, 0x800000018C7342E0, &qword_1EE043A00);

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for AXPreferences.SpokenContentSettings();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for AXPreferences.SpokenContentSettings()
{
  return objc_opt_self();
}

id AXPreferences.SpokenContentSettings.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.SpokenContentSettings();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C6D3DEC(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C80, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.SpokenContentSettings, (uint64_t)&protocol conformance descriptor for AXPreferences.SpokenContentSettings);
}

void sub_18C6D3E50(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage, a2);
}

void sub_18C6D3E6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D3218(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
}

void sub_18C6D3E88(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations, a2);
}

void sub_18C6D3EA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D3218(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
}

uint64_t method lookup function for AXPreferences.SpokenContentSettings()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.client.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.selectedVoiceIdentifiers()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_18C6D3F50;
  return v5();
}

uint64_t sub_18C6D3F50(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.$voiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.$macroLanguageDisambiguations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.speechVoiceIdentifier(forLanguage:exists:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB0);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_18C6D410C;
  return v11(a1, a2, a3);
}

uint64_t sub_18C6D410C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of AXPreferences.SpokenContentSettings.set(voiceId:forLanguage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB8);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_18C6D517C;
  return v13(a1, a2, a3, a4);
}

uint64_t sub_18C6D41FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_18C6D4238()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_18C6D517C;
  return ((uint64_t (*)(uint64_t, int, void *, void *))((char *)&dword_1EE043988 + dword_1EE043988))(v2, v3, v5, v4);
}

uint64_t sub_18C6D42B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D517C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EE044380 + dword_1EE044380))(v2, v3, v4);
}

uint64_t sub_18C6D4330(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_18C6D517C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE044388 + dword_1EE044388))(a1, v4, v5, v6);
}

uint64_t sub_18C6D43B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_18C6D43E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_18C6D4460;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_1EE0439A8 + dword_1EE0439A8))(v2, v3, v5, v4);
}

uint64_t sub_18C6D4460()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroy_10Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18C6D44DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6D4524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  int v60;
  int v61;
  char v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  int isUniquelyReferenced_nonNull_native;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  os_log_type_t v91;
  NSObject *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t result;
  _QWORD v101[3];
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[5];
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v0 = sub_18C711D54();
  v118 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0, v1);
  v117 = (char *)v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2, v4);
  v107 = (char *)v101 - v5;
  v110 = sub_18C711A90();
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v6);
  v119 = (uint64_t)v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = MEMORY[0x1E0DEE9E0];
  v108 = (id)objc_opt_self();
  v8 = objc_msgSend(v108, sel_sharedInstance);
  v9 = objc_msgSend(v8, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v9)
    goto LABEL_82;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB0);
  v10 = sub_18C711E44();

  v106 = *MEMORY[0x1E0CF37D8];
  v11 = sub_18C711EA4();
  if (!*(_QWORD *)(v10 + 16) || (v13 = sub_18C6F9454(v11, v12), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v108, sel_sharedInstance);
  objc_msgSend(v16, sel_quickSpeakSpeakingRate);
  v18 = v17;

  v19 = 0;
  v20 = *(_QWORD *)(v15 + 64);
  v102 = v15 + 64;
  v105 = v15;
  v21 = 1 << *(_BYTE *)(v15 + 32);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & v20;
  v103 = (unint64_t)(v21 + 63) >> 6;
  v101[2] = *MEMORY[0x1E0DBEF60];
  v104 = v18;
  v101[1] = MEMORY[0x1E0DEE9B8] + 8;
  v101[0] = v0;
  while (1)
  {
    if (v23)
    {
      v111 = (v23 - 1) & v23;
      v112 = v19;
      v24 = __clz(__rbit64(v23)) | (v19 << 6);
    }
    else
    {
      v25 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_92;
      if (v25 >= v103)
        goto LABEL_81;
      v26 = *(_QWORD *)(v102 + 8 * v25);
      v27 = v19 + 1;
      if (!v26)
      {
        v27 = v19 + 2;
        if (v19 + 2 >= v103)
          goto LABEL_81;
        v26 = *(_QWORD *)(v102 + 8 * v27);
        if (!v26)
        {
          v27 = v19 + 3;
          if (v19 + 3 >= v103)
            goto LABEL_81;
          v26 = *(_QWORD *)(v102 + 8 * v27);
          if (!v26)
          {
            v28 = v19 + 4;
            if (v19 + 4 >= v103)
              goto LABEL_81;
            v26 = *(_QWORD *)(v102 + 8 * v28);
            if (!v26)
            {
              while (1)
              {
                v27 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_93;
                if (v27 >= v103)
                  break;
                v26 = *(_QWORD *)(v102 + 8 * v27);
                ++v28;
                if (v26)
                  goto LABEL_25;
              }
LABEL_81:
              swift_release();
LABEL_82:
              v91 = sub_18C71203C();
              v92 = (id)AXTTSLogCommon();
              if (!v92)
                goto LABEL_94;
              v93 = v92;
              v94 = v91;
              if (os_log_type_enabled(v92, v91))
              {
                v95 = (uint8_t *)swift_slowAlloc();
                v96 = swift_slowAlloc();
                v124[0] = v96;
                *(_DWORD *)v95 = 136315138;
                swift_beginAccess();
                sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
                swift_bridgeObjectRetain();
                v97 = sub_18C711E50();
                v99 = v98;
                swift_bridgeObjectRelease();
                v122 = sub_18C70197C(v97, v99, v124);
                sub_18C712060();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_18C62B000, v93, v94, "Migrating general selections to %s", v95, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x18D7869F0](v96, -1, -1);
                MEMORY[0x18D7869F0](v95, -1, -1);
              }

              swift_beginAccess();
              return v127;
            }
            v27 = v19 + 4;
          }
        }
      }
LABEL_25:
      v111 = (v26 - 1) & v26;
      v112 = v27;
      v24 = __clz(__rbit64(v26)) + (v27 << 6);
    }
    v29 = 16 * v24;
    v30 = *(_QWORD *)(v105 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v105 + 48) + v29);
    v32 = v31[1];
    v113 = *v31;
    v33 = (uint64_t *)(v30 + v29);
    v35 = *v33;
    v34 = v33[1];
    v114 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = objc_msgSend(v108, sel_sharedInstance);
    v115 = v35;
    v116 = v34;
    v37 = (void *)sub_18C711E80();
    v38 = objc_msgSend(v36, sel_customSettingsForVoice_sourceKey_, v37, v106);

    if (v38)
      break;
    v125 = 0u;
    v126 = 0u;
LABEL_67:
    sub_18C6D5088((uint64_t)&v125);
LABEL_68:
    v75 = v119;
    sub_18C711A9C();
    LOBYTE(v124[0]) = 1;
    v76 = v107;
    sub_18C711D30();
    v77 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
    v77(v117, v76, v0);
    v78 = v127;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v124[0] = v78;
    v127 = 0x8000000000000000;
    v81 = sub_18C6F9344(v75);
    v82 = *(_QWORD *)(v78 + 16);
    v83 = (v80 & 1) == 0;
    v84 = v82 + v83;
    if (__OFADD__(v82, v83))
      goto LABEL_89;
    v85 = v80;
    if (*(_QWORD *)(v78 + 24) >= v84)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v88 = (_QWORD *)v124[0];
        if ((v80 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_18C6FBCF4();
        v88 = (_QWORD *)v124[0];
        if ((v85 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_18C6F9844(v84, isUniquelyReferenced_nonNull_native);
      v86 = sub_18C6F9344(v119);
      if ((v85 & 1) != (v87 & 1))
        goto LABEL_96;
      v81 = v86;
      v88 = (_QWORD *)v124[0];
      if ((v85 & 1) != 0)
      {
LABEL_8:
        (*(void (**)(unint64_t, char *, uint64_t))(v118 + 40))(v88[7] + *(_QWORD *)(v118 + 72) * v81, v117, v0);
        goto LABEL_9;
      }
    }
    v88[(v81 >> 6) + 8] |= 1 << v81;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v109 + 16))(v88[6] + *(_QWORD *)(v109 + 72) * v81, v119, v110);
    v77((char *)(v88[7] + *(_QWORD *)(v118 + 72) * v81), v117, v0);
    v89 = v88[2];
    v73 = __OFADD__(v89, 1);
    v90 = v89 + 1;
    if (v73)
      goto LABEL_91;
    v88[2] = v90;
LABEL_9:
    v127 = v124[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v119, v110);
    v19 = v112;
    v23 = v111;
  }
  v39 = sub_18C711E44();

  v122 = sub_18C711EA4();
  v123 = v40;
  sub_18C7120D8();
  if (*(_QWORD *)(v39 + 16) && (v41 = sub_18C6F94B8((uint64_t)v124), (v42 & 1) != 0))
  {
    sub_18C6D50FC(*(_QWORD *)(v39 + 56) + 32 * v41, (uint64_t)&v125);
  }
  else
  {
    v125 = 0u;
    v126 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_18C6D50C8((uint64_t)v124);
  if (!*((_QWORD *)&v126 + 1))
    goto LABEL_67;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_68;
  v43 = 0;
  v44 = v124[0];
  v45 = *(_QWORD *)(v124[0] + 64);
  v120 = v124[0] + 64;
  v46 = 1 << *(_BYTE *)(v124[0] + 32);
  if (v46 < 64)
    v47 = ~(-1 << v46);
  else
    v47 = -1;
  v48 = v47 & v45;
  v121 = (unint64_t)(v46 + 63) >> 6;
  v49 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (2)
  {
    if (v48)
    {
      v50 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      v51 = v50 | (v43 << 6);
    }
    else
    {
      v52 = v43 + 1;
      if (__OFADD__(v43, 1))
        goto LABEL_88;
      if (v52 >= v121)
      {
LABEL_77:
        swift_release();
        v0 = v101[0];
        goto LABEL_68;
      }
      v53 = *(_QWORD *)(v120 + 8 * v52);
      ++v43;
      if (!v53)
      {
        v43 = v52 + 1;
        if (v52 + 1 >= v121)
          goto LABEL_77;
        v53 = *(_QWORD *)(v120 + 8 * v43);
        if (!v53)
        {
          v43 = v52 + 2;
          if (v52 + 2 >= v121)
            goto LABEL_77;
          v53 = *(_QWORD *)(v120 + 8 * v43);
          if (!v53)
          {
            v54 = v52 + 3;
            if (v54 >= v121)
              goto LABEL_77;
            v53 = *(_QWORD *)(v120 + 8 * v54);
            if (!v53)
            {
              while (1)
              {
                v43 = v54 + 1;
                if (__OFADD__(v54, 1))
                  goto LABEL_90;
                if (v43 >= v121)
                  goto LABEL_77;
                v53 = *(_QWORD *)(v120 + 8 * v43);
                ++v54;
                if (v53)
                  goto LABEL_54;
              }
            }
            v43 = v54;
          }
        }
      }
LABEL_54:
      v48 = (v53 - 1) & v53;
      v51 = __clz(__rbit64(v53)) + (v43 << 6);
    }
    v55 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * v51);
    v57 = *v55;
    v56 = v55[1];
    v58 = *(void **)(*(_QWORD *)(v44 + 56) + 8 * v51);
    swift_bridgeObjectRetain();
    v59 = v58;
    objc_msgSend(v59, sel_floatValue);
    v61 = v60;
    v62 = swift_isUniquelyReferenced_nonNull_native();
    v124[0] = (uint64_t)v49;
    v64 = sub_18C6F9454(v57, v56);
    v65 = v49[2];
    v66 = (v63 & 1) == 0;
    v67 = v65 + v66;
    if (!__OFADD__(v65, v66))
    {
      v68 = v63;
      if (v49[3] >= v67)
      {
        if ((v62 & 1) != 0)
        {
          v49 = (_QWORD *)v124[0];
          if ((v63 & 1) == 0)
            goto LABEL_62;
        }
        else
        {
          sub_18C6FBFD4();
          v49 = (_QWORD *)v124[0];
          if ((v68 & 1) == 0)
            goto LABEL_62;
        }
      }
      else
      {
        sub_18C6F9C48(v67, v62);
        v69 = sub_18C6F9454(v57, v56);
        if ((v68 & 1) != (v70 & 1))
          goto LABEL_95;
        v64 = v69;
        v49 = (_QWORD *)v124[0];
        if ((v68 & 1) == 0)
        {
LABEL_62:
          v49[(v64 >> 6) + 8] |= 1 << v64;
          v71 = (uint64_t *)(v49[6] + 16 * v64);
          *v71 = v57;
          v71[1] = v56;
          *(_DWORD *)(v49[7] + 4 * v64) = v61;
          v72 = v49[2];
          v73 = __OFADD__(v72, 1);
          v74 = v72 + 1;
          if (v73)
            goto LABEL_87;
          v49[2] = v74;
          swift_bridgeObjectRetain();
          goto LABEL_38;
        }
      }
      *(_DWORD *)(v49[7] + 4 * v64) = v61;
LABEL_38:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  sub_18C71227C();
  __break(1u);
LABEL_96:
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6D5088(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE66E50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18C6D50C8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_18C6D50FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18C6D5138(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_18C6D5180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18C6E4580();
  *a1 = result;
  return result;
}

uint64_t sub_18C6D51A4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t);
  uint64_t v35;
  void (*v36)(_QWORD *, char *, uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v48 = a6;
  v49 = a8;
  v46 = a5;
  v45 = a1;
  v53 = a10;
  v51 = a9;
  v52 = sub_18C711D84();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v13);
  v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v47 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (_QWORD *)((char *)v44 - v26);
  v54 = a7;
  v28 = a7;
  v30 = v29;
  sub_18C6D5138(v28, (uint64_t)v19, &qword_1EE0438E0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v30);
  v44[1] = a2;
  if (v31 == 1)
  {
    v55 = 0x65764F6563696F76;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v32 = v56;
    *v27 = v55;
    v27[1] = v32;
    v27[2] = 0;
    v27[3] = 0;
    v33 = v21;
    v34 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104);
    v35 = v30;
    v34(v27, *MEMORY[0x1E0CF2F50], v30);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  }
  else
  {
    v33 = v21;
    v36 = *(void (**)(_QWORD *, char *, uint64_t))(v21 + 32);
    v35 = v30;
    v36(v27, v19, v30);
  }
  v37 = v45;
  if (v46)
  {
    v46 = a4;
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0x65764F6563696F56;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v46 = v55;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE043930);
  v59 = v37 & 1;
  v38 = v35;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v47, v27, v35);
  v39 = v50;
  v41 = v52;
  v40 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v15, v53, v52);
  v57 = sub_18C711C70();
  v58 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v55);
  sub_18C711C64();
  v42 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  sub_18C6E87FC(v54, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v27, v38);
  return v42;
}

uint64_t sub_18C6D5518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t);
  uint64_t v35;
  void (*v36)(_QWORD *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v48 = a6;
  v49 = a8;
  v45 = a1;
  v46 = a5;
  v53 = a10;
  v51 = a9;
  v52 = sub_18C711D84();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v13);
  v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v47 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (_QWORD *)((char *)v44 - v26);
  v54 = a7;
  v28 = a7;
  v30 = v29;
  sub_18C6D5138(v28, (uint64_t)v19, &qword_1EE0438E0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v30);
  v44[1] = a2;
  if (v31 == 1)
  {
    v55 = 0x65764F6563696F76;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v32 = v56;
    *v27 = v55;
    v27[1] = v32;
    v27[2] = 0;
    v27[3] = 0;
    v33 = v21;
    v34 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104);
    v35 = v30;
    v34(v27, *MEMORY[0x1E0CF2F50], v30);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  }
  else
  {
    v33 = v21;
    v36 = *(void (**)(_QWORD *, char *, uint64_t))(v21 + 32);
    v35 = v30;
    v36(v27, v19, v30);
  }
  v37 = v45;
  if (v46)
  {
    v46 = a4;
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0x65764F6563696F56;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v46 = v55;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D20);
  v59 = v37;
  v38 = v35;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v47, v27, v35);
  v39 = v50;
  v41 = v52;
  v40 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v15, v53, v52);
  v57 = sub_18C711C70();
  v58 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v55);
  sub_18C711C64();
  v42 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  sub_18C6E87FC(v54, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v27, v38);
  return v42;
}

uint64_t sub_18C6D5880(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD, uint64_t);
  uint64_t v34;
  void (*v35)(_QWORD *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;

  v44 = a6;
  v45 = a9;
  v43 = a5;
  v51 = a4;
  v48 = a10;
  v49 = a8;
  v13 = sub_18C711D84();
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_18C711DA8();
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v27);
  v29 = (uint64_t *)((char *)&v42 - v28);
  v50 = a7;
  sub_18C6D5138(a7, (uint64_t)v20, &qword_1EE0438E0);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v42 = a1;
  if (v30 != 1)
  {
    v32 = v22;
    v35 = *(void (**)(_QWORD *, char *, uint64_t))(v22 + 32);
    v34 = v21;
    v35(v29, v20, v21);
    if (v43)
      goto LABEL_3;
LABEL_5:
    v52 = 0x65764F6563696F56;
    v53 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v51 = v52;
    goto LABEL_6;
  }
  v52 = 0x65764F6563696F76;
  v53 = 0xE900000000000072;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v31 = v53;
  *v29 = v52;
  v29[1] = v31;
  v29[2] = 0;
  v29[3] = 0;
  v32 = v22;
  v33 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104);
  v34 = v21;
  v33(v29, *MEMORY[0x1E0CF2F50], v21);
  sub_18C6E87FC((uint64_t)v20, &qword_1EE0438E0);
  if (!v43)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043928);
  v56 = a2;
  v36 = v32;
  (*(void (**)(char *, _QWORD *, uint64_t))(v32 + 16))(v26, v29, v34);
  v37 = v46;
  v38 = v47;
  v39 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v16, v48, v47);
  v54 = sub_18C711C70();
  v55 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v52);
  sub_18C711C64();
  v40 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  sub_18C6E87FC(v50, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v36 + 8))(v29, v34);
  return v40;
}

uint64_t sub_18C6D5BC4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t);
  uint64_t v35;
  void (*v36)(_QWORD *, char *, uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v48 = a6;
  v49 = a8;
  v46 = a5;
  v45 = a1;
  v53 = a10;
  v51 = a9;
  v52 = sub_18C711D84();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v13);
  v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v47 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (_QWORD *)((char *)v44 - v26);
  v54 = a7;
  v28 = a7;
  v30 = v29;
  sub_18C6D5138(v28, (uint64_t)v19, &qword_1EE0438E0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v30);
  v44[1] = a2;
  if (v31 == 1)
  {
    v55 = 0x65764F6563696F76;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v32 = v56;
    *v27 = v55;
    v27[1] = v32;
    v27[2] = 0;
    v27[3] = 0;
    v33 = v21;
    v34 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104);
    v35 = v30;
    v34(v27, *MEMORY[0x1E0CF2F50], v30);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  }
  else
  {
    v33 = v21;
    v36 = *(void (**)(_QWORD *, char *, uint64_t))(v21 + 32);
    v35 = v30;
    v36(v27, v19, v30);
  }
  v37 = v45;
  if (v46)
  {
    v46 = a4;
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0x65764F6563696F56;
    v56 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v46 = v55;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D10);
  v59 = v37;
  v38 = v35;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v47, v27, v35);
  v39 = v50;
  v41 = v52;
  v40 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v15, v53, v52);
  v57 = sub_18C711C70();
  v58 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v55);
  sub_18C711C64();
  v42 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  sub_18C6E87FC(v54, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v27, v38);
  return v42;
}

uint64_t sub_18C6D5F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t);
  uint64_t v35;
  void (*v36)(_QWORD *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v45 = a1;
  v46 = a5;
  v56 = a4;
  v53 = a8;
  v54 = a10;
  v50 = a6;
  v51 = a9;
  v52 = sub_18C711D84();
  v13 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v14);
  v48 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v47 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (uint64_t *)((char *)&v44 - v26);
  v55 = a7;
  v28 = a7;
  v30 = v29;
  sub_18C6D5138(v28, (uint64_t)v19, &qword_1EE0438E0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v30);
  v49 = v13;
  v44 = a2;
  if (v31 == 1)
  {
    v57 = 0x65764F6563696F76;
    v58 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v32 = v58;
    *v27 = v57;
    v27[1] = v32;
    v27[2] = 0;
    v27[3] = 0;
    v33 = v21;
    v34 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104);
    v35 = v30;
    v34(v27, *MEMORY[0x1E0CF2F50], v30);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  }
  else
  {
    v33 = v21;
    v36 = *(void (**)(_QWORD *, char *, uint64_t))(v21 + 32);
    v35 = v30;
    v36(v27, v19, v30);
  }
  v37 = v45;
  if (v46)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = 0x65764F6563696F56;
    v58 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v56 = v57;
  }
  __swift_instantiateConcreteTypeFromMangledName(a11);
  v61 = v37;
  v38 = v35;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v47, v27, v35);
  v39 = v49;
  v40 = v54;
  v41 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v54, v52);
  v59 = sub_18C711C70();
  v60 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v57);
  sub_18C711C64();
  v42 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  sub_18C6E87FC(v55, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v27, v38);
  return v42;
}

uint64_t sub_18C6D6294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v50 = a8;
  v51 = a4;
  v47 = a6;
  v53 = a5;
  v45 = a10;
  v49 = a9;
  v48 = sub_18C711D84();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v13);
  v43 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_18C711DA8();
  v24 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v42 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (uint64_t *)((char *)&v41 - v29);
  v46 = a7;
  sub_18C6D5138(a7, (uint64_t)v22, &qword_1EE0438E0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23);
  v52 = a1;
  v41 = a2;
  if (v31 == 1)
  {
    v54 = 0x65764F6563696F76;
    v55 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v32 = v55;
    *v30 = v54;
    v30[1] = v32;
    v30[2] = 0;
    v30[3] = 0;
    v33 = v24;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v30, *MEMORY[0x1E0CF2F50], v23);
    sub_18C6E87FC((uint64_t)v22, &qword_1EE0438E0);
  }
  else
  {
    v33 = v24;
    (*(void (**)(_QWORD *, char *, uint64_t))(v24 + 32))(v30, v22, v23);
  }
  v34 = v30;
  if (v53)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v54 = 0x65764F6563696F56;
    v55 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v51 = v54;
    v53 = v55;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D00);
  sub_18C6D5138(v52, (uint64_t)v18, &qword_1ECE67110);
  v35 = v33;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v42, v34, v23);
  v36 = v44;
  v37 = v45;
  v38 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v45, v48);
  v56 = sub_18C711C70();
  v57 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v54);
  sub_18C711C64();
  v39 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  sub_18C6E87FC(v46, &qword_1EE0438E0);
  sub_18C6E87FC(v52, &qword_1ECE67110);
  (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v34, v23);
  return v39;
}

uint64_t sub_18C6D6654()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
}

void sub_18C6D6660(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
}

uint64_t (*sub_18C6D666C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D66CC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18C6E5E84();
  *a1 = result;
  return result;
}

uint64_t sub_18C6D672C()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
}

void sub_18C6D6738(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
}

uint64_t (*sub_18C6D6744(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D67A4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D67E0()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
}

void sub_18C6D67EC(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
}

uint64_t (*sub_18C6D67F8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6858()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6894()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled);
}

void sub_18C6D68A0(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled);
}

uint64_t (*sub_18C6D68AC(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D690C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled);
  v2 = sub_18C711E14();

  return v2;
}

void sub_18C6D6948(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18C711DFC();

  *a2 = v4;
}

void sub_18C6D6998(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18C711E08();

}

uint64_t sub_18C6D69E4()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18C711DFC();

  return v3;
}

void sub_18C6D6A28()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18C711E08();

}

uint64_t (*sub_18C6D6A6C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6ACC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6B08()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation);
}

void sub_18C6D6B14(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation);
}

uint64_t (*sub_18C6D6B20(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6B80()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6BBC()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled);
}

void sub_18C6D6BC8(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled);
}

uint64_t (*sub_18C6D6BD4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6C34()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6C70()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
}

void sub_18C6D6C7C(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
}

uint64_t (*sub_18C6D6C88(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6CE8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation));
  v2 = sub_18C711E14();

  return v2;
}

double sub_18C6D6D24@<D0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  id v3;
  double result;
  double v5;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18C711DFC();

  result = v5;
  *a2 = v5;
  return result;
}

void sub_18C6D6D74(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18C711E08();

}

double sub_18C6D6DC0()
{
  uint64_t v0;
  id v1;
  double v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18C711DFC();

  return v3;
}

void sub_18C6D6E04()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18C711E08();

}

uint64_t (*sub_18C6D6E48(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6EA8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6EE4()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
}

void sub_18C6D6EF0(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
}

uint64_t (*sub_18C6D6EFC(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D6F5C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D6F98()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
}

void sub_18C6D6FA4(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
}

uint64_t (*sub_18C6D6FB0(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7010()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D704C()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode);
}

void sub_18C6D7058(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode);
}

uint64_t (*sub_18C6D7064(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D70C4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D7100()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode);
}

void sub_18C6D710C(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode);
}

uint64_t (*sub_18C6D7118(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7178()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D71B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a4;
  v28 = a5;
  v26 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_18C711D84();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v26 - v18;
  v29 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v20, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  *v10 = a2;
  v10[1] = a3;
  v10[2] = 0;
  v10[3] = 0;
  v21 = *MEMORY[0x1E0CF2F50];
  v22 = sub_18C711DA8();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v23 + 104))(v10, v21, v22);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v22);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v19, v11);
  v24 = sub_18C6D5F34(v26, 0, 0xE000000000000000, v27, v28, 2, (uint64_t)v10, 0, 0, (uint64_t)v16, &qword_1EE043D18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  return v24;
}

uint64_t sub_18C6D73BC()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode);
}

void sub_18C6D73C8(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode);
}

uint64_t (*sub_18C6D73D4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7434()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D7470(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (_QWORD *)((char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_18C711D84();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)v21 - v13;
  v21[1] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v15, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  *v5 = 0xD000000000000031;
  v5[1] = 0x800000018C7351E0;
  v5[2] = 0;
  v5[3] = 0;
  v16 = *MEMORY[0x1E0CF2F50];
  v17 = sub_18C711DA8();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 104))(v5, v16, v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v5, 0, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  v19 = sub_18C6D5BC4(a1, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018C7351A0, 2, (uint64_t)v5, 0, 0, (uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v19;
}

void sub_18C6D7684(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  id v3;
  char v4;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18C711DFC();

  *a2 = v4;
}

void sub_18C6D76D4(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18C711E08();

}

uint64_t sub_18C6D7720()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18C711DFC();

  return v3;
}

void sub_18C6D7764()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18C711E08();

}

uint64_t (*sub_18C6D77A8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7808()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D7844()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
}

void sub_18C6D7850(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
}

uint64_t (*sub_18C6D785C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D78BC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D78F8()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
}

void sub_18C6D7904(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
}

uint64_t (*sub_18C6D7910(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7970()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D79AC()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
}

void sub_18C6D79B8(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
}

uint64_t (*sub_18C6D79C4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7A24()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D7A60(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a4;
  v29 = a5;
  v27 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_18C711D84();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = &v26[-v18];
  v30 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v20, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  *v10 = a2;
  v10[1] = a3;
  v10[2] = 0;
  v10[3] = 0;
  v21 = *MEMORY[0x1E0CF2F50];
  v22 = sub_18C711DA8();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v23 + 104))(v10, v21, v22);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v22);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v16, v19, v11);
  v24 = sub_18C6D51A4(v27, 0, 0xE000000000000000, v28, v29, 2, (uint64_t)v10, 0, 0, (uint64_t)v16);
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v19, v11);
  return v24;
}

uint64_t sub_18C6D7C58()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
}

void sub_18C6D7C64(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
}

uint64_t (*sub_18C6D7C70(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7CD0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D7D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (_QWORD *)((char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_18C711D84();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)v21 - v13;
  v21[1] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v15, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  *v5 = 0xD000000000000028;
  v5[1] = 0x800000018C7350F0;
  v5[2] = 0;
  v5[3] = 0;
  v16 = *MEMORY[0x1E0CF2F50];
  v17 = sub_18C711DA8();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 104))(v5, v16, v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v5, 0, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  v19 = sub_18C6D5F34(a1, 0, 0xE000000000000000, 0xD00000000000002BLL, 0x800000018C7350C0, 2, (uint64_t)v5, 0, 0, (uint64_t)v11, &qword_1EE043D08);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v19;
}

void sub_18C6D7F30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v5;

  v5 = *(id *)(*a2 + *a5);
  sub_18C711E08();

}

uint64_t sub_18C6D7F78()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption);
}

void sub_18C6D7F84(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption);
}

uint64_t (*sub_18C6D7F90(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D7FF0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D802C()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
}

void sub_18C6D8038(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
}

uint64_t (*sub_18C6D8044(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D80A4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D80E0()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
}

void sub_18C6D80EC(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
}

uint64_t (*sub_18C6D80F8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8158()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8194()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
}

void sub_18C6D81A0(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
}

uint64_t (*sub_18C6D81AC(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D820C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8248()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
}

void sub_18C6D8254(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
}

uint64_t (*sub_18C6D8260(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D82C0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D82FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v2 = sub_18C711D84();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18C6D5138(a1, (uint64_t)v14, &qword_1ECE67110);
  v15 = sub_18C711DA8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v3, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  v16 = sub_18C6D6294((uint64_t)v14, 0xD000000000000017, 0x800000018C734E80, 0xD00000000000002DLL, 0x800000018C734EA0, 2, (uint64_t)v10, 0, 0, (uint64_t)v6);
  sub_18C6E87FC(a1, &qword_1ECE67110);
  return v16;
}

void sub_18C6D8500(_QWORD *a1)
{
  id v1;

  v1 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup));
  sub_18C711DFC();

}

uint64_t sub_18C6D854C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v15 - v10;
  sub_18C6D5138(a1, (uint64_t)&v15 - v10, &qword_1ECE67110);
  v12 = *(void **)(*a2 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup);
  sub_18C6D5138((uint64_t)v11, (uint64_t)v8, &qword_1ECE67110);
  v13 = v12;
  sub_18C711E08();

  return sub_18C6E87FC((uint64_t)v11, &qword_1ECE67110);
}

void sub_18C6D8628()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup));
  sub_18C711DFC();

}

uint64_t sub_18C6D8670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup);
  sub_18C6D5138(a1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1ECE67110);
  v7 = v6;
  sub_18C711E08();

  return sub_18C6E87FC(a1, &qword_1ECE67110);
}

uint64_t (*sub_18C6D8710(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8770()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D87AC()
{
  return sub_18C6D3270(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
}

void sub_18C6D87B8(uint64_t a1)
{
  sub_18C6D32BC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
}

uint64_t (*sub_18C6D87C4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8824()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8860()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId);
}

void sub_18C6D886C(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId);
}

uint64_t (*sub_18C6D8878(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D88D8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8914(int a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v2 = sub_18C711D84();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v23 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)v23 - v18;
  v20 = sub_18C711DA8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v23[1] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v3, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  sub_18C6D5138((uint64_t)v19, (uint64_t)v16, &qword_1EE0438E0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v2);
  v21 = sub_18C6D51A4(a1, 0xD000000000000018, 0x800000018C734E60, 0, 0, 2, (uint64_t)v16, 0, 0, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v2);
  sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  return v21;
}

uint64_t sub_18C6D8B2C()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled);
}

void sub_18C6D8B38(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled);
}

uint64_t (*sub_18C6D8B44(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8BA4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8BE0()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled);
}

void sub_18C6D8BEC(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled);
}

uint64_t (*sub_18C6D8BF8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8C58()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled);
  v2 = sub_18C711E14();

  return v2;
}

double sub_18C6D8C94@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _OWORD *a3@<X8>)
{
  id v4;
  double result;
  __int128 v6;

  v4 = *(id *)(*a1 + *a2);
  sub_18C711DFC();

  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_18C6D8CE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  id v6;

  v5 = *(void **)(*a2 + *a5);
  swift_bridgeObjectRetain();
  v6 = v5;
  sub_18C711E08();

}

uint64_t sub_18C6D8D2C()
{
  return sub_18C6D8D38(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage);
}

uint64_t sub_18C6D8D38(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;

  v2 = *(id *)(v1 + *a1);
  sub_18C711DFC();

  return v4;
}

void sub_18C6D8D78(uint64_t a1, uint64_t a2)
{
  sub_18C6D8D84(a1, a2, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage);
}

void sub_18C6D8D84(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  id v4;

  v4 = *(id *)(v3 + *a3);
  sub_18C711E08();

}

uint64_t (*sub_18C6D8DC4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D8E24()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D8E60(int a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v2 = sub_18C711D84();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v24 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)v24 - v18;
  v20 = sub_18C711DA8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043CE8);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18C7379D0;
  sub_18C711D78();
  v24[1] = v21;
  sub_18C6D2488(&qword_1EE043910, 255, v3, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  sub_18C6D5138((uint64_t)v19, (uint64_t)v16, &qword_1EE0438E0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v2);
  v22 = sub_18C6D51A4(a1, 0x4570556B61657073, 0xEE0064656C62616ELL, 0, 0, 2, (uint64_t)v16, 0, 0, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v2);
  sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  return v22;
}

uint64_t sub_18C6D90B8()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled);
}

void sub_18C6D90C4(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled);
}

uint64_t (*sub_18C6D90D0(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6D9130()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled);
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6D916C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(id *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  v10 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v11 = v24;
  v12 = objc_retain(*(id *)(v2
                          + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier));
  v13 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v14 = v25;
  if (v25)
  {
    v15 = *(_QWORD *)(v11 + 16);
    if (v15)
    {
      v23 = a1;
      v16 = v24;
      v17 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v18 = *(_QWORD *)(v5 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_18C6D9354(v17, (uint64_t)v8);
        v19 = *v8 == v16 && v14 == v8[1];
        if (v19 || (sub_18C712264() & 1) != 0)
          break;
        sub_18C6DC51C((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
        v17 += v18;
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          a1 = v23;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      v21 = v23;
      sub_18C6D9398((uint64_t)v8, v23);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
    }
    else
    {
LABEL_11:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
  }
}

uint64_t sub_18C6D9354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6D9398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6D93DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v2[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6D945C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[4];
  v1 = v0[5];
  v3 = objc_retain(*(id *)(v2
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  v4 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v5 = v0[2];
  v0[7] = v5;
  v6 = sub_18C711A90();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  v8 = (_QWORD *)swift_task_alloc();
  v0[8] = v8;
  *v8 = v0;
  v8[1] = sub_18C6D9538;
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v0[6], v0[5], v7, 0, v5);
}

uint64_t sub_18C6D9538()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  return swift_task_switch();
}

uint64_t sub_18C6D95A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = sub_18C711D54();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 24), v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_18C6D9634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v4[12] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B40);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B58);
  v4[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v5 = sub_18C711AF0();
  v4[25] = v5;
  v4[26] = *(_QWORD *)(v5 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v6 = sub_18C711A90();
  v4[32] = v6;
  v4[33] = *(_QWORD *)(v6 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v7 = sub_18C711C28();
  v4[39] = v7;
  v4[40] = *(_QWORD *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v4[44] = swift_task_alloc();
  v8 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v4[45] = v8;
  v4[46] = *(_QWORD *)(v8 - 8);
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  v9 = sub_18C711D54();
  v4[49] = v9;
  v4[50] = *(_QWORD *)(v9 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v10 = sub_18C711B08();
  v4[54] = v10;
  v4[55] = *(_QWORD *)(v10 - 8);
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6D996C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 472) = *(_QWORD *)(*(_QWORD *)(v0 + 88)
                                    + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  sub_18C711B8C();
  sub_18C6D2488(&qword_1EE043B50, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DBEDC0], MEMORY[0x1E0DBEDD0]);
  sub_18C711F58();
  return swift_task_switch();
}

uint64_t sub_18C6D99F4()
{
  sub_18C711B5C();
  return swift_task_switch();
}

uint64_t sub_18C6D9A34()
{
  _QWORD *v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  sub_18C711B38();
  sub_18C711AA8();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v1 = (_QWORD *)swift_task_alloc();
  v0[60] = v1;
  *v1 = v0;
  v1[1] = sub_18C6D9AE0;
  return sub_18C6D93DC(v0[53]);
}

uint64_t sub_18C6D9AE0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6D9B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t (*v29)(_QWORD, uint64_t, uint64_t);
  uint64_t (*v30)(_QWORD);

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 352);
  sub_18C6D916C(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 352), &qword_1EE043B48);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 360);
    sub_18C6D9398(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 384));
    *(_DWORD *)(v0 + 584) = *(_DWORD *)(v4 + 20);
    v5 = sub_18C711D3C();
    *(_QWORD *)(v0 + 488) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      v29 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 496) = v9;
      *v9 = v0;
      v9[1] = sub_18C6D9FE4;
      return v29(*(_QWORD *)(v0 + 304), v7, v8);
    }
    sub_18C6DC51C(*(_QWORD *)(v0 + 384), (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  }
  v11 = *(_QWORD *)(v0 + 120);
  sub_18C6D5138(*(_QWORD *)(v0 + 80), v11, &qword_1EE042B58);
  v12 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 128);
  if (v13 == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 120), &qword_1EE042B58);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v16, 1, 1, v14);
LABEL_9:
    sub_18C6E87FC(*(_QWORD *)(v0 + 128), &qword_1EE043B28);
    v30 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 504) = v18;
    *v18 = v0;
    v18[1] = sub_18C6DA64C;
    return v30(*(_QWORD *)(v0 + 456));
  }
  sub_18C6D5138(v17 + *(int *)(v12 + 72), *(_QWORD *)(v0 + 128), &qword_1EE043B28);
  sub_18C6DC51C(v17, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.Activity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
    goto LABEL_9;
  v19 = *(_QWORD *)(v0 + 464);
  v20 = *(_QWORD *)(v0 + 432);
  v21 = *(_QWORD *)(v0 + 440);
  v22 = *(_QWORD *)(v0 + 416);
  v23 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 392);
  v25 = *(_QWORD *)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 32))(v22, *(_QWORD *)(v0 + 128), v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v23, v24);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  VoiceSelection.fallingBack(to:)(v26, v27);
  sub_18C6E87FC(v26, &qword_1EE043B28);
  v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28(v22, v24);
  v28(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6D9FE4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_18C6DA040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD);
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6DC51C(*(_QWORD *)(v0 + 384), (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    v4 = &qword_1EE042CE8;
LABEL_5:
    sub_18C6E87FC(v3, v4);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v0 + 264);
  v51 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 344), v3, v1);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v51);
  v3 = *(_QWORD *)(v0 + 192);
  if (v10 == 1)
  {
    v11 = *(_QWORD *)(v0 + 384);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
    sub_18C6DC51C(v11, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    v4 = &qword_1EE042CE0;
    goto LABEL_5;
  }
  v21 = *(_QWORD *)(v0 + 280);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 32))(v21, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 256));
  v22 = sub_18C6DB858();
  LOBYTE(v21) = sub_18C6DBD2C(v21, v22);
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 424);
    v50 = *(_QWORD *)(v0 + 432);
    v53 = *(_QWORD *)(v0 + 464);
    v24 = *(_QWORD *)(v0 + 392);
    v25 = *(_QWORD *)(v0 + 400);
    v26 = *(_QWORD *)(v0 + 384);
    v48 = *(_QWORD *)(v0 + 344);
    v49 = *(_QWORD *)(v0 + 440);
    v46 = *(_QWORD *)(v0 + 320);
    v47 = *(_QWORD *)(v0 + 312);
    v45 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 256);
    v28 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v23, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
    VoiceSelection.fallingBack(to:)(v29, v30);
    sub_18C6E87FC(v29, &qword_1EE043B28);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v45, v27);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    sub_18C6DC51C(v26, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v53, v50);
    goto LABEL_13;
  }
  v41 = *(_QWORD *)(v0 + 384);
  v42 = *(_QWORD *)(v0 + 344);
  v43 = *(_QWORD *)(v0 + 312);
  v44 = *(_QWORD *)(v0 + 320);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
  sub_18C6DC51C(v41, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
LABEL_6:
  v12 = *(_QWORD *)(v0 + 120);
  sub_18C6D5138(*(_QWORD *)(v0 + 80), v12, &qword_1EE042B58);
  v13 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  v15 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 128);
  if (v14 == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 120), &qword_1EE042B58);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
LABEL_9:
    sub_18C6E87FC(*(_QWORD *)(v0 + 128), &qword_1EE043B28);
    v52 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 504) = v19;
    *v19 = v0;
    v19[1] = sub_18C6DA64C;
    return v52(*(_QWORD *)(v0 + 456));
  }
  sub_18C6D5138(v18 + *(int *)(v13 + 72), *(_QWORD *)(v0 + 128), &qword_1EE043B28);
  sub_18C6DC51C(v18, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.Activity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1)
    goto LABEL_9;
  v31 = *(_QWORD *)(v0 + 464);
  v32 = *(_QWORD *)(v0 + 432);
  v33 = *(_QWORD *)(v0 + 440);
  v34 = *(_QWORD *)(v0 + 416);
  v35 = *(_QWORD *)(v0 + 424);
  v36 = *(_QWORD *)(v0 + 392);
  v37 = *(_QWORD *)(v0 + 400);
  v38 = *(_QWORD *)(v0 + 136);
  v39 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 32))(v34, *(_QWORD *)(v0 + 128), v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v38, v35, v36);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
  VoiceSelection.fallingBack(to:)(v38, v39);
  sub_18C6E87FC(v38, &qword_1EE043B28);
  v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v40(v34, v36);
  v40(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6DA64C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6DA6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, _QWORD);
  uint64_t (*v47)(_QWORD, uint64_t, uint64_t);

  v44 = *(_QWORD *)(v0 + 264);
  v45 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 232);
  v1 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 112);
  v43 = *(_QWORD *)(v0 + 96);
  sub_18C711AFC();
  sub_18C711AE4();
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 512) = v8;
  v8(v1, v4);
  sub_18C711AFC();
  sub_18C711AE4();
  v8(v2, v4);
  v9 = v7 + *(int *)(v43 + 48);
  sub_18C6D5138(v5, v7, &qword_1EE042CE0);
  sub_18C6D5138(v6, v9, &qword_1EE042CE0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  *(_QWORD *)(v0 + 520) = v10;
  v11 = v10(v7, 1, v45);
  v12 = *(_QWORD *)(v0 + 256);
  if (v11 == 1)
  {
    v13 = *(_QWORD *)(v0 + 184);
    sub_18C6E87FC(*(_QWORD *)(v0 + 176), &qword_1EE042CE0);
    sub_18C6E87FC(v13, &qword_1EE042CE0);
    if (v10(v9, 1, v12) == 1)
    {
      sub_18C6E87FC(*(_QWORD *)(v0 + 112), &qword_1EE042CE0);
LABEL_13:
      v37 = *(_QWORD *)(v0 + 464);
      v38 = *(_QWORD *)(v0 + 432);
      v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v39(*(_QWORD *)(v0 + 456), v38);
      v39(v37, v38);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 392));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_6;
  }
  sub_18C6D5138(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 168), &qword_1EE042CE0);
  if (v10(v9, 1, v12) == 1)
  {
    v14 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 168);
    sub_18C6E87FC(*(_QWORD *)(v0 + 176), &qword_1EE042CE0);
    sub_18C6E87FC(v16, &qword_1EE042CE0);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
LABEL_6:
    sub_18C6E87FC(*(_QWORD *)(v0 + 112), &qword_1EE043B40);
    goto LABEL_7;
  }
  v29 = *(_QWORD *)(v0 + 264);
  v28 = *(_QWORD *)(v0 + 272);
  v30 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 184);
  v33 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v28, v9, v30);
  sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
  v35 = sub_18C711E74();
  v36 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v36(v28, v30);
  sub_18C6E87FC(v32, &qword_1EE042CE0);
  sub_18C6E87FC(v31, &qword_1EE042CE0);
  v36(v33, v30);
  sub_18C6E87FC(v34, &qword_1EE042CE0);
  if ((v35 & 1) != 0)
    goto LABEL_13;
LABEL_7:
  v18 = objc_retain(*(id *)(*(_QWORD *)(v0 + 88)
                          + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors));
  sub_18C711DFC();

  v19 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 528) = v19;
  v20 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v0 + 536) = v20;
  if (v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(v0 + 368);
    *(_DWORD *)(v0 + 588) = *(_DWORD *)(v22 + 80);
    *(_QWORD *)(v0 + 544) = *(_QWORD *)(v22 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 552) = v21;
      v23 = *(_QWORD *)(v0 + 360);
      sub_18C6D9354(*(_QWORD *)(v0 + 528)+ ((*(unsigned __int8 *)(v0 + 588) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 588))+ *(_QWORD *)(v0 + 544) * v21, *(_QWORD *)(v0 + 376));
      *(_DWORD *)(v0 + 592) = *(_DWORD *)(v23 + 20);
      v24 = sub_18C711D3C();
      *(_QWORD *)(v0 + 560) = v25;
      if (v25)
        break;
      sub_18C6DC51C(*(_QWORD *)(v0 + 376), (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
      v21 = *(_QWORD *)(v0 + 552) + 1;
      if (v21 == *(_QWORD *)(v0 + 536))
        goto LABEL_11;
    }
    v40 = v24;
    v41 = v25;
    v47 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 568) = v42;
    *v42 = v0;
    v42[1] = sub_18C6DACAC;
    return v47(*(_QWORD *)(v0 + 296), v40, v41);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v46 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 576) = v26;
    *v26 = v0;
    v26[1] = sub_18C6DB43C;
    return v46(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 464));
  }
}

uint64_t sub_18C6DACAC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_18C6DAD0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  int v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t (*v58)(_QWORD, _QWORD);
  uint64_t (*v59)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6DC51C(*(_QWORD *)(v0 + 376), (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    sub_18C6E87FC(v3, &qword_1EE042CE8);
    goto LABEL_12;
  }
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  v49 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  v4 = *(_QWORD *)(v0 + 448);
  v46 = *(_QWORD *)(v0 + 440);
  v47 = *(_QWORD *)(v0 + 432);
  v54 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v45 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 104);
  v52 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 336), v3, v1);
  sub_18C711BB0();
  sub_18C711AFC();
  v9 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v9(v4, v47);
  sub_18C711AE4();
  v49(v5, v7);
  sub_18C711AFC();
  sub_18C711AE4();
  v49(v6, v7);
  v10 = v8 + *(int *)(v52 + 48);
  sub_18C6D5138(v45, v8, &qword_1EE042CE0);
  sub_18C6D5138(v48, v10, &qword_1EE042CE0);
  v11 = v56(v8, 1, v54);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  v13 = *(_QWORD *)(v0 + 256);
  if (v11 == 1)
  {
    v14 = *(_QWORD *)(v0 + 160);
    sub_18C6E87FC(*(_QWORD *)(v0 + 152), &qword_1EE042CE0);
    sub_18C6E87FC(v14, &qword_1EE042CE0);
    if (v12(v10, 1, v13) == 1)
    {
      sub_18C6E87FC(*(_QWORD *)(v0 + 104), &qword_1EE042CE0);
LABEL_10:
      v55 = *(_QWORD *)(v0 + 456);
      v57 = *(_QWORD *)(v0 + 464);
      v29 = *(_QWORD *)(v0 + 424);
      v28 = *(_QWORD *)(v0 + 432);
      v30 = *(_QWORD *)(v0 + 392);
      v31 = *(_QWORD *)(v0 + 400);
      v32 = *(_QWORD *)(v0 + 376);
      v50 = *(_QWORD *)(v0 + 320);
      v51 = *(_QWORD *)(v0 + 312);
      v53 = *(_QWORD *)(v0 + 336);
      v33 = *(_QWORD *)(v0 + 136);
      v34 = *(_QWORD *)(v0 + 64);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v33, v29, v30);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v30);
      VoiceSelection.fallingBack(to:)(v33, v34);
      sub_18C6E87FC(v33, &qword_1EE043B28);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v53, v51);
      sub_18C6DC51C(v32, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
      v9(v55, v28);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
      v9(v57, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_8;
  }
  sub_18C6D5138(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 144), &qword_1EE042CE0);
  if (v12(v10, 1, v13) == 1)
  {
    v15 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 144);
    sub_18C6E87FC(*(_QWORD *)(v0 + 152), &qword_1EE042CE0);
    sub_18C6E87FC(v17, &qword_1EE042CE0);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
LABEL_8:
    sub_18C6E87FC(*(_QWORD *)(v0 + 104), &qword_1EE043B40);
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v10, v21);
  sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
  v26 = sub_18C711E74();
  v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v27(v19, v21);
  sub_18C6E87FC(v23, &qword_1EE042CE0);
  sub_18C6E87FC(v22, &qword_1EE042CE0);
  v27(v24, v21);
  sub_18C6E87FC(v25, &qword_1EE042CE0);
  if ((v26 & 1) != 0)
    goto LABEL_10;
LABEL_11:
  v36 = *(_QWORD *)(v0 + 376);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
  sub_18C6DC51C(v36, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
LABEL_12:
  v37 = *(_QWORD *)(v0 + 552) + 1;
  if (v37 == *(_QWORD *)(v0 + 536))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    v58 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
    v41 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 576) = v41;
    *v41 = v0;
    v41[1] = sub_18C6DB43C;
    return v58(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 464));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 552) = v37;
      v38 = *(_QWORD *)(v0 + 360);
      sub_18C6D9354(*(_QWORD *)(v0 + 528)+ ((*(unsigned __int8 *)(v0 + 588) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 588))+ *(_QWORD *)(v0 + 544) * v37, *(_QWORD *)(v0 + 376));
      *(_DWORD *)(v0 + 592) = *(_DWORD *)(v38 + 20);
      v39 = sub_18C711D3C();
      *(_QWORD *)(v0 + 560) = v40;
      if (v40)
        break;
      sub_18C6DC51C(*(_QWORD *)(v0 + 376), (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
      v37 = *(_QWORD *)(v0 + 552) + 1;
      if (v37 == *(_QWORD *)(v0 + 536))
        goto LABEL_15;
    }
    v42 = v39;
    v43 = v40;
    v59 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
    v44 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 568) = v44;
    *v44 = v0;
    v44[1] = sub_18C6DACAC;
    return v59(*(_QWORD *)(v0 + 296), v42, v43);
  }
}

uint64_t sub_18C6DB43C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6DB490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  v5 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 432);
  if (v4 == 1)
  {
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
    v7(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
    v7(v5, v6);
    sub_18C6E87FC(v3, &qword_1EE042CE8);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 392));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 424);
    v19 = *(_QWORD *)(v0 + 456);
    v20 = *(_QWORD *)(v0 + 464);
    v9 = *(_QWORD *)(v0 + 392);
    v8 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 440);
    (*(void (**)(void))(v1 + 32))();
    sub_18C711BA4();
    sub_18C711D30();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v15, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    VoiceSelection.fallingBack(to:)(v10, v16);
    sub_18C6E87FC(v10, &qword_1EE043B28);
    v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v11(v14, v9);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v17, v2);
    v12 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v12(v19, v6);
    v11(v15, v9);
    v12(v20, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_18C6DB858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  MEMORY[0x1E0C80A78](v0, v1);
  v66 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_18C711AF0();
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v63 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_18C711A90();
  v7 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  v68 = v7;
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v60 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v59 = (uint64_t)&v56 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v58 = (char *)&v56 - v15;
  v16 = sub_18C711B08();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_18C711C1C();
  v26 = *(_QWORD *)(v25 + 56);
  v61 = v25 + 56;
  v27 = 1 << *(_BYTE *)(v25 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v62 = (unint64_t)(v27 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v31 = 0;
  v32 = MEMORY[0x1E0DEE9E8];
  v56 = v24;
  v57 = result;
  while (1)
  {
    if (v29)
    {
      v33 = __clz(__rbit64(v29));
      v34 = (v29 - 1) & v29;
      v35 = v33 | (v31 << 6);
      goto LABEL_26;
    }
    v36 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v36 >= v62)
      goto LABEL_29;
    v37 = *(_QWORD *)(v61 + 8 * v36);
    ++v31;
    if (!v37)
    {
      v31 = v36 + 1;
      if (v36 + 1 >= v62)
        goto LABEL_29;
      v37 = *(_QWORD *)(v61 + 8 * v31);
      if (!v37)
      {
        v31 = v36 + 2;
        if (v36 + 2 >= v62)
          goto LABEL_29;
        v37 = *(_QWORD *)(v61 + 8 * v31);
        if (!v37)
        {
          v31 = v36 + 3;
          if (v36 + 3 >= v62)
            goto LABEL_29;
          v37 = *(_QWORD *)(v61 + 8 * v31);
          if (!v37)
          {
            v31 = v36 + 4;
            if (v36 + 4 >= v62)
              goto LABEL_29;
            v37 = *(_QWORD *)(v61 + 8 * v31);
            if (!v37)
              break;
          }
        }
      }
    }
LABEL_25:
    v34 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v31 << 6);
LABEL_26:
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v24, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v17 + 72) * v35, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v24, 0, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, v16) == 1)
      goto LABEL_30;
    v69 = v34;
    v70 = v31;
    v39 = v32;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v24, v16);
    v40 = v63;
    sub_18C711AFC();
    v41 = v66;
    sub_18C711AE4();
    v42 = (uint64_t)v41;
    v44 = v67;
    v43 = v68;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v65);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1, v44) == 1)
    {
      sub_18C6E87FC(v42, &qword_1EE042CE0);
      swift_bridgeObjectRetain();
      v32 = v39;
    }
    else
    {
      v46 = v67;
      v45 = v68;
      v47 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v58, v42, v67);
      v71 = v39;
      v48 = v17;
      v49 = v16;
      v50 = v20;
      v51 = v60;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v60, v47, v46);
      swift_bridgeObjectRetain();
      v52 = v59;
      v53 = v51;
      v20 = v50;
      v16 = v49;
      v17 = v48;
      sub_18C6E2088(v59, v53);
      v54 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v25 = v57;
      v54(v52, v46);
      v55 = v46;
      v24 = v56;
      v54((uint64_t)v47, v55);
      v32 = v71;
    }
    v29 = v69;
    v31 = v70;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    result = swift_bridgeObjectRelease();
  }
  v38 = v36 + 5;
  if (v38 >= v62)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, 1, 1, v16);
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    return v32;
  }
  v37 = *(_QWORD *)(v61 + 8 * v38);
  if (v37)
  {
    v31 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    v31 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v31 >= v62)
      goto LABEL_29;
    v37 = *(_QWORD *)(v61 + 8 * v31);
    ++v38;
    if (v37)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_18C6DBD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_18C711A90();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]), v7 = sub_18C711E5C(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v13 = sub_18C711E74();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t VoiceSelection.fallingBack(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v65 = (uint64_t)&v64 - v11;
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v64 = (uint64_t)&v64 - v14;
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v70 = (char *)&v64 - v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v68 = (uint64_t)&v64 - v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v69 = (char *)&v64 - v23;
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v67 = (uint64_t)&v64 - v26;
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v30 = (char *)&v64 - v29;
  v32 = MEMORY[0x1E0C80A78](v28, v31);
  v34 = (char *)&v64 - v33;
  MEMORY[0x1E0C80A78](v32, v35);
  v37 = (char *)&v64 - v36;
  v38 = sub_18C711D54();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  v71 = a2;
  v40(a2, v2, v38);
  v41 = sub_18C711CE8();
  v42 = a1;
  sub_18C6D5138(a1, (uint64_t)v37, &qword_1EE043B28);
  if ((v41 & 0x100000000) != 0)
  {
    sub_18C6D5138((uint64_t)v37, (uint64_t)v34, &qword_1EE043B28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38) == 1)
    {
      v43 = v39;
      v44 = v38;
      sub_18C6E87FC((uint64_t)v37, &qword_1EE043B28);
      sub_18C6E87FC((uint64_t)v34, &qword_1EE043B28);
      LOBYTE(v45) = 1;
    }
    else
    {
      v45 = ((unint64_t)sub_18C711CE8() >> 32) & 1;
      sub_18C6E87FC((uint64_t)v37, &qword_1EE043B28);
      v43 = v39;
      v46 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44 = v38;
      v46(v34, v38);
    }
  }
  else
  {
    v43 = v39;
    v44 = v38;
    sub_18C6E87FC((uint64_t)v37, &qword_1EE043B28);
    LOBYTE(v45) = 0;
  }
  v74 = v45;
  sub_18C711CF4();
  v47 = sub_18C711D00();
  sub_18C6D5138(v42, (uint64_t)v30, &qword_1EE043B28);
  if ((v47 & 0x100000000) != 0)
  {
    v50 = v67;
    sub_18C6D5138((uint64_t)v30, v67, &qword_1EE043B28);
    v49 = v43;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v50, 1, v44) == 1)
    {
      sub_18C6E87FC((uint64_t)v30, &qword_1EE043B28);
      sub_18C6E87FC(v50, &qword_1EE043B28);
      LOBYTE(v48) = 1;
    }
    else
    {
      v48 = ((unint64_t)sub_18C711D00() >> 32) & 1;
      sub_18C6E87FC((uint64_t)v30, &qword_1EE043B28);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v50, v44);
    }
  }
  else
  {
    sub_18C6E87FC((uint64_t)v30, &qword_1EE043B28);
    LOBYTE(v48) = 0;
    v49 = v43;
  }
  v52 = (uint64_t)v69;
  v51 = (uint64_t)v70;
  v73 = v48;
  sub_18C711D0C();
  v53 = sub_18C711CD0();
  sub_18C6D5138(v42, v52, &qword_1EE043B28);
  if ((v53 & 0x100000000) != 0)
  {
    v55 = v68;
    sub_18C6D5138(v52, v68, &qword_1EE043B28);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v55, 1, v44) == 1)
    {
      sub_18C6E87FC(v52, &qword_1EE043B28);
      sub_18C6E87FC(v55, &qword_1EE043B28);
      LOBYTE(v54) = 1;
    }
    else
    {
      v54 = ((unint64_t)sub_18C711CD0() >> 32) & 1;
      sub_18C6E87FC(v52, &qword_1EE043B28);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v55, v44);
    }
  }
  else
  {
    sub_18C6E87FC(v52, &qword_1EE043B28);
    LOBYTE(v54) = 0;
  }
  v72 = v54;
  sub_18C711CDC();
  v56 = sub_18C711D18();
  sub_18C6D5138(v42, v51, &qword_1EE043B28);
  if (v56)
  {
    sub_18C6E87FC(v51, &qword_1EE043B28);
  }
  else
  {
    v57 = v64;
    sub_18C6D5138(v51, v64, &qword_1EE043B28);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v57, 1, v44) == 1)
    {
      sub_18C6E87FC(v51, &qword_1EE043B28);
      sub_18C6E87FC(v57, &qword_1EE043B28);
    }
    else
    {
      sub_18C711D18();
      sub_18C6E87FC(v51, &qword_1EE043B28);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v57, v44);
    }
  }
  sub_18C711D24();
  sub_18C711D3C();
  v59 = v58;
  result = swift_bridgeObjectRelease();
  if (!v59)
  {
    v61 = v65;
    sub_18C6D5138(v42, v65, &qword_1EE043B28);
    v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v62(v61, 1, v44) == 1)
    {
      sub_18C6E87FC(v61, &qword_1EE043B28);
    }
    else
    {
      sub_18C711D3C();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v61, v44);
    }
    v63 = (uint64_t)v66;
    sub_18C711D48();
    sub_18C6D5138(v42, v63, &qword_1EE043B28);
    if (v62(v63, 1, v44) == 1)
    {
      sub_18C6E87FC(v63, &qword_1EE043B28);
    }
    else
    {
      sub_18C711CAC();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v63, v44);
    }
    return sub_18C711CB8();
  }
  return result;
}

uint64_t sub_18C6DC51C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_18C6DC558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  void *v12;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE *v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B58);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_retain(*(id *)(v0
                          + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  v12 = (void *)sub_18C711E14();

  sub_18C711E2C();
  sub_18C711B8C();
  v15 = sub_18C711B80();
  v16 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B68);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0DF07B8], v1);
  sub_18C711FE8();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_18C6DC6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t sub_18C6DC6DC()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  v3 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v4 = v0[2];
  v0[6] = v4;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  v6 = (_QWORD *)swift_task_alloc();
  v0[7] = v6;
  *v6 = v0;
  v6[1] = sub_18C6DC78C;
  return Dictionary<>.speechVoiceIdentifier(forLanguage:withResolver:exists:)(v0[3], v0[4], v5, 0, v4);
}

uint64_t sub_18C6DC78C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_18C6DC924(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18C711EA4();
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_18C6D36D0;
  v9[4] = v7;
  v9[5] = v8;
  v9[3] = a1;
  return swift_task_switch();
}

uint64_t sub_18C6DC9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  return swift_task_switch();
}

uint64_t sub_18C6DC9F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  v3 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v0[11] = (uint64_t)v3;
  v4 = v3;
  v0[12] = sub_18C711DF0();
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_18C6DCA88;
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v0[6], v0[7], v0[8], v0[9], v2);
}

uint64_t sub_18C6DCA88()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  void *v3;
  uint64_t v5;

  v1 = *v0 + 16;
  v2 = *(void (**)(uint64_t, _QWORD))(*v0 + 96);
  v3 = *(void **)(*v0 + 88);
  v5 = *v0;
  swift_task_dealloc();
  v2(v1, 0);

  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_18C6DCC28(uint64_t a1, int a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4[6] = a4;
  v4[7] = _Block_copy(aBlock);
  if (a1)
  {
    v7 = sub_18C711EA4();
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v4[8] = v7;
  v4[9] = v8;
  v4[10] = sub_18C711EA4();
  v4[11] = v9;
  v10 = a4;
  return swift_task_switch();
}

uint64_t sub_18C6DCCAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = v0[6];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  v3 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v0[12] = v3;
  v4 = v3;
  v0[13] = sub_18C711DF0();
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = v5;
  *v5 = v0;
  v5[1] = sub_18C6DCD44;
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v0[8], v0[9], v0[10], v0[11], v2);
}

uint64_t sub_18C6DCD44()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  uint64_t v7;

  v1 = *v0 + 16;
  v2 = *(void (**)(uint64_t, _QWORD))(*v0 + 104);
  v3 = *(void **)(*v0 + 96);
  v5 = *(void **)(*v0 + 48);
  v4 = *(void (***)(_QWORD))(*v0 + 56);
  v7 = *v0;
  swift_task_dealloc();
  v2(v1, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4[2](v4);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_18C6DCDEC(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void (*v53)(_QWORD *, _QWORD);
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void (*v62)(_QWORD *, _QWORD);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[4];

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v18 = (char *)&v63 - v17;
  v20 = MEMORY[0x1E0C80A78](v16, v19);
  v67 = (char *)&v63 - v21;
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v63 - v23;
  v25 = sub_18C711A90();
  v68 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)&v63 - v31;
  swift_bridgeObjectRetain();
  v69 = v32;
  sub_18C711A9C();
  if (!a2)
    goto LABEL_10;
  swift_bridgeObjectRetain();
  if (sub_18C711EC8() < 1)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    v46 = v68;
    v47 = (uint64_t)v29;
    v48 = v29;
    v49 = (uint64_t)v69;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v48, v69, v25);
    v50 = sub_18C711D54();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v14, 1, 1, v50);
    v51 = (uint64_t)v14;
    v52 = objc_retain(*(id *)(v70
                            + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
    v53 = (void (*)(_QWORD *, _QWORD))sub_18C711DF0();
    sub_18C6F5FA0(v51, v47);
    v53(v71, 0);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v49, v25);
  }
  v64 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
  v33 = objc_retain(*(id *)(v70
                          + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  sub_18C711DFC();

  v34 = v71[0];
  v35 = *(_QWORD *)(v71[0] + 16);
  v65 = v14;
  v66 = v25;
  v63 = a1;
  if (v35 && (v36 = sub_18C6F9344((uint64_t)v69), (v37 & 1) != 0))
  {
    v38 = v36;
    v39 = *(_QWORD *)(v34 + 56);
    v40 = sub_18C711D54();
    v41 = *(_QWORD *)(v40 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v24, v39 + *(_QWORD *)(v41 + 72) * v38, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v24, 0, 1, v40);
  }
  else
  {
    v40 = sub_18C711D54();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v24, 1, 1, v40);
  }
  v42 = (uint64_t)v29;
  v43 = (uint64_t)v67;
  swift_bridgeObjectRelease();
  sub_18C6D5138((uint64_t)v24, (uint64_t)v18, &qword_1EE043B28);
  sub_18C711D54();
  v44 = *(_QWORD *)(v40 - 8);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v45(v18, 1, v40) == 1)
  {
    swift_bridgeObjectRetain();
    LOBYTE(v71[0]) = 1;
    sub_18C711D30();
    sub_18C6E87FC((uint64_t)v18, &qword_1EE043B28);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v43, v18, v40);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v43, 0, 1, v40);
  sub_18C6E2020(v43, (uint64_t)v24);
  v55 = v45(v24, 1, v40);
  v56 = v66;
  if (v55)
    swift_bridgeObjectRelease();
  else
    sub_18C711D48();
  v57 = v68;
  v58 = v64;
  if (a4 > 0.0 && !v45(v24, 1, v40))
  {
    LOBYTE(v71[0]) = 0;
    sub_18C711D0C();
  }
  if (a3 > 0.0 && !v45(v24, 1, v40))
  {
    LOBYTE(v71[0]) = 0;
    sub_18C711CDC();
  }
  if (a5 > 0.0 && !v45(v24, 1, v40))
  {
    LOBYTE(v71[0]) = 0;
    sub_18C711CF4();
  }
  v59 = (uint64_t)v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v42, v69, v56);
  v60 = (uint64_t)v65;
  sub_18C6D5138((uint64_t)v24, (uint64_t)v65, &qword_1EE043B28);
  v61 = *(id *)(v70 + v58);
  v62 = (void (*)(_QWORD *, _QWORD))sub_18C711DF0();
  sub_18C6F5FA0(v60, v42);
  v62(v71, 0);

  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v56);
  return sub_18C6E87FC((uint64_t)v24, &qword_1EE043B28);
}

uint64_t sub_18C6DD3DC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6DD438()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18C6D916C(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_18C6DD48C;
  return sub_18C6DD764(*(_QWORD *)(v0 + 24));
}

uint64_t sub_18C6DD48C(float a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 24);
  v5 = *v1;
  swift_task_dealloc();
  sub_18C6E87FC(v3, &qword_1EE043B48);
  swift_task_dealloc();
  return (*(uint64_t (**)(float))(v5 + 8))(a1);
}

uint64_t sub_18C6DD610(const void *a1, void *a2)
{
  _QWORD *v2;
  id v5;

  v2[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  v5 = a2;
  return swift_task_switch();
}

uint64_t sub_18C6DD684()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18C6D916C(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_18C6DD6D8;
  return sub_18C6DD764(*(_QWORD *)(v0 + 24));
}

uint64_t sub_18C6DD6D8(float a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, float);
  uint64_t v4;
  void *v5;
  uint64_t v7;

  v3 = *(void (***)(_QWORD, float))(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v4 = *(_QWORD *)(*v1 + 24);
  v7 = *v1;
  swift_task_dealloc();
  sub_18C6E87FC(v4, &qword_1EE043B48);

  v3[2](v3, a1);
  _Block_release(v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_18C6DD764(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_18C711D54();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6DD7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 64);
  sub_18C6D5138(*(_QWORD *)(v0 + 16), v1, &qword_1EE043B48);
  v2 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 64);
  if (v3 == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 64), &qword_1EE043B48);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4 + *(int *)(v2 + 20), v6);
    sub_18C6DC51C(v4, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    v8 = sub_18C711CD0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    if ((v8 & 0x100000000) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(float))(v0 + 8))(*(float *)&v8);
    }
  }
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v10;
  *v10 = v0;
  v10[1] = sub_18C6DD944;
  return sub_18C6D93DC(*(_QWORD *)(v0 + 48));
}

uint64_t sub_18C6DD944()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6DD998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = sub_18C711CD0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 0x100000000) != 0)
    v5 = 0.5;
  else
    v5 = *(float *)&v4;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(float))(v0 + 8))(v5);
}

uint64_t sub_18C6DDB50(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v3[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v7 = swift_task_alloc();
  v3[3] = v7;
  v3[4] = _Block_copy(a2);
  if (a1)
  {
    v8 = a1;
    v9 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v7);

    v10 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v12 = a3;
  }
  v13 = (_QWORD *)swift_task_alloc();
  v3[5] = v13;
  *v13 = v3;
  v13[1] = sub_18C6DDC54;
  return sub_18C6DD764(v7);
}

uint64_t sub_18C6DDC54(float a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, float);
  uint64_t v4;
  void *v5;
  uint64_t v7;

  v3 = *(void (***)(_QWORD, float))(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v4 = *(_QWORD *)(*v1 + 24);
  v7 = *v1;
  swift_task_dealloc();

  sub_18C6E87FC(v4, &qword_1EE043B48);
  v3[2](v3, a1);
  _Block_release(v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_18C6DDCE0(float a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(float *)(v2 + 40) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  *(_QWORD *)(v2 + 24) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6DDD40()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18C6D916C(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_18C6DDD98;
  return sub_18C6DE078(*(_QWORD *)(v0 + 24), *(float *)(v0 + 40));
}

uint64_t sub_18C6DDD98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc();
  sub_18C6E87FC(v1, &qword_1EE043B48);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_18C6DDF24(const void *a1, void *a2, float a3)
{
  uint64_t v3;
  id v6;

  *(_QWORD *)(v3 + 16) = a2;
  *(float *)(v3 + 48) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  *(_QWORD *)(v3 + 24) = swift_task_alloc();
  *(_QWORD *)(v3 + 32) = _Block_copy(a1);
  v6 = a2;
  return swift_task_switch();
}

uint64_t sub_18C6DDF9C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18C6D916C(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_18C6DDFF4;
  return sub_18C6DE078(*(_QWORD *)(v0 + 24), *(float *)(v0 + 48));
}

uint64_t sub_18C6DDFF4()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD))(*v0 + 32);
  v3 = *(void **)(*v0 + 16);
  v2 = *(_QWORD *)(*v0 + 24);
  v5 = *v0;
  swift_task_dealloc();
  sub_18C6E87FC(v2, &qword_1EE043B48);

  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_18C6DE078(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(float *)(v3 + 288) = a2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  *(_QWORD *)(v3 + 96) = swift_task_alloc();
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  *(_QWORD *)(v3 + 112) = swift_task_alloc();
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  v4 = sub_18C711AF0();
  *(_QWORD *)(v3 + 128) = v4;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  v5 = sub_18C711A90();
  *(_QWORD *)(v3 + 152) = v5;
  *(_QWORD *)(v3 + 160) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  v6 = sub_18C711B08();
  *(_QWORD *)(v3 + 184) = v6;
  *(_QWORD *)(v3 + 192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  *(_QWORD *)(v3 + 208) = swift_task_alloc();
  v7 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  *(_QWORD *)(v3 + 216) = v7;
  *(_QWORD *)(v3 + 224) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 232) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6DE1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  sub_18C6D5138(*(_QWORD *)(v0 + 80), v3, &qword_1EE043B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 88);
    sub_18C6E87FC(*(_QWORD *)(v0 + 208), &qword_1EE043B48);
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v4 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
    v17 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v5;
    *v5 = v0;
    v5[1] = sub_18C6DE420;
    return v17(*(_QWORD *)(v0 + 200));
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 88);
    v9 = *(_DWORD *)(v0 + 288);
    sub_18C6D9398(*(_QWORD *)(v0 + 208), v7);
    v10 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors;
    v11 = *(id *)(v8 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
    sub_18C711DFC();

    v12 = *(_QWORD *)(v0 + 56);
    v13 = swift_task_alloc();
    *(_QWORD *)(v13 + 16) = v7;
    *(_DWORD *)(v13 + 24) = v9;
    v14 = sub_18C6DE940((void (*)(uint64_t))sub_18C6E2068, v13, v12);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v15 = *(void **)(v8 + v10);
    *(_QWORD *)(v0 + 72) = v14;
    v16 = v15;
    sub_18C711E08();

    sub_18C6DC51C(v7, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C6DE420()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6DE474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1);
  v8 = *(_QWORD *)(v0 + 120);
  if (v7 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    sub_18C6E87FC(v8, &qword_1EE042CE0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 32))(v10, *(_QWORD *)(v0 + 120), v11);
    v15 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    *(_QWORD *)(v0 + 256) = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    v16 = *(id *)(v14 + v15);
    sub_18C711DFC();

    v17 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 264) = v17;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    *(_QWORD *)(v0 + 272) = v18;
    v18(v13, v10, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v19;
    *v19 = v0;
    v19[1] = sub_18C6DE670;
    return Dictionary<>.selection(forLanguage:withResolver:exists:)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 240), 0, v17);
  }
}

uint64_t sub_18C6DE670()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  return swift_task_switch();
}

uint64_t sub_18C6DE6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = sub_18C711D54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2))
  {
    sub_18C711CDC();
    v1 = *(_QWORD *)(v0 + 104);
  }
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272))(v5, v4, v6);
  sub_18C6D5138(v1, v8, &qword_1EE043B28);
  v9 = *(id *)(v7 + v3);
  v10 = (void (*)(uint64_t, _QWORD))sub_18C711DF0();
  sub_18C6F5FA0(v8, v5);
  v10(v0 + 16, 0);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  sub_18C6E87FC(v1, &qword_1EE043B28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6DE894@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;

  v5 = *a1 == *a2 && a1[1] == a2[1];
  if (!v5 && (sub_18C712264() & 1) == 0)
    return sub_18C6D9354((uint64_t)a1, a3);
  sub_18C6D9354((uint64_t)a1, a3);
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return sub_18C711CDC();
}

uint64_t sub_18C6DE940(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v6 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    sub_18C7061BC(0, v11, 0);
    v12 = v22;
    v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = a3 + v19;
    v14 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      v20(v13);
      if (v4)
        break;
      v4 = 0;
      v22 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_18C7061BC(v15 > 1, v16 + 1, 1);
        v12 = v22;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      sub_18C6D9398((uint64_t)v10, v12 + v19 + v16 * v14);
      v13 += v14;
      if (!--v11)
        return v12;
    }
    swift_release();
  }
  return v12;
}

uint64_t sub_18C6DEBD0(void *a1, const void *a2, void *a3, float a4)
{
  _QWORD *v4;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;

  v4[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v9 = swift_task_alloc();
  v4[3] = v9;
  v4[4] = _Block_copy(a2);
  if (a1)
  {
    v10 = a1;
    v11 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v9);

    v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 0, 1, v12);
  }
  else
  {
    v13 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    v14 = a3;
  }
  v15 = (_QWORD *)swift_task_alloc();
  v4[5] = v15;
  *v15 = v4;
  v15[1] = sub_18C6DECE4;
  return sub_18C6DE078(v9, a4);
}

uint64_t sub_18C6DECE4()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD))(*v0 + 32);
  v3 = *(void **)(*v0 + 16);
  v2 = *(_QWORD *)(*v0 + 24);
  v5 = *v0;
  swift_task_dealloc();

  sub_18C6E87FC(v2, &qword_1EE043B48);
  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

double sub_18C6DED68@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_18C7379E0;
  return result;
}

uint64_t sub_18C6DED78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[5] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B68);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043BA8);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B58);
  v1[12] = v4;
  v1[13] = *(_QWORD *)(v4 - 8);
  v1[14] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
  v1[15] = v5;
  v1[16] = *(_QWORD *)(v5 - 8);
  v1[17] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043BB0);
  v1[18] = v6;
  v1[19] = *(_QWORD *)(v6 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043BB8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v1[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6DEEF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[21];
  v2 = v0[17];
  v21 = v0[18];
  v22 = v0[20];
  v3 = v0[14];
  v19 = v0[15];
  v20 = v0[19];
  v16 = v0[13];
  v17 = v0[12];
  v18 = v0[16];
  v4 = v0[5];
  v5 = *(id *)(v4 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
  sub_18C711DFC();

  v6 = sub_18C6DF434(v0[2]);
  swift_bridgeObjectRelease();
  v7 = *(id *)(v4 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  sub_18C711DFC();

  v8 = sub_18C6DF614(v0[4]);
  swift_bridgeObjectRelease();
  sub_18C6E441C((uint64_t)v6);
  v9 = sub_18C6E68EC((uint64_t)v8);
  swift_bridgeObjectRelease();
  v0[3] = v9;
  v10 = objc_retain(*(id *)(v4
                          + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  v11 = (void *)sub_18C711E14();

  sub_18C711E2C();
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver);
  v13 = swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v2;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v3, *MEMORY[0x1E0DF07B8], v17);
  sub_18C711FE8();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v1, v21);
  sub_18C6E69C4(&qword_1EE043BC0, &qword_1EE043BB0, MEMORY[0x1E0DF0848]);
  sub_18C712000();
  sub_18C6E69C4(&qword_1EE043BC8, &qword_1EE043BA8, MEMORY[0x1E0DF0830]);
  v14 = (_QWORD *)swift_task_alloc();
  v0[25] = (uint64_t)v14;
  *v14 = v0;
  v14[1] = sub_18C6DF15C;
  return sub_18C711F64();
}

uint64_t sub_18C6DF15C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[10] + 8))(v2[11], v2[9]);
  else
    return swift_task_switch();
}

uint64_t sub_18C6DF1CC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 48);
  if (v2(v1, 1, *(_QWORD *)(v0 + 48)) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    v3 = 1;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    sub_18C6E6980(v1, v8, &qword_1EE043B68);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    sub_18C6E6980(v8, v4, &qword_1EE043B68);
    v3 = 0;
  }
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 56))(v9, v3, 1, v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  if (v2(v9, 1, v13) == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 184), &qword_1EE043BB8);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 192);
    sub_18C6E6980(*(_QWORD *)(v0 + 184) + *(int *)(*(_QWORD *)(v0 + 48) + 48), v14, &qword_1EE043B28);
    v15 = sub_18C711D54();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    v18 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    if (v17 == 1)
    {
      v20 = sub_18C711B08();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      sub_18C6E87FC(v19, &qword_1EE043B28);
    }
    else
    {
      v21 = sub_18C711D3C();
      v23 = v22;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
      v24 = sub_18C711B08();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v18, v24);
      if (v23)
      {
        sub_18C6E22EC(&v27, v21, v23);
        swift_bridgeObjectRelease();
      }
    }
  }
  v25 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
}

_QWORD *sub_18C6DF434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v21[1] = v1;
  v8 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = *(_QWORD *)(v9 + 72);
  v21[0] = a1;
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    sub_18C6D5138(v10 + *(int *)(v8 + 72), (uint64_t)v6, &qword_1EE043B28);
    v13 = sub_18C711D54();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13) == 1)
    {
      sub_18C6E87FC((uint64_t)v6, &qword_1EE043B28);
    }
    else
    {
      v22 = sub_18C711D3C();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
      if (v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_18C6E1F14(0, v12[2] + 1, 1, v12);
        v18 = v12[2];
        v17 = v12[3];
        if (v18 >= v17 >> 1)
          v12 = sub_18C6E1F14((_QWORD *)(v17 > 1), v18 + 1, 1, v12);
        v12[2] = v18 + 1;
        v19 = &v12[2 * v18];
        v19[4] = v22;
        v19[5] = v16;
      }
    }
    v10 += v11;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  return v12;
}

_QWORD *sub_18C6DF614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v5 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v8 = sub_18C711D3C();
    if (v9)
    {
      v10 = v8;
      v11 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_18C6E1F14(0, v6[2] + 1, 1, v6);
      v13 = v6[2];
      v12 = v6[3];
      if (v13 >= v12 >> 1)
        v6 = sub_18C6E1F14((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
      v6[2] = v13 + 1;
      v7 = &v6[2 * v13];
      v7[4] = v10;
      v7[5] = v11;
    }
    v4 += v5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v6;
}

id AXPreferences.VoiceOver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AXPreferences.VoiceOver.init()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(unint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(_QWORD *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  id v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  void (*v100)(char *, _QWORD *);
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned int v118;
  uint64_t v119;
  void *v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  id v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  unsigned int v138;
  void (*v139)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  void *v141;
  id v142;
  char *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t inited;
  void *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  objc_class *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  _QWORD *v205;
  unsigned int (*v206)(char *, uint64_t, _QWORD *);
  void (*v207)(char *, uint64_t, _QWORD *);
  void (*v208)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  char *v212;
  __int128 v213;
  _QWORD *v214;
  void (*v215)(_QWORD *);
  uint64_t v216;
  void (*v217)(char *, char *, uint64_t);
  uint64_t v218;
  void (*v219)(char *, uint64_t, uint64_t, uint64_t);
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  objc_super v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;

  v1 = v0;
  v200 = sub_18C711A54();
  v199 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200, v2);
  v197 = (char *)&v193 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v4, v5);
  v196 = (char *)&v193 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v7, v8);
  v201 = (char *)&v193 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = (_QWORD *)sub_18C711B08();
  v205 = (_QWORD *)*(v214 - 1);
  MEMORY[0x1E0C80A78](v214, v10);
  *(_QWORD *)&v213 = (char *)&v193 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v202 = (char *)&v193 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v203 = (char *)&v193 - v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v204 = (char *)&v193 - v20;
  v225 = sub_18C711D84();
  v216 = *(_QWORD *)(v225 - 8);
  v22 = MEMORY[0x1E0C80A78](v225, v21);
  v220 = (char *)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v193 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v209 = (uint64_t)&v193 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v193 - v32;
  v34 = sub_18C711C04();
  MEMORY[0x1E0C80A78](v34, v35);
  v224 = (char *)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_18C711B74();
  v218 = *((_QWORD *)v219 - 1);
  MEMORY[0x1E0C80A78](v219, v37);
  v39 = (uint64_t *)((char *)&v193 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v222 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver_resolver;
  v221 = sub_18C711B8C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CF8);
  v40 = sub_18C711B44();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_QWORD *)(v41 + 72);
  v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18C7379F0;
  v45 = v44 + v43;
  v223 = v1;
  sub_18C711BC8();
  v46 = *MEMORY[0x1E0DBED50];
  v47 = *(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 104);
  v47(v45, v46, v40);
  sub_18C711BD4();
  v47(v45 + v42, v46, v40);
  v47(v45 + 2 * v42, *MEMORY[0x1E0DBED58], v40);
  v47(v45 + 3 * v42, *MEMORY[0x1E0DBED48], v40);
  *v39 = v44;
  (*(void (**)(uint64_t *, _QWORD, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v218 + 104))(v39, *MEMORY[0x1E0DBED90], v219);
  v48 = sub_18C711C40();
  v49 = sub_18C711C34();
  v228 = v48;
  v229 = MEMORY[0x1E0DBEE98];
  v227 = v49;
  sub_18C711BF8();
  *(_QWORD *)((char *)v217 + v222) = sub_18C711B50();
  v50 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
  v51 = MEMORY[0x1E0DEE9D8];
  v52 = sub_18C6D2750(MEMORY[0x1E0DEE9D8]);
  v53 = sub_18C711DA8();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
  v55(v33, 1, 1, v53);
  sub_18C711D78();
  v56 = sub_18C6E521C(v52, 0xD000000000000016, 0x800000018C734340, 0, 0, 6, (uint64_t)v33, (uint64_t)sub_18C6D5180, 0, (uint64_t)v26, &qword_1EE043A10);
  swift_bridgeObjectRelease();
  v57 = v223;
  *(_QWORD *)&v223[v50] = v56;
  v58 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors;
  v55(v33, 1, 1, v53);
  sub_18C711D78();
  *(_QWORD *)&v57[v58] = sub_18C6E521C(v51, 0x746F526563696F76, 0xEB0000000073726FLL, 0, 0, 6, (uint64_t)v33, (uint64_t)sub_18C6D6708, 0, (uint64_t)v26, &qword_1EE043D38);
  v217 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver___oldDomainRotors;
  v59 = *(void (**)(_QWORD *))(v54 + 104);
  v195 = *MEMORY[0x1E0CF2F40];
  v215 = v59;
  v59(v33);
  v55(v33, 0, 1, v53);
  v227 = v51;
  v60 = sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  v62 = sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  v224 = (char *)v61;
  v221 = v60;
  v222 = v62;
  v63 = v225;
  sub_18C71209C();
  v64 = sub_18C6E5584(0, 0x746F526563696F76, 0xEB0000000073726FLL, 0, 0, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  v65 = v223;
  *(_QWORD *)((char *)v217 + (_QWORD)v223) = v64;
  v212 = (char *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier;
  v55(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  v66 = v63;
  sub_18C71209C();
  v67 = v209;
  sub_18C6D5138((uint64_t)v33, v209, &qword_1EE0438E0);
  v68 = v216;
  v69 = (uint64_t)v220;
  v217 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
  v217(v220, v26, v66);
  v70 = sub_18C6E58E8(0, 0, 0xD00000000000001BLL, 0x800000018C734360, 0, 0, 2, v67, 0, 0, v69);
  v216 = *(_QWORD *)(v68 + 8);
  ((void (*)(char *, uint64_t))v216)(v26, v66);
  sub_18C6E87FC((uint64_t)v33, &qword_1EE0438E0);
  *(_QWORD *)&v212[(_QWORD)v65] = v70;
  v212 = (char *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled;
  v55(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v194 = 0xD000000000000012;
  v71 = sub_18C6D51A4(0, 0xD000000000000012, 0x800000018C734380, 0xD000000000000026, 0x800000018C7343A0, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  *(_QWORD *)&v212[(_QWORD)v65] = v71;
  v212 = (char *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__contentDescriptionLevel;
  v55(v33, 1, 1, v53);
  v219 = v55;
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v198 = 0xD000000000000017;
  v193 = 0xD000000000000023;
  v72 = sub_18C6D5518(1, 0xD000000000000017, 0x800000018C7343D0, 0xD000000000000023, 0x800000018C7343F0, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  *(_QWORD *)&v212[(_QWORD)v65] = v72;
  v212 = (char *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation;
  v73 = sub_18C711EA4();
  v75 = v74;
  v55(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v76 = sub_18C6D51A4(0, 0xD000000000000019, 0x800000018C734420, v73, v75, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  v77 = v223;
  *(_QWORD *)&v212[(_QWORD)v223] = v76;
  v78 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled;
  v79 = v219;
  v219(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v212 = (char *)0xD000000000000022;
  *(_QWORD *)&v77[v78] = sub_18C6D51A4(0, 0xD000000000000014, 0x800000018C734440, 0xD000000000000022, 0x800000018C734460, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  v211 = (_QWORD *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation;
  v79(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v80 = sub_18C6D51A4(1, 0xD00000000000001ALL, 0x800000018C734490, 0xD000000000000026, 0x800000018C7344B0, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  *(_QWORD *)((char *)v211 + (_QWORD)v77) = v80;
  v211 = (_QWORD *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout;
  v81 = *MEMORY[0x1E0CF3CD8];
  v82 = sub_18C711EA4();
  v84 = v83;
  v79(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v85 = sub_18C6D5880((uint64_t)v212, v81, 0x800000018C7344E0, v82, v84, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  v86 = v223;
  *(_QWORD *)((char *)v211 + (_QWORD)v223) = v85;
  v87 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled;
  v218 = v53;
  v79(v33, 1, 1, v53);
  v227 = MEMORY[0x1E0DEE9D8];
  sub_18C71209C();
  v212 = v26;
  v211 = v33;
  *(_QWORD *)&v86[v87] = sub_18C6D51A4(1, 0xD000000000000018, 0x800000018C734510, 0xD000000000000021, 0x800000018C734530, 2, (uint64_t)v33, 0, 0, (uint64_t)v26);
  v88 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent;
  *(_QWORD *)&v86[v88] = sub_18C6D7A60(1, 0xD000000000000033, 0x800000018C735380, 0xD000000000000036, 0x800000018C735340);
  v89 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode;
  *(_QWORD *)&v86[v89] = sub_18C6D71B4(1, 0xD000000000000026, 0x800000018C735310, 0xD000000000000029, 0x800000018C7352E0);
  v90 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode;
  *(_QWORD *)&v86[v90] = sub_18C6D71B4(1, 0xD000000000000025, 0x800000018C7352B0, 0xD000000000000028, 0x800000018C735280);
  v91 = (char *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode;
  *(_QWORD *)&v91[(_QWORD)v86] = sub_18C6D71B4(1, 0xD000000000000026, 0x800000018C735250, 0xD000000000000029, 0x800000018C735220);
  v92 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables;
  *(_QWORD *)&v86[v92] = sub_18C6D7470(0);
  v210 = (_QWORD *)objc_opt_self();
  v93 = (char *)objc_msgSend(v210, sel_sharedInstance);
  if (!v93)
  {
    __break(1u);
    goto LABEL_22;
  }
  v91 = v93;
  v94 = objc_msgSend(v93, sel_userLocale);

  if (!v94)
  {
LABEL_22:
    ((void (*)(char *, uint64_t, uint64_t, _QWORD *))v205[7])(v204, 1, 1, v214);
    goto LABEL_23;
  }
  v95 = v213;
  sub_18C711AD8();

  v96 = v205;
  v91 = v204;
  v97 = v214;
  v207 = (void (*)(char *, uint64_t, _QWORD *))v205[4];
  v207(v204, v95, v214);
  v208 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))v96[7];
  v208(v91, 0, 1, v97);
  v206 = (unsigned int (*)(char *, uint64_t, _QWORD *))v96[6];
  if (v206(v91, 1, v97) == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v98 = (_QWORD *)objc_opt_self();
  v99 = (void *)sub_18C711AC0();
  v100 = (void (*)(char *, _QWORD *))v96[1];
  v100(v91, v97);
  v205 = v98;
  v101 = objc_msgSend(v98, sel_defaultTableForLocale_, v99);

  if (v101)
  {
    v102 = objc_msgSend(v101, sel_identifier);

    v103 = sub_18C711EA4();
    v105 = v104;

  }
  else
  {
    v103 = 0;
    v105 = 0;
  }
  v106 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier;
  v227 = MEMORY[0x1E0DEE9D8];
  v107 = (uint64_t)v212;
  v91 = (char *)v225;
  sub_18C71209C();
  v108 = v211;
  *v211 = 0xD000000000000030;
  v108[1] = 0x800000018C7345A0;
  v108[2] = 0;
  v109 = v108 + 2;
  v108[3] = 0;
  LODWORD(v204) = *MEMORY[0x1E0CF2F50];
  v110 = v218;
  v215(v108);
  v219((char *)v108, 0, 1, v110);
  v111 = (uint64_t)v220;
  v217(v220, (char *)v107, (uint64_t)v91);
  swift_bridgeObjectRetain();
  v112 = sub_18C6E58E8(v103, v105, 0, 0xE000000000000000, 0xD000000000000033, 0x800000018C734560, 2, (uint64_t)v108, 0, 0, v111);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, char *))v216)(v107, v91);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v223[v106] = v112;
  v113 = objc_msgSend(v210, sel_sharedInstance);
  if (!v113)
    goto LABEL_24;
  v114 = v113;
  v115 = objc_msgSend(v113, sel_userLocale);

  v91 = v203;
  if (!v115)
  {
LABEL_25:
    v208(v91, 1, 1, v214);
    goto LABEL_26;
  }
  v116 = v213;
  sub_18C711AD8();

  v117 = v214;
  v207(v91, v116, v214);
  v208(v91, 0, 1, v117);
  v118 = v206(v91, 1, v117);
  v119 = v218;
  if (v118 == 1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v120 = (void *)sub_18C711AC0();
  v100(v91, v117);
  v121 = objc_msgSend(v205, sel_defaultTableForLocale_, v120);

  if (v121)
  {
    v122 = objc_msgSend(v121, sel_identifier);

    v123 = sub_18C711EA4();
    v125 = v124;

  }
  else
  {
    v123 = 0;
    v125 = 0;
  }
  v126 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier;
  v227 = MEMORY[0x1E0DEE9D8];
  v127 = (uint64_t)v212;
  v128 = v225;
  sub_18C71209C();
  v129 = (uint64_t)v211;
  *v211 = 0xD000000000000031;
  *(_QWORD *)(v129 + 8) = 0x800000018C734620;
  *v109 = 0;
  v109[1] = 0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v215)(v129, v204, v119);
  v219((char *)v129, 0, 1, v119);
  v130 = (uint64_t)v220;
  v217(v220, (char *)v127, v128);
  swift_bridgeObjectRetain();
  v131 = sub_18C6E58E8(v123, v125, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018C7345E0, 2, v129, 0, 0, v130);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v216)(v127, v128);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v223[v126] = v131;
  v132 = objc_msgSend(v210, sel_sharedInstance);
  if (!v132)
    goto LABEL_27;
  v133 = v132;
  v210 = v109;
  v134 = objc_msgSend(v132, sel_userLocale);

  if (!v134)
  {
LABEL_28:
    v208(v202, 1, 1, v214);
    goto LABEL_29;
  }
  v135 = v213;
  sub_18C711AD8();

  v136 = v202;
  v137 = v214;
  v207(v202, v135, v214);
  v208(v136, 0, 1, v137);
  v138 = v206(v136, 1, v137);
  v139 = v219;
  v140 = (uint64_t)v220;
  if (v138 == 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v141 = (void *)sub_18C711AC0();
  v100(v136, v137);
  v142 = objc_msgSend(v205, sel_defaultTableForLocale_, v141);

  v143 = (char *)v129;
  if (v142)
  {
    v144 = objc_msgSend(v142, sel_identifier);

    v145 = sub_18C711EA4();
    v147 = v146;

  }
  else
  {
    v145 = 0;
    v147 = 0;
  }
  v148 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier;
  v227 = MEMORY[0x1E0DEE9D8];
  v149 = v225;
  sub_18C71209C();
  *(_QWORD *)v143 = 0xD000000000000031;
  *((_QWORD *)v143 + 1) = 0x800000018C7346A0;
  v150 = v210;
  *v210 = 0;
  v150[1] = 0;
  v151 = v218;
  ((void (*)(char *, _QWORD, uint64_t))v215)(v143, v204, v218);
  v139(v143, 0, 1, v151);
  v217((char *)v140, (char *)v127, v149);
  swift_bridgeObjectRetain();
  v152 = sub_18C6E58E8(v145, v147, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018C734660, 2, (uint64_t)v143, 0, 0, v140);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v216)(v127, v149);
  swift_bridgeObjectRelease();
  v153 = v223;
  *(_QWORD *)&v223[v148] = v152;
  v154 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled;
  *(_QWORD *)&v153[v154] = sub_18C6D7A60(1, 0xD000000000000035, 0x800000018C735160, 0xD000000000000038, 0x800000018C735120);
  v155 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption;
  *(_QWORD *)&v153[v155] = sub_18C6D7D0C(2);
  v156 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback;
  *(_QWORD *)&v153[v156] = sub_18C6D7A60(1, 0xD00000000000002FLL, 0x800000018C735090, 0xD000000000000032, 0x800000018C735050);
  v157 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback;
  *(_QWORD *)&v153[v157] = sub_18C6D7A60(1, 0xD000000000000034, 0x800000018C735010, 0xD000000000000037, 0x800000018C734FD0);
  v158 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText;
  *(_QWORD *)&v153[v158] = sub_18C6D7A60(0, 0xD000000000000030, 0x800000018C734F90, 0xD000000000000033, 0x800000018C734F50);
  v159 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields;
  *(_QWORD *)&v153[v159] = sub_18C6D7A60(0, 0xD000000000000035, 0x800000018C734F10, 0xD000000000000038, 0x800000018C734ED0);
  v160 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultPunctuationGroup;
  v161 = (uint64_t)v201;
  v162 = v200;
  v214 = *(_QWORD **)(v199 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v214)(v201, 1, 1, v200);
  *(_QWORD *)&v153[v160] = sub_18C6D82FC(v161);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE670F8);
  v163 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AXPreferences.VoiceOver.Activity() - 8) + 80);
  v164 = (v163 + 32) & ~v163;
  v165 = swift_allocObject();
  v213 = xmmword_18C7379D0;
  *(_OWORD *)(v165 + 16) = xmmword_18C7379D0;
  v166 = (void *)sub_18C711E80();
  v167 = AXLocalizedString(v166);

  if (v167)
  {
    v168 = v165 + v164;
    v169 = sub_18C711EA4();
    v210 = v170;

    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67100);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v213;
    v172 = (void *)*MEMORY[0x1E0CF48F8];
    *(_QWORD *)&v213 = v165;
    *(_QWORD *)(inited + 32) = v172;
    v173 = v172;
    v174 = sub_18C6E6A04(inited);
    swift_setDeallocating();
    type metadata accessor for AXSSVoiceOverTextualContext(0);
    swift_arrayDestroy();
    sub_18C6E6AA8();
    objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_initialize);
    sub_18C711A3C();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v214)(v161, 0, 1, v162);
    v175 = sub_18C711D54();
    v176 = (uint64_t)v196;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v196, 1, 1, v175);
    v177 = (uint64_t)v197;
    sub_18C711A48();
    sub_18C6EBD9C(v177, v169, (uint64_t)v210, v174, 0, v161, 2, 2, v168, 2, 2, 2, 0, 1, 0, 1, 0, 1, 0,
      1,
      v176,
      2,
      2,
      2,
      0,
      1,
      2,
      2,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      2,
      2);
    v214 = (_QWORD *)OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities;
    v178 = v218;
    v179 = v219;
    v219(v143, 1, 1, v218);
    v227 = MEMORY[0x1E0DEE9D8];
    v180 = v225;
    v181 = v127;
    sub_18C71209C();
    v182 = sub_18C6E521C(v213, 0x6974697669746361, 0xEA00000000007365, 0xD000000000000020, 0x800000018C734700, 13, (uint64_t)v143, 0, 0, v127, &qword_1EE043CF0);
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v214 + (_QWORD)v153) = v182;
    v183 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId;
    ((void (*)(char *, _QWORD, uint64_t))v215)(v143, v195, v178);
    v179(v143, 0, 1, v178);
    v227 = MEMORY[0x1E0DEE9D8];
    sub_18C71209C();
    v184 = v194;
    *(_QWORD *)&v153[v183] = sub_18C6E58E8(0, 0, v194, 0x800000018C734730, 0xD000000000000026, 0x800000018C734750, 13, (uint64_t)v143, 0, 0, v127);
    v185 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled;
    *(_QWORD *)&v153[v185] = sub_18C6D8914(1);
    v186 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled;
    v179(v143, 1, 1, v178);
    sub_18C711D78();
    *(_QWORD *)&v153[v186] = sub_18C6D51A4(1, v184, 0x800000018C734780, v193, 0x800000018C7347A0, 2, (uint64_t)v143, 0, 0, v127);
    v187 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage;
    v179(v143, 1, 1, v178);
    v227 = MEMORY[0x1E0DEE9D8];
    sub_18C71209C();
    v188 = v209;
    sub_18C6D5138((uint64_t)v143, v209, &qword_1EE0438E0);
    v189 = (uint64_t)v220;
    v217(v220, (char *)v181, v180);
    v190 = sub_18C6E58E8(0, 0, 0xD000000000000010, 0x800000018C7347D0, 0, 0, 2, v188, 0, 0, v189);
    ((void (*)(uint64_t, uint64_t))v216)(v181, v180);
    sub_18C6E87FC((uint64_t)v143, &qword_1EE0438E0);
    *(_QWORD *)&v153[v187] = v190;
    v191 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled;
    *(_QWORD *)&v153[v191] = sub_18C6D8E60(0);

    v192 = (objc_class *)type metadata accessor for AXPreferences.VoiceOver();
    v226.receiver = v153;
    v226.super_class = v192;
    objc_msgSendSuper2(&v226, sel_init);
    return;
  }
LABEL_30:
  __break(1u);
}

id AXPreferences.VoiceOver.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.VoiceOver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C6E176C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18C6E8970;
  return sub_18C6DED78();
}

Swift::Void __swiftcall enableVoicesRotor()()
{
  void *v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  void *v18;
  id v19;
  _BYTE v20[40];
  __int128 v21;
  __int128 v22;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_sharedInstance);
  v2 = objc_msgSend(v1, sel_voiceOverRotorItems);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043BD8);
  v3 = (_QWORD *)sub_18C711F4C();

  v4 = v3[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v19 = v0;
  v5 = 0;
  v6 = -32;
  while (1)
  {
    sub_18C7120D8();
    if (v5 >= v3[2])
    {
      __break(1u);
      goto LABEL_37;
    }
    v7 = v3[v5 + 4];
    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      v8 = sub_18C6F94B8((uint64_t)v20);
      if ((v9 & 1) != 0)
      {
        sub_18C6D50FC(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v21);
      }
      else
      {
        v21 = 0u;
        v22 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
    }
    sub_18C6D50C8((uint64_t)v20);
    if (!*((_QWORD *)&v22 + 1))
    {
      sub_18C6E87FC((uint64_t)&v21, &qword_1ECE66E50);
LABEL_4:
      sub_18C711EA4();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_4;
    if (sub_18C711EA4() == 0x657449726F746F52 && v10 == 0xE90000000000006DLL)
      break;
    v12 = sub_18C712264();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      v13 = &v3[v6 / 0xFFFFFFFFFFFFFFF8];
      goto LABEL_23;
    }
LABEL_5:
    ++v5;
    v6 -= 8;
    if (v4 == v5)
      goto LABEL_35;
  }
  v13 = &v3[v6 / 0xFFFFFFFFFFFFFFF8];
  swift_bridgeObjectRelease_n();
LABEL_23:
  sub_18C7120D8();
  if (v5 < v3[2])
  {
    v14 = *v13;
    if (*(_QWORD *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      v15 = sub_18C6F94B8((uint64_t)v20);
      if ((v16 & 1) != 0)
      {
        sub_18C6D50FC(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v21);
      }
      else
      {
        v21 = 0u;
        v22 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
    }
    sub_18C6D50C8((uint64_t)v20);
    if (*((_QWORD *)&v22 + 1))
      swift_dynamicCast();
    else
      sub_18C6E87FC((uint64_t)&v21, &qword_1ECE66E50);
LABEL_35:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_37:
  __break(1u);
  if (v5 >= sub_18C6E456C(v3)[2])
  {
    __break(1u);
  }
  else
  {
    sub_18C6F612C((uint64_t)&v21, (uint64_t)v20);
    v17 = objc_msgSend(v19, sel_sharedInstance);
    swift_bridgeObjectRetain();
    v18 = (void *)sub_18C711F40();
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setVoiceOverRotorItems_, v18);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_18C6E1BF8(uint64_t a1)
{
  uint64_t v1;

  return sub_18C6F8870(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_18C6E1C00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043CE0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_18C6E5D7C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_18C6E1D0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE0444D0);
  v10 = *(_QWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_18C712150();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_18C6E5C64(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_18C6E1F14(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C58);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_18C6E887C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_18C6E2020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6E2068@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_18C6DE894(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_18C6E2088(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = sub_18C711A90();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  sub_18C6D2488(&qword_1EE042CC0, 255, v12, MEMORY[0x1E0CB0B00]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = sub_18C711E5C();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v22 = sub_18C711E74();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_18C6E301C((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t sub_18C6E22EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_18C712288();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  v8 = sub_18C7122B8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_18C712264() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_18C712264() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_18C6E3228(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_18C6E2498(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  void *v26;
  id v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  sub_18C711EA4();
  sub_18C712288();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  v7 = sub_18C7122B8();
  swift_bridgeObjectRelease();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v3;
    *v3 = 0x8000000000000000;
    v24 = a2;
    sub_18C6E33C0((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  v10 = sub_18C711EA4();
  v12 = v11;
  if (v10 == sub_18C711EA4() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_18C712264();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = ~v8;
      do
      {
        v9 = (v9 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_15;
        v17 = sub_18C711EA4();
        v19 = v18;
        if (v17 == sub_18C711EA4() && v19 == v20)
          goto LABEL_16;
        v22 = sub_18C712264();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v26 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  v27 = v26;
  return 0;
}

uint64_t sub_18C6E26C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v1 = v0;
  v2 = sub_18C711A90();
  v37 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D50);
  v7 = sub_18C7120F0();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v36 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v34 = v0;
    v35 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_33;
        v20 = v36[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_33;
          v20 = v36[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v35)
              goto LABEL_33;
            v20 = v36[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v35)
              {
LABEL_33:
                swift_release();
                v1 = v34;
                v33 = 1 << *(_BYTE *)(v6 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v20 = v36[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_39;
                  if (v15 >= v35)
                    goto LABEL_33;
                  v20 = v36[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_23;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_23:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = v6;
      v23 = *(_QWORD *)(v6 + 48);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 32);
      v25(v5, v23 + v24 * v18, v2);
      sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
      result = sub_18C711E5C();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(_QWORD *)(v8 + 48) + v16 * v24, v5, v2);
      ++*(_QWORD *)(v8 + 16);
      v6 = v22;
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_18C6E2A30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D48);
  v3 = sub_18C7120F0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_18C712288();
      sub_18C711EBC();
      result = sub_18C7122B8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_18C6E2D0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043CF8);
  v3 = sub_18C7120F0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28)
          goto LABEL_33;
        v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v28)
            goto LABEL_33;
          v15 = v29[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v28)
              goto LABEL_33;
            v15 = v29[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                v1 = v27;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_39;
                  if (v10 >= v28)
                    goto LABEL_33;
                  v15 = v29[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v7 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
      sub_18C711EA4();
      sub_18C712288();
      sub_18C711EBC();
      v18 = sub_18C7122B8();
      result = swift_bridgeObjectRelease();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = v18 & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_18C6E301C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_18C711A90();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_18C6E26C0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_18C6E35EC();
      goto LABEL_12;
    }
    sub_18C6E3B68();
  }
  v13 = *v3;
  sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
  v14 = sub_18C711E5C();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v10, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v19 = sub_18C711E74();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_18C712270();
  __break(1u);
  return result;
}

uint64_t sub_18C6E3228(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_18C6E2A30();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_18C6E3810();
      goto LABEL_22;
    }
    sub_18C6E3E94();
  }
  v11 = *v4;
  sub_18C712288();
  sub_18C711EBC();
  result = sub_18C7122B8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_18C712264(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_18C712270();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_18C712264();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_18C6E33C0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  if ((a3 & 1) != 0)
  {
    sub_18C6E2D0C();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_18C6E39C0();
LABEL_22:
      v25 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * a2) = v6;
      v26 = *(_QWORD *)(v25 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (!v27)
      {
        *(_QWORD *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_18C6E4140();
  }
  v9 = *v3;
  sub_18C711EA4();
  sub_18C712288();
  sub_18C711EBC();
  v10 = sub_18C7122B8();
  result = swift_bridgeObjectRelease();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v12 = sub_18C711EA4();
  v14 = v13;
  if (v12 == sub_18C711EA4() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  v17 = sub_18C712264();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v19 = sub_18C711EA4();
      v21 = v20;
      if (v19 == sub_18C711EA4() && v21 == v22)
        goto LABEL_25;
      v24 = sub_18C712264();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for AXSSVoiceOverTextualContext(0);
  result = sub_18C712270();
  __break(1u);
  return result;
}

void *sub_18C6E35EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = sub_18C711A90();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D50);
  v7 = *v0;
  v8 = sub_18C7120E4();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v21, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v21, v6, v2);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_18C6E3810()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D48);
  v2 = *v0;
  v3 = sub_18C7120E4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_18C6E39C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043CF8);
  v2 = *v0;
  v3 = sub_18C7120E4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_18C6E3B68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;

  v1 = v0;
  v2 = sub_18C711A90();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D50);
  v8 = sub_18C7120F0();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v32 = v0;
  v33 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v34 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v34)
      goto LABEL_33;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_33;
      v21 = *(_QWORD *)(v33 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_33;
        v21 = *(_QWORD *)(v33 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    v23 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v23 * v19, v2);
    sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    result = sub_18C711E5C();
    v24 = -1 << *(_BYTE *)(v9 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v17 * v23, v6, v2);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v32;
    goto LABEL_35;
  }
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v34)
      goto LABEL_33;
    v21 = *(_QWORD *)(v33 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18C6E3E94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D48);
  v3 = sub_18C7120F0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_18C712288();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    result = sub_18C7122B8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18C6E4140()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043CF8);
  v3 = sub_18C7120F0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v0;
  v28 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_33;
      v15 = *(_QWORD *)(v28 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_33;
        v15 = *(_QWORD *)(v28 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_18C711EA4();
    sub_18C712288();
    v18 = v17;
    sub_18C711EBC();
    v19 = sub_18C7122B8();
    result = swift_bridgeObjectRelease();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18C6E441C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_18C6E1F14(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_18C712198();
  __break(1u);
  return result;
}

_QWORD *sub_18C6E456C(_QWORD *a1)
{
  return sub_18C6E1C00(0, a1[2], 0, a1);
}

uint64_t sub_18C6E4580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  int64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t i;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  int v67;
  int v68;
  char isUniquelyReferenced_nonNull_native;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  os_log_type_t v87;
  NSObject *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v110 = sub_18C711D54();
  v107 = *(_QWORD *)(v110 - 8);
  v1 = MEMORY[0x1E0C80A78](v110, v0);
  v106 = (char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1, v3);
  v105 = (char *)&v97 - v4;
  v109 = sub_18C711A90();
  v104 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109, v5);
  v103 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_18C711D84();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  MEMORY[0x1E0C80A78](v7, v9);
  v10 = sub_18C711DA8();
  MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, _QWORD))(v13 + 104))((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CF2F40]);
  v126 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, v8, MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  v128 = sub_18C711C70();
  v129 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v126);
  sub_18C711C64();
  LODWORD(v123) = 1056964608;
  v14 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D40));
  v15 = (void *)sub_18C711DE4();
  sub_18C711E20();

  v102 = v126;
  v125 = MEMORY[0x1E0DEE9E0];
  v108 = (id)objc_opt_self();
  v16 = objc_msgSend(v108, sel_sharedInstance);
  v17 = objc_msgSend(v16, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v17)
    goto LABEL_75;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB0);
  v18 = sub_18C711E44();

  v101 = *MEMORY[0x1E0CF37F0];
  v19 = sub_18C711EA4();
  if (*(_QWORD *)(v18 + 16))
  {
    v21 = sub_18C6F9454(v19, v20);
    if ((v22 & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v108, sel_sharedInstance);
      objc_msgSend(v24, sel_voiceOverPitch);
      v26 = v25;

      v27 = 0;
      v29 = 1 << *(_BYTE *)(v23 + 32);
      if (v29 < 64)
        v30 = ~(-1 << v29);
      else
        v30 = -1;
      v31 = v30 & *(_QWORD *)(v23 + 64);
      v113 = (unint64_t)(v29 + 63) >> 6;
      v98 = *MEMORY[0x1E0DBEF60];
      *(float *)&v28 = v26;
      v99 = v28;
      v97 = MEMORY[0x1E0DEE9B8] + 8;
      v112 = v23 + 64;
      v100 = v23;
      if (v31)
        goto LABEL_10;
LABEL_11:
      v34 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_82;
      if (v34 < v113)
      {
        v35 = *(_QWORD *)(v112 + 8 * v34);
        ++v27;
        if (v35)
          goto LABEL_24;
        v27 = v34 + 1;
        if (v34 + 1 < v113)
        {
          v35 = *(_QWORD *)(v112 + 8 * v27);
          if (v35)
            goto LABEL_24;
          v27 = v34 + 2;
          if (v34 + 2 < v113)
          {
            v35 = *(_QWORD *)(v112 + 8 * v27);
            if (!v35)
            {
              v36 = v34 + 3;
              if (v36 < v113)
              {
                v35 = *(_QWORD *)(v112 + 8 * v36);
                if (v35)
                {
                  v27 = v36;
                  goto LABEL_24;
                }
                while (1)
                {
                  v27 = v36 + 1;
                  if (__OFADD__(v36, 1))
                    goto LABEL_84;
                  if (v27 >= v113)
                    break;
                  v35 = *(_QWORD *)(v112 + 8 * v27);
                  ++v36;
                  if (v35)
                    goto LABEL_24;
                }
              }
              goto LABEL_74;
            }
LABEL_24:
            v31 = (v35 - 1) & v35;
            for (i = __clz(__rbit64(v35)) + (v27 << 6); ; i = v32 | (v27 << 6))
            {
              v37 = 16 * i;
              v38 = (uint64_t *)(*(_QWORD *)(v23 + 48) + v37);
              v39 = *v38;
              v40 = v38[1];
              v41 = (uint64_t *)(*(_QWORD *)(v23 + 56) + v37);
              v42 = v41[1];
              v119 = *v41;
              v126 = (_QWORD *)v39;
              v127 = v40;
              *(_QWORD *)&v123 = 45;
              *((_QWORD *)&v123 + 1) = 0xE100000000000000;
              sub_18C6E8838();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((sub_18C712078() & 1) != 0
                || (v117 = v42,
                    v114 = v39,
                    v126 = (_QWORD *)v39,
                    v127 = v40,
                    *(_QWORD *)&v123 = 95,
                    *((_QWORD *)&v123 + 1) = 0xE100000000000000,
                    (sub_18C712078() & 1) != 0))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (!v31)
                  goto LABEL_11;
                goto LABEL_10;
              }
              v111 = v40;
              v43 = objc_msgSend(v108, sel_sharedInstance, v97, v98, v99);
              v44 = (void *)sub_18C711E80();
              v45 = objc_msgSend(v43, sel_customSettingsForVoice_sourceKey_, v44, v101);

              if (v45)
              {
                v46 = sub_18C711E44();

                v121 = sub_18C711EA4();
                v122 = v47;
                sub_18C7120D8();
                if (*(_QWORD *)(v46 + 16) && (v48 = sub_18C6F94B8((uint64_t)&v126), (v49 & 1) != 0))
                {
                  sub_18C6D50FC(*(_QWORD *)(v46 + 56) + 32 * v48, (uint64_t)&v123);
                }
                else
                {
                  v123 = 0u;
                  v124 = 0u;
                }
                swift_bridgeObjectRelease();
                sub_18C6D50C8((uint64_t)&v126);
                if (*((_QWORD *)&v124 + 1))
                {
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
                  if ((swift_dynamicCast() & 1) != 0)
                  {
                    v115 = v31;
                    v116 = v27;
                    v50 = 0;
                    v51 = (uint64_t)v126;
                    v52 = v126[8];
                    v118 = v126 + 8;
                    v53 = 1 << *((_BYTE *)v126 + 32);
                    if (v53 < 64)
                      v54 = ~(-1 << v53);
                    else
                      v54 = -1;
                    v55 = v54 & v52;
                    v120 = (unint64_t)(v53 + 63) >> 6;
                    v56 = (_QWORD *)MEMORY[0x1E0DEE9E0];
                    while (2)
                    {
                      if (v55)
                      {
                        v57 = __clz(__rbit64(v55));
                        v55 &= v55 - 1;
                        v58 = v57 | (v50 << 6);
                      }
                      else
                      {
                        v59 = v50 + 1;
                        if (__OFADD__(v50, 1))
                          goto LABEL_81;
                        if (v59 >= v120)
                        {
                          swift_release();
                          v31 = v115;
                          v27 = v116;
                          goto LABEL_69;
                        }
                        v60 = v118[v59];
                        ++v50;
                        v31 = v115;
                        v27 = v116;
                        if (!v60)
                        {
                          v50 = v59 + 1;
                          if (v59 + 1 >= v120)
                            goto LABEL_72;
                          v60 = v118[v50];
                          if (!v60)
                          {
                            v50 = v59 + 2;
                            if (v59 + 2 >= v120)
                              goto LABEL_72;
                            v60 = v118[v50];
                            if (!v60)
                            {
                              v61 = v59 + 3;
                              if (v61 >= v120)
                              {
LABEL_72:
                                swift_release();
                                goto LABEL_69;
                              }
                              v60 = v118[v61];
                              if (!v60)
                              {
                                while (1)
                                {
                                  v50 = v61 + 1;
                                  if (__OFADD__(v61, 1))
                                    goto LABEL_83;
                                  if (v50 >= v120)
                                    goto LABEL_72;
                                  v60 = v118[v50];
                                  ++v61;
                                  if (v60)
                                    goto LABEL_55;
                                }
                              }
                              v50 = v61;
                            }
                          }
                        }
LABEL_55:
                        v55 = (v60 - 1) & v60;
                        v58 = __clz(__rbit64(v60)) + (v50 << 6);
                      }
                      v62 = (uint64_t *)(*(_QWORD *)(v51 + 48) + 16 * v58);
                      v64 = *v62;
                      v63 = v62[1];
                      v65 = *(void **)(*(_QWORD *)(v51 + 56) + 8 * v58);
                      swift_bridgeObjectRetain();
                      v66 = v65;
                      objc_msgSend(v66, sel_floatValue);
                      v68 = v67;
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v126 = v56;
                      v71 = sub_18C6F9454(v64, v63);
                      v72 = v56[2];
                      v73 = (v70 & 1) == 0;
                      v74 = v72 + v73;
                      if (__OFADD__(v72, v73))
                      {
                        __break(1u);
LABEL_80:
                        __break(1u);
LABEL_81:
                        __break(1u);
LABEL_82:
                        __break(1u);
LABEL_83:
                        __break(1u);
LABEL_84:
                        __break(1u);
LABEL_85:
                        __break(1u);
LABEL_86:
                        result = sub_18C71227C();
                        __break(1u);
                        return result;
                      }
                      v75 = v70;
                      if (v56[3] >= v74)
                      {
                        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                        {
                          v56 = v126;
                          if ((v70 & 1) == 0)
                            goto LABEL_63;
                        }
                        else
                        {
                          sub_18C6FBFD4();
                          v56 = v126;
                          if ((v75 & 1) == 0)
                            goto LABEL_63;
                        }
                      }
                      else
                      {
                        sub_18C6F9C48(v74, isUniquelyReferenced_nonNull_native);
                        v76 = sub_18C6F9454(v64, v63);
                        if ((v75 & 1) != (v77 & 1))
                          goto LABEL_86;
                        v71 = v76;
                        v56 = v126;
                        if ((v75 & 1) == 0)
                        {
LABEL_63:
                          v56[(v71 >> 6) + 8] |= 1 << v71;
                          v78 = (uint64_t *)(v56[6] + 16 * v71);
                          *v78 = v64;
                          v78[1] = v63;
                          *(_DWORD *)(v56[7] + 4 * v71) = v68;
                          v79 = v56[2];
                          v80 = __OFADD__(v79, 1);
                          v81 = v79 + 1;
                          if (v80)
                            goto LABEL_80;
                          v56[2] = v81;
                          swift_bridgeObjectRetain();
                          goto LABEL_39;
                        }
                      }
                      *(_DWORD *)(v56[7] + 4 * v71) = v68;
LABEL_39:

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      continue;
                    }
                  }
                  goto LABEL_69;
                }
              }
              else
              {
                v123 = 0u;
                v124 = 0u;
              }
              sub_18C6E87FC((uint64_t)&v123, &qword_1ECE66E50);
LABEL_69:
              v82 = (uint64_t)v103;
              sub_18C711A9C();
              LOBYTE(v126) = 1;
              v83 = v105;
              sub_18C711D30();
              v84 = (uint64_t)v106;
              (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v83, v110);
              v85 = v125;
              v86 = swift_isUniquelyReferenced_nonNull_native();
              v126 = (_QWORD *)v85;
              sub_18C6FB25C(v84, v82, v86);
              v125 = (uint64_t)v126;
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v82, v109);
              v23 = v100;
              if (!v31)
                goto LABEL_11;
LABEL_10:
              v32 = __clz(__rbit64(v31));
              v31 &= v31 - 1;
            }
          }
        }
      }
LABEL_74:
      swift_release();
      goto LABEL_75;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_75:
  v87 = sub_18C71203C();
  v88 = (id)AXTTSLogCommon();
  if (!v88)
    goto LABEL_85;
  v89 = v88;
  v90 = v87;
  if (os_log_type_enabled(v88, v87))
  {
    v91 = (uint8_t *)swift_slowAlloc();
    v92 = swift_slowAlloc();
    v126 = (_QWORD *)v92;
    *(_DWORD *)v91 = 136315138;
    swift_beginAccess();
    sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    swift_bridgeObjectRetain();
    v93 = sub_18C711E50();
    v95 = v94;
    swift_bridgeObjectRelease();
    v121 = sub_18C70197C(v93, v95, (uint64_t *)&v126);
    sub_18C712060();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18C62B000, v89, v90, "Migrating general selections to %s", v91, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D7869F0](v92, -1, -1);
    MEMORY[0x18D7869F0](v91, -1, -1);
  }

  swift_beginAccess();
  return v125;
}

uint64_t sub_18C6E521C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v40 = a6;
  v41 = a8;
  v47 = a4;
  v48 = a5;
  v45 = a10;
  v43 = a9;
  v44 = sub_18C711D84();
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v14);
  v39 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v37 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (uint64_t *)((char *)&v36 - v26);
  v46 = a7;
  sub_18C6D5138(a7, (uint64_t)v19, &qword_1EE0438E0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  v38 = a11;
  v36 = a2;
  if (v28 == 1)
  {
    v49 = 0x65764F6563696F76;
    v50 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v29 = v50;
    *v27 = v49;
    v27[1] = v29;
    v27[2] = 0;
    v27[3] = 0;
    v30 = v21;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v27, *MEMORY[0x1E0CF2F50], v20);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  }
  else
  {
    v30 = v21;
    (*(void (**)(_QWORD *, char *, uint64_t))(v21 + 32))(v27, v19, v20);
  }
  if (v48)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v49 = 0x65764F6563696F56;
    v50 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v47 = v49;
    v48 = v50;
  }
  v38 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(v38);
  v53 = a1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 16))(v37, v27, v20);
  v31 = v42;
  v33 = v44;
  v32 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v45, v44);
  v51 = sub_18C711C70();
  v52 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v49);
  swift_bridgeObjectRetain();
  sub_18C711C64();
  v34 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  sub_18C6E87FC(v46, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v27, v20);
  return v34;
}

uint64_t sub_18C6E5584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v39 = a6;
  v40 = a8;
  v46 = a4;
  v47 = a5;
  v44 = a10;
  v42 = a9;
  v43 = sub_18C711D84();
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v13);
  v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_18C711DA8();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (uint64_t *)((char *)&v36 - v26);
  v45 = a7;
  sub_18C6D5138(a7, (uint64_t)v18, &qword_1EE0438E0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  v36 = a2;
  v37 = v24;
  if (v28 == 1)
  {
    v48 = 0x65764F6563696F76;
    v49 = 0xE900000000000072;
    sub_18C711EB0();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v29 = v49;
    *v27 = v48;
    v27[1] = v29;
    v27[2] = 0;
    v27[3] = 0;
    v30 = v20;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v27, *MEMORY[0x1E0CF2F50], v19);
    sub_18C6E87FC((uint64_t)v18, &qword_1EE0438E0);
  }
  else
  {
    v30 = v20;
    (*(void (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v27, v18, v19);
  }
  if (v47)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0x65764F6563696F56;
    v49 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v46 = v48;
    v47 = v49;
  }
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D30);
  v52 = a1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 16))(v37, v27, v19);
  v31 = v41;
  v33 = v43;
  v32 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v38, v44, v43);
  v50 = sub_18C711C70();
  v51 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v48);
  swift_bridgeObjectRetain();
  sub_18C711C64();
  v34 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  sub_18C6E87FC(v45, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v27, v19);
  return v34;
}

uint64_t sub_18C6E58E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v51 = a5;
  v40 = a4;
  v44 = a2;
  v47 = a7;
  v48 = a10;
  v46 = a9;
  v49 = sub_18C711D84();
  v45 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v15);
  v43 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_18C711DA8();
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v41 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (uint64_t *)((char *)&v38 - v27);
  v50 = a8;
  sub_18C6D5138(a8, (uint64_t)v20, &qword_1EE0438E0);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v42 = a1;
  v39 = a3;
  if (v29 != 1)
  {
    v31 = v22;
    (*(void (**)(_QWORD *, char *, uint64_t))(v22 + 32))(v28, v20, v21);
    v32 = v21;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v52 = 0x65764F6563696F56;
    v53 = 0xE900000000000072;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v51 = v52;
    v40 = v53;
    goto LABEL_6;
  }
  v52 = 0x65764F6563696F76;
  v53 = 0xE900000000000072;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v30 = v53;
  *v28 = v52;
  v28[1] = v30;
  v28[2] = 0;
  v28[3] = 0;
  v31 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v28, *MEMORY[0x1E0CF2F50], v21);
  sub_18C6E87FC((uint64_t)v20, &qword_1EE0438E0);
  v32 = v21;
  if (!a6)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
  v40 = a6;
LABEL_6:
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D28);
  v56 = v42;
  v57 = v44;
  v33 = v31;
  (*(void (**)(char *, _QWORD *, uint64_t))(v31 + 16))(v41, v28, v32);
  v34 = v45;
  v35 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, a11, v49);
  v54 = sub_18C711C70();
  v55 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v52);
  swift_bridgeObjectRetain();
  sub_18C711C64();
  v36 = sub_18C711DD8();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a11, v35);
  sub_18C6E87FC(v50, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v28, v32);
  return v36;
}

uint64_t sub_18C6E5C64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C6E5D7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043BD8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C6E5E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t result;
  id v14;
  unint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  __int128 v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  int v59;
  int v60;
  char isUniquelyReferenced_nonNull_native;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE v81[16];
  _BYTE *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  id v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v0 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v1 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x1E0C80A78](v0, v2);
  v5 = &v81[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v81[-v7];
  if (qword_1EE042CD8 != -1)
    goto LABEL_77;
LABEL_2:
  v9 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  v10 = *(void **)((char *)*v9 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver___oldDomainRotors);
  v11 = *v9;
  v12 = v10;
  sub_18C711DFC();

  result = v103;
  if ((_QWORD)v103)
    return result;
  v14 = (id)objc_opt_self();
  v15 = (unint64_t)&selRef_setCategory_withOptions_error_;
  v16 = objc_msgSend(v14, sel_sharedInstance);
  v17 = objc_msgSend(v16, sel_voiceOverLanguageRotorItems);

  if (!v17)
    return MEMORY[0x1E0DEE9D8];
  v18 = MEMORY[0x1E0DEE9B8];
  v19 = sub_18C711F4C();

  v20 = sub_18C7034CC(v19);
  swift_bridgeObjectRelease();
  if (!v20)
    return MEMORY[0x1E0DEE9D8];
  v96 = *(_QWORD *)(v20 + 16);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v21 = 0;
  v98 = v20 + 32;
  v94 = MEMORY[0x1E0DEE9D8];
  v89 = *MEMORY[0x1E0CF37F0];
  v87 = *MEMORY[0x1E0DBEF60];
  v86 = v18 + 8;
  v22 = v96;
  while (1)
  {
    if (v21 >= *(_QWORD *)(v20 + 16))
    {
      __break(1u);
LABEL_77:
      swift_once();
      goto LABEL_2;
    }
    v23 = *(_QWORD *)(v98 + 8 * v21);
    if (*(_QWORD *)(v23 + 16))
    {
      swift_bridgeObjectRetain();
      v24 = sub_18C6F9454(0x64656C62616E45, 0xE700000000000000);
      if ((v25 & 1) == 0
        || (sub_18C6E87C0(*(_QWORD *)(v23 + 56) + 40 * v24, (uint64_t)&v103), (swift_dynamicCast() & 1) == 0)
        || (v101 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      if (*(_QWORD *)(v23 + 16) && (v26 = sub_18C6F9454(0x657449726F746F52, 0xE90000000000006DLL), (v27 & 1) != 0))
      {
        sub_18C6E87C0(*(_QWORD *)(v23 + 56) + 40 * v26, (uint64_t)&v103);
      }
      else
      {
        v105 = 0;
        v103 = 0u;
        v104 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v104 + 1))
      {
        sub_18C6E87FC((uint64_t)&v103, &qword_1EE042CB8);
        goto LABEL_8;
      }
      if ((swift_dynamicCast() & 1) != 0)
        break;
    }
LABEL_8:
    if (++v21 == v22)
    {
      swift_bridgeObjectRelease();
      return v94;
    }
  }
  v88 = v20;
  v28 = v101;
  v91 = v14;
  v29 = objc_msgSend(v14, (SEL)(v15 + 1608));
  v30 = (void *)sub_18C711E80();
  v31 = objc_msgSend(v29, sel_speechVoiceIdentifierForLanguageWithoutFallback_sourceKey_, v30, v89);

  if (!v31)
  {
    swift_bridgeObjectRelease();
    v22 = v96;
    v14 = v91;
    v15 = 0x1F25DB000;
LABEL_70:
    enableVoicesRotor()();
    v20 = v88;
    goto LABEL_8;
  }
  v32 = sub_18C711EA4();
  v34 = objc_msgSend(v91, sel_sharedInstance, v33, v32);
  v90 = v28;
  v35 = (void *)sub_18C711E80();
  objc_msgSend(v34, sel_voiceOverSpeakingRateForLanguage_, v35);

  v36 = objc_msgSend(v91, sel_sharedInstance);
  v37 = objc_msgSend(v36, sel_customSettingsForVoice_sourceKey_, v31, v89);

  v85 = v0;
  v84 = v1;
  v83 = v5;
  v82 = v8;
  if (!v37)
  {
    v101 = 0u;
    v102 = 0u;
    v22 = v96;
LABEL_64:
    sub_18C6E87FC((uint64_t)&v101, &qword_1ECE66E50);
    goto LABEL_65;
  }
  v38 = sub_18C711E44();

  v99 = sub_18C711EA4();
  v100 = v39;
  sub_18C7120D8();
  if (*(_QWORD *)(v38 + 16) && (v40 = sub_18C6F94B8((uint64_t)&v103), (v41 & 1) != 0))
  {
    sub_18C6D50FC(*(_QWORD *)(v38 + 56) + 32 * v40, (uint64_t)&v101);
  }
  else
  {
    v101 = 0u;
    v102 = 0u;
  }
  v22 = v96;
  swift_bridgeObjectRelease();
  sub_18C6D50C8((uint64_t)&v103);
  if (!*((_QWORD *)&v102 + 1))
    goto LABEL_64;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_65:
    *(_QWORD *)&v103 = 0;
    *((_QWORD *)&v103 + 1) = 0xE000000000000000;
    sub_18C7120FC();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v103 = 0x6574617267696D5FLL;
    *((_QWORD *)&v103 + 1) = 0xEF5F676E616C5F64;
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v75 = *((_QWORD *)&v103 + 1);
    v74 = v103;
    v0 = v85;
    v5 = v83;
    LOBYTE(v103) = 1;
    sub_18C711D30();
    v76 = (_QWORD *)((char *)v5 + *(int *)(v0 + 24));
    *v5 = v74;
    v5[1] = v75;
    *v76 = 0;
    v76[1] = 0;
    v8 = v82;
    sub_18C6D9354((uint64_t)v5, (uint64_t)v82);
    v77 = v94;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v77 = sub_18C6E1D0C(0, *(_QWORD *)(v77 + 16) + 1, 1, v77);
    v1 = v84;
    v14 = v91;
    v15 = 0x1F25DB000uLL;
    v94 = v77;
    v79 = *(_QWORD *)(v77 + 16);
    v78 = *(_QWORD *)(v77 + 24);
    if (v79 >= v78 >> 1)
      v94 = sub_18C6E1D0C(v78 > 1, v79 + 1, 1, v94);
    v80 = v94;
    *(_QWORD *)(v94 + 16) = v79 + 1;
    sub_18C6D9398((uint64_t)v8, v80+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v79);
    sub_18C6DC51C((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    goto LABEL_70;
  }
  v42 = 0;
  v43 = *(_QWORD *)(v103 + 64);
  v92 = v103 + 64;
  v95 = v103;
  v44 = 1 << *(_BYTE *)(v103 + 32);
  if (v44 < 64)
    v45 = ~(-1 << v44);
  else
    v45 = -1;
  v46 = v45 & v43;
  v93 = (unint64_t)(v44 + 63) >> 6;
  v47 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (2)
  {
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v97 = v42;
      v49 = v48 | (v42 << 6);
    }
    else
    {
      v50 = v42 + 1;
      if (__OFADD__(v42, 1))
        goto LABEL_80;
      if (v50 >= v93)
      {
LABEL_71:
        swift_release();
        goto LABEL_65;
      }
      v51 = *(_QWORD *)(v92 + 8 * v50);
      v52 = v42 + 1;
      if (!v51)
      {
        v52 = v42 + 2;
        if (v42 + 2 >= v93)
          goto LABEL_71;
        v51 = *(_QWORD *)(v92 + 8 * v52);
        if (!v51)
        {
          v52 = v42 + 3;
          if (v42 + 3 >= v93)
            goto LABEL_71;
          v51 = *(_QWORD *)(v92 + 8 * v52);
          if (!v51)
          {
            v53 = v42 + 4;
            if (v42 + 4 >= v93)
              goto LABEL_71;
            v51 = *(_QWORD *)(v92 + 8 * v53);
            if (!v51)
            {
              while (1)
              {
                v52 = v53 + 1;
                if (__OFADD__(v53, 1))
                  goto LABEL_81;
                if (v52 >= v93)
                  goto LABEL_71;
                v51 = *(_QWORD *)(v92 + 8 * v52);
                ++v53;
                if (v51)
                  goto LABEL_51;
              }
            }
            v52 = v42 + 4;
          }
        }
      }
LABEL_51:
      v46 = (v51 - 1) & v51;
      v97 = v52;
      v49 = __clz(__rbit64(v51)) + (v52 << 6);
    }
    v54 = (uint64_t *)(*(_QWORD *)(v95 + 48) + 16 * v49);
    v55 = *v54;
    v56 = v54[1];
    v57 = *(void **)(*(_QWORD *)(v95 + 56) + 8 * v49);
    swift_bridgeObjectRetain();
    v58 = v57;
    objc_msgSend(v58, sel_floatValue);
    v60 = v59;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v103 = v47;
    v63 = sub_18C6F9454(v55, v56);
    v64 = v47[2];
    v65 = (v62 & 1) == 0;
    v66 = v64 + v65;
    if (!__OFADD__(v64, v65))
    {
      v67 = v62;
      if (v47[3] >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v47 = (_QWORD *)v103;
          if ((v62 & 1) == 0)
            goto LABEL_59;
        }
        else
        {
          sub_18C6FBFD4();
          v47 = (_QWORD *)v103;
          if ((v67 & 1) == 0)
            goto LABEL_59;
        }
      }
      else
      {
        sub_18C6F9C48(v66, isUniquelyReferenced_nonNull_native);
        v68 = sub_18C6F9454(v55, v56);
        if ((v67 & 1) != (v69 & 1))
          goto LABEL_82;
        v63 = v68;
        v47 = (_QWORD *)v103;
        if ((v67 & 1) == 0)
        {
LABEL_59:
          v47[(v63 >> 6) + 8] |= 1 << v63;
          v70 = (uint64_t *)(v47[6] + 16 * v63);
          *v70 = v55;
          v70[1] = v56;
          *(_DWORD *)(v47[7] + 4 * v63) = v60;
          v71 = v47[2];
          v72 = __OFADD__(v71, 1);
          v73 = v71 + 1;
          if (v72)
            goto LABEL_79;
          v47[2] = v73;
          swift_bridgeObjectRetain();
          goto LABEL_35;
        }
      }
      *(_DWORD *)(v47[7] + 4 * v63) = v60;
LABEL_35:
      v22 = v96;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = v97;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6E68EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_18C712030();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_18C6E22EC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_18C6E6980(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_18C6E69C4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x18D786960](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18C6E6A04(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AXSSVoiceOverTextualContext(0);
  sub_18C6D2488(&qword_1ECE670D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&protocol conformance descriptor for AXSSVoiceOverTextualContext);
  result = sub_18C712030();
  v7 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_18C6E2498(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_18C6E6AA8()
{
  unint64_t result;

  result = qword_1ECE67108;
  if (!qword_1ECE67108)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECE67108);
  }
  return result;
}

uint64_t type metadata accessor for AXPreferences.VoiceOver()
{
  return objc_opt_self();
}

uint64_t sub_18C6E6B04(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C98, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver);
}

void sub_18C6E6B30(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage, a2);
}

void sub_18C6E6B4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D3218(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
}

void sub_18C6E6B68(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors, a2);
}

void sub_18C6E6B84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D3218(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
}

double sub_18C6E6BA0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier, a2);
}

void sub_18C6E6BBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
}

void sub_18C6E6BD8(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled, a2);
}

void sub_18C6E6BF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__largeCursorEnabled);
}

void sub_18C6E6C18(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation, a2);
}

void sub_18C6E6C34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useDigitalCrownNavigation);
}

void sub_18C6E6C50(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled, a2);
}

void sub_18C6E6C6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__imageCaptionsEnabled);
}

void sub_18C6E6C88(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation, a2);
}

void sub_18C6E6CA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
}

void sub_18C6E6CC8(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled, a2);
}

void sub_18C6E6CE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
}

void sub_18C6E6D00(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent, a2);
}

void sub_18C6E6D1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
}

void sub_18C6E6D38(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode, a2);
}

void sub_18C6E6D54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D7F30(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputMode);
}

void sub_18C6E6D70(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode, a2);
}

void sub_18C6E6D8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D7F30(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputMode);
}

void sub_18C6E6DA8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode, a2);
}

void sub_18C6E6DC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D7F30(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputMode);
}

double sub_18C6E6DE8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier, a2);
}

void sub_18C6E6E04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
}

double sub_18C6E6E20@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier, a2);
}

void sub_18C6E6E3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
}

double sub_18C6E6E58@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier, a2);
}

void sub_18C6E6E74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
}

void sub_18C6E6E90(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled, a2);
}

void sub_18C6E6EAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
}

void sub_18C6E6EC8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption, a2);
}

void sub_18C6E6EE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D7F30(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesSoundOption);
}

void sub_18C6E6F00(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback, a2);
}

void sub_18C6E6F1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
}

void sub_18C6E6F38(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback, a2);
}

void sub_18C6E6F54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
}

void sub_18C6E6F70(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText, a2);
}

void sub_18C6E6F8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
}

void sub_18C6E6FA8(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields, a2);
}

void sub_18C6E6FC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
}

void sub_18C6E6FE8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18C6D31CC(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities, a2);
}

void sub_18C6E7004(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D3218(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__activities);
}

double sub_18C6E7020@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId, a2);
}

void sub_18C6E703C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedActivityId);
}

void sub_18C6E7058(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled, a2);
}

void sub_18C6E7074(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__languageDetectionEnabled);
}

void sub_18C6E7090(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled, a2);
}

void sub_18C6E70AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__pitchChangeEnabled);
}

double sub_18C6E70C8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18C6D8C94(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage, a2);
}

void sub_18C6E70E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D8CE0(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__selectedLanguage);
}

void sub_18C6E7100(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled, a2);
}

void sub_18C6E711C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__speakUpEnabled);
}

uint64_t method lookup function for AXPreferences.VoiceOver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$defaultVoiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.voiceRotors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.voiceRotors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.voiceRotors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$voiceRotors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.currentRotorVoiceIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$currentRotorVoiceIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.largeCursorEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.largeCursorEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.largeCursorEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$largeCursorEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.contentDescriptionLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.contentDescriptionLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.contentDescriptionLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$contentDescriptionLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useDigitalCrownNavigation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useDigitalCrownNavigation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useDigitalCrownNavigation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$useDigitalCrownNavigation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.imageCaptionsEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.imageCaptionsEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.imageCaptionsEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$imageCaptionsEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useTVToggleStyleNavigation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useTVToggleStyleNavigation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.useTVToggleStyleNavigation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$useTVToggleStyleNavigation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$continuousPathKeyboardStartTimeout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.hearingAidRoutingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.hearingAidRoutingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.hearingAidRoutingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$hearingAidRoutingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$braillePanningAutoTurnsReadingContent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleDisplayOutputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleDisplayInputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesInputMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleDisplaySyncInputOutputTables.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleDisplayInputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleDisplayOutputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesInputTableIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesActivationGestureEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesSoundOption.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesSoundOption.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesSoundOption.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesSoundOption.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesUsesHapticFeedback.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesUsesTypingSoundFeedback.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x430))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesDisplayEnteredText.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$brailleGesturesAutoActivateOnTextFields.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultPunctuationGroup.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultPunctuationGroup.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultPunctuationGroup.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$defaultPunctuationGroup.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.activities.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.activities.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.activities.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$activities.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedActivityId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedActivityId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedActivityId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$selectedActivityId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.languageDetectionEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.languageDetectionEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.languageDetectionEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$languageDetectionEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.pitchChangeEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.pitchChangeEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.pitchChangeEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$pitchChangeEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x518))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$selectedLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.speakUpEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.speakUpEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.speakUpEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x548))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.$speakUpEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.currentVoiceRotor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.systemDefaultVoiceSelection()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x560);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D4460;
  return v7(a1);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x568);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_18C6D517C;
  return v11(a1, a2, a3);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x570))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.speechVoiceIdentifier(forLanguage:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x578);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18C6D410C;
  return v9(a1, a2);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.set(voiceId:forLanguage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x580);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_18C6D517C;
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.set(voiceId:forLanguage:rate:volume:pitch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x588))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.effectiveSpeakingRate()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x590);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_18C6E896C;
  return v5();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.effectiveSpeakingRate(currentRotor:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x598);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6E8224;
  return v7(a1);
}

uint64_t sub_18C6E8224(float a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(float))(v4 + 8))(a1);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.setEffectiveSpeakingRate(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(float);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5A0);
  v7 = (uint64_t (*)(float))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D517C;
  return v7(a1);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.setEffectiveSpeakingRate(currentRotor:value:)(uint64_t a1, float a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, float);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5A8);
  v9 = (uint64_t (*)(uint64_t, float))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18C6D517C;
  return v9(a1, a2);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.client.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5B0))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.selectedVoiceIdentifiers()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5B8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_18C6D3F50;
  return v5();
}

uint64_t sub_18C6E83EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_18C6E8420()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  float v3;
  void *v4;
  const void *v5;
  _QWORD *v6;

  v2 = *(void **)(v0 + 16);
  v3 = *(float *)(v0 + 24);
  v5 = *(const void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_18C6D517C;
  return ((uint64_t (*)(void *, const void *, void *, float))((char *)&dword_1EE043C30 + dword_1EE043C30))(v2, v5, v4, v3);
}

uint64_t sub_18C6E84A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_18C6E84D0()
{
  uint64_t v0;
  uint64_t v1;
  float v2;
  const void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(float *)(v0 + 16);
  v3 = *(const void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D517C;
  return ((uint64_t (*)(const void *, void *, float))((char *)&dword_1EE043C40 + dword_1EE043C40))(v3, v4, v2);
}

uint64_t sub_18C6E8548()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  const void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (const void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D517C;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&dword_1EE043C60 + dword_1EE043C60))(v2, v3, v4);
}

uint64_t sub_18C6E85BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_18C6E85E8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_18C6D517C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE043C80 + dword_1EE043C80))(v2, v3);
}

uint64_t sub_18C6E8654()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_18C6E8690()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_18C6D517C;
  return ((uint64_t (*)(uint64_t, int, void *, void *))((char *)&dword_1EE043CA0 + dword_1EE043CA0))(v2, v3, v5, v4);
}

uint64_t objectdestroy_111Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_18C6E8748()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D517C;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1EE043CC0 + dword_1EE043CC0))(v2, v3, v4);
}

uint64_t sub_18C6E87C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_18C6E87FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_18C6E8838()
{
  unint64_t result;

  result = qword_1ECE66E48;
  if (!qword_1ECE66E48)
  {
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ECE66E48);
  }
  return result;
}

uint64_t sub_18C6E887C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C6E8978@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return sub_18C6E8A94(v4, v5);
}

uint64_t sub_18C6E89CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(*a2 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *v4 = v2;
  v4[1] = v3;
  sub_18C6E8A94(v2, v3);
  return sub_18C6E8B00(v5, v6);
}

uint64_t sub_18C6E8A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_18C6E8A94(v4, v5);
}

uint64_t sub_18C6E8A94(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_18C6E8AA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *v4 = v2;
  v4[1] = v3;
  return sub_18C6E8B00(v5, v6);
}

uint64_t sub_18C6E8B00(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t (*sub_18C6E8B14())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_18C6E8B5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18C6EB0C0();
  *a1 = result;
  return result;
}

void sub_18C6E8B80(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18C711DFC();

  *a2 = v4;
}

void sub_18C6E8BD0(uint64_t a1, _QWORD *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*a2 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections);
  swift_bridgeObjectRetain();
  v3 = v2;
  sub_18C711E08();

}

uint64_t sub_18C6E8C20()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18C711DFC();

  return v3;
}

void sub_18C6E8C64()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18C711E08();

}

uint64_t (*sub_18C6E8CA8(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6E8D08()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6E8D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D78);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D80);
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6E8DFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[3];
  v2 = v0[2];
  v3 = objc_retain(*(id *)(v0[4]
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  v4 = (void *)sub_18C711E14();

  sub_18C711E2C();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v1;
  v0[12] = sub_18C711D54();
  swift_bridgeObjectRetain();
  sub_18C711FAC();
  swift_release();
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = sub_18C6E8F08;
  return sub_18C711FB8();
}

uint64_t sub_18C6E8F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_18C6E8F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_18C6E87FC(v1, &qword_1EE043B28);
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v4 = sub_18C711D3C();
    v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v5);
}

uint64_t AsyncStream<A>.selection(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D78);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6E90BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[4];
  v2 = v0[3];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D80);
  sub_18C711D54();
  sub_18C711FAC();
  swift_release();
  v4 = (_QWORD *)swift_task_alloc();
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_18C6E9190;
  return sub_18C711FB8();
}

uint64_t sub_18C6E9190()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 64);
  v2 = *(_QWORD *)(*v0 + 48);
  v3 = *(_QWORD *)(*v0 + 56);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_18C6E932C(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_18C711EA4();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_18C6E93B8;
  return sub_18C6E8D44(v5, v7);
}

uint64_t sub_18C6E93B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a2)
  {
    v7 = (void *)sub_18C711E80();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void (***)(_QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, void *))v8)[2](v8, v7);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

float sub_18C6E9468@<S0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  id v3;
  float result;
  float v5;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18C711DFC();

  result = v5;
  *a2 = v5;
  return result;
}

void sub_18C6E94B8(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18C711E08();

}

float sub_18C6E9504()
{
  uint64_t v0;
  id v1;
  float v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18C711DFC();

  return v3;
}

void sub_18C6E9548()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18C711E08();

}

uint64_t (*sub_18C6E958C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C6E95EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C6E9628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(unint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = sub_18C711C04();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_18C711B74();
  MEMORY[0x1E0C80A78](v5, v6);
  v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech____lazy_storage___resolver;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech____lazy_storage___resolver))
  {
    v12 = *(_QWORD *)(v0
                    + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech____lazy_storage___resolver);
  }
  else
  {
    v25 = v8;
    v26 = v7;
    v28 = sub_18C711B8C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CF8);
    v13 = sub_18C711B44();
    v27 = v0;
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_18C737A80;
    v18 = v17 + v16;
    sub_18C711BEC();
    v19 = *MEMORY[0x1E0DBED50];
    v20 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 104);
    v20(v18, v19, v13);
    sub_18C711BE0();
    v20(v18 + v15, v19, v13);
    v24 = v4;
    sub_18C711BC8();
    v20(v18 + 2 * v15, v19, v13);
    sub_18C711BD4();
    v20(v18 + 3 * v15, v19, v13);
    v20(v18 + 4 * v15, *MEMORY[0x1E0DBED58], v13);
    v20(v18 + 5 * v15, *MEMORY[0x1E0DBED48], v13);
    *v10 = v17;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v25 + 104))(v10, *MEMORY[0x1E0DBED90], v26);
    v21 = sub_18C711C40();
    v22 = sub_18C711C34();
    v30 = v21;
    v31 = MEMORY[0x1E0DBEE98];
    v29 = v22;
    sub_18C711BF8();
    v12 = sub_18C711B50();
    *(_QWORD *)(v27 + v11) = v12;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v12;
}

uint64_t sub_18C6E989C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_18C711B08();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v4 = swift_task_alloc();
  v2[7] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v5 = (_QWORD *)swift_task_alloc();
  v2[10] = v5;
  *v5 = v2;
  v5[1] = sub_18C6E9964;
  return sub_18C6E9E40(v4);
}

uint64_t sub_18C6E9964()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6E99B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  v0[11] = sub_18C6E9628();
  v3 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_18C6E9A2C;
  return v3(v0[9], v0[7]);
}

uint64_t sub_18C6E9A2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 56);
  v3 = *(_QWORD *)(*v0 + 32);
  v4 = *(_QWORD *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 104) = v5;
  v5(v2, v3);
  return swift_task_switch();
}

uint64_t sub_18C6E9AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = sub_18C711C28();
  *(_QWORD *)(v0 + 112) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 120) = v3;
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(_QWORD *)(v0 + 128) = v4;
  if (v4(v1, 1, v2) == 1)
  {
    sub_18C6E87FC(v1, &qword_1EE042CE8);
    sub_18C711A60();
    *(_QWORD *)(v0 + 136) = sub_18C6E9628();
    v7 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v5;
    *v5 = v0;
    v5[1] = sub_18C6E9BF4;
    return v7(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 16), v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C6E9BF4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  return swift_task_switch();
}

uint64_t sub_18C6E9C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 128))(v2, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 16), v2, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_18C6E9D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_18C6E9D2C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  v0[5] = sub_18C6E9628();
  v3 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = sub_18C6E9D9C;
  return v3(v0[2], v0[3]);
}

uint64_t sub_18C6E9D9C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18C6E9DEC()
{
  return sub_18C6E9E04(MEMORY[0x1E0DBEDB8]);
}

uint64_t sub_18C6E9DF8()
{
  return sub_18C6E9E04((void (*)(void))MEMORY[0x1E0DBED80]);
}

uint64_t sub_18C6E9E04(void (*a1)(void))
{
  sub_18C6E9628();
  a1();
  return swift_release();
}

uint64_t sub_18C6E9E40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_18C711B08();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B68);
  v2[7] = v4;
  v2[8] = *(_QWORD *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B70);
  v2[10] = v5;
  v2[11] = *(_QWORD *)(v5 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6E9F3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  sub_18C6E9628();
  sub_18C711B68();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_18C6E69C4(&qword_1EE042B78, &qword_1EE042B70, MEMORY[0x1E0DF0848]);
  sub_18C712000();
  sub_18C6E69C4(&qword_1EE042B60, &qword_1EE042B68, MEMORY[0x1E0DF0830]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[16] = v5;
  *v5 = v0;
  v5[1] = sub_18C6EA034;
  return sub_18C711F64();
}

uint64_t sub_18C6EA034()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);
  else
    return swift_task_switch();
}

uint64_t sub_18C6EA0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v4(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 56);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v11(v10, v1, v2);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v11(v6, v10, v2);
    v5 = 0;
  }
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 40) + 56))(v12, v5, 1, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(v12, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

id AXPreferences.LiveSpeech.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AXPreferences.LiveSpeech.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  objc_super v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)&v0[OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client] = xmmword_18C737A90;
  v5 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__keyboardVoiceSelections;
  v6 = v0;
  v7 = sub_18C6D2AB0(MEMORY[0x1E0DEE9D8]);
  v8 = sub_18C711DA8();
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v4, 1, 1, v8);
  v10 = sub_18C6EB534(v7, 0xD000000000000017, 0x800000018C735440, 0, 0, 6, (uint64_t)v4, (uint64_t)sub_18C6E8B5C, 0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v0[v5] = v10;
  v11 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance;
  v9(v4, 1, 1, v8);
  *(_QWORD *)&v6[v11] = sub_18C6EAD44(0.8, 0x446C616974617073, 0xEF65636E61747369, 0, 0, 6, (uint64_t)v4, 0, 0);
  *(_QWORD *)&v6[OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech____lazy_storage___resolver] = 0;

  v12 = (objc_class *)type metadata accessor for AXPreferences.LiveSpeech();
  v14.receiver = v6;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, sel_init);
}

id AXPreferences.LiveSpeech.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.LiveSpeech();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C6EA488@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences10LiveSpeech_client);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_18C6E8A94(v4, v5);
}

uint64_t AsyncStream<A>.voiceSelectionStream(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D80);
  sub_18C711D54();
  sub_18C711FAC();
  return swift_release();
}

uint64_t sub_18C6EA56C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[9] = a3;
  v4[10] = a4;
  v4[8] = a1;
  v6 = sub_18C711B08();
  v4[11] = v6;
  v4[12] = *(_QWORD *)(v6 - 8);
  v4[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE8);
  v4[14] = swift_task_alloc();
  v7 = sub_18C711C28();
  v4[15] = v7;
  v4[16] = *(_QWORD *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v4[19] = swift_task_alloc();
  v8 = sub_18C711D54();
  v4[20] = v8;
  v4[21] = *(_QWORD *)(v8 - 8);
  v9 = swift_task_alloc();
  v10 = *a2;
  v4[22] = v9;
  v4[23] = v10;
  return swift_task_switch();
}

uint64_t sub_18C6EA680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v21)(_QWORD, _QWORD);

  if (*(_QWORD *)(*(_QWORD *)(v0 + 184) + 16))
  {
    v2 = *(_QWORD *)(v0 + 72);
    v1 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    v3 = sub_18C6F9454(v2, v1);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v0 + 160);
      v6 = *(_QWORD *)(v0 + 168);
      v7 = *(_QWORD *)(v0 + 152);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v7, *(_QWORD *)(*(_QWORD *)(v0 + 184) + 56) + *(_QWORD *)(v6 + 72) * v3, v5);
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v8(v7, 0, 1, v5);
    }
    else
    {
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 56);
      v8(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
    }
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) != 1)
    {
      v17 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 160);
      v19 = *(_QWORD *)(v0 + 64);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
      v20(v17, *(_QWORD *)(v0 + 152), v18);
      v20(v19, v17, v18);
      v8(v19, 0, 1, v18);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 56);
    v8(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  }
  *(_QWORD *)(v0 + 192) = v8;
  sub_18C6E87FC(*(_QWORD *)(v0 + 152), &qword_1EE043B28);
  if (qword_1EE042CD8 != -1)
    swift_once();
  v12 = (void **)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech);
  swift_beginAccess();
  v13 = *v12;
  *(_QWORD *)(v0 + 200) = v13;
  swift_bridgeObjectRetain();
  v14 = v13;
  sub_18C711AB4();
  *(_QWORD *)(v0 + 208) = sub_18C6E9628();
  v21 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v15;
  *v15 = v0;
  v15[1] = sub_18C6EA8F8;
  return v21(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
}

uint64_t sub_18C6EA8F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_18C6EA984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(v3, &qword_1EE042CE8);
    v4 = (void **)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech);
    swift_beginAccess();
    v5 = *v4;
    *(_QWORD *)(v0 + 224) = *v4;
    v5;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v6;
    *v6 = v0;
    v6[1] = sub_18C6EAB54;
    return sub_18C6E989C(*(_QWORD *)(v0 + 136));
  }
  else
  {
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 192);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v3, v1);
    sub_18C711BA4();
    sub_18C711D30();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v1);
    v8(v11, 0, 1, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C6EAB54()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 224);
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_18C6EABAC()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 64);
  sub_18C711BA4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_18C711D30();
  v1(v6, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6EACB4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18C6EACD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_18C6D517C;
  return sub_18C6EA56C(a1, a2, v7, v6);
}

uint64_t sub_18C6EAD44(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;

  v33 = a6;
  v34 = a8;
  v37 = a4;
  v32 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v32, v13);
  v31[1] = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_18C711DA8();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v31[0] = (char *)v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (_QWORD *)((char *)v31 - v25);
  sub_18C6D2528(a7, (uint64_t)v18);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  v35 = a9;
  v36 = a7;
  if (v27 != 1)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v26, v18, v19);
    if (a5)
      goto LABEL_3;
LABEL_5:
    v38 = 0x656570536576694CLL;
    v39 = 0xEA00000000006863;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v37 = v38;
    goto LABEL_6;
  }
  v38 = 0x656570536576696CLL;
  v39 = 0xEA00000000006863;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v28 = v39;
  *v26 = v38;
  v26[1] = v28;
  v26[2] = 0;
  v26[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v26, *MEMORY[0x1E0CF2F50], v19);
  sub_18C6E87FC((uint64_t)v18, &qword_1EE0438E0);
  if (!a5)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043D40);
  v42 = a1;
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(v20 + 16))(v31[0], v26, v19);
  v38 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  v40 = sub_18C711C70();
  v41 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v38);
  sub_18C711C64();
  v29 = sub_18C711DD8();
  sub_18C6E87FC(v36, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v26, v19);
  return v29;
}

uint64_t sub_18C6EB0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  _QWORD *v55;
  char v56;
  char v57;
  char v58;

  v0 = sub_18C711D54();
  v1 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x1E0C80A78](v0, v2);
  v54 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v5);
  v52 = (char *)&v48 - v6;
  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v8 = objc_msgSend(v7, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v8)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB0);
  v9 = sub_18C711E44();

  v10 = sub_18C711EA4();
  if (!*(_QWORD *)(v9 + 16) || (v12 = sub_18C6F9454(v10, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = 0;
  v16 = *(_QWORD *)(v14 + 64);
  v49 = v14 + 64;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v50 = (unint64_t)(v17 + 63) >> 6;
  v51 = v14;
  v20 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    if (v19)
    {
      v21 = v0;
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v53 = v15;
      v23 = v22 | (v15 << 6);
    }
    else
    {
      v24 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v24 >= v50)
      {
LABEL_37:
        swift_release();
        return (uint64_t)v20;
      }
      v25 = *(_QWORD *)(v49 + 8 * v24);
      v26 = v15 + 1;
      if (!v25)
      {
        v26 = v15 + 2;
        if (v15 + 2 >= v50)
          goto LABEL_37;
        v25 = *(_QWORD *)(v49 + 8 * v26);
        if (!v25)
        {
          v26 = v15 + 3;
          if (v15 + 3 >= v50)
            goto LABEL_37;
          v25 = *(_QWORD *)(v49 + 8 * v26);
          if (!v25)
          {
            v27 = v15 + 4;
            if (v15 + 4 >= v50)
              goto LABEL_37;
            v25 = *(_QWORD *)(v49 + 8 * v27);
            if (!v25)
            {
              while (1)
              {
                v26 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_41;
                if (v26 >= v50)
                  goto LABEL_37;
                v25 = *(_QWORD *)(v49 + 8 * v26);
                ++v27;
                if (v25)
                  goto LABEL_24;
              }
            }
            v26 = v15 + 4;
          }
        }
      }
LABEL_24:
      v21 = v0;
      v19 = (v25 - 1) & v25;
      v53 = v26;
      v23 = __clz(__rbit64(v25)) + (v26 << 6);
    }
    v28 = (uint64_t *)(*(_QWORD *)(v51 + 48) + 16 * v23);
    v30 = *v28;
    v29 = v28[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58 = 1;
    v57 = 1;
    v56 = 1;
    v31 = v52;
    sub_18C711D30();
    v32 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v32(v54, v31, v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v55 = v20;
    v35 = sub_18C6F9454(v30, v29);
    v36 = v20[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      break;
    v39 = v34;
    if (v20[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_18C6FC364();
    }
    else
    {
      sub_18C6FA260(v38, isUniquelyReferenced_nonNull_native);
      v40 = sub_18C6F9454(v30, v29);
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_42;
      v35 = v40;
    }
    v0 = v21;
    v42 = v55;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v1 + 40))(v55[7] + *(_QWORD *)(v1 + 72) * v35, v54, v21);
    }
    else
    {
      v55[(v35 >> 6) + 8] |= 1 << v35;
      v43 = (uint64_t *)(v42[6] + 16 * v35);
      *v43 = v30;
      v43[1] = v29;
      v32((char *)(v42[7] + *(_QWORD *)(v1 + 72) * v35), v54, v21);
      v44 = v42[2];
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_39;
      v42[2] = v46;
      swift_bridgeObjectRetain();
    }
    v20 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v53;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6EB534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v39 = a4;
  v32 = a1;
  v35 = a6;
  v36 = a9;
  v34 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v34, v12);
  v33 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_18C711DA8();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v31 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (uint64_t *)((char *)&v30 - v24);
  sub_18C6D2528(a7, (uint64_t)v17);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  v37 = a8;
  v38 = a7;
  if (v26 != 1)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 32))(v25, v17, v18);
    if (a5)
      goto LABEL_3;
LABEL_5:
    v40 = 0x656570536576694CLL;
    v41 = 0xEA00000000006863;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    v39 = v40;
    goto LABEL_6;
  }
  v40 = 0x656570536576696CLL;
  v41 = 0xEA00000000006863;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v27 = v41;
  *v25 = v40;
  v25[1] = v27;
  v25[2] = 0;
  v25[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v25, *MEMORY[0x1E0CF2F50], v18);
  sub_18C6E87FC((uint64_t)v17, &qword_1EE0438E0);
  if (!a5)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043E18);
  v44 = v32;
  (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 16))(v31, v25, v18);
  v40 = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6E69C4((unint64_t *)&qword_1EE043920, &qword_1EE043918, MEMORY[0x1E0DEAF38]);
  sub_18C71209C();
  v42 = sub_18C711C70();
  v43 = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(&v40);
  sub_18C711C64();
  v28 = sub_18C711DD8();
  sub_18C6E87FC(v38, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v25, v18);
  return v28;
}

uint64_t type metadata accessor for AXPreferences.LiveSpeech()
{
  return objc_opt_self();
}

uint64_t sub_18C6EB8D4(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C70, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.LiveSpeech, (uint64_t)&protocol conformance descriptor for AXPreferences.LiveSpeech);
}

uint64_t method lookup function for AXPreferences.LiveSpeech()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.client.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.client.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.client.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.selectedVoiceIdentifiers()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_18C6D3F50;
  return v5();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.keyboardVoiceSelections.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.keyboardVoiceSelections.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.keyboardVoiceSelections.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.$keyboardVoiceSelections.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.speechVoiceIdentifier(forKeyboard:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xB0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18C6D410C;
  return v9(a1, a2);
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.$visionOSLiveSpeechLaunchDistance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.systemDefaultVoice()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D4460;
  return v7(a1);
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.systemDefaultVoice(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF8);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18C6D517C;
  return v9(a1, a2);
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.installedSpeechLocales.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.systemSpokenLocaleStream.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AXPreferences.LiveSpeech.systemSpokenLocale()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D517C;
  return v7(a1);
}

uint64_t sub_18C6EBCEC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_18C6EBD20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D517C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE043E08 + dword_1EE043E08))(v2, v3, v4);
}

uint64_t sub_18C6EBD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,char a23,char a24,uint64_t a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,char a39,char a40)
{
  uint64_t v44;
  int *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v44 = sub_18C711A54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(a9, a1, v44);
  v45 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  v46 = (_QWORD *)(a9 + v45[5]);
  *v46 = a2;
  v46[1] = a3;
  *(_QWORD *)(a9 + v45[6]) = a4;
  *(_QWORD *)(a9 + v45[7]) = a5;
  sub_18C6E6980(a6, a9 + v45[8], &qword_1ECE67110);
  *(_BYTE *)(a9 + v45[9]) = a7;
  *(_BYTE *)(a9 + v45[10]) = a8;
  *(_BYTE *)(a9 + v45[11]) = a10;
  *(_BYTE *)(a9 + v45[12]) = a11;
  *(_BYTE *)(a9 + v45[13]) = a12;
  v47 = a9 + v45[14];
  *(_QWORD *)v47 = a13;
  *(_BYTE *)(v47 + 8) = a14 & 1;
  v48 = a9 + v45[15];
  *(_QWORD *)v48 = a15;
  *(_BYTE *)(v48 + 8) = a16 & 1;
  v49 = a9 + v45[16];
  *(_QWORD *)v49 = a17;
  *(_BYTE *)(v49 + 8) = a18 & 1;
  v50 = a9 + v45[17];
  *(_QWORD *)v50 = a19;
  *(_BYTE *)(v50 + 8) = a20 & 1;
  result = sub_18C6E6980(a21, a9 + v45[18], &qword_1EE043B28);
  *(_BYTE *)(a9 + v45[19]) = a22;
  *(_BYTE *)(a9 + v45[20]) = a23;
  *(_BYTE *)(a9 + v45[21]) = a24;
  v52 = a9 + v45[22];
  *(_QWORD *)v52 = a25;
  *(_BYTE *)(v52 + 8) = a26 & 1;
  *(_BYTE *)(a9 + v45[23]) = a27;
  *(_BYTE *)(a9 + v45[24]) = a28;
  v53 = (_QWORD *)(a9 + v45[25]);
  *v53 = a29;
  v53[1] = a30;
  v54 = (_QWORD *)(a9 + v45[26]);
  *v54 = a31;
  v54[1] = a32;
  v55 = a9 + v45[27];
  *(_QWORD *)v55 = a33;
  *(_BYTE *)(v55 + 8) = a34 & 1;
  v56 = a9 + v45[28];
  *(_QWORD *)v56 = a35;
  *(_BYTE *)(v56 + 8) = a36 & 1;
  v57 = a9 + v45[29];
  *(_QWORD *)v57 = a37;
  *(_BYTE *)(v57 + 8) = a38 & 1;
  *(_BYTE *)(a9 + v45[30]) = a39;
  *(_BYTE *)(a9 + v45[31]) = a40;
  return result;
}

uint64_t AXPreferences.VoiceOver.Activity.voiceIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  sub_18C6D5138(v0 + *(int *)(v5 + 72), (uint64_t)v4, &qword_1EE043B28);
  v6 = sub_18C711D54();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    sub_18C6E87FC((uint64_t)v4, &qword_1EE043B28);
    return 0;
  }
  else
  {
    v8 = sub_18C711D3C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  return v8;
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.Activity()
{
  uint64_t result;

  result = qword_1ECE67030;
  if (!qword_1ECE67030)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AXPreferences.VoiceOver.Activity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_18C711A54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AXPreferences.VoiceOver.Activity.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_18C711A54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AXPreferences.VoiceOver.Activity.id.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.Activity.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.name.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.textualContexts.getter()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return swift_bridgeObjectRetain();
}

uint64_t AXPreferences.VoiceOver.Activity.textualContexts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.textualContexts.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.appIdentifiers.getter()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return swift_bridgeObjectRetain();
}

uint64_t AXPreferences.VoiceOver.Activity.appIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.appIdentifiers.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.punctuationGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18C6D5138(v1 + *(int *)(v3 + 32), a1, &qword_1ECE67110);
}

uint64_t AXPreferences.VoiceOver.Activity.punctuationGroup.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18C6EC9E8(a1, v1 + *(int *)(v3 + 32), &qword_1ECE67110);
}

uint64_t (*AXPreferences.VoiceOver.Activity.punctuationGroup.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.tableHeaders.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 36));
}

uint64_t AXPreferences.VoiceOver.Activity.tableHeaders.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.tableHeaders.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.tableRowAndColumn.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 40));
}

uint64_t AXPreferences.VoiceOver.Activity.tableRowAndColumn.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.tableRowAndColumn.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.speakEmojis.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 44));
}

uint64_t AXPreferences.VoiceOver.Activity.speakEmojis.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.speakEmojis.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.imageDescriptions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 48));
}

uint64_t AXPreferences.VoiceOver.Activity.imageDescriptions.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.imageDescriptions.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.hints.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 52));
}

uint64_t AXPreferences.VoiceOver.Activity.hints.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.hints.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.containerFeedback.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 56));
}

uint64_t AXPreferences.VoiceOver.Activity.containerFeedback.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 56);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.containerFeedback.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.numberFeedback.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 60));
}

uint64_t AXPreferences.VoiceOver.Activity.numberFeedback.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 60);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.numberFeedback.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.typingStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 64));
}

uint64_t AXPreferences.VoiceOver.Activity.typingStyle.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 64);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.typingStyle.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.navigationStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 68));
}

uint64_t AXPreferences.VoiceOver.Activity.navigationStyle.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 68);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.navigationStyle.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.voiceSelection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18C6D5138(v1 + *(int *)(v3 + 72), a1, &qword_1EE043B28);
}

uint64_t AXPreferences.VoiceOver.Activity.voiceSelection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18C6EC9E8(a1, v1 + *(int *)(v3 + 72), &qword_1EE043B28);
}

uint64_t sub_18C6EC9E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*AXPreferences.VoiceOver.Activity.voiceSelection.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

unint64_t AXPreferences.VoiceOver.Activity.speechRate.getter()
{
  return sub_18C6ECA6C(MEMORY[0x1E0CF2E70]);
}

unint64_t AXPreferences.VoiceOver.Activity.volume.getter()
{
  return sub_18C6ECA6C(MEMORY[0x1E0CF2E90]);
}

unint64_t sub_18C6ECA6C(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  sub_18C6D5138(v1 + *(int *)(v7 + 72), (uint64_t)v6, &qword_1EE043B28);
  v8 = sub_18C711D54();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    sub_18C6E87FC((uint64_t)v6, &qword_1EE043B28);
    v10 = 0;
    LOBYTE(v11) = 1;
  }
  else
  {
    v12 = a1();
    v13 = v12;
    v11 = HIDWORD(v12) & 1;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    v10 = v13;
  }
  return v10 | ((unint64_t)v11 << 32);
}

uint64_t AXPreferences.VoiceOver.Activity.speechMuted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 76));
}

uint64_t AXPreferences.VoiceOver.Activity.speechMuted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.speechMuted.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.soundMuted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 80));
}

uint64_t AXPreferences.VoiceOver.Activity.soundMuted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.soundMuted.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.audioDucking.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 84));
}

uint64_t AXPreferences.VoiceOver.Activity.audioDucking.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.audioDucking.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.modifierKeys.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 88));
}

uint64_t AXPreferences.VoiceOver.Activity.modifierKeys.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 88);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.modifierKeys.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 92));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellText.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 96));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellText.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleStatusCellText.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 100));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleTable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 100));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleTable.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInputTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 104));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInputTable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 104));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleInputTable.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleOutput.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 108));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleOutput.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 108);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleOutput.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInput.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 112));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInput.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 112);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleInput.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 116));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  v6 = v2 + *(int *)(result + 116);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAlerts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 120));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAlerts.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleAlerts.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleFormatting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 124));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleFormatting.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(_BYTE *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleFormatting.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();
  return nullsub_1;
}

uint64_t static AXPreferences.VoiceOver.Activity.typeKey.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_1EE043E20;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AXPreferences.VoiceOver.Activity.typeKey.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  qword_1EE043E20 = a1;
  qword_1EE043E28 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.Activity.typeKey.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_18C6ED324()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C50);
  sub_18C711C58();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18C7379D0;
  result = sub_18C711C4C();
  qword_1EE042B40 = v0;
  return result;
}

uint64_t sub_18C6ED3A8(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043ED0);
  inited = swift_initStackObject();
  v3 = inited;
  *(_OWORD *)(inited + 16) = xmmword_18C737B20;
  *(_QWORD *)(inited + 32) = 0x64496563696F76;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v4 = inited + 48;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_18C6F9454(0x6564496563696F76, 0xEF7265696669746ELL);
    if ((v6 & 1) != 0)
    {
      sub_18C6E87C0(*(_QWORD *)(a1 + 56) + 40 * v5, v4);
    }
    else
    {
      *(_QWORD *)(v4 + 32) = 0;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
  }
  else
  {
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v3 + 88) = 1702125938;
  *(_QWORD *)(v3 + 96) = 0xE400000000000000;
  if (*(_QWORD *)(a1 + 16) && (v7 = sub_18C6F9454(0x6152686365657073, 0xEA00000000006574), (v8 & 1) != 0))
  {
    sub_18C6E87C0(*(_QWORD *)(a1 + 56) + 40 * v7, v3 + 104);
  }
  else
  {
    *(_QWORD *)(v3 + 136) = 0;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
  }
  *(_QWORD *)(v3 + 144) = 0x656D756C6F76;
  *(_QWORD *)(v3 + 152) = 0xE600000000000000;
  if (*(_QWORD *)(a1 + 16) && (v9 = sub_18C6F9454(0x656D756C6F76, 0xE600000000000000), (v10 & 1) != 0))
  {
    sub_18C6E87C0(*(_QWORD *)(a1 + 56) + 40 * v9, v3 + 160);
  }
  else
  {
    *(_QWORD *)(v3 + 192) = 0;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
  }
  sub_18C6D2C50(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043ED8);
  sub_18C6F3EA0();
  sub_18C7120D8();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = a1;
  sub_18C6FB51C((uint64_t)&v14, 0x6C65536563696F76, 0xEE006E6F69746365, isUniquelyReferenced_nonNull_native);
  v12 = v15;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static AXPreferences.VoiceOver.Activity.migrations.getter()
{
  if (qword_1EE042B48 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AXPreferences.VoiceOver.Activity.migrations.setter(uint64_t a1)
{
  if (qword_1EE042B48 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EE042B40 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.Activity.migrations.modify())()
{
  if (qword_1EE042B48 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AXPreferences.VoiceOver.Activity.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = sub_18C711D54();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v28 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v7, v8);
  v29 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_18C711A54();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18C6F3E60(&qword_1EE042C60, v11, MEMORY[0x1E0CB09C8]);
  sub_18C711E68();
  v20 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v2 + v20[6]);
  sub_18C7122A0();
  if (v21)
  {
    swift_bridgeObjectRetain();
    sub_18C6F09E4(a1, v21);
    swift_bridgeObjectRelease();
  }
  v22 = *(_QWORD *)(v2 + v20[7]);
  sub_18C7122A0();
  if (v22)
  {
    swift_bridgeObjectRetain();
    sub_18C6F0850(a1, v22);
    swift_bridgeObjectRelease();
  }
  sub_18C6D5138(v2 + v20[8], (uint64_t)v19, &qword_1ECE67110);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v10) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v19, v10);
    sub_18C7122A0();
    sub_18C711E68();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  }
  v23 = v30;
  if (*(_BYTE *)(v2 + v20[9]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[10]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[11]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[12]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[13]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[14] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[15] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[16] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[17] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  v24 = v31;
  v25 = v29;
  sub_18C6D5138(v2 + v20[18], v29, &qword_1EE043B28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    v26 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v28, v25, v24);
    sub_18C7122A0();
    sub_18C6F3E60(&qword_1EE043E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE0]);
    sub_18C711E68();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v24);
  }
  if (*(_BYTE *)(v2 + v20[19]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[20]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[21]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[22] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[23]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[24]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_QWORD *)(v2 + v20[25] + 8))
  {
    sub_18C7122A0();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18C7122A0();
  }
  if (*(_QWORD *)(v2 + v20[26] + 8))
  {
    sub_18C7122A0();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18C7122A0();
  }
  if (*(_BYTE *)(v2 + v20[27] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[28] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C712294();
  }
  if (*(_BYTE *)(v2 + v20[29] + 8) == 1)
  {
    sub_18C7122A0();
  }
  else
  {
    sub_18C7122A0();
    sub_18C7122AC();
  }
  if (*(_BYTE *)(v2 + v20[30]) != 2)
    sub_18C7122A0();
  sub_18C7122A0();
  if (*(_BYTE *)(v2 + v20[31]) != 2)
    sub_18C7122A0();
  return sub_18C7122A0();
}

uint64_t sub_18C6EDF7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18C6EDFB8 + 4 * byte_18C737B30[a1]))(0xD000000000000010, 0x800000018C735530);
}

uint64_t sub_18C6EDFB8()
{
  return 25705;
}

uint64_t sub_18C6EDFC4()
{
  return 1701667182;
}

uint64_t sub_18C6EDFD4()
{
  return 0x436C617574786574;
}

uint64_t sub_18C6EDFF8()
{
  return 0x746E656449707061;
}

uint64_t sub_18C6EE01C()
{
  return 0x616548656C626174;
}

unint64_t sub_18C6EE03C()
{
  return 0xD000000000000011;
}

BOOL sub_18C6EE284(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18C6EE298()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

uint64_t sub_18C6EE2DC()
{
  return sub_18C712294();
}

uint64_t sub_18C6EE304()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

uint64_t sub_18C6EE344()
{
  unsigned __int8 *v0;

  return sub_18C6EDF7C(*v0);
}

uint64_t sub_18C6EE34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6F334C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18C6EE370()
{
  return 0;
}

void sub_18C6EE37C(_BYTE *a1@<X8>)
{
  *a1 = 28;
}

uint64_t sub_18C6EE388()
{
  sub_18C6F1848();
  return sub_18C7122DC();
}

uint64_t sub_18C6EE3B0()
{
  sub_18C6F1848();
  return sub_18C7122E8();
}

uint64_t AXPreferences.VoiceOver.Activity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char v33;
  char v34;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C6F1848();
  sub_18C7122D0();
  LOBYTE(v32) = 0;
  sub_18C711A54();
  sub_18C6F3E60(&qword_1ECE67048, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_18C71224C();
  if (!v2)
  {
    v10 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    LOBYTE(v32) = 1;
    sub_18C712240();
    v32 = *(_QWORD *)(v3 + *(int *)(v10 + 24));
    v34 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B98);
    sub_18C6F18D0(&qword_1EE042BA0, &qword_1EE042BE0, (uint64_t)&protocol conformance descriptor for AXSSVoiceOverTextualContext, MEMORY[0x1E0DEB3B8]);
    sub_18C712234();
    v11 = *(_QWORD *)(v3 + *(int *)(v10 + 28));
    v31 = (int *)v10;
    v32 = v11;
    v34 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B80);
    sub_18C6F3F24(&qword_1EE042B88, &qword_1EE042B80, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    sub_18C712234();
    v12 = v31;
    LOBYTE(v32) = 4;
    sub_18C712234();
    LOBYTE(v32) = 5;
    sub_18C712228();
    LOBYTE(v32) = 6;
    sub_18C712228();
    LOBYTE(v32) = 7;
    sub_18C712228();
    LOBYTE(v32) = 8;
    sub_18C712228();
    LOBYTE(v32) = 9;
    sub_18C712228();
    v13 = (uint64_t *)(v3 + v12[14]);
    v14 = *v13;
    LOBYTE(v13) = *((_BYTE *)v13 + 8);
    v32 = v14;
    v33 = (char)v13;
    v34 = 10;
    type metadata accessor for AXSVoiceOverFeedbackOption(0);
    sub_18C6F3E60(&qword_1EE042BB0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverFeedbackOption, (uint64_t)&protocol conformance descriptor for AXSVoiceOverFeedbackOption);
    sub_18C712234();
    v15 = (uint64_t *)(v3 + v31[15]);
    v16 = *v15;
    LOBYTE(v15) = *((_BYTE *)v15 + 8);
    v32 = v16;
    v33 = (char)v15;
    v34 = 11;
    type metadata accessor for AXSVoiceOverNumberFeedback(0);
    sub_18C6F3E60(&qword_1EE042BC8, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNumberFeedback, (uint64_t)&protocol conformance descriptor for AXSVoiceOverNumberFeedback);
    sub_18C712234();
    v17 = (uint64_t *)(v3 + v31[16]);
    v18 = *v17;
    LOBYTE(v17) = *((_BYTE *)v17 + 8);
    v32 = v18;
    v33 = (char)v17;
    v34 = 12;
    type metadata accessor for AXSVoiceOverTouchTypingMode(0);
    sub_18C6F3E60(&qword_1EE042C10, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverTouchTypingMode, (uint64_t)&protocol conformance descriptor for AXSVoiceOverTouchTypingMode);
    sub_18C712234();
    v19 = (uint64_t *)(v3 + v31[17]);
    v20 = *v19;
    LOBYTE(v19) = *((_BYTE *)v19 + 8);
    v32 = v20;
    v33 = (char)v19;
    v34 = 13;
    type metadata accessor for AXSVoiceOverNavigationStyle(0);
    sub_18C6F3E60(&qword_1EE042BF8, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNavigationStyle, (uint64_t)&protocol conformance descriptor for AXSVoiceOverNavigationStyle);
    sub_18C712234();
    LOBYTE(v32) = 14;
    sub_18C711D54();
    sub_18C6F3E60(&qword_1EE043E38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2ED8]);
    sub_18C712234();
    LOBYTE(v32) = 15;
    sub_18C712228();
    LOBYTE(v32) = 16;
    sub_18C712228();
    LOBYTE(v32) = 17;
    sub_18C712228();
    v21 = (uint64_t *)(v3 + v31[22]);
    v22 = *v21;
    LOBYTE(v21) = *((_BYTE *)v21 + 8);
    v32 = v22;
    v33 = (char)v21;
    v34 = 18;
    type metadata accessor for AXSVoiceOverKeyboardModifierChoice(0);
    sub_18C6F3E60(&qword_1EE042C28, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverKeyboardModifierChoice, (uint64_t)&protocol conformance descriptor for AXSVoiceOverKeyboardModifierChoice);
    sub_18C712234();
    LOBYTE(v32) = 19;
    sub_18C712228();
    LOBYTE(v32) = 20;
    sub_18C712228();
    LOBYTE(v32) = 21;
    sub_18C71221C();
    LOBYTE(v32) = 22;
    sub_18C71221C();
    v23 = (uint64_t *)(v3 + v31[27]);
    v24 = *v23;
    LOBYTE(v23) = *((_BYTE *)v23 + 8);
    v32 = v24;
    v33 = (char)v23;
    v34 = 23;
    type metadata accessor for AXSVoiceOverBrailleMode(0);
    sub_18C6F3E60(&qword_1EE043E40, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverBrailleMode, MEMORY[0x1E0CF3020]);
    sub_18C712234();
    v25 = (uint64_t *)(v3 + v31[28]);
    v26 = *v25;
    LOBYTE(v25) = *((_BYTE *)v25 + 8);
    v32 = v26;
    v33 = (char)v25;
    v34 = 24;
    sub_18C712234();
    v27 = (uint64_t *)(v3 + v31[29]);
    v28 = *v27;
    LOBYTE(v27) = *((_BYTE *)v27 + 8);
    v32 = v28;
    v33 = (char)v27;
    v34 = 25;
    sub_18C6F188C();
    sub_18C712234();
    LOBYTE(v32) = 26;
    sub_18C712228();
    LOBYTE(v32) = 27;
    sub_18C712228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t AXPreferences.VoiceOver.Activity.hashValue.getter()
{
  _BYTE v1[72];

  sub_18C712288();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18C7122B8();
}

uint64_t AXPreferences.VoiceOver.Activity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(void);
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  char v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char v69;
  char *v70;
  char v71;
  char *v72;
  char v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  char v117;

  v114 = a1;
  v86 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v2, v3);
  v89 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v5, v6);
  v98 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_18C711A54();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v99 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C40);
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v12);
  v113 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18C711A48();
  v112 = v14[6];
  *(_QWORD *)&v17[v112] = 0;
  v108 = v14[7];
  *(_QWORD *)&v17[v108] = 0;
  v109 = &v17[v14[8]];
  v110 = v9;
  v18 = *(void (**)(void))(v9 + 56);
  v104 = v8;
  v18();
  v97 = v14[9];
  v17[v97] = 2;
  v96 = v14[10];
  v17[v96] = 2;
  v95 = v14[11];
  v17[v95] = 2;
  v94 = v14[12];
  v17[v94] = 2;
  v93 = v14[13];
  v17[v93] = 2;
  v19 = &v17[v14[14]];
  *(_QWORD *)v19 = 0;
  v92 = v19;
  v19[8] = 1;
  v20 = &v17[v14[15]];
  *(_QWORD *)v20 = 0;
  v91 = v20;
  v20[8] = 1;
  v21 = &v17[v14[16]];
  *(_QWORD *)v21 = 0;
  v90 = v21;
  v21[8] = 1;
  v22 = &v17[v14[17]];
  *(_QWORD *)v22 = 0;
  v87 = v22;
  v22[8] = 1;
  v23 = (uint64_t)&v17[v14[18]];
  v24 = sub_18C711D54();
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v107 = v23;
  v88 = v24;
  v25(v23, 1, 1);
  v80 = v14[19];
  v17[v80] = 2;
  v81 = v14[20];
  v17[v81] = 2;
  v82 = v14[21];
  v17[v82] = 2;
  v26 = &v17[v14[22]];
  *(_QWORD *)v26 = 0;
  v83 = v26;
  v26[8] = 1;
  v84 = v14[23];
  v17[v84] = 2;
  v85 = v14[24];
  v17[v85] = 2;
  v27 = &v17[v14[25]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v106 = v27;
  v28 = &v17[v14[26]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v105 = v28;
  v29 = &v17[v14[27]];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  v30 = &v17[v14[28]];
  *(_QWORD *)v30 = 0;
  v30[8] = 1;
  v31 = &v17[v14[29]];
  *(_QWORD *)v31 = 0;
  v31[8] = 1;
  v32 = v14[30];
  v17[v32] = 2;
  v101 = v14;
  v33 = v14[31];
  v111 = v17;
  v17[v33] = 2;
  __swift_project_boxed_opaque_existential_1(v114, v114[3]);
  sub_18C6F1848();
  v34 = v103;
  sub_18C7122C4();
  if (v34)
  {
    v35 = v104;
    v38 = (uint64_t)v109;
    v39 = v110;
    v40 = v111;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18C6E87FC(v38, &qword_1ECE67110);
    sub_18C6E87FC(v107, &qword_1EE043B28);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v76 = v29;
    v77 = v30;
    v78 = v31;
    v79 = v32;
    v103 = v33;
    LOBYTE(v115) = 0;
    sub_18C6F3E60(&qword_1ECE67050, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v36 = v99;
    v37 = v104;
    sub_18C7121F8();
    v42 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 40))(v111, v36, v37);
    LOBYTE(v115) = 1;
    v43 = sub_18C7121EC();
    v44 = v108;
    v45 = (uint64_t *)&v42[v101[5]];
    *v45 = v43;
    v45[1] = v46;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B98);
    v117 = 2;
    sub_18C6F18D0(&qword_1EE042BA8, &qword_1EE042BF0, (uint64_t)&protocol conformance descriptor for AXSSVoiceOverTextualContext, MEMORY[0x1E0DEB3D8]);
    sub_18C7121E0();
    v47 = v115;
    v48 = v112;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42[v48] = v47;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B80);
    v117 = 3;
    sub_18C6F3F24(&qword_1EE042B90, &qword_1EE042B80, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    sub_18C7121E0();
    v49 = v115;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42[v44] = v49;
    LOBYTE(v115) = 4;
    v50 = (uint64_t)v98;
    sub_18C7121E0();
    sub_18C6EC9E8(v50, (uint64_t)v109, &qword_1ECE67110);
    LOBYTE(v115) = 5;
    v42[v97] = sub_18C7121D4();
    LOBYTE(v115) = 6;
    v42[v96] = sub_18C7121D4();
    LOBYTE(v115) = 7;
    v42[v95] = sub_18C7121D4();
    LOBYTE(v115) = 8;
    v42[v94] = sub_18C7121D4();
    LOBYTE(v115) = 9;
    v111[v93] = sub_18C7121D4();
    type metadata accessor for AXSVoiceOverFeedbackOption(0);
    v117 = 10;
    sub_18C6F3E60(&qword_1EE042BB8, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverFeedbackOption, (uint64_t)&protocol conformance descriptor for AXSVoiceOverFeedbackOption);
    sub_18C7121E0();
    v51 = v116;
    v52 = v92;
    *(_QWORD *)v92 = v115;
    v52[8] = v51;
    type metadata accessor for AXSVoiceOverNumberFeedback(0);
    v117 = 11;
    sub_18C6F3E60(&qword_1EE042BD0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNumberFeedback, (uint64_t)&protocol conformance descriptor for AXSVoiceOverNumberFeedback);
    sub_18C7121E0();
    v53 = v116;
    v54 = v91;
    *(_QWORD *)v91 = v115;
    v54[8] = v53;
    type metadata accessor for AXSVoiceOverTouchTypingMode(0);
    v117 = 12;
    sub_18C6F3E60(&qword_1EE042C18, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverTouchTypingMode, (uint64_t)&protocol conformance descriptor for AXSVoiceOverTouchTypingMode);
    sub_18C7121E0();
    v55 = v116;
    v56 = v90;
    *(_QWORD *)v90 = v115;
    v56[8] = v55;
    type metadata accessor for AXSVoiceOverNavigationStyle(0);
    v117 = 13;
    sub_18C6F3E60(&qword_1EE042C00, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNavigationStyle, (uint64_t)&protocol conformance descriptor for AXSVoiceOverNavigationStyle);
    sub_18C7121E0();
    v57 = v116;
    v58 = v87;
    *(_QWORD *)v87 = v115;
    v58[8] = v57;
    LOBYTE(v115) = 14;
    sub_18C6F3E60(&qword_1EE043E48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EF0]);
    sub_18C7121E0();
    sub_18C6EC9E8(v89, v107, &qword_1EE043B28);
    LOBYTE(v115) = 15;
    v111[v80] = sub_18C7121D4();
    LOBYTE(v115) = 16;
    v111[v81] = sub_18C7121D4();
    LOBYTE(v115) = 17;
    v111[v82] = sub_18C7121D4();
    type metadata accessor for AXSVoiceOverKeyboardModifierChoice(0);
    v117 = 18;
    sub_18C6F3E60(&qword_1EE042C30, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverKeyboardModifierChoice, (uint64_t)&protocol conformance descriptor for AXSVoiceOverKeyboardModifierChoice);
    sub_18C7121E0();
    v59 = v116;
    v60 = v83;
    *(_QWORD *)v83 = v115;
    v60[8] = v59;
    LOBYTE(v115) = 19;
    v111[v84] = sub_18C7121D4();
    LOBYTE(v115) = 20;
    v111[v85] = sub_18C7121D4();
    LOBYTE(v115) = 21;
    v61 = sub_18C7121C8();
    v63 = v62;
    v64 = (uint64_t *)v106;
    swift_bridgeObjectRelease();
    *v64 = v61;
    v64[1] = v63;
    LOBYTE(v115) = 22;
    v65 = sub_18C7121C8();
    v67 = v66;
    v68 = (uint64_t *)v105;
    swift_bridgeObjectRelease();
    *v68 = v65;
    v68[1] = v67;
    type metadata accessor for AXSVoiceOverBrailleMode(0);
    v117 = 23;
    sub_18C6F3E60(&qword_1EE042CA0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverBrailleMode, MEMORY[0x1E0CF3028]);
    sub_18C7121E0();
    v69 = v116;
    v70 = v76;
    *(_QWORD *)v76 = v115;
    v70[8] = v69;
    v117 = 24;
    sub_18C7121E0();
    v71 = v116;
    v72 = v77;
    *(_QWORD *)v77 = v115;
    v72[8] = v71;
    v117 = 25;
    sub_18C6F1954();
    sub_18C7121E0();
    v73 = v116;
    v74 = v78;
    *(_QWORD *)v78 = v115;
    v74[8] = v73;
    LOBYTE(v115) = 26;
    v111[v79] = sub_18C7121D4();
    LOBYTE(v115) = 27;
    LOBYTE(v65) = sub_18C7121D4();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v113, v102);
    v75 = (uint64_t)v111;
    v111[v103] = v65;
    sub_18C6F1998(v75, v86);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    return sub_18C6F19DC(v75);
  }
}

uint64_t sub_18C6EFAEC()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_1EE043E20;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18C6EFB3C()
{
  if (qword_1EE042B48 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18C6EFBA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_18C711A54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_18C6EFBE0()
{
  _BYTE v1[72];

  sub_18C712288();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18C7122B8();
}

uint64_t sub_18C6EFC20()
{
  _BYTE v1[72];

  sub_18C712288();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18C7122B8();
}

uint64_t sub_18C6EFC58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AXPreferences.VoiceOver.Activity.init(from:)(a1, a2);
}

uint64_t sub_18C6EFC6C(_QWORD *a1)
{
  return AXPreferences.VoiceOver.Activity.encode(to:)(a1);
}

uint64_t sub_18C6EFC84()
{
  sub_18C6F3E60(&qword_1EE042BE8, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C737548);
  return sub_18C711F1C();
}

uint64_t sub_18C6EFCF8()
{
  sub_18C6F3E60(&qword_1EE042BE8, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C737548);
  return sub_18C711EF8();
}

uint64_t sub_18C6EFD5C()
{
  uint64_t v0;

  sub_18C711EA4();
  v0 = sub_18C711EEC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18C6EFD94()
{
  sub_18C711EA4();
  sub_18C711EBC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18C6EFDD4()
{
  uint64_t v0;

  sub_18C711EA4();
  sub_18C712288();
  sub_18C711EBC();
  v0 = sub_18C7122B8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18C6EFE44()
{
  sub_18C6F3E60(&qword_1EE043EB0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverFeedbackOption, (uint64_t)&unk_18C737614);
  return sub_18C711F28();
}

uint64_t sub_18C6EFEB8()
{
  sub_18C6F3E60(&qword_1EE043EB0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverFeedbackOption, (uint64_t)&unk_18C737614);
  return sub_18C711F04();
}

uint64_t sub_18C6EFF24()
{
  sub_18C6F3E60(&qword_1EE043EA8, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNumberFeedback, (uint64_t)&unk_18C737650);
  return sub_18C711F28();
}

uint64_t sub_18C6EFF98()
{
  sub_18C6F3E60(&qword_1EE043EA8, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNumberFeedback, (uint64_t)&unk_18C737650);
  return sub_18C711F04();
}

uint64_t sub_18C6EFFFC()
{
  sub_18C6F3E60(&qword_1EE043EA0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverTouchTypingMode, (uint64_t)&unk_18C73768C);
  return sub_18C711F28();
}

uint64_t sub_18C6F0070()
{
  sub_18C6F3E60(&qword_1EE043EA0, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverTouchTypingMode, (uint64_t)&unk_18C73768C);
  return sub_18C711F04();
}

uint64_t sub_18C6F00D4()
{
  sub_18C6F3E60(&qword_1EE043E98, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNavigationStyle, (uint64_t)&unk_18C7376C4);
  return sub_18C711F28();
}

uint64_t sub_18C6F0148()
{
  sub_18C6F3E60(&qword_1EE043E98, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNavigationStyle, (uint64_t)&unk_18C7376C4);
  return sub_18C711F04();
}

uint64_t sub_18C6F01AC()
{
  sub_18C6F3E60(&qword_1EE043E90, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverKeyboardModifierChoice, (uint64_t)&unk_18C737700);
  return sub_18C711F28();
}

uint64_t sub_18C6F0220()
{
  sub_18C6F3E60(&qword_1EE043E90, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverKeyboardModifierChoice, (uint64_t)&unk_18C737700);
  return sub_18C711F04();
}

uint64_t sub_18C6F0284(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v32 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v33 = (unint64_t)(v4 + 63) >> 6;
  v35 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v34 = v3;
      v8 = v7 | (v3 << 6);
      goto LABEL_27;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v9 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v33)
        return 1;
      v10 = *(_QWORD *)(v32 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v33)
          return 1;
        v10 = *(_QWORD *)(v32 + 8 * v11);
        if (!v10)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v33)
            return 1;
          v10 = *(_QWORD *)(v32 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_26:
    v6 = (v10 - 1) & v10;
    v34 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_27:
    v13 = result;
    v14 = *(void **)(*(_QWORD *)(result + 48) + 8 * v8);
    sub_18C711EA4();
    sub_18C712288();
    v15 = v14;
    sub_18C711EBC();
    v16 = sub_18C7122B8();
    swift_bridgeObjectRelease();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_42;
    v19 = sub_18C711EA4();
    v21 = v20;
    if (v19 == sub_18C711EA4() && v21 == v22)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v24 = sub_18C712264();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        v25 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v25;
          if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            break;
          v26 = sub_18C711EA4();
          v28 = v27;
          if (v26 == sub_18C711EA4() && v28 == v29)
            goto LABEL_7;
          v31 = sub_18C712264();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
            goto LABEL_8;
        }
LABEL_42:

        return 0;
      }
    }
LABEL_8:

    result = v13;
    v3 = v34;
  }
  v12 = v3 + 5;
  if (v3 + 5 >= v33)
    return 1;
  v10 = *(_QWORD *)(v32 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 5;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_18C6F05B0(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_18C712288();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    v18 = sub_18C7122B8();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_18C712264() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_18C712264() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_18C6F0850(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_18C7122B8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_18C712294();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_18C712288();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    v11 = sub_18C7122B8();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_18C6F09E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v17;
  int64_t v18;

  sub_18C7122B8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_18C712294();
    }
    v17 = *(_QWORD *)(v3 + 8 * v10);
    if (!v17)
      break;
LABEL_16:
    v6 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    v13 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v12);
    sub_18C711EA4();
    sub_18C712288();
    v14 = v13;
    sub_18C711EBC();
    v15 = sub_18C7122B8();

    result = swift_bridgeObjectRelease();
    v9 ^= v15;
  }
  v18 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v17 = *(_QWORD *)(v3 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t _s22AccessibilityUtilities13AXPreferencesC9VoiceOverC8ActivityV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  int v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  int v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  int v74;
  int v75;
  _BOOL4 v76;
  uint64_t v77;
  int v78;
  int v79;
  _BOOL4 v80;
  uint64_t v81;
  int v82;
  int v83;
  _BOOL4 v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  char v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  _QWORD *v103;
  int v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  BOOL v123;
  char v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  BOOL v131;
  char v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  BOOL v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  BOOL v151;
  char v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  BOOL v159;
  char v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  char v170;
  char v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  char v180;
  char v181;
  uint64_t v182;
  _QWORD *v183;
  char v184;
  _QWORD *v185;
  int v186;
  uint64_t v187;
  _QWORD *v188;
  char v189;
  _QWORD *v190;
  int v191;
  uint64_t v192;
  double *v193;
  char v194;
  double *v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int *v202;
  BOOL v203;
  char v204;
  uint64_t v205;
  int v206;
  int v207;
  _BOOL4 v208;
  uint64_t v209;
  int *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;

  v4 = sub_18C711D54();
  v218 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v215 = (char *)&v209 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043EB8);
  MEMORY[0x1E0C80A78](v216, v7);
  v9 = (char *)&v209 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v217 = (uint64_t)&v209 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v219 = (uint64_t)&v209 - v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v220 = (uint64_t)&v209 - v18;
  v221 = sub_18C711A54();
  v19 = *(_QWORD *)(v221 - 8);
  MEMORY[0x1E0C80A78](v221, v20);
  v22 = (char *)&v209 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043EC0);
  MEMORY[0x1E0C80A78](v23, v24);
  v222 = (uint64_t)&v209 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v209 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v28, v31);
  v34 = (char *)&v209 - v33;
  MEMORY[0x1E0C80A78](v32, v35);
  v37 = (char *)&v209 - v36;
  if ((sub_18C711A30() & 1) == 0)
    return 0;
  v211 = v9;
  v212 = v4;
  v38 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  v39 = v38[5];
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a1 + v39 + 8);
  v42 = (_QWORD *)(a2 + v39);
  if (v40 != *v42 || v41 != v42[1])
  {
    v43 = sub_18C712264();
    result = 0;
    if ((v43 & 1) == 0)
      return result;
  }
  v45 = v38[6];
  v213 = a1;
  v214 = a2;
  v46 = *(_QWORD *)(a1 + v45);
  v47 = *(_QWORD *)(a2 + v45);
  if (v46)
  {
    if (!v47)
      return 0;
    swift_bridgeObjectRetain();
    v48 = swift_bridgeObjectRetain();
    v49 = sub_18C6F0284(v48, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
      return 0;
  }
  else if (v47)
  {
    return 0;
  }
  v50 = v38[7];
  v51 = *(_QWORD *)(v214 + v50);
  if (*(_QWORD *)(v213 + v50))
  {
    if (!v51)
      return 0;
    swift_bridgeObjectRetain();
    v52 = swift_bridgeObjectRetain();
    v53 = sub_18C6F05B0(v52, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v53 & 1) == 0)
      return 0;
  }
  else if (v51)
  {
    return 0;
  }
  v54 = v213;
  sub_18C6D5138(v213 + v38[8], (uint64_t)v37, &qword_1ECE67110);
  v210 = v38;
  sub_18C6D5138(v214 + v38[8], (uint64_t)v34, &qword_1ECE67110);
  v55 = v222;
  v56 = v222 + *(int *)(v23 + 48);
  sub_18C6D5138((uint64_t)v37, v222, &qword_1ECE67110);
  v57 = v55;
  sub_18C6D5138((uint64_t)v34, v56, &qword_1ECE67110);
  v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v59 = v55;
  v60 = v221;
  if (v58(v59, 1, v221) == 1)
  {
    sub_18C6E87FC((uint64_t)v34, &qword_1ECE67110);
    v57 = v222;
    sub_18C6E87FC((uint64_t)v37, &qword_1ECE67110);
    if (v58(v56, 1, v60) == 1)
    {
      sub_18C6E87FC(v57, &qword_1ECE67110);
      goto LABEL_25;
    }
LABEL_20:
    v61 = &qword_1EE043EC0;
    v62 = v57;
LABEL_21:
    sub_18C6E87FC(v62, v61);
    return 0;
  }
  sub_18C6D5138(v57, (uint64_t)v30, &qword_1ECE67110);
  if (v58(v56, 1, v60) == 1)
  {
    sub_18C6E87FC((uint64_t)v34, &qword_1ECE67110);
    sub_18C6E87FC((uint64_t)v37, &qword_1ECE67110);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v60);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v22, v56, v60);
  sub_18C6F3E60(&qword_1EE042C68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v63 = sub_18C711E74();
  v64 = *(void (**)(char *, uint64_t))(v19 + 8);
  v64(v22, v60);
  sub_18C6E87FC((uint64_t)v34, &qword_1ECE67110);
  sub_18C6E87FC((uint64_t)v37, &qword_1ECE67110);
  v64(v30, v60);
  sub_18C6E87FC(v57, &qword_1ECE67110);
  if ((v63 & 1) == 0)
    return 0;
LABEL_25:
  v65 = v210[9];
  v66 = *(unsigned __int8 *)(v54 + v65);
  v67 = *(unsigned __int8 *)(v214 + v65);
  if (v66 == 2)
  {
    if (v67 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v68 = (v66 & 1) == 0;
    if (v67 == 2 || ((v68 ^ v67) & 1) == 0)
      return result;
  }
  v69 = v210[10];
  v70 = *(unsigned __int8 *)(v54 + v69);
  v71 = *(unsigned __int8 *)(v214 + v69);
  if (v70 == 2)
  {
    if (v71 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v72 = (v70 & 1) == 0;
    if (v71 == 2 || ((v72 ^ v71) & 1) == 0)
      return result;
  }
  v73 = v210[11];
  v74 = *(unsigned __int8 *)(v54 + v73);
  v75 = *(unsigned __int8 *)(v214 + v73);
  if (v74 == 2)
  {
    if (v75 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v76 = (v74 & 1) == 0;
    if (v75 == 2 || ((v76 ^ v75) & 1) == 0)
      return result;
  }
  v77 = v210[12];
  v78 = *(unsigned __int8 *)(v54 + v77);
  v79 = *(unsigned __int8 *)(v214 + v77);
  if (v78 == 2)
  {
    if (v79 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v80 = (v78 & 1) == 0;
    if (v79 == 2 || ((v80 ^ v79) & 1) == 0)
      return result;
  }
  v81 = v210[13];
  v82 = *(unsigned __int8 *)(v54 + v81);
  v83 = *(unsigned __int8 *)(v214 + v81);
  if (v82 == 2)
  {
    if (v83 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v84 = (v82 & 1) == 0;
    if (v83 == 2 || ((v84 ^ v83) & 1) == 0)
      return result;
  }
  v85 = v210[14];
  v86 = (_QWORD *)(v54 + v85);
  v87 = *(_BYTE *)(v54 + v85 + 8);
  v88 = (_QWORD *)(v214 + v85);
  v89 = *(unsigned __int8 *)(v214 + v85 + 8);
  if ((v87 & 1) != 0)
  {
    if (!v89)
      return 0;
  }
  else
  {
    if (*v86 != *v88)
      LOBYTE(v89) = 1;
    if ((v89 & 1) != 0)
      return 0;
  }
  v90 = v210[15];
  v91 = (_QWORD *)(v54 + v90);
  v92 = *(_BYTE *)(v54 + v90 + 8);
  v93 = (_QWORD *)(v214 + v90);
  v94 = *(unsigned __int8 *)(v214 + v90 + 8);
  if ((v92 & 1) != 0)
  {
    if (!v94)
      return 0;
  }
  else
  {
    if (*v91 != *v93)
      LOBYTE(v94) = 1;
    if ((v94 & 1) != 0)
      return 0;
  }
  v95 = v210[16];
  v96 = (_QWORD *)(v54 + v95);
  v97 = *(_BYTE *)(v54 + v95 + 8);
  v98 = (_QWORD *)(v214 + v95);
  v99 = *(unsigned __int8 *)(v214 + v95 + 8);
  if ((v97 & 1) != 0)
  {
    if (!v99)
      return 0;
  }
  else
  {
    if (*v96 != *v98)
      LOBYTE(v99) = 1;
    if ((v99 & 1) != 0)
      return 0;
  }
  v100 = v210[17];
  v101 = (_QWORD *)(v54 + v100);
  v102 = *(_BYTE *)(v54 + v100 + 8);
  v103 = (_QWORD *)(v214 + v100);
  v104 = *(unsigned __int8 *)(v214 + v100 + 8);
  if ((v102 & 1) != 0)
  {
    if (!v104)
      return 0;
  }
  else
  {
    if (*v101 != *v103)
      LOBYTE(v104) = 1;
    if ((v104 & 1) != 0)
      return 0;
  }
  v105 = v210;
  v106 = v220;
  sub_18C6D5138(v213 + v210[18], v220, &qword_1EE043B28);
  v107 = v219;
  sub_18C6D5138(v214 + v105[18], v219, &qword_1EE043B28);
  v108 = (uint64_t)v211;
  v109 = (uint64_t)&v211[*(int *)(v216 + 48)];
  sub_18C6D5138(v106, (uint64_t)v211, &qword_1EE043B28);
  sub_18C6D5138(v107, v109, &qword_1EE043B28);
  v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48);
  if (v110(v108, 1, v212) == 1)
  {
    sub_18C6E87FC(v219, &qword_1EE043B28);
    sub_18C6E87FC(v220, &qword_1EE043B28);
    if (v110(v109, 1, v212) == 1)
    {
      sub_18C6E87FC((uint64_t)v211, &qword_1EE043B28);
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  sub_18C6D5138((uint64_t)v211, v217, &qword_1EE043B28);
  if (v110(v109, 1, v212) == 1)
  {
    sub_18C6E87FC(v219, &qword_1EE043B28);
    sub_18C6E87FC(v220, &qword_1EE043B28);
    (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v217, v212);
LABEL_79:
    v61 = &qword_1EE043EB8;
    v62 = (uint64_t)v211;
    goto LABEL_21;
  }
  v111 = v218;
  v112 = v215;
  v113 = v212;
  (*(void (**)(char *, uint64_t, uint64_t))(v218 + 32))(v215, v109, v212);
  sub_18C6F3E60(&qword_1EE043EC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE8]);
  v114 = v217;
  v115 = sub_18C711E74();
  v116 = *(void (**)(char *, uint64_t))(v111 + 8);
  v116(v112, v113);
  sub_18C6E87FC(v219, &qword_1EE043B28);
  sub_18C6E87FC(v220, &qword_1EE043B28);
  v116((char *)v114, v113);
  sub_18C6E87FC((uint64_t)v211, &qword_1EE043B28);
  if ((v115 & 1) == 0)
    return 0;
LABEL_81:
  v117 = v210[19];
  v118 = *(unsigned __int8 *)(v213 + v117);
  v119 = *(unsigned __int8 *)(v214 + v117);
  if (v118 == 2)
  {
    v120 = v213;
    v121 = v214;
    v122 = v210;
    if (v119 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v123 = (v118 & 1) == 0;
    if (v119 == 2)
      return result;
    v124 = v123 ^ v119;
    v120 = v213;
    v121 = v214;
    v122 = v210;
    if ((v124 & 1) == 0)
      return result;
  }
  v125 = v122[20];
  v126 = *(unsigned __int8 *)(v120 + v125);
  v127 = *(unsigned __int8 *)(v121 + v125);
  if (v126 == 2)
  {
    v128 = v213;
    v129 = v214;
    v130 = v210;
    if (v127 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v131 = (v126 & 1) == 0;
    if (v127 == 2)
      return result;
    v132 = v131 ^ v127;
    v128 = v213;
    v129 = v214;
    v130 = v210;
    if ((v132 & 1) == 0)
      return result;
  }
  v133 = v130[21];
  v134 = *(unsigned __int8 *)(v128 + v133);
  v135 = *(unsigned __int8 *)(v129 + v133);
  if (v134 == 2)
  {
    v136 = v213;
    v137 = v214;
    v138 = v210;
    if (v135 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v139 = (v134 & 1) == 0;
    if (v135 == 2)
      return result;
    v140 = v139 ^ v135;
    v136 = v213;
    v137 = v214;
    v138 = v210;
    if ((v140 & 1) == 0)
      return result;
  }
  v141 = v138[22];
  v142 = v136 + v141;
  v143 = v137 + v141;
  v144 = *(_BYTE *)(v143 + 8);
  if ((*(_BYTE *)(v142 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(v143 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)v142 != *(_QWORD *)v143)
      v144 = 1;
    if ((v144 & 1) != 0)
      return 0;
  }
  v145 = v210[23];
  v146 = *(unsigned __int8 *)(v213 + v145);
  v147 = *(unsigned __int8 *)(v214 + v145);
  if (v146 == 2)
  {
    v148 = v213;
    v149 = v214;
    v150 = v210;
    if (v147 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v151 = (v146 & 1) == 0;
    if (v147 == 2)
      return result;
    v152 = v151 ^ v147;
    v148 = v213;
    v149 = v214;
    v150 = v210;
    if ((v152 & 1) == 0)
      return result;
  }
  v153 = v150[24];
  v154 = *(unsigned __int8 *)(v148 + v153);
  v155 = *(unsigned __int8 *)(v149 + v153);
  if (v154 == 2)
  {
    v157 = v213;
    v156 = v214;
    v158 = v210;
    if (v155 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v159 = (v154 & 1) == 0;
    if (v155 == 2)
      return result;
    v160 = v159 ^ v155;
    v157 = v213;
    v156 = v214;
    v158 = v210;
    if ((v160 & 1) == 0)
      return result;
  }
  v161 = v158[25];
  v162 = (_QWORD *)(v157 + v161);
  v163 = *(_QWORD *)(v157 + v161 + 8);
  v164 = (_QWORD *)(v156 + v161);
  v165 = v164[1];
  if (v163)
  {
    if (!v165)
      return 0;
    v166 = *v162 == *v164;
    v168 = v213;
    v167 = v214;
    v169 = v210;
    if (!v166 || v163 != v165)
    {
      v170 = sub_18C712264();
      v169 = v210;
      v171 = v170;
      result = 0;
      if ((v171 & 1) == 0)
        return result;
    }
  }
  else
  {
    v168 = v213;
    v167 = v214;
    v169 = v210;
    if (v165)
      return 0;
  }
  v172 = v169[26];
  v173 = (_QWORD *)(v168 + v172);
  v174 = *(_QWORD *)(v168 + v172 + 8);
  v175 = (_QWORD *)(v167 + v172);
  v176 = v175[1];
  if (v174)
  {
    if (!v176)
      return 0;
    v166 = *v173 == *v175;
    v178 = v213;
    v177 = v214;
    v179 = v210;
    if (!v166 || v174 != v176)
    {
      v180 = sub_18C712264();
      v179 = v210;
      v181 = v180;
      result = 0;
      if ((v181 & 1) == 0)
        return result;
    }
  }
  else
  {
    v178 = v213;
    v177 = v214;
    v179 = v210;
    if (v176)
      return 0;
  }
  v182 = v179[27];
  v183 = (_QWORD *)(v178 + v182);
  v184 = *(_BYTE *)(v178 + v182 + 8);
  v185 = (_QWORD *)(v177 + v182);
  v186 = *(unsigned __int8 *)(v177 + v182 + 8);
  if ((v184 & 1) != 0)
  {
    if (!v186)
      return 0;
  }
  else
  {
    if (*v183 != *v185)
      LOBYTE(v186) = 1;
    if ((v186 & 1) != 0)
      return 0;
  }
  v187 = v210[28];
  v188 = (_QWORD *)(v213 + v187);
  v189 = *(_BYTE *)(v213 + v187 + 8);
  v190 = (_QWORD *)(v214 + v187);
  v191 = *(unsigned __int8 *)(v214 + v187 + 8);
  if ((v189 & 1) != 0)
  {
    if (!v191)
      return 0;
  }
  else
  {
    if (*v188 != *v190)
      LOBYTE(v191) = 1;
    if ((v191 & 1) != 0)
      return 0;
  }
  v192 = v210[29];
  v193 = (double *)(v213 + v192);
  v194 = *(_BYTE *)(v213 + v192 + 8);
  v195 = (double *)(v214 + v192);
  v196 = *(unsigned __int8 *)(v214 + v192 + 8);
  if ((v194 & 1) != 0)
  {
    if (!v196)
      return 0;
  }
  else
  {
    if (*v193 != *v195)
      LOBYTE(v196) = 1;
    if ((v196 & 1) != 0)
      return 0;
  }
  v197 = v210[30];
  v198 = *(unsigned __int8 *)(v213 + v197);
  v199 = *(unsigned __int8 *)(v214 + v197);
  if (v198 == 2)
  {
    v200 = v213;
    v201 = v214;
    v202 = v210;
    if (v199 != 2)
      return 0;
    goto LABEL_151;
  }
  result = 0;
  v203 = (v198 & 1) == 0;
  if (v199 != 2)
  {
    v204 = v203 ^ v199;
    v200 = v213;
    v201 = v214;
    v202 = v210;
    if ((v204 & 1) != 0)
    {
LABEL_151:
      v205 = v202[31];
      v206 = *(unsigned __int8 *)(v200 + v205);
      v207 = *(unsigned __int8 *)(v201 + v205);
      if (v206 == 2)
      {
        if (v207 == 2)
          return 1;
      }
      else
      {
        v208 = (v206 & 1) == 0;
        if (v207 != 2 && ((v208 ^ v207) & 1) != 0)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_18C6F1848()
{
  unint64_t result;

  result = qword_1EE042B28;
  if (!qword_1EE042B28)
  {
    result = MEMORY[0x18D786960](&unk_18C73826C, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE042B28);
  }
  return result;
}

unint64_t sub_18C6F188C()
{
  unint64_t result;

  result = qword_1ECE67080;
  if (!qword_1ECE67080)
  {
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1ECE67080);
  }
  return result;
}

uint64_t sub_18C6F18D0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE042B98);
    v10 = sub_18C6F3E60(a2, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, a3);
    result = MEMORY[0x18D786960](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18C6F1954()
{
  unint64_t result;

  result = qword_1ECE67040;
  if (!qword_1ECE67040)
  {
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1ECE67040);
  }
  return result;
}

uint64_t sub_18C6F1998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6F19DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18C6F1A18()
{
  return sub_18C6F3E60((unint64_t *)&unk_1ECE670A0, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18C6F1A44()
{
  return sub_18C6F3E60(&qword_1ECE67098, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18C6F1A70()
{
  return sub_18C6F3E60(&qword_1EE042C60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

uint64_t sub_18C6F1A9C()
{
  return sub_18C6F3E60(&qword_1EE043E50, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18C6F1AC8()
{
  return sub_18C6F3E60(&qword_1ECE670D8, (uint64_t (*)(uint64_t))type metadata accessor for AXSSVoiceOverTextualContext, (uint64_t)&unk_18C73790C);
}

uint64_t sub_18C6F1AF4()
{
  return sub_18C6F3E60(&qword_1EE043E58, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverFeedbackOption, (uint64_t)&unk_18C7378E0);
}

uint64_t sub_18C6F1B20()
{
  return sub_18C6F3E60(&qword_1EE043E60, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNumberFeedback, (uint64_t)&unk_18C7378B4);
}

uint64_t sub_18C6F1B4C()
{
  return sub_18C6F3E60(&qword_1EE043E68, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverTouchTypingMode, (uint64_t)&unk_18C73788C);
}

uint64_t sub_18C6F1B78()
{
  return sub_18C6F3E60(&qword_1EE043E70, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverNavigationStyle, (uint64_t)&unk_18C737860);
}

uint64_t sub_18C6F1BA4()
{
  return sub_18C6F3E60(&qword_1EE043E78, (uint64_t (*)(uint64_t))type metadata accessor for AXSVoiceOverKeyboardModifierChoice, (uint64_t)&unk_18C737834);
}

char *_s8ActivityVwCP(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v64)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_18C711A54();
    v8 = *(_QWORD *)(v7 - 8);
    v64 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v64(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
    v14 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v7))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v64(v15, v16, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
    }
    v20 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v20] = a2[v20];
    v21 = a3[12];
    a1[a3[11]] = a2[a3[11]];
    a1[v21] = a2[v21];
    v22 = a3[14];
    a1[a3[13]] = a2[a3[13]];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = a3[15];
    v26 = a3[16];
    v27 = &a1[v25];
    v28 = &a2[v25];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = &a1[v26];
    v30 = &a2[v26];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[17];
    v32 = a3[18];
    v33 = &a1[v31];
    v34 = &a2[v31];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = &a1[v32];
    v36 = &a2[v32];
    v37 = sub_18C711D54();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v40 = a3[20];
    a1[a3[19]] = a2[a3[19]];
    a1[v40] = a2[v40];
    v41 = a3[22];
    a1[a3[21]] = a2[a3[21]];
    v42 = &a1[v41];
    v43 = &a2[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = a3[24];
    a1[a3[23]] = a2[a3[23]];
    a1[v44] = a2[v44];
    v45 = a3[25];
    v46 = a3[26];
    v47 = &a1[v45];
    v48 = &a2[v45];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = &a1[v46];
    v51 = &a2[v46];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = a3[27];
    v54 = a3[28];
    v55 = &a1[v53];
    v56 = &a2[v53];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v55[8] = v56[8];
    v57 = &a1[v54];
    v58 = &a2[v54];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = a3[29];
    v60 = a3[30];
    v61 = &a1[v59];
    v62 = &a2[v59];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = v62[8];
    a1[v60] = a2[v60];
    a1[a3[31]] = a2[a3[31]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s8ActivityVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_18C711A54();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  v8 = a1 + *(int *)(a2 + 72);
  v9 = sub_18C711D54();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *_s8ActivityVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v62)(void *, const void *, uint64_t);

  v6 = sub_18C711A54();
  v7 = *(_QWORD *)(v6 - 8);
  v62 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v62(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v6))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v62(v14, v15, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  v18 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v18] = a2[v18];
  v19 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v19] = a2[v19];
  v20 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = a3[15];
  v24 = a3[16];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = &a1[v24];
  v28 = &a2[v24];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = a3[17];
  v30 = a3[18];
  v31 = &a1[v29];
  v32 = &a2[v29];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  v33 = &a1[v30];
  v34 = &a2[v30];
  v35 = sub_18C711D54();
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v38] = a2[v38];
  v39 = a3[22];
  a1[a3[21]] = a2[a3[21]];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  v42 = a3[24];
  a1[a3[23]] = a2[a3[23]];
  a1[v42] = a2[v42];
  v43 = a3[25];
  v44 = a3[26];
  v45 = &a1[v43];
  v46 = &a2[v43];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = &a1[v44];
  v49 = &a2[v44];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = a3[27];
  v52 = a3[28];
  v53 = &a1[v51];
  v54 = &a2[v51];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
  v55 = &a1[v52];
  v56 = &a2[v52];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  v57 = a3[29];
  v58 = a3[30];
  v59 = &a1[v57];
  v60 = &a2[v57];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v60[8];
  a1[v58] = a2[v58];
  a1[a3[31]] = a2[a3[31]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s8ActivityVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v6 = sub_18C711A54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v16 = v15(a1 + v12, 1, v6);
  v17 = v15((uint64_t)v14, 1, v6);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v13, v6);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v13, (uint64_t)v14, v6);
LABEL_7:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v19 = a3[14];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  v23 = a3[15];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  v27 = a3[16];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 8) = *((_BYTE *)v29 + 8);
  *(_QWORD *)v28 = v30;
  v31 = a3[17];
  v32 = a1 + v31;
  v33 = (uint64_t *)(a2 + v31);
  v34 = *v33;
  *(_BYTE *)(v32 + 8) = *((_BYTE *)v33 + 8);
  *(_QWORD *)v32 = v34;
  v35 = a3[18];
  v36 = (void *)(a1 + v35);
  v37 = (void *)(a2 + v35);
  v38 = sub_18C711D54();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 24))(v36, v37, v38);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_12;
  }
  if (v42)
  {
LABEL_12:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_13:
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  v44 = a3[22];
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  *(_BYTE *)(v45 + 8) = *((_BYTE *)v46 + 8);
  *(_QWORD *)v45 = v47;
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v48 = a3[25];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (_QWORD *)(a2 + v48);
  *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = a3[26];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (_QWORD *)(a2 + v51);
  *v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a3[27];
  v55 = a1 + v54;
  v56 = (uint64_t *)(a2 + v54);
  v57 = *v56;
  *(_BYTE *)(v55 + 8) = *((_BYTE *)v56 + 8);
  *(_QWORD *)v55 = v57;
  v58 = a3[28];
  v59 = a1 + v58;
  v60 = (uint64_t *)(a2 + v58);
  v61 = *v60;
  *(_BYTE *)(v59 + 8) = *((_BYTE *)v60 + 8);
  *(_QWORD *)v59 = v61;
  v62 = a3[29];
  v63 = a1 + v62;
  v64 = (uint64_t *)(a2 + v62);
  v65 = *v64;
  *(_BYTE *)(v63 + 8) = *((_BYTE *)v64 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  return a1;
}

char *_s8ActivityVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = sub_18C711A54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v14] = a2[v14];
  v15 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v15] = a2[v15];
  v16 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[15];
  v20 = a3[16];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = &a1[v20];
  v24 = &a2[v20];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[17];
  v26 = a3[18];
  v27 = &a1[v25];
  v28 = &a2[v25];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = &a1[v26];
  v30 = &a2[v26];
  v31 = sub_18C711D54();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v34 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v34] = a2[v34];
  v35 = a3[22];
  a1[a3[21]] = a2[a3[21]];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  v38 = a3[24];
  a1[a3[23]] = a2[a3[23]];
  a1[v38] = a2[v38];
  v39 = a3[26];
  *(_OWORD *)&a1[a3[25]] = *(_OWORD *)&a2[a3[25]];
  *(_OWORD *)&a1[v39] = *(_OWORD *)&a2[v39];
  v40 = a3[27];
  v41 = a3[28];
  v42 = &a1[v40];
  v43 = &a2[v40];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = &a1[v41];
  v45 = &a2[v41];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v46 = a3[29];
  v47 = a3[30];
  v48 = &a1[v46];
  v49 = &a2[v46];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  a1[v47] = a2[v47];
  a1[a3[31]] = a2[a3[31]];
  return a1;
}

uint64_t _s8ActivityVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = sub_18C711A54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v14 = a3[8];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v18 = v17(a1 + v14, 1, v6);
  v19 = v17((uint64_t)v16, 1, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v15, v16, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v15, v6);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v15, (uint64_t)v16, v6);
LABEL_7:
  v21 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = a3[15];
  v27 = a3[16];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[17];
  v33 = a3[18];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  v36 = (void *)(a1 + v33);
  v37 = (void *)(a2 + v33);
  v38 = sub_18C711D54();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v36, v37, v38);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_12;
  }
  if (v42)
  {
LABEL_12:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v36, v37, v38);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_13:
  v44 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  v45 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  v48 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  v49 = a3[25];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[26];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[27];
  v60 = a3[28];
  v61 = a1 + v59;
  v62 = a2 + v59;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  v63 = a1 + v60;
  v64 = a2 + v60;
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  v65 = a3[29];
  v66 = a3[30];
  v67 = a1 + v65;
  v68 = a2 + v65;
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  *(_BYTE *)(a1 + v66) = *(_BYTE *)(a2 + v66);
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  return a1;
}

uint64_t _s8ActivityVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18C6F2DD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_18C711A54();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[8];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[18];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t _s8ActivityVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18C6F2EBC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_18C711A54();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[8];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[18];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_18C6F2F90()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_18C711A54();
  if (v0 <= 0x3F)
  {
    sub_18C6F30AC(319, &qword_1ECE67058, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
    {
      sub_18C6F30AC(319, &qword_1EE043E80, (void (*)(uint64_t))MEMORY[0x1E0CF2EC8]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_18C6F30AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_18C712054();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s8ActivityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE5)
    goto LABEL_17;
  if (a2 + 27 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 27) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 27;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 27;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 27;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v8 = v6 - 28;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8ActivityV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_18C6F31E4 + 4 * byte_18C737B51[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_18C6F3218 + 4 * byte_18C737B4C[v4]))();
}

uint64_t sub_18C6F3218(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6F3220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18C6F3228);
  return result;
}

uint64_t sub_18C6F3234(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18C6F323CLL);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_18C6F3240(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6F3248(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6F3254(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_18C6F325C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s8ActivityV10CodingKeysOMa()
{
  return &_s8ActivityV10CodingKeysON;
}

unint64_t sub_18C6F3278()
{
  unint64_t result;

  result = qword_1EE043E88;
  if (!qword_1EE043E88)
  {
    result = MEMORY[0x18D786960](&unk_18C738244, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE043E88);
  }
  return result;
}

unint64_t sub_18C6F32C0()
{
  unint64_t result;

  result = qword_1EE042B38;
  if (!qword_1EE042B38)
  {
    result = MEMORY[0x18D786960](&unk_18C7381B4, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE042B38);
  }
  return result;
}

unint64_t sub_18C6F3308()
{
  unint64_t result;

  result = qword_1EE042B30;
  if (!qword_1EE042B30)
  {
    result = MEMORY[0x18D786960](&unk_18C7381DC, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE042B30);
  }
  return result;
}

uint64_t sub_18C6F334C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x436C617574786574 && a2 == 0xEF73747865746E6FLL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656449707061 && a2 == 0xEE00737265696669 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000018C735530 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x616548656C626174 && a2 == 0xEC00000073726564 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018C735550 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F6D456B61657073 && a2 == 0xEB0000000073696ALL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018C735570 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x73746E6968 && a2 == 0xE500000000000000 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018C735590 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65467265626D756ELL && a2 == 0xEE006B6361626465 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7453676E69707974 && a2 == 0xEB00000000656C79 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x697461676976616ELL && a2 == 0xEF656C7974536E6FLL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6C65536563696F76 && a2 == 0xEE006E6F69746365 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x754D686365657073 && a2 == 0xEB00000000646574 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x74754D646E756F73 && a2 == 0xEA00000000006465 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6375446F69647561 && a2 == 0xEC000000676E696BLL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x7265696669646F6DLL && a2 == 0xEC0000007379654BLL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000018C7355B0 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018C7355D0 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x54656C6C69617262 && a2 == 0xEC000000656C6261 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018C7355F0 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x4F656C6C69617262 && a2 == 0xED00007475707475 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x49656C6C69617262 && a2 == 0xEC0000007475706ELL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000018C735610 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x41656C6C69617262 && a2 == 0xED0000737472656CLL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018C735630)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else
  {
    v6 = sub_18C712264();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 27;
    else
      return 28;
  }
}

uint64_t sub_18C6F3E60(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x18D786960](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18C6F3EA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EE043EE0;
  if (!qword_1EE043EE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE043ED8);
    v2 = sub_18C6F3F24(&qword_1EE043EE8, &qword_1EE042CB8, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0DEE990]);
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEA0C0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE043EE0);
  }
  return result;
}

uint64_t sub_18C6F3F24(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x18D786960](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v16 - v10;
  if (a1)
  {
    v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    v14 = a1;
    if ((_s22AccessibilityUtilities13AXPreferencesC9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(v14, (uint64_t)v11) & 1) != 0)
    {
      sub_18C6F5528((uint64_t)v11, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
      {
        sub_18C6F5570((uint64_t)v11);

        return sub_18C6D9398((uint64_t)v8, a2);
      }
      sub_18C6F5570((uint64_t)v8);
    }
  }
  result = sub_18C71215C();
  __break(1u);
  return result;
}

uint64_t AXVoiceOverVoiceRotorItem.identifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AXVoiceOverVoiceRotorItem.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t AXVoiceOverVoiceRotorItem.userDefinedName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AXVoiceOverVoiceRotorItem.userDefinedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

void sub_18C6F442C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_userDefinedName);
  if (v3)
  {
    v4 = v3;
    v5 = sub_18C711EA4();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_18C6F4490(uint64_t a1, void **a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = sub_18C711E80();
  else
    v3 = 0;
  v4 = (id)v3;
  objc_msgSend(v2, sel_setUserDefinedName_);

}

uint64_t AXVoiceOverVoiceRotorItem.voiceId.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_selection);
  v2 = objc_msgSend(v1, sel_voiceId);

  if (!v2)
    return 0;
  v3 = sub_18C711EA4();

  return v3;
}

void AXVoiceOverVoiceRotorItem.voiceId.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_selection);
  v2 = (id)sub_18C711E80();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setVoiceId_, v2);

}

void sub_18C6F4728(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend(*a1, *a2);
  v5 = sub_18C711EA4();
  v7 = v6;

  *a3 = v5;
  a3[1] = v7;
}

id AXVoiceOverVoiceRotorItem.selection.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection);
  swift_beginAccess();
  return *v1;
}

void AXVoiceOverVoiceRotorItem.selection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

id AXVoiceOverVoiceRotorItem.init(identifier:selection:userDefinedName:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  id v9;

  v7 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  if (a5)
  {
    v8 = (void *)sub_18C711E80();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithIdentifier_selection_userDefinedName_, v7, a3, v8);

  return v9;
}

{
  char *v5;
  char *v9;
  char *v10;
  id v11;
  id v12;
  objc_super v14;

  v9 = &v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *(_QWORD *)&v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection] = a3;
  swift_beginAccess();
  *(_QWORD *)v9 = a4;
  *((_QWORD *)v9 + 1) = a5;
  v11 = a3;
  swift_bridgeObjectRelease();
  v14.receiver = v5;
  v14.super_class = (Class)AXVoiceOverVoiceRotorItem;
  v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

void __swiftcall AXVoiceOverVoiceRotorItem.init()(AXVoiceOverVoiceRotorItem *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void AXVoiceOverVoiceRotorItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __swiftcall AXPreferences.VoiceOver.VoiceRotorItem._bridgeToObjectiveC()(AXVoiceOverVoiceRotorItem *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  id v10;
  double v11;
  uint64_t v12;
  int v13;
  id v14;
  double v15;
  id v16;
  uint64_t v17;
  int v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v3 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  swift_bridgeObjectRetain();
  v4 = sub_18C711D3C();
  v6 = v5;
  v7 = 0;
  if ((sub_18C711CD0() & 0x100000000) == 0)
  {
    v8 = sub_18C711CD0();
    if ((v8 & 0x100000000) != 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    v9 = v8;
    v10 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v11) = v9;
    v7 = objc_msgSend(v10, sel_initWithFloat_, v11);
  }
  if ((sub_18C711CE8() & 0x100000000) != 0)
  {
    v16 = 0;
    if ((sub_18C711D00() & 0x100000000) != 0)
      goto LABEL_7;
    goto LABEL_9;
  }
  v12 = sub_18C711CE8();
  if ((v12 & 0x100000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = v12;
  v14 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  LODWORD(v15) = v13;
  v16 = objc_msgSend(v14, sel_initWithFloat_, v15);
  if ((sub_18C711D00() & 0x100000000) != 0)
  {
LABEL_7:
    v33 = 0;
    goto LABEL_11;
  }
LABEL_9:
  v17 = sub_18C711D00();
  if ((v17 & 0x100000000) != 0)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v18 = v17;
  v19 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  LODWORD(v20) = v18;
  v33 = objc_msgSend(v19, sel_initWithFloat_, v20);
LABEL_11:
  v34 = v16;
  if (sub_18C711CAC())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CF0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
    swift_dynamicCast();
    v21 = v35;
    v22 = sub_18C711D18();
    if (v22)
    {
LABEL_13:
      v32 = v21;
      v23 = v1;
      v36 = MEMORY[0x1E0DEE9D8];
      v24 = *(_QWORD *)(v22 + 16);
      sub_18C712144();
      v25 = v36;
      swift_bridgeObjectRelease();
      if (v24)
      {
        swift_release();
        v25 = 0;
      }
      v26 = v34;
      v2 = v23;
      v21 = v32;
      goto LABEL_18;
    }
  }
  else
  {
    v21 = 0;
    v22 = sub_18C711D18();
    if (v22)
      goto LABEL_13;
  }
  v25 = 0;
  v26 = v34;
LABEL_18:
  v27 = objc_allocWithZone(MEMORY[0x1E0CF3968]);
  v28 = sub_18C6F4F9C(v4, v6, v7, v26, v33, v21, v25);
  v29 = *(_QWORD *)(v2 + *(int *)(v3 + 24) + 8);
  swift_bridgeObjectRetain();
  v30 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  if (v29)
  {
    v31 = (void *)sub_18C711E80();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)AXVoiceOverVoiceRotorItem), sel_initWithIdentifier_selection_userDefinedName_, v30, v28, v31);

}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;

  result = _s22AccessibilityUtilities13AXPreferencesC9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(a1, a2);
  if ((result & 1) == 0)
  {
    result = sub_18C71215C();
    __break(1u);
  }
  return result;
}

uint64_t sub_18C6F4F28(void *a1, uint64_t a2)
{
  uint64_t result;

  result = _s22AccessibilityUtilities13AXPreferencesC9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(a1, a2);
  if ((result & 1) == 0)
  {
    result = sub_18C71215C();
    __break(1u);
  }
  return result;
}

id sub_18C6F4F9C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v8 = v7;
  if (a2)
  {
    v14 = (void *)sub_18C711E80();
    swift_bridgeObjectRelease();
    if (a6)
      goto LABEL_3;
LABEL_6:
    v15 = 0;
    if (a7)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v14 = 0;
  if (!a6)
    goto LABEL_6;
LABEL_3:
  sub_18C6F56E8(0, &qword_1ECE670F0);
  v15 = (void *)sub_18C711E38();
  swift_bridgeObjectRelease();
  if (!a7)
    goto LABEL_7;
LABEL_4:
  sub_18C6F56E8(0, &qword_1EE043F38);
  v16 = (void *)sub_18C711F40();
  swift_bridgeObjectRelease();
LABEL_8:
  v17 = objc_msgSend(v8, sel_initWithVoiceId_rate_pitch_volume_voiceSettings_effects_, v14, a3, a4, a5, v15, v16);

  return v17;
}

uint64_t _s22AccessibilityUtilities13AXPreferencesC9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  unsigned int v21;
  unsigned int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;

  v4 = sub_18C711D54();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a2;
  sub_18C6F5570(a2);
  v12 = objc_msgSend(a1, sel_identifier);
  v13 = sub_18C711EA4();
  v48 = v14;
  v49 = v13;

  v15 = objc_msgSend(a1, sel_selection);
  v16 = objc_msgSend(v15, sel_voiceId);

  v50 = v7;
  if (v16)
  {
    v17 = sub_18C711EA4();
    v46 = v18;
    v47 = v17;

  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v19 = objc_msgSend(a1, sel_selection);
  v20 = objc_msgSend(v19, sel_rate);

  if (v20)
  {
    objc_msgSend(v20, sel_floatValue);
    v22 = v21;

    v45 = v22;
  }
  else
  {
    v45 = 0;
  }
  v23 = objc_msgSend(a1, sel_selection);
  v24 = objc_msgSend(v23, sel_pitch);

  if (v24)
  {
    objc_msgSend(v24, sel_floatValue);

  }
  v25 = objc_msgSend(a1, sel_selection);
  v26 = objc_msgSend(v25, sel_volume);

  if (v26)
  {
    objc_msgSend(v26, sel_floatValue);

  }
  v27 = objc_msgSend(a1, sel_selection);
  v28 = objc_msgSend(v27, sel_effects);

  if (v28)
  {
    sub_18C6F56E8(0, &qword_1EE043F38);
    v29 = sub_18C711F4C();

    sub_18C703610(v29);
    swift_bridgeObjectRelease();
  }
  v30 = objc_msgSend(a1, sel_selection);
  v31 = objc_msgSend(v30, sel_voiceSettings);

  if (v31)
  {
    sub_18C6F56E8(0, &qword_1ECE670F0);
    v32 = sub_18C711E44();

    sub_18C703718(v32);
    swift_bridgeObjectRelease();
  }
  v56 = v20 == 0;
  v55 = v24 == 0;
  v54 = v26 == 0;
  v33 = v50;
  sub_18C711D30();
  v34 = objc_msgSend(a1, sel_userDefinedName);
  if (v34)
  {
    v35 = v34;
    v36 = sub_18C711EA4();
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0;
  }
  v39 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v40 = *(int *)(v39 + 20);
  v41 = (uint64_t *)&v11[*(int *)(v39 + 24)];
  v42 = v48;
  *(_QWORD *)v11 = v49;
  *((_QWORD *)v11 + 1) = v42;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v11[v40], v33, v52);
  *v41 = v36;
  v41[1] = v38;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v11, 0, 1, v39);
  sub_18C6F5720((uint64_t)v11, v53);
  return 1;
}

uint64_t sub_18C6F5528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6F5570(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

void sub_18C6F55BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_18C6F4728(a1, (SEL *)&selRef_identifier, a2);
}

void sub_18C6F55D8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

char *keypath_get_selector_userDefinedName()
{
  return sel_userDefinedName;
}

char *keypath_get_selector_voiceId()
{
  return sel_voiceId;
}

void sub_18C6F5604(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_18C6F4728(a1, (SEL *)&selRef_voiceId, a2);
}

void sub_18C6F5620(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setVoiceId_);
}

void keypath_setTm(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  id v7;

  v6 = *a2;
  v7 = (id)sub_18C711E80();
  objc_msgSend(v6, *a5, v7);

}

char *keypath_get_selector_selection()
{
  return sel_selection;
}

id sub_18C6F5688@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_selection);
  *a2 = result;
  return result;
}

id sub_18C6F56C0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelection_, *a1);
}

uint64_t type metadata accessor for AXVoiceOverVoiceRotorItem(uint64_t a1)
{
  return sub_18C6F56E8(a1, &qword_1EE043F30);
}

uint64_t sub_18C6F56E8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_18C6F5720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Dictionary<>.speechVoiceIdentifier(forLanguage:withResolver:exists:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v5[7] = swift_task_alloc();
  v6 = sub_18C711AF0();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v7 = sub_18C711B08();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6F5840()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (v0[3])
  {
    v1 = v0[13];
    v2 = v0[11];
    v3 = v0[12];
    v5 = v0[9];
    v4 = v0[10];
    v6 = v0[8];
    swift_bridgeObjectRetain();
    sub_18C711AB4();
    sub_18C711AFC();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  else
  {
    v7 = v0[14];
    v8 = sub_18C711A90();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  v9 = (_QWORD *)swift_task_alloc();
  v0[15] = v9;
  *v9 = v0;
  v9[1] = sub_18C6F594C;
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v0[7], v0[14], v0[4], v0[5], v0[6]);
}

uint64_t sub_18C6F594C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6F59A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_18C711D54();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 112);
  if (v4 == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 112), &qword_1EE042CE0);
    sub_18C6E87FC(v1, &qword_1EE043B28);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = sub_18C711D3C();
    v7 = v8;
    sub_18C6E87FC(v5, &qword_1EE042CE0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v7);
}

uint64_t Dictionary<>.set(voiceId:forLanguage:withResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v6[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  v7 = sub_18C711A90();
  v6[13] = v7;
  v6[14] = *(_QWORD *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6F5B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_18C711A9C();
  if (v1)
  {
    swift_bridgeObjectRetain();
    if (sub_18C711EC8() >= 1)
    {
      v2 = *(_QWORD *)(v0 + 128);
      v3 = *(_QWORD *)(v0 + 104);
      v4 = *(_QWORD *)(v0 + 112);
      v5 = *(_QWORD *)(v0 + 64);
      v6 = **(_QWORD **)(v0 + 56);
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      *(_QWORD *)(v0 + 136) = v7;
      v7(v5, v2, v3);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v8;
      *v8 = v0;
      v8[1] = sub_18C6F5D38;
      return Dictionary<>.selection(forLanguage:withResolver:exists:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48), 0, v6);
    }
    swift_bridgeObjectRelease();
  }
  v11 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
  v15 = sub_18C711D54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  sub_18C6F5FA0(v14, v11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6F5D38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  return swift_task_switch();
}

uint64_t sub_18C6F5DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 80);
  sub_18C6D5138(*(_QWORD *)(v0 + 96), v1, &qword_1EE043B28);
  v2 = sub_18C711D54();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v5 = v4(v1, 1, v2);
  v6 = *(_QWORD *)(v0 + 80);
  if (v5 == 1)
  {
    swift_bridgeObjectRetain();
    sub_18C711D30();
    sub_18C6E87FC(v6, &qword_1EE043B28);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80), v2);
  }
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  sub_18C6E2020(v8, v7);
  if (v4(v7, 1, v2))
    swift_bridgeObjectRelease();
  else
    sub_18C711D48();
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136))(v10, v9, v12);
  sub_18C6D5138(v13, v14, &qword_1EE043B28);
  sub_18C6F5FA0(v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v12);
  sub_18C6E87FC(v13, &qword_1EE043B28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6F5FA0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_18C711D54();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    sub_18C6E87FC(a1, &qword_1EE043B28);
    sub_18C6F9540(a2, (uint64_t)v9);
    v15 = sub_18C711A90();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
    return sub_18C6E87FC((uint64_t)v9, &qword_1EE043B28);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    sub_18C6FB25C((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    v18 = sub_18C711A90();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  }
}

uint64_t sub_18C6F612C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_18C6FE0DC((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_18C6FB3E4(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_18C6D50C8(a2);
  }
  else
  {
    sub_18C6E87FC(a1, &qword_1ECE66E50);
    sub_18C6F967C(a2, v7);
    sub_18C6D50C8(a2);
    return sub_18C6E87FC((uint64_t)v7, &qword_1ECE66E50);
  }
}

uint64_t sub_18C6F61E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  __int128 v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_18C6FE044((__int128 *)a1, (uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_18C6FB688(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_18C6E87FC(a1, &qword_1EE044108);
    sub_18C6F9764(a2, (uint64_t)v7);
    return sub_18C6E87FC((uint64_t)v7, &qword_1EE044108);
  }
}

uint64_t Dictionary<>.selection(forLanguage:withResolver:exists:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  v6 = sub_18C711C04();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE8);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  v7 = sub_18C711C28();
  v5[18] = v7;
  v5[19] = *(_QWORD *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v8 = sub_18C711D54();
  v5[22] = v8;
  v5[23] = *(_QWORD *)(v8 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v9 = sub_18C711AF0();
  v5[26] = v9;
  v5[27] = *(_QWORD *)(v9 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v10 = sub_18C711B08();
  v5[30] = v10;
  v5[31] = *(_QWORD *)(v10 - 8);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v11 = sub_18C711A90();
  v5[39] = v11;
  v5[40] = *(_QWORD *)(v11 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6F64C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t);

  v1 = v0[39];
  v2 = v0[40];
  v3 = v0[38];
  sub_18C6D5138(v0[8], v3, &qword_1EE042CE0);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[45] = (uint64_t)v4;
  if (v4(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(v0[38], &qword_1EE042CE0);
    v11 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v5 = (_QWORD *)swift_task_alloc();
    v0[52] = (uint64_t)v5;
    *v5 = v0;
    v5[1] = sub_18C6F6F94;
    return v11(v0[32]);
  }
  else
  {
    v7 = v0[44];
    v8 = v0[39];
    v9 = v0[38];
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[40] + 32);
    v0[46] = (uint64_t)v10;
    v10(v7, v9, v8);
    sub_18C711B8C();
    sub_18C6D2488(&qword_1EE043B50, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DBEDC0], MEMORY[0x1E0DBEDD0]);
    sub_18C711F58();
    return swift_task_switch();
  }
}

uint64_t sub_18C6F6600()
{
  sub_18C711B5C();
  return swift_task_switch();
}

uint64_t sub_18C6F6640()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)(_QWORD, uint64_t, uint64_t);
  uint64_t (*v36)(_QWORD, _QWORD);

  v1 = v0[44];
  v33 = v0[42];
  v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[45];
  v31 = v0[40];
  v32 = v0[39];
  v2 = v0[33];
  v3 = v0[31];
  v27 = v0[30];
  v4 = v0[29];
  v28 = v0[27];
  v29 = v0[37];
  v30 = v0[26];
  sub_18C711A78();
  sub_18C711AB4();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  sub_18C711B38();
  sub_18C711AA8();
  swift_bridgeObjectRelease();
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[47] = v5;
  v5(v2, v27);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v4, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v33, v1, v32);
  v6 = v34(v29, 1, v32);
  v7 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  v8 = v0[43];
  if (v6 == 1)
  {
    v9 = v0[37];
    v7(v0[43], v0[42], v0[39]);
    sub_18C6E87FC(v9, &qword_1EE042CE0);
  }
  else
  {
    v10 = v0[39];
    v11 = v0[37];
    (*(void (**)(_QWORD, uint64_t))(v0[40] + 8))(v0[42], v10);
    v7(v8, v11, v10);
  }
  if (!*(_QWORD *)(v0[11] + 16))
    goto LABEL_11;
  v12 = sub_18C6F9344(v0[43]);
  if ((v13 & 1) == 0)
    goto LABEL_11;
  v14 = v0[24];
  v15 = v0[25];
  v16 = v0[22];
  v17 = v0[23];
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(v14, *(_QWORD *)(v0[11] + 56) + *(_QWORD *)(v17 + 72) * v12, v16);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v0[48] = v18;
  v18(v15, v14, v16);
  v19 = sub_18C711D3C();
  v0[49] = v20;
  if (!v20)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[23] + 8))(v0[25], v0[22]);
LABEL_11:
    v36 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
    v26 = (_QWORD *)swift_task_alloc();
    v0[51] = v26;
    *v26 = v0;
    v26[1] = sub_18C6F6C90;
    return v36(v0[16], v0[34]);
  }
  v21 = v19;
  v22 = v20;
  v23 = (_BYTE *)v0[10];
  if (v23)
    *v23 = 1;
  v35 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
  v24 = (_QWORD *)swift_task_alloc();
  v0[50] = v24;
  *v24 = v0;
  v24[1] = sub_18C6F6910;
  return v35(v0[17], v21, v22);
}

uint64_t sub_18C6F6910()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_18C6F696C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v24)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    sub_18C6E87FC(v3, &qword_1EE042CE8);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v3, v1);
    sub_18C711C10();
    sub_18C711BF8();
    sub_18C6D2488(&qword_1EE043F58, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DBEE48], MEMORY[0x1E0DBEE50]);
    v9 = sub_18C712090();
    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v10(v6, v7);
    v10(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
    if ((v9 & 1) != 0)
    {
      v11 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
      v12 = *(_QWORD *)(v0 + 352);
      v13 = *(_QWORD *)(v0 + 312);
      v14 = *(_QWORD *)(v0 + 272);
      v15 = *(_QWORD *)(v0 + 240);
      v16 = *(_QWORD *)(v0 + 200);
      v17 = *(_QWORD *)(v0 + 176);
      v22 = *(_QWORD *)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 56);
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 320) + 8);
      v19(*(_QWORD *)(v0 + 344), v13);
      v11(v14, v15);
      v19(v12, v13);
      v23(v18, v16, v17);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v17);
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
  }
  v24 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0DBEDA8] + MEMORY[0x1E0DBEDA8]);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 408) = v21;
  *v21 = v0;
  v21[1] = sub_18C6F6C90;
  return v24(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 272));
}

uint64_t sub_18C6F6C90()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6F6CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  v5 = *(_QWORD *)(v0 + 344);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v18 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 176);
  if (v4 == 1)
  {
    v10 = *(_QWORD *)(v0 + 56);
    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v5, v7);
    v17(v8, v9);
    v11(v18, v7);
    sub_18C6E87FC(v3, &qword_1EE042CE8);
    __swift_destroy_boxed_opaque_existential_1(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v10, 1, 1, v20);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v3, v2);
    sub_18C711BA4();
    sub_18C711D30();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v2);
    v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(v5, v7);
    v17(v16, v9);
    v14(v18, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v20);
    __swift_destroy_boxed_opaque_existential_1(v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C6F6F94()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6F6FE8()
{
  _QWORD *v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[45];
  v2 = v0[39];
  v3 = v0[36];
  v5 = v0[27];
  v4 = v0[28];
  v6 = v0[26];
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v1(v3, 1, v2) == 1)
  {
    sub_18C6E87FC(v0[36], &qword_1EE042CE0);
    sub_18C7120FC();
    swift_bridgeObjectRelease();
    sub_18C711A6C();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    return sub_18C71215C();
  }
  else
  {
    v9 = v0[40];
    v8 = v0[41];
    v10 = v0[39];
    v11 = v0[35];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v8, v0[36], v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v8, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
    v12 = (_QWORD *)swift_task_alloc();
    v0[53] = v12;
    *v12 = v0;
    v12[1] = sub_18C6F71B0;
    return Dictionary<>.selection(forLanguage:withResolver:exists:)(v0[7], v0[35], v0[9], 0, v0[11]);
  }
}

uint64_t sub_18C6F71B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  swift_task_dealloc();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  return swift_task_switch();
}

uint64_t sub_18C6F7218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncStream<A>.defaultVoiceSelectionStream(withResolver:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B58);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a1;
  v11 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B68);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0DF07B8], v3);
  return sub_18C711FE8();
}

id AXPreferences.Speech.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AXPreferences.Speech.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.Speech();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AXPreferences.Speech.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.Speech();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AXPreferences.Speech.SelectionScope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int EnumCaseMultiPayload;
  uint64_t v17;

  v1 = sub_18C711B08();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_18C711A90();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18C6F9410(v0, (uint64_t)v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v14, v1);
      sub_18C712294();
      sub_18C6D2488(&qword_1EE043F60, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
      sub_18C711E68();
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
    else
    {
      sub_18C712294();
      sub_18C711EBC();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    sub_18C712294();
    sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    sub_18C711E68();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_18C6F7704(char a1)
{
  if (!a1)
    return 0x4C6C6172656E6567;
  if (a1 == 1)
    return 0xD000000000000010;
  return 0x726568746FLL;
}

uint64_t sub_18C6F7768()
{
  char *v0;

  return sub_18C6F7704(*v0);
}

uint64_t sub_18C6F7770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6FDD4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_18C6F7794(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_18C6F77A0()
{
  sub_18C6FCCB8();
  return sub_18C7122DC();
}

uint64_t sub_18C6F77C8()
{
  sub_18C6FCCB8();
  return sub_18C7122E8();
}

uint64_t sub_18C6F77F0()
{
  return 1;
}

uint64_t sub_18C6F77FC()
{
  return sub_18C712294();
}

uint64_t sub_18C6F7828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6FDEA0(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_18C6F7850(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_18C6F785C()
{
  sub_18C6FCD84();
  return sub_18C7122DC();
}

uint64_t sub_18C6F7884()
{
  sub_18C6FCD84();
  return sub_18C7122E8();
}

uint64_t sub_18C6F78B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6FDF3C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18C6F78D8()
{
  sub_18C6FCCFC();
  return sub_18C7122DC();
}

uint64_t sub_18C6F7900()
{
  sub_18C6FCCFC();
  return sub_18C7122E8();
}

uint64_t sub_18C6F7928()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

uint64_t sub_18C6F7968()
{
  sub_18C712288();
  sub_18C712294();
  return sub_18C7122B8();
}

uint64_t sub_18C6F79A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6FDFB4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18C6F79D0()
{
  sub_18C6FCD40();
  return sub_18C7122DC();
}

uint64_t sub_18C6F79F8()
{
  sub_18C6FCD40();
  return sub_18C7122E8();
}

uint64_t AXPreferences.Speech.SelectionScope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;

  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043F68);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v2);
  v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043F70);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v4);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_18C711B08();
  v45 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v6);
  v43 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043F78);
  v8 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_18C711A90();
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043F80);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C6FCCB8();
  sub_18C7122D0();
  sub_18C6F9410(v51, (uint64_t)v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v31 = v39;
    v32 = v19;
    v33 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v15, v32, v40);
    v54 = 0;
    sub_18C6FCD84();
    v29 = v53;
    sub_18C712210();
    sub_18C6D2488(&qword_1ECE67060, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0AF8]);
    v34 = v41;
    sub_18C71224C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v34);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v23, v29);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v25 = v45;
    v26 = v43;
    v27 = v49;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v43, v19, v49);
    v55 = 1;
    sub_18C6FCD40();
    v28 = v46;
    v29 = v53;
    sub_18C712210();
    sub_18C6D2488(&qword_1EE043FA0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E50]);
    v30 = v50;
    sub_18C71224C();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v23, v29);
  }
  v56 = 2;
  sub_18C6FCCFC();
  v36 = v42;
  v37 = v53;
  sub_18C712210();
  v38 = v47;
  sub_18C712240();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v23, v37);
}

uint64_t AXPreferences.Speech.SelectionScope.hashValue.getter()
{
  sub_18C712288();
  AXPreferences.Speech.SelectionScope.hash(into:)();
  return sub_18C7122B8();
}

uint64_t AXPreferences.Speech.SelectionScope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;

  v73 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043FB0);
  v4 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  v70 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v77 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043FB8);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v76 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043FC0);
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v75 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043FC8);
  v74 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v18, v21);
  v24 = (char *)&v61 - v23;
  v26 = MEMORY[0x1E0C80A78](v22, v25);
  v28 = (char *)&v61 - v27;
  MEMORY[0x1E0C80A78](v26, v29);
  v31 = (char *)&v61 - v30;
  v32 = a1[3];
  v80 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v32);
  sub_18C6FCCB8();
  v78 = v15;
  v33 = v81;
  sub_18C7122C4();
  if (v33)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  v62 = (uint64_t *)v20;
  v63 = v24;
  v64 = v28;
  v65 = v31;
  v35 = v75;
  v34 = v76;
  v36 = v77;
  v37 = v78;
  v66 = 0;
  v81 = v16;
  v38 = v79;
  v39 = sub_18C712204();
  if (*(_QWORD *)(v39 + 16) != 1)
  {
    v41 = v38;
    v42 = sub_18C71212C();
    swift_allocError();
    v44 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043FD0);
    *v44 = v81;
    sub_18C7121BC();
    sub_18C712120();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v44, *MEMORY[0x1E0DEC450], v42);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v41);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  }
  if (*(_BYTE *)(v39 + 32))
  {
    if (*(_BYTE *)(v39 + 32) == 1)
    {
      v83 = 1;
      sub_18C6FCD40();
      v40 = v66;
      sub_18C7121B0();
      if (v40)
        goto LABEL_11;
      sub_18C711B08();
      sub_18C6D2488(&qword_1EE043FD8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E68]);
      v49 = (uint64_t)v63;
      v50 = v72;
      sub_18C7121F8();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v34, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v38);
      v51 = (uint64_t)v80;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v84 = 2;
      sub_18C6FCCFC();
      v46 = v37;
      v47 = v66;
      sub_18C7121B0();
      if (v47)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v38);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      }
      v53 = v36;
      v54 = v69;
      v55 = sub_18C7121EC();
      v56 = v74;
      v57 = v55;
      v59 = v58;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v54);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v79);
      v49 = (uint64_t)v62;
      *v62 = v57;
      *(_QWORD *)(v49 + 8) = v59;
      swift_storeEnumTagMultiPayload();
      v51 = (uint64_t)v80;
    }
  }
  else
  {
    v82 = 0;
    sub_18C6FCD84();
    v45 = v66;
    sub_18C7121B0();
    if (v45)
      goto LABEL_11;
    sub_18C711A90();
    sub_18C6D2488(&qword_1ECE67068, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B10]);
    v49 = (uint64_t)v64;
    v52 = v68;
    sub_18C7121F8();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v52);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v38);
    v51 = (uint64_t)v80;
    swift_storeEnumTagMultiPayload();
  }
  v60 = (uint64_t)v65;
  sub_18C6FCDC8(v49, (uint64_t)v65);
  sub_18C6FCDC8(v60, v73);
  return __swift_destroy_boxed_opaque_existential_1(v51);
}

uint64_t sub_18C6F8538()
{
  sub_18C712288();
  AXPreferences.Speech.SelectionScope.hash(into:)();
  return sub_18C7122B8();
}

uint64_t sub_18C6F8578()
{
  sub_18C712288();
  AXPreferences.Speech.SelectionScope.hash(into:)();
  return sub_18C7122B8();
}

uint64_t sub_18C6F85B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AXPreferences.Speech.SelectionScope.init(from:)(a1, a2);
}

uint64_t sub_18C6F85C4(_QWORD *a1)
{
  return AXPreferences.Speech.SelectionScope.encode(to:)(a1);
}

uint64_t AsyncStream<A>.voiceSelectionStream(for:withResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_18C711A90();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(_QWORD *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  sub_18C711FC4();
  return swift_release();
}

uint64_t sub_18C6F8700(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v6 = swift_task_alloc();
  v7 = *a2;
  v4[5] = v6;
  v4[6] = v7;
  return swift_task_switch();
}

uint64_t sub_18C6F8768()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v2 = v0[3];
  v3 = sub_18C711A90();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_18C6F880C;
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v0[2], v0[5], v0[4], 0, v0[6]);
}

uint64_t sub_18C6F880C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_18C6F8870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v24 = a2;
  v22[1] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044128);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v22[0] = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043980);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18C711F70();
  v17 = sub_18C711F88();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v23, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v18 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v19 = (v10 + *(unsigned __int8 *)(v5 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = v24;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v18], v12, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 32))(&v20[v19], v22[0], v4);
  swift_retain();
  sub_18C6F9210((uint64_t)v16, (uint64_t)&unk_1EE044138, (uint64_t)v20);
  return sub_18C711F94();
}

uint64_t sub_18C6F8A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v6[5] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B68);
  v6[6] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044148);
  v6[7] = v7;
  v6[8] = *(_QWORD *)(v7 - 8);
  v6[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044150);
  v6[10] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044158);
  v6[11] = v8;
  v6[12] = *(_QWORD *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v9 = sub_18C711A90();
  v6[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[15] = v10;
  v6[16] = *(_QWORD *)(v10 + 64);
  v6[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v6[18] = swift_task_alloc();
  v11 = sub_18C711AF0();
  v6[19] = v11;
  v6[20] = *(_QWORD *)(v11 - 8);
  v6[21] = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044160);
  v6[22] = v12;
  v6[23] = *(_QWORD *)(v12 - 8);
  v6[24] = swift_task_alloc();
  v13 = sub_18C711B08();
  v6[25] = v13;
  v6[26] = *(_QWORD *)(v13 - 8);
  v6[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v6[28] = swift_task_alloc();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B70);
  v6[29] = v14;
  v6[30] = *(_QWORD *)(v14 - 8);
  v6[31] = swift_task_alloc();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B68);
  v6[32] = v15;
  v6[33] = *(_QWORD *)(v15 - 8);
  v6[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C6F8C8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[30];
  v1 = v0[31];
  v3 = v0[29];
  sub_18C711B68();
  sub_18C711FD0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[35] = v4;
  *v4 = v0;
  v4[1] = sub_18C6F8D34;
  return sub_18C711FDC();
}

uint64_t sub_18C6F8D34()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6F8D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 216), v1, v2);
    sub_18C711AFC();
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v20);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 120);
      v13 = *(_QWORD *)(v0 + 128);
      v14 = *(_QWORD *)(v0 + 112);
      v15 = *(_QWORD *)(v0 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v14);
      v16 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      v18 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v18 + v16, v11, v14);
      *(_QWORD *)(v18 + v17) = v15;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
      *(_QWORD *)(v0 + 288) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
      sub_18C711FC4();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v14);
      sub_18C711FD0();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 296) = v19;
      *v19 = v0;
      v19[1] = sub_18C6F9044;
      return sub_18C711FDC();
    }
  }
  return result;
}

uint64_t sub_18C6F9044()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18C6F9098()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = v0[10];
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0[36] - 8) + 48))(v1, 1);
  v4 = v0[26];
  v3 = v0[27];
  v5 = v0[25];
  if (v2 == 1)
  {
    v6 = v0[23];
    v7 = v0[24];
    v8 = v0[22];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v9 = (_QWORD *)swift_task_alloc();
    v0[35] = v9;
    *v9 = v0;
    v9[1] = sub_18C6F8D34;
  }
  else
  {
    v11 = v0[8];
    v10 = v0[9];
    v15 = v0[7];
    v12 = v0[6] + *(int *)(v0[5] + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 16))(v0[6], v3, v5);
    sub_18C6FE3C4(v1, v12);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044128);
    sub_18C711FA0();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v15);
    v13 = (_QWORD *)swift_task_alloc();
    v0[37] = v13;
    *v13 = v0;
    v13[1] = sub_18C6F9044;
  }
  return sub_18C711FDC();
}

uint64_t sub_18C6F9210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_18C711F88();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_18C711F7C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_18C6E87FC(a1, &qword_1EE043980);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18C711F58();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

unint64_t sub_18C6F9344(uint64_t a1)
{
  uint64_t v2;

  sub_18C711A90();
  sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
  v2 = sub_18C711E5C();
  return sub_18C6FB93C(a1, v2);
}

uint64_t type metadata accessor for AXPreferences.Speech()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AXPreferences.Speech.SelectionScope()
{
  uint64_t result;

  result = qword_1EE044070;
  if (!qword_1EE044070)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18C6F9410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_18C6F9454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_18C712288();
  sub_18C711EBC();
  v4 = sub_18C7122B8();
  return sub_18C6FBA80(a1, a2, v4);
}

unint64_t sub_18C6F94B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_18C7120C0();
  return sub_18C6FBB60(a1, v2);
}

unint64_t sub_18C6F94E8(uint64_t a1)
{
  uint64_t v2;

  sub_18C712288();
  sub_18C711B20();
  v2 = sub_18C7122B8();
  return sub_18C6FBC24(a1, v2);
}

uint64_t sub_18C6F9540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_18C6F9344(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18C6FBCF4();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_18C711A90();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = sub_18C711D54();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_18C6FABF8(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = sub_18C711D54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

double sub_18C6F967C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_18C6F94B8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18C6FC180();
      v9 = v11;
    }
    sub_18C6D50C8(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_18C6FE0DC((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_18C6FAED0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_18C6F9764@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_18C6F94E8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18C6FC7B4();
      v9 = v11;
    }
    sub_18C6FE044((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v6), a2);
    sub_18C6FB098(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18C6F9844(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[4];
  int v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;

  v4 = sub_18C711D54();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v52 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_18C711A90();
  v51 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = v2;
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A20);
  v12 = sub_18C712180();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
  {
    result = swift_release();
    v41 = v46;
LABEL_42:
    *v41 = v13;
    return result;
  }
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v48 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v47 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  v50 = v11;
  result = swift_retain();
  v20 = 0;
  v45 = a2;
  v21 = 16;
  if ((a2 & 1) != 0)
    v21 = 32;
  v49 = v21;
  v22 = v21;
  while (1)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_24;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v26 >= v47)
    {
      v42 = v50;
      swift_release();
      v41 = v46;
      v27 = v48;
      if ((v45 & 1) != 0)
      {
LABEL_37:
        v43 = 1 << *(_BYTE *)(v42 + 32);
        if (v43 >= 64)
          bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v27 = -1 << v43;
        *(_QWORD *)(v42 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v27 = v48;
    v28 = v48[v26];
    ++v20;
    if (!v28)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v47)
        goto LABEL_34;
      v28 = v48[v20];
      if (!v28)
        break;
    }
LABEL_23:
    v17 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v20 << 6);
LABEL_24:
    v30 = v50;
    v31 = *(_QWORD *)(v51 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v51 + v22))(v10, *(_QWORD *)(v50 + 48) + v31 * v25, v7);
    v32 = *(_QWORD *)(v30 + 56);
    v33 = *(_QWORD *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + v22))(v52, v32 + v33 * v25, v54);
    sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    result = sub_18C711E5C();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v51 + 32))(*(_QWORD *)(v13 + 48) + v31 * v23, v10, v7);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(_QWORD *)(v13 + 56) + v33 * v23, v52, v54);
    ++*(_QWORD *)(v13 + 16);
  }
  v29 = v26 + 2;
  if (v29 >= v47)
  {
LABEL_34:
    v42 = v50;
    swift_release();
    v41 = v46;
    if ((v45 & 1) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v28 = v48[v29];
  if (v28)
  {
    v20 = v29;
    goto LABEL_23;
  }
  while (1)
  {
    v20 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v20 >= v47)
      goto LABEL_34;
    v28 = v48[v20];
    ++v29;
    if (v28)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_18C6F9C48(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE044410);
  v37 = a2;
  v6 = sub_18C712180();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_18C712288();
    sub_18C711EBC();
    result = sub_18C7122B8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_18C6F9F4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044120);
  v6 = sub_18C712180();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_18C6FE0DC((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_18C6E87C0(v25, (uint64_t)&v38);
      sub_18C6D50FC(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_18C7120C0();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_18C6FE0DC(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_18C6FA260(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;

  v3 = v2;
  v46 = sub_18C711D54();
  v5 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v6);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439F8);
  v44 = a2;
  v9 = sub_18C712180();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v41 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v43 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v42 = (unint64_t)(v11 + 63) >> 6;
    v15 = v9 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v42)
          goto LABEL_34;
        v23 = v43[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v42)
            goto LABEL_34;
          v23 = v43[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v42)
            {
LABEL_34:
              swift_release();
              v3 = v41;
              if ((v44 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v8 + 32);
                if (v39 >= 64)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v43[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v17 >= v42)
                  goto LABEL_34;
                v23 = v43[v17];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v17 = v24;
          }
        }
LABEL_21:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = *(_QWORD *)(v8 + 56);
      v26 = v8;
      v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(_QWORD *)(v5 + 72);
      v31 = v25 + v30 * v21;
      if ((v44 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v31, v46);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v45, v31, v46);
        swift_bridgeObjectRetain();
      }
      sub_18C712288();
      sub_18C711EBC();
      result = sub_18C7122B8();
      v32 = -1 << *(_BYTE *)(v10 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v15 + 8 * v34);
        }
        while (v38 == -1);
        v18 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
      *v19 = v29;
      v19[1] = v28;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
      ++*(_QWORD *)(v10 + 16);
      v8 = v26;
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_18C6FA5C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439D0);
  v42 = a2;
  v6 = sub_18C712180();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_34;
      v23 = *(_QWORD *)(v41 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v13 >= v40)
              goto LABEL_34;
            v23 = *(_QWORD *)(v41 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v13 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 40 * v20;
    if ((v42 & 1) != 0)
    {
      v29 = *(_OWORD *)v28;
      v30 = *(_OWORD *)(v28 + 16);
      v45 = *(_QWORD *)(v28 + 32);
      v43 = v29;
      v44 = v30;
    }
    else
    {
      sub_18C6E87C0(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_18C712288();
    sub_18C711EBC();
    result = sub_18C7122B8();
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v27;
    v15[1] = v26;
    v16 = *(_QWORD *)(v7 + 56) + 40 * v14;
    v17 = v43;
    v18 = v44;
    *(_QWORD *)(v16 + 32) = v45;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v22 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_18C6FA8FC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044110);
  v6 = sub_18C712180();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = v2;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_34;
      v19 = *(_QWORD *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v32)
              goto LABEL_34;
            v19 = *(_QWORD *)(v33 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
    if ((a2 & 1) != 0)
      sub_18C6FE044(v22, (uint64_t)v34);
    else
      sub_18C6FE05C((uint64_t)v22, (uint64_t)v34);
    sub_18C712288();
    sub_18C711B20();
    result = sub_18C7122B8();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = sub_18C6FE044(v34, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_18C6FABF8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = sub_18C711A90();
  v38 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = sub_18C7120A8();
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v37 = (result + 1) & v12;
      v13 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v36(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
        v19 = sub_18C711E5C();
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v8, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v37)
        {
          if (v20 >= v37 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v9 = v15;
            if (v16 * a1 < v17
              || *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = *(_QWORD *)(*(_QWORD *)(sub_18C711D54() - 8) + 72);
            v25 = v24 * a1;
            result = v23 + v24 * a1;
            v26 = v24 * v11;
            v27 = v23 + v24 * v11 + v24;
            if (v25 < v26 || result >= v27)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              v14 = v18;
            }
            else
            {
              a1 = v11;
              v14 = v18;
              if (v25 != v26)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v14 = v18;
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v37 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v9 = v15;
LABEL_5:
        v11 = (v11 + 1) & v14;
        v13 = v16;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_18C6FAED0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_18C7120A8();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_18C6E87C0(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_18C7120C0();
        result = sub_18C6D50C8((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_18C6FB098(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_18C7120A8();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_18C712288();
        sub_18C711B20();
        result = sub_18C7122B8();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_QWORD *)(v12 + 8 * v3);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 40 * v3;
          v17 = (__int128 *)(v15 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 40))
          {
            v9 = *v17;
            v10 = v17[1];
            *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
            *(_OWORD *)v16 = v9;
            *(_OWORD *)(v16 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_18C6FB25C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v4 = (_QWORD **)v3;
  v8 = sub_18C711A90();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_18C6F9344(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7];
        v23 = sub_18C711D54();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v15, a1, v23);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_18C6FBCF4();
      goto LABEL_7;
    }
    sub_18C6F9844(v18, a3 & 1);
    v25 = sub_18C6F9344(a2);
    if ((v19 & 1) == (v26 & 1))
    {
      v15 = v25;
      v21 = *v4;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return sub_18C6FB7A4(v15, (uint64_t)v12, a1, v21);
    }
  }
  result = sub_18C71227C();
  __break(1u);
  return result;
}

_OWORD *sub_18C6FB3E4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_18C6F94B8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_18C6FE0DC(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_18C6FC180();
      goto LABEL_7;
    }
    sub_18C6F9F4C(v13, a3 & 1);
    v19 = sub_18C6F94B8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_18C6E87C0(a2, (uint64_t)v21);
      return sub_18C6FB85C(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6FB51C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_18C6F9454(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_18C6FC5C0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_18C6FE0A0(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_18C6FA5C8(v15, a4 & 1);
  v20 = sub_18C6F9454(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_18C6FE0A0(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6FB688(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_18C6F94E8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return sub_18C6FE044(a1, v17);
      }
      return sub_18C6FB8D4(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_18C6FC7B4();
      goto LABEL_7;
    }
    sub_18C6FA8FC(v13, a3 & 1);
    v19 = sub_18C6F94E8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_18C6FB8D4(v10, a2, a1, v16);
    }
  }
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C6FB7A4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_18C711A90();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_18C711D54();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_18C6FB85C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_18C6FE0DC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_18C6FB8D4(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_18C6FE044(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_18C6FB93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = sub_18C711A90();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5);
      sub_18C6D2488((unint64_t *)&qword_1EE042CC8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v15 = sub_18C711E74();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_18C6FBA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_18C712264() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_18C712264() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_18C6FBB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_18C6E87C0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x18D7841B8](v9, a1);
      sub_18C6D50C8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_18C6FBC24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0 && (sub_18C711B14() & 1) == 0)
  {
    v6 = ~v4;
    for (i = (i + 1) & v6; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v6)
    {
      if ((sub_18C711B14() & 1) != 0)
        break;
    }
  }
  return i;
}

char *sub_18C6FBCF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  char *v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;

  v43 = sub_18C711D54();
  v39 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v1);
  v42 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_18C711A90();
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v3);
  v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A20);
  v35 = v0;
  v5 = *v0;
  v6 = sub_18C712174();
  v7 = *(_QWORD *)(v5 + 16);
  v45 = v6;
  if (!v7)
  {
    result = (char *)swift_release();
    v34 = v45;
    v33 = v35;
LABEL_25:
    *v33 = v34;
    return result;
  }
  v8 = v6;
  result = (char *)(v6 + 64);
  v10 = (char *)(v5 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  v36 = v5 + 64;
  if (v8 != v5 || result >= &v10[8 * v11])
  {
    result = (char *)memmove(result, v10, 8 * v11);
    v8 = v45;
  }
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v44 = v5;
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v37 = (unint64_t)(v13 + 63) >> 6;
  v16 = v38;
  v17 = v39;
  v19 = v40;
  v18 = v41;
  v20 = v43;
  v21 = v45;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v46 = v12;
      v23 = v22 | (v12 << 6);
      v24 = v44;
      goto LABEL_9;
    }
    v29 = v12 + 1;
    v24 = v44;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37)
      goto LABEL_23;
    v30 = *(_QWORD *)(v36 + 8 * v29);
    v31 = v12 + 1;
    if (!v30)
    {
      v31 = v29 + 1;
      if (v29 + 1 >= v37)
        goto LABEL_23;
      v30 = *(_QWORD *)(v36 + 8 * v31);
      if (!v30)
        break;
    }
LABEL_22:
    v15 = (v30 - 1) & v30;
    v46 = v31;
    v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v16 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v17 + 72) * v23;
    v27 = *(_QWORD *)(v24 + 56) + v26;
    v28 = v42;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v42, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(_QWORD *)(v21 + 48) + v25, v19, v18);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v21 + 56) + v26, v28, v20);
    v12 = v46;
  }
  v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    result = (char *)swift_release();
    v33 = v35;
    v34 = v45;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v36 + 8 * v32);
  if (v30)
  {
    v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v37)
      goto LABEL_23;
    v30 = *(_QWORD *)(v36 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_18C6FBFD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE044410);
  v2 = *v0;
  v3 = sub_18C712174();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_18C6FC180()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044120);
  v2 = *v0;
  v3 = sub_18C712174();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_18C6E87C0(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_18C6D50FC(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_18C6FE0DC(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_18C6FC364()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = sub_18C711D54();
  v1 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439F8);
  v32 = v0;
  v5 = *v0;
  v6 = sub_18C712174();
  v7 = *(_QWORD *)(v5 + 16);
  v36 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v30 = v36;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v36;
  }
  v33 = v5 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v13 + 63) >> 6;
  v16 = v35;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v26 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v12;
    if (!v27)
    {
      v12 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v12);
      if (!v27)
        break;
    }
LABEL_25:
    v15 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v4, *(_QWORD *)(v5 + 56) + v23, v16);
    v24 = v36;
    v25 = (_QWORD *)(*(_QWORD *)(v36 + 48) + v19);
    *v25 = v22;
    v25[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v24 + 56) + v23, v4, v16);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v12 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v12 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v12);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_18C6FC5C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0439D0);
  v2 = *v0;
  v3 = sub_18C712174();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_18C6E87C0(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_18C6FC7B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044110);
  v2 = *v0;
  v3 = sub_18C712174();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_18C6FE05C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_18C6FE044(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _s22AccessibilityUtilities13AXPreferencesC6SpeechC14SelectionScopeO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_18C711B08();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_18C711A90();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (uint64_t *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x1E0C80A78](v13, v16);
  v19 = (char *)&v41 - v18;
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v41 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044118);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = &v27[*(int *)(v25 + 48)];
  sub_18C6F9410(a1, (uint64_t)v27);
  sub_18C6F9410(v44, (uint64_t)v28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_18C6F9410((uint64_t)v27, (uint64_t)v22);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v28, v6);
      v33 = MEMORY[0x18D783B70](v22, v10);
      v39 = *(void (**)(char *, uint64_t))(v7 + 8);
      v39(v10, v6);
      v39(v22, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_18C6F9410((uint64_t)v27, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v31 = v41;
      v30 = v42;
      v32 = v43;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v28, v43);
      v33 = MEMORY[0x18D783BB8](v19, v31);
      v34 = *(void (**)(char *, uint64_t))(v30 + 8);
      v34(v31, v32);
      v34(v19, v32);
LABEL_19:
      sub_18C6FD288((uint64_t)v27);
      return v33 & 1;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v43);
    goto LABEL_16;
  }
  sub_18C6F9410((uint64_t)v27, (uint64_t)v15);
  v36 = *v15;
  v35 = v15[1];
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    sub_18C6E87FC((uint64_t)v27, &qword_1EE044118);
    goto LABEL_17;
  }
  if (v36 == *(_QWORD *)v28 && v35 == *((_QWORD *)v28 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  v38 = sub_18C712264();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
  {
LABEL_21:
    sub_18C6FD288((uint64_t)v27);
    v33 = 1;
    return v33 & 1;
  }
  sub_18C6FD288((uint64_t)v27);
LABEL_17:
  v33 = 0;
  return v33 & 1;
}

unint64_t sub_18C6FCCB8()
{
  unint64_t result;

  result = qword_1EE043F88;
  if (!qword_1EE043F88)
  {
    result = MEMORY[0x18D786960](&unk_18C7388DC, &_s6SpeechC14SelectionScopeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE043F88);
  }
  return result;
}

unint64_t sub_18C6FCCFC()
{
  unint64_t result;

  result = qword_1EE043F90;
  if (!qword_1EE043F90)
  {
    result = MEMORY[0x18D786960](&unk_18C73888C, &_s6SpeechC14SelectionScopeO15OtherCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE043F90);
  }
  return result;
}

unint64_t sub_18C6FCD40()
{
  unint64_t result;

  result = qword_1EE043F98;
  if (!qword_1EE043F98)
  {
    result = MEMORY[0x18D786960](&unk_18C73883C, &_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE043F98);
  }
  return result;
}

unint64_t sub_18C6FCD84()
{
  unint64_t result;

  result = qword_1EE043FA8;
  if (!qword_1EE043FA8)
  {
    result = MEMORY[0x18D786960](&unk_18C7387EC, &_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE043FA8);
  }
  return result;
}

uint64_t sub_18C6FCDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C6FCE10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(sub_18C711A90() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_18C6D517C;
  return sub_18C6F8700(a1, a2, v8, v9);
}

uint64_t sub_18C6FCEA8(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C88, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.Speech, (uint64_t)&protocol conformance descriptor for AXPreferences.Speech);
}

uint64_t sub_18C6FCED4()
{
  return sub_18C6D2488(&qword_1EE043FF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.Speech.SelectionScope, (uint64_t)&protocol conformance descriptor for AXPreferences.Speech.SelectionScope);
}

uint64_t dispatch thunk of VoiceSelectionReporter.client.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VoiceSelectionReporter.selectedVoiceIdentifiers()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D3F50;
  return v7(a1, a2);
}

uint64_t *_s6SpeechC14SelectionScopeOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
        v7 = sub_18C711B08();
      else
        v7 = sub_18C711A90();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s6SpeechC14SelectionScopeOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_18C711B08();
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_18C711A90();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *_s6SpeechC14SelectionScopeOwcp(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
      v5 = sub_18C711B08();
    else
      v5 = sub_18C711A90();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *_s6SpeechC14SelectionScopeOwca(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_18C6FD288((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
        v5 = sub_18C711B08();
      else
        v5 = sub_18C711A90();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_18C6FD288(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AXPreferences.Speech.SelectionScope();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_s6SpeechC14SelectionScopeOwtk(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_18C711B08();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_18C711A90();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s6SpeechC14SelectionScopeOwta(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_18C6FD288((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_18C711B08();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_18C711A90();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s6SpeechC14SelectionScopeOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t _s6SpeechC14SelectionScopeOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_18C6FD478()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_18C6FD488()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_18C711A90();
  if (v1 <= 0x3F)
  {
    result = sub_18C711B08();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t _s6SpeechC6ClientOwxx(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s6SpeechC6ClientOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *_s6SpeechC6ClientOwca(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _s6SpeechC6ClientOwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6SpeechC6ClientOwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t _s6SpeechC6ClientOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

uint64_t sub_18C6FD728(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_18C6FD740(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AXPreferences.Speech.Client()
{
  return &type metadata for AXPreferences.Speech.Client;
}

uint64_t _s6SpeechC14SelectionScopeO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6SpeechC14SelectionScopeO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18C6FD84C + 4 * byte_18C738315[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18C6FD880 + 4 * byte_18C738310[v4]))();
}

uint64_t sub_18C6FD880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6FD888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18C6FD890);
  return result;
}

uint64_t sub_18C6FD89C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18C6FD8A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18C6FD8A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6FD8B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6SpeechC14SelectionScopeO10CodingKeysOMa()
{
  return &_s6SpeechC14SelectionScopeO10CodingKeysON;
}

uint64_t sub_18C6FD8D8()
{
  return 0;
}

ValueMetadata *_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysOMa()
{
  return &_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysON;
}

ValueMetadata *_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysOMa()
{
  return &_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysON;
}

uint64_t _s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18C6FD990 + 4 * byte_18C73831A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18C6FD9B0 + 4 * byte_18C73831F[v4]))();
}

_BYTE *sub_18C6FD990(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18C6FD9B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18C6FD9B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18C6FD9C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18C6FD9C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18C6FD9D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s6SpeechC14SelectionScopeO15OtherCodingKeysOMa()
{
  return &_s6SpeechC14SelectionScopeO15OtherCodingKeysON;
}

unint64_t sub_18C6FD9F0()
{
  unint64_t result;

  result = qword_1EE0440A8;
  if (!qword_1EE0440A8)
  {
    result = MEMORY[0x18D786960](&unk_18C73859C, &_s6SpeechC14SelectionScopeO15OtherCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440A8);
  }
  return result;
}

unint64_t sub_18C6FDA38()
{
  unint64_t result;

  result = qword_1EE0440B0;
  if (!qword_1EE0440B0)
  {
    result = MEMORY[0x18D786960](&unk_18C738654, &_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440B0);
  }
  return result;
}

unint64_t sub_18C6FDA80()
{
  unint64_t result;

  result = qword_1EE0440B8;
  if (!qword_1EE0440B8)
  {
    result = MEMORY[0x18D786960](&unk_18C73870C, &_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440B8);
  }
  return result;
}

unint64_t sub_18C6FDAC8()
{
  unint64_t result;

  result = qword_1EE0440C0;
  if (!qword_1EE0440C0)
  {
    result = MEMORY[0x18D786960](&unk_18C7387C4, &_s6SpeechC14SelectionScopeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440C0);
  }
  return result;
}

unint64_t sub_18C6FDB10()
{
  unint64_t result;

  result = qword_1EE0440C8;
  if (!qword_1EE0440C8)
  {
    result = MEMORY[0x18D786960](&unk_18C73867C, &_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440C8);
  }
  return result;
}

unint64_t sub_18C6FDB58()
{
  unint64_t result;

  result = qword_1EE0440D0;
  if (!qword_1EE0440D0)
  {
    result = MEMORY[0x18D786960](&unk_18C7386A4, &_s6SpeechC14SelectionScopeO25GeneralLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440D0);
  }
  return result;
}

unint64_t sub_18C6FDBA0()
{
  unint64_t result;

  result = qword_1EE0440D8;
  if (!qword_1EE0440D8)
  {
    result = MEMORY[0x18D786960](&unk_18C7385C4, &_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440D8);
  }
  return result;
}

unint64_t sub_18C6FDBE8()
{
  unint64_t result;

  result = qword_1EE0440E0;
  if (!qword_1EE0440E0)
  {
    result = MEMORY[0x18D786960](&unk_18C7385EC, &_s6SpeechC14SelectionScopeO26SpecificLanguageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440E0);
  }
  return result;
}

unint64_t sub_18C6FDC30()
{
  unint64_t result;

  result = qword_1EE0440E8;
  if (!qword_1EE0440E8)
  {
    result = MEMORY[0x18D786960](&unk_18C73850C, &_s6SpeechC14SelectionScopeO15OtherCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440E8);
  }
  return result;
}

unint64_t sub_18C6FDC78()
{
  unint64_t result;

  result = qword_1EE0440F0;
  if (!qword_1EE0440F0)
  {
    result = MEMORY[0x18D786960](&unk_18C738534, &_s6SpeechC14SelectionScopeO15OtherCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440F0);
  }
  return result;
}

unint64_t sub_18C6FDCC0()
{
  unint64_t result;

  result = qword_1EE0440F8;
  if (!qword_1EE0440F8)
  {
    result = MEMORY[0x18D786960](&unk_18C738734, &_s6SpeechC14SelectionScopeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE0440F8);
  }
  return result;
}

unint64_t sub_18C6FDD08()
{
  unint64_t result;

  result = qword_1EE044100;
  if (!qword_1EE044100)
  {
    result = MEMORY[0x18D786960](&unk_18C73875C, &_s6SpeechC14SelectionScopeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE044100);
  }
  return result;
}

uint64_t sub_18C6FDD4C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4C6C6172656E6567 && a2 == 0xEF65676175676E61;
  if (v3 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000018C735870 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726568746FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_18C712264();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_18C6FDEA0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_18C712264();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_18C6FDF24()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_18C6FDF3C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_18C712264();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_18C6FDFA8()
{
  return 12383;
}

uint64_t sub_18C6FDFB4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_18C712264();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_18C6FE030()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_18C6FE044(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_18C6FE05C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18C6FE0A0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 40))(a2, a1);
  return a2;
}

_OWORD *sub_18C6FE0DC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_18C6FE0EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044128);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_18C6FE1B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B60) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE044128) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_18C6D4460;
  return sub_18C6F8A64(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_18C6FE27C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044140);
  return sub_18C711FF4();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_18C711A90();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18C6FE32C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(sub_18C711A90() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_18C6D4460;
  return sub_18C6F8700(a1, a2, v8, v9);
}

uint64_t sub_18C6FE3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter()
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return sub_18C711D3C();
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem()
{
  uint64_t result;

  result = qword_1EE044200;
  if (!qword_1EE044200)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18C6FE474()
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  swift_bridgeObjectRetain();
  return sub_18C711D48();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.voiceId.setter()
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return sub_18C711D48();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(id:selection:userDefinedName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t result;

  v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v13 = (_QWORD *)((char *)a6 + *(int *)(v12 + 24));
  *a6 = a1;
  a6[1] = a2;
  v14 = (char *)a6 + *(int *)(v12 + 20);
  v15 = sub_18C711D54();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
  *v13 = a4;
  v13[1] = a5;
  return result;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.id.modify())()
{
  return nullsub_1;
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.voiceId.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  *(_QWORD *)a1 = sub_18C711D3C();
  *(_QWORD *)(a1 + 8) = v3;
  return sub_18C6FE644;
}

uint64_t sub_18C6FE644(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return sub_18C711D48();
  swift_bridgeObjectRetain();
  sub_18C711D48();
  return swift_bridgeObjectRelease();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.selection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  v4 = sub_18C711D54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.selection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  v4 = sub_18C711D54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.selection.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.modify())()
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(id:voiceId:speechRate:speechPitch:voiceSettings:userDefinedName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X7>, _QWORD *a4@<X8>, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;

  v8 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  result = sub_18C711D30();
  v10 = (_QWORD *)((char *)a4 + *(int *)(v8 + 24));
  *a4 = a1;
  a4[1] = a2;
  *v10 = a3;
  v10[1] = a5;
  return result;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_1EE044170;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  qword_1EE044170 = a1;
  qword_1EE044178 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_18C6FE9C0()
{
  qword_1EE044180 = MEMORY[0x1E0DEE9D8];
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.migrations.getter()
{
  if (qword_1EE043898 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.migrations.setter(uint64_t a1)
{
  if (qword_1EE043898 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EE044180 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.VoiceRotorItem.migrations.modify())()
{
  if (qword_1EE043898 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_18C711EBC();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  sub_18C711D54();
  sub_18C6F3E60(&qword_1EE043E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE0]);
  sub_18C711E68();
  if (!*(_QWORD *)(v0 + *(int *)(v1 + 24) + 8))
    return sub_18C7122A0();
  sub_18C7122A0();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18C6FEC24(char a1)
{
  return qword_18C738BE0[a1];
}

uint64_t sub_18C6FEC44()
{
  char *v0;

  return sub_18C6FEC24(*v0);
}

uint64_t sub_18C6FEC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C6FFDE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18C6FEC70()
{
  sub_18C6FF5F4();
  return sub_18C7122DC();
}

uint64_t sub_18C6FEC98()
{
  sub_18C6FF5F4();
  return sub_18C7122E8();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044188);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C6FF5F4();
  sub_18C7122D0();
  v9[15] = 0;
  sub_18C712240();
  if (!v1)
  {
    type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    v9[14] = 1;
    sub_18C711D54();
    sub_18C6F3E60(&qword_1EE043E38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2ED8]);
    sub_18C71224C();
    v9[13] = 2;
    sub_18C71221C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_18C712288();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  sub_18C711D54();
  sub_18C6F3E60(&qword_1EE043E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE0]);
  sub_18C711E68();
  if (*(_QWORD *)(v0 + *(int *)(v1 + 24) + 8))
  {
    sub_18C7122A0();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18C7122A0();
  }
  return sub_18C7122B8();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v34 = a2;
  v3 = sub_18C711D54();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044198);
  v7 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (uint64_t *)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (char *)v15 + *(int *)(v13 + 24);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v39 = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C6FF5F4();
  v38 = v10;
  v17 = (uint64_t)v40;
  sub_18C7122C4();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v6;
    v19 = v7;
    v40 = a1;
    v32 = v11;
    v33 = v15;
    v20 = v35;
    v21 = v36;
    v43 = 0;
    v22 = v37;
    v23 = sub_18C7121EC();
    v24 = (uint64_t)v33;
    *v33 = v23;
    *(_QWORD *)(v24 + 8) = v25;
    v42 = 1;
    sub_18C6F3E60(&qword_1EE043E48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EF0]);
    sub_18C7121F8();
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v24 + *(int *)(v32 + 20), v18, v21);
    v41 = 2;
    v26 = sub_18C7121C8();
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v22);
    v29 = (uint64_t *)v39;
    swift_bridgeObjectRelease();
    *v29 = v26;
    v29[1] = v28;
    sub_18C6D9354(v24, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return sub_18C6FF638(v24);
  }
}

uint64_t sub_18C6FF24C()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_1EE044170;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18C6FF29C()
{
  if (qword_1EE043898 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18C6FF308@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18C6FF318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  sub_18C711EBC();
  swift_bridgeObjectRelease();
  sub_18C711D54();
  sub_18C6F3E60(&qword_1EE043E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE0]);
  sub_18C711E68();
  if (!*(_QWORD *)(v2 + *(int *)(a2 + 24) + 8))
    return sub_18C7122A0();
  sub_18C7122A0();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18C6FF410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18C712288();
  swift_bridgeObjectRetain();
  sub_18C711EBC();
  swift_bridgeObjectRelease();
  sub_18C711D54();
  sub_18C6F3E60(&qword_1EE043E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2EC8], MEMORY[0x1E0CF2EE0]);
  sub_18C711E68();
  if (*(_QWORD *)(v2 + *(int *)(a2 + 24) + 8))
  {
    sub_18C7122A0();
    swift_bridgeObjectRetain();
    sub_18C711EBC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18C7122A0();
  }
  return sub_18C7122B8();
}

uint64_t sub_18C6FF508@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AXPreferences.VoiceOver.VoiceRotorItem.init(from:)(a1, a2);
}

uint64_t sub_18C6FF51C(_QWORD *a1)
{
  return AXPreferences.VoiceOver.VoiceRotorItem.encode(to:)(a1);
}

uint64_t _s22AccessibilityUtilities13AXPreferencesC9VoiceOverC0D9RotorItemV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_18C712264(), result = 0, (v5 & 1) != 0))
  {
    v7 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    if ((MEMORY[0x18D783DB0]((char *)a1 + *(int *)(v7 + 20), (char *)a2 + *(int *)(v7 + 20)) & 1) != 0)
    {
      v8 = *(int *)(v7 + 24);
      v9 = (_QWORD *)((char *)a1 + v8);
      v10 = *(_QWORD *)((char *)a1 + v8 + 8);
      v11 = (_QWORD *)((char *)a2 + v8);
      v12 = v11[1];
      if (v10)
      {
        if (v12)
        {
          v13 = *v9 == *v11 && v10 == v12;
          if (v13 || (sub_18C712264() & 1) != 0)
            return 1;
        }
      }
      else if (!v12)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_18C6FF5F4()
{
  unint64_t result;

  result = qword_1EE044190;
  if (!qword_1EE044190)
  {
    result = MEMORY[0x18D786960](&unk_18C738B8C, &_s14VoiceRotorItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE044190);
  }
  return result;
}

uint64_t sub_18C6FF638(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18C6FF674()
{
  return sub_18C6F3E60(&qword_1ECE67090, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18C6FF6A0()
{
  return sub_18C6F3E60(&qword_1ECE67088, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18C6FF6CC()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t sub_18C6FF6D8()
{
  return sub_18C6F3E60(&qword_1EE0441A0, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18C6FF704@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  result = sub_18C711D3C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t *_s14VoiceRotorItemVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_18C711D54();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s14VoiceRotorItemVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_18C711D54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *_s14VoiceRotorItemVwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_18C711D54();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s14VoiceRotorItemVwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_18C711D54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s14VoiceRotorItemVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_18C711D54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *_s14VoiceRotorItemVwta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_18C711D54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14VoiceRotorItemVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18C6FFAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_18C711D54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t _s14VoiceRotorItemVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18C6FFB50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_18C711D54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_18C6FFBC4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_18C711D54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s14VoiceRotorItemV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18C6FFC8C + 4 * byte_18C738935[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18C6FFCC0 + 4 * byte_18C738930[v4]))();
}

uint64_t sub_18C6FFCC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6FFCC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18C6FFCD0);
  return result;
}

uint64_t sub_18C6FFCDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18C6FFCE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18C6FFCE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C6FFCF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14VoiceRotorItemV10CodingKeysOMa()
{
  return &_s14VoiceRotorItemV10CodingKeysON;
}

unint64_t sub_18C6FFD10()
{
  unint64_t result;

  result = qword_1EE044240;
  if (!qword_1EE044240)
  {
    result = MEMORY[0x18D786960](&unk_18C738B64, &_s14VoiceRotorItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE044240);
  }
  return result;
}

unint64_t sub_18C6FFD58()
{
  unint64_t result;

  result = qword_1EE044248;
  if (!qword_1EE044248)
  {
    result = MEMORY[0x18D786960](&unk_18C738AD4, &_s14VoiceRotorItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE044248);
  }
  return result;
}

unint64_t sub_18C6FFDA0()
{
  unint64_t result;

  result = qword_1EE044250;
  if (!qword_1EE044250)
  {
    result = MEMORY[0x18D786960](&unk_18C738AFC, &_s14VoiceRotorItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE044250);
  }
  return result;
}

uint64_t sub_18C6FFDE4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697463656C6573 && a2 == 0xE90000000000006ELL || (sub_18C712264() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966654472657375 && a2 == 0xEF656D614E64656ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_18C712264();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id sub_18C6FFF6C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NPSObjc();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NPSObjc()
{
  return objc_opt_self();
}

double sub_18C6FFFBC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  double result;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C711C88();
  v4 = objc_allocWithZone((Class)AXNPSWrapper);
  v5 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDomain_, v5);

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C711C7C();
  v7 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_objectForKey_, v7);

  if (v8)
  {
    sub_18C712084();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE66E50);
  v11 = swift_allocObject();
  sub_18C700634((uint64_t)v10, v11 + 16);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18C7001E0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NPSettingsStore()
{
  return objc_opt_self();
}

double sub_18C700210@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18C6FFFBC(a1, a2);
}

void sub_18C700228(uint64_t a1, _QWORD *a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t inited;
  uint64_t v12;
  void *v13;
  _BYTE v14[24];
  uint64_t v15;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_18C711C88();
  v4 = objc_allocWithZone((Class)AXNPSWrapper);
  v5 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDomain_, v5);

  sub_18C7005C0(a1, (uint64_t)v14);
  if (v15)
  {
    v7 = sub_18C7120B4();
    sub_18C6D50C8((uint64_t)v14);
  }
  else
  {
    v7 = 0;
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_18C711C7C();
  v8 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  sub_18C711C88();
  v9 = (void *)objc_opt_self();
  v10 = (void *)sub_18C711E80();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18C7379D0;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  *(_QWORD *)(inited + 32) = sub_18C711C7C();
  *(_QWORD *)(inited + 40) = v12;
  sub_18C6E68EC(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v13 = (void *)sub_18C712018();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_synchronizeNanoDomain_keys_, v10, v13);

}

uint64_t sub_18C7005C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C700608()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_18C700634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE66E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C70067C()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration);
}

void sub_18C700688(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration);
}

uint64_t (*sub_18C700694(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C7006F4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C700730@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_18C701FBC();
  *a1 = result;
  return result;
}

void sub_18C700754(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18C711DFC();

  *a2 = v4;
}

void sub_18C7007A4(uint64_t a1, _QWORD *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*a2
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
  swift_bridgeObjectRetain();
  v3 = v2;
  sub_18C711E08();

}

uint64_t sub_18C7007F4()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18C711DFC();

  return v3;
}

void sub_18C700838()
{
  uint64_t v0;
  id v1;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18C711E08();

}

uint64_t (*sub_18C70087C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C7008DC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C700918()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
}

void sub_18C700924(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
}

uint64_t (*sub_18C700930(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C700990()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C7009CC()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
}

void sub_18C7009D8(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
}

uint64_t (*sub_18C7009E4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C700A44()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C700A80()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
}

void sub_18C700A8C(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
}

uint64_t (*sub_18C700A98(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C700AF8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C700B34()
{
  return sub_18C6D0B4C(&OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
}

void sub_18C700B40(uint64_t a1)
{
  sub_18C6D0B98(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
}

uint64_t (*sub_18C700B4C(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_18C711DF0();
  return sub_18C6D0384;
}

uint64_t sub_18C700BAC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys));
  v2 = sub_18C711E14();

  return v2;
}

uint64_t sub_18C700BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t sub_18C700C04()
{
  _QWORD *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = objc_retain(*(id *)(v0[5]
                         + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  v2 = (void *)sub_18C711E14();

  sub_18C711DCC();
  v3 = v0[2];
  v0[6] = v3;
  sub_18C711B8C();
  v4 = sub_18C711B80();
  v0[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_18C700CC0;
  return Dictionary<>.speechVoiceIdentifier(forLanguage:withResolver:exists:)(v0[3], v0[4], v4, 0, v3);
}

uint64_t sub_18C700CC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_18C700E64(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18C711EA4();
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_18C6D36D0;
  v9[4] = v7;
  v9[5] = v8;
  v9[3] = a1;
  return swift_task_switch();
}

id AXPreferences.AssistiveTouch.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AXPreferences.AssistiveTouch.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  objc_super v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration;
  v6 = sub_18C711DA8();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v4, 1, 1, v6);
  v8 = v0;
  *(_QWORD *)&v0[v5] = sub_18C701310(1, 0xD000000000000017, 0x800000018C7359A0, 0, 0, 4, (uint64_t)v4, 0, 0);
  v9 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage;
  v10 = sub_18C6D2750(MEMORY[0x1E0DEE9D8]);
  v7(v4, 1, 1, v6);
  v11 = sub_18C702B38(v10, 0xD000000000000016, 0x800000018C734340, 0, 0, 6, (uint64_t)v4, (uint64_t)sub_18C700730, 0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v9] = v11;
  v12 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v12] = sub_18C701310(0, 0xD000000000000014, 0x800000018C7359C0, 0, 0, 1, (uint64_t)v4, 0, 0);
  v13 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v13] = sub_18C701310(1, 0xD00000000000001ELL, 0x800000018C7359E0, 0xD00000000000002FLL, 0x800000018C735A00, 4, (uint64_t)v4, 0, 0);
  v14 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning;
  v15 = sub_18C711EA4();
  v17 = v16;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v14] = sub_18C701310(1, 0xD000000000000024, 0x800000018C735A30, v15, v17, 4, (uint64_t)v4, 0, 0);
  v18 = OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys;
  v7(v4, 1, 1, v6);
  *(_QWORD *)&v8[v18] = sub_18C701310(1, 0xD000000000000021, 0x800000018C735A60, 0xD00000000000002FLL, 0x800000018C735A90, 4, (uint64_t)v4, 0, 0);

  v19 = (objc_class *)type metadata accessor for AXPreferences.AssistiveTouch();
  v21.receiver = v8;
  v21.super_class = v19;
  return objc_msgSendSuper2(&v21, sel_init);
}

id AXPreferences.AssistiveTouch.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.AssistiveTouch();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C701310(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];
  char v42;

  v38 = a8;
  v33[2] = a4;
  v34 = a1;
  v36 = a9;
  v35 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v35, v13);
  v37 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_18C711DA8();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (_QWORD *)((char *)v33 - v26);
  v40 = a7;
  sub_18C6D2528(a7, (uint64_t)v18);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  v39 = a6;
  v33[1] = a2;
  if (v28 != 1)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v27, v18, v19);
    v30 = v34;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    sub_18C7120FC();
    swift_bridgeObjectRelease();
    strcpy((char *)v41, "AssistiveTouch");
    HIBYTE(v41[1]) = -18;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v41[0] = 0;
  v41[1] = 0xE000000000000000;
  sub_18C7120FC();
  swift_bridgeObjectRelease();
  strcpy((char *)v41, "assistiveTouch");
  HIBYTE(v41[1]) = -18;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v29 = v41[1];
  *v27 = v41[0];
  v27[1] = v29;
  v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v27, *MEMORY[0x1E0CF2F50], v19);
  sub_18C6E87FC((uint64_t)v18, &qword_1EE0438E0);
  v30 = v34;
  if (!a5)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE043930);
  v42 = v30 & 1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 16))(v24, v27, v19);
  v41[0] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v41[3] = sub_18C711C70();
  v41[4] = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(v41);
  sub_18C711C64();
  v31 = sub_18C711DD8();
  sub_18C6E87FC(v40, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v27, v19);
  return v31;
}

uint64_t sub_18C7016D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_18C6D517C;
  return v6();
}

uint64_t sub_18C70172C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_18C6D517C;
  return v7();
}

uint64_t sub_18C701780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_18C711F88();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_18C711F7C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_18C6E87FC(a1, &qword_1EE043980);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18C711F58();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_18C7018CC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_18C701930;
  return v6(a1);
}

uint64_t sub_18C701930()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18C70197C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_18C701A4C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_18C6D50FC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_18C6D50FC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_18C701A4C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_18C71206C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_18C701C04(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_18C712138();
  if (!v8)
  {
    sub_18C712150();
    __break(1u);
LABEL_17:
    result = sub_18C712198();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_18C701C04(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_18C701C98(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_18C701E70(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_18C701E70(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18C701C98(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_18C701E0C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_18C712108();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_18C712150();
      __break(1u);
LABEL_10:
      v2 = sub_18C711EE0();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_18C712198();
    __break(1u);
LABEL_14:
    result = sub_18C712150();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_18C701E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE0443A0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_18C701E70(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE0443A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C701FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  int v61;
  int v62;
  char v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  int isUniquelyReferenced_nonNull_native;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  NSObject *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t result;
  _QWORD v102[3];
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[5];
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v0 = sub_18C711D54();
  v119 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0, v1);
  v118 = (char *)v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2, v4);
  v108 = (char *)v102 - v5;
  v111 = sub_18C711A90();
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v6);
  v120 = (uint64_t)v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = MEMORY[0x1E0DEE9E0];
  v109 = (id)objc_opt_self();
  v8 = objc_msgSend(v109, sel_sharedInstance);
  v9 = objc_msgSend(v8, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v9)
    goto LABEL_82;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CB0);
  v10 = sub_18C711E44();

  v11 = sub_18C711EA4();
  if (!*(_QWORD *)(v10 + 16) || (v13 = sub_18C6F9454(v11, v12), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v109, sel_sharedInstance);
  objc_msgSend(v16, sel_assistiveTouchScannerSpeechRate);
  v18 = v17;

  v19 = 0;
  v21 = *(_QWORD *)(v15 + 64);
  v103 = v15 + 64;
  v107 = v15;
  v22 = 1 << *(_BYTE *)(v15 + 32);
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v24 = v23 & v21;
  v104 = (unint64_t)(v22 + 63) >> 6;
  v106 = *MEMORY[0x1E0CF37D8];
  v102[2] = *MEMORY[0x1E0DBEF60];
  *(float *)&v20 = v18;
  v105 = v20;
  v102[1] = MEMORY[0x1E0DEE9B8] + 8;
  v102[0] = v0;
  while (1)
  {
    if (v24)
    {
      v112 = (v24 - 1) & v24;
      v113 = v19;
      v25 = __clz(__rbit64(v24)) | (v19 << 6);
    }
    else
    {
      v26 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_92;
      if (v26 >= v104)
        goto LABEL_81;
      v27 = *(_QWORD *)(v103 + 8 * v26);
      v28 = v19 + 1;
      if (!v27)
      {
        v28 = v19 + 2;
        if (v19 + 2 >= v104)
          goto LABEL_81;
        v27 = *(_QWORD *)(v103 + 8 * v28);
        if (!v27)
        {
          v28 = v19 + 3;
          if (v19 + 3 >= v104)
            goto LABEL_81;
          v27 = *(_QWORD *)(v103 + 8 * v28);
          if (!v27)
          {
            v29 = v19 + 4;
            if (v19 + 4 >= v104)
              goto LABEL_81;
            v27 = *(_QWORD *)(v103 + 8 * v29);
            if (!v27)
            {
              while (1)
              {
                v28 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_93;
                if (v28 >= v104)
                  break;
                v27 = *(_QWORD *)(v103 + 8 * v28);
                ++v29;
                if (v27)
                  goto LABEL_25;
              }
LABEL_81:
              swift_release();
LABEL_82:
              v92 = sub_18C71203C();
              v93 = (id)AXTTSLogCommon();
              if (!v93)
                goto LABEL_94;
              v94 = v93;
              v95 = v92;
              if (os_log_type_enabled(v93, v92))
              {
                v96 = (uint8_t *)swift_slowAlloc();
                v97 = swift_slowAlloc();
                v125[0] = v97;
                *(_DWORD *)v96 = 136315138;
                swift_beginAccess();
                sub_18C6D2488(&qword_1EE042CC0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
                swift_bridgeObjectRetain();
                v98 = sub_18C711E50();
                v100 = v99;
                swift_bridgeObjectRelease();
                v123 = sub_18C70197C(v98, v100, v125);
                sub_18C712060();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_18C62B000, v94, v95, "Migrating general selections to %s", v96, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x18D7869F0](v97, -1, -1);
                MEMORY[0x18D7869F0](v96, -1, -1);
              }

              swift_beginAccess();
              return v128;
            }
            v28 = v19 + 4;
          }
        }
      }
LABEL_25:
      v112 = (v27 - 1) & v27;
      v113 = v28;
      v25 = __clz(__rbit64(v27)) + (v28 << 6);
    }
    v30 = 16 * v25;
    v31 = *(_QWORD *)(v107 + 56);
    v32 = (uint64_t *)(*(_QWORD *)(v107 + 48) + v30);
    v33 = v32[1];
    v114 = *v32;
    v34 = (uint64_t *)(v31 + v30);
    v36 = *v34;
    v35 = v34[1];
    v115 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = objc_msgSend(v109, sel_sharedInstance);
    v116 = v36;
    v117 = v35;
    v38 = (void *)sub_18C711E80();
    v39 = objc_msgSend(v37, sel_customSettingsForVoice_sourceKey_, v38, v106);

    if (v39)
      break;
    v126 = 0u;
    v127 = 0u;
LABEL_67:
    sub_18C6E87FC((uint64_t)&v126, &qword_1ECE66E50);
LABEL_68:
    v76 = v120;
    sub_18C711A9C();
    LOBYTE(v125[0]) = 1;
    v77 = v108;
    sub_18C711D30();
    v78 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
    v78(v118, v77, v0);
    v79 = v128;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v125[0] = v79;
    v128 = 0x8000000000000000;
    v82 = sub_18C6F9344(v76);
    v83 = *(_QWORD *)(v79 + 16);
    v84 = (v81 & 1) == 0;
    v85 = v83 + v84;
    if (__OFADD__(v83, v84))
      goto LABEL_89;
    v86 = v81;
    if (*(_QWORD *)(v79 + 24) >= v85)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v89 = (_QWORD *)v125[0];
        if ((v81 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_18C6FBCF4();
        v89 = (_QWORD *)v125[0];
        if ((v86 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_18C6F9844(v85, isUniquelyReferenced_nonNull_native);
      v87 = sub_18C6F9344(v120);
      if ((v86 & 1) != (v88 & 1))
        goto LABEL_96;
      v82 = v87;
      v89 = (_QWORD *)v125[0];
      if ((v86 & 1) != 0)
      {
LABEL_8:
        (*(void (**)(unint64_t, char *, uint64_t))(v119 + 40))(v89[7] + *(_QWORD *)(v119 + 72) * v82, v118, v0);
        goto LABEL_9;
      }
    }
    v89[(v82 >> 6) + 8] |= 1 << v82;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v110 + 16))(v89[6] + *(_QWORD *)(v110 + 72) * v82, v120, v111);
    v78((char *)(v89[7] + *(_QWORD *)(v119 + 72) * v82), v118, v0);
    v90 = v89[2];
    v74 = __OFADD__(v90, 1);
    v91 = v90 + 1;
    if (v74)
      goto LABEL_91;
    v89[2] = v91;
LABEL_9:
    v128 = v125[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v120, v111);
    v19 = v113;
    v24 = v112;
  }
  v40 = sub_18C711E44();

  v123 = sub_18C711EA4();
  v124 = v41;
  sub_18C7120D8();
  if (*(_QWORD *)(v40 + 16) && (v42 = sub_18C6F94B8((uint64_t)v125), (v43 & 1) != 0))
  {
    sub_18C6D50FC(*(_QWORD *)(v40 + 56) + 32 * v42, (uint64_t)&v126);
  }
  else
  {
    v126 = 0u;
    v127 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_18C6D50C8((uint64_t)v125);
  if (!*((_QWORD *)&v127 + 1))
    goto LABEL_67;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_68;
  v44 = 0;
  v45 = v125[0];
  v46 = *(_QWORD *)(v125[0] + 64);
  v121 = v125[0] + 64;
  v47 = 1 << *(_BYTE *)(v125[0] + 32);
  if (v47 < 64)
    v48 = ~(-1 << v47);
  else
    v48 = -1;
  v49 = v48 & v46;
  v122 = (unint64_t)(v47 + 63) >> 6;
  v50 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (2)
  {
    if (v49)
    {
      v51 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      v52 = v51 | (v44 << 6);
    }
    else
    {
      v53 = v44 + 1;
      if (__OFADD__(v44, 1))
        goto LABEL_88;
      if (v53 >= v122)
      {
LABEL_77:
        swift_release();
        v0 = v102[0];
        goto LABEL_68;
      }
      v54 = *(_QWORD *)(v121 + 8 * v53);
      ++v44;
      if (!v54)
      {
        v44 = v53 + 1;
        if (v53 + 1 >= v122)
          goto LABEL_77;
        v54 = *(_QWORD *)(v121 + 8 * v44);
        if (!v54)
        {
          v44 = v53 + 2;
          if (v53 + 2 >= v122)
            goto LABEL_77;
          v54 = *(_QWORD *)(v121 + 8 * v44);
          if (!v54)
          {
            v55 = v53 + 3;
            if (v55 >= v122)
              goto LABEL_77;
            v54 = *(_QWORD *)(v121 + 8 * v55);
            if (!v54)
            {
              while (1)
              {
                v44 = v55 + 1;
                if (__OFADD__(v55, 1))
                  goto LABEL_90;
                if (v44 >= v122)
                  goto LABEL_77;
                v54 = *(_QWORD *)(v121 + 8 * v44);
                ++v55;
                if (v54)
                  goto LABEL_54;
              }
            }
            v44 = v55;
          }
        }
      }
LABEL_54:
      v49 = (v54 - 1) & v54;
      v52 = __clz(__rbit64(v54)) + (v44 << 6);
    }
    v56 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * v52);
    v58 = *v56;
    v57 = v56[1];
    v59 = *(void **)(*(_QWORD *)(v45 + 56) + 8 * v52);
    swift_bridgeObjectRetain();
    v60 = v59;
    objc_msgSend(v60, sel_floatValue);
    v62 = v61;
    v63 = swift_isUniquelyReferenced_nonNull_native();
    v125[0] = (uint64_t)v50;
    v65 = sub_18C6F9454(v58, v57);
    v66 = v50[2];
    v67 = (v64 & 1) == 0;
    v68 = v66 + v67;
    if (!__OFADD__(v66, v67))
    {
      v69 = v64;
      if (v50[3] >= v68)
      {
        if ((v63 & 1) != 0)
        {
          v50 = (_QWORD *)v125[0];
          if ((v64 & 1) == 0)
            goto LABEL_62;
        }
        else
        {
          sub_18C6FBFD4();
          v50 = (_QWORD *)v125[0];
          if ((v69 & 1) == 0)
            goto LABEL_62;
        }
      }
      else
      {
        sub_18C6F9C48(v68, v63);
        v70 = sub_18C6F9454(v58, v57);
        if ((v69 & 1) != (v71 & 1))
          goto LABEL_95;
        v65 = v70;
        v50 = (_QWORD *)v125[0];
        if ((v69 & 1) == 0)
        {
LABEL_62:
          v50[(v65 >> 6) + 8] |= 1 << v65;
          v72 = (uint64_t *)(v50[6] + 16 * v65);
          *v72 = v58;
          v72[1] = v57;
          *(_DWORD *)(v50[7] + 4 * v65) = v62;
          v73 = v50[2];
          v74 = __OFADD__(v73, 1);
          v75 = v73 + 1;
          if (v74)
            goto LABEL_87;
          v50[2] = v75;
          swift_bridgeObjectRetain();
          goto LABEL_38;
        }
      }
      *(_DWORD *)(v50[7] + 4 * v65) = v62;
LABEL_38:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  sub_18C71227C();
  __break(1u);
LABEL_96:
  result = sub_18C71227C();
  __break(1u);
  return result;
}

uint64_t sub_18C702B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[6];

  v37 = a8;
  v33[2] = a4;
  v33[3] = a3;
  v35 = a9;
  v34 = sub_18C711D84();
  MEMORY[0x1E0C80A78](v34, v14);
  v36 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0438E0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_18C711DA8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (_QWORD *)((char *)v33 - v27);
  v39 = a7;
  sub_18C6D2528(a7, (uint64_t)v19);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  v38 = a6;
  v33[1] = a2;
  if (v29 != 1)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v21 + 32))(v28, v19, v20);
    if (a5)
      goto LABEL_3;
LABEL_5:
    v40[0] = 0;
    v40[1] = 0xE000000000000000;
    sub_18C7120FC();
    swift_bridgeObjectRelease();
    strcpy((char *)v40, "AssistiveTouch");
    HIBYTE(v40[1]) = -18;
    sub_18C711EB0();
    swift_bridgeObjectRelease();
    sub_18C711ED4();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  sub_18C7120FC();
  swift_bridgeObjectRelease();
  strcpy((char *)v40, "assistiveTouch");
  HIBYTE(v40[1]) = -18;
  sub_18C711EB0();
  sub_18C711ED4();
  swift_bridgeObjectRelease();
  v30 = v40[1];
  *v28 = v40[0];
  v28[1] = v30;
  v28[2] = 0;
  v28[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v28, *MEMORY[0x1E0CF2F50], v20);
  sub_18C6E87FC((uint64_t)v19, &qword_1EE0438E0);
  if (!a5)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043A10);
  v40[5] = a1;
  (*(void (**)(char *, _QWORD *, uint64_t))(v21 + 16))(v25, v28, v20);
  v40[0] = MEMORY[0x1E0DEE9D8];
  sub_18C6D2488(&qword_1EE043910, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10], MEMORY[0x1E0CF2F20]);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043918);
  sub_18C6D25B0();
  sub_18C71209C();
  v40[3] = sub_18C711C70();
  v40[4] = MEMORY[0x1E0CF2E08];
  __swift_allocate_boxed_opaque_existential_1(v40);
  sub_18C711C64();
  v31 = sub_18C711DD8();
  sub_18C6E87FC(v39, &qword_1EE0438E0);
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v28, v20);
  return v31;
}

uint64_t type metadata accessor for AXPreferences.AssistiveTouch()
{
  return objc_opt_self();
}

uint64_t sub_18C702F18(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE042C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.AssistiveTouch, (uint64_t)&protocol conformance descriptor for AXPreferences.AssistiveTouch);
}

void sub_18C702F44(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration, a2);
}

void sub_18C702F60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__useNinePointCalibration);
}

void sub_18C702F84(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled, a2);
}

void sub_18C702FA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
}

void sub_18C702FBC(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits, a2);
}

void sub_18C702FD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
}

void sub_18C702FF4(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning, a2);
}

void sub_18C703010(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
}

void sub_18C70302C(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_18C6D0AA0(a1, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys, a2);
}

void sub_18C703048(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C6D0AF8(a1, a2, a3, a4, &OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
}

uint64_t method lookup function for AXPreferences.AssistiveTouch()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.useNinePointCalibration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.useNinePointCalibration.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.useNinePointCalibration.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$useNinePointCalibration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$defaultVoiceSelectionsByLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$scannerSpeechEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$scannerSpeechShouldSpeakTraits.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$scannerSpeechIsInterruptedByScanning.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.$eyeTrackingUseZoomForKeyboardKeys.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AXPreferences.AssistiveTouch.speechVoiceIdentifier(forLanguage:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x140);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18C6D410C;
  return v9(a1, a2);
}

uint64_t sub_18C703390()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_18C7033C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_18C6D4460;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1EE044370 + dword_1EE044370))(v2, v3, v4);
}

uint64_t sub_18C703438()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18C70345C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D4460;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE044390 + dword_1EE044390))(a1, v4);
}

uint64_t sub_18C7034CC(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  sub_18C706174(0, v2, 0);
  v3 = v10;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_18C6D50FC(i, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0444C0);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18C706174(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v10;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_18C706174(v5 > 1, v6 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      *(_QWORD *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_18C703610(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_18C712168();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  sub_18C706190(0, v3 & ~(v3 >> 63), 0);
  v4 = v7;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v5 = sub_18C712168();
    swift_bridgeObjectRelease();
    if (!v5)
      return v4;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return v4;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x18D784200](0, a1);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t sub_18C703718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  int64_t v13;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE044410);
    v2 = sub_18C71218C();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v13 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = __clz(__rbit64(v5));
LABEL_23:
    v11 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    v12 = v11;
    MEMORY[0x18D7840F8]();

    swift_bridgeObjectRelease();
    sub_18C707C80();
    swift_release();
    return 0;
  }
  if (v13 <= 1)
    goto LABEL_24;
  v8 = *(_QWORD *)(a1 + 72);
  v9 = 1;
  if (v8)
  {
LABEL_22:
    v7 = __clz(__rbit64(v8)) + (v9 << 6);
    goto LABEL_23;
  }
  v9 = 2;
  if (v13 <= 2)
  {
LABEL_24:
    sub_18C707C80();
    return v2;
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
    goto LABEL_22;
  v9 = 3;
  if (v13 <= 3)
    goto LABEL_24;
  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
    goto LABEL_22;
  v9 = 4;
  if (v13 <= 4)
    goto LABEL_24;
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
    goto LABEL_22;
  v10 = 5;
  if (v13 <= 5)
    goto LABEL_24;
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
    v9 = 5;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v8 = *(_QWORD *)(a1 + 64 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

unint64_t static AXPreferences.VoiceOver.Activity.ArchiveHelper.classNameForArchive.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_18C703A28(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18C703A90()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18C703AD8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_18C703B28())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static AXPreferences.VoiceOver.Activity.ArchiveHelper.supportsSecureCoding.getter()
{
  return 1;
}

void sub_18C703B7C()
{
  sub_18C71215C();
  __break(1u);
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_18C7069F8();

  return v4;
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_18C7069F8();

  return v2;
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AXPreferences.VoiceOver.Activity.ArchiveHelper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_18C703D80()
{
  return 0xD000000000000013;
}

uint64_t sub_18C703D9C()
{
  sub_18C6D2488((unint64_t *)&unk_1EE0443F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
  return sub_18C711DC0();
}

void __swiftcall AXPreferences.VoiceOver.Activity._bridgeToObjectiveC()(AXVoiceOverActivity *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  int *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  int v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v57;
  char **v58;
  id v59;
  int v60;
  id v61;
  int v62;
  id v63;
  int v64;
  id v65;
  int v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  double v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  double v92;
  id v93;
  uint64_t v94;
  id v95;
  double v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  id v105;
  double v106;
  id v107;
  char *v108;
  uint64_t v109;
  int v110;
  id v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  id v117;
  double v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  int v128;
  id v129;
  int v130;
  id v131;
  int v132;
  id v133;
  uint64_t v134;
  id v135;
  int v136;
  id v137;
  int v138;
  id v139;
  void *v140;
  void *v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  id v147;
  int v148;
  id v149;
  int v150;
  id v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;

  v2 = v1;
  v3 = sub_18C711D54();
  v164 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v163 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v161 = (uint64_t)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v152 - v12;
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v152 - v16;
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v158 = (uint64_t)&v152 - v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v157 = (uint64_t)&v152 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(objc_allocWithZone((Class)AXVoiceOverActivity), sel_init);
  v28 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  v29 = *(_QWORD *)(v2 + v28[7]);
  v159 = v17;
  v160 = v13;
  v155 = v29;
  v156 = v26;
  if (v29)
    v30 = (void *)sub_18C712018();
  else
    v30 = 0;
  objc_msgSend(v27, sel_setAppIdentifiers_, v30);

  v31 = (void *)sub_18C711A24();
  objc_msgSend(v27, sel_setUuid_, v31);

  v32 = (void *)sub_18C711E80();
  objc_msgSend(v27, sel_setName_, v32);

  v33 = *(_QWORD *)(v2 + v28[6]);
  v162 = v28;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 16);
    v35 = MEMORY[0x1E0DEE9D8];
    if (v34)
    {
      v153 = v2;
      v154 = v3;
      v152 = v27;
      v167 = MEMORY[0x1E0DEE9D8];
      sub_18C706204(0, v34, 0);
      v35 = v167;
      v36 = sub_18C706874(v33);
      v38 = v37;
      v40 = v39 & 1;
      v165 = (char *)(v33 + 56);
      while ((v36 & 0x8000000000000000) == 0 && v36 < 1 << *(_BYTE *)(v33 + 32))
      {
        if (((*(_QWORD *)&v165[((unint64_t)v36 >> 3) & 0xFFFFFFFFFFFFF8] >> v36) & 1) == 0)
          goto LABEL_108;
        if (*(_DWORD *)(v33 + 36) != v38)
          goto LABEL_109;
        v41 = sub_18C711EA4();
        v43 = v42;
        v167 = v35;
        v45 = *(_QWORD *)(v35 + 16);
        v44 = *(_QWORD *)(v35 + 24);
        if (v45 >= v44 >> 1)
        {
          sub_18C706204(v44 > 1, v45 + 1, 1);
          v35 = v167;
        }
        *(_QWORD *)(v35 + 16) = v45 + 1;
        v46 = v35 + 16 * v45;
        *(_QWORD *)(v46 + 32) = v41;
        *(_QWORD *)(v46 + 40) = v43;
        v47 = sub_18C706914(v36, v38, v40 & 1, v33);
        v36 = v47;
        v38 = v48;
        v40 = v49 & 1;
        if (!--v34)
        {
          sub_18C707AB0(v47, v48, v49 & 1);
          v27 = v152;
          v2 = v153;
          v3 = v154;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
LABEL_15:
    sub_18C6E68EC(v35);
    swift_bridgeObjectRelease();
    v50 = (void *)sub_18C712018();
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_setTextualContexts_, v50);

    v28 = v162;
  }
  v51 = (uint64_t)v156;
  if (v155)
    v52 = (void *)sub_18C712018();
  else
    v52 = 0;
  v53 = v164;
  objc_msgSend(v27, sel_setAppIdentifiers_, v52);

  sub_18C6D5138(v2 + v28[8], v51, &qword_1ECE67110);
  v54 = sub_18C711A54();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v51, 1, v54) != 1)
  {
    v56 = (void *)sub_18C711A24();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v51, v54);
  }
  objc_msgSend(v27, sel_setPunctuationGroup_, v56);

  v57 = *(unsigned __int8 *)(v2 + v28[9]);
  v58 = &selRef_fullKeyboardAccessFocusRingTimeout;
  if (v57 != 2)
  {
    v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v57 & 1);
    objc_msgSend(v27, sel_setTableHeaders_, v59);

  }
  v60 = *(unsigned __int8 *)(v2 + v28[10]);
  if (v60 != 2)
  {
    v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v60 & 1);
    objc_msgSend(v27, sel_setTableRowAndColumn_, v61);

  }
  v62 = *(unsigned __int8 *)(v2 + v28[11]);
  if (v62 != 2)
  {
    v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v62 & 1);
    objc_msgSend(v27, sel_setSpeakEmojis_, v63);

  }
  v64 = *(unsigned __int8 *)(v2 + v28[12]);
  if (v64 != 2)
  {
    v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v64 & 1);
    objc_msgSend(v27, sel_setImageDescriptions_, v65);

  }
  v66 = *(unsigned __int8 *)(v2 + v28[13]);
  if (v66 != 2)
  {
    v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v66 & 1);
    objc_msgSend(v27, sel_setHints_, v67);

  }
  v68 = v2 + v28[14];
  if ((*(_BYTE *)(v68 + 8) & 1) == 0)
  {
    v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)v68);
    objc_msgSend(v27, sel_setContainerFeedback_, v69);

  }
  v70 = v2 + v28[15];
  if ((*(_BYTE *)(v70 + 8) & 1) == 0)
  {
    v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)v70);
    objc_msgSend(v27, sel_setNumberFeedback_, v71);

  }
  v72 = v2 + v28[16];
  if ((*(_BYTE *)(v72 + 8) & 1) == 0)
  {
    v73 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)v72);
    objc_msgSend(v27, sel_setTypingStyle_, v73);

  }
  v74 = v2 + v28[17];
  if ((*(_BYTE *)(v74 + 8) & 1) == 0)
  {
    v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)v74);
    objc_msgSend(v27, sel_setNavigationStyle_, v75);

  }
  v76 = v2 + v28[18];
  v77 = v157;
  sub_18C6D5138(v76, v157, &qword_1EE043B28);
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v78(v77, 1, v3) == 1)
  {
    sub_18C6E87FC(v77, &qword_1EE043B28);
    v79 = 0;
  }
  else
  {
    sub_18C711D3C();
    v81 = v80;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v77, v3);
    if (v81)
    {
      v79 = (void *)sub_18C711E80();
      swift_bridgeObjectRelease();
    }
    else
    {
      v79 = 0;
    }
    v58 = &selRef_fullKeyboardAccessFocusRingTimeout;
  }
  objc_msgSend(v27, sel_setVoiceIdentifier_, v79);

  v82 = v158;
  sub_18C6D5138(v76, v158, &qword_1EE043B28);
  if (v78(v82, 1, v3) == 1)
  {
    sub_18C6E87FC(v82, &qword_1EE043B28);
    v83 = (uint64_t)v159;
  }
  else
  {
    v84 = v82;
    v85 = sub_18C711CD0();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v84, v3);
    v83 = (uint64_t)v159;
    if ((v85 & 0x100000000) == 0)
    {
      v86 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v87) = v85;
      v88 = objc_msgSend(v86, sel_initWithFloat_, v87);
      objc_msgSend(v27, sel_setSpeechRate_, v88);

    }
  }
  sub_18C6D5138(v76, v83, &qword_1EE043B28);
  if (v78(v83, 1, v3) == 1)
  {
    sub_18C6E87FC(v83, &qword_1EE043B28);
    v89 = (uint64_t)v160;
  }
  else
  {
    v90 = sub_18C711CD0();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v83, v3);
    v89 = (uint64_t)v160;
    if ((v90 & 0x100000000) == 0)
    {
      v91 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v92) = v90;
      v93 = objc_msgSend(v91, sel_initWithFloat_, v92);
      objc_msgSend(v27, sel_setSpeechRate_, v93);

    }
  }
  sub_18C6D5138(v76, v89, &qword_1EE043B28);
  if (v78(v89, 1, v3) == 1)
  {
    sub_18C6E87FC(v89, &qword_1EE043B28);
  }
  else
  {
    v94 = sub_18C711D00();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v89, v3);
    if ((v94 & 0x100000000) == 0)
    {
      v95 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v96) = v94;
      v97 = objc_msgSend(v95, sel_initWithFloat_, v96);
      objc_msgSend(v27, sel_setVolume_, v97);

    }
  }
  v98 = v161;
  sub_18C6D5138(v76, v161, &qword_1EE043B28);
  if (v78(v98, 1, v3) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v163, v98, v3);
    v100 = sub_18C711D3C();
    v102 = v101;
    v99 = 0x1E0CB3000uLL;
    if ((sub_18C711CD0() & 0x100000000) != 0)
    {
      v107 = 0;
      if ((sub_18C711CE8() & 0x100000000) != 0)
      {
LABEL_62:
        v108 = 0;
        goto LABEL_66;
      }
    }
    else
    {
      v103 = sub_18C711CD0();
      if ((v103 & 0x100000000) != 0)
      {
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      v104 = v103;
      v105 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v106) = v104;
      v107 = objc_msgSend(v105, sel_initWithFloat_, v106);
      if ((sub_18C711CE8() & 0x100000000) != 0)
        goto LABEL_62;
    }
    v109 = sub_18C711CE8();
    if ((v109 & 0x100000000) != 0)
    {
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
    v110 = v109;
    v111 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v112) = v110;
    v108 = (char *)objc_msgSend(v111, sel_initWithFloat_, v112);
LABEL_66:
    v154 = v3;
    v113 = sub_18C711D00();
    v165 = v108;
    if ((v113 & 0x100000000) != 0)
    {
      v115 = v102;
      v119 = 0;
    }
    else
    {
      v114 = sub_18C711D00();
      if ((v114 & 0x100000000) != 0)
      {
LABEL_112:
        __break(1u);
        return;
      }
      v115 = v102;
      v116 = v114;
      v117 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v118) = v116;
      v119 = objc_msgSend(v117, sel_initWithFloat_, v118);
    }
    v120 = sub_18C711CAC();
    if (v120)
    {
      v167 = v120;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CF0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0443C0);
      swift_dynamicCast();
      v121 = v166;
      v122 = sub_18C711D18();
      if (v122)
      {
LABEL_72:
        v123 = v27;
        v167 = MEMORY[0x1E0DEE9D8];
        v124 = *(_QWORD *)(v122 + 16);
        sub_18C712144();
        v125 = v167;
        swift_bridgeObjectRelease();
        if (v124)
        {
          swift_release();
          v125 = 0;
        }
        v27 = v123;
        v99 = 0x1E0CB3000;
        goto LABEL_77;
      }
    }
    else
    {
      v121 = 0;
      v122 = sub_18C711D18();
      if (v122)
        goto LABEL_72;
    }
    v125 = 0;
LABEL_77:
    v126 = objc_allocWithZone(MEMORY[0x1E0CF3968]);
    v127 = sub_18C6F4F9C(v100, v115, v107, v165, v119, v121, v125);
    objc_msgSend(v27, sel_setVoiceSelection_, v127);

    (*(void (**)(char *, uint64_t))(v164 + 8))(v163, v154);
    v28 = v162;
    v58 = &selRef_fullKeyboardAccessFocusRingTimeout;
    goto LABEL_78;
  }
  sub_18C6E87FC(v98, &qword_1EE043B28);
  v99 = 0x1E0CB3000;
LABEL_78:
  v128 = *(unsigned __int8 *)(v2 + v28[19]);
  if (v128 != 2)
  {
    v129 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v128 & 1);
    objc_msgSend(v27, sel_setSpeechMuted_, v129);

  }
  v130 = *(unsigned __int8 *)(v2 + v28[20]);
  if (v130 != 2)
  {
    v131 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v130 & 1);
    objc_msgSend(v27, sel_setSoundMuted_, v131);

  }
  v132 = *(unsigned __int8 *)(v2 + v28[21]);
  if (v132 != 2)
  {
    v133 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v132 & 1);
    objc_msgSend(v27, sel_setAudioDucking_, v133);

  }
  v134 = v2 + v28[22];
  if ((*(_BYTE *)(v134 + 8) & 1) == 0)
  {
    v135 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), sel_initWithInteger_, *(_QWORD *)v134);
    objc_msgSend(v27, sel_setModifierKeys_, v135);

  }
  v136 = *(unsigned __int8 *)(v2 + v28[23]);
  if (v136 != 2)
  {
    v137 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v136 & 1);
    objc_msgSend(v27, sel_setBrailleStatusCellGeneral_, v137);

  }
  v138 = *(unsigned __int8 *)(v2 + v28[24]);
  if (v138 != 2)
  {
    v139 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v138 & 1);
    objc_msgSend(v27, sel_setBrailleStatusCellText_, v139);

  }
  if (*(_QWORD *)(v2 + v28[25] + 8))
    v140 = (void *)sub_18C711E80();
  else
    v140 = 0;
  objc_msgSend(v27, sel_setBrailleTable_, v140);

  if (*(_QWORD *)(v2 + v28[26] + 8))
    v141 = (void *)sub_18C711E80();
  else
    v141 = 0;
  objc_msgSend(v27, sel_setBrailleInputTable_, v141);

  v142 = v2 + v28[27];
  if ((*(_BYTE *)(v142 + 8) & 1) == 0)
  {
    v143 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), sel_initWithInteger_, *(_QWORD *)v142);
    objc_msgSend(v27, sel_setBrailleOutput_, v143);

  }
  v144 = v2 + v28[28];
  if ((*(_BYTE *)(v144 + 8) & 1) == 0)
  {
    v145 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), sel_initWithInteger_, *(_QWORD *)v144);
    objc_msgSend(v27, sel_setBrailleInput_, v145);

  }
  v146 = v2 + v28[29];
  if ((*(_BYTE *)(v146 + 8) & 1) == 0)
  {
    v147 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), sel_initWithDouble_, *(double *)v146);
    objc_msgSend(v27, sel_setBrailleAutoAdvanceDuration_, v147);

  }
  v148 = *(unsigned __int8 *)(v2 + v28[30]);
  if (v148 != 2)
  {
    v149 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v148 & 1);
    objc_msgSend(v27, sel_setBrailleAlerts_, v149);

  }
  v150 = *(unsigned __int8 *)(v2 + v28[31]);
  if (v150 != 2)
  {
    v151 = objc_msgSend(objc_allocWithZone(*(Class *)(v99 + 2024)), v58[45], v150 & 1);
    objc_msgSend(v27, sel_setBrailleFormatting_, v151);

  }
}

uint64_t static AXPreferences.VoiceOver.Activity._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;

  result = static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    result = sub_18C71215C();
    __break(1u);
  }
  return result;
}

uint64_t static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(id a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void (*v33)(_BYTE *, _BYTE *, uint64_t);
  void (*v34)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  int v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  unsigned int v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  char v92;
  id v93;
  void *v94;
  id v95;
  char v96;
  id v97;
  void *v98;
  id v99;
  char v100;
  id v101;
  void *v102;
  id v103;
  unint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  void *v113;
  unsigned int v114;
  id v115;
  void *v116;
  unsigned int v117;
  id v118;
  void *v119;
  unsigned __int8 v120;
  id v121;
  id v122;
  void *v123;
  id v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  id v129;
  void *v130;
  uint64_t v131;
  id v132;
  void *v133;
  uint64_t v134;
  id v135;
  id v136;
  void *v137;
  id v138;
  id v139;
  void *v140;
  id v141;
  id v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  void *v147;
  id v148;
  void *v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t result;
  char v159;
  _BYTE v160[12];
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  id v164;
  unsigned int v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  id v172;
  uint64_t v173;
  id v174;
  unsigned int v175;
  uint64_t v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE *v192;
  void (*v193)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  char v201;
  char v202;
  char v203;

  v198 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B28);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v160[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B58);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v160[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67110);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = &v160[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = &v160[-v17];
  v19 = sub_18C711A54();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = &v160[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = MEMORY[0x1E0C80A78](v22, v25);
  v28 = &v160[-v27];
  MEMORY[0x1E0C80A78](v26, v29);
  v199 = &v160[-v30];
  v31 = objc_msgSend(a1, sel_uuid);
  if (!v31)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    goto LABEL_16;
  }
  v32 = v31;
  sub_18C711A3C();

  v33 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32);
  v33(v18, v28, v19);
  v34 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v34(v18, 0, 1, v19);
  v197 = v20;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
LABEL_16:
    sub_18C6E87FC((uint64_t)v18, &qword_1ECE67110);
    return 0;
  }
  v193 = v34;
  v35 = v199;
  v33(v199, v18, v19);
  v36 = (uint64_t)objc_msgSend(a1, sel_name);
  if (!v36)
  {
    (*(void (**)(_BYTE *, uint64_t))(v197 + 8))(v35, v19);
    return v36;
  }
  v37 = sub_18C711EA4();
  v187 = v38;
  v188 = v37;

  v39 = objc_msgSend(a1, sel_textualContexts);
  v194 = v6;
  v196 = a1;
  v189 = v10;
  v190 = v19;
  v191 = v24;
  v192 = v15;
  if (v39)
  {
    v40 = v39;
    v41 = sub_18C712024();

    v42 = *(_QWORD *)(v41 + 16);
    if (v42)
    {
      v200 = MEMORY[0x1E0DEE9D8];
      sub_18C7061E8(0, v42, 0);
      v43 = v200;
      v44 = sub_18C706874(v41);
      v46 = v45;
      v48 = v47 & 1;
      while ((v44 & 0x8000000000000000) == 0 && v44 < 1 << *(_BYTE *)(v41 + 32))
      {
        if (((*(_QWORD *)(v41 + 56 + (((unint64_t)v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
          goto LABEL_125;
        if (*(_DWORD *)(v41 + 36) != v46)
          goto LABEL_126;
        swift_bridgeObjectRetain();
        v49 = sub_18C711E80();
        swift_bridgeObjectRelease();
        v200 = v43;
        v51 = *(_QWORD *)(v43 + 16);
        v50 = *(_QWORD *)(v43 + 24);
        if (v51 >= v50 >> 1)
        {
          sub_18C7061E8(v50 > 1, v51 + 1, 1);
          v43 = v200;
        }
        *(_QWORD *)(v43 + 16) = v51 + 1;
        *(_QWORD *)(v43 + 8 * v51 + 32) = v49;
        v52 = sub_18C706914(v44, v46, v48 & 1, v41);
        v44 = v52;
        v46 = v53;
        v48 = v54 & 1;
        if (!--v42)
        {
          sub_18C707AB0(v52, v53, v54 & 1);
          swift_bridgeObjectRelease();
          v24 = v191;
          v15 = v192;
          a1 = v196;
          v19 = v190;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    swift_bridgeObjectRelease();
    v43 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    v55 = sub_18C6E6A04(v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v197 + 16))(v24, v199, v19);
  v56 = objc_msgSend(a1, sel_appIdentifiers);
  v57 = v193;
  if (v56)
  {
    v58 = v56;
    v195 = sub_18C712024();

  }
  else
  {
    v195 = 0;
  }
  v59 = objc_msgSend(a1, sel_punctuationGroup);
  if (v59)
  {
    v60 = v59;
    sub_18C711A3C();

    v61 = 0;
  }
  else
  {
    v61 = 1;
  }
  v57(v15, v61, 1, v19);
  v62 = objc_msgSend(a1, sel_tableHeaders);
  if (v62)
  {
    v63 = v62;
    v64 = objc_msgSend(v62, sel_BOOLValue);

  }
  else
  {
    v64 = 2;
  }
  v65 = objc_msgSend(a1, sel_tableRowAndColumn);
  if (v65)
  {
    v66 = v65;
    v186 = objc_msgSend(v65, sel_BOOLValue);

  }
  else
  {
    v186 = 2;
  }
  v67 = objc_msgSend(a1, sel_speakEmojis);
  if (v67)
  {
    v68 = v67;
    v185 = objc_msgSend(v67, sel_BOOLValue);

  }
  else
  {
    v185 = 2;
  }
  v69 = objc_msgSend(a1, sel_imageDescriptions);
  if (v69)
  {
    v70 = v69;
    v184 = objc_msgSend(v69, sel_BOOLValue);

  }
  else
  {
    v184 = 2;
  }
  v71 = objc_msgSend(a1, sel_hints);
  if (v71)
  {
    v72 = v71;
    v183 = objc_msgSend(v71, sel_BOOLValue);

  }
  else
  {
    v183 = 2;
  }
  v73 = objc_msgSend(a1, sel_containerFeedback);

  v182 = v73;
  if (v73)
  {
    v74 = objc_msgSend(a1, sel_containerFeedback);
    if (!v74)
    {
LABEL_127:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_128;
    }
    v75 = v74;
    v179 = objc_msgSend(v74, sel_integerValue);

  }
  else
  {
    v179 = 0;
  }
  v76 = objc_msgSend(a1, sel_numberFeedback);

  v178 = v76;
  if (v76)
  {
    v77 = objc_msgSend(a1, sel_numberFeedback);
    if (!v77)
    {
LABEL_128:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_129;
    }
    v78 = v77;
    v177 = objc_msgSend(v77, sel_integerValue);

  }
  else
  {
    v177 = 0;
  }
  v79 = (uint64_t)objc_msgSend(a1, sel_typingStyle);

  v176 = v79;
  if (v79)
  {
    v80 = objc_msgSend(a1, sel_typingStyle);
    if (!v80)
    {
LABEL_129:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_130;
    }
    v81 = v80;
    LODWORD(v79) = objc_msgSend(v80, sel_intValue);

    v79 = (int)v79;
  }
  v82 = objc_msgSend(a1, sel_navigationStyle);

  v174 = v82;
  v175 = v64;
  if (v82)
  {
    v83 = objc_msgSend(a1, sel_navigationStyle);
    if (!v83)
    {
LABEL_130:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_131;
    }
    v84 = v83;
    v172 = objc_msgSend(v83, sel_integerValue);

  }
  else
  {
    v172 = 0;
  }
  v193 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v55;
  v85 = objc_msgSend(a1, sel_voiceSelection);
  if (v85
    && (v86 = v85, v87 = objc_msgSend(v85, sel_voiceId), v86, v87))
  {
    v181 = sub_18C711EA4();
    v180 = v88;

  }
  else
  {
    v181 = 0;
    v180 = 0;
  }
  v89 = objc_msgSend(a1, sel_voiceSelection);
  if (v89 && (v90 = v89, v91 = objc_msgSend(v89, sel_rate), v90, v91))
  {
    objc_msgSend(v91, sel_floatValue);

    v92 = 0;
  }
  else
  {
    v92 = 1;
  }
  v93 = objc_msgSend(a1, sel_voiceSelection);
  if (v93
    && (v94 = v93, v95 = objc_msgSend(v93, sel_pitch), v94, v95))
  {
    objc_msgSend(v95, sel_floatValue);

    v96 = 0;
  }
  else
  {
    v96 = 1;
  }
  v97 = objc_msgSend(v196, sel_voiceSelection);
  v173 = v79;
  if (v97
    && (v98 = v97, v99 = objc_msgSend(v97, sel_volume), v98, v99))
  {
    objc_msgSend(v99, sel_floatValue);

    v100 = 0;
  }
  else
  {
    v100 = 1;
  }
  v101 = objc_msgSend(v196, sel_voiceSelection);
  if (v101)
  {
    v102 = v101;
    v103 = objc_msgSend(v101, sel_effects);

    if (v103)
    {
      sub_18C6F56E8(0, &qword_1EE043F38);
      v104 = sub_18C711F4C();

      sub_18C703610(v104);
      swift_bridgeObjectRelease();
    }
  }
  v105 = objc_msgSend(v196, sel_voiceSelection);
  if (v105)
  {
    v106 = v105;
    v107 = objc_msgSend(v105, sel_voiceSettings);

    if (v107)
    {
      sub_18C6F56E8(0, &qword_1ECE670F0);
      v108 = sub_18C711E44();

      sub_18C703718(v108);
      swift_bridgeObjectRelease();
    }
  }
  v203 = v92;
  v202 = v96;
  v201 = v100;
  v109 = (uint64_t)v194;
  sub_18C711D30();
  v110 = sub_18C711D54();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v109, 0, 1, v110);
  v111 = v196;
  v112 = objc_msgSend(v196, sel_speechMuted);
  if (v112)
  {
    v113 = v112;
    v114 = objc_msgSend(v112, sel_BOOLValue);

  }
  else
  {
    v114 = 2;
  }
  v115 = objc_msgSend(v111, sel_soundMuted);
  if (v115)
  {
    v116 = v115;
    v117 = objc_msgSend(v115, sel_BOOLValue);

  }
  else
  {
    v117 = 2;
  }
  v118 = objc_msgSend(v111, sel_audioDucking);
  if (v118)
  {
    v119 = v118;
    v120 = objc_msgSend(v118, sel_BOOLValue);

  }
  else
  {
    v120 = 2;
  }
  v121 = objc_msgSend(v111, sel_modifierKeys);

  if (v121)
  {
    v122 = objc_msgSend(v111, sel_modifierKeys);
    if (!v122)
    {
LABEL_131:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_132;
    }
    v123 = v122;
    v124 = objc_msgSend(v122, sel_integerValue);

  }
  else
  {
    v124 = 0;
  }
  v125 = objc_msgSend(v111, sel_brailleStatusCellGeneral);
  if (v125)
  {
    v126 = v125;
    LODWORD(v180) = objc_msgSend(v125, sel_BOOLValue);

  }
  else
  {
    LODWORD(v180) = 2;
  }
  v127 = objc_msgSend(v111, sel_brailleStatusCellText);
  if (v127)
  {
    v128 = v127;
    v171 = objc_msgSend(v127, sel_BOOLValue);

  }
  else
  {
    v171 = 2;
  }
  v129 = objc_msgSend(v111, sel_brailleTable);
  if (v129)
  {
    v130 = v129;
    v170 = sub_18C711EA4();
    v169 = v131;

  }
  else
  {
    v170 = 0;
    v169 = 0;
  }
  v132 = objc_msgSend(v111, sel_brailleInputTable);
  if (v132)
  {
    v133 = v132;
    v168 = sub_18C711EA4();
    v167 = v134;

  }
  else
  {
    v168 = 0;
    v167 = 0;
  }
  v135 = objc_msgSend(v111, sel_brailleOutput);

  v181 = (uint64_t)v124;
  if (v135)
  {
    v136 = objc_msgSend(v111, sel_brailleOutput);
    if (!v136)
    {
LABEL_132:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_133;
    }
    v137 = v136;
    v166 = objc_msgSend(v136, sel_integerValue);

  }
  else
  {
    v166 = 0;
  }
  v138 = objc_msgSend(v111, sel_brailleInput);

  if (v138)
  {
    v139 = objc_msgSend(v111, sel_brailleInput);
    if (!v139)
    {
LABEL_133:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_134;
    }
    v140 = v139;
    v164 = objc_msgSend(v139, sel_integerValue);

  }
  else
  {
    v164 = 0;
  }
  v141 = objc_msgSend(v111, sel_brailleAutoAdvanceDuration);

  v165 = v117;
  if (!v141)
  {
    sub_18C6E87FC(v198, &qword_1EE042B58);
    v162 = 0;
    goto LABEL_116;
  }
  v142 = objc_msgSend(v111, sel_brailleAutoAdvanceDuration);
  if (v142)
  {
    v143 = v142;
    sub_18C6E87FC(v198, &qword_1EE042B58);
    objc_msgSend(v143, sel_doubleValue);
    v145 = v144;

    v162 = v145;
LABEL_116:
    v146 = objc_msgSend(v111, sel_brailleAlerts);
    if (v146)
    {
      v147 = v146;
      v161 = objc_msgSend(v146, sel_BOOLValue);

    }
    else
    {
      v161 = 2;
    }
    v148 = objc_msgSend(v111, sel_brailleFormatting);
    v163 = v114;
    if (v148)
    {
      v149 = v148;
      v150 = v120;
      v151 = objc_msgSend(v148, sel_BOOLValue);

    }
    else
    {
      v150 = v120;
      v151 = 2;
    }
    v152 = v174 == 0;
    v153 = v176 == 0;
    v154 = v178 == 0;
    v155 = v182 == 0;
    (*(void (**)(_BYTE *, uint64_t))(v197 + 8))(v199, v190);
    v159 = v135 == 0;
    v156 = (uint64_t)v189;
    sub_18C6EBD9C((uint64_t)v191, v188, v187, (uint64_t)v193, v195, (uint64_t)v192, v175, v186, (uint64_t)v189, v185, v184, v183, (uint64_t)v179, v155, (uint64_t)v177, v154, v173, v153, (uint64_t)v172,
      v152,
      (uint64_t)v194,
      v163,
      v165,
      v150,
      v181,
      v121 == 0,
      v180,
      v171,
      v170,
      v169,
      v168,
      v167,
      (uint64_t)v166,
      v159,
      (uint64_t)v164,
      v138 == 0,
      v162,
      v141 == 0,
      v161,
      v151);
    v157 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    v36 = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v156, 0, 1, v157);
    sub_18C707ABC(v156, v198);
    return v36;
  }
LABEL_134:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t static AXPreferences.VoiceOver.Activity._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B58);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v16 - v10;
  if (a1)
  {
    v12 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    v14 = a1;
    if ((static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(v14, (uint64_t)v11) & 1) != 0)
    {
      sub_18C6D5138((uint64_t)v11, (uint64_t)v8, &qword_1EE042B58);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
      {
        sub_18C6E87FC((uint64_t)v11, &qword_1EE042B58);

        return sub_18C707B04((uint64_t)v8, a2);
      }
      sub_18C6E87FC((uint64_t)v8, &qword_1EE042B58);
    }
  }
  result = sub_18C71215C();
  __break(1u);
  return result;
}

uint64_t sub_18C706100(void *a1, uint64_t a2)
{
  uint64_t result;

  result = static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    result = sub_18C71215C();
    __break(1u);
  }
  return result;
}

uint64_t sub_18C706174(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_18C706220(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_18C706190(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_18C7063A8(a1, a2, a3, (_QWORD *)*v3, &qword_1EE044408, MEMORY[0x1E0CF2F98]);
  *v3 = result;
  return result;
}

uint64_t sub_18C7061BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_18C7063A8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1EE0444D0, (uint64_t (*)(_QWORD))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  *v3 = result;
  return result;
}

uint64_t sub_18C7061E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_18C706588(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_18C706204(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_18C70670C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_18C706220(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0444C8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0444C0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C7063A8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C706588(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67100);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for AXSSVoiceOverTextualContext(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C70670C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042C58);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_18C712198();
  __break(1u);
  return result;
}

uint64_t sub_18C706874(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_18C706914(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

id sub_18C7069F8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  unsigned __int8 v44;
  void *v45;
  void *v46;
  unsigned __int8 v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  unsigned __int8 v56;
  void *v57;
  void *v58;
  unsigned __int8 v59;
  uint64_t v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  unsigned __int8 v78;
  void *v79;
  void *v80;
  unsigned __int8 v81;
  char *v83;
  objc_super v84;
  __int128 v85;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044420);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18C738CD0;
  *(_QWORD *)(v1 + 32) = 25705;
  *(_QWORD *)(v1 + 40) = 0xE200000000000000;
  sub_18C6F56E8(0, &qword_1EE044428);
  v83 = v0;
  *(_QWORD *)&v85 = sub_18C712048();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044430);
  sub_18C707C88();
  sub_18C7120D8();
  *(_QWORD *)(v1 + 88) = 1701667182;
  *(_QWORD *)(v1 + 96) = 0xE400000000000000;
  sub_18C6F56E8(0, (unint64_t *)&unk_1EE044448);
  v2 = sub_18C712048();
  if (v2)
  {
    v3 = (void *)v2;
    sub_18C711E98();

    v4 = 0uLL;
  }
  else
  {
    *((_QWORD *)&v4 + 1) = 0;
  }
  *((_QWORD *)&v85 + 1) = *((_QWORD *)&v4 + 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECE670B0);
  sub_18C707DC0(&qword_1EE044458, (uint64_t *)&unk_1ECE670B0, MEMORY[0x1E0DEA978]);
  sub_18C7120D8();
  *(_QWORD *)(v1 + 144) = 0x436C617574786574;
  *(_QWORD *)(v1 + 152) = 0xEF73747865746E6FLL;
  sub_18C6F56E8(0, &qword_1EE044460);
  sub_18C712048();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044468);
  sub_18C707D44();
  sub_18C7120D8();
  strcpy((char *)(v1 + 200), "appIdentifiers");
  *(_BYTE *)(v1 + 215) = -18;
  sub_18C712048();
  sub_18C7120D8();
  *(_QWORD *)(v1 + 256) = 0xD000000000000010;
  *(_QWORD *)(v1 + 264) = 0x800000018C735530;
  *(_QWORD *)&v85 = sub_18C712048();
  sub_18C7120D8();
  strcpy((char *)(v1 + 312), "tableHeaders");
  *(_BYTE *)(v1 + 325) = 0;
  *(_WORD *)(v1 + 326) = -5120;
  sub_18C6F56E8(0, &qword_1ECE670F0);
  v5 = (void *)sub_18C712048();
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_BOOLValue);

  }
  else
  {
    v7 = 2;
  }
  LOBYTE(v85) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE670C0);
  sub_18C707DC0(&qword_1EE044488, &qword_1ECE670C0, MEMORY[0x1E0DEAFB0]);
  sub_18C7120D8();
  *(_QWORD *)(v1 + 368) = 0xD000000000000011;
  *(_QWORD *)(v1 + 376) = 0x800000018C735550;
  v8 = (void *)sub_18C712048();
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, sel_BOOLValue);

  }
  else
  {
    v10 = 2;
  }
  LOBYTE(v85) = v10;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 424) = 0x6F6D456B61657073;
  *(_QWORD *)(v1 + 432) = 0xEB0000000073696ALL;
  v11 = (void *)sub_18C712048();
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_BOOLValue);

  }
  else
  {
    v13 = 2;
  }
  LOBYTE(v85) = v13;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 480) = 0xD000000000000011;
  *(_QWORD *)(v1 + 488) = 0x800000018C735570;
  v14 = (void *)sub_18C712048();
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, sel_BOOLValue);

  }
  else
  {
    v16 = 2;
  }
  LOBYTE(v85) = v16;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 536) = 0x73746E6968;
  *(_QWORD *)(v1 + 544) = 0xE500000000000000;
  v17 = (void *)sub_18C712048();
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_BOOLValue);

  }
  else
  {
    v19 = 2;
  }
  LOBYTE(v85) = v19;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 592) = 0xD000000000000011;
  *(_QWORD *)(v1 + 600) = 0x800000018C735590;
  v20 = (void *)sub_18C712048();
  v21 = v20;
  if (v20)
  {
    v22 = objc_msgSend(v20, sel_integerValue);

  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)&v85 = v22;
  BYTE8(v85) = v21 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044490);
  sub_18C707DC0(&qword_1EE044498, &qword_1EE044490, MEMORY[0x1E0DEB428]);
  sub_18C7120D8();
  strcpy((char *)(v1 + 648), "numberFeedback");
  *(_BYTE *)(v1 + 663) = -18;
  v23 = (void *)sub_18C712048();
  v24 = v23;
  if (v23)
  {
    v25 = objc_msgSend(v23, sel_integerValue);

  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)&v85 = v25;
  BYTE8(v85) = v24 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 704) = 0x7453676E69707974;
  *(_QWORD *)(v1 + 712) = 0xEB00000000656C79;
  v26 = (void *)sub_18C712048();
  v27 = v26;
  if (v26)
  {
    v28 = objc_msgSend(v26, sel_integerValue);

  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)&v85 = v28;
  BYTE8(v85) = v27 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 760) = 0x697461676976616ELL;
  *(_QWORD *)(v1 + 768) = 0xEF656C7974536E6FLL;
  v29 = (void *)sub_18C712048();
  v30 = v29;
  if (v29)
  {
    v31 = objc_msgSend(v29, sel_integerValue);

  }
  else
  {
    v31 = 0;
  }
  *(_QWORD *)&v85 = v31;
  BYTE8(v85) = v30 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 816) = 0x6564496563696F76;
  *(_QWORD *)(v1 + 824) = 0xEF7265696669746ELL;
  v32 = sub_18C712048();
  if (v32)
  {
    v33 = (void *)v32;
    sub_18C711E98();

  }
  v85 = 0uLL;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 872) = 0x6152686365657073;
  *(_QWORD *)(v1 + 880) = 0xEA00000000006574;
  v34 = (void *)sub_18C712048();
  v35 = v34;
  v36 = 0;
  v37 = 0;
  if (v34)
  {
    objc_msgSend(v34, sel_floatValue);
    v37 = v38;

  }
  LODWORD(v85) = v37;
  BYTE4(v85) = v35 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0444A0);
  sub_18C707DC0(&qword_1EE0444A8, &qword_1EE0444A0, MEMORY[0x1E0DEB1A8]);
  sub_18C7120D8();
  *(_QWORD *)(v1 + 928) = 0x656D756C6F76;
  *(_QWORD *)(v1 + 936) = 0xE600000000000000;
  v39 = (void *)sub_18C712048();
  v40 = v39;
  if (v39)
  {
    objc_msgSend(v39, sel_floatValue);
    v36 = v41;

  }
  LODWORD(v85) = v36;
  BYTE4(v85) = v40 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 984) = 0x754D686365657073;
  *(_QWORD *)(v1 + 992) = 0xEB00000000646574;
  v42 = (void *)sub_18C712048();
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, sel_BOOLValue);

  }
  else
  {
    v44 = 2;
  }
  LOBYTE(v85) = v44;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1040) = 0x74754D646E756F73;
  *(_QWORD *)(v1 + 1048) = 0xEA00000000006465;
  v45 = (void *)sub_18C712048();
  if (v45)
  {
    v46 = v45;
    v47 = objc_msgSend(v45, sel_BOOLValue);

  }
  else
  {
    v47 = 2;
  }
  LOBYTE(v85) = v47;
  sub_18C7120D8();
  strcpy((char *)(v1 + 1096), "audioDucking");
  *(_BYTE *)(v1 + 1109) = 0;
  *(_WORD *)(v1 + 1110) = -5120;
  v48 = (void *)sub_18C712048();
  if (v48)
  {
    v49 = v48;
    v50 = objc_msgSend(v48, sel_BOOLValue);

  }
  else
  {
    v50 = 2;
  }
  LOBYTE(v85) = v50;
  sub_18C7120D8();
  strcpy((char *)(v1 + 1152), "modifierKeys");
  *(_BYTE *)(v1 + 1165) = 0;
  *(_WORD *)(v1 + 1166) = -5120;
  v51 = (void *)sub_18C712048();
  v52 = v51;
  if (v51)
  {
    v53 = objc_msgSend(v51, (SEL)&selRef_dictionaryWithObjectsAndKeys_);

  }
  else
  {
    v53 = 0;
  }
  *(_QWORD *)&v85 = v53;
  BYTE8(v85) = v52 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1208) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1216) = 0x800000018C7355B0;
  v54 = (void *)sub_18C712048();
  if (v54)
  {
    v55 = v54;
    v56 = objc_msgSend(v54, sel_BOOLValue);

  }
  else
  {
    v56 = 2;
  }
  LOBYTE(v85) = v56;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1264) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1272) = 0x800000018C7355D0;
  v57 = (void *)sub_18C712048();
  if (v57)
  {
    v58 = v57;
    v59 = objc_msgSend(v57, sel_BOOLValue);

  }
  else
  {
    v59 = 2;
  }
  LOBYTE(v85) = v59;
  sub_18C7120D8();
  strcpy((char *)(v1 + 1320), "brailleTable");
  *(_BYTE *)(v1 + 1333) = 0;
  *(_WORD *)(v1 + 1334) = -5120;
  v60 = sub_18C712048();
  v61 = 0uLL;
  if (v60)
  {
    v62 = (void *)v60;
    sub_18C711E98();

    v61 = 0uLL;
  }
  v85 = v61;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1376) = 0xD000000000000011;
  *(_QWORD *)(v1 + 1384) = 0x800000018C7355F0;
  v63 = sub_18C712048();
  v64 = 0uLL;
  if (v63)
  {
    v65 = (void *)v63;
    sub_18C711E98();

    v64 = 0uLL;
  }
  v85 = v64;
  sub_18C7120D8();
  strcpy((char *)(v1 + 1432), "brailleOutput");
  *(_WORD *)(v1 + 1446) = -4864;
  v66 = (void *)sub_18C712048();
  v67 = v66;
  if (v66)
  {
    v68 = objc_msgSend(v66, (SEL)&selRef_dictionaryWithObjectsAndKeys_);

  }
  else
  {
    v68 = 0;
  }
  *(_QWORD *)&v85 = v68;
  BYTE8(v85) = v67 == 0;
  sub_18C7120D8();
  strcpy((char *)(v1 + 1488), "brailleInput");
  *(_BYTE *)(v1 + 1501) = 0;
  *(_WORD *)(v1 + 1502) = -5120;
  v69 = (void *)sub_18C712048();
  v70 = v69;
  if (v69)
  {
    v71 = objc_msgSend(v69, (SEL)&selRef_dictionaryWithObjectsAndKeys_);

  }
  else
  {
    v71 = 0;
  }
  *(_QWORD *)&v85 = v71;
  BYTE8(v85) = v70 == 0;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1544) = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 1552) = 0x800000018C735610;
  v72 = (void *)sub_18C712048();
  v73 = v72;
  if (v72)
  {
    objc_msgSend(v72, sel_doubleValue);
    v75 = v74;

  }
  else
  {
    v75 = 0;
  }
  *(_QWORD *)&v85 = v75;
  BYTE8(v85) = v73 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0444B0);
  sub_18C707DC0(&qword_1EE0444B8, &qword_1EE0444B0, MEMORY[0x1E0DEB090]);
  sub_18C7120D8();
  strcpy((char *)(v1 + 1600), "brailleAlerts");
  *(_WORD *)(v1 + 1614) = -4864;
  v76 = (void *)sub_18C712048();
  if (v76)
  {
    v77 = v76;
    v78 = objc_msgSend(v76, sel_BOOLValue);

  }
  else
  {
    v78 = 2;
  }
  LOBYTE(v85) = v78;
  sub_18C7120D8();
  *(_QWORD *)(v1 + 1656) = 0xD000000000000011;
  *(_QWORD *)(v1 + 1664) = 0x800000018C735630;
  v79 = (void *)sub_18C712048();
  if (v79)
  {
    v80 = v79;
    v81 = objc_msgSend(v79, sel_BOOLValue);

  }
  else
  {
    v81 = 2;
  }
  LOBYTE(v85) = v81;
  sub_18C7120D8();
  *(_QWORD *)&v83[OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue] = sub_18C6D2D90(v1);

  v84.receiver = v83;
  v84.super_class = (Class)type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper();
  return objc_msgSendSuper2(&v84, sel_init);
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper()
{
  return objc_opt_self();
}

uint64_t sub_18C707AB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_18C707ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042B58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C707B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C707B48()
{
  return sub_18C6D2488(&qword_1EE042B50, 255, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18C707B78(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE0443C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper, (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity.ArchiveHelper);
}

uint64_t sub_18C707BA4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for AXPreferences.VoiceOver.Activity.ArchiveHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_18C707C80()
{
  return swift_release();
}

unint64_t sub_18C707C88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EE044438;
  if (!qword_1EE044438)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE044430);
    v2 = sub_18C707D04(&qword_1EE044440, &qword_1EE044428);
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE044438);
  }
  return result;
}

uint64_t sub_18C707D04(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_18C6F56E8(255, a2);
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18C707D44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EE044470;
  if (!qword_1EE044470)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE044468);
    v2 = sub_18C707D04((unint64_t *)&unk_1EE044478, &qword_1EE044460);
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE044470);
  }
  return result;
}

uint64_t sub_18C707DC0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x18D786960](MEMORY[0x1E0DEE990], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

id sub_18C707E14()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences()), sel_init);
  qword_1EE042CD0 = (uint64_t)result;
  return result;
}

id AXPreferences.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static AXPreferences.shared.getter()
{
  if (qword_1EE042CD8 != -1)
    swift_once();
  return (id)qword_1EE042CD0;
}

id sub_18C707F28()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  return *v1;
}

void sub_18C707FC8(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_18C708018())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_18C7080A4()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_magnifier);
  swift_beginAccess();
  return *v1;
}

void sub_18C708144(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_magnifier);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_18C708194())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_18C708220()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_speech);
  swift_beginAccess();
  return *v1;
}

void sub_18C7082C0(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_speech);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_18C708310())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_18C70839C()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent);
  swift_beginAccess();
  return *v1;
}

void sub_18C70843C(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_18C70848C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_18C708518()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
  swift_beginAccess();
  return *v1;
}

void sub_18C7085B8(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_18C708608())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_18C708694()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech);
  swift_beginAccess();
  return *v1;
}

void sub_18C708734(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

void sub_18C708784(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  void **v6;
  void *v7;
  id v8;

  v5 = *a1;
  v6 = (void **)(*a2 + *a5);
  swift_beginAccess();
  v7 = *v6;
  *v6 = v5;
  v8 = v5;

}

uint64_t (*sub_18C7087E0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static AXPreferences.bridgeSettings()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v0 = type metadata accessor for NPSettingsStore();
  v1 = swift_allocObject();
  v4[3] = v0;
  v4[4] = sub_18C6D2488(&qword_1EE044570, 255, (uint64_t (*)(uint64_t))type metadata accessor for NPSettingsStore, (uint64_t)&unk_18C738C30);
  v4[0] = v1;
  swift_retain();
  sub_18C711DB4();
  type metadata accessor for AXPreferences();
  sub_18C711CA0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  swift_release();
  return v3;
}

id sub_18C7088E8@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences()), sel_init);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for AXPreferences()
{
  return objc_opt_self();
}

uint64_t sub_18C70893C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences____lazy_storage___selectorTargetMap;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences____lazy_storage___selectorTargetMap))
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences____lazy_storage___selectorTargetMap);
  }
  else
  {
    v5 = v2;
    v8 = MEMORY[0x1E0DEE9E0];
    MEMORY[0x1E0C80A78](0, a2);
    type metadata accessor for AXPreferences();
    sub_18C6D2488(&qword_1EE044588, v6, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences, (uint64_t)&protocol conformance descriptor for AXPreferences);
    sub_18C711D60();
    v4 = v8;
    *(_QWORD *)(v5 + v3) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_18C708A28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  _QWORD v12[4];

  v2 = sub_18C711DA8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18C711D90();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  sub_18C711C94();
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x1E0CF2F48])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v6, v2);
LABEL_9:
    v9 = sub_18C711B2C();
    sub_18C6FE05C((uint64_t)a1, (uint64_t)v11);
    sub_18C6F61E8((uint64_t)v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  if (v7 == *MEMORY[0x1E0CF2F50])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v6, v2);
    if (!*((_QWORD *)v6 + 3))
    {
      v11[0] = 7628147;
      v11[1] = 0xE300000000000000;
      sub_18C711EB0();
      sub_18C711ED4();
      swift_bridgeObjectRelease();
      sub_18C711ED4();
    }
    v8 = sub_18C711B2C();
    sub_18C6FE05C((uint64_t)a1, (uint64_t)v11);
    sub_18C6F61E8((uint64_t)v11, v8);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_18C708C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18C709070(a1, a3, a4);
}

uint64_t sub_18C708CBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (result)
  {
    v3 = result;
    v5 = sub_18C70893C(result, a2);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_18C6F94E8(v3), (v7 & 1) != 0))
    {
      sub_18C6FE05C(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = *((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v9 = __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
        *(_QWORD *)(a3 + 24) = v8;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v9, v8);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      }
    }
    else
    {
      v13 = 0;
      v11 = 0u;
      v12 = 0u;
      swift_bridgeObjectRelease();
    }
    result = sub_18C7091E8((uint64_t)&v11);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id AXPreferences.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  v1 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover;
  v2 = objc_allocWithZone((Class)type metadata accessor for AXPreferences.VoiceOver());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_magnifier;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.Magnifier()), sel_init);
  v5 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_speech;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.Speech()), sel_init);
  v6 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent;
  *(_QWORD *)&v3[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.SpokenContentSettings()), sel_init);
  v7 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch;
  *(_QWORD *)&v3[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.AssistiveTouch()), sel_init);
  v8 = OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech;
  *(_QWORD *)&v3[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.LiveSpeech()), sel_init);
  *(_QWORD *)&v3[OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences____lazy_storage___selectorTargetMap] = 0;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for AXPreferences();
  return objc_msgSendSuper2(&v10, sel_init);
}

id AXPreferences.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18C709070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v11[40];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v6 = sub_18C70893C(a1, a2);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_18C6F94E8(a1), (v8 & 1) != 0))
  {
    sub_18C6FE05C(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)&v12);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v13 + 1))
    {
      sub_18C6FE044(&v12, (uint64_t)v15);
      __swift_project_boxed_opaque_existential_1(v15, v16);
      sub_18C711D9C();
      __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
      __swift_project_boxed_opaque_existential_1(v15, v16);
      sub_18C711D90();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = a2;
      *(_QWORD *)(v9 + 24) = a3;
      swift_retain();
      sub_18C711D6C();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return 1;
    }
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_18C7091E8((uint64_t)&v12);
  return 0;
}

uint64_t sub_18C7091E8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE044108);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18C709228(uint64_t a1, uint64_t a2)
{
  return sub_18C6D2488(&qword_1EE044580, a2, (uint64_t (*)(uint64_t))type metadata accessor for AXPreferences, (uint64_t)&protocol conformance descriptor for AXPreferences);
}

id sub_18C709254@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover, a2);
}

void sub_18C709260(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
}

id sub_18C70927C@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_magnifier, a2);
}

void sub_18C709288(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_magnifier);
}

id sub_18C7092A4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_speech, a2);
}

void sub_18C7092B0(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_speech);
}

id sub_18C7092CC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent, a2);
}

void sub_18C7092D8(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent);
}

id sub_18C7092F4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch, a2);
}

void sub_18C709300(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
}

id sub_18C70931C@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech, a2);
}

id keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, void **a3@<X8>)
{
  void **v4;
  void *v5;

  v4 = (void **)(*a1 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *a3 = *v4;
  return v5;
}

void sub_18C709374(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_18C708784(a1, a2, a3, a4, &OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_liveSpeech);
}

uint64_t method lookup function for AXPreferences()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AXPreferences.voiceover.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AXPreferences.voiceover.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AXPreferences.voiceover.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AXPreferences.magnifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AXPreferences.magnifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AXPreferences.magnifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AXPreferences.speech.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AXPreferences.speech.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AXPreferences.speech.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AXPreferences.spokenContent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AXPreferences.spokenContent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AXPreferences.spokenContent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AXPreferences.assistiveTouch.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AXPreferences.assistiveTouch.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AXPreferences.assistiveTouch.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AXPreferences.liveSpeech.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AXPreferences.liveSpeech.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AXPreferences.liveSpeech.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AXPreferences.observe(selector:listener:block:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t sub_18C7095B0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18C7095D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_18C7095E0(_QWORD *a1)
{
  return sub_18C708A28(a1);
}

uint64_t sub_18C7095E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18C70960C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t SpokenContentSelectionProvider.enabled.getter()
{
  return 1;
}

uint64_t SpokenContentSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[6] = a1;
  v2[7] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v2[8] = swift_task_alloc();
  v3 = sub_18C711AF0();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v4 = sub_18C711A90();
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v2[15] = swift_task_alloc();
  v5 = sub_18C711B08();
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C70972C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  sub_18C6D5138(*(_QWORD *)(v0 + 56), v3, &qword_1ECE67078);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 120), &qword_1ECE67078);
    sub_18C711B8C();
    *(_QWORD *)(v0 + 152) = sub_18C711B80();
    v35 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_18C709A68;
    return v35(*(_QWORD *)(v0 + 144));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 72);
    sub_18C711AFC();
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
    {
      v12 = *(_QWORD *)(v0 + 64);
      v13 = *(_QWORD *)(v0 + 48);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
      sub_18C6E87FC(v12, &qword_1EE042CE0);
      v14 = sub_18C711D54();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    }
    else
    {
      v15 = (uint64_t *)(v0 + 40);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
      if (qword_1EE042CD8 != -1)
        swift_once();
      v16 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent);
      swift_beginAccess();
      v17 = *(void **)((char *)*v16
                     + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
      v18 = *v16;
      v19 = v17;
      sub_18C711DFC();

      v20 = *v15;
      if (*(_QWORD *)(*v15 + 16) && (v21 = sub_18C6F9344(*(_QWORD *)(v0 + 112)), (v22 & 1) != 0))
      {
        v23 = v21;
        v24 = *(_QWORD *)(v0 + 48);
        v25 = *(_QWORD *)(v20 + 56);
        v26 = sub_18C711D54();
        v27 = *(_QWORD *)(v26 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v24, v25 + *(_QWORD *)(v27 + 72) * v23, v26);
        v28 = 0;
      }
      else
      {
        v26 = sub_18C711D54();
        v27 = *(_QWORD *)(v26 - 8);
        v28 = 1;
      }
      v30 = *(_QWORD *)(v0 + 136);
      v29 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 128);
      v33 = *(_QWORD *)(v0 + 104);
      v32 = *(_QWORD *)(v0 + 112);
      v34 = *(_QWORD *)(v0 + 96);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v27 + 56))(*(_QWORD *)(v0 + 48), v28, 1, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C709A68()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_18C709AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    sub_18C6E87FC(v7, &qword_1EE042CE0);
    v9 = sub_18C711D54();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  }
  else
  {
    v10 = (uint64_t *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
    if (qword_1EE042CD8 != -1)
      swift_once();
    v11 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_spokenContent);
    swift_beginAccess();
    v12 = *(void **)((char *)*v11
                   + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
    v13 = *v11;
    v14 = v12;
    sub_18C711DFC();

    v15 = *v10;
    if (*(_QWORD *)(*v10 + 16) && (v16 = sub_18C6F9344(*(_QWORD *)(v0 + 112)), (v17 & 1) != 0))
    {
      v18 = v16;
      v19 = *(_QWORD *)(v0 + 48);
      v20 = *(_QWORD *)(v15 + 56);
      v21 = sub_18C711D54();
      v22 = *(_QWORD *)(v21 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v19, v20 + *(_QWORD *)(v22 + 72) * v18, v21);
      v23 = 0;
    }
    else
    {
      v21 = sub_18C711D54();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = 1;
    }
    v25 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v22 + 56))(*(_QWORD *)(v0 + 48), v23, 1, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C709D34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D517C;
  return SpokenContentSelectionProvider.selection(forLocale:)(a1, a2);
}

BOOL AssistiveTouchSelectionProvider.enabled.getter()
{
  _BYTE *v0;
  id *v1;
  void *v2;
  id v3;
  id v4;
  char v6;

  if (*v0 != 1)
    return 1;
  if (qword_1EE042CD8 != -1)
    swift_once();
  v1 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
  swift_beginAccess();
  v2 = *(void **)((char *)*v1
                + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
  v3 = *v1;
  v4 = v2;
  sub_18C711DFC();

  return v6 == 1 && _AXSAssistiveTouchScannerEnabled() != 0;
}

uint64_t AssistiveTouchSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[6] = a1;
  v2[7] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v2[8] = swift_task_alloc();
  v3 = sub_18C711AF0();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v4 = sub_18C711A90();
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v2[15] = swift_task_alloc();
  v5 = sub_18C711B08();
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C709F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  sub_18C6D5138(*(_QWORD *)(v0 + 56), v3, &qword_1ECE67078);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 120), &qword_1ECE67078);
    sub_18C711B8C();
    *(_QWORD *)(v0 + 152) = sub_18C711B80();
    v35 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_18C70A298;
    return v35(*(_QWORD *)(v0 + 144));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 72);
    sub_18C711AFC();
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
    {
      v12 = *(_QWORD *)(v0 + 64);
      v13 = *(_QWORD *)(v0 + 48);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
      sub_18C6E87FC(v12, &qword_1EE042CE0);
      v14 = sub_18C711D54();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    }
    else
    {
      v15 = (uint64_t *)(v0 + 40);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
      if (qword_1EE042CD8 != -1)
        swift_once();
      v16 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
      swift_beginAccess();
      v17 = *(void **)((char *)*v16
                     + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
      v18 = *v16;
      v19 = v17;
      sub_18C711DFC();

      v20 = *v15;
      if (*(_QWORD *)(*v15 + 16) && (v21 = sub_18C6F9344(*(_QWORD *)(v0 + 112)), (v22 & 1) != 0))
      {
        v23 = v21;
        v24 = *(_QWORD *)(v0 + 48);
        v25 = *(_QWORD *)(v20 + 56);
        v26 = sub_18C711D54();
        v27 = *(_QWORD *)(v26 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v24, v25 + *(_QWORD *)(v27 + 72) * v23, v26);
        v28 = 0;
      }
      else
      {
        v26 = sub_18C711D54();
        v27 = *(_QWORD *)(v26 - 8);
        v28 = 1;
      }
      v30 = *(_QWORD *)(v0 + 136);
      v29 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 128);
      v33 = *(_QWORD *)(v0 + 104);
      v32 = *(_QWORD *)(v0 + 112);
      v34 = *(_QWORD *)(v0 + 96);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v27 + 56))(*(_QWORD *)(v0 + 48), v28, 1, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C70A298()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_18C70A2F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    sub_18C6E87FC(v7, &qword_1EE042CE0);
    v9 = sub_18C711D54();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  }
  else
  {
    v10 = (uint64_t *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
    if (qword_1EE042CD8 != -1)
      swift_once();
    v11 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_assistiveTouch);
    swift_beginAccess();
    v12 = *(void **)((char *)*v11
                   + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
    v13 = *v11;
    v14 = v12;
    sub_18C711DFC();

    v15 = *v10;
    if (*(_QWORD *)(*v10 + 16) && (v16 = sub_18C6F9344(*(_QWORD *)(v0 + 112)), (v17 & 1) != 0))
    {
      v18 = v16;
      v19 = *(_QWORD *)(v0 + 48);
      v20 = *(_QWORD *)(v15 + 56);
      v21 = sub_18C711D54();
      v22 = *(_QWORD *)(v21 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v19, v20 + *(_QWORD *)(v22 + 72) * v18, v21);
      v23 = 0;
    }
    else
    {
      v21 = sub_18C711D54();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = 1;
    }
    v25 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v22 + 56))(*(_QWORD *)(v0 + 48), v23, 1, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C70A568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D517C;
  return AssistiveTouchSelectionProvider.selection(forLocale:)(a1, a2);
}

AccessibilityUtilities::VoiceOverSelectionProvider __swiftcall VoiceOverSelectionProvider.init(onlyEnabled:)(AccessibilityUtilities::VoiceOverSelectionProvider onlyEnabled)
{
  AccessibilityUtilities::VoiceOverSelectionProvider *v1;

  v1->onlyEnabled = onlyEnabled.onlyEnabled;
  return onlyEnabled;
}

uint64_t VoiceOverSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[15] = a1;
  v2[16] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v3 = sub_18C711AF0();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v4 = sub_18C711A90();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE8);
  v2[25] = swift_task_alloc();
  v5 = sub_18C711C28();
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v6 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v2[29] = v6;
  v2[30] = *(_QWORD *)(v6 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  v2[33] = swift_task_alloc();
  v7 = sub_18C711B08();
  v2[34] = v7;
  v2[35] = *(_QWORD *)(v7 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18C70A788()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v0[41] = sub_18C711B8C();
  v0[42] = sub_18C711B80();
  v3 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[43] = v1;
  *v1 = v0;
  v1[1] = sub_18C70A804;
  return v3(v0[39]);
}

uint64_t sub_18C70A804()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_18C70A860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD);
  uint64_t (*v63)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  sub_18C6D5138(*(_QWORD *)(v0 + 128), v3, &qword_1ECE67078);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6E87FC(*(_QWORD *)(v0 + 264), &qword_1ECE67078);
    *(_QWORD *)(v0 + 352) = sub_18C711B80();
    v62 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0DBED88] + MEMORY[0x1E0DBED88]);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v4;
    *v4 = v0;
    v4[1] = sub_18C70AE5C;
    return v62(*(_QWORD *)(v0 + 296));
  }
  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 280);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v7, *(_QWORD *)(v0 + 264), v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
  v10 = sub_18C711A6C();
  v12 = v11;
  if (v10 == sub_18C711A6C() && v12 == v13)
    v14 = 1;
  else
    v14 = sub_18C712264();
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  *(_BYTE *)(v0 + 464) = v14 & 1;
  if (qword_1EE042CD8 != -1)
    swift_once();
  v18 = (void **)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  v19 = *v18;
  v20 = *(void **)((char *)*v18 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  v21 = v19;
  v22 = v20;
  sub_18C711DFC();

  v23 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 368) = v23;
  v24 = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v0 + 376) = v24;
  if (v24)
  {
    v25 = 0;
    v26 = *(_QWORD *)(v0 + 240);
    *(_DWORD *)(v0 + 456) = *(_DWORD *)(v26 + 80);
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v26 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 392) = 0;
      *(_QWORD *)(v0 + 400) = v25;
      v27 = *(_QWORD *)(v0 + 232);
      sub_18C6D9354(*(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 456) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456))+ *(_QWORD *)(v0 + 384) * v25, *(_QWORD *)(v0 + 256));
      *(_DWORD *)(v0 + 460) = *(_DWORD *)(v27 + 20);
      v28 = sub_18C711D3C();
      *(_QWORD *)(v0 + 408) = v29;
      if (v29)
        break;
      sub_18C6FF638(*(_QWORD *)(v0 + 256));
      v25 = *(_QWORD *)(v0 + 400) + 1;
      if (v25 == *(_QWORD *)(v0 + 376))
        goto LABEL_13;
    }
    v52 = v28;
    v53 = v29;
    *(_QWORD *)(v0 + 416) = sub_18C711B80();
    v63 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
    v54 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v54;
    *v54 = v0;
    v54[1] = sub_18C70B36C;
    return v63(*(_QWORD *)(v0 + 200), v52, v53);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 184);
    v33 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 168);
    v35 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD *)(v0 + 152);
    sub_18C711AFC();
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v35, 1, v30) == 1)
    {
      v36 = *(_QWORD *)(v0 + 320);
      v37 = *(_QWORD *)(v0 + 272);
      v38 = *(_QWORD *)(v0 + 144);
      v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 8);
      v39(*(_QWORD *)(v0 + 312), v37);
      v39(v36, v37);
      sub_18C6E87FC(v38, &qword_1EE042CE0);
    }
    else
    {
      v40 = *(unsigned __int8 *)(v0 + 464);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 32))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 176));
      v42 = *(_QWORD *)(v0 + 184);
      v41 = *(_QWORD *)(v0 + 192);
      v43 = *(_QWORD *)(v0 + 176);
      if (v40 == 1)
      {
        v44 = *(_QWORD *)(v0 + 136);
        v45 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
        swift_beginAccess();
        v46 = *(void **)((char *)*v45
                       + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
        v47 = *v45;
        v48 = v46;
        sub_18C711DFC();

        v49 = *(_QWORD *)(v0 + 112);
        *(_QWORD *)(v0 + 432) = v49;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v44, v41, v43);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v43);
        v50 = sub_18C711B80();
        *(_QWORD *)(v0 + 440) = v50;
        v51 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 448) = v51;
        *v51 = v0;
        v51[1] = sub_18C70BBCC;
        return Dictionary<>.selection(forLanguage:withResolver:exists:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136), v50, 0, v49);
      }
      v56 = *(_QWORD *)(v0 + 312);
      v55 = *(_QWORD *)(v0 + 320);
      v57 = *(_QWORD *)(v0 + 272);
      v58 = *(_QWORD *)(v0 + 280);
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      v59 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v59(v56, v57);
      v59(v55, v57);
    }
    v60 = *(_QWORD *)(v0 + 120);
    v61 = sub_18C711D54();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 1, 1, v61);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C70AE5C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_18C70AEB8()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, uint64_t, uint64_t);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  *(_BYTE *)(v0 + 464) = 1;
  if (qword_1EE042CD8 != -1)
    swift_once();
  v1 = (void **)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(void **)((char *)*v1 + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__voiceRotors);
  v4 = v2;
  v5 = v3;
  sub_18C711DFC();

  v6 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 368) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 376) = v7;
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(v0 + 240);
    *(_DWORD *)(v0 + 456) = *(_DWORD *)(v9 + 80);
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v9 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 392) = 0;
      *(_QWORD *)(v0 + 400) = v8;
      v10 = *(_QWORD *)(v0 + 232);
      sub_18C6D9354(*(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 456) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456))+ *(_QWORD *)(v0 + 384) * v8, *(_QWORD *)(v0 + 256));
      *(_DWORD *)(v0 + 460) = *(_DWORD *)(v10 + 20);
      v11 = sub_18C711D3C();
      *(_QWORD *)(v0 + 408) = v12;
      if (v12)
        break;
      sub_18C6FF638(*(_QWORD *)(v0 + 256));
      v8 = *(_QWORD *)(v0 + 400) + 1;
      if (v8 == *(_QWORD *)(v0 + 376))
        goto LABEL_7;
    }
    v36 = v11;
    v37 = v12;
    *(_QWORD *)(v0 + 416) = sub_18C711B80();
    v46 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v38;
    *v38 = v0;
    v38[1] = sub_18C70B36C;
    return v46(*(_QWORD *)(v0 + 200), v36, v37);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 152);
    sub_18C711AFC();
    sub_18C711AE4();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      v19 = *(_QWORD *)(v0 + 320);
      v20 = *(_QWORD *)(v0 + 272);
      v21 = *(_QWORD *)(v0 + 144);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 8);
      v22(*(_QWORD *)(v0 + 312), v20);
      v22(v19, v20);
      sub_18C6E87FC(v21, &qword_1EE042CE0);
    }
    else
    {
      v23 = *(unsigned __int8 *)(v0 + 464);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 32))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 176));
      v25 = *(_QWORD *)(v0 + 184);
      v24 = *(_QWORD *)(v0 + 192);
      v26 = *(_QWORD *)(v0 + 176);
      if (v23 == 1)
      {
        v27 = *(_QWORD *)(v0 + 136);
        v28 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
        swift_beginAccess();
        v29 = *(void **)((char *)*v28
                       + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
        v30 = *v28;
        v31 = v29;
        sub_18C711DFC();

        v32 = *(_QWORD *)(v0 + 112);
        *(_QWORD *)(v0 + 432) = v32;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27, v24, v26);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v26);
        v33 = sub_18C711B80();
        *(_QWORD *)(v0 + 440) = v33;
        v34 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 448) = v34;
        *v34 = v0;
        v34[1] = sub_18C70BBCC;
        return Dictionary<>.selection(forLanguage:withResolver:exists:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136), v33, 0, v32);
      }
      v40 = *(_QWORD *)(v0 + 312);
      v39 = *(_QWORD *)(v0 + 320);
      v41 = *(_QWORD *)(v0 + 272);
      v42 = *(_QWORD *)(v0 + 280);
      (*(void (**)(_QWORD, _QWORD))(v25 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      v43 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v43(v40, v41);
      v43(v39, v41);
    }
    v44 = *(_QWORD *)(v0 + 120);
    v45 = sub_18C711D54();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18C70B36C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_18C70B3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  char *v20;
  void *v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id *v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t (*v93)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18C6FF638(*(_QWORD *)(v0 + 256));
    sub_18C6E87FC(v3, &qword_1EE042CE8);
    goto LABEL_17;
  }
  v5 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 224), v3, v1);
  sub_18C711BB0();
  v7 = sub_18C711A6C();
  v9 = v8;
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  v11 = sub_18C711A6C();
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  if (v7 == v11 && v9 == v12)
  {
    swift_bridgeObjectRelease_n();
    sub_18C6D9354(v13, v14);
  }
  else
  {
    v15 = sub_18C712264();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18C6D9354(v13, v14);
    if ((v15 & 1) == 0)
    {
      sub_18C6FF638(*(_QWORD *)(v0 + 248));
      goto LABEL_14;
    }
  }
  v16 = *(uint64_t **)(v0 + 248);
  v18 = *v16;
  v17 = v16[1];
  v19 = (void **)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
  swift_beginAccess();
  v20 = (char *)*v19;
  v21 = *(void **)&v20[OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__currentRotorVoiceIdentifier];
  swift_bridgeObjectRetain();
  v22 = v20;
  v23 = v21;
  sub_18C711DFC();

  v24 = *(_QWORD *)(v0 + 96);
  if (v24)
  {
    v25 = *(_QWORD *)(v0 + 248);
    if (v18 == *(_QWORD *)(v0 + 88) && v24 == v17)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_18C6FF638(v25);
      swift_bridgeObjectRelease_n();
LABEL_14:
      v27 = *(_QWORD *)(v0 + 392);
      v28 = *(_QWORD *)(v0 + 320);
      v29 = sub_18C711BBC();
      v30 = swift_task_alloc();
      *(_QWORD *)(v30 + 16) = v28;
      LOBYTE(v28) = sub_18C70BE04((uint64_t (*)(char *))sub_18C70C600, v30, v29);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      if ((v28 & 1) != 0)
      {
        v32 = *(_QWORD *)(v0 + 312);
        v31 = *(_QWORD *)(v0 + 320);
        v33 = *(_QWORD *)(v0 + 272);
        v34 = *(_QWORD *)(v0 + 256);
        v35 = *(_QWORD *)(v0 + 120);
        v36 = v34 + *(int *)(v0 + 460);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
        swift_bridgeObjectRelease();
        v10(v32, v33);
        v10(v31, v33);
        v37 = sub_18C711D54();
        v38 = *(_QWORD *)(v37 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v35, v36, v37);
        sub_18C6FF638(v34);
        v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56);
        v40 = v35;
      }
      else
      {
        if ((*(_BYTE *)(v0 + 464) & 1) != 0)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
          goto LABEL_24;
        }
        v42 = *(_QWORD *)(v0 + 320);
        v44 = *(_QWORD *)(v0 + 216);
        v43 = *(_QWORD *)(v0 + 224);
        v45 = *(_QWORD *)(v0 + 208);
        v46 = sub_18C711BBC();
        v47 = swift_task_alloc();
        *(_QWORD *)(v47 + 16) = v42;
        LOBYTE(v42) = sub_18C70BE04((uint64_t (*)(char *))sub_18C70C61C, v47, v46);
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
        if ((v42 & 1) == 0)
          goto LABEL_24;
        v48 = *(int *)(v0 + 460);
        v49 = *(_QWORD *)(v0 + 312);
        v50 = *(_QWORD *)(v0 + 320);
        v51 = *(_QWORD *)(v0 + 272);
        v52 = *(_QWORD *)(v0 + 256);
        v53 = *(_QWORD *)(v0 + 120);
        swift_bridgeObjectRelease();
        v10(v49, v51);
        v10(v50, v51);
        v37 = sub_18C711D54();
        v54 = *(_QWORD *)(v37 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v53, v52 + v48, v37);
        sub_18C6FF638(v52);
        v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
        v40 = v53;
      }
      v55 = 0;
      v56 = v37;
      goto LABEL_33;
    }
    v26 = sub_18C712264();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_18C6FF638(v25);
    swift_bridgeObjectRelease_n();
    if ((v26 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    sub_18C6FF638(*(_QWORD *)(v0 + 248));
    swift_bridgeObjectRelease();
  }
  v41 = *(_QWORD *)(v0 + 256);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  sub_18C6FF638(v41);
LABEL_17:
  v27 = *(_QWORD *)(v0 + 392);
  while (1)
  {
    v60 = *(_QWORD *)(v0 + 400) + 1;
    if (v60 == *(_QWORD *)(v0 + 376))
      break;
    *(_QWORD *)(v0 + 392) = v27;
    *(_QWORD *)(v0 + 400) = v60;
    v57 = *(_QWORD *)(v0 + 232);
    sub_18C6D9354(*(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 456) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456))+ *(_QWORD *)(v0 + 384) * v60, *(_QWORD *)(v0 + 256));
    *(_DWORD *)(v0 + 460) = *(_DWORD *)(v57 + 20);
    v58 = sub_18C711D3C();
    *(_QWORD *)(v0 + 408) = v59;
    if (v59)
    {
      v84 = v58;
      v85 = v59;
      *(_QWORD *)(v0 + 416) = sub_18C711B80();
      v93 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))((int)*MEMORY[0x1E0DBEDA0] + MEMORY[0x1E0DBEDA0]);
      v86 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 424) = v86;
      *v86 = v0;
      v86[1] = sub_18C70B36C;
      return v93(*(_QWORD *)(v0 + 200), v84, v85);
    }
LABEL_24:
    sub_18C6FF638(*(_QWORD *)(v0 + 256));
  }
  swift_bridgeObjectRelease();
  v61 = *(_QWORD *)(v0 + 176);
  v62 = *(_QWORD *)(v0 + 184);
  v64 = *(_QWORD *)(v0 + 160);
  v63 = *(_QWORD *)(v0 + 168);
  v66 = *(_QWORD *)(v0 + 144);
  v65 = *(_QWORD *)(v0 + 152);
  sub_18C711AFC();
  sub_18C711AE4();
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v66, 1, v61) == 1)
  {
    v67 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 272);
    v69 = *(_QWORD *)(v0 + 144);
    v70 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 8);
    v70(*(_QWORD *)(v0 + 312), v68);
    v70(v67, v68);
    sub_18C6E87FC(v69, &qword_1EE042CE0);
  }
  else
  {
    v71 = *(unsigned __int8 *)(v0 + 464);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 32))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 176));
    if (v71 == 1)
    {
      v73 = *(_QWORD *)(v0 + 184);
      v72 = *(_QWORD *)(v0 + 192);
      v74 = *(_QWORD *)(v0 + 176);
      v75 = *(_QWORD *)(v0 + 136);
      v76 = (id *)(qword_1EE042CD0 + OBJC_IVAR____TtC22AccessibilityUtilities13AXPreferences_voiceover);
      swift_beginAccess();
      v77 = *(void **)((char *)*v76
                     + OBJC_IVAR____TtCC22AccessibilityUtilities13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
      v78 = *v76;
      v79 = v77;
      sub_18C711DFC();

      v80 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 432) = v80;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v75, v72, v74);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v75, 0, 1, v74);
      v81 = sub_18C711B80();
      *(_QWORD *)(v0 + 440) = v81;
      v82 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 448) = v82;
      *v82 = v0;
      v82[1] = sub_18C70BBCC;
      return Dictionary<>.selection(forLanguage:withResolver:exists:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136), v81, 0, v80);
    }
    v87 = *(_QWORD *)(v0 + 312);
    v88 = *(_QWORD *)(v0 + 320);
    v89 = *(_QWORD *)(v0 + 272);
    v90 = *(_QWORD *)(v0 + 280);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    v91 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v91(v87, v89);
    v91(v88, v89);
  }
  v92 = *(_QWORD *)(v0 + 120);
  v56 = sub_18C711D54();
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v40 = v92;
  v55 = 1;
LABEL_33:
  v39(v40, v55, 1, v56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C70BBCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  sub_18C6E87FC(v1, &qword_1EE042CE0);
  return swift_task_switch();
}

uint64_t sub_18C70BC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v1, v3);
  v5(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18C70BD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_18C711A6C();
  v2 = v1;
  if (v0 == sub_18C711A6C() && v2 == v3)
    v4 = 1;
  else
    v4 = sub_18C712264();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_18C70BE04(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v31 = a1;
  v5 = sub_18C711B08();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECE67078);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + 56);
  v29 = a3 + 56;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v30 = (unint64_t)(v15 + 63) >> 6;
  v32 = a3;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  while (v17)
  {
    v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v21 = v20 | (v19 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v13, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v6 + 72) * v21, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
    v25 = v31(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      swift_release();
      return v27 & 1;
    }
    v26 = v25;
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v26 & 1) != 0)
    {
      swift_release();
      v27 = 1;
      return v27 & 1;
    }
  }
  if (__OFADD__(v19++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v19 >= v30)
    goto LABEL_28;
  v23 = *(_QWORD *)(v29 + 8 * v19);
  if (v23)
  {
LABEL_18:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_19;
  }
  v24 = v19 + 1;
  if (v19 + 1 >= v30)
    goto LABEL_28;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 2;
  if (v19 + 2 >= v30)
    goto LABEL_28;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 3;
  if (v19 + 3 >= v30)
    goto LABEL_28;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 4;
  if (v19 + 4 >= v30)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v13, 1, 1, v5);
LABEL_29:
    swift_release();
    v27 = 0;
    return v27 & 1;
  }
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
  {
LABEL_17:
    v19 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v30)
      goto LABEL_28;
    v23 = *(_QWORD *)(v29 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_18C70C0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a2;
  v2 = sub_18C711A90();
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v43 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE043B40);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE042CE0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v44 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v42 - v15;
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v42 - v18;
  v20 = sub_18C711AF0();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v42 - v27;
  sub_18C711AFC();
  sub_18C711AE4();
  v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29(v28, v20);
  sub_18C711AFC();
  sub_18C711AE4();
  v29(v25, v20);
  v30 = *(int *)(v5 + 48);
  v31 = v46;
  v32 = v47;
  v33 = (uint64_t)&v8[v30];
  sub_18C6D5138((uint64_t)v19, (uint64_t)v8, &qword_1EE042CE0);
  sub_18C6D5138((uint64_t)v16, v33, &qword_1EE042CE0);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v34((uint64_t)v8, 1, v32) == 1)
  {
    sub_18C6E87FC((uint64_t)v16, &qword_1EE042CE0);
    sub_18C6E87FC((uint64_t)v19, &qword_1EE042CE0);
    v35 = v34(v33, 1, v32);
    if (v35 == 1)
      v36 = &qword_1EE042CE0;
    else
      v36 = &qword_1EE043B40;
    if (v35 == 1)
      v37 = -1;
    else
      v37 = 0;
  }
  else
  {
    v38 = v44;
    sub_18C6D5138((uint64_t)v8, v44, &qword_1EE042CE0);
    if (v34(v33, 1, v32) == 1)
    {
      sub_18C6E87FC((uint64_t)v16, &qword_1EE042CE0);
      sub_18C6E87FC((uint64_t)v19, &qword_1EE042CE0);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v38, v32);
      v37 = 0;
      v36 = &qword_1EE043B40;
    }
    else
    {
      v39 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v43, v33, v32);
      sub_18C70C898();
      v37 = sub_18C711E74();
      v40 = *(void (**)(char *, uint64_t))(v31 + 8);
      v40(v39, v32);
      v36 = &qword_1EE042CE0;
      sub_18C6E87FC((uint64_t)v16, &qword_1EE042CE0);
      sub_18C6E87FC((uint64_t)v19, &qword_1EE042CE0);
      v40((char *)v38, v32);
    }
  }
  sub_18C6E87FC((uint64_t)v8, v36);
  return v37 & 1;
}

BOOL VoiceOverSelectionProvider.enabled.getter()
{
  _BYTE *v0;

  return *v0 != 1 || _AXSVoiceOverTouchEnabled() != 0;
}

BOOL sub_18C70C484()
{
  _BYTE *v0;

  return *v0 != 1 || _AXSVoiceOverTouchEnabled() != 0;
}

uint64_t sub_18C70C4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18C6D4460;
  return VoiceOverSelectionProvider.selection(forLocale:)(a1, a2);
}

Swift::Void __swiftcall CoreSynthesizer.setupAccessibilitySettingAwareness()()
{
  uint64_t inited;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0445A8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18C7379D0;
  strcpy((char *)(inited + 32), "accessibility");
  *(_WORD *)(inited + 46) = -4864;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE0445B0);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18C737B20;
  *(_QWORD *)(v1 + 56) = &type metadata for VoiceOverSelectionProvider;
  *(_QWORD *)(v1 + 64) = sub_18C70C638();
  *(_BYTE *)(v1 + 32) = 1;
  *(_QWORD *)(v1 + 96) = &type metadata for AssistiveTouchSelectionProvider;
  *(_QWORD *)(v1 + 104) = sub_18C70C67C();
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 136) = &type metadata for SpokenContentSelectionProvider;
  *(_QWORD *)(v1 + 144) = sub_18C70C6C0();
  *(_QWORD *)(inited + 48) = v1;
  sub_18C6D2ED8(inited);
  sub_18C711B98();
}

uint64_t sub_18C70C600()
{
  return sub_18C70BD68() & 1;
}

uint64_t sub_18C70C61C(uint64_t a1)
{
  uint64_t v1;

  return sub_18C70C0F4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_18C70C638()
{
  unint64_t result;

  result = qword_1EE0445B8;
  if (!qword_1EE0445B8)
  {
    result = MEMORY[0x18D786960](&protocol conformance descriptor for VoiceOverSelectionProvider, &type metadata for VoiceOverSelectionProvider);
    atomic_store(result, (unint64_t *)&qword_1EE0445B8);
  }
  return result;
}

unint64_t sub_18C70C67C()
{
  unint64_t result;

  result = qword_1EE0445C0;
  if (!qword_1EE0445C0)
  {
    result = MEMORY[0x18D786960](&protocol conformance descriptor for AssistiveTouchSelectionProvider, &type metadata for AssistiveTouchSelectionProvider);
    atomic_store(result, (unint64_t *)&qword_1EE0445C0);
  }
  return result;
}

unint64_t sub_18C70C6C0()
{
  unint64_t result;

  result = qword_1EE0445C8[0];
  if (!qword_1EE0445C8[0])
  {
    result = MEMORY[0x18D786960](&protocol conformance descriptor for SpokenContentSelectionProvider, &type metadata for SpokenContentSelectionProvider);
    atomic_store(result, qword_1EE0445C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpokenContentSelectionProvider()
{
  return &type metadata for SpokenContentSelectionProvider;
}

ValueMetadata *type metadata accessor for AssistiveTouchSelectionProvider()
{
  return &type metadata for AssistiveTouchSelectionProvider;
}

uint64_t _s22AccessibilityUtilities31AssistiveTouchSelectionProviderVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s22AccessibilityUtilities31AssistiveTouchSelectionProviderVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18C70C818 + 4 * byte_18C738E65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18C70C84C + 4 * byte_18C738E60[v4]))();
}

uint64_t sub_18C70C84C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C70C854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18C70C85CLL);
  return result;
}

uint64_t sub_18C70C868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18C70C870);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18C70C874(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C70C87C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoiceOverSelectionProvider()
{
  return &type metadata for VoiceOverSelectionProvider;
}

unint64_t sub_18C70C898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE042CC8;
  if (!qword_1EE042CC8)
  {
    v1 = sub_18C711A90();
    result = MEMORY[0x18D786960](MEMORY[0x1E0CB0B08], v1);
    atomic_store(result, (unint64_t *)&qword_1EE042CC8);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

void __getVTPreferencesClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *VoiceTriggerLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXUtilitiesCommon.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void __getVTPreferencesClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVTPreferencesClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXUtilitiesCommon.m"), 15, CFSTR("Unable to find class %s"), "VTPreferences");

  __break(1u);
}

void soft_AXUIAssistiveTouchStringForName_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *soft_AXUIAssistiveTouchStringForName(NSString *__strong, BOOL)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXTripleClickHelpers.m"), 40, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void soft_paCurrentRouteSupportsTransparencyAccommodations_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_paCurrentRouteSupportsTransparencyAccommodations(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXTripleClickHelpers.m"), 85, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void soft_paBluetoothDeviceSupportsSSL_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_paBluetoothDeviceSupportsSSL(BluetoothDevice *__strong)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXTripleClickHelpers.m"), 86, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void AccessibilityUIUtilitiesLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AccessibilityUIUtilitiesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 39, CFSTR("%s"), *a1);

  __break(1u);
}

void __getHUComfortSoundsSettingsClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HearingUtilitiesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 34, CFSTR("%s"), *a1);

  __break(1u);
}

void __getHUComfortSoundsSettingsClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getHUComfortSoundsSettingsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 35, CFSTR("Unable to find class %s"), "HUComfortSoundsSettings");

  __break(1u);
}

void PersonalAudioLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PersonalAudioLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 82, CFSTR("%s"), *a1);

  __break(1u);
}

void __getPASettingsClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPASettingsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 83, CFSTR("Unable to find class %s"), "PASettings");

  __break(1u);
}

void __getWatchControlSettingsClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *WatchControlSettingsLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 51, CFSTR("%s"), *a1);

  __break(1u);
}

void __getWatchControlSettingsClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWatchControlSettingsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 52, CFSTR("Unable to find class %s"), "WatchControlSettings");

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AccessibilityUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 57, CFSTR("%s"), *a1);

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAXUIClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 58, CFSTR("Unable to find class %s"), "AXUIClient");

  __break(1u);
}

void __getAXPISystemActionHelperClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AccessibilityPhysicalInteractionLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 43, CFSTR("%s"), *a1);

  __break(1u);
}

void __getAXPISystemActionHelperClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAXPISystemActionHelperClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 44, CFSTR("Unable to find class %s"), "AXPISystemActionHelper");

  __break(1u);
}

void __getSpeakThisServicesClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpeakThisServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXTripleClickHelpers.m"), 68, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSpeakThisServicesClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSpeakThisServicesClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXTripleClickHelpers.m"), 69, CFSTR("Unable to find class %s"), "SpeakThisServices");

  __break(1u);
}

void __getAVCCaptionsClientClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVConferenceLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXCapabilityManager.m"), 38, CFSTR("%s"), *a1);

  __break(1u);
}

void __getAVCCaptionsClientClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVCCaptionsClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXCapabilityManager.m"), 39, CFSTR("Unable to find class %s"), "AVCCaptionsClient");

  __break(1u);
}

void __getUITextInputModeClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *UIKitLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXCapabilityManager.m"), 25, CFSTR("%s"), *a1);

  __break(1u);
}

void __getUITextInputModeClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUITextInputModeClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXCapabilityManager.m"), 26, CFSTR("Unable to find class %s"), "UITextInputMode");

  __break(1u);
}

void __getRTTTelephonyUtilitiesClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RTTUtilitiesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXCapabilityManager.m"), 21, CFSTR("%s"), *a1);

  __break(1u);
}

void __getRTTTelephonyUtilitiesClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRTTTelephonyUtilitiesClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXCapabilityManager.m"), 22, CFSTR("Unable to find class %s"), "RTTTelephonyUtilities");

  __break(1u);
}

void __getCSPreferencesClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreSpeechLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXCapabilityManager.m"), 31, CFSTR("%s"), *a1);

  __break(1u);
}

void __getCSPreferencesClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCSPreferencesClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXCapabilityManager.m"), 32, CFSTR("Unable to find class %s"), "CSPreferences");

  __break(1u);
}

void __getUIWindowClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *UIKitLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXIPCServer.m"), 46, CFSTR("%s"), *a1);

  __break(1u);
}

void __getUIWindowClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIWindowClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXIPCServer.m"), 47, CFSTR("Unable to find class %s"), "UIWindow");

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AccessibilityUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXBannerServices.m"), 15, CFSTR("%s"), *a1);

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_2_0()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAXUIClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXBannerServices.m"), 16, CFSTR("Unable to find class %s"), "AXUIClient");

  __break(1u);
}

void AXDeviceSizeMM_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_18C62B000, v0, v1, "Unexpected display values returned from MG. Falling back to legacy calculations", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void AXDeviceRegisterForDisplayUpdates_cold_1()
{
  os_log_t v0;
  uint8_t v1[16];

  OUTLINED_FUNCTION_2();
  _os_log_fault_impl(&dword_18C62B000, v0, OS_LOG_TYPE_FAULT, "'displayObserver' must conform to FBSDisplayObserving", v1, 2u);
  OUTLINED_FUNCTION_1_0();
}

void AXDeviceSupportsWatchRemoteScreen_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_AXWatchRemoteScreenIsTwiceFeatureOn(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXDevice.m"), 79, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void AXDeviceSupportsWatchRemoteScreen_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_AXWatchRemoteScreenIsPairedGizmoSupported(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXDevice.m"), 80, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void AXDeviceHasJindo_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_SBUIIsSystemApertureEnabled(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("AXDevice.m"), 64, CFSTR("%s"), OUTLINED_FUNCTION_0());

  __break(1u);
}

void __getPKPassLibraryClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PassKitCoreLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXDevice.m"), 50, CFSTR("%s"), *a1);

  __break(1u);
}

void __getPKPassLibraryClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKPassLibraryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXDevice.m"), 51, CFSTR("Unable to find class %s"), "PKPassLibrary");

  __break(1u);
}

void __getSOSManagerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SOSLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXDevice.m"), 71, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSOSManagerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSOSManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXDevice.m"), 72, CFSTR("Unable to find class %s"), "SOSManager");

  __break(1u);
}

void __getAXMDisplayManagerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AXMediaUtilitiesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXDevice.m"), 595, CFSTR("%s"), *a1);

  __break(1u);
}

void __getAXMDisplayManagerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAXMDisplayManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXDevice.m"), 596, CFSTR("Unable to find class %s"), "AXMDisplayManager");

  __break(1u);
}

void AXWatchRemoteScreenServicesLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AXWatchRemoteScreenServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXDevice.m"), 78, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardUIServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXDevice.m"), 63, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSCRCPunctuationVerbosenessClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ScreenReaderCoreLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXLocalization.m"), 23, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSCRCPunctuationVerbosenessClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSCRCPunctuationVerbosenessClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXLocalization.m"), 24, CFSTR("Unable to find class %s"), "SCRCPunctuationVerboseness");

  __break(1u);
}

void __getUIKeyboardInputModeControllerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *UIKitLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXEventKeyInfoRepresentation.m"), 18, CFSTR("%s"), *a1);

  __break(1u);
}

void __getUIKeyboardInputModeControllerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIKeyboardInputModeControllerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXEventKeyInfoRepresentation.m"), 19, CFSTR("Unable to find class %s"), "UIKeyboardInputModeController");

  __break(1u);
}

void __getTLToneManagerClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTLToneManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXSettings.m"), 65, CFSTR("Unable to find class %s"), "TLToneManager");

  __break(1u);
}

void ToneLibraryLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ToneLibraryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSettings.m"), 63, CFSTR("%s"), *a1);

  __break(1u);
}

void ScreenReaderOutputLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ScreenReaderOutputLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSettings.m"), 51, CFSTR("%s"), *a1);

  __break(1u);
}

void __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *VoiceOverServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSettings.m"), 72, CFSTR("%s"), *a1);

  __break(1u);
}

void __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVOSVoiceOverGreyCommandInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXSettings.m"), 73, CFSTR("Unable to find class %s"), "VOSVoiceOverGreyCommandInfo");

  __break(1u);
}

void __getZoomServicesGreyCommandInfoClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ZoomServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSettings.m"), 76, CFSTR("%s"), *a1);

  __break(1u);
}

void __getZoomServicesGreyCommandInfoClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getZoomServicesGreyCommandInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXSettings.m"), 77, CFSTR("Unable to find class %s"), "ZoomServicesGreyCommandInfo");

  __break(1u);
}

void SpringBoardServicesLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSettings.m"), 80, CFSTR("%s"), *a1);

  __break(1u);
}

void applyTransform_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_3(&dword_18C62B000, a2, a3, "Error while retrieving localized operator name: %@", a5, a6, a7, a8, 2u);
}

void applyTransform_cold_2(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_3(&dword_18C62B000, a2, a3, "could not retrieve telephony info: %@", a5, a6, a7, a8, 2u);
}

void applyTransform_cold_3(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_18C62B000, log, OS_LOG_TYPE_FAULT, "No telephony client!", v1, 2u);
  OUTLINED_FUNCTION_1_0();
}

void _AXApplicationNameLabelForBundleIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *_AXApplicationNameLabelForBundleIdentifier(NSString *__strong)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AccessibilitySPI.m"), 50, CFSTR("%s"), dlerror());

  __break(1u);
}

void __getSFAccessibilityClientClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SharingLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AccessibilitySPI.m"), 52, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSFAccessibilityClientClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSFAccessibilityClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AccessibilitySPI.m"), 53, CFSTR("Unable to find class %s"), "SFAccessibilityClient");

  __break(1u);
}

void __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AXFrontBoardUtilsLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AccessibilitySPI.m"), 49, CFSTR("%s"), *a1);

  __break(1u);
}

void __performSocialAttributionStringTransform_block_invoke_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1(&dword_18C62B000, a1, a3, "could not retrieve social layer proxy", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1_0();
}

void __getSLDServiceProxyClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSLDServiceProxyClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AccessibilitySPI.m"), 64, CFSTR("Unable to find class %s"), "SLDServiceProxy");

  __break(1u);
}

void SocialLayerLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SocialLayerLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AccessibilitySPI.m"), 59, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSLDPillServiceClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSLDPillServiceClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AccessibilitySPI.m"), 60, CFSTR("Unable to find class %s"), "SLDPillService");

  __break(1u);
}

void __getSLDCollaborationAttributionViewServiceClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSLDCollaborationAttributionViewServiceClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AccessibilitySPI.m"), 62, CFSTR("Unable to find class %s"), "SLDCollaborationAttributionViewService");

  __break(1u);
}

void __getVCVoiceShortcutClientClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVCVoiceShortcutClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXSiriShortcutsManager.m"), 27, CFSTR("Unable to find class %s"), "VCVoiceShortcutClient");

  __break(1u);
}

void VoiceShortcutClientLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *VoiceShortcutClientLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AXSiriShortcutsManager.m"), 26, CFSTR("%s"), *a1);

  __break(1u);
}

void __getWFAccessibilityWorkflowRunnerClientClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWFAccessibilityWorkflowRunnerClientClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AXSiriShortcutsManager.m"), 28, CFSTR("Unable to find class %s"), "WFAccessibilityWorkflowRunnerClient");

  __break(1u);
}

void AXMIDILogError_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_18C62B000, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_18C711A24()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_18C711A30()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_18C711A3C()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_18C711A48()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_18C711A54()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_18C711A60()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t sub_18C711A6C()
{
  return MEMORY[0x1E0CB0A90]();
}

uint64_t sub_18C711A78()
{
  return MEMORY[0x1E0CB0AC0]();
}

uint64_t sub_18C711A84()
{
  return MEMORY[0x1E0CB0AE0]();
}

uint64_t sub_18C711A90()
{
  return MEMORY[0x1E0CB0AE8]();
}

uint64_t sub_18C711A9C()
{
  return MEMORY[0x1E0CB0B18]();
}

uint64_t sub_18C711AA8()
{
  return MEMORY[0x1E0DBED00]();
}

uint64_t sub_18C711AB4()
{
  return MEMORY[0x1E0CF2DE0]();
}

uint64_t sub_18C711AC0()
{
  return MEMORY[0x1E0CB0BE0]();
}

uint64_t sub_18C711ACC()
{
  return MEMORY[0x1E0CB0C20]();
}

uint64_t sub_18C711AD8()
{
  return MEMORY[0x1E0CB0C30]();
}

uint64_t sub_18C711AE4()
{
  return MEMORY[0x1E0CB0D80]();
}

uint64_t sub_18C711AF0()
{
  return MEMORY[0x1E0CB0DB8]();
}

uint64_t sub_18C711AFC()
{
  return MEMORY[0x1E0CB0DF0]();
}

uint64_t sub_18C711B08()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_18C711B14()
{
  return MEMORY[0x1E0DEFCA8]();
}

uint64_t sub_18C711B20()
{
  return MEMORY[0x1E0DEFCB0]();
}

uint64_t sub_18C711B2C()
{
  return MEMORY[0x1E0DEFCD0]();
}

uint64_t sub_18C711B38()
{
  return MEMORY[0x1E0DBED08]();
}

uint64_t sub_18C711B44()
{
  return MEMORY[0x1E0DBED60]();
}

uint64_t sub_18C711B50()
{
  return MEMORY[0x1E0DBED70]();
}

uint64_t sub_18C711B5C()
{
  return MEMORY[0x1E0DBED78]();
}

uint64_t sub_18C711B68()
{
  return MEMORY[0x1E0DBED80]();
}

uint64_t sub_18C711B74()
{
  return MEMORY[0x1E0DBED98]();
}

uint64_t sub_18C711B80()
{
  return MEMORY[0x1E0DBEDB0]();
}

uint64_t sub_18C711B8C()
{
  return MEMORY[0x1E0DBEDC0]();
}

uint64_t sub_18C711B98()
{
  return MEMORY[0x1E0DBEE00]();
}

uint64_t sub_18C711BA4()
{
  return MEMORY[0x1E0DBEE08]();
}

uint64_t sub_18C711BB0()
{
  return MEMORY[0x1E0DBEE10]();
}

uint64_t sub_18C711BBC()
{
  return MEMORY[0x1E0DBEE18]();
}

uint64_t sub_18C711BC8()
{
  return MEMORY[0x1E0DBEE20]();
}

uint64_t sub_18C711BD4()
{
  return MEMORY[0x1E0DBEE28]();
}

uint64_t sub_18C711BE0()
{
  return MEMORY[0x1E0DBEE30]();
}

uint64_t sub_18C711BEC()
{
  return MEMORY[0x1E0DBEE38]();
}

uint64_t sub_18C711BF8()
{
  return MEMORY[0x1E0DBEE40]();
}

uint64_t sub_18C711C04()
{
  return MEMORY[0x1E0DBEE48]();
}

uint64_t sub_18C711C10()
{
  return MEMORY[0x1E0DBEE58]();
}

uint64_t sub_18C711C1C()
{
  return MEMORY[0x1E0DBEE60]();
}

uint64_t sub_18C711C28()
{
  return MEMORY[0x1E0DBEE68]();
}

uint64_t sub_18C711C34()
{
  return MEMORY[0x1E0DBEE90]();
}

uint64_t sub_18C711C40()
{
  return MEMORY[0x1E0DBEEA0]();
}

uint64_t sub_18C711C4C()
{
  return MEMORY[0x1E0CF2DE8]();
}

uint64_t sub_18C711C58()
{
  return MEMORY[0x1E0CF2DF0]();
}

uint64_t sub_18C711C64()
{
  return MEMORY[0x1E0CF2E00]();
}

uint64_t sub_18C711C70()
{
  return MEMORY[0x1E0CF2E10]();
}

uint64_t sub_18C711C7C()
{
  return MEMORY[0x1E0CF2E38]();
}

uint64_t sub_18C711C88()
{
  return MEMORY[0x1E0CF2E40]();
}

uint64_t sub_18C711C94()
{
  return MEMORY[0x1E0CF2E48]();
}

uint64_t sub_18C711CA0()
{
  return MEMORY[0x1E0CF2E50]();
}

uint64_t sub_18C711CAC()
{
  return MEMORY[0x1E0CF2E58]();
}

uint64_t sub_18C711CB8()
{
  return MEMORY[0x1E0CF2E60]();
}

uint64_t sub_18C711CC4()
{
  return MEMORY[0x1E0CF2E68]();
}

uint64_t sub_18C711CD0()
{
  return MEMORY[0x1E0CF2E70]();
}

uint64_t sub_18C711CDC()
{
  return MEMORY[0x1E0CF2E78]();
}

uint64_t sub_18C711CE8()
{
  return MEMORY[0x1E0CF2E80]();
}

uint64_t sub_18C711CF4()
{
  return MEMORY[0x1E0CF2E88]();
}

uint64_t sub_18C711D00()
{
  return MEMORY[0x1E0CF2E90]();
}

uint64_t sub_18C711D0C()
{
  return MEMORY[0x1E0CF2E98]();
}

uint64_t sub_18C711D18()
{
  return MEMORY[0x1E0CF2EA0]();
}

uint64_t sub_18C711D24()
{
  return MEMORY[0x1E0CF2EA8]();
}

uint64_t sub_18C711D30()
{
  return MEMORY[0x1E0CF2EB0]();
}

uint64_t sub_18C711D3C()
{
  return MEMORY[0x1E0CF2EB8]();
}

uint64_t sub_18C711D48()
{
  return MEMORY[0x1E0CF2EC0]();
}

uint64_t sub_18C711D54()
{
  return MEMORY[0x1E0CF2EC8]();
}

uint64_t sub_18C711D60()
{
  return MEMORY[0x1E0CF2EF8]();
}

uint64_t sub_18C711D6C()
{
  return MEMORY[0x1E0CF2F00]();
}

uint64_t sub_18C711D78()
{
  return MEMORY[0x1E0CF2F08]();
}

uint64_t sub_18C711D84()
{
  return MEMORY[0x1E0CF2F10]();
}

uint64_t sub_18C711D90()
{
  return MEMORY[0x1E0CF2F30]();
}

uint64_t sub_18C711D9C()
{
  return MEMORY[0x1E0CF2F38]();
}

uint64_t sub_18C711DA8()
{
  return MEMORY[0x1E0CF2F58]();
}

uint64_t sub_18C711DB4()
{
  return MEMORY[0x1E0CF2F68]();
}

uint64_t sub_18C711DC0()
{
  return MEMORY[0x1E0CF2F70]();
}

uint64_t sub_18C711DCC()
{
  return MEMORY[0x1E0CF2FA8]();
}

uint64_t sub_18C711DD8()
{
  return MEMORY[0x1E0CF2FB0]();
}

uint64_t sub_18C711DE4()
{
  return MEMORY[0x1E0CF2FB8]();
}

uint64_t sub_18C711DF0()
{
  return MEMORY[0x1E0CF2FC0]();
}

uint64_t sub_18C711DFC()
{
  return MEMORY[0x1E0CF2FC8]();
}

uint64_t sub_18C711E08()
{
  return MEMORY[0x1E0CF2FD0]();
}

uint64_t sub_18C711E14()
{
  return MEMORY[0x1E0CF2FD8]();
}

uint64_t sub_18C711E20()
{
  return MEMORY[0x1E0CF2FE0]();
}

uint64_t sub_18C711E2C()
{
  return MEMORY[0x1E0CF2FE8]();
}

uint64_t sub_18C711E38()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_18C711E44()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_18C711E50()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_18C711E5C()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_18C711E68()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_18C711E74()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_18C711E80()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_18C711E8C()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_18C711E98()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_18C711EA4()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_18C711EB0()
{
  return MEMORY[0x1E0CF2FF8]();
}

uint64_t sub_18C711EBC()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_18C711EC8()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_18C711ED4()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_18C711EE0()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_18C711EEC()
{
  return MEMORY[0x1E0DEA950]();
}

uint64_t sub_18C711EF8()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_18C711F04()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_18C711F10()
{
  return MEMORY[0x1E0DEACC0]();
}

uint64_t sub_18C711F1C()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_18C711F28()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_18C711F34()
{
  return MEMORY[0x1E0DEAD38]();
}

uint64_t sub_18C711F40()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_18C711F4C()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_18C711F58()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_18C711F64()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t sub_18C711F70()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t sub_18C711F7C()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_18C711F88()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_18C711F94()
{
  return MEMORY[0x1E0DF07A0]();
}

uint64_t sub_18C711FA0()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_18C711FAC()
{
  return MEMORY[0x1E0CF3000]();
}

uint64_t sub_18C711FB8()
{
  return MEMORY[0x1E0CF3008]();
}

uint64_t sub_18C711FC4()
{
  return MEMORY[0x1E0CF3018]();
}

uint64_t sub_18C711FD0()
{
  return MEMORY[0x1E0DF07F8]();
}

uint64_t sub_18C711FDC()
{
  return MEMORY[0x1E0DF0800]();
}

uint64_t sub_18C711FE8()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_18C711FF4()
{
  return MEMORY[0x1E0DF0870]();
}

uint64_t sub_18C712000()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t sub_18C71200C()
{
  return MEMORY[0x1E0CB1B98]();
}

uint64_t sub_18C712018()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_18C712024()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_18C712030()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_18C71203C()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_18C712048()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t sub_18C712054()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_18C712060()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_18C71206C()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_18C712078()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_18C712084()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_18C712090()
{
  return MEMORY[0x1E0DEBFC0]();
}

uint64_t sub_18C71209C()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_18C7120A8()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_18C7120B4()
{
  return MEMORY[0x1E0CB25C8]();
}

uint64_t sub_18C7120C0()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_18C7120CC()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_18C7120D8()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_18C7120E4()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_18C7120F0()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_18C7120FC()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_18C712108()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_18C712114()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_18C712120()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_18C71212C()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_18C712138()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_18C712144()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_18C712150()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_18C71215C()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_18C712168()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_18C712174()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_18C712180()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_18C71218C()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_18C712198()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_18C7121A4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_18C7121B0()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_18C7121BC()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_18C7121C8()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_18C7121D4()
{
  return MEMORY[0x1E0DECF60]();
}

uint64_t sub_18C7121E0()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_18C7121EC()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_18C7121F8()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_18C712204()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_18C712210()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_18C71221C()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_18C712228()
{
  return MEMORY[0x1E0DED098]();
}

uint64_t sub_18C712234()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_18C712240()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_18C71224C()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_18C712258()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_18C712264()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_18C712270()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_18C71227C()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_18C712288()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_18C712294()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_18C7122A0()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_18C7122AC()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_18C7122B8()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_18C7122C4()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_18C7122D0()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_18C7122DC()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_18C7122E8()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t ASTLogCommon()
{
  return MEMORY[0x1E0CF3030]();
}

uint64_t ASTLogMouse()
{
  return MEMORY[0x1E0CF3038]();
}

uint64_t AXAccessibilityBundlesDirectory()
{
  return MEMORY[0x1E0CF3040]();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguage()
{
  return MEMORY[0x1E0CF3060]();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguageUsingFallback()
{
  return MEMORY[0x1E0CF3068]();
}

uint64_t AXCLanguageConvertToCanonicalForm()
{
  return MEMORY[0x1E0CF3070]();
}

uint64_t AXCPCopySharedResourcesPreferencesDomainForDomain()
{
  return MEMORY[0x1E0DDD450]();
}

uint64_t AXCRemapLanguageCodeToFallbackIfNeccessary()
{
  return MEMORY[0x1E0CF3078]();
}

uint64_t AXColorizeFormatLog()
{
  return MEMORY[0x1E0CF30B0]();
}

uint64_t AXDeviceHasStaccato()
{
  return MEMORY[0x1E0CF30C0]();
}

uint64_t AXDeviceIsAudioAccessory()
{
  return MEMORY[0x1E0CF30C8]();
}

uint64_t AXDeviceIsD22()
{
  return MEMORY[0x1E0CF30D0]();
}

uint64_t AXDeviceIsD32()
{
  return MEMORY[0x1E0CF30D8]();
}

uint64_t AXDeviceIsD33()
{
  return MEMORY[0x1E0CF30E0]();
}

uint64_t AXDeviceIsD42()
{
  return MEMORY[0x1E0CF30E8]();
}

uint64_t AXDeviceIsD43()
{
  return MEMORY[0x1E0CF30F0]();
}

uint64_t AXDeviceIsPad()
{
  return MEMORY[0x1E0CF3100]();
}

uint64_t AXDeviceIsPhone()
{
  return MEMORY[0x1E0CF3108]();
}

uint64_t AXDeviceIsPod()
{
  return MEMORY[0x1E0CF3110]();
}

uint64_t AXDeviceIsRealityDevice()
{
  return MEMORY[0x1E0CF3118]();
}

uint64_t AXDeviceIsTV()
{
  return MEMORY[0x1E0CF3120]();
}

uint64_t AXDeviceIsWatch()
{
  return MEMORY[0x1E0CF3128]();
}

uint64_t AXDeviceSupportsAdaptiveVoiceShortcuts()
{
  return MEMORY[0x1E0CF3130]();
}

uint64_t AXDeviceSupportsLiveSpeechCategory()
{
  return MEMORY[0x1E0CF3138]();
}

uint64_t AXDeviceSupportsOnDeviceEyeTracking()
{
  return MEMORY[0x1E0CF3140]();
}

uint64_t AXDeviceSupportsVoiceBankingSpeech()
{
  return MEMORY[0x1E0CF3148]();
}

uint64_t AXDeviceSupportsVoiceBankingTraining()
{
  return MEMORY[0x1E0CF3150]();
}

uint64_t AXDoesRequestingClientDeserveAutomation()
{
  return MEMORY[0x1E0CF3F98]();
}

uint64_t AXFormatFloat()
{
  return MEMORY[0x1E0CF3158]();
}

uint64_t AXFormatFloatWithPercentage()
{
  return MEMORY[0x1E0CF3160]();
}

uint64_t AXFormatInteger()
{
  return MEMORY[0x1E0CF3168]();
}

uint64_t AXInstalledAppIDs()
{
  return MEMORY[0x1E0CF3188]();
}

uint64_t AXIsAnyPreferredLanguageRTL()
{
  return MEMORY[0x1E0CF3198]();
}

uint64_t AXIsBuddyCompleted()
{
  return MEMORY[0x1E0CF31A0]();
}

uint64_t AXIsInternalInstall()
{
  return MEMORY[0x1E0CF31A8]();
}

uint64_t AXLocalizationForLocale()
{
  return MEMORY[0x1E0DDD470]();
}

uint64_t AXLogAirPodSettings()
{
  return MEMORY[0x1E0CF31B0]();
}

uint64_t AXLogAppAccessibility()
{
  return MEMORY[0x1E0CF31B8]();
}

uint64_t AXLogAssertions()
{
  return MEMORY[0x1E0CF31C0]();
}

uint64_t AXLogBackboardServer()
{
  return MEMORY[0x1E0CF31D8]();
}

uint64_t AXLogBluetooth()
{
  return MEMORY[0x1E0CF31E0]();
}

uint64_t AXLogBrailleHW()
{
  return MEMORY[0x1E0CF31E8]();
}

uint64_t AXLogCommon()
{
  return MEMORY[0x1E0CF31F8]();
}

uint64_t AXLogDisplay()
{
  return MEMORY[0x1E0CF3200]();
}

uint64_t AXLogEventTap()
{
  return MEMORY[0x1E0CF3218]();
}

uint64_t AXLogHapticMusic()
{
  return MEMORY[0x1E0CF3228]();
}

uint64_t AXLogIPC()
{
  return MEMORY[0x1E0CF3240]();
}

uint64_t AXLogMIDI()
{
  return MEMORY[0x1E0CF3250]();
}

uint64_t AXLogMotionCues()
{
  return MEMORY[0x1E0CF3258]();
}

uint64_t AXLogOrator()
{
  return MEMORY[0x1E0CF3268]();
}

uint64_t AXLogSettings()
{
  return MEMORY[0x1E0CF3290]();
}

uint64_t AXLogSiriShortcuts()
{
  return MEMORY[0x1E0CF3298]();
}

uint64_t AXLogSpeechAssetDownload()
{
  return MEMORY[0x1E0CF32B8]();
}

uint64_t AXLogSpokenContentTextProcessing()
{
  return MEMORY[0x1E0CF32C8]();
}

uint64_t AXLogSpringboardServer()
{
  return MEMORY[0x1E0CF32D0]();
}

uint64_t AXLogSystemApp()
{
  return MEMORY[0x1E0CF32E0]();
}

uint64_t AXLogTapticTime()
{
  return MEMORY[0x1E0CF32E8]();
}

uint64_t AXLogTwiceRemoteScreen()
{
  return MEMORY[0x1E0CF32F8]();
}

uint64_t AXLoggerForFacility()
{
  return MEMORY[0x1E0CF3320]();
}

uint64_t AXNSLocalizedStringForLocale()
{
  return MEMORY[0x1E0DDD480]();
}

uint64_t AXOSLogLevelFromAXLogLevel()
{
  return MEMORY[0x1E0CF33D0]();
}

uint64_t AXPerformBlockAsynchronouslyOnMainThread()
{
  return MEMORY[0x1E0CF33D8]();
}

uint64_t AXPerformBlockOnMainThread()
{
  return MEMORY[0x1E0CF33E0]();
}

uint64_t AXPerformBlockOnMainThreadAfterDelay()
{
  return MEMORY[0x1E0CF33E8]();
}

uint64_t AXPerformBlockSynchronouslyOnMainThread()
{
  return MEMORY[0x1E0CF33F0]();
}

uint64_t AXProcessIsAXUIServer()
{
  return MEMORY[0x1E0CF3410]();
}

uint64_t AXProcessIsBackboard()
{
  return MEMORY[0x1E0CF3428]();
}

uint64_t AXProcessIsPreferences()
{
  return MEMORY[0x1E0CF3458]();
}

uint64_t AXProcessIsSpringBoard()
{
  return MEMORY[0x1E0CF3468]();
}

uint64_t AXRuntimeCheck_HasANE()
{
  return MEMORY[0x1E0CF3488]();
}

uint64_t AXRuntimeCheck_SupportsLiveCaptions()
{
  return MEMORY[0x1E0CF34B0]();
}

uint64_t AXRuntimeCheck_SupportsNearbyDeviceControl()
{
  return MEMORY[0x1E0CF34C8]();
}

uint64_t AXSAccessibilityUtilitiesPath()
{
  return MEMORY[0x1E0DDD490]();
}

uint64_t AXSafeClassFromString()
{
  return MEMORY[0x1E0CF37B0]();
}

uint64_t AXSafeEqual()
{
  return MEMORY[0x1E0CF37B8]();
}

uint64_t AXSetThreadPriority()
{
  return MEMORY[0x1E0CF37C0]();
}

uint64_t AXTTSLogCommon()
{
  return MEMORY[0x1E0CF3800]();
}

uint64_t AXVoiceServicesTTSResourcesDirectory()
{
  return MEMORY[0x1E0CF3828]();
}

uint64_t AX_PERFORM_WITH_LOCK()
{
  return MEMORY[0x1E0CF38E8]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AudioServicesCreateSystemSoundIDWithOptions()
{
  return MEMORY[0x1E0C92130]();
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return MEMORY[0x1E0C92140](*(_QWORD *)&inSystemSoundID);
}

uint64_t AudioServicesPlaySystemSoundWithVibration()
{
  return MEMORY[0x1E0C92168]();
}

uint64_t AudioServicesStopSystemSound()
{
  return MEMORY[0x1E0C92188]();
}

uint64_t BKSHIDEventGetBaseAttributes()
{
  return MEMORY[0x1E0D00A20]();
}

uint64_t BKSHIDEventGetDigitizerAttributes()
{
  return MEMORY[0x1E0D00A30]();
}

uint64_t BKSHIDEventSetSimpleInfo()
{
  return MEMORY[0x1E0D00AA8]();
}

uint64_t BKSHIDServicesGetHardwareKeyboardLanguage()
{
  return MEMORY[0x1E0D00B20]();
}

uint64_t BTAccessoryManagerAddCallbacks()
{
  return MEMORY[0x1E0D4E0F0]();
}

uint64_t BTAccessoryManagerGetControlCommand()
{
  return MEMORY[0x1E0D4E128]();
}

uint64_t BTAccessoryManagerGetDefault()
{
  return MEMORY[0x1E0D4E130]();
}

uint64_t BTAccessoryManagerSendControlCommand()
{
  return MEMORY[0x1E0D4E188]();
}

uint64_t BTDeviceAddressFromString()
{
  return MEMORY[0x1E0D4E198]();
}

uint64_t BTDeviceConnectServices()
{
  return MEMORY[0x1E0D4E1B8]();
}

uint64_t BTDeviceDisconnect()
{
  return MEMORY[0x1E0D4E1C0]();
}

uint64_t BTDeviceFromAddress()
{
  return MEMORY[0x1E0D4E1D0]();
}

uint64_t BTDeviceGetAddressString()
{
  return MEMORY[0x1E0D4E1E8]();
}

uint64_t BTDeviceGetAuthorizedServices()
{
  return MEMORY[0x1E0D4E1F8]();
}

uint64_t BTDeviceGetConnectedServices()
{
  return MEMORY[0x1E0D4E200]();
}

uint64_t BTDeviceGetDefaultName()
{
  return MEMORY[0x1E0D4E208]();
}

uint64_t BTDeviceGetDeviceClass()
{
  return MEMORY[0x1E0D4E210]();
}

uint64_t BTDeviceGetDeviceId()
{
  return MEMORY[0x1E0D4E218]();
}

uint64_t BTDeviceGetDeviceType()
{
  return MEMORY[0x1E0D4E220]();
}

uint64_t BTDeviceGetName()
{
  return MEMORY[0x1E0D4E228]();
}

uint64_t BTDeviceGetPairingStatus()
{
  return MEMORY[0x1E0D4E230]();
}

uint64_t BTDeviceGetSupportedServices()
{
  return MEMORY[0x1E0D4E238]();
}

uint64_t BTDiscoveryAgentCreate()
{
  return MEMORY[0x1E0D4E260]();
}

uint64_t BTDiscoveryAgentDestroy()
{
  return MEMORY[0x1E0D4E268]();
}

uint64_t BTDiscoveryAgentGetDevices()
{
  return MEMORY[0x1E0D4E270]();
}

uint64_t BTDiscoveryAgentStartScan()
{
  return MEMORY[0x1E0D4E278]();
}

uint64_t BTDiscoveryAgentStopScan()
{
  return MEMORY[0x1E0D4E280]();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return MEMORY[0x1E0D4E290]();
}

uint64_t BTLocalDeviceGetConnectable()
{
  return MEMORY[0x1E0D4E298]();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return MEMORY[0x1E0D4E2A8]();
}

uint64_t BTLocalDeviceGetConnectingDevices()
{
  return MEMORY[0x1E0D4E2B0]();
}

uint64_t BTLocalDeviceGetConnectionStatus()
{
  return MEMORY[0x1E0D4E2B8]();
}

uint64_t BTLocalDeviceGetDefault()
{
  return MEMORY[0x1E0D4E2C0]();
}

uint64_t BTLocalDeviceGetDiscoverable()
{
  return MEMORY[0x1E0D4E2D0]();
}

uint64_t BTLocalDeviceGetModulePower()
{
  return MEMORY[0x1E0D4E2D8]();
}

uint64_t BTLocalDeviceGetPairedDevices()
{
  return MEMORY[0x1E0D4E2E0]();
}

uint64_t BTLocalDeviceGetScanning()
{
  return MEMORY[0x1E0D4E2E8]();
}

uint64_t BTLocalDeviceRemoveCallbacks()
{
  return MEMORY[0x1E0D4E328]();
}

uint64_t BTLocalDeviceSetConnectable()
{
  return MEMORY[0x1E0D4E330]();
}

uint64_t BTLocalDeviceSetDiscoverable()
{
  return MEMORY[0x1E0D4E338]();
}

uint64_t BTLocalDeviceSetModulePower()
{
  return MEMORY[0x1E0D4E340]();
}

uint64_t BTLocalDeviceSupportsService()
{
  return MEMORY[0x1E0D4E348]();
}

uint64_t BTPairingAgentAcceptSSP()
{
  return MEMORY[0x1E0D4E350]();
}

uint64_t BTPairingAgentCancelPairing()
{
  return MEMORY[0x1E0D4E358]();
}

uint64_t BTPairingAgentCreate()
{
  return MEMORY[0x1E0D4E360]();
}

uint64_t BTPairingAgentDeletePairedDevice()
{
  return MEMORY[0x1E0D4E368]();
}

uint64_t BTPairingAgentDestroy()
{
  return MEMORY[0x1E0D4E370]();
}

uint64_t BTPairingAgentSetPincode()
{
  return MEMORY[0x1E0D4E378]();
}

uint64_t BTPairingAgentStart()
{
  return MEMORY[0x1E0D4E380]();
}

uint64_t BTPairingAgentStop()
{
  return MEMORY[0x1E0D4E388]();
}

uint64_t BTServiceAddCallbacks()
{
  return MEMORY[0x1E0D4E398]();
}

uint64_t BTServiceRemoveCallbacks()
{
  return MEMORY[0x1E0D4E3A0]();
}

uint64_t BTSessionAttachWithQueue()
{
  return MEMORY[0x1E0D4E3B0]();
}

uint64_t BTSessionDetachWithQueue()
{
  return MEMORY[0x1E0D4E3C8]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1E0D15DA8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1E0C98068]();
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C987F0]();
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1E0C98820](allocator, *(_QWORD *)&portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1E0C98830](port);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
  MEMORY[0x1E0C98840](port);
}

void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout)
{
  MEMORY[0x1E0C98850](port, callout);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98A58](keysToFetch, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A88](keysToSet, keysToRemove, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

uint64_t CFRunLoopRunSpecific()
{
  return MEMORY[0x1E0C98CC0]();
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CE0](source);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CF0](source);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

uint64_t CGPathCreateEncodedData()
{
  return MEMORY[0x1E0C9D380]();
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

uint64_t CGPathCreateWithData()
{
  return MEMORY[0x1E0C9D3B8]();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1E0C9D448](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

uint64_t CLFLogCommon()
{
  return MEMORY[0x1E0CF3910]();
}

uint64_t FKALogCommon()
{
  return MEMORY[0x1E0CF3918]();
}

uint64_t GAXLogBlockedTouches()
{
  return MEMORY[0x1E0CF3920]();
}

uint64_t GAXLogCommon()
{
  return MEMORY[0x1E0CF3928]();
}

uint64_t GAXLogTimeRestrictions()
{
  return MEMORY[0x1E0CF3930]();
}

uint64_t GSEventGetHardwareKeyboardType()
{
  return MEMORY[0x1E0D27B10]();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return MEMORY[0x1E0D27B50]();
}

uint64_t GSKeyboardCreate()
{
  return MEMORY[0x1E0D27BC0]();
}

uint64_t GSKeyboardGetHWKeyboardType()
{
  return MEMORY[0x1E0D27BC8]();
}

uint64_t GSKeyboardGetKeyCodeForChar()
{
  return MEMORY[0x1E0D27BD0]();
}

uint64_t GSKeyboardGetLiveModifierState()
{
  return MEMORY[0x1E0D27BE8]();
}

uint64_t GSKeyboardRelease()
{
  return MEMORY[0x1E0D27C18]();
}

uint64_t GSKeyboardTranslateKeyExtended()
{
  return MEMORY[0x1E0D27C20]();
}

uint64_t GSMainScreenPixelSize()
{
  return MEMORY[0x1E0D27C48]();
}

uint64_t GSMainScreenScaleFactor()
{
  return MEMORY[0x1E0D27C58]();
}

uint64_t HTLogCommon()
{
  return MEMORY[0x1E0CF3938]();
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAE60](device, *(_QWORD *)&options);
}

Boolean IOHIDDeviceConformsTo(IOHIDDeviceRef device, uint32_t usagePage, uint32_t usage)
{
  return MEMORY[0x1E0CBAE68](device, *(_QWORD *)&usagePage, *(_QWORD *)&usage);
}

CFTypeRef IOHIDDeviceGetProperty(IOHIDDeviceRef device, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBAE88](device, key);
}

CFTypeID IOHIDDeviceGetTypeID(void)
{
  return MEMORY[0x1E0CBAEA8]();
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAEB8](device, *(_QWORD *)&options);
}

void IOHIDDeviceRegisterInputValueCallback(IOHIDDeviceRef device, IOHIDValueCallback callback, void *context)
{
  MEMORY[0x1E0CBAED0](device, callback, context);
}

void IOHIDDeviceUnscheduleFromRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBAF28](device, runLoop, runLoopMode);
}

uint32_t IOHIDElementGetUsage(IOHIDElementRef element)
{
  return MEMORY[0x1E0CBAFC0](element);
}

uint32_t IOHIDElementGetUsagePage(IOHIDElementRef element)
{
  return MEMORY[0x1E0CBAFC8](element);
}

uint64_t IOHIDEventAppendEvent()
{
  return MEMORY[0x1E0CBB008]();
}

uint64_t IOHIDEventCreateAccelerometerEventWithType()
{
  return MEMORY[0x1E0CBB020]();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return MEMORY[0x1E0CBB040]();
}

uint64_t IOHIDEventCreateDigitizerFingerEventWithQuality()
{
  return MEMORY[0x1E0CBB050]();
}

uint64_t IOHIDEventCreateDigitizerStylusEventWithPolarOrientation()
{
  return MEMORY[0x1E0CBB058]();
}

uint64_t IOHIDEventCreateForceStageEvent()
{
  return MEMORY[0x1E0CBB060]();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x1E0CBB078]();
}

uint64_t IOHIDEventCreateMouseEvent()
{
  return MEMORY[0x1E0CBB080]();
}

uint64_t IOHIDEventCreateScrollEvent()
{
  return MEMORY[0x1E0CBB0A8]();
}

uint64_t IOHIDEventCreateTouchSensitiveButtonEvent()
{
  return MEMORY[0x1E0CBB0B0]();
}

uint64_t IOHIDEventCreateVendorDefinedEvent()
{
  return MEMORY[0x1E0CBB0D0]();
}

uint64_t IOHIDEventGetAttributeDataLength()
{
  return MEMORY[0x1E0CBB0E8]();
}

uint64_t IOHIDEventGetAttributeDataPtr()
{
  return MEMORY[0x1E0CBB0F0]();
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1E0CBB0F8]();
}

uint64_t IOHIDEventGetDataValue()
{
  return MEMORY[0x1E0CBB100]();
}

uint64_t IOHIDEventGetEventFlags()
{
  return MEMORY[0x1E0CBB118]();
}

uint64_t IOHIDEventGetFloatMultiple()
{
  return MEMORY[0x1E0CBB120]();
}

uint64_t IOHIDEventGetFloatValue()
{
  return MEMORY[0x1E0CBB128]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetPhase()
{
  return MEMORY[0x1E0CBB148]();
}

uint64_t IOHIDEventGetSenderID()
{
  return MEMORY[0x1E0CBB150]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1E0CBB158]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

uint64_t IOHIDEventSetAttributeData()
{
  return MEMORY[0x1E0CBB190]();
}

uint64_t IOHIDEventSetEventFlags()
{
  return MEMORY[0x1E0CBB1A0]();
}

uint64_t IOHIDEventSetFloatValue()
{
  return MEMORY[0x1E0CBB1A8]();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return MEMORY[0x1E0CBB1B0]();
}

uint64_t IOHIDEventSetSenderID()
{
  return MEMORY[0x1E0CBB1C0]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1E0CBB1E8](client);
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1E0CBB1F0]();
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1E0CBB1F8]();
}

uint64_t IOHIDEventSystemClientDispatchEvent()
{
  return MEMORY[0x1E0CBB200]();
}

uint64_t IOHIDEventSystemClientRegisterDeviceMatchingBlock()
{
  return MEMORY[0x1E0CBB208]();
}

uint64_t IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority()
{
  return MEMORY[0x1E0CBB230]();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return MEMORY[0x1E0CBB250]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1E0CBB268]();
}

uint64_t IOHIDEventSystemClientSetMatchingMultiple()
{
  return MEMORY[0x1E0CBB270]();
}

uint64_t IOHIDEventSystemClientUnregisterEventFilterCallback()
{
  return MEMORY[0x1E0CBB2A0]();
}

uint64_t IOHIDEventSystemClientUnscheduleWithRunLoop()
{
  return MEMORY[0x1E0CBB2C0]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1E0CBB380](manager, *(_QWORD *)&options);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1E0CBB388](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1E0CBB3A0](allocator, *(_QWORD *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1E0CBB3B8](manager, *(_QWORD *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C0](manager, callback, context);
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C8](manager, callback, context);
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBB3E0](manager, runLoop, runLoopMode);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
  MEMORY[0x1E0CBB3F0](manager, matching);
}

void IOHIDManagerSetDeviceMatchingMultiple(IOHIDManagerRef manager, CFArrayRef multiple)
{
  MEMORY[0x1E0CBB3F8](manager, multiple);
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBB428](manager, runLoop, runLoopMode);
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBB4B0](service, key);
}

CFTypeRef IOHIDServiceClientGetRegistryID(IOHIDServiceClientRef service)
{
  return (CFTypeRef)MEMORY[0x1E0CBB4D0](service);
}

IOHIDElementRef IOHIDValueGetElement(IOHIDValueRef value)
{
  return (IOHIDElementRef)MEMORY[0x1E0CBB620](value);
}

CFIndex IOHIDValueGetIntegerValue(IOHIDValueRef value)
{
  return MEMORY[0x1E0CBB628](value);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB718](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1E0D42C60]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1E0D42C78]();
}

uint64_t LMLanguageModelCreateStringForTokenID()
{
  return MEMORY[0x1E0D42C90]();
}

uint64_t LMLanguageModelEnumerateCompletionsForPrefixWithBlock()
{
  return MEMORY[0x1E0D42CA0]();
}

uint64_t LMLanguageModelEnumeratePredictionsWithBlock()
{
  return MEMORY[0x1E0D42CA8]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1E0D42CC0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1E0D42D00]();
}

uint64_t MADisplayFilterPrefGetCategoryEnabled()
{
  return MEMORY[0x1E0CC1C28]();
}

uint64_t MADisplayFilterPrefSetCategoryEnabled()
{
  return MEMORY[0x1E0CC1C50]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1E0DE2B78]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1E0DE2B90]();
}

OSStatus MIDIClientCreateWithBlock(CFStringRef name, MIDIClientRef *outClient, MIDINotifyBlock notifyBlock)
{
  return MEMORY[0x1E0C9E528](name, outClient, notifyBlock);
}

OSStatus MIDIClientDispose(MIDIClientRef client)
{
  return MEMORY[0x1E0C9E530](*(_QWORD *)&client);
}

MIDIEntityRef MIDIDeviceGetEntity(MIDIDeviceRef device, ItemCount entityIndex0)
{
  return MEMORY[0x1E0C9E538](*(_QWORD *)&device, entityIndex0);
}

ItemCount MIDIDeviceGetNumberOfEntities(MIDIDeviceRef device)
{
  return MEMORY[0x1E0C9E540](*(_QWORD *)&device);
}

OSStatus MIDIEndpointGetEntity(MIDIEndpointRef inEndpoint, MIDIEntityRef *outEntity)
{
  return MEMORY[0x1E0C9E548](*(_QWORD *)&inEndpoint, outEntity);
}

MIDIEndpointRef MIDIEntityGetDestination(MIDIEntityRef entity, ItemCount destIndex0)
{
  return MEMORY[0x1E0C9E550](*(_QWORD *)&entity, destIndex0);
}

OSStatus MIDIEntityGetDevice(MIDIEntityRef inEntity, MIDIDeviceRef *outDevice)
{
  return MEMORY[0x1E0C9E558](*(_QWORD *)&inEntity, outDevice);
}

ItemCount MIDIEntityGetNumberOfDestinations(MIDIEntityRef entity)
{
  return MEMORY[0x1E0C9E560](*(_QWORD *)&entity);
}

ItemCount MIDIEntityGetNumberOfSources(MIDIEntityRef entity)
{
  return MEMORY[0x1E0C9E568](*(_QWORD *)&entity);
}

MIDIEndpointRef MIDIEntityGetSource(MIDIEntityRef entity, ItemCount sourceIndex0)
{
  return MEMORY[0x1E0C9E570](*(_QWORD *)&entity, sourceIndex0);
}

MIDIDeviceRef MIDIGetDevice(ItemCount deviceIndex0)
{
  return MEMORY[0x1E0C9E588](deviceIndex0);
}

ItemCount MIDIGetNumberOfDevices(void)
{
  return MEMORY[0x1E0C9E590]();
}

OSStatus MIDIInputPortCreateWithBlock(MIDIClientRef client, CFStringRef portName, MIDIPortRef *outPort, MIDIReadBlock readBlock)
{
  return MEMORY[0x1E0C9E598](*(_QWORD *)&client, portName, outPort, readBlock);
}

OSStatus MIDIObjectGetIntegerProperty(MIDIObjectRef obj, CFStringRef propertyID, SInt32 *outValue)
{
  return MEMORY[0x1E0C9E5A0](*(_QWORD *)&obj, propertyID, outValue);
}

OSStatus MIDIObjectGetStringProperty(MIDIObjectRef obj, CFStringRef propertyID, CFStringRef *str)
{
  return MEMORY[0x1E0C9E5A8](*(_QWORD *)&obj, propertyID, str);
}

OSStatus MIDIPortConnectSource(MIDIPortRef port, MIDIEndpointRef source, void *connRefCon)
{
  return MEMORY[0x1E0C9E5C8](*(_QWORD *)&port, *(_QWORD *)&source, connRefCon);
}

OSStatus MIDIPortDisconnectSource(MIDIPortRef port, MIDIEndpointRef source)
{
  return MEMORY[0x1E0C9E5D0](*(_QWORD *)&port, *(_QWORD *)&source);
}

uint64_t MKBDeviceFormattedForContentProtection()
{
  return MEMORY[0x1E0D4E478]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

uint64_t MSHCreateMIGServerSource()
{
  return MEMORY[0x1E0CF40A8]();
}

uint64_t MSHGetMachPortFromSource()
{
  return MEMORY[0x1E0CF40B0]();
}

uint64_t MSHMIGSourceSetSendOnceCallback()
{
  return MEMORY[0x1E0CF40B8]();
}

uint64_t NLLanguageIdentifierConsumeString()
{
  return MEMORY[0x1E0D17080]();
}

uint64_t NLLanguageIdentifierCreate()
{
  return MEMORY[0x1E0D17088]();
}

uint64_t NLLanguageIdentifierGetTopHypotheses()
{
  return MEMORY[0x1E0D17090]();
}

uint64_t NLLanguageIdentifierRelease()
{
  return MEMORY[0x1E0D170A8]();
}

uint64_t NLLanguageIdentifierSetLanguageHints()
{
  return MEMORY[0x1E0D170C8]();
}

uint64_t NLTaggerCopyTagForCurrentToken()
{
  return MEMORY[0x1E0D17248]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1E0D17250]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1E0D17258]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1E0D17278]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *NSOpenStepRootDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2FD0]();
}

NSPoint NSPointFromString(NSString *aString)
{
  double v1;
  double v2;
  NSPoint result;

  MEMORY[0x1E0CB3028](aString);
  result.y = v2;
  result.x = v1;
  return result;
}

NSRect NSRectFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  NSRect result;

  MEMORY[0x1E0CB3150](aString);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

uint64_t NSStringFromBOOL()
{
  return MEMORY[0x1E0CB31F8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1E0CB3210]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1E0CB3228]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t SWCHLogHW()
{
  return MEMORY[0x1E0CF3A18]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t TTSGetComponentsInNamedSiriVoiceIdentifier()
{
  return MEMORY[0x1E0DBEF70]();
}

uint64_t TTSGetComponentsInNashvilleVoiceIdentifier()
{
  return MEMORY[0x1E0DBEF78]();
}

uint64_t TTSGetComponentsInOldSiriVoiceIdentifier()
{
  return MEMORY[0x1E0DBEF80]();
}

uint64_t TTSSpeechLanguageCanonicalFormToGeneralLanguage()
{
  return MEMORY[0x1E0DBEF88]();
}

uint64_t TTSisSpeakableEmojiString()
{
  return MEMORY[0x1E0DBEF90]();
}

uint64_t VOTBundle()
{
  return MEMORY[0x1E0DBEF98]();
}

uint64_t VOTLogCommon()
{
  return MEMORY[0x1E0CF3A20]();
}

uint64_t _AXAssert()
{
  return MEMORY[0x1E0CF3A38]();
}

uint64_t _AXDarkenSystemColorsApp()
{
  return MEMORY[0x1E0DDD4A8]();
}

uint64_t _AXDarkenSystemColorsGlobal()
{
  return MEMORY[0x1E0DDD4B0]();
}

uint64_t _AXLogWithFacility()
{
  return MEMORY[0x1E0CF3A48]();
}

uint64_t _AXSAXInspectorEnabled()
{
  return MEMORY[0x1E0DDD4B8]();
}

uint64_t _AXSAXInspectorSetEnabled()
{
  return MEMORY[0x1E0DDD4C0]();
}

uint64_t _AXSAccessibilityEnabled()
{
  return MEMORY[0x1E0DDD4D0]();
}

uint64_t _AXSAccessibilityGetBooleaniTunesPreference()
{
  return MEMORY[0x1E0DDD4D8]();
}

uint64_t _AXSAccessibilitySetiTunesPreference()
{
  return MEMORY[0x1E0DDD4F0]();
}

uint64_t _AXSAirPodsDefaultToneVolume()
{
  return MEMORY[0x1E0DDD4F8]();
}

uint64_t _AXSAirPodsHoldDuration()
{
  return MEMORY[0x1E0DDD500]();
}

uint64_t _AXSAirPodsNoiseCancellationWithOneUnit()
{
  return MEMORY[0x1E0DDD508]();
}

uint64_t _AXSAirPodsTapSpeed()
{
  return MEMORY[0x1E0DDD510]();
}

uint64_t _AXSAirPodsToneVolume()
{
  return MEMORY[0x1E0DDD518]();
}

uint64_t _AXSAirPodsVolumeSwipeDuration()
{
  return MEMORY[0x1E0DDD520]();
}

uint64_t _AXSAirPodsVolumeSwipeEnabled()
{
  return MEMORY[0x1E0DDD528]();
}

uint64_t _AXSAppleTVRemoteClickpadTapsForDirectionalNavigationEnabled()
{
  return MEMORY[0x1E0DDD540]();
}

uint64_t _AXSAppleTVScaledUIEnabled()
{
  return MEMORY[0x1E0DDD548]();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return MEMORY[0x1E0DDD550]();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return MEMORY[0x1E0DDD558]();
}

uint64_t _AXSAssistiveTouchEnabled()
{
  return MEMORY[0x1E0DDD560]();
}

uint64_t _AXSAssistiveTouchExtendedKeyboardPredictionsEnabled()
{
  return MEMORY[0x1E0DDD570]();
}

uint64_t _AXSAssistiveTouchExtendedKeyboardPredictionsSetEnabled()
{
  return MEMORY[0x1E0DDD578]();
}

uint64_t _AXSAssistiveTouchHardwareEnabled()
{
  return MEMORY[0x1E0DDD580]();
}

uint64_t _AXSAssistiveTouchScannerEnabled()
{
  return MEMORY[0x1E0DDD588]();
}

uint64_t _AXSAssistiveTouchScannerSetEnabled()
{
  return MEMORY[0x1E0DDD598]();
}

uint64_t _AXSAssistiveTouchSetEnabled()
{
  return MEMORY[0x1E0DDD5A0]();
}

uint64_t _AXSAssistiveTouchSetHardwareEnabled()
{
  return MEMORY[0x1E0DDD5A8]();
}

uint64_t _AXSAssistiveTouchSetUIEnabled()
{
  return MEMORY[0x1E0DDD5B0]();
}

uint64_t _AXSAssistiveTouchUIEnabled()
{
  return MEMORY[0x1E0DDD5B8]();
}

uint64_t _AXSAutomationEnabled()
{
  return MEMORY[0x1E0DDD5E8]();
}

uint64_t _AXSAutomationFauxCollectionViewCellsEnabled()
{
  return MEMORY[0x1E0DDD5F0]();
}

uint64_t _AXSAutomationFauxTableViewCellsEnabled()
{
  return MEMORY[0x1E0DDD5F8]();
}

uint64_t _AXSAutomationHitpointWarpingEnabled()
{
  return MEMORY[0x1E0DDD600]();
}

uint64_t _AXSAutomationLocalizedStringLookupInfoEnabled()
{
  return MEMORY[0x1E0DDD608]();
}

uint64_t _AXSAutomationLocalizedStringLookupInfoSetEnabled()
{
  return MEMORY[0x1E0DDD610]();
}

uint64_t _AXSAutomationPreferredLocalization()
{
  return MEMORY[0x1E0DDD618]();
}

uint64_t _AXSAutomationSetFauxCollectionViewCellsEnabled()
{
  return MEMORY[0x1E0DDD620]();
}

uint64_t _AXSAutomationSetFauxTableViewCellsEnabled()
{
  return MEMORY[0x1E0DDD628]();
}

uint64_t _AXSAutomationSetHitpointWarpingEnabled()
{
  return MEMORY[0x1E0DDD630]();
}

uint64_t _AXSBackTapEnabled()
{
  return MEMORY[0x1E0DDD638]();
}

uint64_t _AXSBackTapSetEnabled()
{
  return MEMORY[0x1E0DDD640]();
}

uint64_t _AXSButtonShapesEnabled()
{
  return MEMORY[0x1E0DDD648]();
}

uint64_t _AXSButtonShapesEnabledApp()
{
  return MEMORY[0x1E0DDD650]();
}

uint64_t _AXSCanDisableApplicationAccessibility()
{
  return MEMORY[0x1E0DDD658]();
}

uint64_t _AXSClarityUIEnabled()
{
  return MEMORY[0x1E0DDD678]();
}

uint64_t _AXSClassicInvertColorsEnabled()
{
  return MEMORY[0x1E0DDD680]();
}

uint64_t _AXSClassicInvertColorsSetEnabled()
{
  return MEMORY[0x1E0DDD690]();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return MEMORY[0x1E0DDD6A0]();
}

uint64_t _AXSCommandAndControlSetEnabled()
{
  return MEMORY[0x1E0DDD6A8]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryName()
{
  return MEMORY[0x1E0DDD6B0]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryNameApp()
{
  return MEMORY[0x1E0DDD6B8]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryNameGlobal()
{
  return MEMORY[0x1E0DDD6C0]();
}

uint64_t _AXSCurrentProcessIsWebContent()
{
  return MEMORY[0x1E0DDD6D0]();
}

uint64_t _AXSDifferentiateWithoutColorEnabledApp()
{
  return MEMORY[0x1E0DDD6E0]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabledApp()
{
  return MEMORY[0x1E0DDD700]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabledGlobal()
{
  return MEMORY[0x1E0DDD708]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1E0DDD710]();
}

uint64_t _AXSEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1E0DDD720]();
}

uint64_t _AXSEnhanceTextTrackingEnabled()
{
  return MEMORY[0x1E0DDD728]();
}

uint64_t _AXSForceTouchEnabled()
{
  return MEMORY[0x1E0DDD748]();
}

uint64_t _AXSForceTouchSensitivity()
{
  return MEMORY[0x1E0DDD750]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1E0DDD760]();
}

uint64_t _AXSFullKeyboardAccessSetEnabled()
{
  return MEMORY[0x1E0DDD770]();
}

uint64_t _AXSGrayscaleEnabled()
{
  return MEMORY[0x1E0DDD788]();
}

uint64_t _AXSGrayscaleSetEnabled()
{
  return MEMORY[0x1E0DDD790]();
}

uint64_t _AXSGuidedAccessEnabled()
{
  return MEMORY[0x1E0DDD798]();
}

uint64_t _AXSHapticMusicEnabled()
{
  return MEMORY[0x1E0DDD7C8]();
}

uint64_t _AXSHeadsetCaseTonesEnabled()
{
  return MEMORY[0x1E0DDD7D0]();
}

uint64_t _AXSHighContrastFocusIndicatorsEnabled()
{
  return MEMORY[0x1E0DDD810]();
}

uint64_t _AXSHomeButtonAssistant()
{
  return MEMORY[0x1E0DDD820]();
}

uint64_t _AXSHoverTextBackgroundOpacity()
{
  return MEMORY[0x1E0DDD838]();
}

uint64_t _AXSHoverTextCopyBackgroundColorData()
{
  return MEMORY[0x1E0DDD840]();
}

uint64_t _AXSHoverTextCopyBorderColorData()
{
  return MEMORY[0x1E0DDD848]();
}

uint64_t _AXSHoverTextCopyContentSize()
{
  return MEMORY[0x1E0DDD850]();
}

uint64_t _AXSHoverTextCopyFontName()
{
  return MEMORY[0x1E0DDD858]();
}

uint64_t _AXSHoverTextCopyInsertionPointColorData()
{
  return MEMORY[0x1E0DDD860]();
}

uint64_t _AXSHoverTextCopyTextColorData()
{
  return MEMORY[0x1E0DDD868]();
}

uint64_t _AXSHoverTextDisplayMode()
{
  return MEMORY[0x1E0DDD870]();
}

uint64_t _AXSHoverTextEnabled()
{
  return MEMORY[0x1E0DDD878]();
}

uint64_t _AXSHoverTextFontSize()
{
  return MEMORY[0x1E0DDD880]();
}

uint64_t _AXSHoverTextSetBackgroundColorData()
{
  return MEMORY[0x1E0DDD888]();
}

uint64_t _AXSHoverTextSetBackgroundOpacity()
{
  return MEMORY[0x1E0DDD890]();
}

uint64_t _AXSHoverTextSetBorderColorData()
{
  return MEMORY[0x1E0DDD898]();
}

uint64_t _AXSHoverTextSetContentSize()
{
  return MEMORY[0x1E0DDD8A0]();
}

uint64_t _AXSHoverTextSetDisplayMode()
{
  return MEMORY[0x1E0DDD8A8]();
}

uint64_t _AXSHoverTextSetEnabled()
{
  return MEMORY[0x1E0DDD8B0]();
}

uint64_t _AXSHoverTextSetFontName()
{
  return MEMORY[0x1E0DDD8B8]();
}

uint64_t _AXSHoverTextSetFontSize()
{
  return MEMORY[0x1E0DDD8C0]();
}

uint64_t _AXSHoverTextSetInsertionPointColorData()
{
  return MEMORY[0x1E0DDD8C8]();
}

uint64_t _AXSHoverTextSetTextColorData()
{
  return MEMORY[0x1E0DDD8D0]();
}

uint64_t _AXSHoverTextTypingCopyAutocorrectedTextColorData()
{
  return MEMORY[0x1E0DDD8D8]();
}

uint64_t _AXSHoverTextTypingCopyBackgroundColorData()
{
  return MEMORY[0x1E0DDD8E0]();
}

uint64_t _AXSHoverTextTypingCopyBorderColorData()
{
  return MEMORY[0x1E0DDD8E8]();
}

uint64_t _AXSHoverTextTypingCopyFontName()
{
  return MEMORY[0x1E0DDD8F0]();
}

uint64_t _AXSHoverTextTypingCopyInsertionPointColorData()
{
  return MEMORY[0x1E0DDD8F8]();
}

uint64_t _AXSHoverTextTypingCopyMisspelledTextColorData()
{
  return MEMORY[0x1E0DDD900]();
}

uint64_t _AXSHoverTextTypingCopyTextColorData()
{
  return MEMORY[0x1E0DDD908]();
}

uint64_t _AXSHoverTextTypingCopyTextStyle()
{
  return MEMORY[0x1E0DDD910]();
}

uint64_t _AXSHoverTextTypingDisplayMode()
{
  return MEMORY[0x1E0DDD918]();
}

uint64_t _AXSHoverTextTypingEnabled()
{
  return MEMORY[0x1E0DDD920]();
}

uint64_t _AXSHoverTextTypingSetAutocorrectedTextColorData()
{
  return MEMORY[0x1E0DDD928]();
}

uint64_t _AXSHoverTextTypingSetBackgroundColorData()
{
  return MEMORY[0x1E0DDD930]();
}

uint64_t _AXSHoverTextTypingSetBorderColorData()
{
  return MEMORY[0x1E0DDD938]();
}

uint64_t _AXSHoverTextTypingSetDisplayMode()
{
  return MEMORY[0x1E0DDD940]();
}

uint64_t _AXSHoverTextTypingSetEnabled()
{
  return MEMORY[0x1E0DDD948]();
}

uint64_t _AXSHoverTextTypingSetFontName()
{
  return MEMORY[0x1E0DDD950]();
}

uint64_t _AXSHoverTextTypingSetInsertionPointColorData()
{
  return MEMORY[0x1E0DDD958]();
}

uint64_t _AXSHoverTextTypingSetMisspelledTextColorData()
{
  return MEMORY[0x1E0DDD960]();
}

uint64_t _AXSHoverTextTypingSetTextColorData()
{
  return MEMORY[0x1E0DDD968]();
}

uint64_t _AXSHoverTextTypingSetTextStyle()
{
  return MEMORY[0x1E0DDD970]();
}

uint64_t _AXSInUnitTestMode()
{
  return MEMORY[0x1E0DDD980]();
}

uint64_t _AXSIncreaseBrightnessFloorEnabled()
{
  return MEMORY[0x1E0DDD988]();
}

uint64_t _AXSIncreaseButtonLegibility()
{
  return MEMORY[0x1E0DDD990]();
}

uint64_t _AXSIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1E0DDD998]();
}

uint64_t _AXSInvertColorsEnabled()
{
  return MEMORY[0x1E0DDD9A0]();
}

uint64_t _AXSInvertColorsEnabledApp()
{
  return MEMORY[0x1E0DDD9B0]();
}

uint64_t _AXSInvertColorsEnabledGlobalCached()
{
  return MEMORY[0x1E0DDD9B8]();
}

uint64_t _AXSInvertColorsSetEnabled()
{
  return MEMORY[0x1E0DDD9C0]();
}

uint64_t _AXSIsNonUIBuild()
{
  return MEMORY[0x1E0DDD9D0]();
}

uint64_t _AXSKeyRepeatEnabled()
{
  return MEMORY[0x1E0DDD9E0]();
}

uint64_t _AXSLargeTextUsesExtendedRange()
{
  return MEMORY[0x1E0DDD9F0]();
}

uint64_t _AXSLeftRightAudioBalance()
{
  return MEMORY[0x1E0DDD9F8]();
}

uint64_t _AXSLetterFeedbackEnabled()
{
  return MEMORY[0x1E0DDDA00]();
}

uint64_t _AXSLiveSpeechEnabled()
{
  return MEMORY[0x1E0DDDA10]();
}

uint64_t _AXSLiveSpeechSetEnabled()
{
  return MEMORY[0x1E0DDDA18]();
}

uint64_t _AXSLiveTranscriptionEnabled()
{
  return MEMORY[0x1E0DDDA20]();
}

uint64_t _AXSLocalizationCaptionMode()
{
  return MEMORY[0x1E0DDDA30]();
}

uint64_t _AXSMonoAudioEnabled()
{
  return MEMORY[0x1E0DDDA50]();
}

uint64_t _AXSMonoAudioSetEnabled()
{
  return MEMORY[0x1E0DDDA58]();
}

uint64_t _AXSMossdeepEnabled()
{
  return MEMORY[0x1E0DDDA68]();
}

uint64_t _AXSMotionCuesActive()
{
  return MEMORY[0x1E0DDDA70]();
}

uint64_t _AXSOnDeviceEyeTrackingEnabled()
{
  return MEMORY[0x1E0DDDA80]();
}

uint64_t _AXSPhoneticFeedbackEnabled()
{
  return MEMORY[0x1E0DDDA98]();
}

uint64_t _AXSPhotosensitiveMitigationEnabled()
{
  return MEMORY[0x1E0DDDAA0]();
}

uint64_t _AXSPhotosensitiveMitigationSetEnabled()
{
  return MEMORY[0x1E0DDDAA8]();
}

uint64_t _AXSQuickSpeakCopyPreferredLocalesForLanguages()
{
  return MEMORY[0x1E0DDDAE8]();
}

uint64_t _AXSQuickSpeakEnabled()
{
  return MEMORY[0x1E0DDDAF0]();
}

uint64_t _AXSQuickSpeakHighlightTextEnabled()
{
  return MEMORY[0x1E0DDDAF8]();
}

uint64_t _AXSQuickTypePredictionFeedbackEnabled()
{
  return MEMORY[0x1E0DDDB00]();
}

uint64_t _AXSReduceMotionAutoplayVideoPreviewsEnabled()
{
  return MEMORY[0x1E0DDDB18]();
}

uint64_t _AXSReduceMotionEnabledApp()
{
  return MEMORY[0x1E0DDDB28]();
}

uint64_t _AXSReduceMotionEnabledGlobal()
{
  return MEMORY[0x1E0DDDB30]();
}

uint64_t _AXSReduceMotionReduceSlideTransitionsEnabledApp()
{
  return MEMORY[0x1E0DDDB40]();
}

uint64_t _AXSReduceWhitePointEnabled()
{
  return MEMORY[0x1E0DDDB48]();
}

uint64_t _AXSScreenFilterSetShowInitialAlert()
{
  return MEMORY[0x1E0DDDB60]();
}

uint64_t _AXSSetAccessibilityEnabled()
{
  return MEMORY[0x1E0DDDB68]();
}

uint64_t _AXSSetAirPodsDefaultToneVolume()
{
  return MEMORY[0x1E0DDDB70]();
}

uint64_t _AXSSetAirPodsHoldDuration()
{
  return MEMORY[0x1E0DDDB78]();
}

uint64_t _AXSSetAirPodsNoiseCancellationWithOneUnit()
{
  return MEMORY[0x1E0DDDB80]();
}

uint64_t _AXSSetAirPodsTapSpeed()
{
  return MEMORY[0x1E0DDDB88]();
}

uint64_t _AXSSetAirPodsToneVolume()
{
  return MEMORY[0x1E0DDDB90]();
}

uint64_t _AXSSetAirPodsVolumeSwipeDuration()
{
  return MEMORY[0x1E0DDDB98]();
}

uint64_t _AXSSetAirPodsVolumeSwipeEnabled()
{
  return MEMORY[0x1E0DDDBA0]();
}

uint64_t _AXSSetAppleTVRemoteClickpadTapsForDirectionalNavigationEnabled()
{
  return MEMORY[0x1E0DDDBA8]();
}

uint64_t _AXSSetAppleTVScaledUIEnabled()
{
  return MEMORY[0x1E0DDDBB0]();
}

uint64_t _AXSSetAutomationEnabled()
{
  return MEMORY[0x1E0DDDBC8]();
}

uint64_t _AXSSetButtonShapesEnabled()
{
  return MEMORY[0x1E0DDDBD0]();
}

uint64_t _AXSSetDarkenSystemColors()
{
  return MEMORY[0x1E0DDDBD8]();
}

uint64_t _AXSSetEnhanceBackgroundContrastEnabled()
{
  return MEMORY[0x1E0DDDBE8]();
}

uint64_t _AXSSetEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1E0DDDBF0]();
}

uint64_t _AXSSetEnhanceTextTrackingEnabled()
{
  return MEMORY[0x1E0DDDC00]();
}

uint64_t _AXSSetHapticMusicEnabled()
{
  return MEMORY[0x1E0DDDC10]();
}

uint64_t _AXSSetHeadsetCaseTonesEnabled()
{
  return MEMORY[0x1E0DDDC18]();
}

uint64_t _AXSSetHighContrastFocusIndicatorsEnabled()
{
  return MEMORY[0x1E0DDDC20]();
}

uint64_t _AXSSetIncreaseButtonLegibility()
{
  return MEMORY[0x1E0DDDC28]();
}

uint64_t _AXSSetLargeTextUsesExtendedRange()
{
  return MEMORY[0x1E0DDDC38]();
}

uint64_t _AXSSetLeftRightAudioBalance()
{
  return MEMORY[0x1E0DDDC40]();
}

uint64_t _AXSSetLetterFeedbackEnabled()
{
  return MEMORY[0x1E0DDDC48]();
}

uint64_t _AXSSetLocalizationCaptionModeEnabled()
{
  return MEMORY[0x1E0DDDC50]();
}

uint64_t _AXSSetMotionCuesModeAndShowBanner()
{
  return MEMORY[0x1E0DDDC58]();
}

uint64_t _AXSSetPhoneticFeedbackEnabled()
{
  return MEMORY[0x1E0DDDC60]();
}

uint64_t _AXSSetPreferredContentSizeCategoryName()
{
  return MEMORY[0x1E0DDDC68]();
}

uint64_t _AXSSetQuickTypePredictionFeedbackEnabled()
{
  return MEMORY[0x1E0DDDC70]();
}

uint64_t _AXSSetReduceMotionAutoplayVideoPreviewsEnabled()
{
  return MEMORY[0x1E0DDDC78]();
}

uint64_t _AXSSetReduceMotionEnabled()
{
  return MEMORY[0x1E0DDDC80]();
}

uint64_t _AXSSetReduceWhitePointEnabled()
{
  return MEMORY[0x1E0DDDC90]();
}

uint64_t _AXSSetSiriSemanticContextEnabled()
{
  return MEMORY[0x1E0DDDC98]();
}

uint64_t _AXSSetSpeakThisEnabled()
{
  return MEMORY[0x1E0DDDCA8]();
}

uint64_t _AXSSetTripleClickOptions()
{
  return MEMORY[0x1E0DDDCB0]();
}

uint64_t _AXSSetWordFeedbackEnabled()
{
  return MEMORY[0x1E0DDDCC0]();
}

uint64_t _AXSSiriSemanticContextEnabled()
{
  return MEMORY[0x1E0DDDCE8]();
}

uint64_t _AXSSpeakThisEnabled()
{
  return MEMORY[0x1E0DDDD08]();
}

uint64_t _AXSSwitchControlExtendedKeyboardPredictionsEnabled()
{
  return MEMORY[0x1E0DDDD28]();
}

uint64_t _AXSSwitchControlExtendedKeyboardPredictionsSetEnabled()
{
  return MEMORY[0x1E0DDDD30]();
}

uint64_t _AXSTripleClickAddOption()
{
  return MEMORY[0x1E0DDDD38]();
}

uint64_t _AXSTripleClickCopyOptions()
{
  return MEMORY[0x1E0DDDD50]();
}

uint64_t _AXSTripleClickRemoveOption()
{
  return MEMORY[0x1E0DDDD58]();
}

uint64_t _AXSTwiceRemoteScreenEnabled()
{
  return MEMORY[0x1E0DDDD60]();
}

uint64_t _AXSTwiceRemoteScreenPlatform()
{
  return MEMORY[0x1E0DDDD68]();
}

uint64_t _AXSTwiceRemoteScreenSetEnabled()
{
  return MEMORY[0x1E0DDDD70]();
}

uint64_t _AXSTwiceRemoteScreenSetPlatform()
{
  return MEMORY[0x1E0DDDD78]();
}

uint64_t _AXSVoiceOverTouchBrailleContractionMode()
{
  return MEMORY[0x1E0DDDD98]();
}

uint64_t _AXSVoiceOverTouchBrailleEightDotMode()
{
  return MEMORY[0x1E0DDDDA0]();
}

uint64_t _AXSVoiceOverTouchBrailleMasterStatusCellIndex()
{
  return MEMORY[0x1E0DDDDA8]();
}

uint64_t _AXSVoiceOverTouchBrailleVirtualStatusAlignment()
{
  return MEMORY[0x1E0DDDDB0]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleBluetoothDisplay()
{
  return MEMORY[0x1E0DDDDB8]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleLanguageRotorItems()
{
  return MEMORY[0x1E0DDDDC0]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleTableIdentifier()
{
  return MEMORY[0x1E0DDDDC8]();
}

uint64_t _AXSVoiceOverTouchCopyLanguageRotorItems()
{
  return MEMORY[0x1E0DDDDD0]();
}

uint64_t _AXSVoiceOverTouchCopyTactileGraphicsDisplay()
{
  return MEMORY[0x1E0DDDDD8]();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return MEMORY[0x1E0DDDDE0]();
}

uint64_t _AXSVoiceOverTouchEnabledThroughAccessory()
{
  return MEMORY[0x1E0DDDDF0]();
}

uint64_t _AXSVoiceOverTouchLanguageRotorItemsExist()
{
  return MEMORY[0x1E0DDDDF8]();
}

uint64_t _AXSVoiceOverTouchScreenCurtainEnabled()
{
  return MEMORY[0x1E0DDDE00]();
}

uint64_t _AXSVoiceOverTouchSetBrailleBluetoothDisplay()
{
  return MEMORY[0x1E0DDDE08]();
}

uint64_t _AXSVoiceOverTouchSetBrailleContractionMode()
{
  return MEMORY[0x1E0DDDE10]();
}

uint64_t _AXSVoiceOverTouchSetBrailleEightDotMode()
{
  return MEMORY[0x1E0DDDE18]();
}

uint64_t _AXSVoiceOverTouchSetBrailleLanguageRotorItems()
{
  return MEMORY[0x1E0DDDE20]();
}

uint64_t _AXSVoiceOverTouchSetBrailleMasterStatusCellIndex()
{
  return MEMORY[0x1E0DDDE28]();
}

uint64_t _AXSVoiceOverTouchSetBrailleTableIdentifier()
{
  return MEMORY[0x1E0DDDE30]();
}

uint64_t _AXSVoiceOverTouchSetBrailleVirtualStatusAlignment()
{
  return MEMORY[0x1E0DDDE38]();
}

uint64_t _AXSVoiceOverTouchSetEnabled()
{
  return MEMORY[0x1E0DDDE40]();
}

uint64_t _AXSVoiceOverTouchSetEnabledThroughAccessory()
{
  return MEMORY[0x1E0DDDE58]();
}

uint64_t _AXSVoiceOverTouchSetLanguageRotorItems()
{
  return MEMORY[0x1E0DDDE60]();
}

uint64_t _AXSVoiceOverTouchSetScreenCurtainEnabled()
{
  return MEMORY[0x1E0DDDE68]();
}

uint64_t _AXSVoiceOverTouchSetTypingMode()
{
  return MEMORY[0x1E0DDDE70]();
}

uint64_t _AXSVoiceOverTouchSetUIEnabled()
{
  return MEMORY[0x1E0DDDE78]();
}

uint64_t _AXSVoiceOverTouchSetUsageConfirmed()
{
  return MEMORY[0x1E0DDDE80]();
}

uint64_t _AXSVoiceOverTouchSetVolume()
{
  return MEMORY[0x1E0DDDE88]();
}

uint64_t _AXSVoiceOverTouchTypingMode()
{
  return MEMORY[0x1E0DDDE98]();
}

uint64_t _AXSVoiceOverTouchUIEnabled()
{
  return MEMORY[0x1E0DDDEA0]();
}

uint64_t _AXSVoiceOverTouchUsageConfirmed()
{
  return MEMORY[0x1E0DDDEA8]();
}

uint64_t _AXSVoiceOverTouchVolume()
{
  return MEMORY[0x1E0DDDEB0]();
}

uint64_t _AXSWatchControlEnabled()
{
  return MEMORY[0x1E0DDDEC0]();
}

uint64_t _AXSWordFeedbackEnabled()
{
  return MEMORY[0x1E0DDDEC8]();
}

uint64_t _AXSZoomTouchEnabled()
{
  return MEMORY[0x1E0DDDED8]();
}

uint64_t _AXSZoomTouchSetEnabled()
{
  return MEMORY[0x1E0DDDEE0]();
}

uint64_t _AXSZoomTouchSetSmoothScalingDisabled()
{
  return MEMORY[0x1E0DDDEE8]();
}

uint64_t _AXSZoomTouchSetToggledByPreferenceSwitch()
{
  return MEMORY[0x1E0DDDEF0]();
}

uint64_t _AXSZoomTouchSetToggledByVoiceOver()
{
  return MEMORY[0x1E0DDDEF8]();
}

uint64_t _AXSZoomTouchSmoothScalingDisabled()
{
  return MEMORY[0x1E0DDDF00]();
}

uint64_t _AXSZoomTouchToggledByPreferenceSwitch()
{
  return MEMORY[0x1E0DDDF08]();
}

uint64_t _AXSZoomTouchToggledByVoiceOver()
{
  return MEMORY[0x1E0DDDF10]();
}

uint64_t _AXStringForArgs()
{
  return MEMORY[0x1E0CF3A50]();
}

uint64_t _AXUIElementCreateAppElementWithPid()
{
  return MEMORY[0x1E0CF4380]();
}

uint64_t _AXUIElementCreateWithPIDAndID()
{
  return MEMORY[0x1E0CF4390]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x1E0C99F70]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t __AXStringForVariables()
{
  return MEMORY[0x1E0CF43D0]();
}

uint64_t __UIAccessibilityCastAsClass()
{
  return MEMORY[0x1E0CF3A58]();
}

uint64_t __UIAccessibilityGetAssociatedBool()
{
  return MEMORY[0x1E0CF3A68]();
}

uint64_t __UIAccessibilitySafeClass()
{
  return MEMORY[0x1E0CF3A98]();
}

uint64_t __UIAccessibilitySetAssociatedBool()
{
  return MEMORY[0x1E0CF3AA0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1E0C816F8](*(_QWORD *)&bp, service_name, sp);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1E0C81708](*(_QWORD *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1E0C81710]();
}

uint64_t bootstrap_register2()
{
  return MEMORY[0x1E0C81728]();
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return (const char *)MEMORY[0x1E0C81730](*(_QWORD *)&r);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82CF8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1E0C83D58](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1E0C83D78](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&flavor, port_info, *(_QWORD *)&port_infoCnt);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C840E8](*(_QWORD *)&reply_port);
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
  MEMORY[0x1E0C840F8](a1, a2);
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1E0C84100]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C84110](*(_QWORD *)&reply_port);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C50](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1E0DE80B0](p);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int32_t u_charName(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE5970](*(_QWORD *)&code, *(_QWORD *)&nameChoice, buffer, *(_QWORD *)&bufferLength, pErrorCode);
}

uint64_t uldn_close()
{
  return MEMORY[0x1E0DE6300]();
}

uint64_t uldn_keyValueDisplayName()
{
  return MEMORY[0x1E0DE6308]();
}

uint64_t uldn_openForContext()
{
  return MEMORY[0x1E0DE6328]();
}

uint64_t ulistfmt_close()
{
  return MEMORY[0x1E0DE6348]();
}

uint64_t ulistfmt_format()
{
  return MEMORY[0x1E0DE6358]();
}

uint64_t ulistfmt_open()
{
  return MEMORY[0x1E0DE6368]();
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

